
src/kernel:     file format elf64-littleriscv


Disassembly of section .text:

0000000080200000 <_entry>:
    80200000:	01018297          	auipc	t0,0x1018
    80200004:	05028293          	addi	t0,t0,80 # 81218050 <__first_boot_magic>
    80200008:	0002b303          	ld	t1,0(t0)
    8020000c:	6399                	lui	t2,0x6
    8020000e:	a5a3839b          	addiw	t2,t2,-1446
    80200012:	00731863          	bne	t1,t2,80200022 <_secondary_boot>
    80200016:	01041117          	auipc	sp,0x1041
    8020001a:	fea10113          	addi	sp,sp,-22 # 81241000 <bcache>
    8020001e:	7930a0ef          	jal	ra,8020afb0 <__get_boot_hartid>

0000000080200022 <_secondary_boot>:
    80200022:	00000293          	li	t0,0
    80200026:	00150293          	addi	t0,a0,1
    8020002a:	02be                	slli	t0,t0,0xf
    8020002c:	01019117          	auipc	sp,0x1019
    80200030:	fd410113          	addi	sp,sp,-44 # 81219000 <boot_stack>
    80200034:	9116                	add	sp,sp,t0
    80200036:	5970a0ef          	jal	ra,8020adcc <main>

000000008020003a <loop>:
    8020003a:	a001                	j	8020003a <loop>

000000008020003c <binit>:

extern struct fs FatFs[FSNUM];
extern int disk_init_flag;
void
binit(void)
{
    8020003c:	7139                	addi	sp,sp,-64
    8020003e:	fc06                	sd	ra,56(sp)
    80200040:	f822                	sd	s0,48(sp)
    80200042:	f426                	sd	s1,40(sp)
    80200044:	f04a                	sd	s2,32(sp)
    80200046:	ec4e                	sd	s3,24(sp)
    80200048:	e852                	sd	s4,16(sp)
    8020004a:	e456                	sd	s5,8(sp)
    8020004c:	0080                	addi	s0,sp,64
  struct buf *b;

  initlock(&bcache.lock, "bcache");
    8020004e:	00014597          	auipc	a1,0x14
    80200052:	fb258593          	addi	a1,a1,-78 # 80214000 <rodata_start>
    80200056:	01041517          	auipc	a0,0x1041
    8020005a:	faa50513          	addi	a0,a0,-86 # 81241000 <bcache>
    8020005e:	00009097          	auipc	ra,0x9
    80200062:	e38080e7          	jalr	-456(ra) # 80208e96 <initlock>
  disk_init_flag = 0;
    80200066:	0104a797          	auipc	a5,0x104a
    8020006a:	1207ad23          	sw	zero,314(a5) # 8124a1a0 <disk_init_flag>
  // Create linked list of buffers
  bcache.head.prev = &bcache.head;
    8020006e:	01045797          	auipc	a5,0x1045
    80200072:	f9278793          	addi	a5,a5,-110 # 81245000 <bcache+0x4000>
    80200076:	01045717          	auipc	a4,0x1045
    8020007a:	5f270713          	addi	a4,a4,1522 # 81245668 <bcache+0x4668>
    8020007e:	6ae7b823          	sd	a4,1712(a5)
  bcache.head.next = &bcache.head;
    80200082:	6ae7bc23          	sd	a4,1720(a5)
  for(b = bcache.buf; b < bcache.buf+NBUF; b++){
    80200086:	01041497          	auipc	s1,0x1041
    8020008a:	f9248493          	addi	s1,s1,-110 # 81241018 <bcache+0x18>
    b->valid= 0;
    b->refcnt = 0;
    b->sectorno = ~0;
    8020008e:	5a7d                	li	s4,-1
    b->dev = ~0;
    b->next = bcache.head.next;
    80200090:	893e                	mv	s2,a5
    b->prev = &bcache.head;
    80200092:	89ba                	mv	s3,a4
    initsleeplock(&b->lock, "buffer");
    80200094:	00014a97          	auipc	s5,0x14
    80200098:	f74a8a93          	addi	s5,s5,-140 # 80214008 <rodata_start+0x8>
    b->valid= 0;
    8020009c:	0004a023          	sw	zero,0(s1)
    b->refcnt = 0;
    802000a0:	0404a023          	sw	zero,64(s1)
    b->sectorno = ~0;
    802000a4:	0144a623          	sw	s4,12(s1)
    b->dev = ~0;
    802000a8:	0144a423          	sw	s4,8(s1)
    b->next = bcache.head.next;
    802000ac:	6b893783          	ld	a5,1720(s2)
    802000b0:	e8bc                	sd	a5,80(s1)
    b->prev = &bcache.head;
    802000b2:	0534b423          	sd	s3,72(s1)
    initsleeplock(&b->lock, "buffer");
    802000b6:	85d6                	mv	a1,s5
    802000b8:	01048513          	addi	a0,s1,16
    802000bc:	00009097          	auipc	ra,0x9
    802000c0:	eba080e7          	jalr	-326(ra) # 80208f76 <initsleeplock>
    bcache.head.next->prev = b;
    802000c4:	6b893783          	ld	a5,1720(s2)
    802000c8:	e7a4                	sd	s1,72(a5)
    bcache.head.next = b;
    802000ca:	6a993c23          	sd	s1,1720(s2)
  for(b = bcache.buf; b < bcache.buf+NBUF; b++){
    802000ce:	25848493          	addi	s1,s1,600
    802000d2:	fd3495e3          	bne	s1,s3,8020009c <binit+0x60>
  }
  #ifdef DEBUG
  printf("binit\n");
    802000d6:	00014517          	auipc	a0,0x14
    802000da:	f3a50513          	addi	a0,a0,-198 # 80214010 <rodata_start+0x10>
    802000de:	00009097          	auipc	ra,0x9
    802000e2:	1b6080e7          	jalr	438(ra) # 80209294 <printf>
  #endif
}
    802000e6:	70e2                	ld	ra,56(sp)
    802000e8:	7442                	ld	s0,48(sp)
    802000ea:	74a2                	ld	s1,40(sp)
    802000ec:	7902                	ld	s2,32(sp)
    802000ee:	69e2                	ld	s3,24(sp)
    802000f0:	6a42                	ld	s4,16(sp)
    802000f2:	6aa2                	ld	s5,8(sp)
    802000f4:	6121                	addi	sp,sp,64
    802000f6:	8082                	ret

00000000802000f8 <bread>:
  panic("bget: no buffers");
}

// Return a locked buf with the contents of the indicated block.
struct buf* 
bread(uint dev, uint sectorno) {
    802000f8:	7179                	addi	sp,sp,-48
    802000fa:	f406                	sd	ra,40(sp)
    802000fc:	f022                	sd	s0,32(sp)
    802000fe:	ec26                	sd	s1,24(sp)
    80200100:	e84a                	sd	s2,16(sp)
    80200102:	e44e                	sd	s3,8(sp)
    80200104:	1800                	addi	s0,sp,48
    80200106:	892a                	mv	s2,a0
    80200108:	89ae                	mv	s3,a1
  acquire(&bcache.lock);
    8020010a:	01041517          	auipc	a0,0x1041
    8020010e:	ef650513          	addi	a0,a0,-266 # 81241000 <bcache>
    80200112:	00009097          	auipc	ra,0x9
    80200116:	dc8080e7          	jalr	-568(ra) # 80208eda <acquire>
  for(b = bcache.head.next; b != &bcache.head; b = b->next){
    8020011a:	01045497          	auipc	s1,0x1045
    8020011e:	59e4b483          	ld	s1,1438(s1) # 812456b8 <bcache+0x46b8>
    80200122:	01045797          	auipc	a5,0x1045
    80200126:	54678793          	addi	a5,a5,1350 # 81245668 <bcache+0x4668>
    8020012a:	02f48f63          	beq	s1,a5,80200168 <bread+0x70>
    8020012e:	873e                	mv	a4,a5
    80200130:	a021                	j	80200138 <bread+0x40>
    80200132:	68a4                	ld	s1,80(s1)
    80200134:	02e48a63          	beq	s1,a4,80200168 <bread+0x70>
    if(b->dev == dev && b->sectorno == sectorno){
    80200138:	449c                	lw	a5,8(s1)
    8020013a:	ff279ce3          	bne	a5,s2,80200132 <bread+0x3a>
    8020013e:	44dc                	lw	a5,12(s1)
    80200140:	ff3799e3          	bne	a5,s3,80200132 <bread+0x3a>
      b->refcnt++;
    80200144:	40bc                	lw	a5,64(s1)
    80200146:	2785                	addiw	a5,a5,1
    80200148:	c0bc                	sw	a5,64(s1)
      release(&bcache.lock);
    8020014a:	01041517          	auipc	a0,0x1041
    8020014e:	eb650513          	addi	a0,a0,-330 # 81241000 <bcache>
    80200152:	00009097          	auipc	ra,0x9
    80200156:	ddc080e7          	jalr	-548(ra) # 80208f2e <release>
      acquiresleep(&b->lock);
    8020015a:	01048513          	addi	a0,s1,16
    8020015e:	00009097          	auipc	ra,0x9
    80200162:	e52080e7          	jalr	-430(ra) # 80208fb0 <acquiresleep>
      return b;
    80200166:	a8b9                	j	802001c4 <bread+0xcc>
  for(b = bcache.head.prev; b != &bcache.head; b = b->prev){
    80200168:	01045497          	auipc	s1,0x1045
    8020016c:	5484b483          	ld	s1,1352(s1) # 812456b0 <bcache+0x46b0>
    80200170:	01045797          	auipc	a5,0x1045
    80200174:	4f878793          	addi	a5,a5,1272 # 81245668 <bcache+0x4668>
    80200178:	00f48863          	beq	s1,a5,80200188 <bread+0x90>
    8020017c:	873e                	mv	a4,a5
    if(b->refcnt == 0) {
    8020017e:	40bc                	lw	a5,64(s1)
    80200180:	cf81                	beqz	a5,80200198 <bread+0xa0>
  for(b = bcache.head.prev; b != &bcache.head; b = b->prev){
    80200182:	64a4                	ld	s1,72(s1)
    80200184:	fee49de3          	bne	s1,a4,8020017e <bread+0x86>
  panic("bget: no buffers");
    80200188:	00014517          	auipc	a0,0x14
    8020018c:	e9050513          	addi	a0,a0,-368 # 80214018 <rodata_start+0x18>
    80200190:	00009097          	auipc	ra,0x9
    80200194:	0ba080e7          	jalr	186(ra) # 8020924a <panic>
      b->dev = dev;
    80200198:	0124a423          	sw	s2,8(s1)
      b->sectorno = sectorno;
    8020019c:	0134a623          	sw	s3,12(s1)
      b->valid = 0;
    802001a0:	0004a023          	sw	zero,0(s1)
      b->refcnt = 1;
    802001a4:	4785                	li	a5,1
    802001a6:	c0bc                	sw	a5,64(s1)
      release(&bcache.lock);
    802001a8:	01041517          	auipc	a0,0x1041
    802001ac:	e5850513          	addi	a0,a0,-424 # 81241000 <bcache>
    802001b0:	00009097          	auipc	ra,0x9
    802001b4:	d7e080e7          	jalr	-642(ra) # 80208f2e <release>
      acquiresleep(&b->lock);
    802001b8:	01048513          	addi	a0,s1,16
    802001bc:	00009097          	auipc	ra,0x9
    802001c0:	df4080e7          	jalr	-524(ra) # 80208fb0 <acquiresleep>
  struct buf *b;
  b = bget(dev, sectorno);

  if (!b->valid) {
    802001c4:	409c                	lw	a5,0(s1)
    802001c6:	e79d                	bnez	a5,802001f4 <bread+0xfc>
    FatFs[dev].disk_read(b,FatFs[dev].image);
    802001c8:	1902                	slli	s2,s2,0x20
    802001ca:	02095913          	srli	s2,s2,0x20
    802001ce:	6715                	lui	a4,0x5
    802001d0:	9b870513          	addi	a0,a4,-1608 # 49b8 <_entry-0x801fb648>
    802001d4:	02a90933          	mul	s2,s2,a0
    802001d8:	01057797          	auipc	a5,0x1057
    802001dc:	9f878793          	addi	a5,a5,-1544 # 81256bd0 <FatFs>
    802001e0:	993e                	add	s2,s2,a5
    802001e2:	974a                	add	a4,a4,s2
    802001e4:	9a873783          	ld	a5,-1624(a4)
    802001e8:	00893583          	ld	a1,8(s2)
    802001ec:	8526                	mv	a0,s1
    802001ee:	9782                	jalr	a5
    b->valid = 1;
    802001f0:	4785                	li	a5,1
    802001f2:	c09c                	sw	a5,0(s1)
  }
  
  return b;
}
    802001f4:	8526                	mv	a0,s1
    802001f6:	70a2                	ld	ra,40(sp)
    802001f8:	7402                	ld	s0,32(sp)
    802001fa:	64e2                	ld	s1,24(sp)
    802001fc:	6942                	ld	s2,16(sp)
    802001fe:	69a2                	ld	s3,8(sp)
    80200200:	6145                	addi	sp,sp,48
    80200202:	8082                	ret

0000000080200204 <bwrite>:

// Write b's contents to disk.  Must be locked.
void 
bwrite(uint dev, struct buf *b) {
    80200204:	1101                	addi	sp,sp,-32
    80200206:	ec06                	sd	ra,24(sp)
    80200208:	e822                	sd	s0,16(sp)
    8020020a:	e426                	sd	s1,8(sp)
    8020020c:	e04a                	sd	s2,0(sp)
    8020020e:	1000                	addi	s0,sp,32
    80200210:	84aa                	mv	s1,a0
    80200212:	892e                	mv	s2,a1

  if(!holdingsleep(&b->lock))
    80200214:	01058513          	addi	a0,a1,16
    80200218:	00009097          	auipc	ra,0x9
    8020021c:	e26080e7          	jalr	-474(ra) # 8020903e <holdingsleep>
    80200220:	c915                	beqz	a0,80200254 <bwrite+0x50>
    panic("bwrite");

  FatFs[dev].disk_write(b,FatFs[dev].image);
    80200222:	02049513          	slli	a0,s1,0x20
    80200226:	9101                	srli	a0,a0,0x20
    80200228:	6795                	lui	a5,0x5
    8020022a:	9b878493          	addi	s1,a5,-1608 # 49b8 <_entry-0x801fb648>
    8020022e:	02950533          	mul	a0,a0,s1
    80200232:	01057497          	auipc	s1,0x1057
    80200236:	99e48493          	addi	s1,s1,-1634 # 81256bd0 <FatFs>
    8020023a:	9526                	add	a0,a0,s1
    8020023c:	97aa                	add	a5,a5,a0
    8020023e:	9b07b783          	ld	a5,-1616(a5)
    80200242:	650c                	ld	a1,8(a0)
    80200244:	854a                	mv	a0,s2
    80200246:	9782                	jalr	a5
}
    80200248:	60e2                	ld	ra,24(sp)
    8020024a:	6442                	ld	s0,16(sp)
    8020024c:	64a2                	ld	s1,8(sp)
    8020024e:	6902                	ld	s2,0(sp)
    80200250:	6105                	addi	sp,sp,32
    80200252:	8082                	ret
    panic("bwrite");
    80200254:	00014517          	auipc	a0,0x14
    80200258:	ddc50513          	addi	a0,a0,-548 # 80214030 <rodata_start+0x30>
    8020025c:	00009097          	auipc	ra,0x9
    80200260:	fee080e7          	jalr	-18(ra) # 8020924a <panic>

0000000080200264 <brelse>:

// Release a locked buffer.
// Move to the head of the most-recently-used list.
void
brelse(struct buf *b)
{
    80200264:	1101                	addi	sp,sp,-32
    80200266:	ec06                	sd	ra,24(sp)
    80200268:	e822                	sd	s0,16(sp)
    8020026a:	e426                	sd	s1,8(sp)
    8020026c:	e04a                	sd	s2,0(sp)
    8020026e:	1000                	addi	s0,sp,32
    80200270:	84aa                	mv	s1,a0
  
  if(!holdingsleep(&b->lock))
    80200272:	01050913          	addi	s2,a0,16
    80200276:	854a                	mv	a0,s2
    80200278:	00009097          	auipc	ra,0x9
    8020027c:	dc6080e7          	jalr	-570(ra) # 8020903e <holdingsleep>
    80200280:	c92d                	beqz	a0,802002f2 <brelse+0x8e>
    panic("brelse");
    
  releasesleep(&b->lock);//?????????
    80200282:	854a                	mv	a0,s2
    80200284:	00009097          	auipc	ra,0x9
    80200288:	d76080e7          	jalr	-650(ra) # 80208ffa <releasesleep>
  acquire(&bcache.lock);
    8020028c:	01041517          	auipc	a0,0x1041
    80200290:	d7450513          	addi	a0,a0,-652 # 81241000 <bcache>
    80200294:	00009097          	auipc	ra,0x9
    80200298:	c46080e7          	jalr	-954(ra) # 80208eda <acquire>
  b->refcnt--;
    8020029c:	40bc                	lw	a5,64(s1)
    8020029e:	37fd                	addiw	a5,a5,-1
    802002a0:	0007871b          	sext.w	a4,a5
    802002a4:	c0bc                	sw	a5,64(s1)
  if (b->refcnt == 0) {
    802002a6:	eb05                	bnez	a4,802002d6 <brelse+0x72>
    // no one is waiting for it.
    b->next->prev = b->prev;
    802002a8:	68bc                	ld	a5,80(s1)
    802002aa:	64b8                	ld	a4,72(s1)
    802002ac:	e7b8                	sd	a4,72(a5)
    b->prev->next = b->next;
    802002ae:	64bc                	ld	a5,72(s1)
    802002b0:	68b8                	ld	a4,80(s1)
    802002b2:	ebb8                	sd	a4,80(a5)
    b->next = bcache.head.next;
    802002b4:	01045797          	auipc	a5,0x1045
    802002b8:	d4c78793          	addi	a5,a5,-692 # 81245000 <bcache+0x4000>
    802002bc:	6b87b703          	ld	a4,1720(a5)
    802002c0:	e8b8                	sd	a4,80(s1)
    b->prev = &bcache.head;
    802002c2:	01045717          	auipc	a4,0x1045
    802002c6:	3a670713          	addi	a4,a4,934 # 81245668 <bcache+0x4668>
    802002ca:	e4b8                	sd	a4,72(s1)
    bcache.head.next->prev = b;
    802002cc:	6b87b703          	ld	a4,1720(a5)
    802002d0:	e724                	sd	s1,72(a4)
    bcache.head.next = b;
    802002d2:	6a97bc23          	sd	s1,1720(a5)
  }
  release(&bcache.lock);
    802002d6:	01041517          	auipc	a0,0x1041
    802002da:	d2a50513          	addi	a0,a0,-726 # 81241000 <bcache>
    802002de:	00009097          	auipc	ra,0x9
    802002e2:	c50080e7          	jalr	-944(ra) # 80208f2e <release>
  
}
    802002e6:	60e2                	ld	ra,24(sp)
    802002e8:	6442                	ld	s0,16(sp)
    802002ea:	64a2                	ld	s1,8(sp)
    802002ec:	6902                	ld	s2,0(sp)
    802002ee:	6105                	addi	sp,sp,32
    802002f0:	8082                	ret
    panic("brelse");
    802002f2:	00014517          	auipc	a0,0x14
    802002f6:	d4650513          	addi	a0,a0,-698 # 80214038 <rodata_start+0x38>
    802002fa:	00009097          	auipc	ra,0x9
    802002fe:	f50080e7          	jalr	-176(ra) # 8020924a <panic>

0000000080200302 <bpin>:

void
bpin(struct buf *b) {
    80200302:	1101                	addi	sp,sp,-32
    80200304:	ec06                	sd	ra,24(sp)
    80200306:	e822                	sd	s0,16(sp)
    80200308:	e426                	sd	s1,8(sp)
    8020030a:	1000                	addi	s0,sp,32
    8020030c:	84aa                	mv	s1,a0
  acquire(&bcache.lock);
    8020030e:	01041517          	auipc	a0,0x1041
    80200312:	cf250513          	addi	a0,a0,-782 # 81241000 <bcache>
    80200316:	00009097          	auipc	ra,0x9
    8020031a:	bc4080e7          	jalr	-1084(ra) # 80208eda <acquire>
  b->refcnt++;
    8020031e:	40bc                	lw	a5,64(s1)
    80200320:	2785                	addiw	a5,a5,1
    80200322:	c0bc                	sw	a5,64(s1)
  release(&bcache.lock);
    80200324:	01041517          	auipc	a0,0x1041
    80200328:	cdc50513          	addi	a0,a0,-804 # 81241000 <bcache>
    8020032c:	00009097          	auipc	ra,0x9
    80200330:	c02080e7          	jalr	-1022(ra) # 80208f2e <release>
}
    80200334:	60e2                	ld	ra,24(sp)
    80200336:	6442                	ld	s0,16(sp)
    80200338:	64a2                	ld	s1,8(sp)
    8020033a:	6105                	addi	sp,sp,32
    8020033c:	8082                	ret

000000008020033e <bunpin>:

void
bunpin(struct buf *b) {
    8020033e:	1101                	addi	sp,sp,-32
    80200340:	ec06                	sd	ra,24(sp)
    80200342:	e822                	sd	s0,16(sp)
    80200344:	e426                	sd	s1,8(sp)
    80200346:	1000                	addi	s0,sp,32
    80200348:	84aa                	mv	s1,a0
  acquire(&bcache.lock);
    8020034a:	01041517          	auipc	a0,0x1041
    8020034e:	cb650513          	addi	a0,a0,-842 # 81241000 <bcache>
    80200352:	00009097          	auipc	ra,0x9
    80200356:	b88080e7          	jalr	-1144(ra) # 80208eda <acquire>
  b->refcnt--;
    8020035a:	40bc                	lw	a5,64(s1)
    8020035c:	37fd                	addiw	a5,a5,-1
    8020035e:	c0bc                	sw	a5,64(s1)
  release(&bcache.lock);
    80200360:	01041517          	auipc	a0,0x1041
    80200364:	ca050513          	addi	a0,a0,-864 # 81241000 <bcache>
    80200368:	00009097          	auipc	ra,0x9
    8020036c:	bc6080e7          	jalr	-1082(ra) # 80208f2e <release>
}
    80200370:	60e2                	ld	ra,24(sp)
    80200372:	6442                	ld	s0,16(sp)
    80200374:	64a2                	ld	s1,8(sp)
    80200376:	6105                	addi	sp,sp,32
    80200378:	8082                	ret
	...

0000000080200382 <ramdisk_init>:
extern char fs_img_end[];
char* ramdisk;

void
ramdisk_init(void)
{
    80200382:	1101                	addi	sp,sp,-32
    80200384:	ec06                	sd	ra,24(sp)
    80200386:	e822                	sd	s0,16(sp)
    80200388:	e426                	sd	s1,8(sp)
    8020038a:	1000                	addi	s0,sp,32
#ifdef QEMU
  ramdisk = fs_img_start;
    8020038c:	0104a497          	auipc	s1,0x104a
    80200390:	e0c48493          	addi	s1,s1,-500 # 8124a198 <ramdisk>
    80200394:	00018797          	auipc	a5,0x18
    80200398:	c6c78793          	addi	a5,a5,-916 # 80218000 <data_start>
    8020039c:	e09c                	sd	a5,0(s1)
#endif
#ifdef SIFIVE_U
  ramdisk = (char*)RAMDISK;
#endif
  initlock(&ramdisklock, "ramdisk lock");
    8020039e:	00014597          	auipc	a1,0x14
    802003a2:	ca258593          	addi	a1,a1,-862 # 80214040 <rodata_start+0x40>
    802003a6:	0104a517          	auipc	a0,0x104a
    802003aa:	dda50513          	addi	a0,a0,-550 # 8124a180 <ramdisklock>
    802003ae:	00009097          	auipc	ra,0x9
    802003b2:	ae8080e7          	jalr	-1304(ra) # 80208e96 <initlock>
  __debug_info("ramdiskinit ram start:%p\n",ramdisk);
    802003b6:	608c                	ld	a1,0(s1)
    802003b8:	00014517          	auipc	a0,0x14
    802003bc:	c9850513          	addi	a0,a0,-872 # 80214050 <rodata_start+0x50>
    802003c0:	00009097          	auipc	ra,0x9
    802003c4:	0ea080e7          	jalr	234(ra) # 802094aa <__debug_info>
}
    802003c8:	60e2                	ld	ra,24(sp)
    802003ca:	6442                	ld	s0,16(sp)
    802003cc:	64a2                	ld	s1,8(sp)
    802003ce:	6105                	addi	sp,sp,32
    802003d0:	8082                	ret

00000000802003d2 <ramdisk_rw>:

void 
ramdisk_rw(struct buf *b, int write)
{
    802003d2:	1101                	addi	sp,sp,-32
    802003d4:	ec06                	sd	ra,24(sp)
    802003d6:	e822                	sd	s0,16(sp)
    802003d8:	e426                	sd	s1,8(sp)
    802003da:	e04a                	sd	s2,0(sp)
    802003dc:	1000                	addi	s0,sp,32
    802003de:	84aa                	mv	s1,a0
    802003e0:	892e                	mv	s2,a1
  acquire(&ramdisklock);
    802003e2:	0104a517          	auipc	a0,0x104a
    802003e6:	d9e50513          	addi	a0,a0,-610 # 8124a180 <ramdisklock>
    802003ea:	00009097          	auipc	ra,0x9
    802003ee:	af0080e7          	jalr	-1296(ra) # 80208eda <acquire>
  uint sectorno = b->sectorno;

  char *addr = ramdisk + sectorno * BSIZE;
    802003f2:	44dc                	lw	a5,12(s1)
    802003f4:	0097979b          	slliw	a5,a5,0x9
    802003f8:	1782                	slli	a5,a5,0x20
    802003fa:	9381                	srli	a5,a5,0x20
    802003fc:	0104a517          	auipc	a0,0x104a
    80200400:	d9c53503          	ld	a0,-612(a0) # 8124a198 <ramdisk>
    80200404:	953e                	add	a0,a0,a5
  if (write)
    80200406:	02090863          	beqz	s2,80200436 <ramdisk_rw+0x64>
  {
    memmove((void*)addr, b->data, BSIZE);
    8020040a:	20000613          	li	a2,512
    8020040e:	05848593          	addi	a1,s1,88
    80200412:	00001097          	auipc	ra,0x1
    80200416:	9c2080e7          	jalr	-1598(ra) # 80200dd4 <memmove>
  }
  else
  {
    memmove(b->data, (void*)addr, BSIZE);
  }
  release(&ramdisklock);
    8020041a:	0104a517          	auipc	a0,0x104a
    8020041e:	d6650513          	addi	a0,a0,-666 # 8124a180 <ramdisklock>
    80200422:	00009097          	auipc	ra,0x9
    80200426:	b0c080e7          	jalr	-1268(ra) # 80208f2e <release>
}
    8020042a:	60e2                	ld	ra,24(sp)
    8020042c:	6442                	ld	s0,16(sp)
    8020042e:	64a2                	ld	s1,8(sp)
    80200430:	6902                	ld	s2,0(sp)
    80200432:	6105                	addi	sp,sp,32
    80200434:	8082                	ret
    memmove(b->data, (void*)addr, BSIZE);
    80200436:	20000613          	li	a2,512
    8020043a:	85aa                	mv	a1,a0
    8020043c:	05848513          	addi	a0,s1,88
    80200440:	00001097          	auipc	ra,0x1
    80200444:	994080e7          	jalr	-1644(ra) # 80200dd4 <memmove>
    80200448:	bfc9                	j	8020041a <ramdisk_rw+0x48>

000000008020044a <ramdisk_intr>:

void
ramdisk_intr()
{
    8020044a:	1141                	addi	sp,sp,-16
    8020044c:	e422                	sd	s0,8(sp)
    8020044e:	0800                	addi	s0,sp,16
    //acquire(&ramdisklock);
    
}
    80200450:	6422                	ld	s0,8(sp)
    80200452:	0141                	addi	sp,sp,16
    80200454:	8082                	ret

0000000080200456 <spi_min_clk_divisor>:
/**
 * Get smallest clock divisor that divides input_khz to a quotient less than or
 * equal to max_target_khz;
 */
inline unsigned int spi_min_clk_divisor(unsigned int input_khz, unsigned int max_target_khz)
{
    80200456:	1141                	addi	sp,sp,-16
    80200458:	e422                	sd	s0,8(sp)
    8020045a:	0800                	addi	s0,sp,16
  // div = ceil(f_in / (2*f_sck)) - 1
  //     = floor((f_in - 1 + 2*f_sck) / (2*f_sck)) - 1
  //
  // This should not overflow as long as (f_in - 1 + 2*f_sck) does not exceed
  // 2^32 - 1, which is unlikely since we represent frequencies in kHz.
  unsigned int quotient = (input_khz + 2 * max_target_khz - 1) / (2 * max_target_khz);
    8020045c:	0015959b          	slliw	a1,a1,0x1
    80200460:	0005871b          	sext.w	a4,a1
    80200464:	357d                	addiw	a0,a0,-1
    80200466:	9d2d                	addw	a0,a0,a1
    80200468:	0005079b          	sext.w	a5,a0
  // Avoid underflow
  if (quotient == 0) {
    8020046c:	00e7e863          	bltu	a5,a4,8020047c <spi_min_clk_divisor+0x26>
  unsigned int quotient = (input_khz + 2 * max_target_khz - 1) / (2 * max_target_khz);
    80200470:	02b5553b          	divuw	a0,a0,a1
    return 0;
  } else {
    return quotient - 1;
    80200474:	357d                	addiw	a0,a0,-1
  }
}
    80200476:	6422                	ld	s0,8(sp)
    80200478:	0141                	addi	sp,sp,16
    8020047a:	8082                	ret
    return 0;
    8020047c:	4501                	li	a0,0
    8020047e:	bfe5                	j	80200476 <spi_min_clk_divisor+0x20>

0000000080200480 <spi_tx>:

/**
 * Wait until SPI is ready for transmission and transmit byte.
 */
void spi_tx(spi_ctrl* spictrl, uint8_t in)
{
    80200480:	1141                	addi	sp,sp,-16
    80200482:	e422                	sd	s0,8(sp)
    80200484:	0800                	addi	s0,sp,16
#if __riscv_atomic
  int32_t r;
  do {
    asm volatile (
    80200486:	04850793          	addi	a5,a0,72
    8020048a:	40b7a7af          	amoor.w	a5,a1,(a5)
      "amoor.w %0, %2, %1\n"
      : "=r" (r), "+A" (spictrl->txdata.raw_bits)
      : "r" (in)
    );
  } while (r < 0);
    8020048e:	02079713          	slli	a4,a5,0x20
    80200492:	fe074ae3          	bltz	a4,80200486 <spi_tx+0x6>
#else
  while ((int32_t) spictrl->txdata.raw_bits < 0);
  spictrl->txdata.data = in;
#endif
}
    80200496:	6422                	ld	s0,8(sp)
    80200498:	0141                	addi	sp,sp,16
    8020049a:	8082                	ret

000000008020049c <spi_rx>:

/**
 * Wait until SPI receive queue has data and read byte.
 */
uint8_t spi_rx(spi_ctrl* spictrl)
{
    8020049c:	1141                	addi	sp,sp,-16
    8020049e:	e422                	sd	s0,8(sp)
    802004a0:	0800                	addi	s0,sp,16
  int32_t out;
  while ((out = (int32_t) spictrl->rxdata.raw_bits) < 0);
    802004a2:	457c                	lw	a5,76(a0)
    802004a4:	02079693          	slli	a3,a5,0x20
    802004a8:	fe06cde3          	bltz	a3,802004a2 <spi_rx+0x6>
    802004ac:	0007871b          	sext.w	a4,a5
  return (uint8_t) out;
}
    802004b0:	0ff77513          	andi	a0,a4,255
    802004b4:	6422                	ld	s0,8(sp)
    802004b6:	0141                	addi	sp,sp,16
    802004b8:	8082                	ret

00000000802004ba <spi_txrx>:

/**
 * Transmit a byte and receive a byte.
 */
uint8_t spi_txrx(spi_ctrl* spictrl, uint8_t in)
{
    802004ba:	1101                	addi	sp,sp,-32
    802004bc:	ec06                	sd	ra,24(sp)
    802004be:	e822                	sd	s0,16(sp)
    802004c0:	e426                	sd	s1,8(sp)
    802004c2:	1000                	addi	s0,sp,32
    802004c4:	84aa                	mv	s1,a0
  spi_tx(spictrl, in);
    802004c6:	00000097          	auipc	ra,0x0
    802004ca:	fba080e7          	jalr	-70(ra) # 80200480 <spi_tx>
  while ((out = (int32_t) spictrl->rxdata.raw_bits) < 0);
    802004ce:	44fc                	lw	a5,76(s1)
    802004d0:	0007851b          	sext.w	a0,a5
    802004d4:	02079713          	slli	a4,a5,0x20
    802004d8:	fe074be3          	bltz	a4,802004ce <spi_txrx+0x14>
  return spi_rx(spictrl);
}
    802004dc:	0ff57513          	andi	a0,a0,255
    802004e0:	60e2                	ld	ra,24(sp)
    802004e2:	6442                	ld	s0,16(sp)
    802004e4:	64a2                	ld	s1,8(sp)
    802004e6:	6105                	addi	sp,sp,32
    802004e8:	8082                	ret

00000000802004ea <spi_copy>:

/**
 * Copy data from SPI flash without memory-mapped flash.
 */
int spi_copy(spi_ctrl* spictrl, void* buf, uint32_t addr, uint32_t size)
{
    802004ea:	7179                	addi	sp,sp,-48
    802004ec:	f406                	sd	ra,40(sp)
    802004ee:	f022                	sd	s0,32(sp)
    802004f0:	ec26                	sd	s1,24(sp)
    802004f2:	e84a                	sd	s2,16(sp)
    802004f4:	e44e                	sd	s3,8(sp)
    802004f6:	e052                	sd	s4,0(sp)
    802004f8:	1800                	addi	s0,sp,48
    802004fa:	89aa                	mv	s3,a0
    802004fc:	84ae                	mv	s1,a1
    802004fe:	8a32                	mv	s4,a2
    80200500:	8936                	mv	s2,a3
  uint8_t* buf_bytes = (uint8_t*) buf;
  spictrl->csmode.mode = SPI_CSMODE_HOLD;
    80200502:	4d1c                	lw	a5,24(a0)
    80200504:	9bf1                	andi	a5,a5,-4
    80200506:	0027e793          	ori	a5,a5,2
    8020050a:	cd1c                	sw	a5,24(a0)

  spi_txrx(spictrl, MICRON_SPI_FLASH_CMD_READ);
    8020050c:	458d                	li	a1,3
    8020050e:	00000097          	auipc	ra,0x0
    80200512:	fac080e7          	jalr	-84(ra) # 802004ba <spi_txrx>
  spi_txrx(spictrl, (addr >> 16) & 0xff);
    80200516:	010a559b          	srliw	a1,s4,0x10
    8020051a:	0ff5f593          	andi	a1,a1,255
    8020051e:	854e                	mv	a0,s3
    80200520:	00000097          	auipc	ra,0x0
    80200524:	f9a080e7          	jalr	-102(ra) # 802004ba <spi_txrx>
  spi_txrx(spictrl, (addr >> 8) & 0xff);
    80200528:	008a559b          	srliw	a1,s4,0x8
    8020052c:	0ff5f593          	andi	a1,a1,255
    80200530:	854e                	mv	a0,s3
    80200532:	00000097          	auipc	ra,0x0
    80200536:	f88080e7          	jalr	-120(ra) # 802004ba <spi_txrx>
  spi_txrx(spictrl, addr & 0xff);
    8020053a:	0ffa7593          	andi	a1,s4,255
    8020053e:	854e                	mv	a0,s3
    80200540:	00000097          	auipc	ra,0x0
    80200544:	f7a080e7          	jalr	-134(ra) # 802004ba <spi_txrx>

  for (unsigned int i = 0; i < size; i++) {
    80200548:	02090363          	beqz	s2,8020056e <spi_copy+0x84>
    8020054c:	397d                	addiw	s2,s2,-1
    8020054e:	1902                	slli	s2,s2,0x20
    80200550:	02095913          	srli	s2,s2,0x20
    80200554:	0905                	addi	s2,s2,1
    80200556:	9926                	add	s2,s2,s1
    *buf_bytes = spi_txrx(spictrl, 0);
    80200558:	4581                	li	a1,0
    8020055a:	854e                	mv	a0,s3
    8020055c:	00000097          	auipc	ra,0x0
    80200560:	f5e080e7          	jalr	-162(ra) # 802004ba <spi_txrx>
    80200564:	00a48023          	sb	a0,0(s1)
    buf_bytes++;
    80200568:	0485                	addi	s1,s1,1
  for (unsigned int i = 0; i < size; i++) {
    8020056a:	ff2497e3          	bne	s1,s2,80200558 <spi_copy+0x6e>
  }

  spictrl->csmode.mode = SPI_CSMODE_AUTO;
    8020056e:	0189a783          	lw	a5,24(s3)
    80200572:	9bf1                	andi	a5,a5,-4
    80200574:	00f9ac23          	sw	a5,24(s3)
  return 0;
}
    80200578:	4501                	li	a0,0
    8020057a:	70a2                	ld	ra,40(sp)
    8020057c:	7402                	ld	s0,32(sp)
    8020057e:	64e2                	ld	s1,24(sp)
    80200580:	6942                	ld	s2,16(sp)
    80200582:	69a2                	ld	s3,8(sp)
    80200584:	6a02                	ld	s4,0(sp)
    80200586:	6145                	addi	sp,sp,48
    80200588:	8082                	ret

000000008020058a <crc7>:
  return rc;
}


static uint8_t crc7(uint8_t prev, uint8_t in)
{
    8020058a:	1141                	addi	sp,sp,-16
    8020058c:	e422                	sd	s0,8(sp)
    8020058e:	0800                	addi	s0,sp,16
  // CRC polynomial 0x89
  uint8_t remainder = prev & in;
    80200590:	8de9                	and	a1,a1,a0
  remainder ^= (remainder >> 4) ^ (remainder >> 7);
    80200592:	0045d51b          	srliw	a0,a1,0x4
    80200596:	0075d79b          	srliw	a5,a1,0x7
    8020059a:	8d3d                	xor	a0,a0,a5
    8020059c:	0ff57513          	andi	a0,a0,255
    802005a0:	8d2d                	xor	a0,a0,a1
  remainder ^= remainder << 4;
    802005a2:	0045159b          	slliw	a1,a0,0x4
    802005a6:	8d2d                	xor	a0,a0,a1
  return remainder & 0x7f;
}
    802005a8:	07f57513          	andi	a0,a0,127
    802005ac:	6422                	ld	s0,8(sp)
    802005ae:	0141                	addi	sp,sp,16
    802005b0:	8082                	ret

00000000802005b2 <crc16>:


static uint16_t crc16(uint16_t crc, uint8_t data)
{
    802005b2:	1141                	addi	sp,sp,-16
    802005b4:	e422                	sd	s0,8(sp)
    802005b6:	0800                	addi	s0,sp,16
  // CRC polynomial 0x11021
  crc = (uint8_t)(crc >> 8) | (crc << 8);
    802005b8:	0085579b          	srliw	a5,a0,0x8
    802005bc:	0085151b          	slliw	a0,a0,0x8
    802005c0:	8d5d                	or	a0,a0,a5
    802005c2:	1542                	slli	a0,a0,0x30
    802005c4:	9141                	srli	a0,a0,0x30
  crc ^= data;
    802005c6:	8da9                	xor	a1,a1,a0
  crc ^= (uint8_t)(crc >> 4) & 0xf;
    802005c8:	0045d51b          	srliw	a0,a1,0x4
    802005cc:	893d                	andi	a0,a0,15
    802005ce:	8d2d                	xor	a0,a0,a1
  crc ^= crc << 12;
    802005d0:	00c5159b          	slliw	a1,a0,0xc
    802005d4:	8d2d                	xor	a0,a0,a1
  crc ^= (crc & 0xff) << 5;
    802005d6:	0105179b          	slliw	a5,a0,0x10
    802005da:	0107d79b          	srliw	a5,a5,0x10
    802005de:	0057979b          	slliw	a5,a5,0x5
    802005e2:	6709                	lui	a4,0x2
    802005e4:	1701                	addi	a4,a4,-32
    802005e6:	8ff9                	and	a5,a5,a4
    802005e8:	8d3d                	xor	a0,a0,a5
  return crc;
}
    802005ea:	1542                	slli	a0,a0,0x30
    802005ec:	9141                	srli	a0,a0,0x30
    802005ee:	6422                	ld	s0,8(sp)
    802005f0:	0141                	addi	sp,sp,16
    802005f2:	8082                	ret

00000000802005f4 <sd_cmd>:
{
    802005f4:	7179                	addi	sp,sp,-48
    802005f6:	f406                	sd	ra,40(sp)
    802005f8:	f022                	sd	s0,32(sp)
    802005fa:	ec26                	sd	s1,24(sp)
    802005fc:	e84a                	sd	s2,16(sp)
    802005fe:	e44e                	sd	s3,8(sp)
    80200600:	e052                	sd	s4,0(sp)
    80200602:	1800                	addi	s0,sp,48
    80200604:	892a                	mv	s2,a0
    80200606:	8a2e                	mv	s4,a1
    80200608:	84b2                	mv	s1,a2
    8020060a:	89b6                	mv	s3,a3
  spi->csmode.mode = SPI_CSMODE_HOLD;
    8020060c:	4d1c                	lw	a5,24(a0)
    8020060e:	9bf1                	andi	a5,a5,-4
    80200610:	0027e793          	ori	a5,a5,2
    80200614:	cd1c                	sw	a5,24(a0)
  return spi_txrx(spi, 0xFF);
    80200616:	0ff00593          	li	a1,255
    8020061a:	00000097          	auipc	ra,0x0
    8020061e:	ea0080e7          	jalr	-352(ra) # 802004ba <spi_txrx>
  spi_txrx(spi, cmd);
    80200622:	85d2                	mv	a1,s4
    80200624:	854a                	mv	a0,s2
    80200626:	00000097          	auipc	ra,0x0
    8020062a:	e94080e7          	jalr	-364(ra) # 802004ba <spi_txrx>
  spi_txrx(spi, arg >> 24);
    8020062e:	0184d59b          	srliw	a1,s1,0x18
    80200632:	854a                	mv	a0,s2
    80200634:	00000097          	auipc	ra,0x0
    80200638:	e86080e7          	jalr	-378(ra) # 802004ba <spi_txrx>
  spi_txrx(spi, arg >> 16);
    8020063c:	0104d59b          	srliw	a1,s1,0x10
    80200640:	0ff5f593          	andi	a1,a1,255
    80200644:	854a                	mv	a0,s2
    80200646:	00000097          	auipc	ra,0x0
    8020064a:	e74080e7          	jalr	-396(ra) # 802004ba <spi_txrx>
  spi_txrx(spi, arg >> 8);
    8020064e:	0084d59b          	srliw	a1,s1,0x8
    80200652:	0ff5f593          	andi	a1,a1,255
    80200656:	854a                	mv	a0,s2
    80200658:	00000097          	auipc	ra,0x0
    8020065c:	e62080e7          	jalr	-414(ra) # 802004ba <spi_txrx>
  spi_txrx(spi, arg);
    80200660:	0ff4f593          	andi	a1,s1,255
    80200664:	854a                	mv	a0,s2
    80200666:	00000097          	auipc	ra,0x0
    8020066a:	e54080e7          	jalr	-428(ra) # 802004ba <spi_txrx>
  spi_txrx(spi, crc);
    8020066e:	85ce                	mv	a1,s3
    80200670:	854a                	mv	a0,s2
    80200672:	00000097          	auipc	ra,0x0
    80200676:	e48080e7          	jalr	-440(ra) # 802004ba <spi_txrx>
    8020067a:	3e800493          	li	s1,1000
  return spi_txrx(spi, 0xFF);
    8020067e:	0ff00593          	li	a1,255
    80200682:	854a                	mv	a0,s2
    80200684:	00000097          	auipc	ra,0x0
    80200688:	e36080e7          	jalr	-458(ra) # 802004ba <spi_txrx>
    if (!(r & 0x80)) {
    8020068c:	0185179b          	slliw	a5,a0,0x18
    80200690:	4187d79b          	sraiw	a5,a5,0x18
    80200694:	0007d463          	bgez	a5,8020069c <sd_cmd+0xa8>
  } while (--n > 0);
    80200698:	14fd                	addi	s1,s1,-1
    8020069a:	f0f5                	bnez	s1,8020067e <sd_cmd+0x8a>
}
    8020069c:	2501                	sext.w	a0,a0
    8020069e:	70a2                	ld	ra,40(sp)
    802006a0:	7402                	ld	s0,32(sp)
    802006a2:	64e2                	ld	s1,24(sp)
    802006a4:	6942                	ld	s2,16(sp)
    802006a6:	69a2                	ld	s3,8(sp)
    802006a8:	6a02                	ld	s4,0(sp)
    802006aa:	6145                	addi	sp,sp,48
    802006ac:	8082                	ret

00000000802006ae <sd_init>:
//    }
//    return gpt_invalid_partition_range();
//}

int sd_init(spi_ctrl* spi, unsigned int input_clk_khz, int skip_sd_init_commands)
{
    802006ae:	7179                	addi	sp,sp,-48
    802006b0:	f406                	sd	ra,40(sp)
    802006b2:	f022                	sd	s0,32(sp)
    802006b4:	ec26                	sd	s1,24(sp)
    802006b6:	e84a                	sd	s2,16(sp)
    802006b8:	e44e                	sd	s3,8(sp)
    802006ba:	e052                	sd	s4,0(sp)
    802006bc:	1800                	addi	s0,sp,48
    802006be:	84aa                	mv	s1,a0
    802006c0:	892e                	mv	s2,a1
  // Skip SD initialization commands if already done earlier and only set the
  // clock divider for data transfer.
  if (!skip_sd_init_commands) {
    802006c2:	ce1d                	beqz	a2,80200700 <sd_init+0x52>
  unsigned int quotient = (input_khz + 2 * max_target_khz - 1) / (2 * max_target_khz);
    802006c4:	65a9                	lui	a1,0xa
    802006c6:	c3f5859b          	addiw	a1,a1,-961
    802006ca:	00b9093b          	addw	s2,s2,a1
    802006ce:	0009071b          	sext.w	a4,s2
  if (quotient == 0) {
    802006d2:	67a9                	lui	a5,0xa
    802006d4:	c3f78793          	addi	a5,a5,-961 # 9c3f <_entry-0x801f63c1>
    return 0;
    802006d8:	4581                	li	a1,0
  if (quotient == 0) {
    802006da:	00e7f963          	bgeu	a5,a4,802006ec <sd_init+0x3e>
  unsigned int quotient = (input_khz + 2 * max_target_khz - 1) / (2 * max_target_khz);
    802006de:	65a9                	lui	a1,0xa
    802006e0:	c405859b          	addiw	a1,a1,-960
    802006e4:	02b9593b          	divuw	s2,s2,a1
    return quotient - 1;
    802006e8:	fff9059b          	addiw	a1,s2,-1
    if (sd_acmd41(spi)) return SD_INIT_ERROR_ACMD41;
    if (sd_cmd58(spi)) return SD_INIT_ERROR_CMD58;
    if (sd_cmd16(spi)) return SD_INIT_ERROR_CMD16;
  }
  // Increase clock frequency after initialization for higher performance.
  spi->sckdiv = spi_min_clk_divisor(input_clk_khz, SD_POST_INIT_CLK_KHZ);
    802006ec:	c08c                	sw	a1,0(s1)
  return 0;
    802006ee:	4501                	li	a0,0
}
    802006f0:	70a2                	ld	ra,40(sp)
    802006f2:	7402                	ld	s0,32(sp)
    802006f4:	64e2                	ld	s1,24(sp)
    802006f6:	6942                	ld	s2,16(sp)
    802006f8:	69a2                	ld	s3,8(sp)
    802006fa:	6a02                	ld	s4,0(sp)
    802006fc:	6145                	addi	sp,sp,48
    802006fe:	8082                	ret
  uint64_t start = get_time_us();
    80200700:	0000a097          	auipc	ra,0xa
    80200704:	688080e7          	jalr	1672(ra) # 8020ad88 <get_time_us>
    80200708:	8a2a                	mv	s4,a0
  while(get_time_us()-start>5000);
    8020070a:	6985                	lui	s3,0x1
    8020070c:	38898993          	addi	s3,s3,904 # 1388 <_entry-0x801fec78>
    80200710:	0000a097          	auipc	ra,0xa
    80200714:	678080e7          	jalr	1656(ra) # 8020ad88 <get_time_us>
    80200718:	414507b3          	sub	a5,a0,s4
    8020071c:	fef9eae3          	bltu	s3,a5,80200710 <sd_init+0x62>
  }).raw_bits;
    80200720:	000807b7          	lui	a5,0x80
  spi->fmt.raw_bits = ((spi_reg_fmt) {
    80200724:	c0bc                	sw	a5,64(s1)
  spi->csdef |= 0x1;
    80200726:	48dc                	lw	a5,20(s1)
    80200728:	2781                	sext.w	a5,a5
    8020072a:	0017e793          	ori	a5,a5,1
    8020072e:	c8dc                	sw	a5,20(s1)
  spi->csid = 0;
    80200730:	0004a823          	sw	zero,16(s1)
  unsigned int quotient = (input_khz + 2 * max_target_khz - 1) / (2 * max_target_khz);
    80200734:	31f9079b          	addiw	a5,s2,799
    80200738:	0007861b          	sext.w	a2,a5
  if (quotient == 0) {
    8020073c:	31f00693          	li	a3,799
    return 0;
    80200740:	4701                	li	a4,0
  if (quotient == 0) {
    80200742:	00c6f863          	bgeu	a3,a2,80200752 <sd_init+0xa4>
  unsigned int quotient = (input_khz + 2 * max_target_khz - 1) / (2 * max_target_khz);
    80200746:	32000713          	li	a4,800
    8020074a:	02e7d7bb          	divuw	a5,a5,a4
    return quotient - 1;
    8020074e:	fff7871b          	addiw	a4,a5,-1
  spi->sckdiv = spi_min_clk_divisor(input_clk_khz, SD_POWER_ON_FREQ_KHZ);
    80200752:	c098                	sw	a4,0(s1)
  spi->csmode.mode = SPI_CSMODE_OFF;
    80200754:	4c9c                	lw	a5,24(s1)
    80200756:	0037e793          	ori	a5,a5,3
    8020075a:	cc9c                	sw	a5,24(s1)
    8020075c:	49a9                	li	s3,10
  return spi_txrx(spi, 0xFF);
    8020075e:	0ff00593          	li	a1,255
    80200762:	8526                	mv	a0,s1
    80200764:	00000097          	auipc	ra,0x0
    80200768:	d56080e7          	jalr	-682(ra) # 802004ba <spi_txrx>
  for (int i = 10; i > 0; i--) {
    8020076c:	39fd                	addiw	s3,s3,-1
    8020076e:	fe0998e3          	bnez	s3,8020075e <sd_init+0xb0>
  spi->csmode.mode = SPI_CSMODE_AUTO;
    80200772:	4c9c                	lw	a5,24(s1)
    80200774:	9bf1                	andi	a5,a5,-4
    80200776:	cc9c                	sw	a5,24(s1)
  rc = (sd_cmd(spi, SD_CMD(SD_CMD_GO_IDLE_STATE), 0, 0x95) != SD_RESPONSE_IDLE);
    80200778:	09500693          	li	a3,149
    8020077c:	4601                	li	a2,0
    8020077e:	04000593          	li	a1,64
    80200782:	8526                	mv	a0,s1
    80200784:	00000097          	auipc	ra,0x0
    80200788:	e70080e7          	jalr	-400(ra) # 802005f4 <sd_cmd>
    8020078c:	89aa                	mv	s3,a0
  return spi_txrx(spi, 0xFF);
    8020078e:	0ff00593          	li	a1,255
    80200792:	8526                	mv	a0,s1
    80200794:	00000097          	auipc	ra,0x0
    80200798:	d26080e7          	jalr	-730(ra) # 802004ba <spi_txrx>
  spi->csmode.mode = SPI_CSMODE_AUTO;
    8020079c:	4c9c                	lw	a5,24(s1)
    8020079e:	9bf1                	andi	a5,a5,-4
    802007a0:	cc9c                	sw	a5,24(s1)
    if (sd_cmd0(spi)) return SD_INIT_ERROR_CMD0;
    802007a2:	4785                	li	a5,1
    802007a4:	4505                	li	a0,1
    802007a6:	f4f995e3          	bne	s3,a5,802006f0 <sd_init+0x42>
  rc = (sd_cmd(spi, SD_CMD(SD_CMD_SEND_IF_COND), 0x000001AA, 0x87) != SD_RESPONSE_IDLE);
    802007aa:	08700693          	li	a3,135
    802007ae:	1aa00613          	li	a2,426
    802007b2:	04800593          	li	a1,72
    802007b6:	8526                	mv	a0,s1
    802007b8:	00000097          	auipc	ra,0x0
    802007bc:	e3c080e7          	jalr	-452(ra) # 802005f4 <sd_cmd>
    802007c0:	89aa                	mv	s3,a0
  return spi_txrx(spi, 0xFF);
    802007c2:	0ff00593          	li	a1,255
    802007c6:	8526                	mv	a0,s1
    802007c8:	00000097          	auipc	ra,0x0
    802007cc:	cf2080e7          	jalr	-782(ra) # 802004ba <spi_txrx>
    802007d0:	0ff00593          	li	a1,255
    802007d4:	8526                	mv	a0,s1
    802007d6:	00000097          	auipc	ra,0x0
    802007da:	ce4080e7          	jalr	-796(ra) # 802004ba <spi_txrx>
    802007de:	0ff00593          	li	a1,255
    802007e2:	8526                	mv	a0,s1
    802007e4:	00000097          	auipc	ra,0x0
    802007e8:	cd6080e7          	jalr	-810(ra) # 802004ba <spi_txrx>
    802007ec:	8a2a                	mv	s4,a0
    802007ee:	0ff00593          	li	a1,255
    802007f2:	8526                	mv	a0,s1
    802007f4:	00000097          	auipc	ra,0x0
    802007f8:	cc6080e7          	jalr	-826(ra) # 802004ba <spi_txrx>
  rc = (sd_cmd(spi, SD_CMD(SD_CMD_SEND_IF_COND), 0x000001AA, 0x87) != SD_RESPONSE_IDLE);
    802007fc:	19fd                	addi	s3,s3,-1
    802007fe:	013039b3          	snez	s3,s3
  rc |= (sd_dummy(spi) != 0xAA); /* check pattern */
    80200802:	0005079b          	sext.w	a5,a0
    80200806:	f5678793          	addi	a5,a5,-170 # 7ff56 <_entry-0x801800aa>
    8020080a:	00f037b3          	snez	a5,a5
    8020080e:	00f9e9b3          	or	s3,s3,a5
  rc |= ((sd_dummy(spi) & 0xF) != 0x1); /* voltage */
    80200812:	00fa7a13          	andi	s4,s4,15
    80200816:	1a7d                	addi	s4,s4,-1
    80200818:	01403a33          	snez	s4,s4
    8020081c:	0149e9b3          	or	s3,s3,s4
    80200820:	0ff9f993          	andi	s3,s3,255
  return spi_txrx(spi, 0xFF);
    80200824:	0ff00593          	li	a1,255
    80200828:	8526                	mv	a0,s1
    8020082a:	00000097          	auipc	ra,0x0
    8020082e:	c90080e7          	jalr	-880(ra) # 802004ba <spi_txrx>
  spi->csmode.mode = SPI_CSMODE_AUTO;
    80200832:	4c9c                	lw	a5,24(s1)
    80200834:	9bf1                	andi	a5,a5,-4
    80200836:	cc9c                	sw	a5,24(s1)
    if (sd_cmd8(spi)) return SD_INIT_ERROR_CMD8;
    80200838:	4509                	li	a0,2
    8020083a:	ea099be3          	bnez	s3,802006f0 <sd_init+0x42>
  } while (r == SD_RESPONSE_IDLE);
    8020083e:	4a05                	li	s4,1
  sd_cmd(spi, SD_CMD(SD_CMD_APP_CMD), 0, 0x65);
    80200840:	06500693          	li	a3,101
    80200844:	4601                	li	a2,0
    80200846:	07700593          	li	a1,119
    8020084a:	8526                	mv	a0,s1
    8020084c:	00000097          	auipc	ra,0x0
    80200850:	da8080e7          	jalr	-600(ra) # 802005f4 <sd_cmd>
  return spi_txrx(spi, 0xFF);
    80200854:	0ff00593          	li	a1,255
    80200858:	8526                	mv	a0,s1
    8020085a:	00000097          	auipc	ra,0x0
    8020085e:	c60080e7          	jalr	-928(ra) # 802004ba <spi_txrx>
  spi->csmode.mode = SPI_CSMODE_AUTO;
    80200862:	4c9c                	lw	a5,24(s1)
    80200864:	9bf1                	andi	a5,a5,-4
    80200866:	cc9c                	sw	a5,24(s1)
    r = sd_cmd(spi, SD_CMD(SD_CMD_APP_SEND_OP_COND), 0x40000000, 0x77); /* HCS = 1 */
    80200868:	07700693          	li	a3,119
    8020086c:	40000637          	lui	a2,0x40000
    80200870:	06900593          	li	a1,105
    80200874:	8526                	mv	a0,s1
    80200876:	00000097          	auipc	ra,0x0
    8020087a:	d7e080e7          	jalr	-642(ra) # 802005f4 <sd_cmd>
    8020087e:	0ff57993          	andi	s3,a0,255
  return spi_txrx(spi, 0xFF);
    80200882:	0ff00593          	li	a1,255
    80200886:	8526                	mv	a0,s1
    80200888:	00000097          	auipc	ra,0x0
    8020088c:	c32080e7          	jalr	-974(ra) # 802004ba <spi_txrx>
  spi->csmode.mode = SPI_CSMODE_AUTO;
    80200890:	4c9c                	lw	a5,24(s1)
    80200892:	9bf1                	andi	a5,a5,-4
    80200894:	cc9c                	sw	a5,24(s1)
  } while (r == SD_RESPONSE_IDLE);
    80200896:	fb4985e3          	beq	s3,s4,80200840 <sd_init+0x192>
    if (sd_acmd41(spi)) return SD_INIT_ERROR_ACMD41;
    8020089a:	450d                	li	a0,3
    8020089c:	e4099ae3          	bnez	s3,802006f0 <sd_init+0x42>
  rc = (sd_cmd(spi, SD_CMD(SD_CMD_SET_BLOCKLEN), 0x200, 0x15) != 0x00);
    802008a0:	46d5                	li	a3,21
    802008a2:	20000613          	li	a2,512
    802008a6:	05000593          	li	a1,80
    802008aa:	8526                	mv	a0,s1
    802008ac:	00000097          	auipc	ra,0x0
    802008b0:	d48080e7          	jalr	-696(ra) # 802005f4 <sd_cmd>
    802008b4:	89aa                	mv	s3,a0
  return spi_txrx(spi, 0xFF);
    802008b6:	0ff00593          	li	a1,255
    802008ba:	8526                	mv	a0,s1
    802008bc:	00000097          	auipc	ra,0x0
    802008c0:	bfe080e7          	jalr	-1026(ra) # 802004ba <spi_txrx>
  spi->csmode.mode = SPI_CSMODE_AUTO;
    802008c4:	4c9c                	lw	a5,24(s1)
    802008c6:	9bf1                	andi	a5,a5,-4
    802008c8:	cc9c                	sw	a5,24(s1)
    if (sd_cmd16(spi)) return SD_INIT_ERROR_CMD16;
    802008ca:	4515                	li	a0,5
    802008cc:	de098ce3          	beqz	s3,802006c4 <sd_init+0x16>
    802008d0:	b505                	j	802006f0 <sd_init+0x42>

00000000802008d2 <sd_read_blocks>:


int sd_read_blocks(spi_ctrl* spi, void* dst, uint32_t src_lba, size_t size)
{
    802008d2:	715d                	addi	sp,sp,-80
    802008d4:	e486                	sd	ra,72(sp)
    802008d6:	e0a2                	sd	s0,64(sp)
    802008d8:	fc26                	sd	s1,56(sp)
    802008da:	f84a                	sd	s2,48(sp)
    802008dc:	f44e                	sd	s3,40(sp)
    802008de:	f052                	sd	s4,32(sp)
    802008e0:	ec56                	sd	s5,24(sp)
    802008e2:	e85a                	sd	s6,16(sp)
    802008e4:	e45e                	sd	s7,8(sp)
    802008e6:	e062                	sd	s8,0(sp)
    802008e8:	0880                	addi	s0,sp,80
    802008ea:	892a                	mv	s2,a0
    802008ec:	89ae                	mv	s3,a1
    802008ee:	84b2                	mv	s1,a2
    802008f0:	8ab6                	mv	s5,a3
  volatile uint8_t *p = dst;
  long i = size;
  int rc = 0;

  uint8_t crc = 0;
  crc = crc7(crc, SD_CMD(SD_CMD_READ_BLOCK_MULTIPLE));
    802008f2:	05200593          	li	a1,82
    802008f6:	4501                	li	a0,0
    802008f8:	00000097          	auipc	ra,0x0
    802008fc:	c92080e7          	jalr	-878(ra) # 8020058a <crc7>
  crc = crc7(crc, src_lba >> 24);
    80200900:	0184d59b          	srliw	a1,s1,0x18
    80200904:	00000097          	auipc	ra,0x0
    80200908:	c86080e7          	jalr	-890(ra) # 8020058a <crc7>
  crc = crc7(crc, (src_lba >> 16) & 0xff);
    8020090c:	0104d59b          	srliw	a1,s1,0x10
    80200910:	0ff5f593          	andi	a1,a1,255
    80200914:	00000097          	auipc	ra,0x0
    80200918:	c76080e7          	jalr	-906(ra) # 8020058a <crc7>
  crc = crc7(crc, (src_lba >> 8) & 0xff);
    8020091c:	0084d59b          	srliw	a1,s1,0x8
    80200920:	0ff5f593          	andi	a1,a1,255
    80200924:	00000097          	auipc	ra,0x0
    80200928:	c66080e7          	jalr	-922(ra) # 8020058a <crc7>
  crc = crc7(crc, src_lba & 0xff);
    8020092c:	0ff4f593          	andi	a1,s1,255
    80200930:	00000097          	auipc	ra,0x0
    80200934:	c5a080e7          	jalr	-934(ra) # 8020058a <crc7>
  crc = (crc << 1) | 1;
    80200938:	0015169b          	slliw	a3,a0,0x1
    8020093c:	0016e693          	ori	a3,a3,1
  if (sd_cmd(spi, SD_CMD(SD_CMD_READ_BLOCK_MULTIPLE), src_lba, crc) != 0x00) {
    80200940:	0ff6f693          	andi	a3,a3,255
    80200944:	8626                	mv	a2,s1
    80200946:	05200593          	li	a1,82
    8020094a:	854a                	mv	a0,s2
    8020094c:	00000097          	auipc	ra,0x0
    80200950:	ca8080e7          	jalr	-856(ra) # 802005f4 <sd_cmd>
    80200954:	8baa                	mv	s7,a0
    80200956:	20098993          	addi	s3,s3,512
    uint16_t crc, crc_exp;
    long n;

    crc = 0;
    n = 512;
    while (sd_dummy(spi) != SD_DATA_TOKEN);
    8020095a:	0fe00a13          	li	s4,254
    crc = 0;
    8020095e:	4b01                	li	s6,0
  if (sd_cmd(spi, SD_CMD(SD_CMD_READ_BLOCK_MULTIPLE), src_lba, crc) != 0x00) {
    80200960:	e149                	bnez	a0,802009e2 <sd_read_blocks+0x110>
    80200962:	e0098c13          	addi	s8,s3,-512
  return spi_txrx(spi, 0xFF);
    80200966:	0ff00593          	li	a1,255
    8020096a:	854a                	mv	a0,s2
    8020096c:	00000097          	auipc	ra,0x0
    80200970:	b4e080e7          	jalr	-1202(ra) # 802004ba <spi_txrx>
    while (sd_dummy(spi) != SD_DATA_TOKEN);
    80200974:	ff4519e3          	bne	a0,s4,80200966 <sd_read_blocks+0x94>
    crc = 0;
    80200978:	84da                	mv	s1,s6
  return spi_txrx(spi, 0xFF);
    8020097a:	0ff00593          	li	a1,255
    8020097e:	854a                	mv	a0,s2
    80200980:	00000097          	auipc	ra,0x0
    80200984:	b3a080e7          	jalr	-1222(ra) # 802004ba <spi_txrx>
    80200988:	85aa                	mv	a1,a0
    do {
      uint8_t x = sd_dummy(spi);
      *p++ = x;
    8020098a:	87e2                	mv	a5,s8
    8020098c:	0c05                	addi	s8,s8,1
    8020098e:	00a78023          	sb	a0,0(a5)
      crc = crc16(crc, x);
    80200992:	8526                	mv	a0,s1
    80200994:	00000097          	auipc	ra,0x0
    80200998:	c1e080e7          	jalr	-994(ra) # 802005b2 <crc16>
    8020099c:	84aa                	mv	s1,a0
    } while (--n > 0);
    8020099e:	fd3c1ee3          	bne	s8,s3,8020097a <sd_read_blocks+0xa8>
  return spi_txrx(spi, 0xFF);
    802009a2:	0ff00593          	li	a1,255
    802009a6:	854a                	mv	a0,s2
    802009a8:	00000097          	auipc	ra,0x0
    802009ac:	b12080e7          	jalr	-1262(ra) # 802004ba <spi_txrx>

    crc_exp = ((uint16_t)sd_dummy(spi) << 8);
    802009b0:	00851c1b          	slliw	s8,a0,0x8
    802009b4:	1c42                	slli	s8,s8,0x30
    802009b6:	030c5c13          	srli	s8,s8,0x30
  return spi_txrx(spi, 0xFF);
    802009ba:	0ff00593          	li	a1,255
    802009be:	854a                	mv	a0,s2
    802009c0:	00000097          	auipc	ra,0x0
    802009c4:	afa080e7          	jalr	-1286(ra) # 802004ba <spi_txrx>
    crc_exp |= sd_dummy(spi);
    802009c8:	00ac67b3          	or	a5,s8,a0

    if (crc != crc_exp) {
    802009cc:	2481                	sext.w	s1,s1
    802009ce:	17c2                	slli	a5,a5,0x30
    802009d0:	93c1                	srli	a5,a5,0x30
    802009d2:	02f49663          	bne	s1,a5,802009fe <sd_read_blocks+0x12c>
      break;
    }
//    if ((i % 2000) == 0){
//      puts(".");
//    }
  } while (--i > 0);
    802009d6:	1afd                	addi	s5,s5,-1
    802009d8:	20098993          	addi	s3,s3,512
    802009dc:	f95043e3          	bgtz	s5,80200962 <sd_read_blocks+0x90>
    802009e0:	a005                	j	80200a00 <sd_read_blocks+0x12e>
  return spi_txrx(spi, 0xFF);
    802009e2:	0ff00593          	li	a1,255
    802009e6:	854a                	mv	a0,s2
    802009e8:	00000097          	auipc	ra,0x0
    802009ec:	ad2080e7          	jalr	-1326(ra) # 802004ba <spi_txrx>
  spi->csmode.mode = SPI_CSMODE_AUTO;
    802009f0:	01892783          	lw	a5,24(s2)
    802009f4:	9bf1                	andi	a5,a5,-4
    802009f6:	00f92c23          	sw	a5,24(s2)
    return SD_COPY_ERROR_CMD18;
    802009fa:	4b85                	li	s7,1
    802009fc:	a03d                	j	80200a2a <sd_read_blocks+0x158>
      rc = SD_COPY_ERROR_CMD18_CRC;
    802009fe:	4b89                	li	s7,2

  sd_cmd(spi, SD_CMD(SD_CMD_STOP_TRANSMISSION), 0, 0x01);
    80200a00:	4685                	li	a3,1
    80200a02:	4601                	li	a2,0
    80200a04:	04c00593          	li	a1,76
    80200a08:	854a                	mv	a0,s2
    80200a0a:	00000097          	auipc	ra,0x0
    80200a0e:	bea080e7          	jalr	-1046(ra) # 802005f4 <sd_cmd>
  return spi_txrx(spi, 0xFF);
    80200a12:	0ff00593          	li	a1,255
    80200a16:	854a                	mv	a0,s2
    80200a18:	00000097          	auipc	ra,0x0
    80200a1c:	aa2080e7          	jalr	-1374(ra) # 802004ba <spi_txrx>
  spi->csmode.mode = SPI_CSMODE_AUTO;
    80200a20:	01892783          	lw	a5,24(s2)
    80200a24:	9bf1                	andi	a5,a5,-4
    80200a26:	00f92c23          	sw	a5,24(s2)
  sd_cmd_end(spi);
  return rc;
}
    80200a2a:	855e                	mv	a0,s7
    80200a2c:	60a6                	ld	ra,72(sp)
    80200a2e:	6406                	ld	s0,64(sp)
    80200a30:	74e2                	ld	s1,56(sp)
    80200a32:	7942                	ld	s2,48(sp)
    80200a34:	79a2                	ld	s3,40(sp)
    80200a36:	7a02                	ld	s4,32(sp)
    80200a38:	6ae2                	ld	s5,24(sp)
    80200a3a:	6b42                	ld	s6,16(sp)
    80200a3c:	6ba2                	ld	s7,8(sp)
    80200a3e:	6c02                	ld	s8,0(sp)
    80200a40:	6161                	addi	sp,sp,80
    80200a42:	8082                	ret

0000000080200a44 <sd_write_blocks>:


int sd_write_blocks(spi_ctrl* spi, void* src, uint32_t dst_lba, size_t size)
{
    80200a44:	711d                	addi	sp,sp,-96
    80200a46:	ec86                	sd	ra,88(sp)
    80200a48:	e8a2                	sd	s0,80(sp)
    80200a4a:	e4a6                	sd	s1,72(sp)
    80200a4c:	e0ca                	sd	s2,64(sp)
    80200a4e:	fc4e                	sd	s3,56(sp)
    80200a50:	f852                	sd	s4,48(sp)
    80200a52:	f456                	sd	s5,40(sp)
    80200a54:	f05a                	sd	s6,32(sp)
    80200a56:	ec5e                	sd	s7,24(sp)
    80200a58:	e862                	sd	s8,16(sp)
    80200a5a:	e466                	sd	s9,8(sp)
    80200a5c:	1080                	addi	s0,sp,96
    80200a5e:	8a2a                	mv	s4,a0
    80200a60:	8aae                	mv	s5,a1
    80200a62:	84b2                	mv	s1,a2
    80200a64:	8b36                	mv	s6,a3
    volatile uint8_t *p = src;
    long i = size;
    int rc = 0;

    uint8_t crc = 0;
    crc = crc7(crc, SD_CMD(SD_CMD_WRITE_BLOCK_MULTIPLE));
    80200a66:	05900593          	li	a1,89
    80200a6a:	4501                	li	a0,0
    80200a6c:	00000097          	auipc	ra,0x0
    80200a70:	b1e080e7          	jalr	-1250(ra) # 8020058a <crc7>
    crc = crc7(crc, dst_lba >> 24);
    80200a74:	0184d59b          	srliw	a1,s1,0x18
    80200a78:	00000097          	auipc	ra,0x0
    80200a7c:	b12080e7          	jalr	-1262(ra) # 8020058a <crc7>
    crc = crc7(crc, (dst_lba >> 16) & 0xff);
    80200a80:	0104d59b          	srliw	a1,s1,0x10
    80200a84:	0ff5f593          	andi	a1,a1,255
    80200a88:	00000097          	auipc	ra,0x0
    80200a8c:	b02080e7          	jalr	-1278(ra) # 8020058a <crc7>
    crc = crc7(crc, (dst_lba >> 8) & 0xff);
    80200a90:	0084d59b          	srliw	a1,s1,0x8
    80200a94:	0ff5f593          	andi	a1,a1,255
    80200a98:	00000097          	auipc	ra,0x0
    80200a9c:	af2080e7          	jalr	-1294(ra) # 8020058a <crc7>
    crc = crc7(crc, dst_lba & 0xff);
    80200aa0:	0ff4f593          	andi	a1,s1,255
    80200aa4:	00000097          	auipc	ra,0x0
    80200aa8:	ae6080e7          	jalr	-1306(ra) # 8020058a <crc7>
    crc = (crc << 1) | 1;
    80200aac:	0015169b          	slliw	a3,a0,0x1
    80200ab0:	0016e693          	ori	a3,a3,1
    if (sd_cmd(spi, SD_CMD(SD_CMD_WRITE_BLOCK_MULTIPLE), dst_lba, crc) != 0x00) {
    80200ab4:	0ff6f693          	andi	a3,a3,255
    80200ab8:	8626                	mv	a2,s1
    80200aba:	05900593          	li	a1,89
    80200abe:	8552                	mv	a0,s4
    80200ac0:	00000097          	auipc	ra,0x0
    80200ac4:	b34080e7          	jalr	-1228(ra) # 802005f4 <sd_cmd>
    80200ac8:	ed45                	bnez	a0,80200b80 <sd_write_blocks+0x13c>
    80200aca:	8caa                	mv	s9,a0
  return spi_txrx(spi, 0xFF);
    80200acc:	0ff00593          	li	a1,255
    80200ad0:	8552                	mv	a0,s4
    80200ad2:	00000097          	auipc	ra,0x0
    80200ad6:	9e8080e7          	jalr	-1560(ra) # 802004ba <spi_txrx>
    80200ada:	0ff00593          	li	a1,255
    80200ade:	8552                	mv	a0,s4
    80200ae0:	00000097          	auipc	ra,0x0
    80200ae4:	9da080e7          	jalr	-1574(ra) # 802004ba <spi_txrx>
    80200ae8:	200a8a93          	addi	s5,s5,512

    do {
        uint16_t crc;
        long n;

        crc = 0;
    80200aec:	4c01                	li	s8,0
        } while (--n);

        sd_txrx(spi, crc >> 8);
        sd_txrx(spi, crc & 0xff);

        if ((sd_dummy(spi) & SD_DATA_RESPONSE_MASK) != SD_DATA_RESPONSE_ACCEPTED) {
    80200aee:	4b95                	li	s7,5
    80200af0:	e00a8993          	addi	s3,s5,-512
  return spi_txrx(spi, data);
    80200af4:	0fc00593          	li	a1,252
    80200af8:	8552                	mv	a0,s4
    80200afa:	00000097          	auipc	ra,0x0
    80200afe:	9c0080e7          	jalr	-1600(ra) # 802004ba <spi_txrx>
        crc = 0;
    80200b02:	8962                	mv	s2,s8
            uint8_t x = *p++;
    80200b04:	87ce                	mv	a5,s3
    80200b06:	0985                	addi	s3,s3,1
    80200b08:	0007c483          	lbu	s1,0(a5)
    80200b0c:	0ff4f493          	andi	s1,s1,255
  return spi_txrx(spi, data);
    80200b10:	85a6                	mv	a1,s1
    80200b12:	8552                	mv	a0,s4
    80200b14:	00000097          	auipc	ra,0x0
    80200b18:	9a6080e7          	jalr	-1626(ra) # 802004ba <spi_txrx>
            crc = crc16(crc, x);
    80200b1c:	85a6                	mv	a1,s1
    80200b1e:	854a                	mv	a0,s2
    80200b20:	00000097          	auipc	ra,0x0
    80200b24:	a92080e7          	jalr	-1390(ra) # 802005b2 <crc16>
    80200b28:	892a                	mv	s2,a0
        } while (--n);
    80200b2a:	fd599de3          	bne	s3,s5,80200b04 <sd_write_blocks+0xc0>
        sd_txrx(spi, crc >> 8);
    80200b2e:	0085559b          	srliw	a1,a0,0x8
  return spi_txrx(spi, data);
    80200b32:	0ff5f593          	andi	a1,a1,255
    80200b36:	8552                	mv	a0,s4
    80200b38:	00000097          	auipc	ra,0x0
    80200b3c:	982080e7          	jalr	-1662(ra) # 802004ba <spi_txrx>
    80200b40:	0ff97593          	andi	a1,s2,255
    80200b44:	8552                	mv	a0,s4
    80200b46:	00000097          	auipc	ra,0x0
    80200b4a:	974080e7          	jalr	-1676(ra) # 802004ba <spi_txrx>
  return spi_txrx(spi, 0xFF);
    80200b4e:	0ff00593          	li	a1,255
    80200b52:	8552                	mv	a0,s4
    80200b54:	00000097          	auipc	ra,0x0
    80200b58:	966080e7          	jalr	-1690(ra) # 802004ba <spi_txrx>
        if ((sd_dummy(spi) & SD_DATA_RESPONSE_MASK) != SD_DATA_RESPONSE_ACCEPTED) {
    80200b5c:	01f57793          	andi	a5,a0,31
    80200b60:	03779e63          	bne	a5,s7,80200b9c <sd_write_blocks+0x158>
  return spi_txrx(spi, 0xFF);
    80200b64:	0ff00593          	li	a1,255
    80200b68:	8552                	mv	a0,s4
    80200b6a:	00000097          	auipc	ra,0x0
    80200b6e:	950080e7          	jalr	-1712(ra) # 802004ba <spi_txrx>
            rc = SD_COPY_ERROR_CMD25_CRC;
            break;
        }

        while(sd_dummy(spi) == SD_RESPONSE_BUSY);
    80200b72:	d96d                	beqz	a0,80200b64 <sd_write_blocks+0x120>

    } while (--i);
    80200b74:	1b7d                	addi	s6,s6,-1
    80200b76:	200a8a93          	addi	s5,s5,512
    80200b7a:	f60b1be3          	bnez	s6,80200af0 <sd_write_blocks+0xac>
    80200b7e:	a005                	j	80200b9e <sd_write_blocks+0x15a>
  return spi_txrx(spi, 0xFF);
    80200b80:	0ff00593          	li	a1,255
    80200b84:	8552                	mv	a0,s4
    80200b86:	00000097          	auipc	ra,0x0
    80200b8a:	934080e7          	jalr	-1740(ra) # 802004ba <spi_txrx>
  spi->csmode.mode = SPI_CSMODE_AUTO;
    80200b8e:	018a2783          	lw	a5,24(s4)
    80200b92:	9bf1                	andi	a5,a5,-4
    80200b94:	00fa2c23          	sw	a5,24(s4)
        return SD_COPY_ERROR_CMD25;
    80200b98:	4c85                	li	s9,1
    80200b9a:	a899                	j	80200bf0 <sd_write_blocks+0x1ac>
            rc = SD_COPY_ERROR_CMD25_CRC;
    80200b9c:	4c89                	li	s9,2
  return spi_txrx(spi, data);
    80200b9e:	0fd00593          	li	a1,253
    80200ba2:	8552                	mv	a0,s4
    80200ba4:	00000097          	auipc	ra,0x0
    80200ba8:	916080e7          	jalr	-1770(ra) # 802004ba <spi_txrx>
  return spi_txrx(spi, 0xFF);
    80200bac:	0ff00593          	li	a1,255
    80200bb0:	8552                	mv	a0,s4
    80200bb2:	00000097          	auipc	ra,0x0
    80200bb6:	908080e7          	jalr	-1784(ra) # 802004ba <spi_txrx>
    80200bba:	0ff00593          	li	a1,255
    80200bbe:	8552                	mv	a0,s4
    80200bc0:	00000097          	auipc	ra,0x0
    80200bc4:	8fa080e7          	jalr	-1798(ra) # 802004ba <spi_txrx>
    80200bc8:	0ff00593          	li	a1,255
    80200bcc:	8552                	mv	a0,s4
    80200bce:	00000097          	auipc	ra,0x0
    80200bd2:	8ec080e7          	jalr	-1812(ra) # 802004ba <spi_txrx>

    // magic!
    sd_dummy(spi);
    sd_dummy(spi);

    while(sd_dummy(spi) == SD_RESPONSE_BUSY);
    80200bd6:	d96d                	beqz	a0,80200bc8 <sd_write_blocks+0x184>
  return spi_txrx(spi, 0xFF);
    80200bd8:	0ff00593          	li	a1,255
    80200bdc:	8552                	mv	a0,s4
    80200bde:	00000097          	auipc	ra,0x0
    80200be2:	8dc080e7          	jalr	-1828(ra) # 802004ba <spi_txrx>
  spi->csmode.mode = SPI_CSMODE_AUTO;
    80200be6:	018a2783          	lw	a5,24(s4)
    80200bea:	9bf1                	andi	a5,a5,-4
    80200bec:	00fa2c23          	sw	a5,24(s4)
    sd_cmd_end(spi);
    return rc;
}
    80200bf0:	8566                	mv	a0,s9
    80200bf2:	60e6                	ld	ra,88(sp)
    80200bf4:	6446                	ld	s0,80(sp)
    80200bf6:	64a6                	ld	s1,72(sp)
    80200bf8:	6906                	ld	s2,64(sp)
    80200bfa:	79e2                	ld	s3,56(sp)
    80200bfc:	7a42                	ld	s4,48(sp)
    80200bfe:	7aa2                	ld	s5,40(sp)
    80200c00:	7b02                	ld	s6,32(sp)
    80200c02:	6be2                	ld	s7,24(sp)
    80200c04:	6c42                	ld	s8,16(sp)
    80200c06:	6ca2                	ld	s9,8(sp)
    80200c08:	6125                	addi	sp,sp,96
    80200c0a:	8082                	ret

0000000080200c0c <disk_status>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
    80200c0c:	1141                	addi	sp,sp,-16
    80200c0e:	e422                	sd	s0,8(sp)
    80200c10:	0800                	addi	s0,sp,16
	return pdrv == DEV_MMC ? RES_OK : RES_PARERR;
    80200c12:	e501                	bnez	a0,80200c1a <disk_status+0xe>
}
    80200c14:	6422                	ld	s0,8(sp)
    80200c16:	0141                	addi	sp,sp,16
    80200c18:	8082                	ret
	return pdrv == DEV_MMC ? RES_OK : RES_PARERR;
    80200c1a:	4511                	li	a0,4
    80200c1c:	bfe5                	j	80200c14 <disk_status+0x8>

0000000080200c1e <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
	int result;

	if (pdrv != DEV_MMC){
    80200c1e:	e121                	bnez	a0,80200c5e <disk_initialize+0x40>
{
    80200c20:	1141                	addi	sp,sp,-16
    80200c22:	e406                	sd	ra,8(sp)
    80200c24:	e022                	sd	s0,0(sp)
    80200c26:	0800                	addi	s0,sp,16
        return RES_PARERR;
    }
    printf("diskinit\n");
    80200c28:	00013517          	auipc	a0,0x13
    80200c2c:	44850513          	addi	a0,a0,1096 # 80214070 <rodata_start+0x70>
    80200c30:	00008097          	auipc	ra,0x8
    80200c34:	664080e7          	jalr	1636(ra) # 80209294 <printf>
    result = sd_init(spictrl, peripheral_input_khz, 0);
    80200c38:	4601                	li	a2,0
    80200c3a:	0007a5b7          	lui	a1,0x7a
    80200c3e:	12058593          	addi	a1,a1,288 # 7a120 <_entry-0x80185ee0>
    80200c42:	003f1537          	lui	a0,0x3f1
    80200c46:	0515                	addi	a0,a0,5
    80200c48:	0542                	slli	a0,a0,0x10
    80200c4a:	00000097          	auipc	ra,0x0
    80200c4e:	a64080e7          	jalr	-1436(ra) # 802006ae <sd_init>
    return result == 0 ? RES_OK : RES_ERROR;
    80200c52:	00a03533          	snez	a0,a0
}
    80200c56:	60a2                	ld	ra,8(sp)
    80200c58:	6402                	ld	s0,0(sp)
    80200c5a:	0141                	addi	sp,sp,16
    80200c5c:	8082                	ret
        return RES_PARERR;
    80200c5e:	4511                	li	a0,4
}
    80200c60:	8082                	ret

0000000080200c62 <disk_read>:
	UINT count		/* Number of sectors to read */
)
{
	int result;

    if (pdrv != DEV_MMC){
    80200c62:	e515                	bnez	a0,80200c8e <disk_read+0x2c>
{
    80200c64:	1141                	addi	sp,sp,-16
    80200c66:	e406                	sd	ra,8(sp)
    80200c68:	e022                	sd	s0,0(sp)
    80200c6a:	0800                	addi	s0,sp,16
        return RES_PARERR;
    }

//    KERNEL_ASSERT(sector <= (uint64_t) UINT32_MAX, "sector must be 32 bits");
//    printf("read sector = %d begin, count = %d\n", sector, count);
    result = sd_read_blocks(spictrl, buff, sector, count);
    80200c6c:	1682                	slli	a3,a3,0x20
    80200c6e:	9281                	srli	a3,a3,0x20
    80200c70:	2601                	sext.w	a2,a2
    80200c72:	003f1537          	lui	a0,0x3f1
    80200c76:	0515                	addi	a0,a0,5
    80200c78:	0542                	slli	a0,a0,0x10
    80200c7a:	00000097          	auipc	ra,0x0
    80200c7e:	c58080e7          	jalr	-936(ra) # 802008d2 <sd_read_blocks>
//    printf("read sector end, result = %d\n", result);

    return result == 0 ? RES_OK : RES_ERROR;
    80200c82:	00a03533          	snez	a0,a0
}
    80200c86:	60a2                	ld	ra,8(sp)
    80200c88:	6402                	ld	s0,0(sp)
    80200c8a:	0141                	addi	sp,sp,16
    80200c8c:	8082                	ret
        return RES_PARERR;
    80200c8e:	4511                	li	a0,4
}
    80200c90:	8082                	ret

0000000080200c92 <disk_write>:
	UINT count			/* Number of sectors to write */
)
{
	int result;

    if (pdrv != DEV_MMC){
    80200c92:	e515                	bnez	a0,80200cbe <disk_write+0x2c>
{
    80200c94:	1141                	addi	sp,sp,-16
    80200c96:	e406                	sd	ra,8(sp)
    80200c98:	e022                	sd	s0,0(sp)
    80200c9a:	0800                	addi	s0,sp,16
        return RES_PARERR;
    }

//    KERNEL_ASSERT(sector <= (uint64_t) UINT32_MAX, "sector must be 32 bits");
//    printf("write sector = %d begin, count = %d\n", sector, count);
    result = sd_write_blocks(spictrl, (void*)buff, sector, count);
    80200c9c:	1682                	slli	a3,a3,0x20
    80200c9e:	9281                	srli	a3,a3,0x20
    80200ca0:	2601                	sext.w	a2,a2
    80200ca2:	003f1537          	lui	a0,0x3f1
    80200ca6:	0515                	addi	a0,a0,5
    80200ca8:	0542                	slli	a0,a0,0x10
    80200caa:	00000097          	auipc	ra,0x0
    80200cae:	d9a080e7          	jalr	-614(ra) # 80200a44 <sd_write_blocks>
//    printf("write sector end, result = %d\n", result);
    return result == 0 ? RES_OK : RES_ERROR;
    80200cb2:	00a03533          	snez	a0,a0
}
    80200cb6:	60a2                	ld	ra,8(sp)
    80200cb8:	6402                	ld	s0,0(sp)
    80200cba:	0141                	addi	sp,sp,16
    80200cbc:	8082                	ret
        return RES_PARERR;
    80200cbe:	4511                	li	a0,4
}
    80200cc0:	8082                	ret

0000000080200cc2 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
    80200cc2:	1141                	addi	sp,sp,-16
    80200cc4:	e422                	sd	s0,8(sp)
    80200cc6:	0800                	addi	s0,sp,16
    DRESULT res;

    if (pdrv != DEV_MMC){
    80200cc8:	e91d                	bnez	a0,80200cfe <disk_ioctl+0x3c>
        return RES_PARERR;
    }

    switch (cmd) {
    80200cca:	4789                	li	a5,2
    80200ccc:	02f58363          	beq	a1,a5,80200cf2 <disk_ioctl+0x30>
    80200cd0:	00b7e863          	bltu	a5,a1,80200ce0 <disk_ioctl+0x1e>
    80200cd4:	c595                	beqz	a1,80200d00 <disk_ioctl+0x3e>
    case CTRL_SYNC:
        res = RES_OK;
        break;
    case GET_SECTOR_COUNT:
        *(DWORD*)buff = 13631488;
    80200cd6:	00d007b7          	lui	a5,0xd00
    80200cda:	c21c                	sw	a5,0(a2)
        res = RES_OK;
    80200cdc:	4501                	li	a0,0
        break;
    80200cde:	a00d                	j	80200d00 <disk_ioctl+0x3e>
    switch (cmd) {
    80200ce0:	478d                	li	a5,3
    80200ce2:	4511                	li	a0,4
    80200ce4:	00f59e63          	bne	a1,a5,80200d00 <disk_ioctl+0x3e>
    case GET_SECTOR_SIZE:
        *(WORD*)buff = 512;
        res = RES_OK;
        break;
    case GET_BLOCK_SIZE:
        *(WORD*)buff = 4096;
    80200ce8:	6785                	lui	a5,0x1
    80200cea:	00f61023          	sh	a5,0(a2) # 40000000 <_entry-0x40200000>
        res = RES_OK;
    80200cee:	4501                	li	a0,0
        break;
    80200cf0:	a801                	j	80200d00 <disk_ioctl+0x3e>
        *(WORD*)buff = 512;
    80200cf2:	20000793          	li	a5,512
    80200cf6:	00f61023          	sh	a5,0(a2)
        res = RES_OK;
    80200cfa:	4501                	li	a0,0
        break;
    80200cfc:	a011                	j	80200d00 <disk_ioctl+0x3e>
        return RES_PARERR;
    80200cfe:	4511                	li	a0,4
        res = RES_PARERR;
        break;
    }

    return res;
}
    80200d00:	6422                	ld	s0,8(sp)
    80200d02:	0141                	addi	sp,sp,16
    80200d04:	8082                	ret

0000000080200d06 <disk_init>:
#endif

int disk_init_flag;
void disk_init(void)
{
    if(disk_init_flag)return;
    80200d06:	01049797          	auipc	a5,0x1049
    80200d0a:	49a7a783          	lw	a5,1178(a5) # 8124a1a0 <disk_init_flag>
    80200d0e:	c391                	beqz	a5,80200d12 <disk_init+0xc>
    80200d10:	8082                	ret
{
    80200d12:	1141                	addi	sp,sp,-16
    80200d14:	e406                	sd	ra,8(sp)
    80200d16:	e022                	sd	s0,0(sp)
    80200d18:	0800                	addi	s0,sp,16
    else disk_init_flag = 1;
    80200d1a:	4785                	li	a5,1
    80200d1c:	01049717          	auipc	a4,0x1049
    80200d20:	48f72223          	sw	a5,1156(a4) # 8124a1a0 <disk_init_flag>
    #ifdef RAM
    ramdisk_init();
    80200d24:	fffff097          	auipc	ra,0xfffff
    80200d28:	65e080e7          	jalr	1630(ra) # 80200382 <ramdisk_init>
    #else
    disk_initialize(0);
    #endif
}
    80200d2c:	60a2                	ld	ra,8(sp)
    80200d2e:	6402                	ld	s0,0(sp)
    80200d30:	0141                	addi	sp,sp,16
    80200d32:	8082                	ret

0000000080200d34 <vdisk_read>:

void vdisk_read(struct buf *b)
{
    80200d34:	1141                	addi	sp,sp,-16
    80200d36:	e406                	sd	ra,8(sp)
    80200d38:	e022                	sd	s0,0(sp)
    80200d3a:	0800                	addi	s0,sp,16
    #ifdef RAM    
	ramdisk_rw(b, 0);
    80200d3c:	4581                	li	a1,0
    80200d3e:	fffff097          	auipc	ra,0xfffff
    80200d42:	694080e7          	jalr	1684(ra) # 802003d2 <ramdisk_rw>
    #else 
	disk_read(0,b->data, b->sectorno,1);
    #endif
}
    80200d46:	60a2                	ld	ra,8(sp)
    80200d48:	6402                	ld	s0,0(sp)
    80200d4a:	0141                	addi	sp,sp,16
    80200d4c:	8082                	ret

0000000080200d4e <vdisk_write>:

void vdisk_write(struct buf *b)
{
    80200d4e:	1141                	addi	sp,sp,-16
    80200d50:	e406                	sd	ra,8(sp)
    80200d52:	e022                	sd	s0,0(sp)
    80200d54:	0800                	addi	s0,sp,16
    #ifdef RAM
    	ramdisk_rw(b, 1);
    80200d56:	4585                	li	a1,1
    80200d58:	fffff097          	auipc	ra,0xfffff
    80200d5c:	67a080e7          	jalr	1658(ra) # 802003d2 <ramdisk_rw>
    #else 
	disk_write(0,b->data, b->sectorno,1);
    #endif
}
    80200d60:	60a2                	ld	ra,8(sp)
    80200d62:	6402                	ld	s0,0(sp)
    80200d64:	0141                	addi	sp,sp,16
    80200d66:	8082                	ret

0000000080200d68 <disk_intr>:

void disk_intr(void)
{
    80200d68:	1141                	addi	sp,sp,-16
    80200d6a:	e422                	sd	s0,8(sp)
    80200d6c:	0800                	addi	s0,sp,16
    #ifdef SD
        // dmac_intr(DMAC_CHANNEL0);
    #endif
}
    80200d6e:	6422                	ld	s0,8(sp)
    80200d70:	0141                	addi	sp,sp,16
    80200d72:	8082                	ret

0000000080200d74 <memset>:
#include "include/types.h"

void*
memset(void *dst, int c, uint n)
{
    80200d74:	1141                	addi	sp,sp,-16
    80200d76:	e422                	sd	s0,8(sp)
    80200d78:	0800                	addi	s0,sp,16
  char *cdst = (char *) dst;
  int i;
  for(i = 0; i < n; i++){
    80200d7a:	ce09                	beqz	a2,80200d94 <memset+0x20>
    80200d7c:	87aa                	mv	a5,a0
    80200d7e:	fff6071b          	addiw	a4,a2,-1
    80200d82:	1702                	slli	a4,a4,0x20
    80200d84:	9301                	srli	a4,a4,0x20
    80200d86:	0705                	addi	a4,a4,1
    80200d88:	972a                	add	a4,a4,a0
    cdst[i] = c;
    80200d8a:	00b78023          	sb	a1,0(a5)
  for(i = 0; i < n; i++){
    80200d8e:	0785                	addi	a5,a5,1
    80200d90:	fee79de3          	bne	a5,a4,80200d8a <memset+0x16>
  }
  return dst;
}
    80200d94:	6422                	ld	s0,8(sp)
    80200d96:	0141                	addi	sp,sp,16
    80200d98:	8082                	ret

0000000080200d9a <memcmp>:

int
memcmp(const void *v1, const void *v2, uint n)
{
    80200d9a:	1141                	addi	sp,sp,-16
    80200d9c:	e422                	sd	s0,8(sp)
    80200d9e:	0800                	addi	s0,sp,16
  const uchar *s1, *s2;

  s1 = v1;
  s2 = v2;
  while(n-- > 0){
    80200da0:	ca05                	beqz	a2,80200dd0 <memcmp+0x36>
    80200da2:	fff6069b          	addiw	a3,a2,-1
    80200da6:	1682                	slli	a3,a3,0x20
    80200da8:	9281                	srli	a3,a3,0x20
    80200daa:	0685                	addi	a3,a3,1
    80200dac:	96aa                	add	a3,a3,a0
    if(*s1 != *s2)
    80200dae:	00054783          	lbu	a5,0(a0) # 3f1000 <_entry-0x7fe0f000>
    80200db2:	0005c703          	lbu	a4,0(a1)
    80200db6:	00e79863          	bne	a5,a4,80200dc6 <memcmp+0x2c>
      return *s1 - *s2;
    s1++, s2++;
    80200dba:	0505                	addi	a0,a0,1
    80200dbc:	0585                	addi	a1,a1,1
  while(n-- > 0){
    80200dbe:	fed518e3          	bne	a0,a3,80200dae <memcmp+0x14>
  }

  return 0;
    80200dc2:	4501                	li	a0,0
    80200dc4:	a019                	j	80200dca <memcmp+0x30>
      return *s1 - *s2;
    80200dc6:	40e7853b          	subw	a0,a5,a4
}
    80200dca:	6422                	ld	s0,8(sp)
    80200dcc:	0141                	addi	sp,sp,16
    80200dce:	8082                	ret
  return 0;
    80200dd0:	4501                	li	a0,0
    80200dd2:	bfe5                	j	80200dca <memcmp+0x30>

0000000080200dd4 <memmove>:

void*
memmove(void *dst, const void *src, uint n)
{
    80200dd4:	1141                	addi	sp,sp,-16
    80200dd6:	e422                	sd	s0,8(sp)
    80200dd8:	0800                	addi	s0,sp,16
  const char *s;
  char *d;

  s = src;
  d = dst;
  if(s < d && s + n > d){
    80200dda:	00a5f963          	bgeu	a1,a0,80200dec <memmove+0x18>
    80200dde:	02061713          	slli	a4,a2,0x20
    80200de2:	9301                	srli	a4,a4,0x20
    80200de4:	00e587b3          	add	a5,a1,a4
    80200de8:	02f56563          	bltu	a0,a5,80200e12 <memmove+0x3e>
    s += n;
    d += n;
    while(n-- > 0)
      *--d = *--s;
  } else
    while(n-- > 0)
    80200dec:	fff6069b          	addiw	a3,a2,-1
    80200df0:	ce11                	beqz	a2,80200e0c <memmove+0x38>
    80200df2:	1682                	slli	a3,a3,0x20
    80200df4:	9281                	srli	a3,a3,0x20
    80200df6:	0685                	addi	a3,a3,1
    80200df8:	96ae                	add	a3,a3,a1
    80200dfa:	87aa                	mv	a5,a0
      *d++ = *s++;
    80200dfc:	0585                	addi	a1,a1,1
    80200dfe:	0785                	addi	a5,a5,1
    80200e00:	fff5c703          	lbu	a4,-1(a1)
    80200e04:	fee78fa3          	sb	a4,-1(a5)
    while(n-- > 0)
    80200e08:	fed59ae3          	bne	a1,a3,80200dfc <memmove+0x28>

  return dst;
}
    80200e0c:	6422                	ld	s0,8(sp)
    80200e0e:	0141                	addi	sp,sp,16
    80200e10:	8082                	ret
    d += n;
    80200e12:	972a                	add	a4,a4,a0
    while(n-- > 0)
    80200e14:	fff6069b          	addiw	a3,a2,-1
    80200e18:	da75                	beqz	a2,80200e0c <memmove+0x38>
    80200e1a:	02069613          	slli	a2,a3,0x20
    80200e1e:	9201                	srli	a2,a2,0x20
    80200e20:	fff64613          	not	a2,a2
    80200e24:	963e                	add	a2,a2,a5
      *--d = *--s;
    80200e26:	17fd                	addi	a5,a5,-1
    80200e28:	177d                	addi	a4,a4,-1
    80200e2a:	0007c683          	lbu	a3,0(a5)
    80200e2e:	00d70023          	sb	a3,0(a4)
    while(n-- > 0)
    80200e32:	fec79ae3          	bne	a5,a2,80200e26 <memmove+0x52>
    80200e36:	bfd9                	j	80200e0c <memmove+0x38>

0000000080200e38 <memcpy>:

// memcpy exists to placate GCC.  Use memmove.
void*
memcpy(void *dst, const void *src, uint n)
{
    80200e38:	1141                	addi	sp,sp,-16
    80200e3a:	e406                	sd	ra,8(sp)
    80200e3c:	e022                	sd	s0,0(sp)
    80200e3e:	0800                	addi	s0,sp,16
  return memmove(dst, src, n);
    80200e40:	00000097          	auipc	ra,0x0
    80200e44:	f94080e7          	jalr	-108(ra) # 80200dd4 <memmove>
}
    80200e48:	60a2                	ld	ra,8(sp)
    80200e4a:	6402                	ld	s0,0(sp)
    80200e4c:	0141                	addi	sp,sp,16
    80200e4e:	8082                	ret

0000000080200e50 <strncmp>:

int
strncmp(const char *p, const char *q, uint n)
{
    80200e50:	1141                	addi	sp,sp,-16
    80200e52:	e422                	sd	s0,8(sp)
    80200e54:	0800                	addi	s0,sp,16
  while(n > 0 && *p && *p == *q)
    80200e56:	ce11                	beqz	a2,80200e72 <strncmp+0x22>
    80200e58:	00054783          	lbu	a5,0(a0)
    80200e5c:	cf89                	beqz	a5,80200e76 <strncmp+0x26>
    80200e5e:	0005c703          	lbu	a4,0(a1)
    80200e62:	00f71a63          	bne	a4,a5,80200e76 <strncmp+0x26>
    n--, p++, q++;
    80200e66:	367d                	addiw	a2,a2,-1
    80200e68:	0505                	addi	a0,a0,1
    80200e6a:	0585                	addi	a1,a1,1
  while(n > 0 && *p && *p == *q)
    80200e6c:	f675                	bnez	a2,80200e58 <strncmp+0x8>
  if(n == 0)
    return 0;
    80200e6e:	4501                	li	a0,0
    80200e70:	a809                	j	80200e82 <strncmp+0x32>
    80200e72:	4501                	li	a0,0
    80200e74:	a039                	j	80200e82 <strncmp+0x32>
  if(n == 0)
    80200e76:	ca09                	beqz	a2,80200e88 <strncmp+0x38>
  return (uchar)*p - (uchar)*q;
    80200e78:	00054503          	lbu	a0,0(a0)
    80200e7c:	0005c783          	lbu	a5,0(a1)
    80200e80:	9d1d                	subw	a0,a0,a5
}
    80200e82:	6422                	ld	s0,8(sp)
    80200e84:	0141                	addi	sp,sp,16
    80200e86:	8082                	ret
    return 0;
    80200e88:	4501                	li	a0,0
    80200e8a:	bfe5                	j	80200e82 <strncmp+0x32>

0000000080200e8c <strncpy>:

char*
strncpy(char *s, const char *t, int n)
{
    80200e8c:	1141                	addi	sp,sp,-16
    80200e8e:	e422                	sd	s0,8(sp)
    80200e90:	0800                	addi	s0,sp,16
  char *os;

  os = s;
  while(n-- > 0 && (*s++ = *t++) != 0)
    80200e92:	872a                	mv	a4,a0
    80200e94:	8832                	mv	a6,a2
    80200e96:	367d                	addiw	a2,a2,-1
    80200e98:	01005963          	blez	a6,80200eaa <strncpy+0x1e>
    80200e9c:	0705                	addi	a4,a4,1
    80200e9e:	0005c783          	lbu	a5,0(a1)
    80200ea2:	fef70fa3          	sb	a5,-1(a4)
    80200ea6:	0585                	addi	a1,a1,1
    80200ea8:	f7f5                	bnez	a5,80200e94 <strncpy+0x8>
    ;
  while(n-- > 0)
    80200eaa:	00c05d63          	blez	a2,80200ec4 <strncpy+0x38>
    80200eae:	86ba                	mv	a3,a4
    *s++ = 0;
    80200eb0:	0685                	addi	a3,a3,1
    80200eb2:	fe068fa3          	sb	zero,-1(a3)
  while(n-- > 0)
    80200eb6:	fff6c793          	not	a5,a3
    80200eba:	9fb9                	addw	a5,a5,a4
    80200ebc:	010787bb          	addw	a5,a5,a6
    80200ec0:	fef048e3          	bgtz	a5,80200eb0 <strncpy+0x24>
  return os;
}
    80200ec4:	6422                	ld	s0,8(sp)
    80200ec6:	0141                	addi	sp,sp,16
    80200ec8:	8082                	ret

0000000080200eca <safestrcpy>:

// Like strncpy but guaranteed to NUL-terminate.
char*
safestrcpy(char *s, const char *t, int n)
{
    80200eca:	1141                	addi	sp,sp,-16
    80200ecc:	e422                	sd	s0,8(sp)
    80200ece:	0800                	addi	s0,sp,16
  char *os;

  os = s;
  if(n <= 0)
    80200ed0:	02c05363          	blez	a2,80200ef6 <safestrcpy+0x2c>
    80200ed4:	fff6069b          	addiw	a3,a2,-1
    80200ed8:	1682                	slli	a3,a3,0x20
    80200eda:	9281                	srli	a3,a3,0x20
    80200edc:	96ae                	add	a3,a3,a1
    80200ede:	87aa                	mv	a5,a0
    return os;
  while(--n > 0 && (*s++ = *t++) != 0)
    80200ee0:	00d58963          	beq	a1,a3,80200ef2 <safestrcpy+0x28>
    80200ee4:	0585                	addi	a1,a1,1
    80200ee6:	0785                	addi	a5,a5,1
    80200ee8:	fff5c703          	lbu	a4,-1(a1)
    80200eec:	fee78fa3          	sb	a4,-1(a5)
    80200ef0:	fb65                	bnez	a4,80200ee0 <safestrcpy+0x16>
    ;
  *s = 0;
    80200ef2:	00078023          	sb	zero,0(a5)
  return os;
}
    80200ef6:	6422                	ld	s0,8(sp)
    80200ef8:	0141                	addi	sp,sp,16
    80200efa:	8082                	ret

0000000080200efc <strlen>:

int
strlen(const char *s)
{
    80200efc:	1141                	addi	sp,sp,-16
    80200efe:	e422                	sd	s0,8(sp)
    80200f00:	0800                	addi	s0,sp,16
  int n;

  for(n = 0; s[n]; n++)
    80200f02:	00054783          	lbu	a5,0(a0)
    80200f06:	cf91                	beqz	a5,80200f22 <strlen+0x26>
    80200f08:	0505                	addi	a0,a0,1
    80200f0a:	87aa                	mv	a5,a0
    80200f0c:	4685                	li	a3,1
    80200f0e:	9e89                	subw	a3,a3,a0
    80200f10:	00f6853b          	addw	a0,a3,a5
    80200f14:	0785                	addi	a5,a5,1
    80200f16:	fff7c703          	lbu	a4,-1(a5)
    80200f1a:	fb7d                	bnez	a4,80200f10 <strlen+0x14>
    ;
  return n;
}
    80200f1c:	6422                	ld	s0,8(sp)
    80200f1e:	0141                	addi	sp,sp,16
    80200f20:	8082                	ret
  for(n = 0; s[n]; n++)
    80200f22:	4501                	li	a0,0
    80200f24:	bfe5                	j	80200f1c <strlen+0x20>

0000000080200f26 <wnstr>:

// convert uchar string into wide char string 
void wnstr(wchar *dst, char const *src, int len) {
    80200f26:	1141                	addi	sp,sp,-16
    80200f28:	e422                	sd	s0,8(sp)
    80200f2a:	0800                	addi	s0,sp,16
  while (len -- && *src) {
    80200f2c:	c215                	beqz	a2,80200f50 <wnstr+0x2a>
    80200f2e:	fff6071b          	addiw	a4,a2,-1
    80200f32:	1702                	slli	a4,a4,0x20
    80200f34:	9301                	srli	a4,a4,0x20
    80200f36:	0705                	addi	a4,a4,1
    80200f38:	0706                	slli	a4,a4,0x1
    80200f3a:	972a                	add	a4,a4,a0
    80200f3c:	0005c783          	lbu	a5,0(a1)
    80200f40:	cb81                	beqz	a5,80200f50 <wnstr+0x2a>
    *(uchar*)dst = *src++;
    80200f42:	0585                	addi	a1,a1,1
    80200f44:	00f50023          	sb	a5,0(a0)
    dst ++;
    80200f48:	0509                	addi	a0,a0,2
  while (len -- && *src) {
    80200f4a:	fee519e3          	bne	a0,a4,80200f3c <wnstr+0x16>
    dst ++;
    80200f4e:	853a                	mv	a0,a4
  }

  *dst = 0;
    80200f50:	00051023          	sh	zero,0(a0)
}
    80200f54:	6422                	ld	s0,8(sp)
    80200f56:	0141                	addi	sp,sp,16
    80200f58:	8082                	ret

0000000080200f5a <snstr>:

// convert wide char string into uchar string 
void snstr(char *dst, wchar const *src, int len) {
    80200f5a:	1141                	addi	sp,sp,-16
    80200f5c:	e422                	sd	s0,8(sp)
    80200f5e:	0800                	addi	s0,sp,16
  while (len -- && *src) {
    80200f60:	c221                	beqz	a2,80200fa0 <snstr+0x46>
    80200f62:	fff6079b          	addiw	a5,a2,-1
    80200f66:	fff6069b          	addiw	a3,a2,-1
    80200f6a:	1682                	slli	a3,a3,0x20
    80200f6c:	9281                	srli	a3,a3,0x20
    80200f6e:	0685                	addi	a3,a3,1
    80200f70:	96aa                	add	a3,a3,a0
    80200f72:	0005d703          	lhu	a4,0(a1)
    80200f76:	cb09                	beqz	a4,80200f88 <snstr+0x2e>
    *dst++ = (uchar)(*src & 0xff);
    80200f78:	0505                	addi	a0,a0,1
    80200f7a:	fee50fa3          	sb	a4,-1(a0)
    src ++;
    80200f7e:	0589                	addi	a1,a1,2
  while (len -- && *src) {
    80200f80:	37fd                	addiw	a5,a5,-1
    80200f82:	fed518e3          	bne	a0,a3,80200f72 <snstr+0x18>
    *dst++ = (uchar)(*src & 0xff);
    80200f86:	8536                	mv	a0,a3
  }
  while(len-- > 0)
    80200f88:	00f05c63          	blez	a5,80200fa0 <snstr+0x46>
    80200f8c:	37fd                	addiw	a5,a5,-1
    80200f8e:	1782                	slli	a5,a5,0x20
    80200f90:	9381                	srli	a5,a5,0x20
    80200f92:	0785                	addi	a5,a5,1
    80200f94:	97aa                	add	a5,a5,a0
    *dst++ = 0;
    80200f96:	0505                	addi	a0,a0,1
    80200f98:	fe050fa3          	sb	zero,-1(a0)
  while(len-- > 0)
    80200f9c:	fea79de3          	bne	a5,a0,80200f96 <snstr+0x3c>
}
    80200fa0:	6422                	ld	s0,8(sp)
    80200fa2:	0141                	addi	sp,sp,16
    80200fa4:	8082                	ret

0000000080200fa6 <wcsncmp>:

int wcsncmp(wchar const *s1, wchar const *s2, int len) {
    80200fa6:	1141                	addi	sp,sp,-16
    80200fa8:	e422                	sd	s0,8(sp)
    80200faa:	0800                	addi	s0,sp,16
    80200fac:	872a                	mv	a4,a0
  int ret = 0;

  while (len-- && *s1) {
    80200fae:	02061693          	slli	a3,a2,0x20
    80200fb2:	9281                	srli	a3,a3,0x20
    80200fb4:	0686                	slli	a3,a3,0x1
    80200fb6:	96ae                	add	a3,a3,a1
    80200fb8:	00d58f63          	beq	a1,a3,80200fd6 <wcsncmp+0x30>
    80200fbc:	00075783          	lhu	a5,0(a4)
    80200fc0:	cb89                	beqz	a5,80200fd2 <wcsncmp+0x2c>
    ret = (int)(*s1++ - *s2++);
    80200fc2:	0709                	addi	a4,a4,2
    80200fc4:	0589                	addi	a1,a1,2
    80200fc6:	ffe5d503          	lhu	a0,-2(a1)
    80200fca:	40a7853b          	subw	a0,a5,a0
    if (ret) break;
    80200fce:	d56d                	beqz	a0,80200fb8 <wcsncmp+0x12>
    80200fd0:	a021                	j	80200fd8 <wcsncmp+0x32>
    80200fd2:	4501                	li	a0,0
    80200fd4:	a011                	j	80200fd8 <wcsncmp+0x32>
    80200fd6:	4501                	li	a0,0
  }

  return ret;
}
    80200fd8:	6422                	ld	s0,8(sp)
    80200fda:	0141                	addi	sp,sp,16
    80200fdc:	8082                	ret

0000000080200fde <strchr>:

char*
strchr(const char *s, char c)
{
    80200fde:	1141                	addi	sp,sp,-16
    80200fe0:	e422                	sd	s0,8(sp)
    80200fe2:	0800                	addi	s0,sp,16
  for(; *s; s++)
    80200fe4:	00054783          	lbu	a5,0(a0)
    80200fe8:	cb99                	beqz	a5,80200ffe <strchr+0x20>
    if(*s == c)
    80200fea:	00f58763          	beq	a1,a5,80200ff8 <strchr+0x1a>
  for(; *s; s++)
    80200fee:	0505                	addi	a0,a0,1
    80200ff0:	00054783          	lbu	a5,0(a0)
    80200ff4:	fbfd                	bnez	a5,80200fea <strchr+0xc>
      return (char*)s;
  return 0;
    80200ff6:	4501                	li	a0,0
    80200ff8:	6422                	ld	s0,8(sp)
    80200ffa:	0141                	addi	sp,sp,16
    80200ffc:	8082                	ret
  return 0;
    80200ffe:	4501                	li	a0,0
    80201000:	bfe5                	j	80200ff8 <strchr+0x1a>

0000000080201002 <push_off>:
// it takes two pop_off()s to undo two push_off()s.  Also, if interrupts
// are initially off, then push_off, pop_off leaves them off.

void
push_off(void)
{
    80201002:	1101                	addi	sp,sp,-32
    80201004:	ec06                	sd	ra,24(sp)
    80201006:	e822                	sd	s0,16(sp)
    80201008:	e426                	sd	s1,8(sp)
    8020100a:	1000                	addi	s0,sp,32

static inline uint64
r_sstatus()
{
  uint64 x;
  asm volatile("csrr %0, sstatus" : "=r" (x) );
    8020100c:	100024f3          	csrr	s1,sstatus
    80201010:	100027f3          	csrr	a5,sstatus

// disable device interrupts
static inline void
intr_off()
{
  w_sstatus(r_sstatus() & ~SSTATUS_SIE);
    80201014:	9bf5                	andi	a5,a5,-3
  asm volatile("csrw sstatus, %0" : : "r" (x));
    80201016:	10079073          	csrw	sstatus,a5
  int old = intr_get();

  intr_off();
  //printf("\e[32mpush_off()\e[0m: cpuid(): %d\n", cpuid());
  if(mycpu()->noff == 0)
    8020101a:	0000b097          	auipc	ra,0xb
    8020101e:	37c080e7          	jalr	892(ra) # 8020c396 <mycpu>
    80201022:	5d3c                	lw	a5,120(a0)
    80201024:	cf89                	beqz	a5,8020103e <push_off+0x3c>
    mycpu()->intena = old;
  mycpu()->noff += 1;
    80201026:	0000b097          	auipc	ra,0xb
    8020102a:	370080e7          	jalr	880(ra) # 8020c396 <mycpu>
    8020102e:	5d3c                	lw	a5,120(a0)
    80201030:	2785                	addiw	a5,a5,1
    80201032:	dd3c                	sw	a5,120(a0)
}
    80201034:	60e2                	ld	ra,24(sp)
    80201036:	6442                	ld	s0,16(sp)
    80201038:	64a2                	ld	s1,8(sp)
    8020103a:	6105                	addi	sp,sp,32
    8020103c:	8082                	ret
    mycpu()->intena = old;
    8020103e:	0000b097          	auipc	ra,0xb
    80201042:	358080e7          	jalr	856(ra) # 8020c396 <mycpu>
// are device interrupts enabled?
static inline int
intr_get()
{
  uint64 x = r_sstatus();
  return (x & SSTATUS_SIE) != 0;
    80201046:	8085                	srli	s1,s1,0x1
    80201048:	8885                	andi	s1,s1,1
    8020104a:	dd64                	sw	s1,124(a0)
    8020104c:	bfe9                	j	80201026 <push_off+0x24>

000000008020104e <pop_off>:

void
pop_off(void)
{
    8020104e:	1141                	addi	sp,sp,-16
    80201050:	e406                	sd	ra,8(sp)
    80201052:	e022                	sd	s0,0(sp)
    80201054:	0800                	addi	s0,sp,16
  struct cpu *c = mycpu();
    80201056:	0000b097          	auipc	ra,0xb
    8020105a:	340080e7          	jalr	832(ra) # 8020c396 <mycpu>
  asm volatile("csrr %0, sstatus" : "=r" (x) );
    8020105e:	100027f3          	csrr	a5,sstatus
  return (x & SSTATUS_SIE) != 0;
    80201062:	8b89                	andi	a5,a5,2

  //printf("\e[31mpop_off()\e[0m: cpuid(): %d\n", cpuid());
  if(intr_get())
    80201064:	e78d                	bnez	a5,8020108e <pop_off+0x40>
    panic("pop_off - interruptible");
  if(c->noff < 1) {
    80201066:	5d3c                	lw	a5,120(a0)
    80201068:	02f05b63          	blez	a5,8020109e <pop_off+0x50>
    //printf("c->noff = %d\n", c->noff);
    panic("pop_off");
  }
  //printf("c->noff: %d\n", c->noff);
  //printf("c: %x\n", c);
  c->noff -= 1;
    8020106c:	37fd                	addiw	a5,a5,-1
    8020106e:	0007871b          	sext.w	a4,a5
    80201072:	dd3c                	sw	a5,120(a0)
  if(c->noff == 0 && c->intena)
    80201074:	eb09                	bnez	a4,80201086 <pop_off+0x38>
    80201076:	5d7c                	lw	a5,124(a0)
    80201078:	c799                	beqz	a5,80201086 <pop_off+0x38>
  asm volatile("csrr %0, sstatus" : "=r" (x) );
    8020107a:	100027f3          	csrr	a5,sstatus
  w_sstatus(r_sstatus() | SSTATUS_SIE);
    8020107e:	0027e793          	ori	a5,a5,2
  asm volatile("csrw sstatus, %0" : : "r" (x));
    80201082:	10079073          	csrw	sstatus,a5
    intr_on();
}
    80201086:	60a2                	ld	ra,8(sp)
    80201088:	6402                	ld	s0,0(sp)
    8020108a:	0141                	addi	sp,sp,16
    8020108c:	8082                	ret
    panic("pop_off - interruptible");
    8020108e:	00013517          	auipc	a0,0x13
    80201092:	ff250513          	addi	a0,a0,-14 # 80214080 <rodata_start+0x80>
    80201096:	00008097          	auipc	ra,0x8
    8020109a:	1b4080e7          	jalr	436(ra) # 8020924a <panic>
    panic("pop_off");
    8020109e:	00013517          	auipc	a0,0x13
    802010a2:	ffa50513          	addi	a0,a0,-6 # 80214098 <rodata_start+0x98>
    802010a6:	00008097          	auipc	ra,0x8
    802010aa:	1a4080e7          	jalr	420(ra) # 8020924a <panic>

00000000802010ae <image_init>:
#include "include/ramdisk.h"
#endif

void image_init(struct dirent* img)
{
    if(!FatFs[img->dev].valid){
    802010ae:	11454783          	lbu	a5,276(a0)
    802010b2:	6715                	lui	a4,0x5
    802010b4:	9b870713          	addi	a4,a4,-1608 # 49b8 <_entry-0x801fb648>
    802010b8:	02e78733          	mul	a4,a5,a4
    802010bc:	01056797          	auipc	a5,0x1056
    802010c0:	b1478793          	addi	a5,a5,-1260 # 81256bd0 <FatFs>
    802010c4:	97ba                	add	a5,a5,a4
    802010c6:	43dc                	lw	a5,4(a5)
    802010c8:	c391                	beqz	a5,802010cc <image_init+0x1e>
    802010ca:	8082                	ret
{
    802010cc:	1141                	addi	sp,sp,-16
    802010ce:	e406                	sd	ra,8(sp)
    802010d0:	e022                	sd	s0,0(sp)
    802010d2:	0800                	addi	s0,sp,16
      panic("no support filesystem");
    802010d4:	00013517          	auipc	a0,0x13
    802010d8:	fcc50513          	addi	a0,a0,-52 # 802140a0 <rodata_start+0xa0>
    802010dc:	00008097          	auipc	ra,0x8
    802010e0:	16e080e7          	jalr	366(ra) # 8020924a <panic>

00000000802010e4 <image_read>:
    }
    return;
}

void image_read(struct buf *b,struct dirent* img)
{
    802010e4:	7179                	addi	sp,sp,-48
    802010e6:	f406                	sd	ra,40(sp)
    802010e8:	f022                	sd	s0,32(sp)
    802010ea:	ec26                	sd	s1,24(sp)
    802010ec:	e84a                	sd	s2,16(sp)
    802010ee:	e44e                	sd	s3,8(sp)
    802010f0:	1800                	addi	s0,sp,48
    802010f2:	892a                	mv	s2,a0
    802010f4:	84ae                	mv	s1,a1
  uint sectorno = b->sectorno;
  int off = sectorno*BSIZE;
    802010f6:	00c52983          	lw	s3,12(a0)
    802010fa:	0099999b          	slliw	s3,s3,0x9
  elock(img);
    802010fe:	852e                	mv	a0,a1
    80201100:	00003097          	auipc	ra,0x3
    80201104:	96a080e7          	jalr	-1686(ra) # 80203a6a <elock>
  if(eread(img,0,(uint64)(b->data),off,BSIZE)<0)panic("read image error");
    80201108:	20000713          	li	a4,512
    8020110c:	86ce                	mv	a3,s3
    8020110e:	05890613          	addi	a2,s2,88
    80201112:	4581                	li	a1,0
    80201114:	8526                	mv	a0,s1
    80201116:	00002097          	auipc	ra,0x2
    8020111a:	f74080e7          	jalr	-140(ra) # 8020308a <eread>
    8020111e:	00054e63          	bltz	a0,8020113a <image_read+0x56>
  eunlock(img);
    80201122:	8526                	mv	a0,s1
    80201124:	00003097          	auipc	ra,0x3
    80201128:	97c080e7          	jalr	-1668(ra) # 80203aa0 <eunlock>
  return;
}
    8020112c:	70a2                	ld	ra,40(sp)
    8020112e:	7402                	ld	s0,32(sp)
    80201130:	64e2                	ld	s1,24(sp)
    80201132:	6942                	ld	s2,16(sp)
    80201134:	69a2                	ld	s3,8(sp)
    80201136:	6145                	addi	sp,sp,48
    80201138:	8082                	ret
  if(eread(img,0,(uint64)(b->data),off,BSIZE)<0)panic("read image error");
    8020113a:	00013517          	auipc	a0,0x13
    8020113e:	f7e50513          	addi	a0,a0,-130 # 802140b8 <rodata_start+0xb8>
    80201142:	00008097          	auipc	ra,0x8
    80201146:	108080e7          	jalr	264(ra) # 8020924a <panic>

000000008020114a <image_write>:

void image_write(struct buf *b,struct dirent* img)
{
    8020114a:	7179                	addi	sp,sp,-48
    8020114c:	f406                	sd	ra,40(sp)
    8020114e:	f022                	sd	s0,32(sp)
    80201150:	ec26                	sd	s1,24(sp)
    80201152:	e84a                	sd	s2,16(sp)
    80201154:	e44e                	sd	s3,8(sp)
    80201156:	1800                	addi	s0,sp,48
    80201158:	892a                	mv	s2,a0
    8020115a:	84ae                	mv	s1,a1
  uint sectorno = b->sectorno;
  int off = sectorno*BSIZE;
    8020115c:	00c52983          	lw	s3,12(a0)
    80201160:	0099999b          	slliw	s3,s3,0x9
  elock(img);
    80201164:	852e                	mv	a0,a1
    80201166:	00003097          	auipc	ra,0x3
    8020116a:	904080e7          	jalr	-1788(ra) # 80203a6a <elock>
  if(ewrite(img,0,(uint64)(b->data),off,BSIZE)<0)panic("write image error");
    8020116e:	20000713          	li	a4,512
    80201172:	86ce                	mv	a3,s3
    80201174:	05890613          	addi	a2,s2,88
    80201178:	4581                	li	a1,0
    8020117a:	8526                	mv	a0,s1
    8020117c:	00002097          	auipc	ra,0x2
    80201180:	024080e7          	jalr	36(ra) # 802031a0 <ewrite>
    80201184:	00054e63          	bltz	a0,802011a0 <image_write+0x56>
  eunlock(img);
    80201188:	8526                	mv	a0,s1
    8020118a:	00003097          	auipc	ra,0x3
    8020118e:	916080e7          	jalr	-1770(ra) # 80203aa0 <eunlock>
  return;
}
    80201192:	70a2                	ld	ra,40(sp)
    80201194:	7402                	ld	s0,32(sp)
    80201196:	64e2                	ld	s1,24(sp)
    80201198:	6942                	ld	s2,16(sp)
    8020119a:	69a2                	ld	s3,8(sp)
    8020119c:	6145                	addi	sp,sp,48
    8020119e:	8082                	ret
  if(ewrite(img,0,(uint64)(b->data),off,BSIZE)<0)panic("write image error");
    802011a0:	00013517          	auipc	a0,0x13
    802011a4:	f3050513          	addi	a0,a0,-208 # 802140d0 <rodata_start+0xd0>
    802011a8:	00008097          	auipc	ra,0x8
    802011ac:	0a2080e7          	jalr	162(ra) # 8020924a <panic>

00000000802011b0 <zombiecond>:
  sched();
  release(&p->lock);
}


int zombiecond(struct proc* p,int pid){
    802011b0:	1141                	addi	sp,sp,-16
    802011b2:	e422                	sd	s0,8(sp)
    802011b4:	0800                	addi	s0,sp,16
  return (pid==-1||p->pid == pid);
    802011b6:	57fd                	li	a5,-1
    802011b8:	00f58a63          	beq	a1,a5,802011cc <zombiecond+0x1c>
    802011bc:	4128                	lw	a0,64(a0)
    802011be:	40b505b3          	sub	a1,a0,a1
    802011c2:	0015b513          	seqz	a0,a1
}
    802011c6:	6422                	ld	s0,8(sp)
    802011c8:	0141                	addi	sp,sp,16
    802011ca:	8082                	ret
  return (pid==-1||p->pid == pid);
    802011cc:	4505                	li	a0,1
    802011ce:	bfe5                	j	802011c6 <zombiecond+0x16>

00000000802011d0 <forkret>:
{
    802011d0:	1141                	addi	sp,sp,-16
    802011d2:	e406                	sd	ra,8(sp)
    802011d4:	e022                	sd	s0,0(sp)
    802011d6:	0800                	addi	s0,sp,16
  release(&myproc()->lock);
    802011d8:	0000b097          	auipc	ra,0xb
    802011dc:	1da080e7          	jalr	474(ra) # 8020c3b2 <myproc>
    802011e0:	0521                	addi	a0,a0,8
    802011e2:	00008097          	auipc	ra,0x8
    802011e6:	d4c080e7          	jalr	-692(ra) # 80208f2e <release>
  usertrapret();
    802011ea:	0000a097          	auipc	ra,0xa
    802011ee:	ef0080e7          	jalr	-272(ra) # 8020b0da <usertrapret>
}
    802011f2:	60a2                	ld	ra,8(sp)
    802011f4:	6402                	ld	s0,0(sp)
    802011f6:	0141                	addi	sp,sp,16
    802011f8:	8082                	ret

00000000802011fa <freeproc>:
{
    802011fa:	1101                	addi	sp,sp,-32
    802011fc:	ec06                	sd	ra,24(sp)
    802011fe:	e822                	sd	s0,16(sp)
    80201200:	e426                	sd	s1,8(sp)
    80201202:	1000                	addi	s0,sp,32
    80201204:	84aa                	mv	s1,a0
  p->trapframe = 0;
    80201206:	06053423          	sd	zero,104(a0)
  if(p->mf)
    8020120a:	18053783          	ld	a5,384(a0)
    8020120e:	c789                	beqz	a5,80201218 <freeproc+0x1e>
    free_map_fix(p);
    80201210:	0000c097          	auipc	ra,0xc
    80201214:	310080e7          	jalr	784(ra) # 8020d520 <free_map_fix>
  if(p->kstack)
    80201218:	68a8                	ld	a0,80(s1)
    8020121a:	e13d                	bnez	a0,80201280 <freeproc+0x86>
  if(p->pagetable)
    8020121c:	70bc                	ld	a5,96(s1)
    8020121e:	c791                	beqz	a5,8020122a <freeproc+0x30>
  uvmfree(p);
    80201220:	8526                	mv	a0,s1
    80201222:	00009097          	auipc	ra,0x9
    80201226:	790080e7          	jalr	1936(ra) # 8020a9b2 <uvmfree>
  p->pagetable = 0;
    8020122a:	0604b023          	sd	zero,96(s1)
  p->vma = NULL;
    8020122e:	1604b823          	sd	zero,368(s1)
  p->robust_list = NULL;
    80201232:	1a04bc23          	sd	zero,440(s1)
  p->sz = 0;
    80201236:	0404bc23          	sd	zero,88(s1)
  p->pid = 0;
    8020123a:	0404a023          	sw	zero,64(s1)

static inline void list_del(struct list *node) {
	if(node==NULL){
	  panic("[list next]list is null");
	}
	__list_link(node->prev, node->next);
    8020123e:	1604b703          	ld	a4,352(s1)
    80201242:	1684b783          	ld	a5,360(s1)
	prev->next = next;
    80201246:	e71c                	sd	a5,8(a4)
	next->prev = prev;
    80201248:	e398                	sd	a4,0(a5)
  p->name[0] = 0;
    8020124a:	10048023          	sb	zero,256(s1)
  p->chan = 0;
    8020124e:	0204b823          	sd	zero,48(s1)
  p->killed = 0;
    80201252:	0204ac23          	sw	zero,56(s1)
  p->xstate = 0;
    80201256:	0204ae23          	sw	zero,60(s1)
  p->state = UNUSED;
    8020125a:	0204a023          	sw	zero,32(s1)
  sigaction_free(p->sig_act);
    8020125e:	1884b503          	ld	a0,392(s1)
    80201262:	00008097          	auipc	ra,0x8
    80201266:	b10080e7          	jalr	-1264(ra) # 80208d72 <sigaction_free>
  sigframefree(p->sig_frame);
    8020126a:	1a04b503          	ld	a0,416(s1)
    8020126e:	00008097          	auipc	ra,0x8
    80201272:	a98080e7          	jalr	-1384(ra) # 80208d06 <sigframefree>
}
    80201276:	60e2                	ld	ra,24(sp)
    80201278:	6442                	ld	s0,16(sp)
    8020127a:	64a2                	ld	s1,8(sp)
    8020127c:	6105                	addi	sp,sp,32
    8020127e:	8082                	ret
    freepage((void *)p->kstack);
    80201280:	00009097          	auipc	ra,0x9
    80201284:	b54080e7          	jalr	-1196(ra) # 80209dd4 <_freepage>
    80201288:	bf51                	j	8020121c <freeproc+0x22>

000000008020128a <waitq_pool_init>:
waitq_pool_init(){
    8020128a:	1141                	addi	sp,sp,-16
    8020128c:	e406                	sd	ra,8(sp)
    8020128e:	e022                	sd	s0,0(sp)
    80201290:	0800                	addi	s0,sp,16
  for(int i = 0;i<WAITQ_NUM;i++){
    80201292:	01049797          	auipc	a5,0x1049
    80201296:	f1678793          	addi	a5,a5,-234 # 8124a1a8 <waitq_valid>
    8020129a:	01049717          	auipc	a4,0x1049
    8020129e:	09e70713          	addi	a4,a4,158 # 8124a338 <waitq_pool_lk>
    waitq_valid[i] = 0;
    802012a2:	0007a023          	sw	zero,0(a5)
  for(int i = 0;i<WAITQ_NUM;i++){
    802012a6:	0791                	addi	a5,a5,4
    802012a8:	fee79de3          	bne	a5,a4,802012a2 <waitq_pool_init+0x18>
  initlock(&waitq_pool_lk,"waitq pool");
    802012ac:	00013597          	auipc	a1,0x13
    802012b0:	e3c58593          	addi	a1,a1,-452 # 802140e8 <rodata_start+0xe8>
    802012b4:	01049517          	auipc	a0,0x1049
    802012b8:	08450513          	addi	a0,a0,132 # 8124a338 <waitq_pool_lk>
    802012bc:	00008097          	auipc	ra,0x8
    802012c0:	bda080e7          	jalr	-1062(ra) # 80208e96 <initlock>
}
    802012c4:	60a2                	ld	ra,8(sp)
    802012c6:	6402                	ld	s0,0(sp)
    802012c8:	0141                	addi	sp,sp,16
    802012ca:	8082                	ret

00000000802012cc <procinit>:
procinit(){
    802012cc:	7179                	addi	sp,sp,-48
    802012ce:	f406                	sd	ra,40(sp)
    802012d0:	f022                	sd	s0,32(sp)
    802012d2:	ec26                	sd	s1,24(sp)
    802012d4:	e84a                	sd	s2,16(sp)
    802012d6:	e44e                	sd	s3,8(sp)
    802012d8:	e052                	sd	s4,0(sp)
    802012da:	1800                	addi	s0,sp,48
  initlock(&pid_lock,"pid lock");
    802012dc:	01049497          	auipc	s1,0x1049
    802012e0:	ecc48493          	addi	s1,s1,-308 # 8124a1a8 <waitq_valid>
    802012e4:	00013597          	auipc	a1,0x13
    802012e8:	e1458593          	addi	a1,a1,-492 # 802140f8 <rodata_start+0xf8>
    802012ec:	01049517          	auipc	a0,0x1049
    802012f0:	06450513          	addi	a0,a0,100 # 8124a350 <pid_lock>
    802012f4:	00008097          	auipc	ra,0x8
    802012f8:	ba2080e7          	jalr	-1118(ra) # 80208e96 <initlock>
  initlock(&futex_lock,"futex lock");
    802012fc:	00013597          	auipc	a1,0x13
    80201300:	e0c58593          	addi	a1,a1,-500 # 80214108 <rodata_start+0x108>
    80201304:	01049517          	auipc	a0,0x1049
    80201308:	06450513          	addi	a0,a0,100 # 8124a368 <futex_lock>
    8020130c:	00008097          	auipc	ra,0x8
    80201310:	b8a080e7          	jalr	-1142(ra) # 80208e96 <initlock>
  initproc = NULL;
    80201314:	01056797          	auipc	a5,0x1056
    80201318:	8a07ba23          	sd	zero,-1868(a5) # 81256bc8 <initproc>
  firstwait = 1;
    8020131c:	4905                	li	s2,1
    8020131e:	01056797          	auipc	a5,0x1056
    80201322:	8927a923          	sw	s2,-1902(a5) # 81256bb0 <firstwait>
  struct spinlock lk;
  struct list head;
}queue;

static inline void queue_init(queue *q,void* chan) {
	initlock(&q->lk,"queue");
    80201326:	00013597          	auipc	a1,0x13
    8020132a:	1c258593          	addi	a1,a1,450 # 802144e8 <rodata_start+0x4e8>
    8020132e:	01049517          	auipc	a0,0x1049
    80201332:	05a50513          	addi	a0,a0,90 # 8124a388 <readyq+0x8>
    80201336:	00008097          	auipc	ra,0x8
    8020133a:	b60080e7          	jalr	-1184(ra) # 80208e96 <initlock>
	node->prev = node->next = node;
    8020133e:	01049797          	auipc	a5,0x1049
    80201342:	06278793          	addi	a5,a5,98 # 8124a3a0 <readyq+0x20>
    80201346:	20f4b023          	sd	a5,512(s1)
    8020134a:	1ef4bc23          	sd	a5,504(s1)
	list_init(&q->head);
	q->chan = chan;
    8020134e:	1c04bc23          	sd	zero,472(s1)
  waitq_pool_init();
    80201352:	00000097          	auipc	ra,0x0
    80201356:	f38080e7          	jalr	-200(ra) # 8020128a <waitq_pool_init>
  firstuserinit = 1;
    8020135a:	01056797          	auipc	a5,0x1056
    8020135e:	8527ad23          	sw	s2,-1958(a5) # 81256bb4 <firstuserinit>
  for(struct proc* p = proc;p<proc+NPROC;p++){
    80201362:	0104a497          	auipc	s1,0x104a
    80201366:	31648493          	addi	s1,s1,790 # 8124b678 <proc+0x8>
    8020136a:	01056a17          	auipc	s4,0x1056
    8020136e:	84ea0a13          	addi	s4,s4,-1970 # 81256bb8 <clientproc>
      initlock(&p->lock, "proc");
    80201372:	00013997          	auipc	s3,0x13
    80201376:	da698993          	addi	s3,s3,-602 # 80214118 <rodata_start+0x118>
      p->filelimit = NOFILE;
    8020137a:	0c800913          	li	s2,200
      initlock(&p->lock, "proc");
    8020137e:	85ce                	mv	a1,s3
    80201380:	8526                	mv	a0,s1
    80201382:	00008097          	auipc	ra,0x8
    80201386:	b14080e7          	jalr	-1260(ra) # 80208e96 <initlock>
      p->state = UNUSED;
    8020138a:	0004ac23          	sw	zero,24(s1)
      p->parent = NULL;
    8020138e:	0204b023          	sd	zero,32(s1)
      p->killed = 0;
    80201392:	0204a823          	sw	zero,48(s1)
      p->filelimit = NOFILE;
    80201396:	0d24bc23          	sd	s2,216(s1)
      p->umask = 0;
    8020139a:	1a04ac23          	sw	zero,440(s1)
  for(struct proc* p = proc;p<proc+NPROC;p++){
    8020139e:	1d048493          	addi	s1,s1,464
    802013a2:	fd449ee3          	bne	s1,s4,8020137e <procinit+0xb2>
  __debug_info("procinit\n");
    802013a6:	00013517          	auipc	a0,0x13
    802013aa:	d7a50513          	addi	a0,a0,-646 # 80214120 <rodata_start+0x120>
    802013ae:	00008097          	auipc	ra,0x8
    802013b2:	0fc080e7          	jalr	252(ra) # 802094aa <__debug_info>
}
    802013b6:	70a2                	ld	ra,40(sp)
    802013b8:	7402                	ld	s0,32(sp)
    802013ba:	64e2                	ld	s1,24(sp)
    802013bc:	6942                	ld	s2,16(sp)
    802013be:	69a2                	ld	s3,8(sp)
    802013c0:	6a02                	ld	s4,0(sp)
    802013c2:	6145                	addi	sp,sp,48
    802013c4:	8082                	ret

00000000802013c6 <findwaitq>:
findwaitq(void* chan){
    802013c6:	1101                	addi	sp,sp,-32
    802013c8:	ec06                	sd	ra,24(sp)
    802013ca:	e822                	sd	s0,16(sp)
    802013cc:	e426                	sd	s1,8(sp)
    802013ce:	e04a                	sd	s2,0(sp)
    802013d0:	1000                	addi	s0,sp,32
    802013d2:	892a                	mv	s2,a0
  acquire(&waitq_pool_lk);
    802013d4:	01049517          	auipc	a0,0x1049
    802013d8:	f6450513          	addi	a0,a0,-156 # 8124a338 <waitq_pool_lk>
    802013dc:	00008097          	auipc	ra,0x8
    802013e0:	afe080e7          	jalr	-1282(ra) # 80208eda <acquire>
  for(int i=0;i<WAITQ_NUM ;i++){
    802013e4:	01049797          	auipc	a5,0x1049
    802013e8:	dc478793          	addi	a5,a5,-572 # 8124a1a8 <waitq_valid>
    802013ec:	01049717          	auipc	a4,0x1049
    802013f0:	fc470713          	addi	a4,a4,-60 # 8124a3b0 <waitq_pool>
    802013f4:	4481                	li	s1,0
    802013f6:	06400613          	li	a2,100
    802013fa:	a039                	j	80201408 <findwaitq+0x42>
    802013fc:	2485                	addiw	s1,s1,1
    802013fe:	0791                	addi	a5,a5,4
    80201400:	03070713          	addi	a4,a4,48
    80201404:	02c48e63          	beq	s1,a2,80201440 <findwaitq+0x7a>
    if(waitq_valid[i]&&waitq_pool[i].chan == chan){
    80201408:	4394                	lw	a3,0(a5)
    8020140a:	daed                	beqz	a3,802013fc <findwaitq+0x36>
    8020140c:	6314                	ld	a3,0(a4)
    8020140e:	ff2697e3          	bne	a3,s2,802013fc <findwaitq+0x36>
      release(&waitq_pool_lk);
    80201412:	01049517          	auipc	a0,0x1049
    80201416:	f2650513          	addi	a0,a0,-218 # 8124a338 <waitq_pool_lk>
    8020141a:	00008097          	auipc	ra,0x8
    8020141e:	b14080e7          	jalr	-1260(ra) # 80208f2e <release>
      return waitq_pool+i;
    80201422:	00149513          	slli	a0,s1,0x1
    80201426:	9526                	add	a0,a0,s1
    80201428:	0512                	slli	a0,a0,0x4
    8020142a:	01049797          	auipc	a5,0x1049
    8020142e:	f8678793          	addi	a5,a5,-122 # 8124a3b0 <waitq_pool>
    80201432:	953e                	add	a0,a0,a5
}
    80201434:	60e2                	ld	ra,24(sp)
    80201436:	6442                	ld	s0,16(sp)
    80201438:	64a2                	ld	s1,8(sp)
    8020143a:	6902                	ld	s2,0(sp)
    8020143c:	6105                	addi	sp,sp,32
    8020143e:	8082                	ret
  release(&waitq_pool_lk);
    80201440:	01049517          	auipc	a0,0x1049
    80201444:	ef850513          	addi	a0,a0,-264 # 8124a338 <waitq_pool_lk>
    80201448:	00008097          	auipc	ra,0x8
    8020144c:	ae6080e7          	jalr	-1306(ra) # 80208f2e <release>
  return NULL;
    80201450:	4501                	li	a0,0
    80201452:	b7cd                	j	80201434 <findwaitq+0x6e>

0000000080201454 <allocwaitq>:
allocwaitq(void* chan){
    80201454:	1101                	addi	sp,sp,-32
    80201456:	ec06                	sd	ra,24(sp)
    80201458:	e822                	sd	s0,16(sp)
    8020145a:	e426                	sd	s1,8(sp)
    8020145c:	e04a                	sd	s2,0(sp)
    8020145e:	1000                	addi	s0,sp,32
    80201460:	892a                	mv	s2,a0
  acquire(&waitq_pool_lk);
    80201462:	01049517          	auipc	a0,0x1049
    80201466:	ed650513          	addi	a0,a0,-298 # 8124a338 <waitq_pool_lk>
    8020146a:	00008097          	auipc	ra,0x8
    8020146e:	a70080e7          	jalr	-1424(ra) # 80208eda <acquire>
  for(int i=0;i<WAITQ_NUM ;i++){
    80201472:	01049717          	auipc	a4,0x1049
    80201476:	d3670713          	addi	a4,a4,-714 # 8124a1a8 <waitq_valid>
    8020147a:	4781                	li	a5,0
    8020147c:	06400613          	li	a2,100
    if(!waitq_valid[i]){
    80201480:	4314                	lw	a3,0(a4)
    80201482:	ce99                	beqz	a3,802014a0 <allocwaitq+0x4c>
  for(int i=0;i<WAITQ_NUM ;i++){
    80201484:	2785                	addiw	a5,a5,1
    80201486:	0711                	addi	a4,a4,4
    80201488:	fec79ce3          	bne	a5,a2,80201480 <allocwaitq+0x2c>
  release(&waitq_pool_lk);
    8020148c:	01049517          	auipc	a0,0x1049
    80201490:	eac50513          	addi	a0,a0,-340 # 8124a338 <waitq_pool_lk>
    80201494:	00008097          	auipc	ra,0x8
    80201498:	a9a080e7          	jalr	-1382(ra) # 80208f2e <release>
  return NULL;
    8020149c:	4481                	li	s1,0
    8020149e:	a899                	j	802014f4 <allocwaitq+0xa0>
      waitq_valid[i] = 1;
    802014a0:	00279693          	slli	a3,a5,0x2
    802014a4:	01049717          	auipc	a4,0x1049
    802014a8:	d0470713          	addi	a4,a4,-764 # 8124a1a8 <waitq_valid>
    802014ac:	9736                	add	a4,a4,a3
    802014ae:	4685                	li	a3,1
    802014b0:	c314                	sw	a3,0(a4)
      queue_init(waitq_pool+i,chan);
    802014b2:	00179493          	slli	s1,a5,0x1
    802014b6:	94be                	add	s1,s1,a5
    802014b8:	0492                	slli	s1,s1,0x4
    802014ba:	01049797          	auipc	a5,0x1049
    802014be:	ef678793          	addi	a5,a5,-266 # 8124a3b0 <waitq_pool>
    802014c2:	94be                	add	s1,s1,a5
	initlock(&q->lk,"queue");
    802014c4:	00013597          	auipc	a1,0x13
    802014c8:	02458593          	addi	a1,a1,36 # 802144e8 <rodata_start+0x4e8>
    802014cc:	00848513          	addi	a0,s1,8
    802014d0:	00008097          	auipc	ra,0x8
    802014d4:	9c6080e7          	jalr	-1594(ra) # 80208e96 <initlock>
	list_init(&q->head);
    802014d8:	02048793          	addi	a5,s1,32
    802014dc:	f49c                	sd	a5,40(s1)
    802014de:	f09c                	sd	a5,32(s1)
	q->chan = chan;
    802014e0:	0124b023          	sd	s2,0(s1)
      release(&waitq_pool_lk);
    802014e4:	01049517          	auipc	a0,0x1049
    802014e8:	e5450513          	addi	a0,a0,-428 # 8124a338 <waitq_pool_lk>
    802014ec:	00008097          	auipc	ra,0x8
    802014f0:	a42080e7          	jalr	-1470(ra) # 80208f2e <release>
}
    802014f4:	8526                	mv	a0,s1
    802014f6:	60e2                	ld	ra,24(sp)
    802014f8:	6442                	ld	s0,16(sp)
    802014fa:	64a2                	ld	s1,8(sp)
    802014fc:	6902                	ld	s2,0(sp)
    802014fe:	6105                	addi	sp,sp,32
    80201500:	8082                	ret

0000000080201502 <delwaitq>:
delwaitq(queue* q){
    80201502:	1101                	addi	sp,sp,-32
    80201504:	ec06                	sd	ra,24(sp)
    80201506:	e822                	sd	s0,16(sp)
    80201508:	e426                	sd	s1,8(sp)
    8020150a:	e04a                	sd	s2,0(sp)
    8020150c:	1000                	addi	s0,sp,32
    8020150e:	84aa                	mv	s1,a0
  acquire(&waitq_pool_lk);
    80201510:	01049917          	auipc	s2,0x1049
    80201514:	e2890913          	addi	s2,s2,-472 # 8124a338 <waitq_pool_lk>
    80201518:	854a                	mv	a0,s2
    8020151a:	00008097          	auipc	ra,0x8
    8020151e:	9c0080e7          	jalr	-1600(ra) # 80208eda <acquire>
  int i = q - waitq_pool;
    80201522:	01049517          	auipc	a0,0x1049
    80201526:	e8e50513          	addi	a0,a0,-370 # 8124a3b0 <waitq_pool>
    8020152a:	8c89                	sub	s1,s1,a0
    8020152c:	8491                	srai	s1,s1,0x4
  waitq_valid[i] = 0;
    8020152e:	00016797          	auipc	a5,0x16
    80201532:	2c27b783          	ld	a5,706(a5) # 802177f0 <erodata>
    80201536:	02f484bb          	mulw	s1,s1,a5
    8020153a:	048a                	slli	s1,s1,0x2
    8020153c:	01049797          	auipc	a5,0x1049
    80201540:	c6c78793          	addi	a5,a5,-916 # 8124a1a8 <waitq_valid>
    80201544:	94be                	add	s1,s1,a5
    80201546:	0004a023          	sw	zero,0(s1)
  release(&waitq_pool_lk);
    8020154a:	854a                	mv	a0,s2
    8020154c:	00008097          	auipc	ra,0x8
    80201550:	9e2080e7          	jalr	-1566(ra) # 80208f2e <release>
}
    80201554:	60e2                	ld	ra,24(sp)
    80201556:	6442                	ld	s0,16(sp)
    80201558:	64a2                	ld	s1,8(sp)
    8020155a:	6902                	ld	s2,0(sp)
    8020155c:	6105                	addi	sp,sp,32
    8020155e:	8082                	ret

0000000080201560 <readyq_push>:
readyq_push(struct proc* p){
    80201560:	7179                	addi	sp,sp,-48
    80201562:	f406                	sd	ra,40(sp)
    80201564:	f022                	sd	s0,32(sp)
    80201566:	ec26                	sd	s1,24(sp)
    80201568:	e84a                	sd	s2,16(sp)
    8020156a:	e44e                	sd	s3,8(sp)
    8020156c:	1800                	addi	s0,sp,48
    8020156e:	84aa                	mv	s1,a0
}

static inline void qlock(queue *q){
	acquire(&q->lk);
    80201570:	01049997          	auipc	s3,0x1049
    80201574:	c3898993          	addi	s3,s3,-968 # 8124a1a8 <waitq_valid>
    80201578:	01049917          	auipc	s2,0x1049
    8020157c:	e1090913          	addi	s2,s2,-496 # 8124a388 <readyq+0x8>
    80201580:	854a                	mv	a0,s2
    80201582:	00008097          	auipc	ra,0x8
    80201586:	958080e7          	jalr	-1704(ra) # 80208eda <acquire>
	return list_empty(&q->head);
}

static inline void queue_push(queue* q,struct proc* p){
	qlock(q);
	list_add_before(&q->head,&p->dlist);
    8020158a:	14048713          	addi	a4,s1,320
	__list_insert(node, beforeme->prev, beforeme);
    8020158e:	1f89b783          	ld	a5,504(s3)
	prev->next = next->prev = node;
    80201592:	1ee9bc23          	sd	a4,504(s3)
    80201596:	e798                	sd	a4,8(a5)
	node->next = next;
    80201598:	01049717          	auipc	a4,0x1049
    8020159c:	e0870713          	addi	a4,a4,-504 # 8124a3a0 <readyq+0x20>
    802015a0:	14e4b423          	sd	a4,328(s1)
	node->prev = prev;
    802015a4:	14f4b023          	sd	a5,320(s1)
	p->q = (uint64)q;
    802015a8:	01049797          	auipc	a5,0x1049
    802015ac:	dd878793          	addi	a5,a5,-552 # 8124a380 <readyq>
    802015b0:	16f4bc23          	sd	a5,376(s1)
	release(&q->lk);
    802015b4:	854a                	mv	a0,s2
    802015b6:	00008097          	auipc	ra,0x8
    802015ba:	978080e7          	jalr	-1672(ra) # 80208f2e <release>
}
    802015be:	70a2                	ld	ra,40(sp)
    802015c0:	7402                	ld	s0,32(sp)
    802015c2:	64e2                	ld	s1,24(sp)
    802015c4:	6942                	ld	s2,16(sp)
    802015c6:	69a2                	ld	s3,8(sp)
    802015c8:	6145                	addi	sp,sp,48
    802015ca:	8082                	ret

00000000802015cc <readyq_pop>:
readyq_pop(){
    802015cc:	1101                	addi	sp,sp,-32
    802015ce:	ec06                	sd	ra,24(sp)
    802015d0:	e822                	sd	s0,16(sp)
    802015d2:	e426                	sd	s1,8(sp)
    802015d4:	1000                	addi	s0,sp,32
	acquire(&q->lk);
    802015d6:	01049517          	auipc	a0,0x1049
    802015da:	db250513          	addi	a0,a0,-590 # 8124a388 <readyq+0x8>
    802015de:	00008097          	auipc	ra,0x8
    802015e2:	8fc080e7          	jalr	-1796(ra) # 80208eda <acquire>
	return head->next == head;
    802015e6:	01049797          	auipc	a5,0x1049
    802015ea:	dc27b783          	ld	a5,-574(a5) # 8124a3a8 <readyq+0x28>
}

static inline struct proc* queue_pop(queue* q){
	struct proc* p = NULL;
	qlock(q);
	if(!queue_empty(q)){
    802015ee:	01049717          	auipc	a4,0x1049
    802015f2:	db270713          	addi	a4,a4,-590 # 8124a3a0 <readyq+0x20>
    802015f6:	04e78563          	beq	a5,a4,80201640 <readyq_pop+0x74>
	if(node==NULL){
    802015fa:	cb9d                	beqz	a5,80201630 <readyq_pop+0x64>
	__list_link(node->prev, node->next);
    802015fc:	6394                	ld	a3,0(a5)
    802015fe:	6798                	ld	a4,8(a5)
	prev->next = next;
    80201600:	e698                	sd	a4,8(a3)
	next->prev = prev;
    80201602:	e314                	sd	a3,0(a4)
		struct list* l = list_next(&q->head);
		list_del(l);
		p = dlist_entry(l, struct proc, dlist);
    80201604:	ec078493          	addi	s1,a5,-320
		p->q = 0;
    80201608:	0207bc23          	sd	zero,56(a5)
		p->dlist.prev = NULL;
    8020160c:	0007b023          	sd	zero,0(a5)
		p->dlist.next = NULL;
    80201610:	0007b423          	sd	zero,8(a5)
	release(&q->lk);
    80201614:	01049517          	auipc	a0,0x1049
    80201618:	d7450513          	addi	a0,a0,-652 # 8124a388 <readyq+0x8>
    8020161c:	00008097          	auipc	ra,0x8
    80201620:	912080e7          	jalr	-1774(ra) # 80208f2e <release>
}
    80201624:	8526                	mv	a0,s1
    80201626:	60e2                	ld	ra,24(sp)
    80201628:	6442                	ld	s0,16(sp)
    8020162a:	64a2                	ld	s1,8(sp)
    8020162c:	6105                	addi	sp,sp,32
    8020162e:	8082                	ret
	  panic("[list next]list is null");
    80201630:	00013517          	auipc	a0,0x13
    80201634:	b0050513          	addi	a0,a0,-1280 # 80214130 <rodata_start+0x130>
    80201638:	00008097          	auipc	ra,0x8
    8020163c:	c12080e7          	jalr	-1006(ra) # 8020924a <panic>
	struct proc* p = NULL;
    80201640:	4481                	li	s1,0
    80201642:	bfc9                	j	80201614 <readyq_pop+0x48>

0000000080201644 <waitq_push>:
waitq_push(queue *q,struct proc* p){
    80201644:	7179                	addi	sp,sp,-48
    80201646:	f406                	sd	ra,40(sp)
    80201648:	f022                	sd	s0,32(sp)
    8020164a:	ec26                	sd	s1,24(sp)
    8020164c:	e84a                	sd	s2,16(sp)
    8020164e:	e44e                	sd	s3,8(sp)
    80201650:	1800                	addi	s0,sp,48
    80201652:	84aa                	mv	s1,a0
    80201654:	892e                	mv	s2,a1
	acquire(&q->lk);
    80201656:	00850993          	addi	s3,a0,8
    8020165a:	854e                	mv	a0,s3
    8020165c:	00008097          	auipc	ra,0x8
    80201660:	87e080e7          	jalr	-1922(ra) # 80208eda <acquire>
	list_add_before(&q->head,&p->dlist);
    80201664:	14090713          	addi	a4,s2,320
	__list_insert(node, beforeme->prev, beforeme);
    80201668:	709c                	ld	a5,32(s1)
	prev->next = next->prev = node;
    8020166a:	f098                	sd	a4,32(s1)
    8020166c:	e798                	sd	a4,8(a5)
    8020166e:	02048713          	addi	a4,s1,32
	node->next = next;
    80201672:	14e93423          	sd	a4,328(s2)
	node->prev = prev;
    80201676:	14f93023          	sd	a5,320(s2)
	p->q = (uint64)q;
    8020167a:	16993c23          	sd	s1,376(s2)
	release(&q->lk);
    8020167e:	854e                	mv	a0,s3
    80201680:	00008097          	auipc	ra,0x8
    80201684:	8ae080e7          	jalr	-1874(ra) # 80208f2e <release>
}
    80201688:	70a2                	ld	ra,40(sp)
    8020168a:	7402                	ld	s0,32(sp)
    8020168c:	64e2                	ld	s1,24(sp)
    8020168e:	6942                	ld	s2,16(sp)
    80201690:	69a2                	ld	s3,8(sp)
    80201692:	6145                	addi	sp,sp,48
    80201694:	8082                	ret

0000000080201696 <waitq_pop>:
waitq_pop(queue *q){
    80201696:	1101                	addi	sp,sp,-32
    80201698:	ec06                	sd	ra,24(sp)
    8020169a:	e822                	sd	s0,16(sp)
    8020169c:	e426                	sd	s1,8(sp)
    8020169e:	e04a                	sd	s2,0(sp)
    802016a0:	1000                	addi	s0,sp,32
    802016a2:	84aa                	mv	s1,a0
	acquire(&q->lk);
    802016a4:	00850913          	addi	s2,a0,8
    802016a8:	854a                	mv	a0,s2
    802016aa:	00008097          	auipc	ra,0x8
    802016ae:	830080e7          	jalr	-2000(ra) # 80208eda <acquire>
	return head->next == head;
    802016b2:	749c                	ld	a5,40(s1)
	return list_empty(&q->head);
    802016b4:	02048493          	addi	s1,s1,32
	if(!queue_empty(q)){
    802016b8:	04978363          	beq	a5,s1,802016fe <waitq_pop+0x68>
	if(node==NULL){
    802016bc:	cb8d                	beqz	a5,802016ee <waitq_pop+0x58>
	__list_link(node->prev, node->next);
    802016be:	6394                	ld	a3,0(a5)
    802016c0:	6798                	ld	a4,8(a5)
	prev->next = next;
    802016c2:	e698                	sd	a4,8(a3)
	next->prev = prev;
    802016c4:	e314                	sd	a3,0(a4)
		p = dlist_entry(l, struct proc, dlist);
    802016c6:	ec078493          	addi	s1,a5,-320
		p->q = 0;
    802016ca:	0207bc23          	sd	zero,56(a5)
		p->dlist.prev = NULL;
    802016ce:	0007b023          	sd	zero,0(a5)
		p->dlist.next = NULL;
    802016d2:	0007b423          	sd	zero,8(a5)
	release(&q->lk);
    802016d6:	854a                	mv	a0,s2
    802016d8:	00008097          	auipc	ra,0x8
    802016dc:	856080e7          	jalr	-1962(ra) # 80208f2e <release>
}
    802016e0:	8526                	mv	a0,s1
    802016e2:	60e2                	ld	ra,24(sp)
    802016e4:	6442                	ld	s0,16(sp)
    802016e6:	64a2                	ld	s1,8(sp)
    802016e8:	6902                	ld	s2,0(sp)
    802016ea:	6105                	addi	sp,sp,32
    802016ec:	8082                	ret
	  panic("[list next]list is null");
    802016ee:	00013517          	auipc	a0,0x13
    802016f2:	a4250513          	addi	a0,a0,-1470 # 80214130 <rodata_start+0x130>
    802016f6:	00008097          	auipc	ra,0x8
    802016fa:	b54080e7          	jalr	-1196(ra) # 8020924a <panic>
	struct proc* p = NULL;
    802016fe:	4481                	li	s1,0
    80201700:	bfd9                	j	802016d6 <waitq_pop+0x40>

0000000080201702 <scheduler>:
void scheduler(){
    80201702:	715d                	addi	sp,sp,-80
    80201704:	e486                	sd	ra,72(sp)
    80201706:	e0a2                	sd	s0,64(sp)
    80201708:	fc26                	sd	s1,56(sp)
    8020170a:	f84a                	sd	s2,48(sp)
    8020170c:	f44e                	sd	s3,40(sp)
    8020170e:	f052                	sd	s4,32(sp)
    80201710:	ec56                	sd	s5,24(sp)
    80201712:	e85a                	sd	s6,16(sp)
    80201714:	e45e                	sd	s7,8(sp)
    80201716:	e062                	sd	s8,0(sp)
    80201718:	0880                	addi	s0,sp,80
  struct cpu *c = mycpu();
    8020171a:	0000b097          	auipc	ra,0xb
    8020171e:	c7c080e7          	jalr	-900(ra) # 8020c396 <mycpu>
    80201722:	8a2a                	mv	s4,a0
  c->proc = 0;
    80201724:	00053023          	sd	zero,0(a0)
      if(p->state == RUNNABLE) {
    80201728:	4989                	li	s3,2
        p->state = RUNNING;
    8020172a:	4c0d                	li	s8,3
        w_satp(MAKE_SATP(p->pagetable));
    8020172c:	5afd                	li	s5,-1
    8020172e:	1afe                	slli	s5,s5,0x3f
        swtch(&c->context, &p->context);
    80201730:	00850b93          	addi	s7,a0,8
        w_satp(MAKE_SATP(kernel_pagetable));
    80201734:	0516db17          	auipc	s6,0x516d
    80201738:	9dcb0b13          	addi	s6,s6,-1572 # 8536e110 <kernel_pagetable>
    8020173c:	a0a1                	j	80201784 <scheduler+0x82>
        p->state = RUNNING;
    8020173e:	0384a023          	sw	s8,32(s1)
        c->proc = p;
    80201742:	009a3023          	sd	s1,0(s4)
        w_satp(MAKE_SATP(p->pagetable));
    80201746:	70bc                	ld	a5,96(s1)
    80201748:	83b1                	srli	a5,a5,0xc
    8020174a:	0157e7b3          	or	a5,a5,s5
  asm volatile("csrw satp, %0" : : "r" (x));
    8020174e:	18079073          	csrw	satp,a5
static inline void
sfence_vma()
{
  // the zero, zero means flush all TLB entries.
  // asm volatile("sfence.vma zero, zero");
  asm volatile("sfence.vma");
    80201752:	12000073          	sfence.vma
        swtch(&c->context, &p->context);
    80201756:	07048593          	addi	a1,s1,112
    8020175a:	855e                	mv	a0,s7
    8020175c:	00007097          	auipc	ra,0x7
    80201760:	194080e7          	jalr	404(ra) # 802088f0 <swtch>
        w_satp(MAKE_SATP(kernel_pagetable));
    80201764:	000b3783          	ld	a5,0(s6)
    80201768:	83b1                	srli	a5,a5,0xc
    8020176a:	0157e7b3          	or	a5,a5,s5
  asm volatile("csrw satp, %0" : : "r" (x));
    8020176e:	18079073          	csrw	satp,a5
  asm volatile("sfence.vma");
    80201772:	12000073          	sfence.vma
        c->proc = 0;
    80201776:	000a3023          	sd	zero,0(s4)
      release(&p->lock);
    8020177a:	854a                	mv	a0,s2
    8020177c:	00007097          	auipc	ra,0x7
    80201780:	7b2080e7          	jalr	1970(ra) # 80208f2e <release>
    struct proc* p = readyq_pop();  //...
    80201784:	00000097          	auipc	ra,0x0
    80201788:	e48080e7          	jalr	-440(ra) # 802015cc <readyq_pop>
    8020178c:	84aa                	mv	s1,a0
    if(p){
    8020178e:	cd01                	beqz	a0,802017a6 <scheduler+0xa4>
      acquire(&p->lock);
    80201790:	00850913          	addi	s2,a0,8
    80201794:	854a                	mv	a0,s2
    80201796:	00007097          	auipc	ra,0x7
    8020179a:	744080e7          	jalr	1860(ra) # 80208eda <acquire>
      if(p->state == RUNNABLE) {
    8020179e:	509c                	lw	a5,32(s1)
    802017a0:	fd379de3          	bne	a5,s3,8020177a <scheduler+0x78>
    802017a4:	bf69                	j	8020173e <scheduler+0x3c>
  asm volatile("csrr %0, sstatus" : "=r" (x) );
    802017a6:	100027f3          	csrr	a5,sstatus
  w_sstatus(r_sstatus() | SSTATUS_SIE);
    802017aa:	0027e793          	ori	a5,a5,2
  asm volatile("csrw sstatus, %0" : : "r" (x));
    802017ae:	10079073          	csrw	sstatus,a5
      asm volatile("wfi");
    802017b2:	10500073          	wfi
    802017b6:	b7f9                	j	80201784 <scheduler+0x82>

00000000802017b8 <allocpid>:
allocpid() {
    802017b8:	1101                	addi	sp,sp,-32
    802017ba:	ec06                	sd	ra,24(sp)
    802017bc:	e822                	sd	s0,16(sp)
    802017be:	e426                	sd	s1,8(sp)
    802017c0:	e04a                	sd	s2,0(sp)
    802017c2:	1000                	addi	s0,sp,32
  acquire(&pid_lock);
    802017c4:	01049917          	auipc	s2,0x1049
    802017c8:	b8c90913          	addi	s2,s2,-1140 # 8124a350 <pid_lock>
    802017cc:	854a                	mv	a0,s2
    802017ce:	00007097          	auipc	ra,0x7
    802017d2:	70c080e7          	jalr	1804(ra) # 80208eda <acquire>
  pid = nextpid;
    802017d6:	01017797          	auipc	a5,0x1017
    802017da:	85a78793          	addi	a5,a5,-1958 # 81218030 <nextpid>
    802017de:	4384                	lw	s1,0(a5)
  nextpid = nextpid + 1;
    802017e0:	0014871b          	addiw	a4,s1,1
    802017e4:	c398                	sw	a4,0(a5)
  release(&pid_lock);
    802017e6:	854a                	mv	a0,s2
    802017e8:	00007097          	auipc	ra,0x7
    802017ec:	746080e7          	jalr	1862(ra) # 80208f2e <release>
}
    802017f0:	8526                	mv	a0,s1
    802017f2:	60e2                	ld	ra,24(sp)
    802017f4:	6442                	ld	s0,16(sp)
    802017f6:	64a2                	ld	s1,8(sp)
    802017f8:	6902                	ld	s2,0(sp)
    802017fa:	6105                	addi	sp,sp,32
    802017fc:	8082                	ret

00000000802017fe <findproc>:
{
    802017fe:	1141                	addi	sp,sp,-16
    80201800:	e422                	sd	s0,8(sp)
    80201802:	0800                	addi	s0,sp,16
    80201804:	872a                	mv	a4,a0
  for(struct proc* p = proc;p!=proc+NPROC;p++){
    80201806:	0104a517          	auipc	a0,0x104a
    8020180a:	e6a50513          	addi	a0,a0,-406 # 8124b670 <proc>
    8020180e:	01055697          	auipc	a3,0x1055
    80201812:	3a268693          	addi	a3,a3,930 # 81256bb0 <firstwait>
    80201816:	a029                	j	80201820 <findproc+0x22>
    80201818:	1d050513          	addi	a0,a0,464
    8020181c:	00d50a63          	beq	a0,a3,80201830 <findproc+0x32>
    if(p->pid == pid&& p->state !=UNUSED){
    80201820:	413c                	lw	a5,64(a0)
    80201822:	fee79be3          	bne	a5,a4,80201818 <findproc+0x1a>
    80201826:	511c                	lw	a5,32(a0)
    80201828:	dbe5                	beqz	a5,80201818 <findproc+0x1a>
}
    8020182a:	6422                	ld	s0,8(sp)
    8020182c:	0141                	addi	sp,sp,16
    8020182e:	8082                	ret
  return NULL;
    80201830:	4501                	li	a0,0
    80201832:	bfe5                	j	8020182a <findproc+0x2c>

0000000080201834 <proc_pagetable>:
{
    80201834:	7139                	addi	sp,sp,-64
    80201836:	fc06                	sd	ra,56(sp)
    80201838:	f822                	sd	s0,48(sp)
    8020183a:	f426                	sd	s1,40(sp)
    8020183c:	f04a                	sd	s2,32(sp)
    8020183e:	ec4e                	sd	s3,24(sp)
    80201840:	e852                	sd	s4,16(sp)
    80201842:	e456                	sd	s5,8(sp)
    80201844:	0080                	addi	s0,sp,64
    80201846:	892a                	mv	s2,a0
    80201848:	89ae                	mv	s3,a1
    8020184a:	8ab2                	mv	s5,a2
  pagetable = kvmcreate();
    8020184c:	00009097          	auipc	ra,0x9
    80201850:	11c080e7          	jalr	284(ra) # 8020a968 <kvmcreate>
    80201854:	8a2a                	mv	s4,a0
  if(pagetable == 0)
    80201856:	cd15                	beqz	a0,80201892 <proc_pagetable+0x5e>
  p->pagetable = pagetable;
    80201858:	06a93023          	sd	a0,96(s2)
  if(pp == NULL)
    8020185c:	02098463          	beqz	s3,80201884 <proc_pagetable+0x50>
    if((nvma = vma_copy(p, pp->vma)) == NULL)
    80201860:	1709b583          	ld	a1,368(s3)
    80201864:	854a                	mv	a0,s2
    80201866:	0000b097          	auipc	ra,0xb
    8020186a:	390080e7          	jalr	912(ra) # 8020cbf6 <vma_copy>
    8020186e:	84aa                	mv	s1,a0
    80201870:	c521                	beqz	a0,802018b8 <proc_pagetable+0x84>
    nvma = nvma->next;
    80201872:	6124                	ld	s1,64(a0)
    if(thread_create)
    80201874:	040a9b63          	bnez	s5,802018ca <proc_pagetable+0x96>
      while(nvma != p->vma)
    80201878:	17093783          	ld	a5,368(s2)
        if(nvma->type != TRAP && vma_deep_mapping(pp->pagetable, p->pagetable, nvma) < 0)
    8020187c:	4aa1                	li	s5,8
      while(nvma != p->vma)
    8020187e:	0af49a63          	bne	s1,a5,80201932 <proc_pagetable+0xfe>
    80201882:	a801                	j	80201892 <proc_pagetable+0x5e>
    if(vma_list_init(p) == NULL)
    80201884:	854a                	mv	a0,s2
    80201886:	0000b097          	auipc	ra,0xb
    8020188a:	1ae080e7          	jalr	430(ra) # 8020ca34 <vma_list_init>
    8020188e:	84aa                	mv	s1,a0
    80201890:	c919                	beqz	a0,802018a6 <proc_pagetable+0x72>
}
    80201892:	8552                	mv	a0,s4
    80201894:	70e2                	ld	ra,56(sp)
    80201896:	7442                	ld	s0,48(sp)
    80201898:	74a2                	ld	s1,40(sp)
    8020189a:	7902                	ld	s2,32(sp)
    8020189c:	69e2                	ld	s3,24(sp)
    8020189e:	6a42                	ld	s4,16(sp)
    802018a0:	6aa2                	ld	s5,8(sp)
    802018a2:	6121                	addi	sp,sp,64
    802018a4:	8082                	ret
      freewalk(pagetable);
    802018a6:	8552                	mv	a0,s4
    802018a8:	00009097          	auipc	ra,0x9
    802018ac:	01e080e7          	jalr	30(ra) # 8020a8c6 <freewalk>
      p->pagetable = NULL;
    802018b0:	06093023          	sd	zero,96(s2)
      return NULL;
    802018b4:	8a26                	mv	s4,s1
    802018b6:	bff1                	j	80201892 <proc_pagetable+0x5e>
      freepage(pagetable);
    802018b8:	8552                	mv	a0,s4
    802018ba:	00008097          	auipc	ra,0x8
    802018be:	51a080e7          	jalr	1306(ra) # 80209dd4 <_freepage>
      p->pagetable = NULL;
    802018c2:	06093023          	sd	zero,96(s2)
      return NULL;
    802018c6:	8a26                	mv	s4,s1
    802018c8:	b7e9                	j	80201892 <proc_pagetable+0x5e>
      while(nvma != p->vma)
    802018ca:	17093783          	ld	a5,368(s2)
    802018ce:	fcf482e3          	beq	s1,a5,80201892 <proc_pagetable+0x5e>
        if(nvma->type != TRAP && vma_shallow_mapping(pp->pagetable, p->pagetable, nvma) < 0)
    802018d2:	4aa1                	li	s5,8
    802018d4:	a031                	j	802018e0 <proc_pagetable+0xac>
        nvma = nvma->next;
    802018d6:	60a4                	ld	s1,64(s1)
      while(nvma != p->vma)
    802018d8:	17093783          	ld	a5,368(s2)
    802018dc:	fa978be3          	beq	a5,s1,80201892 <proc_pagetable+0x5e>
        if(nvma->type != TRAP && vma_shallow_mapping(pp->pagetable, p->pagetable, nvma) < 0)
    802018e0:	409c                	lw	a5,0(s1)
    802018e2:	ff578ae3          	beq	a5,s5,802018d6 <proc_pagetable+0xa2>
    802018e6:	8626                	mv	a2,s1
    802018e8:	06093583          	ld	a1,96(s2)
    802018ec:	0609b503          	ld	a0,96(s3)
    802018f0:	0000b097          	auipc	ra,0xb
    802018f4:	520080e7          	jalr	1312(ra) # 8020ce10 <vma_shallow_mapping>
    802018f8:	fc055fe3          	bgez	a0,802018d6 <proc_pagetable+0xa2>
          __debug_warn("[proc_pagetable] vma shallow mapping fail\n");
    802018fc:	00013517          	auipc	a0,0x13
    80201900:	84c50513          	addi	a0,a0,-1972 # 80214148 <rodata_start+0x148>
    80201904:	00008097          	auipc	ra,0x8
    80201908:	d6c080e7          	jalr	-660(ra) # 80209670 <__debug_warn>
          free_vma_list(p);
    8020190c:	854a                	mv	a0,s2
    8020190e:	0000b097          	auipc	ra,0xb
    80201912:	070080e7          	jalr	112(ra) # 8020c97e <free_vma_list>
          freepage(pagetable);
    80201916:	8552                	mv	a0,s4
    80201918:	00008097          	auipc	ra,0x8
    8020191c:	4bc080e7          	jalr	1212(ra) # 80209dd4 <_freepage>
          p->pagetable = NULL;
    80201920:	06093023          	sd	zero,96(s2)
          return NULL;
    80201924:	4a01                	li	s4,0
    80201926:	b7b5                	j	80201892 <proc_pagetable+0x5e>
        nvma = nvma->next;
    80201928:	60a4                	ld	s1,64(s1)
      while(nvma != p->vma)
    8020192a:	17093783          	ld	a5,368(s2)
    8020192e:	f69782e3          	beq	a5,s1,80201892 <proc_pagetable+0x5e>
        if(nvma->type != TRAP && vma_deep_mapping(pp->pagetable, p->pagetable, nvma) < 0)
    80201932:	409c                	lw	a5,0(s1)
    80201934:	ff578ae3          	beq	a5,s5,80201928 <proc_pagetable+0xf4>
    80201938:	8626                	mv	a2,s1
    8020193a:	06093583          	ld	a1,96(s2)
    8020193e:	0609b503          	ld	a0,96(s3)
    80201942:	0000b097          	auipc	ra,0xb
    80201946:	3c4080e7          	jalr	964(ra) # 8020cd06 <vma_deep_mapping>
    8020194a:	fc055fe3          	bgez	a0,80201928 <proc_pagetable+0xf4>
          __debug_warn("[proc_pagetable] vma deep mapping fail\n");
    8020194e:	00013517          	auipc	a0,0x13
    80201952:	82a50513          	addi	a0,a0,-2006 # 80214178 <rodata_start+0x178>
    80201956:	00008097          	auipc	ra,0x8
    8020195a:	d1a080e7          	jalr	-742(ra) # 80209670 <__debug_warn>
          free_vma_list(p);
    8020195e:	854a                	mv	a0,s2
    80201960:	0000b097          	auipc	ra,0xb
    80201964:	01e080e7          	jalr	30(ra) # 8020c97e <free_vma_list>
          freepage(pagetable);
    80201968:	8552                	mv	a0,s4
    8020196a:	00008097          	auipc	ra,0x8
    8020196e:	46a080e7          	jalr	1130(ra) # 80209dd4 <_freepage>
          p->pagetable = NULL;
    80201972:	06093023          	sd	zero,96(s2)
          return NULL;
    80201976:	4a01                	li	s4,0
    80201978:	bf29                	j	80201892 <proc_pagetable+0x5e>

000000008020197a <allocproc>:
{
    8020197a:	7139                	addi	sp,sp,-64
    8020197c:	fc06                	sd	ra,56(sp)
    8020197e:	f822                	sd	s0,48(sp)
    80201980:	f426                	sd	s1,40(sp)
    80201982:	f04a                	sd	s2,32(sp)
    80201984:	ec4e                	sd	s3,24(sp)
    80201986:	e852                	sd	s4,16(sp)
    80201988:	e456                	sd	s5,8(sp)
    8020198a:	0080                	addi	s0,sp,64
    8020198c:	8aaa                	mv	s5,a0
    8020198e:	8a2e                	mv	s4,a1
  for(p = proc; p < &proc[NPROC]; p++) {
    80201990:	0104a497          	auipc	s1,0x104a
    80201994:	ce048493          	addi	s1,s1,-800 # 8124b670 <proc>
    80201998:	01055997          	auipc	s3,0x1055
    8020199c:	21898993          	addi	s3,s3,536 # 81256bb0 <firstwait>
    acquire(&p->lock);
    802019a0:	00848913          	addi	s2,s1,8
    802019a4:	854a                	mv	a0,s2
    802019a6:	00007097          	auipc	ra,0x7
    802019aa:	534080e7          	jalr	1332(ra) # 80208eda <acquire>
    if(p->state == UNUSED) {
    802019ae:	509c                	lw	a5,32(s1)
    802019b0:	cf81                	beqz	a5,802019c8 <allocproc+0x4e>
      release(&p->lock);
    802019b2:	854a                	mv	a0,s2
    802019b4:	00007097          	auipc	ra,0x7
    802019b8:	57a080e7          	jalr	1402(ra) # 80208f2e <release>
  for(p = proc; p < &proc[NPROC]; p++) {
    802019bc:	1d048493          	addi	s1,s1,464
    802019c0:	ff3490e3          	bne	s1,s3,802019a0 <allocproc+0x26>
  return NULL;
    802019c4:	4481                	li	s1,0
    802019c6:	a235                	j	80201af2 <allocproc+0x178>
  p->umask = 0;
    802019c8:	1c04a023          	sw	zero,448(s1)
  p->pid = allocpid();
    802019cc:	00000097          	auipc	ra,0x0
    802019d0:	dec080e7          	jalr	-532(ra) # 802017b8 <allocpid>
    802019d4:	c0a8                	sw	a0,64(s1)
  p->killed = 0;
    802019d6:	0204ac23          	sw	zero,56(s1)
  p->mf = NULL;
    802019da:	1804b023          	sd	zero,384(s1)
  p->filelimit = NOFILE;
    802019de:	0c800793          	li	a5,200
    802019e2:	f0fc                	sd	a5,224(s1)
  p->robust_list = NULL;
    802019e4:	1a04bc23          	sd	zero,440(s1)
  p->clear_child_tid = NULL;
    802019e8:	1a04b823          	sd	zero,432(s1)
  p->set_child_tid = NULL;
    802019ec:	1a04b423          	sd	zero,424(s1)
  p->vma = NULL;
    802019f0:	1604b823          	sd	zero,368(s1)
  p->uid = 0;
    802019f4:	0404a223          	sw	zero,68(s1)
  p->gid = 0;
    802019f8:	0404a423          	sw	zero,72(s1)
  p->vswtch = 0;
    802019fc:	1c04a223          	sw	zero,452(s1)
  p->ivswtch = 0;
    80201a00:	1c04a423          	sw	zero,456(s1)
  p->sleep_expire = 0;
    80201a04:	1004bc23          	sd	zero,280(s1)
  p->q = NULL;
    80201a08:	1604bc23          	sd	zero,376(s1)
  p->proc_tms.utime = 0;
    80201a0c:	1204b023          	sd	zero,288(s1)
  p->proc_tms.stime = 0;
    80201a10:	1204b423          	sd	zero,296(s1)
  p->proc_tms.cutime = 0;
    80201a14:	1204b823          	sd	zero,304(s1)
  p->proc_tms.cstime = 0;
    80201a18:	1204bc23          	sd	zero,312(s1)
  list_init(&p->c_list);
    80201a1c:	15048793          	addi	a5,s1,336
	node->prev = node->next = node;
    80201a20:	14f4bc23          	sd	a5,344(s1)
    80201a24:	14f4b823          	sd	a5,336(s1)
  list_init(&p->sib_list);
    80201a28:	16048793          	addi	a5,s1,352
    80201a2c:	16f4b423          	sd	a5,360(s1)
    80201a30:	16f4b023          	sd	a5,352(s1)
  if((p->trapframe = allocpage()) == NULL){
    80201a34:	00008097          	auipc	ra,0x8
    80201a38:	300080e7          	jalr	768(ra) # 80209d34 <_allocpage>
    80201a3c:	f4a8                	sd	a0,104(s1)
    80201a3e:	c561                	beqz	a0,80201b06 <allocproc+0x18c>
  p->kstack = (uint64)allocpage();
    80201a40:	00008097          	auipc	ra,0x8
    80201a44:	2f4080e7          	jalr	756(ra) # 80209d34 <_allocpage>
    80201a48:	e8a8                	sd	a0,80(s1)
  if ((proc_pagetable(p, pp, thread_create)) == NULL) {
    80201a4a:	8652                	mv	a2,s4
    80201a4c:	85d6                	mv	a1,s5
    80201a4e:	8526                	mv	a0,s1
    80201a50:	00000097          	auipc	ra,0x0
    80201a54:	de4080e7          	jalr	-540(ra) # 80201834 <proc_pagetable>
    80201a58:	89aa                	mv	s3,a0
    80201a5a:	cd4d                	beqz	a0,80201b14 <allocproc+0x19a>
  p->ofile = kmalloc(NOFILE*sizeof(struct file*));
    80201a5c:	64000513          	li	a0,1600
    80201a60:	00008097          	auipc	ra,0x8
    80201a64:	55c080e7          	jalr	1372(ra) # 80209fbc <kmalloc>
    80201a68:	f4e8                	sd	a0,232(s1)
  p->exec_close = kmalloc(NOFILE*sizeof(int));
    80201a6a:	32000513          	li	a0,800
    80201a6e:	00008097          	auipc	ra,0x8
    80201a72:	54e080e7          	jalr	1358(ra) # 80209fbc <kmalloc>
    80201a76:	f8e8                	sd	a0,240(s1)
  if(!p->ofile){
    80201a78:	74f8                	ld	a4,232(s1)
    80201a7a:	4781                	li	a5,0
  for(int fd = 0; fd < NOFILE; fd++){
    80201a7c:	32000613          	li	a2,800
  if(!p->ofile){
    80201a80:	c755                	beqz	a4,80201b2c <allocproc+0x1b2>
    p->ofile[fd] = NULL;
    80201a82:	74f8                	ld	a4,232(s1)
    80201a84:	00179693          	slli	a3,a5,0x1
    80201a88:	9736                	add	a4,a4,a3
    80201a8a:	00073023          	sd	zero,0(a4)
    p->exec_close[fd] = 0;
    80201a8e:	78f8                	ld	a4,240(s1)
    80201a90:	973e                	add	a4,a4,a5
    80201a92:	00072023          	sw	zero,0(a4)
  for(int fd = 0; fd < NOFILE; fd++){
    80201a96:	0791                	addi	a5,a5,4
    80201a98:	fec795e3          	bne	a5,a2,80201a82 <allocproc+0x108>
  memset(p->ofile, 0, NOFILE*sizeof(struct file*));
    80201a9c:	64000613          	li	a2,1600
    80201aa0:	4581                	li	a1,0
    80201aa2:	74e8                	ld	a0,232(s1)
    80201aa4:	fffff097          	auipc	ra,0xfffff
    80201aa8:	2d0080e7          	jalr	720(ra) # 80200d74 <memset>
  memset(&p->context, 0, sizeof(p->context));
    80201aac:	07000613          	li	a2,112
    80201ab0:	4581                	li	a1,0
    80201ab2:	07048513          	addi	a0,s1,112
    80201ab6:	fffff097          	auipc	ra,0xfffff
    80201aba:	2be080e7          	jalr	702(ra) # 80200d74 <memset>
  p->context.ra = (uint64)forkret;
    80201abe:	fffff797          	auipc	a5,0xfffff
    80201ac2:	71278793          	addi	a5,a5,1810 # 802011d0 <forkret>
    80201ac6:	f8bc                	sd	a5,112(s1)
  p->context.sp = p->kstack + PGSIZE;
    80201ac8:	68bc                	ld	a5,80(s1)
    80201aca:	6705                	lui	a4,0x1
    80201acc:	97ba                	add	a5,a5,a4
    80201ace:	fcbc                	sd	a5,120(s1)
  p->proc_tms.utime = 0;
    80201ad0:	1204b023          	sd	zero,288(s1)
  p->proc_tms.stime = 0;
    80201ad4:	1204b423          	sd	zero,296(s1)
  p->proc_tms.cutime = 1;
    80201ad8:	4785                	li	a5,1
    80201ada:	12f4b823          	sd	a5,304(s1)
  p->proc_tms.cstime = 1;
    80201ade:	12f4bc23          	sd	a5,312(s1)
  p->sig_act = NULL;
    80201ae2:	1804b423          	sd	zero,392(s1)
  p->sig_frame = NULL;
    80201ae6:	1a04b023          	sd	zero,416(s1)
	p->sig_pending.__val[i] = 0;
    80201aea:	1804bc23          	sd	zero,408(s1)
  p->killed = 0;
    80201aee:	0204ac23          	sw	zero,56(s1)
}
    80201af2:	8526                	mv	a0,s1
    80201af4:	70e2                	ld	ra,56(sp)
    80201af6:	7442                	ld	s0,48(sp)
    80201af8:	74a2                	ld	s1,40(sp)
    80201afa:	7902                	ld	s2,32(sp)
    80201afc:	69e2                	ld	s3,24(sp)
    80201afe:	6a42                	ld	s4,16(sp)
    80201b00:	6aa2                	ld	s5,8(sp)
    80201b02:	6121                	addi	sp,sp,64
    80201b04:	8082                	ret
    release(&p->lock);
    80201b06:	854a                	mv	a0,s2
    80201b08:	00007097          	auipc	ra,0x7
    80201b0c:	426080e7          	jalr	1062(ra) # 80208f2e <release>
    return NULL;
    80201b10:	4481                	li	s1,0
    80201b12:	b7c5                	j	80201af2 <allocproc+0x178>
    freeproc(p);
    80201b14:	8526                	mv	a0,s1
    80201b16:	fffff097          	auipc	ra,0xfffff
    80201b1a:	6e4080e7          	jalr	1764(ra) # 802011fa <freeproc>
    release(&p->lock);
    80201b1e:	854a                	mv	a0,s2
    80201b20:	00007097          	auipc	ra,0x7
    80201b24:	40e080e7          	jalr	1038(ra) # 80208f2e <release>
    return NULL;
    80201b28:	84ce                	mv	s1,s3
    80201b2a:	b7e1                	j	80201af2 <allocproc+0x178>
    panic("proc ofile init\n");
    80201b2c:	00012517          	auipc	a0,0x12
    80201b30:	67450513          	addi	a0,a0,1652 # 802141a0 <rodata_start+0x1a0>
    80201b34:	00007097          	auipc	ra,0x7
    80201b38:	716080e7          	jalr	1814(ra) # 8020924a <panic>

0000000080201b3c <proc_freepagetable>:
{
    80201b3c:	1141                	addi	sp,sp,-16
    80201b3e:	e406                	sd	ra,8(sp)
    80201b40:	e022                	sd	s0,0(sp)
    80201b42:	0800                	addi	s0,sp,16
  uvmfree(p);
    80201b44:	00009097          	auipc	ra,0x9
    80201b48:	e6e080e7          	jalr	-402(ra) # 8020a9b2 <uvmfree>
}
    80201b4c:	60a2                	ld	ra,8(sp)
    80201b4e:	6402                	ld	s0,0(sp)
    80201b50:	0141                	addi	sp,sp,16
    80201b52:	8082                	ret

0000000080201b54 <userinit>:
{
    80201b54:	7179                	addi	sp,sp,-48
    80201b56:	f406                	sd	ra,40(sp)
    80201b58:	f022                	sd	s0,32(sp)
    80201b5a:	ec26                	sd	s1,24(sp)
    80201b5c:	e84a                	sd	s2,16(sp)
    80201b5e:	e44e                	sd	s3,8(sp)
    80201b60:	1800                	addi	s0,sp,48
    80201b62:	892a                	mv	s2,a0
  p = allocproc(0, 0);
    80201b64:	4581                	li	a1,0
    80201b66:	4501                	li	a0,0
    80201b68:	00000097          	auipc	ra,0x0
    80201b6c:	e12080e7          	jalr	-494(ra) # 8020197a <allocproc>
    80201b70:	84aa                	mv	s1,a0
  if(a0){
    80201b72:	0c090063          	beqz	s2,80201c32 <userinit+0xde>
    clientproc = p;
    80201b76:	01055797          	auipc	a5,0x1055
    80201b7a:	04a7b123          	sd	a0,66(a5) # 81256bb8 <clientproc>
  alloc_load_vma(p, (uint64) 0, initcodesize, PTE_R|PTE_W|PTE_X|PTE_U);
    80201b7e:	00005997          	auipc	s3,0x5
    80201b82:	44e98993          	addi	s3,s3,1102 # 80206fcc <initcodesize>
    80201b86:	46f9                	li	a3,30
    80201b88:	0009a603          	lw	a2,0(s3)
    80201b8c:	4581                	li	a1,0
    80201b8e:	8526                	mv	a0,s1
    80201b90:	0000b097          	auipc	ra,0xb
    80201b94:	dca080e7          	jalr	-566(ra) # 8020c95a <alloc_load_vma>
  copyout(p->pagetable,0,initcode,initcodesize);
    80201b98:	0009a683          	lw	a3,0(s3)
    80201b9c:	00005617          	auipc	a2,0x5
    80201ba0:	36460613          	addi	a2,a2,868 # 80206f00 <initcode>
    80201ba4:	4581                	li	a1,0
    80201ba6:	70a8                	ld	a0,96(s1)
    80201ba8:	0000a097          	auipc	ra,0xa
    80201bac:	b14080e7          	jalr	-1260(ra) # 8020b6bc <copyout>
  p->trapframe->a0 = a0;
    80201bb0:	74bc                	ld	a5,104(s1)
    80201bb2:	0727b823          	sd	s2,112(a5)
  p->trapframe->epc = 0x0;      // user program counter
    80201bb6:	74bc                	ld	a5,104(s1)
    80201bb8:	0007bc23          	sd	zero,24(a5)
  p->trapframe->sp = type_locate_vma(p->vma,STACK)->end;  // user stack pointer
    80201bbc:	459d                	li	a1,7
    80201bbe:	1704b503          	ld	a0,368(s1)
    80201bc2:	0000b097          	auipc	ra,0xb
    80201bc6:	98e080e7          	jalr	-1650(ra) # 8020c550 <type_locate_vma>
    80201bca:	74bc                	ld	a5,104(s1)
    80201bcc:	6d18                	ld	a4,24(a0)
    80201bce:	fb98                	sd	a4,48(a5)
  safestrcpy(p->name, "initcode", sizeof(p->name));
    80201bd0:	4651                	li	a2,20
    80201bd2:	00012597          	auipc	a1,0x12
    80201bd6:	5e658593          	addi	a1,a1,1510 # 802141b8 <rodata_start+0x1b8>
    80201bda:	10048513          	addi	a0,s1,256
    80201bde:	fffff097          	auipc	ra,0xfffff
    80201be2:	2ec080e7          	jalr	748(ra) # 80200eca <safestrcpy>
  p->state = RUNNABLE;
    80201be6:	4789                	li	a5,2
    80201be8:	d09c                	sw	a5,32(s1)
  if(!a0)readyq_push(p);//insert to ready queue
    80201bea:	04090d63          	beqz	s2,80201c44 <userinit+0xf0>
  p->tmask = 0;
    80201bee:	1004aa23          	sw	zero,276(s1)
  p->cwd = ename(NULL,"/",0);
    80201bf2:	4601                	li	a2,0
    80201bf4:	00014597          	auipc	a1,0x14
    80201bf8:	04458593          	addi	a1,a1,68 # 80215c38 <vma_type+0x4b0>
    80201bfc:	4501                	li	a0,0
    80201bfe:	00003097          	auipc	ra,0x3
    80201c02:	8ae080e7          	jalr	-1874(ra) # 802044ac <ename>
    80201c06:	fce8                	sd	a0,248(s1)
  release(&p->lock);
    80201c08:	00848513          	addi	a0,s1,8
    80201c0c:	00007097          	auipc	ra,0x7
    80201c10:	322080e7          	jalr	802(ra) # 80208f2e <release>
  __debug_info("userinit\n");
    80201c14:	00012517          	auipc	a0,0x12
    80201c18:	5b450513          	addi	a0,a0,1460 # 802141c8 <rodata_start+0x1c8>
    80201c1c:	00008097          	auipc	ra,0x8
    80201c20:	88e080e7          	jalr	-1906(ra) # 802094aa <__debug_info>
}
    80201c24:	70a2                	ld	ra,40(sp)
    80201c26:	7402                	ld	s0,32(sp)
    80201c28:	64e2                	ld	s1,24(sp)
    80201c2a:	6942                	ld	s2,16(sp)
    80201c2c:	69a2                	ld	s3,8(sp)
    80201c2e:	6145                	addi	sp,sp,48
    80201c30:	8082                	ret
    initproc = p;
    80201c32:	01055797          	auipc	a5,0x1055
    80201c36:	f8a7bb23          	sd	a0,-106(a5) # 81256bc8 <initproc>
    serverproc = p;
    80201c3a:	01055797          	auipc	a5,0x1055
    80201c3e:	f8a7b323          	sd	a0,-122(a5) # 81256bc0 <serverproc>
    80201c42:	bf35                	j	80201b7e <userinit+0x2a>
  if(!a0)readyq_push(p);//insert to ready queue
    80201c44:	8526                	mv	a0,s1
    80201c46:	00000097          	auipc	ra,0x0
    80201c4a:	91a080e7          	jalr	-1766(ra) # 80201560 <readyq_push>
    80201c4e:	b745                	j	80201bee <userinit+0x9a>

0000000080201c50 <procnum>:
{
    80201c50:	1141                	addi	sp,sp,-16
    80201c52:	e422                	sd	s0,8(sp)
    80201c54:	0800                	addi	s0,sp,16
  for (p = proc; p < &proc[NPROC]; p++) {
    80201c56:	0104a797          	auipc	a5,0x104a
    80201c5a:	a1a78793          	addi	a5,a5,-1510 # 8124b670 <proc>
  int num = 0;
    80201c5e:	4501                	li	a0,0
  for (p = proc; p < &proc[NPROC]; p++) {
    80201c60:	01055697          	auipc	a3,0x1055
    80201c64:	f5068693          	addi	a3,a3,-176 # 81256bb0 <firstwait>
    80201c68:	a029                	j	80201c72 <procnum+0x22>
    80201c6a:	1d078793          	addi	a5,a5,464
    80201c6e:	00d78663          	beq	a5,a3,80201c7a <procnum+0x2a>
    if (p->state != UNUSED) {
    80201c72:	5398                	lw	a4,32(a5)
    80201c74:	db7d                	beqz	a4,80201c6a <procnum+0x1a>
      num++;
    80201c76:	2505                	addiw	a0,a0,1
    80201c78:	bfcd                	j	80201c6a <procnum+0x1a>
}
    80201c7a:	6422                	ld	s0,8(sp)
    80201c7c:	0141                	addi	sp,sp,16
    80201c7e:	8082                	ret

0000000080201c80 <sched>:
{
    80201c80:	1101                	addi	sp,sp,-32
    80201c82:	ec06                	sd	ra,24(sp)
    80201c84:	e822                	sd	s0,16(sp)
    80201c86:	e426                	sd	s1,8(sp)
    80201c88:	e04a                	sd	s2,0(sp)
    80201c8a:	1000                	addi	s0,sp,32
  struct proc *p = myproc();
    80201c8c:	0000a097          	auipc	ra,0xa
    80201c90:	726080e7          	jalr	1830(ra) # 8020c3b2 <myproc>
    80201c94:	84aa                	mv	s1,a0
  if(!holding(&p->lock))
    80201c96:	0521                	addi	a0,a0,8
    80201c98:	00007097          	auipc	ra,0x7
    80201c9c:	214080e7          	jalr	532(ra) # 80208eac <holding>
    80201ca0:	cd39                	beqz	a0,80201cfe <sched+0x7e>
  if(mycpu()->noff != 1)
    80201ca2:	0000a097          	auipc	ra,0xa
    80201ca6:	6f4080e7          	jalr	1780(ra) # 8020c396 <mycpu>
    80201caa:	5d38                	lw	a4,120(a0)
    80201cac:	4785                	li	a5,1
    80201cae:	06f71063          	bne	a4,a5,80201d0e <sched+0x8e>
  if(p->state == RUNNING)
    80201cb2:	5098                	lw	a4,32(s1)
    80201cb4:	478d                	li	a5,3
    80201cb6:	06f70463          	beq	a4,a5,80201d1e <sched+0x9e>
  asm volatile("csrr %0, sstatus" : "=r" (x) );
    80201cba:	100027f3          	csrr	a5,sstatus
  return (x & SSTATUS_SIE) != 0;
    80201cbe:	8b89                	andi	a5,a5,2
  if(intr_get())
    80201cc0:	e7bd                	bnez	a5,80201d2e <sched+0xae>
  intena = mycpu()->intena;
    80201cc2:	0000a097          	auipc	ra,0xa
    80201cc6:	6d4080e7          	jalr	1748(ra) # 8020c396 <mycpu>
    80201cca:	07c52903          	lw	s2,124(a0)
  swtch(&p->context, &mycpu()->context);
    80201cce:	0000a097          	auipc	ra,0xa
    80201cd2:	6c8080e7          	jalr	1736(ra) # 8020c396 <mycpu>
    80201cd6:	00850593          	addi	a1,a0,8
    80201cda:	07048513          	addi	a0,s1,112
    80201cde:	00007097          	auipc	ra,0x7
    80201ce2:	c12080e7          	jalr	-1006(ra) # 802088f0 <swtch>
  mycpu()->intena = intena;
    80201ce6:	0000a097          	auipc	ra,0xa
    80201cea:	6b0080e7          	jalr	1712(ra) # 8020c396 <mycpu>
    80201cee:	07252e23          	sw	s2,124(a0)
}
    80201cf2:	60e2                	ld	ra,24(sp)
    80201cf4:	6442                	ld	s0,16(sp)
    80201cf6:	64a2                	ld	s1,8(sp)
    80201cf8:	6902                	ld	s2,0(sp)
    80201cfa:	6105                	addi	sp,sp,32
    80201cfc:	8082                	ret
    panic("sched p->lock");
    80201cfe:	00012517          	auipc	a0,0x12
    80201d02:	4da50513          	addi	a0,a0,1242 # 802141d8 <rodata_start+0x1d8>
    80201d06:	00007097          	auipc	ra,0x7
    80201d0a:	544080e7          	jalr	1348(ra) # 8020924a <panic>
    panic("sched locks");
    80201d0e:	00012517          	auipc	a0,0x12
    80201d12:	4da50513          	addi	a0,a0,1242 # 802141e8 <rodata_start+0x1e8>
    80201d16:	00007097          	auipc	ra,0x7
    80201d1a:	534080e7          	jalr	1332(ra) # 8020924a <panic>
    panic("sched running");
    80201d1e:	00012517          	auipc	a0,0x12
    80201d22:	4da50513          	addi	a0,a0,1242 # 802141f8 <rodata_start+0x1f8>
    80201d26:	00007097          	auipc	ra,0x7
    80201d2a:	524080e7          	jalr	1316(ra) # 8020924a <panic>
    panic("sched interruptible");
    80201d2e:	00012517          	auipc	a0,0x12
    80201d32:	4da50513          	addi	a0,a0,1242 # 80214208 <rodata_start+0x208>
    80201d36:	00007097          	auipc	ra,0x7
    80201d3a:	514080e7          	jalr	1300(ra) # 8020924a <panic>

0000000080201d3e <sleep>:
{
    80201d3e:	7179                	addi	sp,sp,-48
    80201d40:	f406                	sd	ra,40(sp)
    80201d42:	f022                	sd	s0,32(sp)
    80201d44:	ec26                	sd	s1,24(sp)
    80201d46:	e84a                	sd	s2,16(sp)
    80201d48:	e44e                	sd	s3,8(sp)
    80201d4a:	e052                	sd	s4,0(sp)
    80201d4c:	1800                	addi	s0,sp,48
    80201d4e:	89aa                	mv	s3,a0
    80201d50:	892e                	mv	s2,a1
  struct proc *p = myproc();
    80201d52:	0000a097          	auipc	ra,0xa
    80201d56:	660080e7          	jalr	1632(ra) # 8020c3b2 <myproc>
    80201d5a:	84aa                	mv	s1,a0
  if(lk != &p->lock){  //DOC: sleeplock0
    80201d5c:	00850a13          	addi	s4,a0,8
    80201d60:	0b2a0b63          	beq	s4,s2,80201e16 <sleep+0xd8>
    acquire(&p->lock);  //DOC: sleeplock1
    80201d64:	8552                	mv	a0,s4
    80201d66:	00007097          	auipc	ra,0x7
    80201d6a:	174080e7          	jalr	372(ra) # 80208eda <acquire>
    release(lk);
    80201d6e:	854a                	mv	a0,s2
    80201d70:	00007097          	auipc	ra,0x7
    80201d74:	1be080e7          	jalr	446(ra) # 80208f2e <release>
  queue* q = findwaitq(chan);
    80201d78:	854e                	mv	a0,s3
    80201d7a:	fffff097          	auipc	ra,0xfffff
    80201d7e:	64c080e7          	jalr	1612(ra) # 802013c6 <findwaitq>
  if(!q)q = allocwaitq(chan);
    80201d82:	c529                	beqz	a0,80201dcc <sleep+0x8e>
  waitq_push(q,p);
    80201d84:	85a6                	mv	a1,s1
    80201d86:	00000097          	auipc	ra,0x0
    80201d8a:	8be080e7          	jalr	-1858(ra) # 80201644 <waitq_push>
  p->vswtch += 1;
    80201d8e:	1c44a783          	lw	a5,452(s1)
    80201d92:	2785                	addiw	a5,a5,1
    80201d94:	1cf4a223          	sw	a5,452(s1)
  p->state = SLEEPING;
    80201d98:	4785                	li	a5,1
    80201d9a:	d09c                	sw	a5,32(s1)
  sched();
    80201d9c:	00000097          	auipc	ra,0x0
    80201da0:	ee4080e7          	jalr	-284(ra) # 80201c80 <sched>
  p->chan = 0;
    80201da4:	0204b823          	sd	zero,48(s1)
    release(&p->lock);
    80201da8:	8552                	mv	a0,s4
    80201daa:	00007097          	auipc	ra,0x7
    80201dae:	184080e7          	jalr	388(ra) # 80208f2e <release>
    acquire(lk);
    80201db2:	854a                	mv	a0,s2
    80201db4:	00007097          	auipc	ra,0x7
    80201db8:	126080e7          	jalr	294(ra) # 80208eda <acquire>
}
    80201dbc:	70a2                	ld	ra,40(sp)
    80201dbe:	7402                	ld	s0,32(sp)
    80201dc0:	64e2                	ld	s1,24(sp)
    80201dc2:	6942                	ld	s2,16(sp)
    80201dc4:	69a2                	ld	s3,8(sp)
    80201dc6:	6a02                	ld	s4,0(sp)
    80201dc8:	6145                	addi	sp,sp,48
    80201dca:	8082                	ret
  if(!q)q = allocwaitq(chan);
    80201dcc:	854e                	mv	a0,s3
    80201dce:	fffff097          	auipc	ra,0xfffff
    80201dd2:	686080e7          	jalr	1670(ra) # 80201454 <allocwaitq>
    80201dd6:	89aa                	mv	s3,a0
  if(!q){
    80201dd8:	e909                	bnez	a0,80201dea <sleep+0xac>
    __debug_error("waitq pool is full\n");
    80201dda:	00012517          	auipc	a0,0x12
    80201dde:	44650513          	addi	a0,a0,1094 # 80214220 <rodata_start+0x220>
    80201de2:	00008097          	auipc	ra,0x8
    80201de6:	a64080e7          	jalr	-1436(ra) # 80209846 <__debug_error>
  waitq_push(q,p);
    80201dea:	85a6                	mv	a1,s1
    80201dec:	854e                	mv	a0,s3
    80201dee:	00000097          	auipc	ra,0x0
    80201df2:	856080e7          	jalr	-1962(ra) # 80201644 <waitq_push>
  p->vswtch += 1;
    80201df6:	1c44a783          	lw	a5,452(s1)
    80201dfa:	2785                	addiw	a5,a5,1
    80201dfc:	1cf4a223          	sw	a5,452(s1)
  p->state = SLEEPING;
    80201e00:	4785                	li	a5,1
    80201e02:	d09c                	sw	a5,32(s1)
  sched();
    80201e04:	00000097          	auipc	ra,0x0
    80201e08:	e7c080e7          	jalr	-388(ra) # 80201c80 <sched>
  p->chan = 0;
    80201e0c:	0204b823          	sd	zero,48(s1)
  if(lk != &p->lock){
    80201e10:	f92a1ce3          	bne	s4,s2,80201da8 <sleep+0x6a>
    80201e14:	b765                	j	80201dbc <sleep+0x7e>
  queue* q = findwaitq(chan);
    80201e16:	854e                	mv	a0,s3
    80201e18:	fffff097          	auipc	ra,0xfffff
    80201e1c:	5ae080e7          	jalr	1454(ra) # 802013c6 <findwaitq>
  if(!q)q = allocwaitq(chan);
    80201e20:	d555                	beqz	a0,80201dcc <sleep+0x8e>
  waitq_push(q,p);
    80201e22:	85a6                	mv	a1,s1
    80201e24:	00000097          	auipc	ra,0x0
    80201e28:	820080e7          	jalr	-2016(ra) # 80201644 <waitq_push>
  p->vswtch += 1;
    80201e2c:	1c44a783          	lw	a5,452(s1)
    80201e30:	2785                	addiw	a5,a5,1
    80201e32:	1cf4a223          	sw	a5,452(s1)
  p->state = SLEEPING;
    80201e36:	4785                	li	a5,1
    80201e38:	d09c                	sw	a5,32(s1)
  sched();
    80201e3a:	00000097          	auipc	ra,0x0
    80201e3e:	e46080e7          	jalr	-442(ra) # 80201c80 <sched>
  p->chan = 0;
    80201e42:	0204b823          	sd	zero,48(s1)
  if(lk != &p->lock){
    80201e46:	bf9d                	j	80201dbc <sleep+0x7e>

0000000080201e48 <wakeup>:
{
    80201e48:	1101                	addi	sp,sp,-32
    80201e4a:	ec06                	sd	ra,24(sp)
    80201e4c:	e822                	sd	s0,16(sp)
    80201e4e:	e426                	sd	s1,8(sp)
    80201e50:	e04a                	sd	s2,0(sp)
    80201e52:	1000                	addi	s0,sp,32
   queue* q = findwaitq(chan);
    80201e54:	fffff097          	auipc	ra,0xfffff
    80201e58:	572080e7          	jalr	1394(ra) # 802013c6 <findwaitq>
    80201e5c:	84aa                	mv	s1,a0
       p->state = RUNNABLE;
    80201e5e:	4909                	li	s2,2
   if(q){
    80201e60:	e909                	bnez	a0,80201e72 <wakeup+0x2a>
     return 0;
    80201e62:	4501                	li	a0,0
    80201e64:	a01d                	j	80201e8a <wakeup+0x42>
       p->state = RUNNABLE;
    80201e66:	03252023          	sw	s2,32(a0)
       readyq_push(p);
    80201e6a:	fffff097          	auipc	ra,0xfffff
    80201e6e:	6f6080e7          	jalr	1782(ra) # 80201560 <readyq_push>
     while((p = waitq_pop(q))!=NULL){
    80201e72:	8526                	mv	a0,s1
    80201e74:	00000097          	auipc	ra,0x0
    80201e78:	822080e7          	jalr	-2014(ra) # 80201696 <waitq_pop>
    80201e7c:	f56d                	bnez	a0,80201e66 <wakeup+0x1e>
     delwaitq(q);
    80201e7e:	8526                	mv	a0,s1
    80201e80:	fffff097          	auipc	ra,0xfffff
    80201e84:	682080e7          	jalr	1666(ra) # 80201502 <delwaitq>
     return 1;
    80201e88:	4505                	li	a0,1
}
    80201e8a:	60e2                	ld	ra,24(sp)
    80201e8c:	6442                	ld	s0,16(sp)
    80201e8e:	64a2                	ld	s1,8(sp)
    80201e90:	6902                	ld	s2,0(sp)
    80201e92:	6105                	addi	sp,sp,32
    80201e94:	8082                	ret

0000000080201e96 <allocparent>:
allocparent(struct proc* parent,struct proc* child){
    80201e96:	1141                	addi	sp,sp,-16
    80201e98:	e422                	sd	s0,8(sp)
    80201e9a:	0800                	addi	s0,sp,16
  child->parent = parent;
    80201e9c:	f588                	sd	a0,40(a1)
  list_add_after(&parent->c_list,&child->sib_list);
    80201e9e:	16058713          	addi	a4,a1,352
	__list_insert(node, afterme, afterme->next);
    80201ea2:	15853783          	ld	a5,344(a0)
	prev->next = next->prev = node;
    80201ea6:	e398                	sd	a4,0(a5)
    80201ea8:	14e53c23          	sd	a4,344(a0)
	node->next = next;
    80201eac:	16f5b423          	sd	a5,360(a1)
    80201eb0:	15050513          	addi	a0,a0,336
	node->prev = prev;
    80201eb4:	16a5b023          	sd	a0,352(a1)
}
    80201eb8:	6422                	ld	s0,8(sp)
    80201eba:	0141                	addi	sp,sp,16
    80201ebc:	8082                	ret

0000000080201ebe <clone>:
int clone(uint64 flag, uint64 stack, uint64 ptid, uint64 tls, uint64 ctid) {
    80201ebe:	715d                	addi	sp,sp,-80
    80201ec0:	e486                	sd	ra,72(sp)
    80201ec2:	e0a2                	sd	s0,64(sp)
    80201ec4:	fc26                	sd	s1,56(sp)
    80201ec6:	f84a                	sd	s2,48(sp)
    80201ec8:	f44e                	sd	s3,40(sp)
    80201eca:	f052                	sd	s4,32(sp)
    80201ecc:	ec56                	sd	s5,24(sp)
    80201ece:	e85a                	sd	s6,16(sp)
    80201ed0:	e45e                	sd	s7,8(sp)
    80201ed2:	0880                	addi	s0,sp,80
    80201ed4:	8b2a                	mv	s6,a0
    80201ed6:	84ae                	mv	s1,a1
    80201ed8:	8932                	mv	s2,a2
    80201eda:	8a36                	mv	s4,a3
    80201edc:	8bba                	mv	s7,a4
  struct proc *p = myproc();
    80201ede:	0000a097          	auipc	ra,0xa
    80201ee2:	4d4080e7          	jalr	1236(ra) # 8020c3b2 <myproc>
    80201ee6:	89aa                	mv	s3,a0
  if((flag & CLONE_THREAD) && (flag & CLONE_VM))
    80201ee8:	67c1                	lui	a5,0x10
    80201eea:	10078793          	addi	a5,a5,256 # 10100 <_entry-0x801eff00>
    80201eee:	00fb7733          	and	a4,s6,a5
    80201ef2:	08f70463          	beq	a4,a5,80201f7a <clone+0xbc>
    if((np = allocproc(p, 0)) == NULL){
    80201ef6:	4581                	li	a1,0
    80201ef8:	00000097          	auipc	ra,0x0
    80201efc:	a82080e7          	jalr	-1406(ra) # 8020197a <allocproc>
    80201f00:	8aaa                	mv	s5,a0
    80201f02:	18050c63          	beqz	a0,8020209a <clone+0x1dc>
    *(np->trapframe) = *(p->trapframe);
    80201f06:	0689b683          	ld	a3,104(s3)
    80201f0a:	87b6                	mv	a5,a3
    80201f0c:	7538                	ld	a4,104(a0)
    80201f0e:	12068693          	addi	a3,a3,288
    80201f12:	0007b803          	ld	a6,0(a5)
    80201f16:	6788                	ld	a0,8(a5)
    80201f18:	6b8c                	ld	a1,16(a5)
    80201f1a:	6f90                	ld	a2,24(a5)
    80201f1c:	01073023          	sd	a6,0(a4) # 1000 <_entry-0x801ff000>
    80201f20:	e708                	sd	a0,8(a4)
    80201f22:	eb0c                	sd	a1,16(a4)
    80201f24:	ef10                	sd	a2,24(a4)
    80201f26:	02078793          	addi	a5,a5,32
    80201f2a:	02070713          	addi	a4,a4,32
    80201f2e:	fed792e3          	bne	a5,a3,80201f12 <clone+0x54>
    if(stack != 0)
    80201f32:	c481                	beqz	s1,80201f3a <clone+0x7c>
      p->trapframe->sp = stack;
    80201f34:	0689b783          	ld	a5,104(s3)
    80201f38:	fb84                	sd	s1,48(a5)
  sigaction_copy(&np->sig_act, p->sig_act);
    80201f3a:	1889b583          	ld	a1,392(s3)
    80201f3e:	188a8513          	addi	a0,s5,392
    80201f42:	00007097          	auipc	ra,0x7
    80201f46:	e56080e7          	jalr	-426(ra) # 80208d98 <sigaction_copy>
  np->sig_frame = p->sig_frame;
    80201f4a:	1a09b783          	ld	a5,416(s3)
    80201f4e:	1afab023          	sd	a5,416(s5)
    np->sig_pending.__val[i] = p->sig_pending.__val[i];
    80201f52:	1989b783          	ld	a5,408(s3)
    80201f56:	18fabc23          	sd	a5,408(s5)
  np->sz = p->sz;
    80201f5a:	0589b783          	ld	a5,88(s3)
    80201f5e:	04fabc23          	sd	a5,88(s5)
  np->tmask = p->tmask;
    80201f62:	1149a783          	lw	a5,276(s3)
    80201f66:	10faaa23          	sw	a5,276(s5)
  np->trapframe->a0 = 0;
    80201f6a:	068ab783          	ld	a5,104(s5)
    80201f6e:	0607b823          	sd	zero,112(a5)
    80201f72:	4481                	li	s1,0
  for(i = 0; i < NOFILE; i++)
    80201f74:	64000a13          	li	s4,1600
    80201f78:	a841                	j	80202008 <clone+0x14a>
    if((np = allocproc(p, 1)) == NULL){
    80201f7a:	4585                	li	a1,1
    80201f7c:	00000097          	auipc	ra,0x0
    80201f80:	9fe080e7          	jalr	-1538(ra) # 8020197a <allocproc>
    80201f84:	8aaa                	mv	s5,a0
    80201f86:	c939                	beqz	a0,80201fdc <clone+0x11e>
    *(np->trapframe) = *(p->trapframe);
    80201f88:	0689b683          	ld	a3,104(s3)
    80201f8c:	87b6                	mv	a5,a3
    80201f8e:	7538                	ld	a4,104(a0)
    80201f90:	12068693          	addi	a3,a3,288
    80201f94:	0007b803          	ld	a6,0(a5)
    80201f98:	6788                	ld	a0,8(a5)
    80201f9a:	6b8c                	ld	a1,16(a5)
    80201f9c:	6f90                	ld	a2,24(a5)
    80201f9e:	01073023          	sd	a6,0(a4)
    80201fa2:	e708                	sd	a0,8(a4)
    80201fa4:	eb0c                	sd	a1,16(a4)
    80201fa6:	ef10                	sd	a2,24(a4)
    80201fa8:	02078793          	addi	a5,a5,32
    80201fac:	02070713          	addi	a4,a4,32
    80201fb0:	fed792e3          	bne	a5,a3,80201f94 <clone+0xd6>
    np->trapframe->tp = tls;
    80201fb4:	068ab783          	ld	a5,104(s5)
    80201fb8:	0547b023          	sd	s4,64(a5)
    np->trapframe->sp = stack;
    80201fbc:	068ab783          	ld	a5,104(s5)
    80201fc0:	fb84                	sd	s1,48(a5)
    if(ptid != 0)
    80201fc2:	f6090ce3          	beqz	s2,80201f3a <clone+0x7c>
      copyout(p->pagetable, ptid, (char *)&np->pid, sizeof(int));
    80201fc6:	4691                	li	a3,4
    80201fc8:	040a8613          	addi	a2,s5,64
    80201fcc:	85ca                	mv	a1,s2
    80201fce:	0609b503          	ld	a0,96(s3)
    80201fd2:	00009097          	auipc	ra,0x9
    80201fd6:	6ea080e7          	jalr	1770(ra) # 8020b6bc <copyout>
    80201fda:	b785                	j	80201f3a <clone+0x7c>
      __debug_warn("alloc process bad\n");
    80201fdc:	00012517          	auipc	a0,0x12
    80201fe0:	25c50513          	addi	a0,a0,604 # 80214238 <rodata_start+0x238>
    80201fe4:	00007097          	auipc	ra,0x7
    80201fe8:	68c080e7          	jalr	1676(ra) # 80209670 <__debug_warn>
      return -1;
    80201fec:	54fd                	li	s1,-1
    80201fee:	a851                	j	80202082 <clone+0x1c4>
      np->ofile[i] = filedup(p->ofile[i]);
    80201ff0:	0e8ab903          	ld	s2,232(s5)
    80201ff4:	9926                	add	s2,s2,s1
    80201ff6:	00004097          	auipc	ra,0x4
    80201ffa:	258080e7          	jalr	600(ra) # 8020624e <filedup>
    80201ffe:	00a93023          	sd	a0,0(s2)
  for(i = 0; i < NOFILE; i++)
    80202002:	04a1                	addi	s1,s1,8
    80202004:	01448863          	beq	s1,s4,80202014 <clone+0x156>
    if(p->ofile[i])
    80202008:	0e89b783          	ld	a5,232(s3)
    8020200c:	97a6                	add	a5,a5,s1
    8020200e:	6388                	ld	a0,0(a5)
    80202010:	f165                	bnez	a0,80201ff0 <clone+0x132>
    80202012:	bfc5                	j	80202002 <clone+0x144>
  np->cwd = edup(p->cwd);
    80202014:	0f89b503          	ld	a0,248(s3)
    80202018:	00001097          	auipc	ra,0x1
    8020201c:	784080e7          	jalr	1924(ra) # 8020379c <edup>
    80202020:	0eaabc23          	sd	a0,248(s5)
  allocparent(p, np);
    80202024:	85d6                	mv	a1,s5
    80202026:	854e                	mv	a0,s3
    80202028:	00000097          	auipc	ra,0x0
    8020202c:	e6e080e7          	jalr	-402(ra) # 80201e96 <allocparent>
  safestrcpy(np->name, p->name, sizeof(p->name));
    80202030:	4651                	li	a2,20
    80202032:	10098593          	addi	a1,s3,256
    80202036:	100a8513          	addi	a0,s5,256
    8020203a:	fffff097          	auipc	ra,0xfffff
    8020203e:	e90080e7          	jalr	-368(ra) # 80200eca <safestrcpy>
  pid = np->pid;
    80202042:	040aa483          	lw	s1,64(s5)
  np->state = RUNNABLE;
    80202046:	4789                	li	a5,2
    80202048:	02faa023          	sw	a5,32(s5)
  readyq_push(np);
    8020204c:	8556                	mv	a0,s5
    8020204e:	fffff097          	auipc	ra,0xfffff
    80202052:	512080e7          	jalr	1298(ra) # 80201560 <readyq_push>
  if(flag & CLONE_CHILD_SETTID){
    80202056:	027b1793          	slli	a5,s6,0x27
    8020205a:	0007d463          	bgez	a5,80202062 <clone+0x1a4>
    np->set_child_tid = ctid;
    8020205e:	1b7ab423          	sd	s7,424(s5)
  if(flag & CLONE_CHILD_CLEARTID){
    80202062:	02ab1793          	slli	a5,s6,0x2a
    80202066:	0007d463          	bgez	a5,8020206e <clone+0x1b0>
    np->clear_child_tid = ctid;
    8020206a:	1b7ab823          	sd	s7,432(s5)
  p->killed = np->killed;
    8020206e:	038aa783          	lw	a5,56(s5)
    80202072:	02f9ac23          	sw	a5,56(s3)
  release(&np->lock);
    80202076:	008a8513          	addi	a0,s5,8
    8020207a:	00007097          	auipc	ra,0x7
    8020207e:	eb4080e7          	jalr	-332(ra) # 80208f2e <release>
}
    80202082:	8526                	mv	a0,s1
    80202084:	60a6                	ld	ra,72(sp)
    80202086:	6406                	ld	s0,64(sp)
    80202088:	74e2                	ld	s1,56(sp)
    8020208a:	7942                	ld	s2,48(sp)
    8020208c:	79a2                	ld	s3,40(sp)
    8020208e:	7a02                	ld	s4,32(sp)
    80202090:	6ae2                	ld	s5,24(sp)
    80202092:	6b42                	ld	s6,16(sp)
    80202094:	6ba2                	ld	s7,8(sp)
    80202096:	6161                	addi	sp,sp,80
    80202098:	8082                	ret
      return -1;
    8020209a:	54fd                	li	s1,-1
    8020209c:	b7dd                	j	80202082 <clone+0x1c4>

000000008020209e <getparent>:
getparent(struct proc* child){
    8020209e:	1141                	addi	sp,sp,-16
    802020a0:	e422                	sd	s0,8(sp)
    802020a2:	0800                	addi	s0,sp,16
}
    802020a4:	7508                	ld	a0,40(a0)
    802020a6:	6422                	ld	s0,8(sp)
    802020a8:	0141                	addi	sp,sp,16
    802020aa:	8082                	ret

00000000802020ac <findchild>:
findchild(struct proc* p,int (*cond)(struct proc*,int),int pid,struct proc** child){
    802020ac:	715d                	addi	sp,sp,-80
    802020ae:	e486                	sd	ra,72(sp)
    802020b0:	e0a2                	sd	s0,64(sp)
    802020b2:	fc26                	sd	s1,56(sp)
    802020b4:	f84a                	sd	s2,48(sp)
    802020b6:	f44e                	sd	s3,40(sp)
    802020b8:	f052                	sd	s4,32(sp)
    802020ba:	ec56                	sd	s5,24(sp)
    802020bc:	e85a                	sd	s6,16(sp)
    802020be:	e45e                	sd	s7,8(sp)
    802020c0:	e062                	sd	s8,0(sp)
    802020c2:	0880                	addi	s0,sp,80
   struct list* c_head = &p->c_list;
    802020c4:	15050a93          	addi	s5,a0,336
static inline struct list *list_prev(struct list *node) {
	return node->prev;
}

static inline struct list *list_next(struct list *node) {
	return node->next;
    802020c8:	15853483          	ld	s1,344(a0)
   *child = NULL;
    802020cc:	0006b023          	sd	zero,0(a3)
   while(c_it!=c_head){
    802020d0:	069a8163          	beq	s5,s1,80202132 <findchild+0x86>
    802020d4:	89ae                	mv	s3,a1
    802020d6:	8a32                	mv	s4,a2
    802020d8:	8bb6                	mv	s7,a3
        if(np->state == ZOMBIE){
    802020da:	4c11                	li	s8,4
    802020dc:	a021                	j	802020e4 <findchild+0x38>
    802020de:	6484                	ld	s1,8(s1)
   while(c_it!=c_head){
    802020e0:	029a8b63          	beq	s5,s1,80202116 <findchild+0x6a>
  int ivswtch;
};


static inline struct proc* sib_getproc(struct list* list){
  return dlist_entry(list,struct proc,sib_list);
    802020e4:	ea048913          	addi	s2,s1,-352
      if(cond(np,pid)){
    802020e8:	85d2                	mv	a1,s4
    802020ea:	854a                	mv	a0,s2
    802020ec:	9982                	jalr	s3
    802020ee:	d965                	beqz	a0,802020de <findchild+0x32>
        acquire(&np->lock);
    802020f0:	ea848b13          	addi	s6,s1,-344
    802020f4:	855a                	mv	a0,s6
    802020f6:	00007097          	auipc	ra,0x7
    802020fa:	de4080e7          	jalr	-540(ra) # 80208eda <acquire>
        *child = np; 
    802020fe:	012bb023          	sd	s2,0(s7)
        if(np->state == ZOMBIE){
    80202102:	ec04a783          	lw	a5,-320(s1)
    80202106:	01878963          	beq	a5,s8,80202118 <findchild+0x6c>
        release(&np->lock);
    8020210a:	855a                	mv	a0,s6
    8020210c:	00007097          	auipc	ra,0x7
    80202110:	e22080e7          	jalr	-478(ra) # 80208f2e <release>
    80202114:	b7e9                	j	802020de <findchild+0x32>
   return NULL;
    80202116:	4901                	li	s2,0
}
    80202118:	854a                	mv	a0,s2
    8020211a:	60a6                	ld	ra,72(sp)
    8020211c:	6406                	ld	s0,64(sp)
    8020211e:	74e2                	ld	s1,56(sp)
    80202120:	7942                	ld	s2,48(sp)
    80202122:	79a2                	ld	s3,40(sp)
    80202124:	7a02                	ld	s4,32(sp)
    80202126:	6ae2                	ld	s5,24(sp)
    80202128:	6b42                	ld	s6,16(sp)
    8020212a:	6ba2                	ld	s7,8(sp)
    8020212c:	6c02                	ld	s8,0(sp)
    8020212e:	6161                	addi	sp,sp,80
    80202130:	8082                	ret
   return NULL;
    80202132:	4901                	li	s2,0
    80202134:	b7d5                	j	80202118 <findchild+0x6c>

0000000080202136 <reparent>:
{
    80202136:	7139                	addi	sp,sp,-64
    80202138:	fc06                	sd	ra,56(sp)
    8020213a:	f822                	sd	s0,48(sp)
    8020213c:	f426                	sd	s1,40(sp)
    8020213e:	f04a                	sd	s2,32(sp)
    80202140:	ec4e                	sd	s3,24(sp)
    80202142:	e852                	sd	s4,16(sp)
    80202144:	e456                	sd	s5,8(sp)
    80202146:	e05a                	sd	s6,0(sp)
    80202148:	0080                	addi	s0,sp,64
  struct list *c_head = &p->c_list;
    8020214a:	15050993          	addi	s3,a0,336
	return head->next == head;
    8020214e:	15853a83          	ld	s5,344(a0)
  if(list_empty(c_head))return;
    80202152:	05598c63          	beq	s3,s5,802021aa <reparent+0x74>
	return node->prev;
    80202156:	15053b03          	ld	s6,336(a0)
  struct list *c_it = c_next;
    8020215a:	84d6                	mv	s1,s5
      pp->parent = initproc;
    8020215c:	01055a17          	auipc	s4,0x1055
    80202160:	a6ca0a13          	addi	s4,s4,-1428 # 81256bc8 <initproc>
      acquire(&pp->lock);
    80202164:	ea848913          	addi	s2,s1,-344
    80202168:	854a                	mv	a0,s2
    8020216a:	00007097          	auipc	ra,0x7
    8020216e:	d70080e7          	jalr	-656(ra) # 80208eda <acquire>
      pp->parent = initproc;
    80202172:	000a3783          	ld	a5,0(s4)
    80202176:	ecf4b423          	sd	a5,-312(s1)
      release(&pp->lock);
    8020217a:	854a                	mv	a0,s2
    8020217c:	00007097          	auipc	ra,0x7
    80202180:	db2080e7          	jalr	-590(ra) # 80208f2e <release>
	return node->next;
    80202184:	6484                	ld	s1,8(s1)
  while(c_it!=c_head){
    80202186:	fc999fe3          	bne	s3,s1,80202164 <reparent+0x2e>
  struct list* init_head = &initproc->c_list;
    8020218a:	01055797          	auipc	a5,0x1055
    8020218e:	a3e7b783          	ld	a5,-1474(a5) # 81256bc8 <initproc>
    80202192:	1587b703          	ld	a4,344(a5)
	prev->next = next;
    80202196:	1557bc23          	sd	s5,344(a5)
    8020219a:	15078793          	addi	a5,a5,336
	next->prev = prev;
    8020219e:	00fab023          	sd	a5,0(s5)
	prev->next = next;
    802021a2:	00eb3423          	sd	a4,8(s6)
	next->prev = prev;
    802021a6:	01673023          	sd	s6,0(a4)
}
    802021aa:	70e2                	ld	ra,56(sp)
    802021ac:	7442                	ld	s0,48(sp)
    802021ae:	74a2                	ld	s1,40(sp)
    802021b0:	7902                	ld	s2,32(sp)
    802021b2:	69e2                	ld	s3,24(sp)
    802021b4:	6a42                	ld	s4,16(sp)
    802021b6:	6aa2                	ld	s5,8(sp)
    802021b8:	6b02                	ld	s6,0(sp)
    802021ba:	6121                	addi	sp,sp,64
    802021bc:	8082                	ret

00000000802021be <yield>:
{
    802021be:	1101                	addi	sp,sp,-32
    802021c0:	ec06                	sd	ra,24(sp)
    802021c2:	e822                	sd	s0,16(sp)
    802021c4:	e426                	sd	s1,8(sp)
    802021c6:	e04a                	sd	s2,0(sp)
    802021c8:	1000                	addi	s0,sp,32
  struct proc *p = myproc();
    802021ca:	0000a097          	auipc	ra,0xa
    802021ce:	1e8080e7          	jalr	488(ra) # 8020c3b2 <myproc>
    802021d2:	84aa                	mv	s1,a0
  acquire(&p->lock);
    802021d4:	00850913          	addi	s2,a0,8
    802021d8:	854a                	mv	a0,s2
    802021da:	00007097          	auipc	ra,0x7
    802021de:	d00080e7          	jalr	-768(ra) # 80208eda <acquire>
  readyq_push(p);
    802021e2:	8526                	mv	a0,s1
    802021e4:	fffff097          	auipc	ra,0xfffff
    802021e8:	37c080e7          	jalr	892(ra) # 80201560 <readyq_push>
  p->state = RUNNABLE;
    802021ec:	4789                	li	a5,2
    802021ee:	d09c                	sw	a5,32(s1)
  sched();
    802021f0:	00000097          	auipc	ra,0x0
    802021f4:	a90080e7          	jalr	-1392(ra) # 80201c80 <sched>
  release(&p->lock);
    802021f8:	854a                	mv	a0,s2
    802021fa:	00007097          	auipc	ra,0x7
    802021fe:	d34080e7          	jalr	-716(ra) # 80208f2e <release>
}
    80202202:	60e2                	ld	ra,24(sp)
    80202204:	6442                	ld	s0,16(sp)
    80202206:	64a2                	ld	s1,8(sp)
    80202208:	6902                	ld	s2,0(sp)
    8020220a:	6105                	addi	sp,sp,32
    8020220c:	8082                	ret

000000008020220e <wait4pid>:

// Wait for a child process to exit and return its pid.
// Return -1 if this process has no children.
int
wait4pid(int pid,uint64 addr)
{
    8020220e:	711d                	addi	sp,sp,-96
    80202210:	ec86                	sd	ra,88(sp)
    80202212:	e8a2                	sd	s0,80(sp)
    80202214:	e4a6                	sd	s1,72(sp)
    80202216:	e0ca                	sd	s2,64(sp)
    80202218:	fc4e                	sd	s3,56(sp)
    8020221a:	f852                	sd	s4,48(sp)
    8020221c:	f456                	sd	s5,40(sp)
    8020221e:	f05a                	sd	s6,32(sp)
    80202220:	ec5e                	sd	s7,24(sp)
    80202222:	1080                	addi	s0,sp,96
    80202224:	892a                	mv	s2,a0
    80202226:	8bae                	mv	s7,a1
  int kidpid;
  struct proc *p = myproc();
    80202228:	0000a097          	auipc	ra,0xa
    8020222c:	18a080e7          	jalr	394(ra) # 8020c3b2 <myproc>
    80202230:	89aa                	mv	s3,a0
  struct proc* child;
  struct proc* chan = NULL;
    80202232:	fa043423          	sd	zero,-88(s0)
  // hold p->lock for the whole time to avoid lost
  // wakeups from a child's exit().
  acquire(&p->lock);
    80202236:	00850a13          	addi	s4,a0,8
    8020223a:	8552                	mv	a0,s4
    8020223c:	00007097          	auipc	ra,0x7
    80202240:	c9e080e7          	jalr	-866(ra) # 80208eda <acquire>
  //__debug_warn("[wait4pid]pid%d:%s enter\n",p->pid,p->name);
  while(1){
    kidpid = pid;
    child = findchild(p,zombiecond,pid,&chan);
    80202244:	fffffa97          	auipc	s5,0xfffff
    80202248:	f6ca8a93          	addi	s5,s5,-148 # 802011b0 <zombiecond>
    if(!chan){
      //__debug_warn("[wait4pid]pid%d:%s no kid to wait\n",p->pid,p->name);
      release(&p->lock);
      return -1;
    }
    if(pid == -1)sleep(p, &p->lock);  //DOC: wait-sleep
    8020224c:	5b7d                	li	s6,-1
    8020224e:	a8d1                	j	80202322 <wait4pid+0x114>
      kidpid = child->pid;
    80202250:	04052903          	lw	s2,64(a0)
      p->proc_tms.cstime += child->proc_tms.stime + child->proc_tms.cstime;
    80202254:	12853783          	ld	a5,296(a0)
    80202258:	13853703          	ld	a4,312(a0)
    8020225c:	973e                	add	a4,a4,a5
    8020225e:	1389b783          	ld	a5,312(s3)
    80202262:	97ba                	add	a5,a5,a4
    80202264:	12f9bc23          	sd	a5,312(s3)
      p->proc_tms.cutime += child->proc_tms.utime + child->proc_tms.cutime;
    80202268:	12053783          	ld	a5,288(a0)
    8020226c:	13053703          	ld	a4,304(a0)
    80202270:	973e                	add	a4,a4,a5
    80202272:	1309b783          	ld	a5,304(s3)
    80202276:	97ba                	add	a5,a5,a4
    80202278:	12f9b823          	sd	a5,304(s3)
      child->xstate <<= 8;
    8020227c:	5d5c                	lw	a5,60(a0)
    8020227e:	0087979b          	slliw	a5,a5,0x8
    80202282:	dd5c                	sw	a5,60(a0)
      if(addr != 0 && copyout(p->pagetable, addr, (char *)&child->xstate, sizeof(child->xstate)) < 0) {
    80202284:	000b8e63          	beqz	s7,802022a0 <wait4pid+0x92>
    80202288:	4691                	li	a3,4
    8020228a:	03c50613          	addi	a2,a0,60
    8020228e:	85de                	mv	a1,s7
    80202290:	0609b503          	ld	a0,96(s3)
    80202294:	00009097          	auipc	ra,0x9
    80202298:	428080e7          	jalr	1064(ra) # 8020b6bc <copyout>
    8020229c:	02054e63          	bltz	a0,802022d8 <wait4pid+0xca>
      freeproc(child);
    802022a0:	8526                	mv	a0,s1
    802022a2:	fffff097          	auipc	ra,0xfffff
    802022a6:	f58080e7          	jalr	-168(ra) # 802011fa <freeproc>
      release(&child->lock);
    802022aa:	00848513          	addi	a0,s1,8
    802022ae:	00007097          	auipc	ra,0x7
    802022b2:	c80080e7          	jalr	-896(ra) # 80208f2e <release>
      release(&p->lock);
    802022b6:	8552                	mv	a0,s4
    802022b8:	00007097          	auipc	ra,0x7
    802022bc:	c76080e7          	jalr	-906(ra) # 80208f2e <release>
    else sleep(chan,&p->lock);
  }
  release(&p->lock);
  return 0;
}
    802022c0:	854a                	mv	a0,s2
    802022c2:	60e6                	ld	ra,88(sp)
    802022c4:	6446                	ld	s0,80(sp)
    802022c6:	64a6                	ld	s1,72(sp)
    802022c8:	6906                	ld	s2,64(sp)
    802022ca:	79e2                	ld	s3,56(sp)
    802022cc:	7a42                	ld	s4,48(sp)
    802022ce:	7aa2                	ld	s5,40(sp)
    802022d0:	7b02                	ld	s6,32(sp)
    802022d2:	6be2                	ld	s7,24(sp)
    802022d4:	6125                	addi	sp,sp,96
    802022d6:	8082                	ret
        release(&child->lock);
    802022d8:	00848513          	addi	a0,s1,8
    802022dc:	00007097          	auipc	ra,0x7
    802022e0:	c52080e7          	jalr	-942(ra) # 80208f2e <release>
        release(&p->lock);
    802022e4:	8552                	mv	a0,s4
    802022e6:	00007097          	auipc	ra,0x7
    802022ea:	c48080e7          	jalr	-952(ra) # 80208f2e <release>
        __debug_warn("[wait4pid]pid%d:%s copyout bad\n",p->pid,p->name);
    802022ee:	10098613          	addi	a2,s3,256
    802022f2:	0409a583          	lw	a1,64(s3)
    802022f6:	00012517          	auipc	a0,0x12
    802022fa:	f5a50513          	addi	a0,a0,-166 # 80214250 <rodata_start+0x250>
    802022fe:	00007097          	auipc	ra,0x7
    80202302:	372080e7          	jalr	882(ra) # 80209670 <__debug_warn>
        return -1;
    80202306:	597d                	li	s2,-1
    80202308:	bf65                	j	802022c0 <wait4pid+0xb2>
      release(&p->lock);
    8020230a:	8552                	mv	a0,s4
    8020230c:	00007097          	auipc	ra,0x7
    80202310:	c22080e7          	jalr	-990(ra) # 80208f2e <release>
      return -1;
    80202314:	597d                	li	s2,-1
    80202316:	b76d                	j	802022c0 <wait4pid+0xb2>
    else sleep(chan,&p->lock);
    80202318:	85d2                	mv	a1,s4
    8020231a:	00000097          	auipc	ra,0x0
    8020231e:	a24080e7          	jalr	-1500(ra) # 80201d3e <sleep>
    child = findchild(p,zombiecond,pid,&chan);
    80202322:	fa840693          	addi	a3,s0,-88
    80202326:	864a                	mv	a2,s2
    80202328:	85d6                	mv	a1,s5
    8020232a:	854e                	mv	a0,s3
    8020232c:	00000097          	auipc	ra,0x0
    80202330:	d80080e7          	jalr	-640(ra) # 802020ac <findchild>
    80202334:	84aa                	mv	s1,a0
    if(child != NULL){
    80202336:	fd09                	bnez	a0,80202250 <wait4pid+0x42>
    if(!chan){
    80202338:	fa843503          	ld	a0,-88(s0)
    8020233c:	d579                	beqz	a0,8020230a <wait4pid+0xfc>
    if(pid == -1)sleep(p, &p->lock);  //DOC: wait-sleep
    8020233e:	fd691de3          	bne	s2,s6,80202318 <wait4pid+0x10a>
    80202342:	85d2                	mv	a1,s4
    80202344:	854e                	mv	a0,s3
    80202346:	00000097          	auipc	ra,0x0
    8020234a:	9f8080e7          	jalr	-1544(ra) # 80201d3e <sleep>
    8020234e:	bfd1                	j	80202322 <wait4pid+0x114>

0000000080202350 <exit>:

void
exit(int n)
{
    80202350:	7179                	addi	sp,sp,-48
    80202352:	f406                	sd	ra,40(sp)
    80202354:	f022                	sd	s0,32(sp)
    80202356:	ec26                	sd	s1,24(sp)
    80202358:	e84a                	sd	s2,16(sp)
    8020235a:	e44e                	sd	s3,8(sp)
    8020235c:	e052                	sd	s4,0(sp)
    8020235e:	1800                	addi	s0,sp,48
    80202360:	8a2a                	mv	s4,a0
  struct proc *p = myproc();
    80202362:	0000a097          	auipc	ra,0xa
    80202366:	050080e7          	jalr	80(ra) # 8020c3b2 <myproc>
    8020236a:	892a                	mv	s2,a0
    8020236c:	4481                	li	s1,0
  //if(p == initproc)
    //panic("init exiting");
  //__debug_warn("[exit]pid %d:%s exit %d\n",p->pid,p->name,n);
  // Close all open files.
  for(int fd = 0; fd < NOFILE; fd++){
    8020236e:	64000993          	li	s3,1600
    80202372:	a829                	j	8020238c <exit+0x3c>
    if(p->ofile[fd]){
      struct file *f = p->ofile[fd];
      fileclose(f);
    80202374:	00004097          	auipc	ra,0x4
    80202378:	f28080e7          	jalr	-216(ra) # 8020629c <fileclose>
      p->ofile[fd] = 0;
    8020237c:	0e893783          	ld	a5,232(s2)
    80202380:	97a6                	add	a5,a5,s1
    80202382:	0007b023          	sd	zero,0(a5)
  for(int fd = 0; fd < NOFILE; fd++){
    80202386:	04a1                	addi	s1,s1,8
    80202388:	01348863          	beq	s1,s3,80202398 <exit+0x48>
    if(p->ofile[fd]){
    8020238c:	0e893783          	ld	a5,232(s2)
    80202390:	97a6                	add	a5,a5,s1
    80202392:	6388                	ld	a0,0(a5)
    80202394:	f165                	bnez	a0,80202374 <exit+0x24>
    80202396:	bfc5                	j	80202386 <exit+0x36>
    }
  }
  if(p->ofile)
    80202398:	0e893503          	ld	a0,232(s2)
    8020239c:	c509                	beqz	a0,802023a6 <exit+0x56>
    kfree((void*)p->ofile);
    8020239e:	00008097          	auipc	ra,0x8
    802023a2:	e68080e7          	jalr	-408(ra) # 8020a206 <kfree>
  if(p->exec_close)
    802023a6:	0f093503          	ld	a0,240(s2)
    802023aa:	c509                	beqz	a0,802023b4 <exit+0x64>
    kfree((void*)p->exec_close);
    802023ac:	00008097          	auipc	ra,0x8
    802023b0:	e5a080e7          	jalr	-422(ra) # 8020a206 <kfree>
  p->ofile = 0;
    802023b4:	0e093423          	sd	zero,232(s2)

  eput(p->cwd);
    802023b8:	0f893503          	ld	a0,248(s2)
    802023bc:	00001097          	auipc	ra,0x1
    802023c0:	732080e7          	jalr	1842(ra) # 80203aee <eput>
  p->cwd = 0;
    802023c4:	0e093c23          	sd	zero,248(s2)
  wakeup(p);
    802023c8:	854a                	mv	a0,s2
    802023ca:	00000097          	auipc	ra,0x0
    802023ce:	a7e080e7          	jalr	-1410(ra) # 80201e48 <wakeup>
  acquire(&p->lock);
    802023d2:	00890513          	addi	a0,s2,8
    802023d6:	00007097          	auipc	ra,0x7
    802023da:	b04080e7          	jalr	-1276(ra) # 80208eda <acquire>
  wakeup(getparent(p));
    802023de:	02893503          	ld	a0,40(s2)
    802023e2:	00000097          	auipc	ra,0x0
    802023e6:	a66080e7          	jalr	-1434(ra) # 80201e48 <wakeup>
  reparent(p);
    802023ea:	854a                	mv	a0,s2
    802023ec:	00000097          	auipc	ra,0x0
    802023f0:	d4a080e7          	jalr	-694(ra) # 80202136 <reparent>
  
  p->xstate = n;
    802023f4:	03492e23          	sw	s4,60(s2)
  p->state = ZOMBIE;
    802023f8:	4791                	li	a5,4
    802023fa:	02f92023          	sw	a5,32(s2)
  
  // p->killed = SIGTERM;
  // Jump into the scheduler, never to return.
  sched();
    802023fe:	00000097          	auipc	ra,0x0
    80202402:	882080e7          	jalr	-1918(ra) # 80201c80 <sched>
  panic("zombie exit");
    80202406:	00012517          	auipc	a0,0x12
    8020240a:	e6a50513          	addi	a0,a0,-406 # 80214270 <rodata_start+0x270>
    8020240e:	00007097          	auipc	ra,0x7
    80202412:	e3c080e7          	jalr	-452(ra) # 8020924a <panic>

0000000080202416 <do_futex>:
    int val, 
    ktime_t *timeout, 
    int *addr2,
    int val2, 
    int val3)
{
    80202416:	7139                	addi	sp,sp,-64
    80202418:	fc06                	sd	ra,56(sp)
    8020241a:	f822                	sd	s0,48(sp)
    8020241c:	f426                	sd	s1,40(sp)
    8020241e:	f04a                	sd	s2,32(sp)
    80202420:	ec4e                	sd	s3,24(sp)
    80202422:	0080                	addi	s0,sp,64
    80202424:	84aa                	mv	s1,a0
    80202426:	89b2                	mv	s3,a2
  // printf("into do_futex\n");
  int cmd = futex_op & FUTEX_CMD_MASK;
    80202428:	e7f5f793          	andi	a5,a1,-385
    /*判断是否为共享锁*/
	if (!(futex_op & FUTEX_PRIVATE_FLAG)){
		flags |= FLAGS_SHARED;
  }

	if (futex_op & FUTEX_CLOCK_REALTIME) {
    8020242c:	1005f593          	andi	a1,a1,256
    80202430:	c991                	beqz	a1,80202444 <do_futex+0x2e>
		flags |= FLAGS_CLOCKRT;
		if (cmd != FUTEX_WAIT_BITSET && cmd != FUTEX_WAIT_REQUEUE_PI){
    80202432:	4725                	li	a4,9
    80202434:	0ae78763          	beq	a5,a4,802024e2 <do_futex+0xcc>
    80202438:	17d5                	addi	a5,a5,-11
    8020243a:	00f037b3          	snez	a5,a5
    8020243e:	40f00933          	neg	s2,a5
    80202442:	a835                	j	8020247e <do_futex+0x68>
    80202444:	0005891b          	sext.w	s2,a1
	  case FUTEX_WAIT_REQUEUE_PI:
	  case FUTEX_CMP_REQUEUE_PI:
      break;
  }
   /*根据op参数不同，执行不同分支*/
	switch (cmd) {
    80202448:	4705                	li	a4,1
    8020244a:	00e78c63          	beq	a5,a4,80202462 <do_futex+0x4c>
    8020244e:	04f75063          	bge	a4,a5,8020248e <do_futex+0x78>
    80202452:	4725                	li	a4,9
    80202454:	08e78763          	beq	a5,a4,802024e2 <do_futex+0xcc>
    80202458:	4729                	li	a4,10
    8020245a:	02e79263          	bne	a5,a4,8020247e <do_futex+0x68>
  if(!bitset)
    8020245e:	08080863          	beqz	a6,802024ee <do_futex+0xd8>
  uint64 pa = walkaddr(myproc()->pagetable, (uint64)uaddr);
    80202462:	0000a097          	auipc	ra,0xa
    80202466:	f50080e7          	jalr	-176(ra) # 8020c3b2 <myproc>
    8020246a:	85a6                	mv	a1,s1
    8020246c:	7128                	ld	a0,96(a0)
    8020246e:	00008097          	auipc	ra,0x8
    80202472:	212080e7          	jalr	530(ra) # 8020a680 <walkaddr>
  wakeup((void *)pa);
    80202476:	00000097          	auipc	ra,0x0
    8020247a:	9d2080e7          	jalr	-1582(ra) # 80201e48 <wakeup>
		  return futex_wait(uaddr, flags, val, timeout, val3);
    default:
      break;
  }
  return 0;
}
    8020247e:	854a                	mv	a0,s2
    80202480:	70e2                	ld	ra,56(sp)
    80202482:	7442                	ld	s0,48(sp)
    80202484:	74a2                	ld	s1,40(sp)
    80202486:	7902                	ld	s2,32(sp)
    80202488:	69e2                	ld	s3,24(sp)
    8020248a:	6121                	addi	sp,sp,64
    8020248c:	8082                	ret
	switch (cmd) {
    8020248e:	fbe5                	bnez	a5,8020247e <do_futex+0x68>
  acquire(&futex_lock);
    80202490:	01048517          	auipc	a0,0x1048
    80202494:	ed850513          	addi	a0,a0,-296 # 8124a368 <futex_lock>
    80202498:	00007097          	auipc	ra,0x7
    8020249c:	a42080e7          	jalr	-1470(ra) # 80208eda <acquire>
  either_copyin(1, (char*)&real_val, (uint64)uaddr, sizeof(int));
    802024a0:	4691                	li	a3,4
    802024a2:	8626                	mv	a2,s1
    802024a4:	fcc40593          	addi	a1,s0,-52
    802024a8:	4505                	li	a0,1
    802024aa:	00009097          	auipc	ra,0x9
    802024ae:	5e2080e7          	jalr	1506(ra) # 8020ba8c <either_copyin>
  if (real_val != val)
    802024b2:	fcc42783          	lw	a5,-52(s0)
    802024b6:	03379a63          	bne	a5,s3,802024ea <do_futex+0xd4>
  uint64 pa = walkaddr(myproc()->pagetable,(uint64)uaddr);
    802024ba:	0000a097          	auipc	ra,0xa
    802024be:	ef8080e7          	jalr	-264(ra) # 8020c3b2 <myproc>
    802024c2:	85a6                	mv	a1,s1
    802024c4:	7128                	ld	a0,96(a0)
    802024c6:	00008097          	auipc	ra,0x8
    802024ca:	1ba080e7          	jalr	442(ra) # 8020a680 <walkaddr>
  sleep((void*)pa, &futex_lock);
    802024ce:	01048597          	auipc	a1,0x1048
    802024d2:	e9a58593          	addi	a1,a1,-358 # 8124a368 <futex_lock>
    802024d6:	00000097          	auipc	ra,0x0
    802024da:	868080e7          	jalr	-1944(ra) # 80201d3e <sleep>
  return 0;
    802024de:	4901                	li	s2,0
    802024e0:	bf79                	j	8020247e <do_futex+0x68>
  if(!bitset)
    802024e2:	fa0817e3          	bnez	a6,80202490 <do_futex+0x7a>
    return -1;
    802024e6:	597d                	li	s2,-1
    802024e8:	bf59                	j	8020247e <do_futex+0x68>
    return -1;
    802024ea:	597d                	li	s2,-1
		  return futex_wait(uaddr, flags, val, timeout, val3);
    802024ec:	bf49                	j	8020247e <do_futex+0x68>
    return -1;
    802024ee:	597d                	li	s2,-1
    802024f0:	b779                	j	8020247e <do_futex+0x68>

00000000802024f2 <kill>:


int kill(int pid,int sig){
    802024f2:	7139                	addi	sp,sp,-64
    802024f4:	fc06                	sd	ra,56(sp)
    802024f6:	f822                	sd	s0,48(sp)
    802024f8:	f426                	sd	s1,40(sp)
    802024fa:	f04a                	sd	s2,32(sp)
    802024fc:	ec4e                	sd	s3,24(sp)
    802024fe:	e852                	sd	s4,16(sp)
    80202500:	e456                	sd	s5,8(sp)
    80202502:	0080                	addi	s0,sp,64
    80202504:	892e                	mv	s2,a1
	struct proc* p;
	for(p = proc; p < &proc[NPROC]; p++){
    80202506:	01049497          	auipc	s1,0x1049
    8020250a:	16a48493          	addi	s1,s1,362 # 8124b670 <proc>
    8020250e:	01054717          	auipc	a4,0x1054
    80202512:	6a270713          	addi	a4,a4,1698 # 81256bb0 <firstwait>
		if(p->pid == pid){
    80202516:	40bc                	lw	a5,64(s1)
    80202518:	00a78763          	beq	a5,a0,80202526 <kill+0x34>
	for(p = proc; p < &proc[NPROC]; p++){
    8020251c:	1d048493          	addi	s1,s1,464
    80202520:	fee49be3          	bne	s1,a4,80202516 <kill+0x24>
    80202524:	a83d                	j	80202562 <kill+0x70>
			acquire(&p->lock);
    80202526:	00848993          	addi	s3,s1,8
    8020252a:	854e                	mv	a0,s3
    8020252c:	00007097          	auipc	ra,0x7
    80202530:	9ae080e7          	jalr	-1618(ra) # 80208eda <acquire>
			if(p->state == SLEEPING){
    80202534:	5098                	lw	a4,32(s1)
    80202536:	4785                	li	a5,1
    80202538:	02f70f63          	beq	a4,a5,80202576 <kill+0x84>
				// need to modify...
				queue_del(p);
				readyq_push(p);
				p->state = RUNNABLE;
			}
			p->sig_pending.__val[0] |= 1ul << sig;
    8020253c:	4785                	li	a5,1
    8020253e:	01279733          	sll	a4,a5,s2
    80202542:	1984b783          	ld	a5,408(s1)
    80202546:	8fd9                	or	a5,a5,a4
    80202548:	18f4bc23          	sd	a5,408(s1)
			if (0 == p->killed || sig < p->killed) {
    8020254c:	5c9c                	lw	a5,56(s1)
    8020254e:	c399                	beqz	a5,80202554 <kill+0x62>
    80202550:	00f95463          	bge	s2,a5,80202558 <kill+0x66>
				p->killed = sig;
    80202554:	0324ac23          	sw	s2,56(s1)
			}
			release(&p->lock);
    80202558:	854e                	mv	a0,s3
    8020255a:	00007097          	auipc	ra,0x7
    8020255e:	9d4080e7          	jalr	-1580(ra) # 80208f2e <release>
			return 0;
		}
	}
  //return -ESRCH;
  return 0;
}
    80202562:	4501                	li	a0,0
    80202564:	70e2                	ld	ra,56(sp)
    80202566:	7442                	ld	s0,48(sp)
    80202568:	74a2                	ld	s1,40(sp)
    8020256a:	7902                	ld	s2,32(sp)
    8020256c:	69e2                	ld	s3,24(sp)
    8020256e:	6a42                	ld	s4,16(sp)
    80202570:	6aa2                	ld	s5,8(sp)
    80202572:	6121                	addi	sp,sp,64
    80202574:	8082                	ret
	qunlock(q);
	return p;
}

static inline int queue_del(struct proc* p){
	queue* q = (queue*)p->q;
    80202576:	1784ba03          	ld	s4,376(s1)
	acquire(&q->lk);
    8020257a:	008a0a93          	addi	s5,s4,8
    8020257e:	8556                	mv	a0,s5
    80202580:	00007097          	auipc	ra,0x7
    80202584:	95a080e7          	jalr	-1702(ra) # 80208eda <acquire>
	struct list* l = &p->dlist;
	qlock(q);
	if(q){
    80202588:	020a0b63          	beqz	s4,802025be <kill+0xcc>
	__list_link(node->prev, node->next);
    8020258c:	1404b703          	ld	a4,320(s1)
    80202590:	1484b783          	ld	a5,328(s1)
	prev->next = next;
    80202594:	e71c                	sd	a5,8(a4)
	next->prev = prev;
    80202596:	e398                	sd	a4,0(a5)
		list_del(l);
		p->q = 0;
    80202598:	1604bc23          	sd	zero,376(s1)
		p->dlist.prev = NULL;
    8020259c:	1404b023          	sd	zero,320(s1)
		p->dlist.next = NULL;
    802025a0:	1404b423          	sd	zero,328(s1)
	release(&q->lk);
    802025a4:	8556                	mv	a0,s5
    802025a6:	00007097          	auipc	ra,0x7
    802025aa:	988080e7          	jalr	-1656(ra) # 80208f2e <release>
				readyq_push(p);
    802025ae:	8526                	mv	a0,s1
    802025b0:	fffff097          	auipc	ra,0xfffff
    802025b4:	fb0080e7          	jalr	-80(ra) # 80201560 <readyq_push>
				p->state = RUNNABLE;
    802025b8:	4789                	li	a5,2
    802025ba:	d09c                	sw	a5,32(s1)
    802025bc:	b741                	j	8020253c <kill+0x4a>
    802025be:	8556                	mv	a0,s5
    802025c0:	00007097          	auipc	ra,0x7
    802025c4:	96e080e7          	jalr	-1682(ra) # 80208f2e <release>
		qunlock(q);	
		return 1;	
	}
	qunlock(q);
	return 0;
    802025c8:	b7dd                	j	802025ae <kill+0xbc>

00000000802025ca <tgkill>:
    if(p->pid == pid) return 1;
  }
  return 0;
}

int tgkill(int pid,int tid,int sig){
    802025ca:	872a                	mv	a4,a0
    802025cc:	852e                	mv	a0,a1
    802025ce:	85b2                	mv	a1,a2
  for(p = proc;p < &proc[NPROC];p++){
    802025d0:	01049797          	auipc	a5,0x1049
    802025d4:	0a078793          	addi	a5,a5,160 # 8124b670 <proc>
    802025d8:	01054697          	auipc	a3,0x1054
    802025dc:	5d868693          	addi	a3,a3,1496 # 81256bb0 <firstwait>
    if(p->pid == sid) break;
    802025e0:	43b0                	lw	a2,64(a5)
    802025e2:	00a60663          	beq	a2,a0,802025ee <tgkill+0x24>
  for(p = proc;p < &proc[NPROC];p++){
    802025e6:	1d078793          	addi	a5,a5,464
    802025ea:	fed79be3          	bne	a5,a3,802025e0 <tgkill+0x16>
  return child->parent;
    802025ee:	779c                	ld	a5,40(a5)
    if(!p)break;
    802025f0:	c385                	beqz	a5,80202610 <tgkill+0x46>
    if(p->pid == pid) return 1;
    802025f2:	43b4                	lw	a3,64(a5)
    802025f4:	fee69de3          	bne	a3,a4,802025ee <tgkill+0x24>
int tgkill(int pid,int tid,int sig){
    802025f8:	1141                	addi	sp,sp,-16
    802025fa:	e406                	sd	ra,8(sp)
    802025fc:	e022                	sd	s0,0(sp)
    802025fe:	0800                	addi	s0,sp,16
  if(!cmp_parent(pid,tid)) return -1;
  else return kill(tid,sig);
    80202600:	00000097          	auipc	ra,0x0
    80202604:	ef2080e7          	jalr	-270(ra) # 802024f2 <kill>
}
    80202608:	60a2                	ld	ra,8(sp)
    8020260a:	6402                	ld	s0,0(sp)
    8020260c:	0141                	addi	sp,sp,16
    8020260e:	8082                	ret
  if(!cmp_parent(pid,tid)) return -1;
    80202610:	557d                	li	a0,-1
}
    80202612:	8082                	ret

0000000080202614 <read_fat>:
/**
 * Read the FAT table content corresponded to the given cluster number.
 * @param   cluster     the number of cluster which you want to read its content in FAT table
 */
static uint32 read_fat(struct fs * self_fs, uint32 cluster)
{
    80202614:	1101                	addi	sp,sp,-32
    80202616:	ec06                	sd	ra,24(sp)
    80202618:	e822                	sd	s0,16(sp)
    8020261a:	e426                	sd	s1,8(sp)
    8020261c:	e04a                	sd	s2,0(sp)
    8020261e:	1000                	addi	s0,sp,32
    if (cluster >= FAT32_EOC) {
    80202620:	100007b7          	lui	a5,0x10000
    80202624:	17dd                	addi	a5,a5,-9
        return cluster;
    80202626:	84ae                	mv	s1,a1
    if (cluster >= FAT32_EOC) {
    80202628:	00b7e863          	bltu	a5,a1,80202638 <read_fat+0x24>
    8020262c:	892a                	mv	s2,a0
    }
    if (cluster > self_fs->fat.data_clus_cnt + 1) {     // because cluster number starts at 2, not 0
    8020262e:	4d1c                	lw	a5,24(a0)
    80202630:	2785                	addiw	a5,a5,1
        return 0;
    80202632:	4481                	li	s1,0
    if (cluster > self_fs->fat.data_clus_cnt + 1) {     // because cluster number starts at 2, not 0
    80202634:	00b7f963          	bgeu	a5,a1,80202646 <read_fat+0x32>
    // here should be a cache layer for FAT table, but not implemented yet.
    struct buf *b = bread(self_fs->devno, fat_sec);
    uint32 next_clus = *(uint32 *)(b->data + fat_offset_of_clus(self_fs, cluster));
    brelse(b);
    return next_clus;
}
    80202638:	8526                	mv	a0,s1
    8020263a:	60e2                	ld	ra,24(sp)
    8020263c:	6442                	ld	s0,16(sp)
    8020263e:	64a2                	ld	s1,8(sp)
    80202640:	6902                	ld	s2,0(sp)
    80202642:	6105                	addi	sp,sp,32
    80202644:	8082                	ret
    return self_fs->fat.bpb.rsvd_sec_cnt + (cluster << 2) / self_fs->fat.bpb.byts_per_sec + self_fs->fat.bpb.fat_sz * (fat_num - 1);
    80202646:	0025949b          	slliw	s1,a1,0x2
    8020264a:	02055783          	lhu	a5,32(a0)
    8020264e:	02f4d7bb          	divuw	a5,s1,a5
    80202652:	02455583          	lhu	a1,36(a0)
    struct buf *b = bread(self_fs->devno, fat_sec);
    80202656:	9dbd                	addw	a1,a1,a5
    80202658:	4108                	lw	a0,0(a0)
    8020265a:	ffffe097          	auipc	ra,0xffffe
    8020265e:	a9e080e7          	jalr	-1378(ra) # 802000f8 <bread>
    return (cluster << 2) % self_fs->fat.bpb.byts_per_sec;
    80202662:	02095583          	lhu	a1,32(s2)
    80202666:	02b4f5bb          	remuw	a1,s1,a1
    uint32 next_clus = *(uint32 *)(b->data + fat_offset_of_clus(self_fs, cluster));
    8020266a:	1582                	slli	a1,a1,0x20
    8020266c:	9181                	srli	a1,a1,0x20
    8020266e:	95aa                	add	a1,a1,a0
    80202670:	4da4                	lw	s1,88(a1)
    brelse(b);
    80202672:	ffffe097          	auipc	ra,0xffffe
    80202676:	bf2080e7          	jalr	-1038(ra) # 80200264 <brelse>
    return next_clus;
    8020267a:	bf7d                	j	80202638 <read_fat+0x24>

000000008020267c <alloc_clus>:
        brelse(b);
    }
}

static uint32 alloc_clus(struct fs * self_fs, uint8 dev)
{
    8020267c:	715d                	addi	sp,sp,-80
    8020267e:	e486                	sd	ra,72(sp)
    80202680:	e0a2                	sd	s0,64(sp)
    80202682:	fc26                	sd	s1,56(sp)
    80202684:	f84a                	sd	s2,48(sp)
    80202686:	f44e                	sd	s3,40(sp)
    80202688:	f052                	sd	s4,32(sp)
    8020268a:	ec56                	sd	s5,24(sp)
    8020268c:	e85a                	sd	s6,16(sp)
    8020268e:	e45e                	sd	s7,8(sp)
    80202690:	e062                	sd	s8,0(sp)
    80202692:	0880                	addi	s0,sp,80
    // should we keep a free cluster list? instead of searching fat every time.
    struct buf *b;
    uint32 sec = self_fs->fat.bpb.rsvd_sec_cnt;
    80202694:	02455b83          	lhu	s7,36(a0)
    uint32 const ent_per_sec = self_fs->fat.bpb.byts_per_sec / sizeof(uint32);
    80202698:	02055983          	lhu	s3,32(a0)
    for (uint32 i = 0; i < self_fs->fat.bpb.fat_sz; i++, sec++) {
    8020269c:	591c                	lw	a5,48(a0)
    8020269e:	cbf5                	beqz	a5,80202792 <alloc_clus+0x116>
    802026a0:	892a                	mv	s2,a0
    802026a2:	0029d99b          	srliw	s3,s3,0x2
    802026a6:	00098a1b          	sext.w	s4,s3
    802026aa:	4b01                	li	s6,0
        b = bread(self_fs->devno, sec);
        for (uint32 j = 0; j < ent_per_sec; j++) {
    802026ac:	4c01                	li	s8,0
    802026ae:	a86d                	j	80202768 <alloc_clus+0xec>
            if (((uint32 *)(b->data))[j] == 0) {
                ((uint32 *)(b->data))[j] = FAT32_EOC + 7;
    802026b0:	100007b7          	lui	a5,0x10000
    802026b4:	37fd                	addiw	a5,a5,-1
    802026b6:	c29c                	sw	a5,0(a3)
                bwrite(self_fs->devno, b);
    802026b8:	85d6                	mv	a1,s5
    802026ba:	00092503          	lw	a0,0(s2)
    802026be:	ffffe097          	auipc	ra,0xffffe
    802026c2:	b46080e7          	jalr	-1210(ra) # 80200204 <bwrite>
                brelse(b);
    802026c6:	8556                	mv	a0,s5
    802026c8:	ffffe097          	auipc	ra,0xffffe
    802026cc:	b9c080e7          	jalr	-1124(ra) # 80200264 <brelse>
                uint32 clus = i * ent_per_sec + j;
    802026d0:	036989bb          	mulw	s3,s3,s6
    802026d4:	009984bb          	addw	s1,s3,s1
    802026d8:	00048a9b          	sext.w	s5,s1
    return ((cluster - 2) * self_fs->fat.bpb.sec_per_clus) + self_fs->fat.first_data_sec;
    802026dc:	02294783          	lbu	a5,34(s2)
    802026e0:	34f9                	addiw	s1,s1,-2
    802026e2:	02f48a3b          	mulw	s4,s1,a5
    802026e6:	01092703          	lw	a4,16(s2)
    802026ea:	00ea0a3b          	addw	s4,s4,a4
    for (int i = 0; i < self_fs->fat.bpb.sec_per_clus; i++) {
    802026ee:	c7a9                	beqz	a5,80202738 <alloc_clus+0xbc>
    802026f0:	4981                	li	s3,0
        b = bread(self_fs->devno, sec++);
    802026f2:	014985bb          	addw	a1,s3,s4
    802026f6:	00092503          	lw	a0,0(s2)
    802026fa:	ffffe097          	auipc	ra,0xffffe
    802026fe:	9fe080e7          	jalr	-1538(ra) # 802000f8 <bread>
    80202702:	84aa                	mv	s1,a0
        memset(b->data, 0, BSIZE);
    80202704:	20000613          	li	a2,512
    80202708:	4581                	li	a1,0
    8020270a:	05850513          	addi	a0,a0,88
    8020270e:	ffffe097          	auipc	ra,0xffffe
    80202712:	666080e7          	jalr	1638(ra) # 80200d74 <memset>
        bwrite(self_fs->devno, b);
    80202716:	85a6                	mv	a1,s1
    80202718:	00092503          	lw	a0,0(s2)
    8020271c:	ffffe097          	auipc	ra,0xffffe
    80202720:	ae8080e7          	jalr	-1304(ra) # 80200204 <bwrite>
        brelse(b);
    80202724:	8526                	mv	a0,s1
    80202726:	ffffe097          	auipc	ra,0xffffe
    8020272a:	b3e080e7          	jalr	-1218(ra) # 80200264 <brelse>
    for (int i = 0; i < self_fs->fat.bpb.sec_per_clus; i++) {
    8020272e:	2985                	addiw	s3,s3,1
    80202730:	02294783          	lbu	a5,34(s2)
    80202734:	faf9cfe3          	blt	s3,a5,802026f2 <alloc_clus+0x76>
            }
        }
        brelse(b);
    }
    panic("no clusters");
}
    80202738:	8556                	mv	a0,s5
    8020273a:	60a6                	ld	ra,72(sp)
    8020273c:	6406                	ld	s0,64(sp)
    8020273e:	74e2                	ld	s1,56(sp)
    80202740:	7942                	ld	s2,48(sp)
    80202742:	79a2                	ld	s3,40(sp)
    80202744:	7a02                	ld	s4,32(sp)
    80202746:	6ae2                	ld	s5,24(sp)
    80202748:	6b42                	ld	s6,16(sp)
    8020274a:	6ba2                	ld	s7,8(sp)
    8020274c:	6c02                	ld	s8,0(sp)
    8020274e:	6161                	addi	sp,sp,80
    80202750:	8082                	ret
        brelse(b);
    80202752:	8556                	mv	a0,s5
    80202754:	ffffe097          	auipc	ra,0xffffe
    80202758:	b10080e7          	jalr	-1264(ra) # 80200264 <brelse>
    for (uint32 i = 0; i < self_fs->fat.bpb.fat_sz; i++, sec++) {
    8020275c:	2b05                	addiw	s6,s6,1
    8020275e:	2b85                	addiw	s7,s7,1
    80202760:	03092783          	lw	a5,48(s2)
    80202764:	02fb7763          	bgeu	s6,a5,80202792 <alloc_clus+0x116>
        b = bread(self_fs->devno, sec);
    80202768:	85de                	mv	a1,s7
    8020276a:	00092503          	lw	a0,0(s2)
    8020276e:	ffffe097          	auipc	ra,0xffffe
    80202772:	98a080e7          	jalr	-1654(ra) # 802000f8 <bread>
    80202776:	8aaa                	mv	s5,a0
        for (uint32 j = 0; j < ent_per_sec; j++) {
    80202778:	fc0a0de3          	beqz	s4,80202752 <alloc_clus+0xd6>
    8020277c:	05850793          	addi	a5,a0,88
    80202780:	84e2                	mv	s1,s8
            if (((uint32 *)(b->data))[j] == 0) {
    80202782:	86be                	mv	a3,a5
    80202784:	4398                	lw	a4,0(a5)
    80202786:	d70d                	beqz	a4,802026b0 <alloc_clus+0x34>
        for (uint32 j = 0; j < ent_per_sec; j++) {
    80202788:	2485                	addiw	s1,s1,1
    8020278a:	0791                	addi	a5,a5,4
    8020278c:	fe9a1be3          	bne	s4,s1,80202782 <alloc_clus+0x106>
    80202790:	b7c9                	j	80202752 <alloc_clus+0xd6>
    panic("no clusters");
    80202792:	00012517          	auipc	a0,0x12
    80202796:	aee50513          	addi	a0,a0,-1298 # 80214280 <rodata_start+0x280>
    8020279a:	00007097          	auipc	ra,0x7
    8020279e:	ab0080e7          	jalr	-1360(ra) # 8020924a <panic>

00000000802027a2 <write_fat>:
    if (cluster > self_fs->fat.data_clus_cnt + 1) {
    802027a2:	4d1c                	lw	a5,24(a0)
    802027a4:	2785                	addiw	a5,a5,1
    802027a6:	06b7e963          	bltu	a5,a1,80202818 <write_fat+0x76>
{
    802027aa:	7179                	addi	sp,sp,-48
    802027ac:	f406                	sd	ra,40(sp)
    802027ae:	f022                	sd	s0,32(sp)
    802027b0:	ec26                	sd	s1,24(sp)
    802027b2:	e84a                	sd	s2,16(sp)
    802027b4:	e44e                	sd	s3,8(sp)
    802027b6:	e052                	sd	s4,0(sp)
    802027b8:	1800                	addi	s0,sp,48
    802027ba:	892a                	mv	s2,a0
    802027bc:	8a32                	mv	s4,a2
    return self_fs->fat.bpb.rsvd_sec_cnt + (cluster << 2) / self_fs->fat.bpb.byts_per_sec + self_fs->fat.bpb.fat_sz * (fat_num - 1);
    802027be:	0025949b          	slliw	s1,a1,0x2
    802027c2:	02055783          	lhu	a5,32(a0)
    802027c6:	02f4d7bb          	divuw	a5,s1,a5
    802027ca:	02455583          	lhu	a1,36(a0)
    struct buf *b = bread(self_fs->devno, fat_sec);
    802027ce:	9dbd                	addw	a1,a1,a5
    802027d0:	4108                	lw	a0,0(a0)
    802027d2:	ffffe097          	auipc	ra,0xffffe
    802027d6:	926080e7          	jalr	-1754(ra) # 802000f8 <bread>
    802027da:	89aa                	mv	s3,a0
    return (cluster << 2) % self_fs->fat.bpb.byts_per_sec;
    802027dc:	02095583          	lhu	a1,32(s2)
    802027e0:	02b4f5bb          	remuw	a1,s1,a1
    *(uint32 *)(b->data + off) = content;
    802027e4:	1582                	slli	a1,a1,0x20
    802027e6:	9181                	srli	a1,a1,0x20
    802027e8:	95aa                	add	a1,a1,a0
    802027ea:	0545ac23          	sw	s4,88(a1)
    bwrite(self_fs->devno, b);
    802027ee:	85aa                	mv	a1,a0
    802027f0:	00092503          	lw	a0,0(s2)
    802027f4:	ffffe097          	auipc	ra,0xffffe
    802027f8:	a10080e7          	jalr	-1520(ra) # 80200204 <bwrite>
    brelse(b);
    802027fc:	854e                	mv	a0,s3
    802027fe:	ffffe097          	auipc	ra,0xffffe
    80202802:	a66080e7          	jalr	-1434(ra) # 80200264 <brelse>
    return 0;
    80202806:	4501                	li	a0,0
}
    80202808:	70a2                	ld	ra,40(sp)
    8020280a:	7402                	ld	s0,32(sp)
    8020280c:	64e2                	ld	s1,24(sp)
    8020280e:	6942                	ld	s2,16(sp)
    80202810:	69a2                	ld	s3,8(sp)
    80202812:	6a02                	ld	s4,0(sp)
    80202814:	6145                	addi	sp,sp,48
    80202816:	8082                	ret
        return -1;
    80202818:	557d                	li	a0,-1
}
    8020281a:	8082                	ret

000000008020281c <reloc_clus>:
 * @param   off         the offset from the beginning of the relative file
 * @param   alloc       whether alloc new cluster when meeting end of FAT chains
 * @return              the offset from the new cur_clus
 */
static int reloc_clus(struct fs * self_fs, struct dirent *entry, uint off, int alloc)
{
    8020281c:	715d                	addi	sp,sp,-80
    8020281e:	e486                	sd	ra,72(sp)
    80202820:	e0a2                	sd	s0,64(sp)
    80202822:	fc26                	sd	s1,56(sp)
    80202824:	f84a                	sd	s2,48(sp)
    80202826:	f44e                	sd	s3,40(sp)
    80202828:	f052                	sd	s4,32(sp)
    8020282a:	ec56                	sd	s5,24(sp)
    8020282c:	e85a                	sd	s6,16(sp)
    8020282e:	e45e                	sd	s7,8(sp)
    80202830:	e062                	sd	s8,0(sp)
    80202832:	0880                	addi	s0,sp,80
    80202834:	89aa                	mv	s3,a0
    80202836:	84ae                	mv	s1,a1
    80202838:	8ab2                	mv	s5,a2
    int clus_num = off / self_fs->fat.byts_per_clus;
    8020283a:	01c52c03          	lw	s8,28(a0)
    8020283e:	03865a3b          	divuw	s4,a2,s8
    while (clus_num > entry->clus_cnt) {
    80202842:	1105a703          	lw	a4,272(a1)
    80202846:	07477963          	bgeu	a4,s4,802028b8 <reloc_clus+0x9c>
    8020284a:	8bb6                	mv	s7,a3
        int clus = read_fat(self_fs, entry->cur_clus);
        if (clus >= FAT32_EOC) {
    8020284c:	10000b37          	lui	s6,0x10000
    80202850:	1b5d                	addi	s6,s6,-9
    80202852:	a025                	j	8020287a <reloc_clus+0x5e>
            if (alloc) {
                clus = alloc_clus(self_fs, entry->dev);
                write_fat(self_fs, entry->cur_clus, clus);
            } else {
                entry->cur_clus = entry->first_clus;
    80202854:	1044a783          	lw	a5,260(s1)
    80202858:	10f4a623          	sw	a5,268(s1)
                entry->clus_cnt = 0;
    8020285c:	1004a823          	sw	zero,272(s1)
                return -1;
    80202860:	557d                	li	a0,-1
    80202862:	a04d                	j	80202904 <reloc_clus+0xe8>
            }
        }
        entry->cur_clus = clus;
    80202864:	1124a623          	sw	s2,268(s1)
        entry->clus_cnt++;
    80202868:	1104a783          	lw	a5,272(s1)
    8020286c:	2785                	addiw	a5,a5,1
    8020286e:	0007871b          	sext.w	a4,a5
    80202872:	10f4a823          	sw	a5,272(s1)
    while (clus_num > entry->clus_cnt) {
    80202876:	05477163          	bgeu	a4,s4,802028b8 <reloc_clus+0x9c>
        int clus = read_fat(self_fs, entry->cur_clus);
    8020287a:	10c4a583          	lw	a1,268(s1)
    8020287e:	854e                	mv	a0,s3
    80202880:	00000097          	auipc	ra,0x0
    80202884:	d94080e7          	jalr	-620(ra) # 80202614 <read_fat>
    80202888:	0005091b          	sext.w	s2,a0
        if (clus >= FAT32_EOC) {
    8020288c:	fd2b5ce3          	bge	s6,s2,80202864 <reloc_clus+0x48>
            if (alloc) {
    80202890:	fc0b82e3          	beqz	s7,80202854 <reloc_clus+0x38>
                clus = alloc_clus(self_fs, entry->dev);
    80202894:	1144c583          	lbu	a1,276(s1)
    80202898:	854e                	mv	a0,s3
    8020289a:	00000097          	auipc	ra,0x0
    8020289e:	de2080e7          	jalr	-542(ra) # 8020267c <alloc_clus>
    802028a2:	0005091b          	sext.w	s2,a0
                write_fat(self_fs, entry->cur_clus, clus);
    802028a6:	864a                	mv	a2,s2
    802028a8:	10c4a583          	lw	a1,268(s1)
    802028ac:	854e                	mv	a0,s3
    802028ae:	00000097          	auipc	ra,0x0
    802028b2:	ef4080e7          	jalr	-268(ra) # 802027a2 <write_fat>
    802028b6:	b77d                	j	80202864 <reloc_clus+0x48>
    }
    if (clus_num < entry->clus_cnt) {
    802028b8:	04ea7263          	bgeu	s4,a4,802028fc <reloc_clus+0xe0>
        entry->cur_clus = entry->first_clus;
    802028bc:	1044a783          	lw	a5,260(s1)
    802028c0:	10f4a623          	sw	a5,268(s1)
        entry->clus_cnt = 0;
    802028c4:	1004a823          	sw	zero,272(s1)
        while (entry->clus_cnt < clus_num) {
    802028c8:	038aea63          	bltu	s5,s8,802028fc <reloc_clus+0xe0>
            entry->cur_clus = read_fat(self_fs, entry->cur_clus);
            if (entry->cur_clus >= FAT32_EOC) {
    802028cc:	10000937          	lui	s2,0x10000
    802028d0:	195d                	addi	s2,s2,-9
            entry->cur_clus = read_fat(self_fs, entry->cur_clus);
    802028d2:	10c4a583          	lw	a1,268(s1)
    802028d6:	854e                	mv	a0,s3
    802028d8:	00000097          	auipc	ra,0x0
    802028dc:	d3c080e7          	jalr	-708(ra) # 80202614 <read_fat>
    802028e0:	2501                	sext.w	a0,a0
    802028e2:	10a4a623          	sw	a0,268(s1)
            if (entry->cur_clus >= FAT32_EOC) {
    802028e6:	02a96b63          	bltu	s2,a0,8020291c <reloc_clus+0x100>
                panic("reloc_clus");
            }
            entry->clus_cnt++;
    802028ea:	1104a783          	lw	a5,272(s1)
    802028ee:	2785                	addiw	a5,a5,1
    802028f0:	0007871b          	sext.w	a4,a5
    802028f4:	10f4a823          	sw	a5,272(s1)
        while (entry->clus_cnt < clus_num) {
    802028f8:	fd476de3          	bltu	a4,s4,802028d2 <reloc_clus+0xb6>
        }
    }
    return off % self_fs->fat.byts_per_clus;
    802028fc:	01c9a503          	lw	a0,28(s3)
    80202900:	02aaf53b          	remuw	a0,s5,a0
}
    80202904:	60a6                	ld	ra,72(sp)
    80202906:	6406                	ld	s0,64(sp)
    80202908:	74e2                	ld	s1,56(sp)
    8020290a:	7942                	ld	s2,48(sp)
    8020290c:	79a2                	ld	s3,40(sp)
    8020290e:	7a02                	ld	s4,32(sp)
    80202910:	6ae2                	ld	s5,24(sp)
    80202912:	6b42                	ld	s6,16(sp)
    80202914:	6ba2                	ld	s7,8(sp)
    80202916:	6c02                	ld	s8,0(sp)
    80202918:	6161                	addi	sp,sp,80
    8020291a:	8082                	ret
                panic("reloc_clus");
    8020291c:	00012517          	auipc	a0,0x12
    80202920:	97450513          	addi	a0,a0,-1676 # 80214290 <rodata_start+0x290>
    80202924:	00007097          	auipc	ra,0x7
    80202928:	926080e7          	jalr	-1754(ra) # 8020924a <panic>

000000008020292c <rw_clus>:
{
    8020292c:	7119                	addi	sp,sp,-128
    8020292e:	fc86                	sd	ra,120(sp)
    80202930:	f8a2                	sd	s0,112(sp)
    80202932:	f4a6                	sd	s1,104(sp)
    80202934:	f0ca                	sd	s2,96(sp)
    80202936:	ecce                	sd	s3,88(sp)
    80202938:	e8d2                	sd	s4,80(sp)
    8020293a:	e4d6                	sd	s5,72(sp)
    8020293c:	e0da                	sd	s6,64(sp)
    8020293e:	fc5e                	sd	s7,56(sp)
    80202940:	f862                	sd	s8,48(sp)
    80202942:	f466                	sd	s9,40(sp)
    80202944:	f06a                	sd	s10,32(sp)
    80202946:	ec6e                	sd	s11,24(sp)
    80202948:	0100                	addi	s0,sp,128
    8020294a:	f8d43023          	sd	a3,-128(s0)
    8020294e:	8b3a                	mv	s6,a4
    if (off + n > self_fs->fat.byts_per_clus)
    80202950:	010786bb          	addw	a3,a5,a6
    80202954:	4d58                	lw	a4,28(a0)
    80202956:	02d76d63          	bltu	a4,a3,80202990 <rw_clus+0x64>
    8020295a:	8caa                	mv	s9,a0
    8020295c:	8bb2                	mv	s7,a2
    8020295e:	8c42                	mv	s8,a6
    uint sec = first_sec_of_clus(self_fs, cluster) + off / self_fs->fat.bpb.byts_per_sec;
    80202960:	02055a83          	lhu	s5,32(a0)
    return ((cluster - 2) * self_fs->fat.bpb.sec_per_clus) + self_fs->fat.first_data_sec;
    80202964:	ffe5899b          	addiw	s3,a1,-2
    80202968:	02254583          	lbu	a1,34(a0)
    8020296c:	02b989bb          	mulw	s3,s3,a1
    80202970:	490c                	lw	a1,16(a0)
    80202972:	00b989bb          	addw	s3,s3,a1
    uint sec = first_sec_of_clus(self_fs, cluster) + off / self_fs->fat.bpb.byts_per_sec;
    80202976:	0357d73b          	divuw	a4,a5,s5
    8020297a:	00e989bb          	addw	s3,s3,a4
    off = off % self_fs->fat.bpb.byts_per_sec;
    8020297e:	0357fabb          	remuw	s5,a5,s5
    for (tot = 0; tot < n; tot += m, off += m, data += m, sec++) {
    80202982:	0e080963          	beqz	a6,80202a74 <rw_clus+0x148>
    80202986:	4a01                	li	s4,0
        m = BSIZE - off % BSIZE;
    80202988:	20000d93          	li	s11,512
        if (bad == -1) {
    8020298c:	5d7d                	li	s10,-1
    8020298e:	a0bd                	j	802029fc <rw_clus+0xd0>
        panic("offset out of range");
    80202990:	00012517          	auipc	a0,0x12
    80202994:	91050513          	addi	a0,a0,-1776 # 802142a0 <rodata_start+0x2a0>
    80202998:	00007097          	auipc	ra,0x7
    8020299c:	8b2080e7          	jalr	-1870(ra) # 8020924a <panic>
                bwrite(self_fs->devno, bp);
    802029a0:	85ca                	mv	a1,s2
    802029a2:	000ca503          	lw	a0,0(s9)
    802029a6:	ffffe097          	auipc	ra,0xffffe
    802029aa:	85e080e7          	jalr	-1954(ra) # 80200204 <bwrite>
        brelse(bp);
    802029ae:	854a                	mv	a0,s2
    802029b0:	ffffe097          	auipc	ra,0xffffe
    802029b4:	8b4080e7          	jalr	-1868(ra) # 80200264 <brelse>
        if (bad == -1) {
    802029b8:	a805                	j	802029e8 <rw_clus+0xbc>
            bad = either_copyout(user, data, bp->data + (off % BSIZE), m);
    802029ba:	05890613          	addi	a2,s2,88 # 10000058 <_entry-0x701fffa8>
    802029be:	1682                	slli	a3,a3,0x20
    802029c0:	9281                	srli	a3,a3,0x20
    802029c2:	963a                	add	a2,a2,a4
    802029c4:	85da                	mv	a1,s6
    802029c6:	f8043503          	ld	a0,-128(s0)
    802029ca:	00009097          	auipc	ra,0x9
    802029ce:	06c080e7          	jalr	108(ra) # 8020ba36 <either_copyout>
    802029d2:	f8a43423          	sd	a0,-120(s0)
        brelse(bp);
    802029d6:	854a                	mv	a0,s2
    802029d8:	ffffe097          	auipc	ra,0xffffe
    802029dc:	88c080e7          	jalr	-1908(ra) # 80200264 <brelse>
        if (bad == -1) {
    802029e0:	f8843783          	ld	a5,-120(s0)
    802029e4:	07a78863          	beq	a5,s10,80202a54 <rw_clus+0x128>
    for (tot = 0; tot < n; tot += m, off += m, data += m, sec++) {
    802029e8:	01448a3b          	addw	s4,s1,s4
    802029ec:	01548abb          	addw	s5,s1,s5
    802029f0:	1482                	slli	s1,s1,0x20
    802029f2:	9081                	srli	s1,s1,0x20
    802029f4:	9b26                	add	s6,s6,s1
    802029f6:	2985                	addiw	s3,s3,1
    802029f8:	058a7e63          	bgeu	s4,s8,80202a54 <rw_clus+0x128>
        bp = bread(self_fs->devno, sec);
    802029fc:	85ce                	mv	a1,s3
    802029fe:	000ca503          	lw	a0,0(s9)
    80202a02:	ffffd097          	auipc	ra,0xffffd
    80202a06:	6f6080e7          	jalr	1782(ra) # 802000f8 <bread>
    80202a0a:	892a                	mv	s2,a0
        m = BSIZE - off % BSIZE;
    80202a0c:	1ffaf713          	andi	a4,s5,511
    80202a10:	40ed863b          	subw	a2,s11,a4
        if (n - tot < m) {
    80202a14:	414c07bb          	subw	a5,s8,s4
    80202a18:	86be                	mv	a3,a5
    80202a1a:	2781                	sext.w	a5,a5
    80202a1c:	0006059b          	sext.w	a1,a2
    80202a20:	00f5f363          	bgeu	a1,a5,80202a26 <rw_clus+0xfa>
    80202a24:	86b2                	mv	a3,a2
    80202a26:	0006849b          	sext.w	s1,a3
        if (write) {
    80202a2a:	f80b88e3          	beqz	s7,802029ba <rw_clus+0x8e>
            if ((bad = either_copyin(user, bp->data + (off % BSIZE), data, m)) != -1) {
    80202a2e:	05890593          	addi	a1,s2,88
    80202a32:	1682                	slli	a3,a3,0x20
    80202a34:	9281                	srli	a3,a3,0x20
    80202a36:	865a                	mv	a2,s6
    80202a38:	95ba                	add	a1,a1,a4
    80202a3a:	f8043503          	ld	a0,-128(s0)
    80202a3e:	00009097          	auipc	ra,0x9
    80202a42:	04e080e7          	jalr	78(ra) # 8020ba8c <either_copyin>
    80202a46:	f5a51de3          	bne	a0,s10,802029a0 <rw_clus+0x74>
        brelse(bp);
    80202a4a:	854a                	mv	a0,s2
    80202a4c:	ffffe097          	auipc	ra,0xffffe
    80202a50:	818080e7          	jalr	-2024(ra) # 80200264 <brelse>
}
    80202a54:	8552                	mv	a0,s4
    80202a56:	70e6                	ld	ra,120(sp)
    80202a58:	7446                	ld	s0,112(sp)
    80202a5a:	74a6                	ld	s1,104(sp)
    80202a5c:	7906                	ld	s2,96(sp)
    80202a5e:	69e6                	ld	s3,88(sp)
    80202a60:	6a46                	ld	s4,80(sp)
    80202a62:	6aa6                	ld	s5,72(sp)
    80202a64:	6b06                	ld	s6,64(sp)
    80202a66:	7be2                	ld	s7,56(sp)
    80202a68:	7c42                	ld	s8,48(sp)
    80202a6a:	7ca2                	ld	s9,40(sp)
    80202a6c:	7d02                	ld	s10,32(sp)
    80202a6e:	6de2                	ld	s11,24(sp)
    80202a70:	6109                	addi	sp,sp,128
    80202a72:	8082                	ret
    for (tot = 0; tot < n; tot += m, off += m, data += m, sec++) {
    80202a74:	8a42                	mv	s4,a6
    80202a76:	bff9                	j	80202a54 <rw_clus+0x128>

0000000080202a78 <eget>:
// by their whole path. But when parsing a path, we open all the directories through it, 
// which forms a linked list from the final file to the self_fs->root. Thus, we use the "parent" pointer 
// to recognize whether an entry with the "name" as given is really the file we want in the right path.
// Should never get self_fs->root by eget, it's easy to understand.
static struct dirent *eget(struct dirent *parent, char *name)
{
    80202a78:	715d                	addi	sp,sp,-80
    80202a7a:	e486                	sd	ra,72(sp)
    80202a7c:	e0a2                	sd	s0,64(sp)
    80202a7e:	fc26                	sd	s1,56(sp)
    80202a80:	f84a                	sd	s2,48(sp)
    80202a82:	f44e                	sd	s3,40(sp)
    80202a84:	f052                	sd	s4,32(sp)
    80202a86:	ec56                	sd	s5,24(sp)
    80202a88:	e85a                	sd	s6,16(sp)
    80202a8a:	e45e                	sd	s7,8(sp)
    80202a8c:	e062                	sd	s8,0(sp)
    80202a8e:	0880                	addi	s0,sp,80
    80202a90:	8a2a                	mv	s4,a0
    80202a92:	8bae                	mv	s7,a1
    if(parent->mnt) parent = &(FatFs[parent->dev].root);
    80202a94:	11c52783          	lw	a5,284(a0)
    80202a98:	c385                	beqz	a5,80202ab8 <eget+0x40>
    80202a9a:	11454a03          	lbu	s4,276(a0)
    80202a9e:	6795                	lui	a5,0x5
    80202aa0:	9b878713          	addi	a4,a5,-1608 # 49b8 <_entry-0x801fb648>
    80202aa4:	02ea0a33          	mul	s4,s4,a4
    80202aa8:	83078793          	addi	a5,a5,-2000
    80202aac:	9a3e                	add	s4,s4,a5
    80202aae:	01054517          	auipc	a0,0x1054
    80202ab2:	12250513          	addi	a0,a0,290 # 81256bd0 <FatFs>
    80202ab6:	9a2a                	add	s4,s4,a0
    struct fs * self_fs = &FatFs[parent->dev];
    80202ab8:	114a4903          	lbu	s2,276(s4)
    80202abc:	00090b1b          	sext.w	s6,s2
    struct dirent *ep;
    acquire(&self_fs->ecache.lock);
    80202ac0:	6795                	lui	a5,0x5
    80202ac2:	9b878793          	addi	a5,a5,-1608 # 49b8 <_entry-0x801fb648>
    80202ac6:	02f90933          	mul	s2,s2,a5
    80202aca:	01054a97          	auipc	s5,0x1054
    80202ace:	13ea8a93          	addi	s5,s5,318 # 81256c08 <FatFs+0x38>
    80202ad2:	9aca                	add	s5,s5,s2
    80202ad4:	8556                	mv	a0,s5
    80202ad6:	00006097          	auipc	ra,0x6
    80202ada:	404080e7          	jalr	1028(ra) # 80208eda <acquire>
    if (name) {
    80202ade:	080b8063          	beqz	s7,80202b5e <eget+0xe6>
        for (ep = self_fs->root.next; ep != &self_fs->root; ep = ep->next) {          // LRU algo
    80202ae2:	01054697          	auipc	a3,0x1054
    80202ae6:	0ee68693          	addi	a3,a3,238 # 81256bd0 <FatFs>
    80202aea:	6795                	lui	a5,0x5
    80202aec:	9b878713          	addi	a4,a5,-1608 # 49b8 <_entry-0x801fb648>
    80202af0:	02eb0733          	mul	a4,s6,a4
    80202af4:	9736                	add	a4,a4,a3
    80202af6:	973e                	add	a4,a4,a5
    80202af8:	96073483          	ld	s1,-1696(a4)
    80202afc:	83078993          	addi	s3,a5,-2000
    80202b00:	99ca                	add	s3,s3,s2
    80202b02:	99b6                	add	s3,s3,a3
    80202b04:	05348d63          	beq	s1,s3,80202b5e <eget+0xe6>
            if (ep->valid == 1 && ep->parent == parent
    80202b08:	4c05                	li	s8,1
    80202b0a:	a029                	j	80202b14 <eget+0x9c>
        for (ep = self_fs->root.next; ep != &self_fs->root; ep = ep->next) {          // LRU algo
    80202b0c:	1304b483          	ld	s1,304(s1)
    80202b10:	05348763          	beq	s1,s3,80202b5e <eget+0xe6>
            if (ep->valid == 1 && ep->parent == parent
    80202b14:	11649783          	lh	a5,278(s1)
    80202b18:	ff879ae3          	bne	a5,s8,80202b0c <eget+0x94>
    80202b1c:	1284b783          	ld	a5,296(s1)
    80202b20:	ff4796e3          	bne	a5,s4,80202b0c <eget+0x94>
                && strncmp(ep->filename, name, FAT32_MAX_FILENAME) == 0) {
    80202b24:	0ff00613          	li	a2,255
    80202b28:	85de                	mv	a1,s7
    80202b2a:	8526                	mv	a0,s1
    80202b2c:	ffffe097          	auipc	ra,0xffffe
    80202b30:	324080e7          	jalr	804(ra) # 80200e50 <strncmp>
    80202b34:	fd61                	bnez	a0,80202b0c <eget+0x94>
                if (ep->ref++ == 0) {
    80202b36:	1184a783          	lw	a5,280(s1)
    80202b3a:	0017871b          	addiw	a4,a5,1
    80202b3e:	10e4ac23          	sw	a4,280(s1)
    80202b42:	eb81                	bnez	a5,80202b52 <eget+0xda>
                    ep->parent->ref++;
    80202b44:	1284b703          	ld	a4,296(s1)
    80202b48:	11872783          	lw	a5,280(a4)
    80202b4c:	2785                	addiw	a5,a5,1
    80202b4e:	10f72c23          	sw	a5,280(a4)
                }
                release(&self_fs->ecache.lock);
    80202b52:	8556                	mv	a0,s5
    80202b54:	00006097          	auipc	ra,0x6
    80202b58:	3da080e7          	jalr	986(ra) # 80208f2e <release>
                // edup(ep->parent);
                return ep;
    80202b5c:	a0bd                	j	80202bca <eget+0x152>
            }
        }
    }
    for (ep = self_fs->root.prev; ep != &self_fs->root; ep = ep->prev) {              // LRU algo
    80202b5e:	01054697          	auipc	a3,0x1054
    80202b62:	07268693          	addi	a3,a3,114 # 81256bd0 <FatFs>
    80202b66:	6715                	lui	a4,0x5
    80202b68:	9b870793          	addi	a5,a4,-1608 # 49b8 <_entry-0x801fb648>
    80202b6c:	02fb07b3          	mul	a5,s6,a5
    80202b70:	97b6                	add	a5,a5,a3
    80202b72:	97ba                	add	a5,a5,a4
    80202b74:	9687b483          	ld	s1,-1688(a5)
    80202b78:	83070713          	addi	a4,a4,-2000
    80202b7c:	974a                	add	a4,a4,s2
    80202b7e:	9736                	add	a4,a4,a3
    80202b80:	00e48963          	beq	s1,a4,80202b92 <eget+0x11a>
        if (ep->ref == 0) {
    80202b84:	1184a783          	lw	a5,280(s1)
    80202b88:	cf89                	beqz	a5,80202ba2 <eget+0x12a>
    for (ep = self_fs->root.prev; ep != &self_fs->root; ep = ep->prev) {              // LRU algo
    80202b8a:	1384b483          	ld	s1,312(s1)
    80202b8e:	fee49be3          	bne	s1,a4,80202b84 <eget+0x10c>
            ep->dirty = 0;
            release(&self_fs->ecache.lock);
            return ep;
        }
    }
    panic("eget: insufficient self_fs->ecache");
    80202b92:	00011517          	auipc	a0,0x11
    80202b96:	72650513          	addi	a0,a0,1830 # 802142b8 <rodata_start+0x2b8>
    80202b9a:	00006097          	auipc	ra,0x6
    80202b9e:	6b0080e7          	jalr	1712(ra) # 8020924a <panic>
            ep->ref = 1;
    80202ba2:	4785                	li	a5,1
    80202ba4:	10f4ac23          	sw	a5,280(s1)
            ep->dev = parent->dev;
    80202ba8:	114a4783          	lbu	a5,276(s4)
    80202bac:	10f48a23          	sb	a5,276(s1)
            ep->off = 0;
    80202bb0:	1204a023          	sw	zero,288(s1)
            ep->valid = 0;
    80202bb4:	10049b23          	sh	zero,278(s1)
            ep->mnt = 0;
    80202bb8:	1004ae23          	sw	zero,284(s1)
            ep->dirty = 0;
    80202bbc:	10048aa3          	sb	zero,277(s1)
            release(&self_fs->ecache.lock);
    80202bc0:	8556                	mv	a0,s5
    80202bc2:	00006097          	auipc	ra,0x6
    80202bc6:	36c080e7          	jalr	876(ra) # 80208f2e <release>
    return 0;
}
    80202bca:	8526                	mv	a0,s1
    80202bcc:	60a6                	ld	ra,72(sp)
    80202bce:	6406                	ld	s0,64(sp)
    80202bd0:	74e2                	ld	s1,56(sp)
    80202bd2:	7942                	ld	s2,48(sp)
    80202bd4:	79a2                	ld	s3,40(sp)
    80202bd6:	7a02                	ld	s4,32(sp)
    80202bd8:	6ae2                	ld	s5,24(sp)
    80202bda:	6b42                	ld	s6,16(sp)
    80202bdc:	6ba2                	ld	s7,8(sp)
    80202bde:	6c02                	ld	s8,0(sp)
    80202be0:	6161                	addi	sp,sp,80
    80202be2:	8082                	ret

0000000080202be4 <read_entry_name>:
 * @param   buffer      pointer to the array that stores the name
 * @param   raw_entry   pointer to the entry in a sector buffer
 * @param   islong      if non-zero, read as l-n-e, otherwise s-n-e.
 */
static void read_entry_name(char *buffer, union dentry *d)
{
    80202be4:	7179                	addi	sp,sp,-48
    80202be6:	f406                	sd	ra,40(sp)
    80202be8:	f022                	sd	s0,32(sp)
    80202bea:	ec26                	sd	s1,24(sp)
    80202bec:	e84a                	sd	s2,16(sp)
    80202bee:	1800                	addi	s0,sp,48
    80202bf0:	84aa                	mv	s1,a0
    80202bf2:	892e                	mv	s2,a1
    if (d->lne.attr == ATTR_LONG_NAME) {                       // long entry branch
    80202bf4:	00b5c703          	lbu	a4,11(a1)
    80202bf8:	47bd                	li	a5,15
    80202bfa:	08f70463          	beq	a4,a5,80202c82 <read_entry_name+0x9e>
        snstr(buffer, d->lne.name2, NELEM(d->lne.name2));
        buffer += NELEM(d->lne.name2);
        snstr(buffer, d->lne.name3, NELEM(d->lne.name3));
    } else {
        // assert: only "." and ".." will enter this branch
        memset(buffer, 0, CHAR_SHORT_NAME + 2); // plus '.' and '\0'
    80202bfe:	4635                	li	a2,13
    80202c00:	4581                	li	a1,0
    80202c02:	ffffe097          	auipc	ra,0xffffe
    80202c06:	172080e7          	jalr	370(ra) # 80200d74 <memset>
        int i;
        for (i = 0; d->sne.name[i] != ' ' && i < 8; i++) {
    80202c0a:	00094703          	lbu	a4,0(s2)
    80202c0e:	02000793          	li	a5,32
    80202c12:	0af70b63          	beq	a4,a5,80202cc8 <read_entry_name+0xe4>
    80202c16:	4785                	li	a5,1
    80202c18:	02000613          	li	a2,32
    80202c1c:	45a5                	li	a1,9
            buffer[i] = d->sne.name[i];
    80202c1e:	00f486b3          	add	a3,s1,a5
    80202c22:	fee68fa3          	sb	a4,-1(a3)
        for (i = 0; d->sne.name[i] != ' ' && i < 8; i++) {
    80202c26:	0007851b          	sext.w	a0,a5
    80202c2a:	00f90733          	add	a4,s2,a5
    80202c2e:	00074703          	lbu	a4,0(a4)
    80202c32:	00c70563          	beq	a4,a2,80202c3c <read_entry_name+0x58>
    80202c36:	0785                	addi	a5,a5,1
    80202c38:	feb793e3          	bne	a5,a1,80202c1e <read_entry_name+0x3a>
        }
        if (d->sne.name[8] != ' ') {
    80202c3c:	00894703          	lbu	a4,8(s2)
    80202c40:	02000793          	li	a5,32
    80202c44:	00f70963          	beq	a4,a5,80202c56 <read_entry_name+0x72>
            buffer[i++] = '.';
    80202c48:	00a487b3          	add	a5,s1,a0
    80202c4c:	02e00713          	li	a4,46
    80202c50:	00e78023          	sb	a4,0(a5)
    80202c54:	2505                	addiw	a0,a0,1
        }
        for (int j = 8; j < CHAR_SHORT_NAME; j++, i++) {
    80202c56:	00890793          	addi	a5,s2,8
    80202c5a:	94aa                	add	s1,s1,a0
    80202c5c:	092d                	addi	s2,s2,11
            if (d->sne.name[j] == ' ') { break; }
    80202c5e:	02000693          	li	a3,32
    80202c62:	0007c703          	lbu	a4,0(a5)
    80202c66:	00d70863          	beq	a4,a3,80202c76 <read_entry_name+0x92>
            buffer[i] = d->sne.name[j];
    80202c6a:	00e48023          	sb	a4,0(s1)
        for (int j = 8; j < CHAR_SHORT_NAME; j++, i++) {
    80202c6e:	0785                	addi	a5,a5,1
    80202c70:	0485                	addi	s1,s1,1
    80202c72:	ff2798e3          	bne	a5,s2,80202c62 <read_entry_name+0x7e>
        }
    }
}
    80202c76:	70a2                	ld	ra,40(sp)
    80202c78:	7402                	ld	s0,32(sp)
    80202c7a:	64e2                	ld	s1,24(sp)
    80202c7c:	6942                	ld	s2,16(sp)
    80202c7e:	6145                	addi	sp,sp,48
    80202c80:	8082                	ret
        memmove(temp, d->lne.name1, sizeof(temp));
    80202c82:	4629                	li	a2,10
    80202c84:	0585                	addi	a1,a1,1
    80202c86:	fd040513          	addi	a0,s0,-48
    80202c8a:	ffffe097          	auipc	ra,0xffffe
    80202c8e:	14a080e7          	jalr	330(ra) # 80200dd4 <memmove>
        snstr(buffer, temp, NELEM(d->lne.name1));
    80202c92:	4615                	li	a2,5
    80202c94:	fd040593          	addi	a1,s0,-48
    80202c98:	8526                	mv	a0,s1
    80202c9a:	ffffe097          	auipc	ra,0xffffe
    80202c9e:	2c0080e7          	jalr	704(ra) # 80200f5a <snstr>
        snstr(buffer, d->lne.name2, NELEM(d->lne.name2));
    80202ca2:	4619                	li	a2,6
    80202ca4:	00e90593          	addi	a1,s2,14
    80202ca8:	00548513          	addi	a0,s1,5
    80202cac:	ffffe097          	auipc	ra,0xffffe
    80202cb0:	2ae080e7          	jalr	686(ra) # 80200f5a <snstr>
        snstr(buffer, d->lne.name3, NELEM(d->lne.name3));
    80202cb4:	4609                	li	a2,2
    80202cb6:	01c90593          	addi	a1,s2,28
    80202cba:	00b48513          	addi	a0,s1,11
    80202cbe:	ffffe097          	auipc	ra,0xffffe
    80202cc2:	29c080e7          	jalr	668(ra) # 80200f5a <snstr>
    80202cc6:	bf45                	j	80202c76 <read_entry_name+0x92>
        for (i = 0; d->sne.name[i] != ' ' && i < 8; i++) {
    80202cc8:	4501                	li	a0,0
    80202cca:	bf8d                	j	80202c3c <read_entry_name+0x58>

0000000080202ccc <fat32_init>:
{
    80202ccc:	7139                	addi	sp,sp,-64
    80202cce:	fc06                	sd	ra,56(sp)
    80202cd0:	f822                	sd	s0,48(sp)
    80202cd2:	f426                	sd	s1,40(sp)
    80202cd4:	f04a                	sd	s2,32(sp)
    80202cd6:	ec4e                	sd	s3,24(sp)
    80202cd8:	e852                	sd	s4,16(sp)
    80202cda:	e456                	sd	s5,8(sp)
    80202cdc:	e05a                	sd	s6,0(sp)
    80202cde:	0080                	addi	s0,sp,64
    80202ce0:	892a                	mv	s2,a0
    if(!debug_output)
    80202ce2:	0106b797          	auipc	a5,0x106b
    80202ce6:	f867a783          	lw	a5,-122(a5) # 8126dc68 <debug_output>
    80202cea:	1c078063          	beqz	a5,80202eaa <fat32_init+0x1de>
    if(self_fs->valid)return -1;
    80202cee:	00492783          	lw	a5,4(s2)
    80202cf2:	26079763          	bnez	a5,80202f60 <fat32_init+0x294>
    else self_fs->valid = 1;
    80202cf6:	4785                	li	a5,1
    80202cf8:	00f92223          	sw	a5,4(s2)
    self_fs->disk_init(self_fs->image);
    80202cfc:	6795                	lui	a5,0x5
    80202cfe:	97ca                	add	a5,a5,s2
    80202d00:	9a07b783          	ld	a5,-1632(a5) # 49a0 <_entry-0x801fb660>
    80202d04:	00893503          	ld	a0,8(s2)
    80202d08:	9782                	jalr	a5
    struct buf *b = bread(self_fs->devno, 0);
    80202d0a:	4581                	li	a1,0
    80202d0c:	00092503          	lw	a0,0(s2)
    80202d10:	ffffd097          	auipc	ra,0xffffd
    80202d14:	3e8080e7          	jalr	1000(ra) # 802000f8 <bread>
    80202d18:	84aa                	mv	s1,a0
    if (strncmp((char const*)(b->data + 82), "FAT32", 5))
    80202d1a:	4615                	li	a2,5
    80202d1c:	00011597          	auipc	a1,0x11
    80202d20:	5e458593          	addi	a1,a1,1508 # 80214300 <rodata_start+0x300>
    80202d24:	0aa50513          	addi	a0,a0,170
    80202d28:	ffffe097          	auipc	ra,0xffffe
    80202d2c:	128080e7          	jalr	296(ra) # 80200e50 <strncmp>
    80202d30:	8b2a                	mv	s6,a0
    80202d32:	18051a63          	bnez	a0,80202ec6 <fat32_init+0x1fa>
    memmove(&self_fs->fat.bpb.byts_per_sec, b->data + 11, 2);            // avoid misaligned load on k210
    80202d36:	4609                	li	a2,2
    80202d38:	06348593          	addi	a1,s1,99
    80202d3c:	02090513          	addi	a0,s2,32
    80202d40:	ffffe097          	auipc	ra,0xffffe
    80202d44:	094080e7          	jalr	148(ra) # 80200dd4 <memmove>
    self_fs->fat.bpb.sec_per_clus = *(b->data + 13);
    80202d48:	0654c683          	lbu	a3,101(s1)
    80202d4c:	02d90123          	sb	a3,34(s2)
    self_fs->fat.bpb.rsvd_sec_cnt = *(uint16 *)(b->data + 14);
    80202d50:	0664d603          	lhu	a2,102(s1)
    80202d54:	02c91223          	sh	a2,36(s2)
    self_fs->fat.bpb.fat_cnt = *(b->data + 16);
    80202d58:	0684c703          	lbu	a4,104(s1)
    80202d5c:	02e90323          	sb	a4,38(s2)
    self_fs->fat.bpb.hidd_sec = *(uint32 *)(b->data + 28);
    80202d60:	58fc                	lw	a5,116(s1)
    80202d62:	02f92423          	sw	a5,40(s2)
    self_fs->fat.bpb.tot_sec = *(uint32 *)(b->data + 32);
    80202d66:	5cbc                	lw	a5,120(s1)
    80202d68:	02f92623          	sw	a5,44(s2)
    self_fs->fat.bpb.fat_sz = *(uint32 *)(b->data + 36);
    80202d6c:	5cec                	lw	a1,124(s1)
    80202d6e:	02b92823          	sw	a1,48(s2)
    self_fs->fat.bpb.root_clus = *(uint32 *)(b->data + 44);
    80202d72:	0844a503          	lw	a0,132(s1)
    80202d76:	02a92a23          	sw	a0,52(s2)
    self_fs->fat.first_data_sec = self_fs->fat.bpb.rsvd_sec_cnt + self_fs->fat.bpb.fat_cnt * self_fs->fat.bpb.fat_sz;
    80202d7a:	02b7073b          	mulw	a4,a4,a1
    80202d7e:	9f31                	addw	a4,a4,a2
    80202d80:	00e92823          	sw	a4,16(s2)
    self_fs->fat.data_sec_cnt = self_fs->fat.bpb.tot_sec - self_fs->fat.first_data_sec;
    80202d84:	9f99                	subw	a5,a5,a4
    80202d86:	00f92a23          	sw	a5,20(s2)
    self_fs->fat.data_clus_cnt = self_fs->fat.data_sec_cnt / self_fs->fat.bpb.sec_per_clus;
    80202d8a:	02d7d7bb          	divuw	a5,a5,a3
    80202d8e:	00f92c23          	sw	a5,24(s2)
    self_fs->fat.byts_per_clus = self_fs->fat.bpb.sec_per_clus * self_fs->fat.bpb.byts_per_sec;
    80202d92:	02095783          	lhu	a5,32(s2)
    80202d96:	02d787bb          	mulw	a5,a5,a3
    80202d9a:	00f92e23          	sw	a5,28(s2)
    brelse(b);
    80202d9e:	8526                	mv	a0,s1
    80202da0:	ffffd097          	auipc	ra,0xffffd
    80202da4:	4c4080e7          	jalr	1220(ra) # 80200264 <brelse>
    if(!debug_output){
    80202da8:	0106b797          	auipc	a5,0x106b
    80202dac:	ec07a783          	lw	a5,-320(a5) # 8126dc68 <debug_output>
    80202db0:	12078363          	beqz	a5,80202ed6 <fat32_init+0x20a>
    debug_output = 1;
    80202db4:	4785                	li	a5,1
    80202db6:	0106b717          	auipc	a4,0x106b
    80202dba:	eaf72923          	sw	a5,-334(a4) # 8126dc68 <debug_output>
    if (BSIZE != self_fs->fat.bpb.byts_per_sec) 
    80202dbe:	02095703          	lhu	a4,32(s2)
    80202dc2:	20000793          	li	a5,512
    80202dc6:	18f71563          	bne	a4,a5,80202f50 <fat32_init+0x284>
    initlock(&self_fs->ecache.lock, "self_fs->ecache");
    80202dca:	00011597          	auipc	a1,0x11
    80202dce:	62658593          	addi	a1,a1,1574 # 802143f0 <rodata_start+0x3f0>
    80202dd2:	03890513          	addi	a0,s2,56
    80202dd6:	00006097          	auipc	ra,0x6
    80202dda:	0c0080e7          	jalr	192(ra) # 80208e96 <initlock>
    memset(&self_fs->root, 0, sizeof(self_fs->root));
    80202dde:	6495                	lui	s1,0x5
    80202de0:	83048993          	addi	s3,s1,-2000 # 4830 <_entry-0x801fb7d0>
    80202de4:	99ca                	add	s3,s3,s2
    80202de6:	17000613          	li	a2,368
    80202dea:	4581                	li	a1,0
    80202dec:	854e                	mv	a0,s3
    80202dee:	ffffe097          	auipc	ra,0xffffe
    80202df2:	f86080e7          	jalr	-122(ra) # 80200d74 <memset>
    initsleeplock(&self_fs->root.lock, "entry");
    80202df6:	97048513          	addi	a0,s1,-1680
    80202dfa:	00011597          	auipc	a1,0x11
    80202dfe:	60658593          	addi	a1,a1,1542 # 80214400 <rodata_start+0x400>
    80202e02:	954a                	add	a0,a0,s2
    80202e04:	00006097          	auipc	ra,0x6
    80202e08:	172080e7          	jalr	370(ra) # 80208f76 <initsleeplock>
    self_fs->root.attribute = (ATTR_DIRECTORY | ATTR_SYSTEM);
    80202e0c:	009907b3          	add	a5,s2,s1
    80202e10:	4751                	li	a4,20
    80202e12:	92e78823          	sb	a4,-1744(a5)
    self_fs->root.first_clus = self_fs->root.cur_clus = self_fs->fat.bpb.root_clus;
    80202e16:	03492703          	lw	a4,52(s2)
    80202e1a:	92e7ae23          	sw	a4,-1732(a5)
    80202e1e:	92e7aa23          	sw	a4,-1740(a5)
    self_fs->root.valid = 1;
    80202e22:	4705                	li	a4,1
    80202e24:	94e79323          	sh	a4,-1722(a5)
    self_fs->root.prev = &self_fs->root;
    80202e28:	9737b423          	sd	s3,-1688(a5)
    self_fs->root.next = &self_fs->root;
    80202e2c:	9737b023          	sd	s3,-1696(a5)
    self_fs->root.dev = self_fs->devno;
    80202e30:	00092703          	lw	a4,0(s2)
    80202e34:	94e78223          	sb	a4,-1724(a5)
    self_fs->root.parent = 0;
    80202e38:	9407bc23          	sd	zero,-1704(a5)
    for(struct dirent *de = self_fs->ecache.entries; de < self_fs->ecache.entries + ENTRY_CACHE_NUM; de++) {
    80202e3c:	05090493          	addi	s1,s2,80
    80202e40:	8ace                	mv	s5,s3
        de->next = self_fs->root.next;
    80202e42:	6795                	lui	a5,0x5
    80202e44:	993e                	add	s2,s2,a5
        initsleeplock(&de->lock, "entry");
    80202e46:	00011a17          	auipc	s4,0x11
    80202e4a:	5baa0a13          	addi	s4,s4,1466 # 80214400 <rodata_start+0x400>
        de->dev = 0;
    80202e4e:	10048a23          	sb	zero,276(s1)
        de->valid = 0;
    80202e52:	10049b23          	sh	zero,278(s1)
        de->ref = 0;
    80202e56:	1004ac23          	sw	zero,280(s1)
        de->dirty = 0;
    80202e5a:	10048aa3          	sb	zero,277(s1)
        de->mnt = 0;
    80202e5e:	1004ae23          	sw	zero,284(s1)
        de->parent = 0;
    80202e62:	1204b423          	sd	zero,296(s1)
        de->next = self_fs->root.next;
    80202e66:	96093783          	ld	a5,-1696(s2)
    80202e6a:	12f4b823          	sd	a5,304(s1)
        de->prev = &self_fs->root;
    80202e6e:	1334bc23          	sd	s3,312(s1)
        initsleeplock(&de->lock, "entry");
    80202e72:	85d2                	mv	a1,s4
    80202e74:	14048513          	addi	a0,s1,320
    80202e78:	00006097          	auipc	ra,0x6
    80202e7c:	0fe080e7          	jalr	254(ra) # 80208f76 <initsleeplock>
        self_fs->root.next->prev = de;
    80202e80:	96093783          	ld	a5,-1696(s2)
    80202e84:	1297bc23          	sd	s1,312(a5) # 5138 <_entry-0x801faec8>
        self_fs->root.next = de;
    80202e88:	96993023          	sd	s1,-1696(s2)
    for(struct dirent *de = self_fs->ecache.entries; de < self_fs->ecache.entries + ENTRY_CACHE_NUM; de++) {
    80202e8c:	17048493          	addi	s1,s1,368
    80202e90:	fb549fe3          	bne	s1,s5,80202e4e <fat32_init+0x182>
}
    80202e94:	855a                	mv	a0,s6
    80202e96:	70e2                	ld	ra,56(sp)
    80202e98:	7442                	ld	s0,48(sp)
    80202e9a:	74a2                	ld	s1,40(sp)
    80202e9c:	7902                	ld	s2,32(sp)
    80202e9e:	69e2                	ld	s3,24(sp)
    80202ea0:	6a42                	ld	s4,16(sp)
    80202ea2:	6aa2                	ld	s5,8(sp)
    80202ea4:	6b02                	ld	s6,0(sp)
    80202ea6:	6121                	addi	sp,sp,64
    80202ea8:	8082                	ret
      printf("[fat32_init]hart %d enter!\n",cpuid());
    80202eaa:	00009097          	auipc	ra,0x9
    80202eae:	4dc080e7          	jalr	1244(ra) # 8020c386 <cpuid>
    80202eb2:	85aa                	mv	a1,a0
    80202eb4:	00011517          	auipc	a0,0x11
    80202eb8:	42c50513          	addi	a0,a0,1068 # 802142e0 <rodata_start+0x2e0>
    80202ebc:	00006097          	auipc	ra,0x6
    80202ec0:	3d8080e7          	jalr	984(ra) # 80209294 <printf>
    80202ec4:	b52d                	j	80202cee <fat32_init+0x22>
        panic("not FAT32 volume");
    80202ec6:	00011517          	auipc	a0,0x11
    80202eca:	44250513          	addi	a0,a0,1090 # 80214308 <rodata_start+0x308>
    80202ece:	00006097          	auipc	ra,0x6
    80202ed2:	37c080e7          	jalr	892(ra) # 8020924a <panic>
      printf("[FAT32 init]byts_per_sec: %d\n", self_fs->fat.bpb.byts_per_sec);
    80202ed6:	02095583          	lhu	a1,32(s2)
    80202eda:	00011517          	auipc	a0,0x11
    80202ede:	44650513          	addi	a0,a0,1094 # 80214320 <rodata_start+0x320>
    80202ee2:	00006097          	auipc	ra,0x6
    80202ee6:	3b2080e7          	jalr	946(ra) # 80209294 <printf>
      printf("[FAT32 init]root_clus: %d\n", self_fs->fat.bpb.root_clus);
    80202eea:	03492583          	lw	a1,52(s2)
    80202eee:	00011517          	auipc	a0,0x11
    80202ef2:	45250513          	addi	a0,a0,1106 # 80214340 <rodata_start+0x340>
    80202ef6:	00006097          	auipc	ra,0x6
    80202efa:	39e080e7          	jalr	926(ra) # 80209294 <printf>
      printf("[FAT32 init]sec_per_clus: %d\n", self_fs->fat.bpb.sec_per_clus);
    80202efe:	02294583          	lbu	a1,34(s2)
    80202f02:	00011517          	auipc	a0,0x11
    80202f06:	45e50513          	addi	a0,a0,1118 # 80214360 <rodata_start+0x360>
    80202f0a:	00006097          	auipc	ra,0x6
    80202f0e:	38a080e7          	jalr	906(ra) # 80209294 <printf>
      printf("[FAT32 init]fat_cnt: %d\n", self_fs->fat.bpb.fat_cnt);
    80202f12:	02694583          	lbu	a1,38(s2)
    80202f16:	00011517          	auipc	a0,0x11
    80202f1a:	46a50513          	addi	a0,a0,1130 # 80214380 <rodata_start+0x380>
    80202f1e:	00006097          	auipc	ra,0x6
    80202f22:	376080e7          	jalr	886(ra) # 80209294 <printf>
      printf("[FAT32 init]fat_sz: %d\n", self_fs->fat.bpb.fat_sz);
    80202f26:	03092583          	lw	a1,48(s2)
    80202f2a:	00011517          	auipc	a0,0x11
    80202f2e:	47650513          	addi	a0,a0,1142 # 802143a0 <rodata_start+0x3a0>
    80202f32:	00006097          	auipc	ra,0x6
    80202f36:	362080e7          	jalr	866(ra) # 80209294 <printf>
      printf("[FAT32 init]first_data_sec: %d\n", self_fs->fat.first_data_sec);
    80202f3a:	01092583          	lw	a1,16(s2)
    80202f3e:	00011517          	auipc	a0,0x11
    80202f42:	47a50513          	addi	a0,a0,1146 # 802143b8 <rodata_start+0x3b8>
    80202f46:	00006097          	auipc	ra,0x6
    80202f4a:	34e080e7          	jalr	846(ra) # 80209294 <printf>
    80202f4e:	b59d                	j	80202db4 <fat32_init+0xe8>
        panic("byts_per_sec != BSIZE");
    80202f50:	00011517          	auipc	a0,0x11
    80202f54:	48850513          	addi	a0,a0,1160 # 802143d8 <rodata_start+0x3d8>
    80202f58:	00006097          	auipc	ra,0x6
    80202f5c:	2f2080e7          	jalr	754(ra) # 8020924a <panic>
    if(self_fs->valid)return -1;
    80202f60:	5b7d                	li	s6,-1
    80202f62:	bf0d                	j	80202e94 <fat32_init+0x1c8>

0000000080202f64 <fs_init>:
{
    80202f64:	1141                	addi	sp,sp,-16
    80202f66:	e406                	sd	ra,8(sp)
    80202f68:	e022                	sd	s0,0(sp)
    80202f6a:	0800                	addi	s0,sp,16
    debug_output = 0;
    80202f6c:	0106b797          	auipc	a5,0x106b
    80202f70:	ce07ae23          	sw	zero,-772(a5) # 8126dc68 <debug_output>
    for(int i=0;i<FSNUM;i++){
    80202f74:	01054797          	auipc	a5,0x1054
    80202f78:	c5c78793          	addi	a5,a5,-932 # 81256bd0 <FatFs>
    80202f7c:	4701                	li	a4,0
    80202f7e:	6695                	lui	a3,0x5
    80202f80:	9b868693          	addi	a3,a3,-1608 # 49b8 <_entry-0x801fb648>
    80202f84:	4615                	li	a2,5
      FatFs[i].valid = 0;
    80202f86:	0007a223          	sw	zero,4(a5)
      FatFs[i].devno = i;
    80202f8a:	c398                	sw	a4,0(a5)
      FatFs[i].image = NULL;
    80202f8c:	0007b423          	sd	zero,8(a5)
    for(int i=0;i<FSNUM;i++){
    80202f90:	2705                	addiw	a4,a4,1
    80202f92:	97b6                	add	a5,a5,a3
    80202f94:	fec719e3          	bne	a4,a2,80202f86 <fs_init+0x22>
    rootfs = FatFs;
    80202f98:	01054517          	auipc	a0,0x1054
    80202f9c:	c3850513          	addi	a0,a0,-968 # 81256bd0 <FatFs>
    80202fa0:	0106b797          	auipc	a5,0x106b
    80202fa4:	cca7b823          	sd	a0,-816(a5) # 8126dc70 <rootfs>
    FatFs[0].image = NULL;
    80202fa8:	00053423          	sd	zero,8(a0)
    FatFs[0].disk_init = (void*)disk_init;
    80202fac:	01059797          	auipc	a5,0x1059
    80202fb0:	c2478793          	addi	a5,a5,-988 # 8125bbd0 <FatFs+0x5000>
    80202fb4:	ffffe717          	auipc	a4,0xffffe
    80202fb8:	d5270713          	addi	a4,a4,-686 # 80200d06 <disk_init>
    80202fbc:	9ae7b023          	sd	a4,-1632(a5)
    FatFs[0].disk_read = (void*)vdisk_read;
    80202fc0:	ffffe717          	auipc	a4,0xffffe
    80202fc4:	d7470713          	addi	a4,a4,-652 # 80200d34 <vdisk_read>
    80202fc8:	9ae7b423          	sd	a4,-1624(a5)
    FatFs[0].disk_write = (void*)vdisk_write;
    80202fcc:	ffffe717          	auipc	a4,0xffffe
    80202fd0:	d8270713          	addi	a4,a4,-638 # 80200d4e <vdisk_write>
    80202fd4:	9ae7b823          	sd	a4,-1616(a5)
    FatFs[0].devno = 0;
    80202fd8:	00052023          	sw	zero,0(a0)
    return fat32_init(&FatFs[0]);
    80202fdc:	00000097          	auipc	ra,0x0
    80202fe0:	cf0080e7          	jalr	-784(ra) # 80202ccc <fat32_init>
}
    80202fe4:	60a2                	ld	ra,8(sp)
    80202fe6:	6402                	ld	s0,0(sp)
    80202fe8:	0141                	addi	sp,sp,16
    80202fea:	8082                	ret

0000000080202fec <allocFatFs>:
int allocFatFs(){
    80202fec:	1141                	addi	sp,sp,-16
    80202fee:	e422                	sd	s0,8(sp)
    80202ff0:	0800                	addi	s0,sp,16
   for(int i=0;i<FSNUM;i++){
    80202ff2:	01054797          	auipc	a5,0x1054
    80202ff6:	be278793          	addi	a5,a5,-1054 # 81256bd4 <FatFs+0x4>
    80202ffa:	4501                	li	a0,0
    80202ffc:	6695                	lui	a3,0x5
    80202ffe:	9b868693          	addi	a3,a3,-1608 # 49b8 <_entry-0x801fb648>
    80203002:	4615                	li	a2,5
     if(!FatFs[i].valid){
    80203004:	4398                	lw	a4,0(a5)
    80203006:	c711                	beqz	a4,80203012 <allocFatFs+0x26>
   for(int i=0;i<FSNUM;i++){
    80203008:	2505                	addiw	a0,a0,1
    8020300a:	97b6                	add	a5,a5,a3
    8020300c:	fec51ce3          	bne	a0,a2,80203004 <allocFatFs+0x18>
   return -1;
    80203010:	557d                	li	a0,-1
}
    80203012:	6422                	ld	s0,8(sp)
    80203014:	0141                	addi	sp,sp,16
    80203016:	8082                	ret

0000000080203018 <fat32_img>:
struct fs* fat32_img(struct dirent* img){
    80203018:	1101                	addi	sp,sp,-32
    8020301a:	ec06                	sd	ra,24(sp)
    8020301c:	e822                	sd	s0,16(sp)
    8020301e:	e426                	sd	s1,8(sp)
    80203020:	1000                	addi	s0,sp,32
    80203022:	84aa                	mv	s1,a0
   int devno = allocFatFs();
    80203024:	00000097          	auipc	ra,0x0
    80203028:	fc8080e7          	jalr	-56(ra) # 80202fec <allocFatFs>
   if(devno<0)return NULL;
    8020302c:	04054d63          	bltz	a0,80203086 <fat32_img+0x6e>
   FatFs[devno].image = img;
    80203030:	6695                	lui	a3,0x5
    80203032:	9b868793          	addi	a5,a3,-1608 # 49b8 <_entry-0x801fb648>
    80203036:	02f507b3          	mul	a5,a0,a5
    8020303a:	01054717          	auipc	a4,0x1054
    8020303e:	b9670713          	addi	a4,a4,-1130 # 81256bd0 <FatFs>
    80203042:	00f70533          	add	a0,a4,a5
    80203046:	e504                	sd	s1,8(a0)
   FatFs[devno].disk_init = image_init;
    80203048:	00a687b3          	add	a5,a3,a0
    8020304c:	ffffe717          	auipc	a4,0xffffe
    80203050:	06270713          	addi	a4,a4,98 # 802010ae <image_init>
    80203054:	9ae7b023          	sd	a4,-1632(a5)
   FatFs[devno].disk_read = image_read;
    80203058:	ffffe717          	auipc	a4,0xffffe
    8020305c:	08c70713          	addi	a4,a4,140 # 802010e4 <image_read>
    80203060:	9ae7b423          	sd	a4,-1624(a5)
   FatFs[devno].disk_write = image_write;
    80203064:	ffffe717          	auipc	a4,0xffffe
    80203068:	0e670713          	addi	a4,a4,230 # 8020114a <image_write>
    8020306c:	9ae7b823          	sd	a4,-1616(a5)
   fat32_init(FatFs+devno);
    80203070:	84aa                	mv	s1,a0
    80203072:	00000097          	auipc	ra,0x0
    80203076:	c5a080e7          	jalr	-934(ra) # 80202ccc <fat32_init>
}
    8020307a:	8526                	mv	a0,s1
    8020307c:	60e2                	ld	ra,24(sp)
    8020307e:	6442                	ld	s0,16(sp)
    80203080:	64a2                	ld	s1,8(sp)
    80203082:	6105                	addi	sp,sp,32
    80203084:	8082                	ret
   if(devno<0)return NULL;
    80203086:	4481                	li	s1,0
    80203088:	bfcd                	j	8020307a <fat32_img+0x62>

000000008020308a <eread>:
    if (off > entry->file_size || off + n < off || (entry->attribute & ATTR_DIRECTORY)) {
    8020308a:	10852783          	lw	a5,264(a0)
    8020308e:	10d7e763          	bltu	a5,a3,8020319c <eread+0x112>
{
    80203092:	7159                	addi	sp,sp,-112
    80203094:	f486                	sd	ra,104(sp)
    80203096:	f0a2                	sd	s0,96(sp)
    80203098:	eca6                	sd	s1,88(sp)
    8020309a:	e8ca                	sd	s2,80(sp)
    8020309c:	e4ce                	sd	s3,72(sp)
    8020309e:	e0d2                	sd	s4,64(sp)
    802030a0:	fc56                	sd	s5,56(sp)
    802030a2:	f85a                	sd	s6,48(sp)
    802030a4:	f45e                	sd	s7,40(sp)
    802030a6:	f062                	sd	s8,32(sp)
    802030a8:	ec66                	sd	s9,24(sp)
    802030aa:	e86a                	sd	s10,16(sp)
    802030ac:	e46e                	sd	s11,8(sp)
    802030ae:	1880                	addi	s0,sp,112
    802030b0:	8a2a                	mv	s4,a0
    802030b2:	8c2e                	mv	s8,a1
    802030b4:	8ab2                	mv	s5,a2
    802030b6:	8936                	mv	s2,a3
    802030b8:	8b3a                	mv	s6,a4
    if (off > entry->file_size || off + n < off || (entry->attribute & ATTR_DIRECTORY)) {
    802030ba:	9eb9                	addw	a3,a3,a4
        return 0;
    802030bc:	4501                	li	a0,0
    if (off > entry->file_size || off + n < off || (entry->attribute & ATTR_DIRECTORY)) {
    802030be:	0b26ee63          	bltu	a3,s2,8020317a <eread+0xf0>
    802030c2:	100a4703          	lbu	a4,256(s4)
    802030c6:	8b41                	andi	a4,a4,16
    802030c8:	eb4d                	bnez	a4,8020317a <eread+0xf0>
    if (off + n > entry->file_size) {
    802030ca:	00d7f463          	bgeu	a5,a3,802030d2 <eread+0x48>
        n = entry->file_size - off;
    802030ce:	41278b3b          	subw	s6,a5,s2
    for (tot = 0; entry->cur_clus < FAT32_EOC && tot < n; tot += m, off += m, dst += m) {
    802030d2:	10ca2703          	lw	a4,268(s4)
    802030d6:	100007b7          	lui	a5,0x10000
    802030da:	17dd                	addi	a5,a5,-9
    802030dc:	08e7ec63          	bltu	a5,a4,80203174 <eread+0xea>
    802030e0:	0a0b0c63          	beqz	s6,80203198 <eread+0x10e>
    struct fs * self_fs = &FatFs[entry->dev];
    802030e4:	114a4c83          	lbu	s9,276(s4)
    802030e8:	6b95                	lui	s7,0x5
    802030ea:	9b8b8b93          	addi	s7,s7,-1608 # 49b8 <_entry-0x801fb648>
    802030ee:	037c8bb3          	mul	s7,s9,s7
    802030f2:	01054797          	auipc	a5,0x1054
    802030f6:	ade78793          	addi	a5,a5,-1314 # 81256bd0 <FatFs>
    802030fa:	9bbe                	add	s7,s7,a5
    for (tot = 0; entry->cur_clus < FAT32_EOC && tot < n; tot += m, off += m, dst += m) {
    802030fc:	4981                	li	s3,0
        m = self_fs->fat.byts_per_clus - off % self_fs->fat.byts_per_clus;
    802030fe:	8cde                	mv	s9,s7
    for (tot = 0; entry->cur_clus < FAT32_EOC && tot < n; tot += m, off += m, dst += m) {
    80203100:	10000d37          	lui	s10,0x10000
    80203104:	1d5d                	addi	s10,s10,-9
    80203106:	a835                	j	80203142 <eread+0xb8>
    80203108:	00048d9b          	sext.w	s11,s1
        if (rw_clus(self_fs, entry->cur_clus, 0, user_dst, dst, off % self_fs->fat.byts_per_clus, m) != m) {
    8020310c:	886e                	mv	a6,s11
    8020310e:	8756                	mv	a4,s5
    80203110:	86e2                	mv	a3,s8
    80203112:	4601                	li	a2,0
    80203114:	10ca2583          	lw	a1,268(s4)
    80203118:	855e                	mv	a0,s7
    8020311a:	00000097          	auipc	ra,0x0
    8020311e:	812080e7          	jalr	-2030(ra) # 8020292c <rw_clus>
    80203122:	2501                	sext.w	a0,a0
    80203124:	04ad9963          	bne	s11,a0,80203176 <eread+0xec>
    for (tot = 0; entry->cur_clus < FAT32_EOC && tot < n; tot += m, off += m, dst += m) {
    80203128:	013489bb          	addw	s3,s1,s3
    8020312c:	0124893b          	addw	s2,s1,s2
    80203130:	1482                	slli	s1,s1,0x20
    80203132:	9081                	srli	s1,s1,0x20
    80203134:	9aa6                	add	s5,s5,s1
    80203136:	10ca2783          	lw	a5,268(s4)
    8020313a:	02fd6e63          	bltu	s10,a5,80203176 <eread+0xec>
    8020313e:	0369fc63          	bgeu	s3,s6,80203176 <eread+0xec>
        reloc_clus(self_fs, entry, off, 0);
    80203142:	4681                	li	a3,0
    80203144:	864a                	mv	a2,s2
    80203146:	85d2                	mv	a1,s4
    80203148:	855e                	mv	a0,s7
    8020314a:	fffff097          	auipc	ra,0xfffff
    8020314e:	6d2080e7          	jalr	1746(ra) # 8020281c <reloc_clus>
        m = self_fs->fat.byts_per_clus - off % self_fs->fat.byts_per_clus;
    80203152:	01cca703          	lw	a4,28(s9)
    80203156:	02e976bb          	remuw	a3,s2,a4
    8020315a:	0006879b          	sext.w	a5,a3
    8020315e:	9f15                	subw	a4,a4,a3
        if (n - tot < m) {
    80203160:	413b06bb          	subw	a3,s6,s3
    80203164:	84b6                	mv	s1,a3
    80203166:	2681                	sext.w	a3,a3
    80203168:	0007061b          	sext.w	a2,a4
    8020316c:	f8d67ee3          	bgeu	a2,a3,80203108 <eread+0x7e>
    80203170:	84ba                	mv	s1,a4
    80203172:	bf59                	j	80203108 <eread+0x7e>
    for (tot = 0; entry->cur_clus < FAT32_EOC && tot < n; tot += m, off += m, dst += m) {
    80203174:	4981                	li	s3,0
    return tot;
    80203176:	0009851b          	sext.w	a0,s3
}
    8020317a:	70a6                	ld	ra,104(sp)
    8020317c:	7406                	ld	s0,96(sp)
    8020317e:	64e6                	ld	s1,88(sp)
    80203180:	6946                	ld	s2,80(sp)
    80203182:	69a6                	ld	s3,72(sp)
    80203184:	6a06                	ld	s4,64(sp)
    80203186:	7ae2                	ld	s5,56(sp)
    80203188:	7b42                	ld	s6,48(sp)
    8020318a:	7ba2                	ld	s7,40(sp)
    8020318c:	7c02                	ld	s8,32(sp)
    8020318e:	6ce2                	ld	s9,24(sp)
    80203190:	6d42                	ld	s10,16(sp)
    80203192:	6da2                	ld	s11,8(sp)
    80203194:	6165                	addi	sp,sp,112
    80203196:	8082                	ret
    for (tot = 0; entry->cur_clus < FAT32_EOC && tot < n; tot += m, off += m, dst += m) {
    80203198:	89da                	mv	s3,s6
    8020319a:	bff1                	j	80203176 <eread+0xec>
        return 0;
    8020319c:	4501                	li	a0,0
}
    8020319e:	8082                	ret

00000000802031a0 <ewrite>:
{
    802031a0:	711d                	addi	sp,sp,-96
    802031a2:	ec86                	sd	ra,88(sp)
    802031a4:	e8a2                	sd	s0,80(sp)
    802031a6:	e4a6                	sd	s1,72(sp)
    802031a8:	e0ca                	sd	s2,64(sp)
    802031aa:	fc4e                	sd	s3,56(sp)
    802031ac:	f852                	sd	s4,48(sp)
    802031ae:	f456                	sd	s5,40(sp)
    802031b0:	f05a                	sd	s6,32(sp)
    802031b2:	ec5e                	sd	s7,24(sp)
    802031b4:	e862                	sd	s8,16(sp)
    802031b6:	e466                	sd	s9,8(sp)
    802031b8:	e06a                	sd	s10,0(sp)
    802031ba:	1080                	addi	s0,sp,96
    802031bc:	8c2e                	mv	s8,a1
    struct fs * self_fs = &FatFs[entry->dev];
    802031be:	11454583          	lbu	a1,276(a0)
    802031c2:	6b15                	lui	s6,0x5
    802031c4:	9b8b0b13          	addi	s6,s6,-1608 # 49b8 <_entry-0x801fb648>
    802031c8:	03658b33          	mul	s6,a1,s6
    802031cc:	01054797          	auipc	a5,0x1054
    802031d0:	a0478793          	addi	a5,a5,-1532 # 81256bd0 <FatFs>
    802031d4:	9b3e                	add	s6,s6,a5
    if (off > entry->file_size || off + n < off || (uint64)off + n > 0xffffffff
    802031d6:	10852783          	lw	a5,264(a0)
    802031da:	0ed7e063          	bltu	a5,a3,802032ba <ewrite+0x11a>
    802031de:	8aaa                	mv	s5,a0
    802031e0:	8a32                	mv	s4,a2
    802031e2:	8936                	mv	s2,a3
    802031e4:	8bba                	mv	s7,a4
    802031e6:	00058c9b          	sext.w	s9,a1
    802031ea:	00e687bb          	addw	a5,a3,a4
    802031ee:	0cd7e863          	bltu	a5,a3,802032be <ewrite+0x11e>
    802031f2:	02069793          	slli	a5,a3,0x20
    802031f6:	9381                	srli	a5,a5,0x20
    802031f8:	1702                	slli	a4,a4,0x20
    802031fa:	9301                	srli	a4,a4,0x20
    802031fc:	97ba                	add	a5,a5,a4
    802031fe:	577d                	li	a4,-1
    80203200:	9301                	srli	a4,a4,0x20
    80203202:	0cf76063          	bltu	a4,a5,802032c2 <ewrite+0x122>
        || (entry->attribute & ATTR_READ_ONLY)) {
    80203206:	10054783          	lbu	a5,256(a0)
    8020320a:	8b85                	andi	a5,a5,1
    8020320c:	efcd                	bnez	a5,802032c6 <ewrite+0x126>
    if (entry->first_clus == 0) {   // so file_size if 0 too, which requests off == 0
    8020320e:	10452783          	lw	a5,260(a0)
    80203212:	cf99                	beqz	a5,80203230 <ewrite+0x90>
    for (tot = 0; tot < n; tot += m, off += m, src += m) {
    80203214:	0a0b8163          	beqz	s7,802032b6 <ewrite+0x116>
    80203218:	4981                	li	s3,0
        m = self_fs->fat.byts_per_clus - off % self_fs->fat.byts_per_clus;
    8020321a:	6795                	lui	a5,0x5
    8020321c:	9b878793          	addi	a5,a5,-1608 # 49b8 <_entry-0x801fb648>
    80203220:	02fc8cb3          	mul	s9,s9,a5
    80203224:	01054797          	auipc	a5,0x1054
    80203228:	9ac78793          	addi	a5,a5,-1620 # 81256bd0 <FatFs>
    8020322c:	9cbe                	add	s9,s9,a5
    8020322e:	a891                	j	80203282 <ewrite+0xe2>
        entry->cur_clus = entry->first_clus = alloc_clus(self_fs, entry->dev);
    80203230:	855a                	mv	a0,s6
    80203232:	fffff097          	auipc	ra,0xfffff
    80203236:	44a080e7          	jalr	1098(ra) # 8020267c <alloc_clus>
    8020323a:	2501                	sext.w	a0,a0
    8020323c:	10aaa223          	sw	a0,260(s5)
    80203240:	10aaa623          	sw	a0,268(s5)
        entry->clus_cnt = 0;
    80203244:	100aa823          	sw	zero,272(s5)
        entry->dirty = 1;
    80203248:	4785                	li	a5,1
    8020324a:	10fa8aa3          	sb	a5,277(s5)
    8020324e:	b7d9                	j	80203214 <ewrite+0x74>
    80203250:	00048d1b          	sext.w	s10,s1
        if (rw_clus(self_fs, entry->cur_clus, 1, user_src, src, off % self_fs->fat.byts_per_clus, m) != m) {
    80203254:	886a                	mv	a6,s10
    80203256:	8752                	mv	a4,s4
    80203258:	86e2                	mv	a3,s8
    8020325a:	4605                	li	a2,1
    8020325c:	10caa583          	lw	a1,268(s5)
    80203260:	855a                	mv	a0,s6
    80203262:	fffff097          	auipc	ra,0xfffff
    80203266:	6ca080e7          	jalr	1738(ra) # 8020292c <rw_clus>
    8020326a:	2501                	sext.w	a0,a0
    8020326c:	04ad1f63          	bne	s10,a0,802032ca <ewrite+0x12a>
    for (tot = 0; tot < n; tot += m, off += m, src += m) {
    80203270:	013489bb          	addw	s3,s1,s3
    80203274:	0124893b          	addw	s2,s1,s2
    80203278:	1482                	slli	s1,s1,0x20
    8020327a:	9081                	srli	s1,s1,0x20
    8020327c:	9a26                	add	s4,s4,s1
    8020327e:	0579f663          	bgeu	s3,s7,802032ca <ewrite+0x12a>
        reloc_clus(self_fs, entry, off, 1);
    80203282:	4685                	li	a3,1
    80203284:	864a                	mv	a2,s2
    80203286:	85d6                	mv	a1,s5
    80203288:	855a                	mv	a0,s6
    8020328a:	fffff097          	auipc	ra,0xfffff
    8020328e:	592080e7          	jalr	1426(ra) # 8020281c <reloc_clus>
        m = self_fs->fat.byts_per_clus - off % self_fs->fat.byts_per_clus;
    80203292:	01cca803          	lw	a6,28(s9)
    80203296:	0309773b          	remuw	a4,s2,a6
    8020329a:	0007079b          	sext.w	a5,a4
    8020329e:	40e8083b          	subw	a6,a6,a4
        if (n - tot < m) {
    802032a2:	413b873b          	subw	a4,s7,s3
    802032a6:	84ba                	mv	s1,a4
    802032a8:	2701                	sext.w	a4,a4
    802032aa:	0008069b          	sext.w	a3,a6
    802032ae:	fae6f1e3          	bgeu	a3,a4,80203250 <ewrite+0xb0>
    802032b2:	84c2                	mv	s1,a6
    802032b4:	bf71                	j	80203250 <ewrite+0xb0>
    for (tot = 0; tot < n; tot += m, off += m, src += m) {
    802032b6:	89de                	mv	s3,s7
    802032b8:	a015                	j	802032dc <ewrite+0x13c>
        return -1;
    802032ba:	557d                	li	a0,-1
    802032bc:	a015                	j	802032e0 <ewrite+0x140>
    802032be:	557d                	li	a0,-1
    802032c0:	a005                	j	802032e0 <ewrite+0x140>
    802032c2:	557d                	li	a0,-1
    802032c4:	a831                	j	802032e0 <ewrite+0x140>
    802032c6:	557d                	li	a0,-1
    802032c8:	a821                	j	802032e0 <ewrite+0x140>
        if(off > entry->file_size) {
    802032ca:	108aa783          	lw	a5,264(s5)
    802032ce:	0127f763          	bgeu	a5,s2,802032dc <ewrite+0x13c>
            entry->file_size = off;
    802032d2:	112aa423          	sw	s2,264(s5)
            entry->dirty = 1;
    802032d6:	4785                	li	a5,1
    802032d8:	10fa8aa3          	sb	a5,277(s5)
    return tot;
    802032dc:	0009851b          	sext.w	a0,s3
}
    802032e0:	60e6                	ld	ra,88(sp)
    802032e2:	6446                	ld	s0,80(sp)
    802032e4:	64a6                	ld	s1,72(sp)
    802032e6:	6906                	ld	s2,64(sp)
    802032e8:	79e2                	ld	s3,56(sp)
    802032ea:	7a42                	ld	s4,48(sp)
    802032ec:	7aa2                	ld	s5,40(sp)
    802032ee:	7b02                	ld	s6,32(sp)
    802032f0:	6be2                	ld	s7,24(sp)
    802032f2:	6c42                	ld	s8,16(sp)
    802032f4:	6ca2                	ld	s9,8(sp)
    802032f6:	6d02                	ld	s10,0(sp)
    802032f8:	6125                	addi	sp,sp,96
    802032fa:	8082                	ret

00000000802032fc <formatname>:
{
    802032fc:	7179                	addi	sp,sp,-48
    802032fe:	f406                	sd	ra,40(sp)
    80203300:	f022                	sd	s0,32(sp)
    80203302:	ec26                	sd	s1,24(sp)
    80203304:	e84a                	sd	s2,16(sp)
    80203306:	e44e                	sd	s3,8(sp)
    80203308:	e052                	sd	s4,0(sp)
    8020330a:	1800                	addi	s0,sp,48
    8020330c:	84aa                	mv	s1,a0
    while (*name == ' ' || *name == '.') { name++; }
    8020330e:	02000793          	li	a5,32
    80203312:	02e00713          	li	a4,46
    80203316:	a011                	j	8020331a <formatname+0x1e>
    80203318:	0485                	addi	s1,s1,1
    8020331a:	0004c583          	lbu	a1,0(s1)
    8020331e:	fef58de3          	beq	a1,a5,80203318 <formatname+0x1c>
    80203322:	fee58be3          	beq	a1,a4,80203318 <formatname+0x1c>
    for (p = name; *p; p++) {
    80203326:	c1b9                	beqz	a1,8020336c <formatname+0x70>
    80203328:	8926                	mv	s2,s1
        if (c < 0x20 || strchr(illegal, c)) {
    8020332a:	49fd                	li	s3,31
    8020332c:	01015a17          	auipc	s4,0x1015
    80203330:	cdca0a13          	addi	s4,s4,-804 # 81218008 <illegal.2614>
    80203334:	02b9fe63          	bgeu	s3,a1,80203370 <formatname+0x74>
    80203338:	8552                	mv	a0,s4
    8020333a:	ffffe097          	auipc	ra,0xffffe
    8020333e:	ca4080e7          	jalr	-860(ra) # 80200fde <strchr>
    80203342:	e121                	bnez	a0,80203382 <formatname+0x86>
    for (p = name; *p; p++) {
    80203344:	0905                	addi	s2,s2,1
    80203346:	00094583          	lbu	a1,0(s2)
    8020334a:	f5ed                	bnez	a1,80203334 <formatname+0x38>
        if (*p != ' ') {
    8020334c:	02000693          	li	a3,32
    80203350:	874a                	mv	a4,s2
    while (p-- > name) {
    80203352:	0124fb63          	bgeu	s1,s2,80203368 <formatname+0x6c>
        if (*p != ' ') {
    80203356:	197d                	addi	s2,s2,-1
    80203358:	00094783          	lbu	a5,0(s2)
    8020335c:	fed78ae3          	beq	a5,a3,80203350 <formatname+0x54>
            p[1] = '\0';
    80203360:	00070023          	sb	zero,0(a4)
            break;
    80203364:	8526                	mv	a0,s1
    80203366:	a031                	j	80203372 <formatname+0x76>
    80203368:	8526                	mv	a0,s1
    8020336a:	a021                	j	80203372 <formatname+0x76>
    for (p = name; *p; p++) {
    8020336c:	8526                	mv	a0,s1
    8020336e:	a011                	j	80203372 <formatname+0x76>
            return 0;
    80203370:	4501                	li	a0,0
}
    80203372:	70a2                	ld	ra,40(sp)
    80203374:	7402                	ld	s0,32(sp)
    80203376:	64e2                	ld	s1,24(sp)
    80203378:	6942                	ld	s2,16(sp)
    8020337a:	69a2                	ld	s3,8(sp)
    8020337c:	6a02                	ld	s4,0(sp)
    8020337e:	6145                	addi	sp,sp,48
    80203380:	8082                	ret
            return 0;
    80203382:	4501                	li	a0,0
    80203384:	b7fd                	j	80203372 <formatname+0x76>

0000000080203386 <cal_checksum>:
{
    80203386:	1141                	addi	sp,sp,-16
    80203388:	e422                	sd	s0,8(sp)
    8020338a:	0800                	addi	s0,sp,16
    8020338c:	87aa                	mv	a5,a0
    for (int i = CHAR_SHORT_NAME; i != 0; i--) {
    8020338e:	00b50613          	addi	a2,a0,11
    uint8 sum = 0;
    80203392:	4501                	li	a0,0
        sum = ((sum & 1) ? 0x80 : 0) + (sum >> 1) + *shortname++;
    80203394:	0075171b          	slliw	a4,a0,0x7
    80203398:	0785                	addi	a5,a5,1
    8020339a:	0015551b          	srliw	a0,a0,0x1
    8020339e:	fff7c683          	lbu	a3,-1(a5)
    802033a2:	9d35                	addw	a0,a0,a3
    802033a4:	953a                	add	a0,a0,a4
    802033a6:	0ff57513          	andi	a0,a0,255
    for (int i = CHAR_SHORT_NAME; i != 0; i--) {
    802033aa:	fef615e3          	bne	a2,a5,80203394 <cal_checksum+0xe>
}
    802033ae:	6422                	ld	s0,8(sp)
    802033b0:	0141                	addi	sp,sp,16
    802033b2:	8082                	ret

00000000802033b4 <emake>:
{
    802033b4:	7171                	addi	sp,sp,-176
    802033b6:	f506                	sd	ra,168(sp)
    802033b8:	f122                	sd	s0,160(sp)
    802033ba:	ed26                	sd	s1,152(sp)
    802033bc:	e94a                	sd	s2,144(sp)
    802033be:	e54e                	sd	s3,136(sp)
    802033c0:	e152                	sd	s4,128(sp)
    802033c2:	fcd6                	sd	s5,120(sp)
    802033c4:	f8da                	sd	s6,112(sp)
    802033c6:	f4de                	sd	s7,104(sp)
    802033c8:	f0e2                	sd	s8,96(sp)
    802033ca:	ece6                	sd	s9,88(sp)
    802033cc:	e8ea                	sd	s10,80(sp)
    802033ce:	e4ee                	sd	s11,72(sp)
    802033d0:	1900                	addi	s0,sp,176
    802033d2:	89aa                	mv	s3,a0
    802033d4:	8cae                	mv	s9,a1
    802033d6:	8c32                	mv	s8,a2
    if(dp->mnt) dp = &(FatFs[dp->dev].root);
    802033d8:	11c52783          	lw	a5,284(a0)
    802033dc:	c385                	beqz	a5,802033fc <emake+0x48>
    802033de:	11454983          	lbu	s3,276(a0)
    802033e2:	6795                	lui	a5,0x5
    802033e4:	9b878713          	addi	a4,a5,-1608 # 49b8 <_entry-0x801fb648>
    802033e8:	02e989b3          	mul	s3,s3,a4
    802033ec:	83078793          	addi	a5,a5,-2000
    802033f0:	99be                	add	s3,s3,a5
    802033f2:	01053797          	auipc	a5,0x1053
    802033f6:	7de78793          	addi	a5,a5,2014 # 81256bd0 <FatFs>
    802033fa:	99be                	add	s3,s3,a5
    struct fs * self_fs = &FatFs[dp->dev];
    802033fc:	1149ca83          	lbu	s5,276(s3)
    80203400:	6795                	lui	a5,0x5
    80203402:	9b878793          	addi	a5,a5,-1608 # 49b8 <_entry-0x801fb648>
    80203406:	02fa8ab3          	mul	s5,s5,a5
    8020340a:	01053797          	auipc	a5,0x1053
    8020340e:	7c678793          	addi	a5,a5,1990 # 81256bd0 <FatFs>
    80203412:	9abe                	add	s5,s5,a5
    if (!(dp->attribute & ATTR_DIRECTORY))
    80203414:	1009c783          	lbu	a5,256(s3)
    80203418:	8bc1                	andi	a5,a5,16
    8020341a:	c3cd                	beqz	a5,802034bc <emake+0x108>
    if (off % sizeof(union dentry))
    8020341c:	01fc7793          	andi	a5,s8,31
    80203420:	e7d5                	bnez	a5,802034cc <emake+0x118>
    memset(&de, 0, sizeof(de));
    80203422:	02000613          	li	a2,32
    80203426:	4581                	li	a1,0
    80203428:	f7040513          	addi	a0,s0,-144
    8020342c:	ffffe097          	auipc	ra,0xffffe
    80203430:	948080e7          	jalr	-1720(ra) # 80200d74 <memset>
    if (off <= 32) {
    80203434:	02000793          	li	a5,32
    80203438:	0b87ee63          	bltu	a5,s8,802034f4 <emake+0x140>
        if (off == 0) {
    8020343c:	0a0c1063          	bnez	s8,802034dc <emake+0x128>
            strncpy(de.sne.name, ".          ", sizeof(de.sne.name));
    80203440:	462d                	li	a2,11
    80203442:	00011597          	auipc	a1,0x11
    80203446:	fee58593          	addi	a1,a1,-18 # 80214430 <rodata_start+0x430>
    8020344a:	f7040513          	addi	a0,s0,-144
    8020344e:	ffffe097          	auipc	ra,0xffffe
    80203452:	a3e080e7          	jalr	-1474(ra) # 80200e8c <strncpy>
        de.sne.attr = ATTR_DIRECTORY;
    80203456:	47c1                	li	a5,16
    80203458:	f6f40da3          	sb	a5,-133(s0)
        de.sne.fst_clus_hi = (uint16)(ep->first_clus >> 16);        // first clus high 16 bits
    8020345c:	104ca783          	lw	a5,260(s9)
    80203460:	0107d71b          	srliw	a4,a5,0x10
    80203464:	f8e41223          	sh	a4,-124(s0)
        de.sne.fst_clus_lo = (uint16)(ep->first_clus & 0xffff);       // low 16 bits
    80203468:	f8f41523          	sh	a5,-118(s0)
        de.sne.file_size = 0;                                       // filesize is updated in eupdate()
    8020346c:	f8042623          	sw	zero,-116(s0)
        off = reloc_clus(self_fs, dp, off, 1);
    80203470:	4685                	li	a3,1
    80203472:	8662                	mv	a2,s8
    80203474:	85ce                	mv	a1,s3
    80203476:	8556                	mv	a0,s5
    80203478:	fffff097          	auipc	ra,0xfffff
    8020347c:	3a4080e7          	jalr	932(ra) # 8020281c <reloc_clus>
        rw_clus(self_fs, dp->cur_clus, 1, 0, (uint64)&de, off, sizeof(de));
    80203480:	02000813          	li	a6,32
    80203484:	0005079b          	sext.w	a5,a0
    80203488:	f7040713          	addi	a4,s0,-144
    8020348c:	4681                	li	a3,0
    8020348e:	4605                	li	a2,1
    80203490:	10c9a583          	lw	a1,268(s3)
    80203494:	8556                	mv	a0,s5
    80203496:	fffff097          	auipc	ra,0xfffff
    8020349a:	496080e7          	jalr	1174(ra) # 8020292c <rw_clus>
}
    8020349e:	70aa                	ld	ra,168(sp)
    802034a0:	740a                	ld	s0,160(sp)
    802034a2:	64ea                	ld	s1,152(sp)
    802034a4:	694a                	ld	s2,144(sp)
    802034a6:	69aa                	ld	s3,136(sp)
    802034a8:	6a0a                	ld	s4,128(sp)
    802034aa:	7ae6                	ld	s5,120(sp)
    802034ac:	7b46                	ld	s6,112(sp)
    802034ae:	7ba6                	ld	s7,104(sp)
    802034b0:	7c06                	ld	s8,96(sp)
    802034b2:	6ce6                	ld	s9,88(sp)
    802034b4:	6d46                	ld	s10,80(sp)
    802034b6:	6da6                	ld	s11,72(sp)
    802034b8:	614d                	addi	sp,sp,176
    802034ba:	8082                	ret
        panic("emake: not dir");
    802034bc:	00011517          	auipc	a0,0x11
    802034c0:	f4c50513          	addi	a0,a0,-180 # 80214408 <rodata_start+0x408>
    802034c4:	00006097          	auipc	ra,0x6
    802034c8:	d86080e7          	jalr	-634(ra) # 8020924a <panic>
        panic("emake: not aligned");
    802034cc:	00011517          	auipc	a0,0x11
    802034d0:	f4c50513          	addi	a0,a0,-180 # 80214418 <rodata_start+0x418>
    802034d4:	00006097          	auipc	ra,0x6
    802034d8:	d76080e7          	jalr	-650(ra) # 8020924a <panic>
            strncpy(de.sne.name, "..         ", sizeof(de.sne.name));
    802034dc:	462d                	li	a2,11
    802034de:	00011597          	auipc	a1,0x11
    802034e2:	f6258593          	addi	a1,a1,-158 # 80214440 <rodata_start+0x440>
    802034e6:	f7040513          	addi	a0,s0,-144
    802034ea:	ffffe097          	auipc	ra,0xffffe
    802034ee:	9a2080e7          	jalr	-1630(ra) # 80200e8c <strncpy>
    802034f2:	b795                	j	80203456 <emake+0xa2>
        int entcnt = (strlen(ep->filename) + CHAR_LONG_NAME - 1) / CHAR_LONG_NAME;   // count of l-n-entries, rounds up
    802034f4:	8966                	mv	s2,s9
    802034f6:	8566                	mv	a0,s9
    802034f8:	ffffe097          	auipc	ra,0xffffe
    802034fc:	a04080e7          	jalr	-1532(ra) # 80200efc <strlen>
    80203500:	f4a43c23          	sd	a0,-168(s0)
    80203504:	00c5071b          	addiw	a4,a0,12
    80203508:	47b5                	li	a5,13
    8020350a:	02f747bb          	divw	a5,a4,a5
    8020350e:	f4f42a23          	sw	a5,-172(s0)
    80203512:	00078d9b          	sext.w	s11,a5
        memset(shortname, 0, sizeof(shortname));
    80203516:	4631                	li	a2,12
    80203518:	4581                	li	a1,0
    8020351a:	f6040513          	addi	a0,s0,-160
    8020351e:	ffffe097          	auipc	ra,0xffffe
    80203522:	856080e7          	jalr	-1962(ra) # 80200d74 <memset>
    for (int j = strlen(name) - 1; j >= 0; j--) {
    80203526:	8566                	mv	a0,s9
    80203528:	ffffe097          	auipc	ra,0xffffe
    8020352c:	9d4080e7          	jalr	-1580(ra) # 80200efc <strlen>
    80203530:	fff5079b          	addiw	a5,a0,-1
    80203534:	0207ca63          	bltz	a5,80203568 <emake+0x1b4>
    80203538:	97e6                	add	a5,a5,s9
    8020353a:	ffec8693          	addi	a3,s9,-2
    8020353e:	96aa                	add	a3,a3,a0
    80203540:	fff5071b          	addiw	a4,a0,-1
    80203544:	1702                	slli	a4,a4,0x20
    80203546:	9301                	srli	a4,a4,0x20
    80203548:	8e99                	sub	a3,a3,a4
        if (name[j] == '.') {
    8020354a:	02e00613          	li	a2,46
    8020354e:	8a3e                	mv	s4,a5
    80203550:	0007c703          	lbu	a4,0(a5)
    80203554:	00c70663          	beq	a4,a2,80203560 <emake+0x1ac>
    for (int j = strlen(name) - 1; j >= 0; j--) {
    80203558:	17fd                	addi	a5,a5,-1
    8020355a:	fed79ae3          	bne	a5,a3,8020354e <emake+0x19a>
    char c, *p = name;
    8020355e:	8a66                	mv	s4,s9
        shortname[i++] = c;
    80203560:	4481                	li	s1,0
        if (i == 8 && p) {
    80203562:	4ba1                	li	s7,8
    while (i < CHAR_SHORT_NAME && (c = *name++)) {
    80203564:	4d29                	li	s10,10
    80203566:	a87d                	j	80203624 <emake+0x270>
    char c, *p = name;
    80203568:	8a66                	mv	s4,s9
    8020356a:	bfdd                	j	80203560 <emake+0x1ac>
        if (i == 8 && p) {
    8020356c:	220a0363          	beqz	s4,80203792 <emake+0x3de>
            if (p + 1 < name) { break; }            // no '.'
    80203570:	0a05                	addi	s4,s4,1
    80203572:	096a7063          	bgeu	s4,s6,802035f2 <emake+0x23e>
    80203576:	f6040793          	addi	a5,s0,-160
    8020357a:	97a6                	add	a5,a5,s1
        shortname[i++] = ' ';
    8020357c:	02000693          	li	a3,32
    while (i < CHAR_SHORT_NAME) {
    80203580:	4729                	li	a4,10
        shortname[i++] = ' ';
    80203582:	2485                	addiw	s1,s1,1
    80203584:	00d78023          	sb	a3,0(a5)
    while (i < CHAR_SHORT_NAME) {
    80203588:	0785                	addi	a5,a5,1
    8020358a:	fe975ce3          	bge	a4,s1,80203582 <emake+0x1ce>
        de.lne.checksum = cal_checksum((uchar *)shortname);
    8020358e:	f6040513          	addi	a0,s0,-160
    80203592:	00000097          	auipc	ra,0x0
    80203596:	df4080e7          	jalr	-524(ra) # 80203386 <cal_checksum>
    8020359a:	f6a40ea3          	sb	a0,-131(s0)
        de.lne.attr = ATTR_LONG_NAME;
    8020359e:	47bd                	li	a5,15
    802035a0:	f6f40da3          	sb	a5,-133(s0)
        for (int i = entcnt; i > 0; i--) {
    802035a4:	f5843783          	ld	a5,-168(s0)
    802035a8:	0ef05a63          	blez	a5,8020369c <emake+0x2e8>
    802035ac:	f5442783          	lw	a5,-172(s0)
    802035b0:	37fd                	addiw	a5,a5,-1
    802035b2:	f4f42a23          	sw	a5,-172(s0)
    802035b6:	00179b1b          	slliw	s6,a5,0x1
    802035ba:	00fb0b3b          	addw	s6,s6,a5
    802035be:	002b1b1b          	slliw	s6,s6,0x2
    802035c2:	00fb0b3b          	addw	s6,s6,a5
    802035c6:	9b66                	add	s6,s6,s9
    802035c8:	8a6e                	mv	s4,s11
    802035ca:	8be2                	mv	s7,s8
            int end = 0;
    802035cc:	4d01                	li	s10,0
                    *w++ = 0xff;            // on k210, unaligned reading is illegal
    802035ce:	597d                	li	s2,-1
                switch (j) {
    802035d0:	44ad                	li	s1,11
    802035d2:	a24d                	j	80203774 <emake+0x3c0>
            if (name > p) {                    // last '.'
    802035d4:	056a7563          	bgeu	s4,s6,8020361e <emake+0x26a>
                memset(shortname + i, ' ', 8 - i);
    802035d8:	4621                	li	a2,8
    802035da:	9e05                	subw	a2,a2,s1
    802035dc:	02000593          	li	a1,32
    802035e0:	f6040793          	addi	a5,s0,-160
    802035e4:	00978533          	add	a0,a5,s1
    802035e8:	ffffd097          	auipc	ra,0xffffd
    802035ec:	78c080e7          	jalr	1932(ra) # 80200d74 <memset>
    while (i < CHAR_SHORT_NAME && (c = *name++)) {
    802035f0:	8a5a                	mv	s4,s6
        shortname[i++] = c;
    802035f2:	8b52                	mv	s6,s4
    802035f4:	84de                	mv	s1,s7
    802035f6:	4a01                	li	s4,0
    802035f8:	a02d                	j	80203622 <emake+0x26e>
            if (strchr(illegal, c) != NULL) {
    802035fa:	85ca                	mv	a1,s2
    802035fc:	01015517          	auipc	a0,0x1015
    80203600:	a3c50513          	addi	a0,a0,-1476 # 81218038 <illegal.2630>
    80203604:	ffffe097          	auipc	ra,0xffffe
    80203608:	9da080e7          	jalr	-1574(ra) # 80200fde <strchr>
    8020360c:	c119                	beqz	a0,80203612 <emake+0x25e>
                c = '_';
    8020360e:	05f00913          	li	s2,95
        shortname[i++] = c;
    80203612:	f9040793          	addi	a5,s0,-112
    80203616:	97a6                	add	a5,a5,s1
    80203618:	fd278823          	sb	s2,-48(a5)
    8020361c:	2485                	addiw	s1,s1,1
    while (i < CHAR_SHORT_NAME && (c = *name++)) {
    8020361e:	f69d48e3          	blt	s10,s1,8020358e <emake+0x1da>
        shortname[i++] = c;
    80203622:	895a                	mv	s2,s6
    while (i < CHAR_SHORT_NAME && (c = *name++)) {
    80203624:	00190b13          	addi	s6,s2,1
    80203628:	00094903          	lbu	s2,0(s2)
    8020362c:	02090763          	beqz	s2,8020365a <emake+0x2a6>
        if (i == 8 && p) {
    80203630:	f3748ee3          	beq	s1,s7,8020356c <emake+0x1b8>
        if (c == ' ') { continue; }
    80203634:	02000793          	li	a5,32
    80203638:	fef903e3          	beq	s2,a5,8020361e <emake+0x26a>
        if (c == '.') {
    8020363c:	02e00793          	li	a5,46
    80203640:	f8f90ae3          	beq	s2,a5,802035d4 <emake+0x220>
        if (c >= 'a' && c <= 'z') {
    80203644:	f9f9079b          	addiw	a5,s2,-97
    80203648:	0ff7f793          	andi	a5,a5,255
    8020364c:	4765                	li	a4,25
    8020364e:	faf766e3          	bltu	a4,a5,802035fa <emake+0x246>
            c += 'A' - 'a';
    80203652:	3901                	addiw	s2,s2,-32
    80203654:	0ff97913          	andi	s2,s2,255
    80203658:	bf6d                	j	80203612 <emake+0x25e>
    while (i < CHAR_SHORT_NAME) {
    8020365a:	47a9                	li	a5,10
    8020365c:	f097dde3          	bge	a5,s1,80203576 <emake+0x1c2>
    80203660:	b73d                	j	8020358e <emake+0x1da>
                de.lne.order |= LAST_LONG_ENTRY;
    80203662:	0407e793          	ori	a5,a5,64
    80203666:	f6f40823          	sb	a5,-144(s0)
    8020366a:	aa19                	j	80203780 <emake+0x3cc>
                    if ((*w++ = *p++) == 0) {
    8020366c:	0005c683          	lbu	a3,0(a1)
    80203670:	00d78023          	sb	a3,0(a5)
                        end = 1;
    80203674:	0016b693          	seqz	a3,a3
                    *w++ = 0;
    80203678:	000780a3          	sb	zero,1(a5)
    8020367c:	0789                	addi	a5,a5,2
                    if ((*w++ = *p++) == 0) {
    8020367e:	0585                	addi	a1,a1,1
    80203680:	a075                	j	8020372c <emake+0x378>
    80203682:	020c0c1b          	addiw	s8,s8,32
    80203686:	4781                	li	a5,0
    80203688:	f5843703          	ld	a4,-168(s0)
    8020368c:	00e05663          	blez	a4,80203698 <emake+0x2e4>
    80203690:	f5442783          	lw	a5,-172(s0)
    80203694:	0057979b          	slliw	a5,a5,0x5
    80203698:	01878c3b          	addw	s8,a5,s8
        memset(&de, 0, sizeof(de));
    8020369c:	02000613          	li	a2,32
    802036a0:	4581                	li	a1,0
    802036a2:	f7040513          	addi	a0,s0,-144
    802036a6:	ffffd097          	auipc	ra,0xffffd
    802036aa:	6ce080e7          	jalr	1742(ra) # 80200d74 <memset>
        strncpy(de.sne.name, shortname, sizeof(de.sne.name));
    802036ae:	462d                	li	a2,11
    802036b0:	f6040593          	addi	a1,s0,-160
    802036b4:	f7040513          	addi	a0,s0,-144
    802036b8:	ffffd097          	auipc	ra,0xffffd
    802036bc:	7d4080e7          	jalr	2004(ra) # 80200e8c <strncpy>
        de.sne.attr = ep->attribute;
    802036c0:	100cc783          	lbu	a5,256(s9)
    802036c4:	f6f40da3          	sb	a5,-133(s0)
        de.sne.fst_clus_hi = (uint16)(ep->first_clus >> 16);      // first clus high 16 bits
    802036c8:	104ca783          	lw	a5,260(s9)
    802036cc:	0107d71b          	srliw	a4,a5,0x10
    802036d0:	f8e41223          	sh	a4,-124(s0)
        de.sne.fst_clus_lo = (uint16)(ep->first_clus & 0xffff);     // low 16 bits
    802036d4:	f8f41523          	sh	a5,-118(s0)
        de.sne.file_size = ep->file_size;                         // filesize is updated in eupdate()
    802036d8:	108ca783          	lw	a5,264(s9)
    802036dc:	f8f42623          	sw	a5,-116(s0)
        off = reloc_clus(self_fs, dp, off, 1);
    802036e0:	4685                	li	a3,1
    802036e2:	8662                	mv	a2,s8
    802036e4:	85ce                	mv	a1,s3
    802036e6:	8556                	mv	a0,s5
    802036e8:	fffff097          	auipc	ra,0xfffff
    802036ec:	134080e7          	jalr	308(ra) # 8020281c <reloc_clus>
        rw_clus(self_fs, dp->cur_clus, 1, 0, (uint64)&de, off, sizeof(de));
    802036f0:	02000813          	li	a6,32
    802036f4:	0005079b          	sext.w	a5,a0
    802036f8:	f7040713          	addi	a4,s0,-144
    802036fc:	4681                	li	a3,0
    802036fe:	4605                	li	a2,1
    80203700:	10c9a583          	lw	a1,268(s3)
    80203704:	8556                	mv	a0,s5
    80203706:	fffff097          	auipc	ra,0xfffff
    8020370a:	226080e7          	jalr	550(ra) # 8020292c <rw_clus>
}
    8020370e:	bb41                	j	8020349e <emake+0xea>
                    case 5:     w = (uint8 *)de.lne.name2; break;
    80203710:	f7e40793          	addi	a5,s0,-130
    80203714:	a019                	j	8020371a <emake+0x366>
                switch (j) {
    80203716:	f8c40793          	addi	a5,s0,-116
            for (int j = 1; j <= CHAR_LONG_NAME; j++) {
    8020371a:	2705                	addiw	a4,a4,1
    8020371c:	fff7061b          	addiw	a2,a4,-1
                if (end) {
    80203720:	d6b1                	beqz	a3,8020366c <emake+0x2b8>
                    *w++ = 0xff;            // on k210, unaligned reading is illegal
    80203722:	01278023          	sb	s2,0(a5)
                    *w++ = 0xff;
    80203726:	012780a3          	sb	s2,1(a5)
    8020372a:	0789                	addi	a5,a5,2
                switch (j) {
    8020372c:	fea602e3          	beq	a2,a0,80203710 <emake+0x35c>
    80203730:	fe9603e3          	beq	a2,s1,80203716 <emake+0x362>
            for (int j = 1; j <= CHAR_LONG_NAME; j++) {
    80203734:	0007061b          	sext.w	a2,a4
    80203738:	fec851e3          	bge	a6,a2,8020371a <emake+0x366>
            uint off2 = reloc_clus(self_fs, dp, off, 1);
    8020373c:	4685                	li	a3,1
    8020373e:	865e                	mv	a2,s7
    80203740:	85ce                	mv	a1,s3
    80203742:	8556                	mv	a0,s5
    80203744:	fffff097          	auipc	ra,0xfffff
    80203748:	0d8080e7          	jalr	216(ra) # 8020281c <reloc_clus>
            rw_clus(self_fs, dp->cur_clus, 1, 0, (uint64)&de, off2, sizeof(de));
    8020374c:	02000813          	li	a6,32
    80203750:	0005079b          	sext.w	a5,a0
    80203754:	f7040713          	addi	a4,s0,-144
    80203758:	86ea                	mv	a3,s10
    8020375a:	4605                	li	a2,1
    8020375c:	10c9a583          	lw	a1,268(s3)
    80203760:	8556                	mv	a0,s5
    80203762:	fffff097          	auipc	ra,0xfffff
    80203766:	1ca080e7          	jalr	458(ra) # 8020292c <rw_clus>
            off += sizeof(de);
    8020376a:	020b8b9b          	addiw	s7,s7,32
        for (int i = entcnt; i > 0; i--) {
    8020376e:	1b4d                	addi	s6,s6,-13
    80203770:	f14059e3          	blez	s4,80203682 <emake+0x2ce>
            if ((de.lne.order = i) == entcnt) {
    80203774:	0ffa7793          	andi	a5,s4,255
    80203778:	eefd85e3          	beq	s11,a5,80203662 <emake+0x2ae>
    8020377c:	f6f40823          	sb	a5,-144(s0)
            char *p = ep->filename + (i - 1) * CHAR_LONG_NAME;
    80203780:	3a7d                	addiw	s4,s4,-1
    80203782:	85da                	mv	a1,s6
    80203784:	4709                	li	a4,2
            int end = 0;
    80203786:	86ea                	mv	a3,s10
            uint8 *w = (uint8 *)de.lne.name1;
    80203788:	f7140793          	addi	a5,s0,-143
                switch (j) {
    8020378c:	4515                	li	a0,5
            for (int j = 1; j <= CHAR_LONG_NAME; j++) {
    8020378e:	4835                	li	a6,13
    80203790:	b771                	j	8020371c <emake+0x368>
        if (c == ' ') { continue; }
    80203792:	02000793          	li	a5,32
    80203796:	eaf913e3          	bne	s2,a5,8020363c <emake+0x288>
    8020379a:	b561                	j	80203622 <emake+0x26e>

000000008020379c <edup>:
{
    8020379c:	1101                	addi	sp,sp,-32
    8020379e:	ec06                	sd	ra,24(sp)
    802037a0:	e822                	sd	s0,16(sp)
    802037a2:	e426                	sd	s1,8(sp)
    802037a4:	e04a                	sd	s2,0(sp)
    802037a6:	1000                	addi	s0,sp,32
    802037a8:	84aa                	mv	s1,a0
        acquire(&self_fs->ecache.lock);
    802037aa:	11454903          	lbu	s2,276(a0)
    802037ae:	6795                	lui	a5,0x5
    802037b0:	9b878793          	addi	a5,a5,-1608 # 49b8 <_entry-0x801fb648>
    802037b4:	02f90933          	mul	s2,s2,a5
    802037b8:	01053797          	auipc	a5,0x1053
    802037bc:	45078793          	addi	a5,a5,1104 # 81256c08 <FatFs+0x38>
    802037c0:	993e                	add	s2,s2,a5
    802037c2:	854a                	mv	a0,s2
    802037c4:	00005097          	auipc	ra,0x5
    802037c8:	716080e7          	jalr	1814(ra) # 80208eda <acquire>
        entry->ref++;
    802037cc:	1184a783          	lw	a5,280(s1)
    802037d0:	2785                	addiw	a5,a5,1
    802037d2:	10f4ac23          	sw	a5,280(s1)
        release(&self_fs->ecache.lock);
    802037d6:	854a                	mv	a0,s2
    802037d8:	00005097          	auipc	ra,0x5
    802037dc:	756080e7          	jalr	1878(ra) # 80208f2e <release>
}
    802037e0:	8526                	mv	a0,s1
    802037e2:	60e2                	ld	ra,24(sp)
    802037e4:	6442                	ld	s0,16(sp)
    802037e6:	64a2                	ld	s1,8(sp)
    802037e8:	6902                	ld	s2,0(sp)
    802037ea:	6105                	addi	sp,sp,32
    802037ec:	8082                	ret

00000000802037ee <eupdate>:
    if (!entry->dirty || entry->valid != 1) { return; }
    802037ee:	11554783          	lbu	a5,277(a0)
    802037f2:	10078263          	beqz	a5,802038f6 <eupdate+0x108>
{
    802037f6:	711d                	addi	sp,sp,-96
    802037f8:	ec86                	sd	ra,88(sp)
    802037fa:	e8a2                	sd	s0,80(sp)
    802037fc:	e4a6                	sd	s1,72(sp)
    802037fe:	e0ca                	sd	s2,64(sp)
    80203800:	fc4e                	sd	s3,56(sp)
    80203802:	1080                	addi	s0,sp,96
    80203804:	84aa                	mv	s1,a0
    if (!entry->dirty || entry->valid != 1) { return; }
    80203806:	11651703          	lh	a4,278(a0)
    8020380a:	4785                	li	a5,1
    8020380c:	00f70963          	beq	a4,a5,8020381e <eupdate+0x30>
}
    80203810:	60e6                	ld	ra,88(sp)
    80203812:	6446                	ld	s0,80(sp)
    80203814:	64a6                	ld	s1,72(sp)
    80203816:	6906                	ld	s2,64(sp)
    80203818:	79e2                	ld	s3,56(sp)
    8020381a:	6125                	addi	sp,sp,96
    8020381c:	8082                	ret
    struct fs * self_fs = &FatFs[entry->dev];
    8020381e:	11454903          	lbu	s2,276(a0)
    80203822:	6795                	lui	a5,0x5
    80203824:	9b878793          	addi	a5,a5,-1608 # 49b8 <_entry-0x801fb648>
    80203828:	02f90933          	mul	s2,s2,a5
    8020382c:	01053797          	auipc	a5,0x1053
    80203830:	3a478793          	addi	a5,a5,932 # 81256bd0 <FatFs>
    80203834:	993e                	add	s2,s2,a5
    uint entcnt = 0;
    80203836:	fc042623          	sw	zero,-52(s0)
    uint32 off = reloc_clus(self_fs, entry->parent, entry->off, 0);
    8020383a:	4681                	li	a3,0
    8020383c:	12052603          	lw	a2,288(a0)
    80203840:	12853583          	ld	a1,296(a0)
    80203844:	854a                	mv	a0,s2
    80203846:	fffff097          	auipc	ra,0xfffff
    8020384a:	fd6080e7          	jalr	-42(ra) # 8020281c <reloc_clus>
    rw_clus(self_fs, entry->parent->cur_clus, 0, 0, (uint64) &entcnt, off, 1);
    8020384e:	1284b583          	ld	a1,296(s1)
    80203852:	4805                	li	a6,1
    80203854:	0005079b          	sext.w	a5,a0
    80203858:	fcc40713          	addi	a4,s0,-52
    8020385c:	4681                	li	a3,0
    8020385e:	4601                	li	a2,0
    80203860:	10c5a583          	lw	a1,268(a1)
    80203864:	854a                	mv	a0,s2
    80203866:	fffff097          	auipc	ra,0xfffff
    8020386a:	0c6080e7          	jalr	198(ra) # 8020292c <rw_clus>
    entcnt &= ~LAST_LONG_ENTRY;
    8020386e:	fcc42603          	lw	a2,-52(s0)
    80203872:	fbf67613          	andi	a2,a2,-65
    80203876:	fcc42623          	sw	a2,-52(s0)
    off = reloc_clus(self_fs, entry->parent, entry->off + (entcnt << 5), 0);
    8020387a:	0056161b          	slliw	a2,a2,0x5
    8020387e:	1204a783          	lw	a5,288(s1)
    80203882:	4681                	li	a3,0
    80203884:	9e3d                	addw	a2,a2,a5
    80203886:	1284b583          	ld	a1,296(s1)
    8020388a:	854a                	mv	a0,s2
    8020388c:	fffff097          	auipc	ra,0xfffff
    80203890:	f90080e7          	jalr	-112(ra) # 8020281c <reloc_clus>
    80203894:	0005099b          	sext.w	s3,a0
    rw_clus(self_fs, entry->parent->cur_clus, 0, 0, (uint64)&de, off, sizeof(de));
    80203898:	1284b583          	ld	a1,296(s1)
    8020389c:	02000813          	li	a6,32
    802038a0:	87ce                	mv	a5,s3
    802038a2:	fa840713          	addi	a4,s0,-88
    802038a6:	4681                	li	a3,0
    802038a8:	4601                	li	a2,0
    802038aa:	10c5a583          	lw	a1,268(a1)
    802038ae:	854a                	mv	a0,s2
    802038b0:	fffff097          	auipc	ra,0xfffff
    802038b4:	07c080e7          	jalr	124(ra) # 8020292c <rw_clus>
    de.sne.fst_clus_hi = (uint16)(entry->first_clus >> 16);
    802038b8:	1044a783          	lw	a5,260(s1)
    802038bc:	0107d71b          	srliw	a4,a5,0x10
    802038c0:	fae41e23          	sh	a4,-68(s0)
    de.sne.fst_clus_lo = (uint16)(entry->first_clus & 0xffff);
    802038c4:	fcf41123          	sh	a5,-62(s0)
    de.sne.file_size = entry->file_size;
    802038c8:	1084a783          	lw	a5,264(s1)
    802038cc:	fcf42223          	sw	a5,-60(s0)
    rw_clus(self_fs, entry->parent->cur_clus, 1, 0, (uint64)&de, off, sizeof(de));
    802038d0:	1284b583          	ld	a1,296(s1)
    802038d4:	02000813          	li	a6,32
    802038d8:	87ce                	mv	a5,s3
    802038da:	fa840713          	addi	a4,s0,-88
    802038de:	4681                	li	a3,0
    802038e0:	4605                	li	a2,1
    802038e2:	10c5a583          	lw	a1,268(a1)
    802038e6:	854a                	mv	a0,s2
    802038e8:	fffff097          	auipc	ra,0xfffff
    802038ec:	044080e7          	jalr	68(ra) # 8020292c <rw_clus>
    entry->dirty = 0;
    802038f0:	10048aa3          	sb	zero,277(s1)
    802038f4:	bf31                	j	80203810 <eupdate+0x22>
    802038f6:	8082                	ret

00000000802038f8 <eremove>:
    if (entry->valid != 1) { return; }
    802038f8:	11651703          	lh	a4,278(a0)
    802038fc:	4785                	li	a5,1
    802038fe:	00f70363          	beq	a4,a5,80203904 <eremove+0xc>
    80203902:	8082                	ret
{
    80203904:	715d                	addi	sp,sp,-80
    80203906:	e486                	sd	ra,72(sp)
    80203908:	e0a2                	sd	s0,64(sp)
    8020390a:	fc26                	sd	s1,56(sp)
    8020390c:	f84a                	sd	s2,48(sp)
    8020390e:	f44e                	sd	s3,40(sp)
    80203910:	f052                	sd	s4,32(sp)
    80203912:	ec56                	sd	s5,24(sp)
    80203914:	0880                	addi	s0,sp,80
    80203916:	89aa                	mv	s3,a0
    struct fs * self_fs = &FatFs[entry->dev];
    80203918:	11454a83          	lbu	s5,276(a0)
    8020391c:	6795                	lui	a5,0x5
    8020391e:	9b878793          	addi	a5,a5,-1608 # 49b8 <_entry-0x801fb648>
    80203922:	02fa8ab3          	mul	s5,s5,a5
    80203926:	01053797          	auipc	a5,0x1053
    8020392a:	2aa78793          	addi	a5,a5,682 # 81256bd0 <FatFs>
    8020392e:	9abe                	add	s5,s5,a5
    uint entcnt = 0;
    80203930:	fa042e23          	sw	zero,-68(s0)
    uint32 off = entry->off;
    80203934:	12052a03          	lw	s4,288(a0)
    uint32 off2 = reloc_clus(self_fs, entry->parent, off, 0);
    80203938:	4681                	li	a3,0
    8020393a:	8652                	mv	a2,s4
    8020393c:	12853583          	ld	a1,296(a0)
    80203940:	8556                	mv	a0,s5
    80203942:	fffff097          	auipc	ra,0xfffff
    80203946:	eda080e7          	jalr	-294(ra) # 8020281c <reloc_clus>
    8020394a:	0005049b          	sext.w	s1,a0
    rw_clus(self_fs, entry->parent->cur_clus, 0, 0, (uint64) &entcnt, off2, 1);
    8020394e:	1289b583          	ld	a1,296(s3)
    80203952:	4805                	li	a6,1
    80203954:	87a6                	mv	a5,s1
    80203956:	fbc40713          	addi	a4,s0,-68
    8020395a:	4681                	li	a3,0
    8020395c:	4601                	li	a2,0
    8020395e:	10c5a583          	lw	a1,268(a1)
    80203962:	8556                	mv	a0,s5
    80203964:	fffff097          	auipc	ra,0xfffff
    80203968:	fc8080e7          	jalr	-56(ra) # 8020292c <rw_clus>
    entcnt &= ~LAST_LONG_ENTRY;
    8020396c:	fbc42783          	lw	a5,-68(s0)
    80203970:	fbf7f793          	andi	a5,a5,-65
    80203974:	faf42e23          	sw	a5,-68(s0)
    uint8 flag = EMPTY_ENTRY;
    80203978:	5795                	li	a5,-27
    8020397a:	faf40da3          	sb	a5,-69(s0)
    for (int i = 0; i <= entcnt; i++) {
    8020397e:	4901                	li	s2,0
        rw_clus(self_fs, entry->parent->cur_clus, 1, 0, (uint64) &flag, off2, 1);
    80203980:	1289b583          	ld	a1,296(s3)
    80203984:	4805                	li	a6,1
    80203986:	87a6                	mv	a5,s1
    80203988:	fbb40713          	addi	a4,s0,-69
    8020398c:	4681                	li	a3,0
    8020398e:	4605                	li	a2,1
    80203990:	10c5a583          	lw	a1,268(a1)
    80203994:	8556                	mv	a0,s5
    80203996:	fffff097          	auipc	ra,0xfffff
    8020399a:	f96080e7          	jalr	-106(ra) # 8020292c <rw_clus>
        off += 32;
    8020399e:	020a0a1b          	addiw	s4,s4,32
        off2 = reloc_clus(self_fs, entry->parent, off, 0);
    802039a2:	4681                	li	a3,0
    802039a4:	8652                	mv	a2,s4
    802039a6:	1289b583          	ld	a1,296(s3)
    802039aa:	8556                	mv	a0,s5
    802039ac:	fffff097          	auipc	ra,0xfffff
    802039b0:	e70080e7          	jalr	-400(ra) # 8020281c <reloc_clus>
    802039b4:	0005049b          	sext.w	s1,a0
    for (int i = 0; i <= entcnt; i++) {
    802039b8:	0019079b          	addiw	a5,s2,1
    802039bc:	0007891b          	sext.w	s2,a5
    802039c0:	fbc42703          	lw	a4,-68(s0)
    802039c4:	fb277ee3          	bgeu	a4,s2,80203980 <eremove+0x88>
    entry->valid = -1;
    802039c8:	57fd                	li	a5,-1
    802039ca:	10f99b23          	sh	a5,278(s3)
}
    802039ce:	60a6                	ld	ra,72(sp)
    802039d0:	6406                	ld	s0,64(sp)
    802039d2:	74e2                	ld	s1,56(sp)
    802039d4:	7942                	ld	s2,48(sp)
    802039d6:	79a2                	ld	s3,40(sp)
    802039d8:	7a02                	ld	s4,32(sp)
    802039da:	6ae2                	ld	s5,24(sp)
    802039dc:	6161                	addi	sp,sp,80
    802039de:	8082                	ret

00000000802039e0 <etrunc>:
{
    802039e0:	7139                	addi	sp,sp,-64
    802039e2:	fc06                	sd	ra,56(sp)
    802039e4:	f822                	sd	s0,48(sp)
    802039e6:	f426                	sd	s1,40(sp)
    802039e8:	f04a                	sd	s2,32(sp)
    802039ea:	ec4e                	sd	s3,24(sp)
    802039ec:	e852                	sd	s4,16(sp)
    802039ee:	e456                	sd	s5,8(sp)
    802039f0:	0080                	addi	s0,sp,64
    802039f2:	8aaa                	mv	s5,a0
    struct fs * self_fs = &FatFs[entry->dev];
    802039f4:	11454903          	lbu	s2,276(a0)
    802039f8:	6795                	lui	a5,0x5
    802039fa:	9b878793          	addi	a5,a5,-1608 # 49b8 <_entry-0x801fb648>
    802039fe:	02f90933          	mul	s2,s2,a5
    80203a02:	01053797          	auipc	a5,0x1053
    80203a06:	1ce78793          	addi	a5,a5,462 # 81256bd0 <FatFs>
    80203a0a:	993e                	add	s2,s2,a5
    for (uint32 clus = entry->first_clus; clus >= 2 && clus < FAT32_EOC; ) {
    80203a0c:	10452483          	lw	s1,260(a0)
    80203a10:	ffe4871b          	addiw	a4,s1,-2
    80203a14:	100007b7          	lui	a5,0x10000
    80203a18:	17d5                	addi	a5,a5,-11
    80203a1a:	02e7e863          	bltu	a5,a4,80203a4a <etrunc+0x6a>
    80203a1e:	8a3e                	mv	s4,a5
        uint32 next = read_fat(self_fs, clus);
    80203a20:	0004899b          	sext.w	s3,s1
    80203a24:	85a6                	mv	a1,s1
    80203a26:	854a                	mv	a0,s2
    80203a28:	fffff097          	auipc	ra,0xfffff
    80203a2c:	bec080e7          	jalr	-1044(ra) # 80202614 <read_fat>
    80203a30:	0005049b          	sext.w	s1,a0
    write_fat(self_fs, cluster, 0);
    80203a34:	4601                	li	a2,0
    80203a36:	85ce                	mv	a1,s3
    80203a38:	854a                	mv	a0,s2
    80203a3a:	fffff097          	auipc	ra,0xfffff
    80203a3e:	d68080e7          	jalr	-664(ra) # 802027a2 <write_fat>
    for (uint32 clus = entry->first_clus; clus >= 2 && clus < FAT32_EOC; ) {
    80203a42:	ffe4879b          	addiw	a5,s1,-2
    80203a46:	fcfa7de3          	bgeu	s4,a5,80203a20 <etrunc+0x40>
    entry->file_size = 0;
    80203a4a:	100aa423          	sw	zero,264(s5)
    entry->first_clus = 0;
    80203a4e:	100aa223          	sw	zero,260(s5)
    entry->dirty = 1;
    80203a52:	4785                	li	a5,1
    80203a54:	10fa8aa3          	sb	a5,277(s5)
}
    80203a58:	70e2                	ld	ra,56(sp)
    80203a5a:	7442                	ld	s0,48(sp)
    80203a5c:	74a2                	ld	s1,40(sp)
    80203a5e:	7902                	ld	s2,32(sp)
    80203a60:	69e2                	ld	s3,24(sp)
    80203a62:	6a42                	ld	s4,16(sp)
    80203a64:	6aa2                	ld	s5,8(sp)
    80203a66:	6121                	addi	sp,sp,64
    80203a68:	8082                	ret

0000000080203a6a <elock>:
{
    80203a6a:	1141                	addi	sp,sp,-16
    80203a6c:	e406                	sd	ra,8(sp)
    80203a6e:	e022                	sd	s0,0(sp)
    80203a70:	0800                	addi	s0,sp,16
    if (entry == 0 || entry->ref < 1)
    80203a72:	cd19                	beqz	a0,80203a90 <elock+0x26>
    80203a74:	11852783          	lw	a5,280(a0)
    80203a78:	00f05c63          	blez	a5,80203a90 <elock+0x26>
    acquiresleep(&entry->lock);
    80203a7c:	14050513          	addi	a0,a0,320
    80203a80:	00005097          	auipc	ra,0x5
    80203a84:	530080e7          	jalr	1328(ra) # 80208fb0 <acquiresleep>
}
    80203a88:	60a2                	ld	ra,8(sp)
    80203a8a:	6402                	ld	s0,0(sp)
    80203a8c:	0141                	addi	sp,sp,16
    80203a8e:	8082                	ret
        panic("elock");
    80203a90:	00011517          	auipc	a0,0x11
    80203a94:	9c050513          	addi	a0,a0,-1600 # 80214450 <rodata_start+0x450>
    80203a98:	00005097          	auipc	ra,0x5
    80203a9c:	7b2080e7          	jalr	1970(ra) # 8020924a <panic>

0000000080203aa0 <eunlock>:
{
    80203aa0:	1101                	addi	sp,sp,-32
    80203aa2:	ec06                	sd	ra,24(sp)
    80203aa4:	e822                	sd	s0,16(sp)
    80203aa6:	e426                	sd	s1,8(sp)
    80203aa8:	e04a                	sd	s2,0(sp)
    80203aaa:	1000                	addi	s0,sp,32
    if (entry == 0 || !holdingsleep(&entry->lock) || entry->ref < 1)
    80203aac:	c90d                	beqz	a0,80203ade <eunlock+0x3e>
    80203aae:	84aa                	mv	s1,a0
    80203ab0:	14050913          	addi	s2,a0,320
    80203ab4:	854a                	mv	a0,s2
    80203ab6:	00005097          	auipc	ra,0x5
    80203aba:	588080e7          	jalr	1416(ra) # 8020903e <holdingsleep>
    80203abe:	c105                	beqz	a0,80203ade <eunlock+0x3e>
    80203ac0:	1184a783          	lw	a5,280(s1)
    80203ac4:	00f05d63          	blez	a5,80203ade <eunlock+0x3e>
    releasesleep(&entry->lock);
    80203ac8:	854a                	mv	a0,s2
    80203aca:	00005097          	auipc	ra,0x5
    80203ace:	530080e7          	jalr	1328(ra) # 80208ffa <releasesleep>
}
    80203ad2:	60e2                	ld	ra,24(sp)
    80203ad4:	6442                	ld	s0,16(sp)
    80203ad6:	64a2                	ld	s1,8(sp)
    80203ad8:	6902                	ld	s2,0(sp)
    80203ada:	6105                	addi	sp,sp,32
    80203adc:	8082                	ret
        panic("eunlock");
    80203ade:	00011517          	auipc	a0,0x11
    80203ae2:	97a50513          	addi	a0,a0,-1670 # 80214458 <rodata_start+0x458>
    80203ae6:	00005097          	auipc	ra,0x5
    80203aea:	764080e7          	jalr	1892(ra) # 8020924a <panic>

0000000080203aee <eput>:
{
    80203aee:	7139                	addi	sp,sp,-64
    80203af0:	fc06                	sd	ra,56(sp)
    80203af2:	f822                	sd	s0,48(sp)
    80203af4:	f426                	sd	s1,40(sp)
    80203af6:	f04a                	sd	s2,32(sp)
    80203af8:	ec4e                	sd	s3,24(sp)
    80203afa:	e852                	sd	s4,16(sp)
    80203afc:	e456                	sd	s5,8(sp)
    80203afe:	e05a                	sd	s6,0(sp)
    80203b00:	0080                	addi	s0,sp,64
    80203b02:	892a                	mv	s2,a0
    struct fs *self_fs = &FatFs[entry->dev];
    80203b04:	11454483          	lbu	s1,276(a0)
    80203b08:	00048b1b          	sext.w	s6,s1
    acquire(&self_fs->ecache.lock);
    80203b0c:	6a15                	lui	s4,0x5
    80203b0e:	9b8a0793          	addi	a5,s4,-1608 # 49b8 <_entry-0x801fb648>
    80203b12:	02f484b3          	mul	s1,s1,a5
    80203b16:	03848993          	addi	s3,s1,56
    80203b1a:	01053a97          	auipc	s5,0x1053
    80203b1e:	0b6a8a93          	addi	s5,s5,182 # 81256bd0 <FatFs>
    80203b22:	99d6                	add	s3,s3,s5
    80203b24:	854e                	mv	a0,s3
    80203b26:	00005097          	auipc	ra,0x5
    80203b2a:	3b4080e7          	jalr	948(ra) # 80208eda <acquire>
    if (entry != &self_fs->root && entry->valid != 0 && entry->ref == 1) {
    80203b2e:	830a0a13          	addi	s4,s4,-2000
    80203b32:	94d2                	add	s1,s1,s4
    80203b34:	94d6                	add	s1,s1,s5
    80203b36:	01248a63          	beq	s1,s2,80203b4a <eput+0x5c>
    80203b3a:	11691783          	lh	a5,278(s2)
    80203b3e:	c791                	beqz	a5,80203b4a <eput+0x5c>
    80203b40:	11892703          	lw	a4,280(s2)
    80203b44:	4785                	li	a5,1
    80203b46:	02f70663          	beq	a4,a5,80203b72 <eput+0x84>
    entry->ref--;
    80203b4a:	11892783          	lw	a5,280(s2)
    80203b4e:	37fd                	addiw	a5,a5,-1
    80203b50:	10f92c23          	sw	a5,280(s2)
    release(&self_fs->ecache.lock);
    80203b54:	854e                	mv	a0,s3
    80203b56:	00005097          	auipc	ra,0x5
    80203b5a:	3d8080e7          	jalr	984(ra) # 80208f2e <release>
}
    80203b5e:	70e2                	ld	ra,56(sp)
    80203b60:	7442                	ld	s0,48(sp)
    80203b62:	74a2                	ld	s1,40(sp)
    80203b64:	7902                	ld	s2,32(sp)
    80203b66:	69e2                	ld	s3,24(sp)
    80203b68:	6a42                	ld	s4,16(sp)
    80203b6a:	6aa2                	ld	s5,8(sp)
    80203b6c:	6b02                	ld	s6,0(sp)
    80203b6e:	6121                	addi	sp,sp,64
    80203b70:	8082                	ret
        acquiresleep(&entry->lock);
    80203b72:	14090a13          	addi	s4,s2,320
    80203b76:	8552                	mv	a0,s4
    80203b78:	00005097          	auipc	ra,0x5
    80203b7c:	438080e7          	jalr	1080(ra) # 80208fb0 <acquiresleep>
        entry->next->prev = entry->prev;
    80203b80:	13093703          	ld	a4,304(s2)
    80203b84:	13893783          	ld	a5,312(s2)
    80203b88:	12f73c23          	sd	a5,312(a4)
        entry->prev->next = entry->next;
    80203b8c:	13093703          	ld	a4,304(s2)
    80203b90:	12e7b823          	sd	a4,304(a5) # 10000130 <_entry-0x701ffed0>
        entry->next = self_fs->root.next;
    80203b94:	6795                	lui	a5,0x5
    80203b96:	9b878713          	addi	a4,a5,-1608 # 49b8 <_entry-0x801fb648>
    80203b9a:	02eb0b33          	mul	s6,s6,a4
    80203b9e:	9b56                	add	s6,s6,s5
    80203ba0:	9b3e                	add	s6,s6,a5
    80203ba2:	960b3783          	ld	a5,-1696(s6)
    80203ba6:	12f93823          	sd	a5,304(s2)
        entry->prev = &self_fs->root;
    80203baa:	12993c23          	sd	s1,312(s2)
        self_fs->root.next->prev = entry;
    80203bae:	960b3783          	ld	a5,-1696(s6)
    80203bb2:	1327bc23          	sd	s2,312(a5)
        self_fs->root.next = entry;
    80203bb6:	972b3023          	sd	s2,-1696(s6)
        release(&self_fs->ecache.lock);
    80203bba:	854e                	mv	a0,s3
    80203bbc:	00005097          	auipc	ra,0x5
    80203bc0:	372080e7          	jalr	882(ra) # 80208f2e <release>
        if (entry->valid == -1) {       // this means some one has called eremove()
    80203bc4:	11691703          	lh	a4,278(s2)
    80203bc8:	57fd                	li	a5,-1
    80203bca:	06f70263          	beq	a4,a5,80203c2e <eput+0x140>
            elock(entry->parent);
    80203bce:	12893503          	ld	a0,296(s2)
    80203bd2:	00000097          	auipc	ra,0x0
    80203bd6:	e98080e7          	jalr	-360(ra) # 80203a6a <elock>
            eupdate(entry);
    80203bda:	854a                	mv	a0,s2
    80203bdc:	00000097          	auipc	ra,0x0
    80203be0:	c12080e7          	jalr	-1006(ra) # 802037ee <eupdate>
            eunlock(entry->parent);
    80203be4:	12893503          	ld	a0,296(s2)
    80203be8:	00000097          	auipc	ra,0x0
    80203bec:	eb8080e7          	jalr	-328(ra) # 80203aa0 <eunlock>
        releasesleep(&entry->lock);
    80203bf0:	8552                	mv	a0,s4
    80203bf2:	00005097          	auipc	ra,0x5
    80203bf6:	408080e7          	jalr	1032(ra) # 80208ffa <releasesleep>
        struct dirent *eparent = entry->parent;
    80203bfa:	12893483          	ld	s1,296(s2)
        acquire(&self_fs->ecache.lock);
    80203bfe:	854e                	mv	a0,s3
    80203c00:	00005097          	auipc	ra,0x5
    80203c04:	2da080e7          	jalr	730(ra) # 80208eda <acquire>
        entry->ref--;
    80203c08:	11892783          	lw	a5,280(s2)
    80203c0c:	37fd                	addiw	a5,a5,-1
    80203c0e:	10f92c23          	sw	a5,280(s2)
        release(&self_fs->ecache.lock);
    80203c12:	854e                	mv	a0,s3
    80203c14:	00005097          	auipc	ra,0x5
    80203c18:	31a080e7          	jalr	794(ra) # 80208f2e <release>
        if (entry->ref == 0) {
    80203c1c:	11892783          	lw	a5,280(s2)
    80203c20:	ff9d                	bnez	a5,80203b5e <eput+0x70>
            eput(eparent);
    80203c22:	8526                	mv	a0,s1
    80203c24:	00000097          	auipc	ra,0x0
    80203c28:	eca080e7          	jalr	-310(ra) # 80203aee <eput>
    80203c2c:	bf0d                	j	80203b5e <eput+0x70>
            etrunc(entry);
    80203c2e:	854a                	mv	a0,s2
    80203c30:	00000097          	auipc	ra,0x0
    80203c34:	db0080e7          	jalr	-592(ra) # 802039e0 <etrunc>
    80203c38:	bf65                	j	80203bf0 <eput+0x102>

0000000080203c3a <estat>:
{
    80203c3a:	1101                	addi	sp,sp,-32
    80203c3c:	ec06                	sd	ra,24(sp)
    80203c3e:	e822                	sd	s0,16(sp)
    80203c40:	e426                	sd	s1,8(sp)
    80203c42:	e04a                	sd	s2,0(sp)
    80203c44:	1000                	addi	s0,sp,32
    80203c46:	892a                	mv	s2,a0
    80203c48:	84ae                	mv	s1,a1
    strncpy(st->name, de->filename, STAT_MAX_NAME);
    80203c4a:	02000613          	li	a2,32
    80203c4e:	85aa                	mv	a1,a0
    80203c50:	8526                	mv	a0,s1
    80203c52:	ffffd097          	auipc	ra,0xffffd
    80203c56:	23a080e7          	jalr	570(ra) # 80200e8c <strncpy>
    st->type = (de->attribute & ATTR_DIRECTORY) ? T_DIR : T_FILE;
    80203c5a:	10094783          	lbu	a5,256(s2)
    80203c5e:	8bc1                	andi	a5,a5,16
    80203c60:	0017b793          	seqz	a5,a5
    80203c64:	0785                	addi	a5,a5,1
    80203c66:	02f49423          	sh	a5,40(s1)
    st->dev = de->dev;
    80203c6a:	11494783          	lbu	a5,276(s2)
    80203c6e:	d0dc                	sw	a5,36(s1)
    st->size = de->file_size;
    80203c70:	10896783          	lwu	a5,264(s2)
    80203c74:	f89c                	sd	a5,48(s1)
}
    80203c76:	60e2                	ld	ra,24(sp)
    80203c78:	6442                	ld	s0,16(sp)
    80203c7a:	64a2                	ld	s1,8(sp)
    80203c7c:	6902                	ld	s2,0(sp)
    80203c7e:	6105                	addi	sp,sp,32
    80203c80:	8082                	ret

0000000080203c82 <enext>:
 * @return  -1      meet the end of dir
 *          0       find empty slots
 *          1       find a file with all its entries
 */
int enext(struct dirent *dp, struct dirent *ep, uint off, int *count)
{
    80203c82:	7119                	addi	sp,sp,-128
    80203c84:	fc86                	sd	ra,120(sp)
    80203c86:	f8a2                	sd	s0,112(sp)
    80203c88:	f4a6                	sd	s1,104(sp)
    80203c8a:	f0ca                	sd	s2,96(sp)
    80203c8c:	ecce                	sd	s3,88(sp)
    80203c8e:	e8d2                	sd	s4,80(sp)
    80203c90:	e4d6                	sd	s5,72(sp)
    80203c92:	e0da                	sd	s6,64(sp)
    80203c94:	fc5e                	sd	s7,56(sp)
    80203c96:	f862                	sd	s8,48(sp)
    80203c98:	f466                	sd	s9,40(sp)
    80203c9a:	f06a                	sd	s10,32(sp)
    80203c9c:	0100                	addi	s0,sp,128
    if (!(dp->attribute & ATTR_DIRECTORY))
    80203c9e:	10054783          	lbu	a5,256(a0)
    80203ca2:	8bc1                	andi	a5,a5,16
    80203ca4:	cfb5                	beqz	a5,80203d20 <enext+0x9e>
    80203ca6:	892a                	mv	s2,a0
    80203ca8:	8bae                	mv	s7,a1
    80203caa:	84b2                	mv	s1,a2
    80203cac:	8a36                	mv	s4,a3
        panic("enext not dir");
    if (ep->valid)
    80203cae:	11659783          	lh	a5,278(a1)
    80203cb2:	efbd                	bnez	a5,80203d30 <enext+0xae>
        panic("enext ep valid");
    if (off % 32)
    80203cb4:	01f67793          	andi	a5,a2,31
    80203cb8:	e7c1                	bnez	a5,80203d40 <enext+0xbe>
        panic("enext not align");
    if (dp->valid != 1) { return -1; }
    80203cba:	11651703          	lh	a4,278(a0)
    80203cbe:	4785                	li	a5,1
    80203cc0:	557d                	li	a0,-1
    80203cc2:	16f71763          	bne	a4,a5,80203e30 <enext+0x1ae>
    
    if(dp->mnt) dp = &(FatFs[dp->dev].root);
    80203cc6:	11c92783          	lw	a5,284(s2)
    80203cca:	c385                	beqz	a5,80203cea <enext+0x68>
    80203ccc:	11494903          	lbu	s2,276(s2)
    80203cd0:	6795                	lui	a5,0x5
    80203cd2:	9b878713          	addi	a4,a5,-1608 # 49b8 <_entry-0x801fb648>
    80203cd6:	02e90933          	mul	s2,s2,a4
    80203cda:	83078793          	addi	a5,a5,-2000
    80203cde:	993e                	add	s2,s2,a5
    80203ce0:	01053517          	auipc	a0,0x1053
    80203ce4:	ef050513          	addi	a0,a0,-272 # 81256bd0 <FatFs>
    80203ce8:	992a                	add	s2,s2,a0
    struct fs * self_fs = &FatFs[dp->dev];
    80203cea:	11494983          	lbu	s3,276(s2)
    80203cee:	6795                	lui	a5,0x5
    80203cf0:	9b878793          	addi	a5,a5,-1608 # 49b8 <_entry-0x801fb648>
    80203cf4:	02f989b3          	mul	s3,s3,a5
    80203cf8:	01053797          	auipc	a5,0x1053
    80203cfc:	ed878793          	addi	a5,a5,-296 # 81256bd0 <FatFs>
    80203d00:	99be                	add	s3,s3,a5

    union dentry de;
    int cnt = 0;
    memset(ep->filename, 0, FAT32_MAX_FILENAME + 1);
    80203d02:	8d5e                	mv	s10,s7
    80203d04:	10000613          	li	a2,256
    80203d08:	4581                	li	a1,0
    80203d0a:	855e                	mv	a0,s7
    80203d0c:	ffffd097          	auipc	ra,0xffffd
    80203d10:	068080e7          	jalr	104(ra) # 80200d74 <memset>
    int cnt = 0;
    80203d14:	4a81                	li	s5,0

    for (int off2; (off2 = reloc_clus(self_fs, dp, off, 0)) != -1; off += 32) {
    80203d16:	5b7d                	li	s6,-1
        if (rw_clus(self_fs, dp->cur_clus, 0, 0, (uint64)&de, off2, 32) != 32 || de.lne.order == END_OF_ENTRY) {//?????
            return -1;
        }
        if (de.lne.order == EMPTY_ENTRY) {
    80203d18:	0e500c13          	li	s8,229
            continue;
        } else if (cnt) {
            *count = cnt;
            return 0;
        }
        if (de.lne.attr == ATTR_LONG_NAME) {
    80203d1c:	4cbd                	li	s9,15
    for (int off2; (off2 = reloc_clus(self_fs, dp, off, 0)) != -1; off += 32) {
    80203d1e:	a085                	j	80203d7e <enext+0xfc>
        panic("enext not dir");
    80203d20:	00010517          	auipc	a0,0x10
    80203d24:	74050513          	addi	a0,a0,1856 # 80214460 <rodata_start+0x460>
    80203d28:	00005097          	auipc	ra,0x5
    80203d2c:	522080e7          	jalr	1314(ra) # 8020924a <panic>
        panic("enext ep valid");
    80203d30:	00010517          	auipc	a0,0x10
    80203d34:	74050513          	addi	a0,a0,1856 # 80214470 <rodata_start+0x470>
    80203d38:	00005097          	auipc	ra,0x5
    80203d3c:	512080e7          	jalr	1298(ra) # 8020924a <panic>
        panic("enext not align");
    80203d40:	00010517          	auipc	a0,0x10
    80203d44:	74050513          	addi	a0,a0,1856 # 80214480 <rodata_start+0x480>
    80203d48:	00005097          	auipc	ra,0x5
    80203d4c:	502080e7          	jalr	1282(ra) # 8020924a <panic>
            cnt++;
    80203d50:	2a85                	addiw	s5,s5,1
            continue;
    80203d52:	a025                	j	80203d7a <enext+0xf8>
            *count = cnt;
    80203d54:	015a2023          	sw	s5,0(s4)
            return 0;
    80203d58:	4501                	li	a0,0
    80203d5a:	a8d9                	j	80203e30 <enext+0x1ae>
            int lcnt = de.lne.order & ~LAST_LONG_ENTRY;
            if (de.lne.order & LAST_LONG_ENTRY) {
                *count = lcnt + 1;                              // plus the s-n-e;
                count = 0;
            }
            read_entry_name(ep->filename + (lcnt - 1) * CHAR_LONG_NAME, &de);
    80203d5c:	fff5079b          	addiw	a5,a0,-1
    80203d60:	0017951b          	slliw	a0,a5,0x1
    80203d64:	9d3d                	addw	a0,a0,a5
    80203d66:	0025151b          	slliw	a0,a0,0x2
    80203d6a:	9d3d                	addw	a0,a0,a5
    80203d6c:	f8040593          	addi	a1,s0,-128
    80203d70:	956a                	add	a0,a0,s10
    80203d72:	fffff097          	auipc	ra,0xfffff
    80203d76:	e72080e7          	jalr	-398(ra) # 80202be4 <read_entry_name>
    for (int off2; (off2 = reloc_clus(self_fs, dp, off, 0)) != -1; off += 32) {
    80203d7a:	0204849b          	addiw	s1,s1,32
    80203d7e:	4681                	li	a3,0
    80203d80:	8626                	mv	a2,s1
    80203d82:	85ca                	mv	a1,s2
    80203d84:	854e                	mv	a0,s3
    80203d86:	fffff097          	auipc	ra,0xfffff
    80203d8a:	a96080e7          	jalr	-1386(ra) # 8020281c <reloc_clus>
    80203d8e:	0b650163          	beq	a0,s6,80203e30 <enext+0x1ae>
        if (rw_clus(self_fs, dp->cur_clus, 0, 0, (uint64)&de, off2, 32) != 32 || de.lne.order == END_OF_ENTRY) {//?????
    80203d92:	02000813          	li	a6,32
    80203d96:	0005079b          	sext.w	a5,a0
    80203d9a:	f8040713          	addi	a4,s0,-128
    80203d9e:	4681                	li	a3,0
    80203da0:	4601                	li	a2,0
    80203da2:	10c92583          	lw	a1,268(s2)
    80203da6:	854e                	mv	a0,s3
    80203da8:	fffff097          	auipc	ra,0xfffff
    80203dac:	b84080e7          	jalr	-1148(ra) # 8020292c <rw_clus>
    80203db0:	2501                	sext.w	a0,a0
    80203db2:	02000793          	li	a5,32
    80203db6:	06f51c63          	bne	a0,a5,80203e2e <enext+0x1ac>
    80203dba:	f8044783          	lbu	a5,-128(s0)
    80203dbe:	c7d9                	beqz	a5,80203e4c <enext+0x1ca>
        if (de.lne.order == EMPTY_ENTRY) {
    80203dc0:	f98788e3          	beq	a5,s8,80203d50 <enext+0xce>
        } else if (cnt) {
    80203dc4:	f80a98e3          	bnez	s5,80203d54 <enext+0xd2>
        if (de.lne.attr == ATTR_LONG_NAME) {
    80203dc8:	f8b44703          	lbu	a4,-117(s0)
    80203dcc:	01971d63          	bne	a4,s9,80203de6 <enext+0x164>
            int lcnt = de.lne.order & ~LAST_LONG_ENTRY;
    80203dd0:	0bf7f513          	andi	a0,a5,191
            if (de.lne.order & LAST_LONG_ENTRY) {
    80203dd4:	0407f793          	andi	a5,a5,64
    80203dd8:	d3d1                	beqz	a5,80203d5c <enext+0xda>
                *count = lcnt + 1;                              // plus the s-n-e;
    80203dda:	0015079b          	addiw	a5,a0,1
    80203dde:	00fa2023          	sw	a5,0(s4)
                count = 0;
    80203de2:	4a01                	li	s4,0
    80203de4:	bfa5                	j	80203d5c <enext+0xda>
        } else {
            if (count) {
    80203de6:	000a0c63          	beqz	s4,80203dfe <enext+0x17c>
                *count = 1;
    80203dea:	4785                	li	a5,1
    80203dec:	00fa2023          	sw	a5,0(s4)
                read_entry_name(ep->filename, &de);
    80203df0:	f8040593          	addi	a1,s0,-128
    80203df4:	855e                	mv	a0,s7
    80203df6:	fffff097          	auipc	ra,0xfffff
    80203dfa:	dee080e7          	jalr	-530(ra) # 80202be4 <read_entry_name>
    entry->attribute = d->sne.attr;
    80203dfe:	f8b44783          	lbu	a5,-117(s0)
    80203e02:	10fb8023          	sb	a5,256(s7)
    entry->first_clus = ((uint32)d->sne.fst_clus_hi << 16) | d->sne.fst_clus_lo;
    80203e06:	f9445783          	lhu	a5,-108(s0)
    80203e0a:	0107979b          	slliw	a5,a5,0x10
    80203e0e:	f9a45703          	lhu	a4,-102(s0)
    80203e12:	8fd9                	or	a5,a5,a4
    80203e14:	2781                	sext.w	a5,a5
    80203e16:	10fba223          	sw	a5,260(s7)
    entry->file_size = d->sne.file_size;
    80203e1a:	f9c42703          	lw	a4,-100(s0)
    80203e1e:	10eba423          	sw	a4,264(s7)
    entry->cur_clus = entry->first_clus;
    80203e22:	10fba623          	sw	a5,268(s7)
    entry->clus_cnt = 0;
    80203e26:	100ba823          	sw	zero,272(s7)
            }
            read_entry_info(ep, &de);
            return 1;
    80203e2a:	4505                	li	a0,1
}
    80203e2c:	a011                	j	80203e30 <enext+0x1ae>
            return -1;
    80203e2e:	557d                	li	a0,-1
        }
    }

    return -1;
}
    80203e30:	70e6                	ld	ra,120(sp)
    80203e32:	7446                	ld	s0,112(sp)
    80203e34:	74a6                	ld	s1,104(sp)
    80203e36:	7906                	ld	s2,96(sp)
    80203e38:	69e6                	ld	s3,88(sp)
    80203e3a:	6a46                	ld	s4,80(sp)
    80203e3c:	6aa6                	ld	s5,72(sp)
    80203e3e:	6b06                	ld	s6,64(sp)
    80203e40:	7be2                	ld	s7,56(sp)
    80203e42:	7c42                	ld	s8,48(sp)
    80203e44:	7ca2                	ld	s9,40(sp)
    80203e46:	7d02                	ld	s10,32(sp)
    80203e48:	6109                	addi	sp,sp,128
    80203e4a:	8082                	ret
            return -1;
    80203e4c:	557d                	li	a0,-1
    80203e4e:	b7cd                	j	80203e30 <enext+0x1ae>

0000000080203e50 <dirlookup>:
 * @param   dp          entry of a directory file
 * @param   filename    target filename
 * @param   poff        offset of proper empty entry slots from the beginning of the dir
 */
struct dirent *dirlookup(struct dirent *dp, char *filename, uint *poff)
{
    80203e50:	715d                	addi	sp,sp,-80
    80203e52:	e486                	sd	ra,72(sp)
    80203e54:	e0a2                	sd	s0,64(sp)
    80203e56:	fc26                	sd	s1,56(sp)
    80203e58:	f84a                	sd	s2,48(sp)
    80203e5a:	f44e                	sd	s3,40(sp)
    80203e5c:	f052                	sd	s4,32(sp)
    80203e5e:	ec56                	sd	s5,24(sp)
    80203e60:	e85a                	sd	s6,16(sp)
    80203e62:	0880                	addi	s0,sp,80
    struct fs * self_fs = &FatFs[dp->dev];
    80203e64:	11454a03          	lbu	s4,276(a0)
    if (!(dp->attribute & ATTR_DIRECTORY))
    80203e68:	10054783          	lbu	a5,256(a0)
    80203e6c:	8bc1                	andi	a5,a5,16
    80203e6e:	c3bd                	beqz	a5,80203ed4 <dirlookup+0x84>
    80203e70:	84aa                	mv	s1,a0
    80203e72:	89ae                	mv	s3,a1
    80203e74:	8ab2                	mv	s5,a2
        panic("dirlookup not DIR");
    if (strncmp(filename, ".", FAT32_MAX_FILENAME) == 0) {
    80203e76:	0ff00613          	li	a2,255
    80203e7a:	00010597          	auipc	a1,0x10
    80203e7e:	62e58593          	addi	a1,a1,1582 # 802144a8 <rodata_start+0x4a8>
    80203e82:	854e                	mv	a0,s3
    80203e84:	ffffd097          	auipc	ra,0xffffd
    80203e88:	fcc080e7          	jalr	-52(ra) # 80200e50 <strncmp>
    80203e8c:	cd21                	beqz	a0,80203ee4 <dirlookup+0x94>
        return edup(dp);
    } else if (strncmp(filename, "..", FAT32_MAX_FILENAME) == 0) {
    80203e8e:	0ff00613          	li	a2,255
    80203e92:	00010597          	auipc	a1,0x10
    80203e96:	61e58593          	addi	a1,a1,1566 # 802144b0 <rodata_start+0x4b0>
    80203e9a:	854e                	mv	a0,s3
    80203e9c:	ffffd097          	auipc	ra,0xffffd
    80203ea0:	fb4080e7          	jalr	-76(ra) # 80200e50 <strncmp>
    80203ea4:	e925                	bnez	a0,80203f14 <dirlookup+0xc4>
        if (dp == &self_fs->root) {
    80203ea6:	6715                	lui	a4,0x5
    80203ea8:	9b870793          	addi	a5,a4,-1608 # 49b8 <_entry-0x801fb648>
    80203eac:	02fa07b3          	mul	a5,s4,a5
    80203eb0:	83070713          	addi	a4,a4,-2000
    80203eb4:	97ba                	add	a5,a5,a4
    80203eb6:	01053717          	auipc	a4,0x1053
    80203eba:	d1a70713          	addi	a4,a4,-742 # 81256bd0 <FatFs>
    80203ebe:	97ba                	add	a5,a5,a4
    80203ec0:	04f48363          	beq	s1,a5,80203f06 <dirlookup+0xb6>
            return edup(&self_fs->root);
        }
        return edup(dp->parent);
    80203ec4:	1284b503          	ld	a0,296(s1)
    80203ec8:	00000097          	auipc	ra,0x0
    80203ecc:	8d4080e7          	jalr	-1836(ra) # 8020379c <edup>
    80203ed0:	892a                	mv	s2,a0
    80203ed2:	a839                	j	80203ef0 <dirlookup+0xa0>
        panic("dirlookup not DIR");
    80203ed4:	00010517          	auipc	a0,0x10
    80203ed8:	5bc50513          	addi	a0,a0,1468 # 80214490 <rodata_start+0x490>
    80203edc:	00005097          	auipc	ra,0x5
    80203ee0:	36e080e7          	jalr	878(ra) # 8020924a <panic>
        return edup(dp);
    80203ee4:	8526                	mv	a0,s1
    80203ee6:	00000097          	auipc	ra,0x0
    80203eea:	8b6080e7          	jalr	-1866(ra) # 8020379c <edup>
    80203eee:	892a                	mv	s2,a0
    if (poff) {
        *poff = off;
    }
    eput(ep);
    return NULL;
}
    80203ef0:	854a                	mv	a0,s2
    80203ef2:	60a6                	ld	ra,72(sp)
    80203ef4:	6406                	ld	s0,64(sp)
    80203ef6:	74e2                	ld	s1,56(sp)
    80203ef8:	7942                	ld	s2,48(sp)
    80203efa:	79a2                	ld	s3,40(sp)
    80203efc:	7a02                	ld	s4,32(sp)
    80203efe:	6ae2                	ld	s5,24(sp)
    80203f00:	6b42                	ld	s6,16(sp)
    80203f02:	6161                	addi	sp,sp,80
    80203f04:	8082                	ret
            return edup(&self_fs->root);
    80203f06:	8526                	mv	a0,s1
    80203f08:	00000097          	auipc	ra,0x0
    80203f0c:	894080e7          	jalr	-1900(ra) # 8020379c <edup>
    80203f10:	892a                	mv	s2,a0
    80203f12:	bff9                	j	80203ef0 <dirlookup+0xa0>
    if (dp->valid != 1) {
    80203f14:	11649703          	lh	a4,278(s1)
    80203f18:	4785                	li	a5,1
        return NULL;
    80203f1a:	4901                	li	s2,0
    if (dp->valid != 1) {
    80203f1c:	fcf71ae3          	bne	a4,a5,80203ef0 <dirlookup+0xa0>
    if(dp->mnt) dp = &(FatFs[dp->dev].root);
    80203f20:	11c4a783          	lw	a5,284(s1)
    80203f24:	c385                	beqz	a5,80203f44 <dirlookup+0xf4>
    80203f26:	1144c483          	lbu	s1,276(s1)
    80203f2a:	6795                	lui	a5,0x5
    80203f2c:	9b878713          	addi	a4,a5,-1608 # 49b8 <_entry-0x801fb648>
    80203f30:	02e484b3          	mul	s1,s1,a4
    80203f34:	83078793          	addi	a5,a5,-2000
    80203f38:	94be                	add	s1,s1,a5
    80203f3a:	01053517          	auipc	a0,0x1053
    80203f3e:	c9650513          	addi	a0,a0,-874 # 81256bd0 <FatFs>
    80203f42:	94aa                	add	s1,s1,a0
    struct dirent *ep = eget(dp, filename);
    80203f44:	85ce                	mv	a1,s3
    80203f46:	8526                	mv	a0,s1
    80203f48:	fffff097          	auipc	ra,0xfffff
    80203f4c:	b30080e7          	jalr	-1232(ra) # 80202a78 <eget>
    80203f50:	892a                	mv	s2,a0
    if (ep->valid == 1) { return ep; }                               // self_fs->ecache hits
    80203f52:	11651703          	lh	a4,278(a0)
    80203f56:	4785                	li	a5,1
    80203f58:	f8f70ce3          	beq	a4,a5,80203ef0 <dirlookup+0xa0>
    int len = strlen(filename);
    80203f5c:	854e                	mv	a0,s3
    80203f5e:	ffffd097          	auipc	ra,0xffffd
    80203f62:	f9e080e7          	jalr	-98(ra) # 80200efc <strlen>
    int count = 0;
    80203f66:	fa042e23          	sw	zero,-68(s0)
    struct fs * self_fs = &FatFs[dp->dev];
    80203f6a:	6795                	lui	a5,0x5
    80203f6c:	9b878793          	addi	a5,a5,-1608 # 49b8 <_entry-0x801fb648>
    80203f70:	02fa07b3          	mul	a5,s4,a5
    reloc_clus(self_fs, dp, 0, 0);
    80203f74:	4681                	li	a3,0
    80203f76:	4601                	li	a2,0
    80203f78:	85a6                	mv	a1,s1
    80203f7a:	01053517          	auipc	a0,0x1053
    80203f7e:	c5650513          	addi	a0,a0,-938 # 81256bd0 <FatFs>
    80203f82:	953e                	add	a0,a0,a5
    80203f84:	fffff097          	auipc	ra,0xfffff
    80203f88:	898080e7          	jalr	-1896(ra) # 8020281c <reloc_clus>
    uint off = 0;
    80203f8c:	4a01                	li	s4,0
    while ((type = enext(dp, ep, off, &count) != -1)) {//?????
    80203f8e:	5b7d                	li	s6,-1
    80203f90:	fbc40693          	addi	a3,s0,-68
    80203f94:	8652                	mv	a2,s4
    80203f96:	85ca                	mv	a1,s2
    80203f98:	8526                	mv	a0,s1
    80203f9a:	00000097          	auipc	ra,0x0
    80203f9e:	ce8080e7          	jalr	-792(ra) # 80203c82 <enext>
    80203fa2:	03650f63          	beq	a0,s6,80203fe0 <dirlookup+0x190>
        } else if (strncmp(filename, ep->filename, FAT32_MAX_FILENAME) == 0) {
    80203fa6:	0ff00613          	li	a2,255
    80203faa:	85ca                	mv	a1,s2
    80203fac:	854e                	mv	a0,s3
    80203fae:	ffffd097          	auipc	ra,0xffffd
    80203fb2:	ea2080e7          	jalr	-350(ra) # 80200e50 <strncmp>
    80203fb6:	c901                	beqz	a0,80203fc6 <dirlookup+0x176>
        off += count << 5;
    80203fb8:	fbc42783          	lw	a5,-68(s0)
    80203fbc:	0057979b          	slliw	a5,a5,0x5
    80203fc0:	01478a3b          	addw	s4,a5,s4
    80203fc4:	b7f1                	j	80203f90 <dirlookup+0x140>
            ep->parent = edup(dp);
    80203fc6:	8526                	mv	a0,s1
    80203fc8:	fffff097          	auipc	ra,0xfffff
    80203fcc:	7d4080e7          	jalr	2004(ra) # 8020379c <edup>
    80203fd0:	12a93423          	sd	a0,296(s2)
            ep->off = off;
    80203fd4:	13492023          	sw	s4,288(s2)
            ep->valid = 1;
    80203fd8:	4785                	li	a5,1
    80203fda:	10f91b23          	sh	a5,278(s2)
            return ep;
    80203fde:	bf09                	j	80203ef0 <dirlookup+0xa0>
    if (poff) {
    80203fe0:	000a8463          	beqz	s5,80203fe8 <dirlookup+0x198>
        *poff = off;
    80203fe4:	014aa023          	sw	s4,0(s5)
    eput(ep);
    80203fe8:	854a                	mv	a0,s2
    80203fea:	00000097          	auipc	ra,0x0
    80203fee:	b04080e7          	jalr	-1276(ra) # 80203aee <eput>
    return NULL;
    80203ff2:	4901                	li	s2,0
    80203ff4:	bdf5                	j	80203ef0 <dirlookup+0xa0>

0000000080203ff6 <ealloc>:
{
    80203ff6:	715d                	addi	sp,sp,-80
    80203ff8:	e486                	sd	ra,72(sp)
    80203ffa:	e0a2                	sd	s0,64(sp)
    80203ffc:	fc26                	sd	s1,56(sp)
    80203ffe:	f84a                	sd	s2,48(sp)
    80204000:	f44e                	sd	s3,40(sp)
    80204002:	f052                	sd	s4,32(sp)
    80204004:	ec56                	sd	s5,24(sp)
    80204006:	0880                	addi	s0,sp,80
    80204008:	84aa                	mv	s1,a0
    8020400a:	852e                	mv	a0,a1
    8020400c:	89b2                	mv	s3,a2
    if(dp->mnt) dp = &(FatFs[dp->dev].root);
    8020400e:	11c4a783          	lw	a5,284(s1)
    80204012:	c385                	beqz	a5,80204032 <ealloc+0x3c>
    80204014:	1144c483          	lbu	s1,276(s1)
    80204018:	6795                	lui	a5,0x5
    8020401a:	9b878713          	addi	a4,a5,-1608 # 49b8 <_entry-0x801fb648>
    8020401e:	02e484b3          	mul	s1,s1,a4
    80204022:	83078793          	addi	a5,a5,-2000
    80204026:	94be                	add	s1,s1,a5
    80204028:	01053797          	auipc	a5,0x1053
    8020402c:	ba878793          	addi	a5,a5,-1112 # 81256bd0 <FatFs>
    80204030:	94be                	add	s1,s1,a5
    if (!(dp->attribute & ATTR_DIRECTORY)) {
    80204032:	1004c783          	lbu	a5,256(s1)
    80204036:	8bc1                	andi	a5,a5,16
    80204038:	c7b1                	beqz	a5,80204084 <ealloc+0x8e>
    if (dp->valid != 1 || !(name = formatname(name))) {        // detect illegal character
    8020403a:	11649703          	lh	a4,278(s1)
    8020403e:	4785                	li	a5,1
        return NULL;
    80204040:	4901                	li	s2,0
    if (dp->valid != 1 || !(name = formatname(name))) {        // detect illegal character
    80204042:	02f71763          	bne	a4,a5,80204070 <ealloc+0x7a>
    struct fs * self_fs = &FatFs[dp->dev];
    80204046:	1144ca83          	lbu	s5,276(s1)
    if (dp->valid != 1 || !(name = formatname(name))) {        // detect illegal character
    8020404a:	fffff097          	auipc	ra,0xfffff
    8020404e:	2b2080e7          	jalr	690(ra) # 802032fc <formatname>
    80204052:	8a2a                	mv	s4,a0
    80204054:	12050163          	beqz	a0,80204176 <ealloc+0x180>
    uint off = 0;
    80204058:	fa042e23          	sw	zero,-68(s0)
    if ((ep = dirlookup(dp, name, &off)) != 0) {      // entry exists
    8020405c:	fbc40613          	addi	a2,s0,-68
    80204060:	85aa                	mv	a1,a0
    80204062:	8526                	mv	a0,s1
    80204064:	00000097          	auipc	ra,0x0
    80204068:	dec080e7          	jalr	-532(ra) # 80203e50 <dirlookup>
    8020406c:	892a                	mv	s2,a0
    8020406e:	c11d                	beqz	a0,80204094 <ealloc+0x9e>
}
    80204070:	854a                	mv	a0,s2
    80204072:	60a6                	ld	ra,72(sp)
    80204074:	6406                	ld	s0,64(sp)
    80204076:	74e2                	ld	s1,56(sp)
    80204078:	7942                	ld	s2,48(sp)
    8020407a:	79a2                	ld	s3,40(sp)
    8020407c:	7a02                	ld	s4,32(sp)
    8020407e:	6ae2                	ld	s5,24(sp)
    80204080:	6161                	addi	sp,sp,80
    80204082:	8082                	ret
        panic("ealloc not dir");
    80204084:	00010517          	auipc	a0,0x10
    80204088:	43450513          	addi	a0,a0,1076 # 802144b8 <rodata_start+0x4b8>
    8020408c:	00005097          	auipc	ra,0x5
    80204090:	1be080e7          	jalr	446(ra) # 8020924a <panic>
    ep = eget(dp, name);
    80204094:	85d2                	mv	a1,s4
    80204096:	8526                	mv	a0,s1
    80204098:	fffff097          	auipc	ra,0xfffff
    8020409c:	9e0080e7          	jalr	-1568(ra) # 80202a78 <eget>
    802040a0:	892a                	mv	s2,a0
    elock(ep);
    802040a2:	00000097          	auipc	ra,0x0
    802040a6:	9c8080e7          	jalr	-1592(ra) # 80203a6a <elock>
    ep->attribute = attr;
    802040aa:	11390023          	sb	s3,256(s2)
    ep->file_size = 0;
    802040ae:	10092423          	sw	zero,264(s2)
    ep->first_clus = 0;
    802040b2:	10092223          	sw	zero,260(s2)
    ep->parent = edup(dp);
    802040b6:	8526                	mv	a0,s1
    802040b8:	fffff097          	auipc	ra,0xfffff
    802040bc:	6e4080e7          	jalr	1764(ra) # 8020379c <edup>
    802040c0:	12a93423          	sd	a0,296(s2)
    ep->off = off;
    802040c4:	fbc42783          	lw	a5,-68(s0)
    802040c8:	12f92023          	sw	a5,288(s2)
    ep->clus_cnt = 0;
    802040cc:	10092823          	sw	zero,272(s2)
    ep->cur_clus = 0;
    802040d0:	10092623          	sw	zero,268(s2)
    ep->dirty = 0;
    802040d4:	10090aa3          	sb	zero,277(s2)
    strncpy(ep->filename, name, FAT32_MAX_FILENAME);
    802040d8:	0ff00613          	li	a2,255
    802040dc:	85d2                	mv	a1,s4
    802040de:	854a                	mv	a0,s2
    802040e0:	ffffd097          	auipc	ra,0xffffd
    802040e4:	dac080e7          	jalr	-596(ra) # 80200e8c <strncpy>
    ep->filename[FAT32_MAX_FILENAME] = '\0';
    802040e8:	0e090fa3          	sb	zero,255(s2)
    if (attr == ATTR_DIRECTORY) {    // generate "." and ".." for ep
    802040ec:	47c1                	li	a5,16
    802040ee:	02f98963          	beq	s3,a5,80204120 <ealloc+0x12a>
        ep->attribute |= ATTR_ARCHIVE;
    802040f2:	10094783          	lbu	a5,256(s2)
    802040f6:	0207e793          	ori	a5,a5,32
    802040fa:	10f90023          	sb	a5,256(s2)
    emake(dp, ep, off);
    802040fe:	fbc42603          	lw	a2,-68(s0)
    80204102:	85ca                	mv	a1,s2
    80204104:	8526                	mv	a0,s1
    80204106:	fffff097          	auipc	ra,0xfffff
    8020410a:	2ae080e7          	jalr	686(ra) # 802033b4 <emake>
    ep->valid = 1;
    8020410e:	4785                	li	a5,1
    80204110:	10f91b23          	sh	a5,278(s2)
    eunlock(ep);
    80204114:	854a                	mv	a0,s2
    80204116:	00000097          	auipc	ra,0x0
    8020411a:	98a080e7          	jalr	-1654(ra) # 80203aa0 <eunlock>
    return ep;
    8020411e:	bf89                	j	80204070 <ealloc+0x7a>
        ep->attribute |= ATTR_DIRECTORY;
    80204120:	10094783          	lbu	a5,256(s2)
    80204124:	0107e793          	ori	a5,a5,16
    80204128:	10f90023          	sb	a5,256(s2)
    struct fs * self_fs = &FatFs[dp->dev];
    8020412c:	6515                	lui	a0,0x5
    8020412e:	9b850513          	addi	a0,a0,-1608 # 49b8 <_entry-0x801fb648>
    80204132:	02aa8ab3          	mul	s5,s5,a0
        ep->cur_clus = ep->first_clus = alloc_clus(self_fs, dp->dev);
    80204136:	1144c583          	lbu	a1,276(s1)
    8020413a:	01053517          	auipc	a0,0x1053
    8020413e:	a9650513          	addi	a0,a0,-1386 # 81256bd0 <FatFs>
    80204142:	9556                	add	a0,a0,s5
    80204144:	ffffe097          	auipc	ra,0xffffe
    80204148:	538080e7          	jalr	1336(ra) # 8020267c <alloc_clus>
    8020414c:	2501                	sext.w	a0,a0
    8020414e:	10a92223          	sw	a0,260(s2)
    80204152:	10a92623          	sw	a0,268(s2)
        emake(ep, ep, 0);
    80204156:	4601                	li	a2,0
    80204158:	85ca                	mv	a1,s2
    8020415a:	854a                	mv	a0,s2
    8020415c:	fffff097          	auipc	ra,0xfffff
    80204160:	258080e7          	jalr	600(ra) # 802033b4 <emake>
        emake(ep, dp, 32);
    80204164:	02000613          	li	a2,32
    80204168:	85a6                	mv	a1,s1
    8020416a:	854a                	mv	a0,s2
    8020416c:	fffff097          	auipc	ra,0xfffff
    80204170:	248080e7          	jalr	584(ra) # 802033b4 <emake>
    80204174:	b769                	j	802040fe <ealloc+0x108>
        return NULL;
    80204176:	892a                	mv	s2,a0
    80204178:	bde5                	j	80204070 <ealloc+0x7a>

000000008020417a <lookup_path>:
}


// FAT32 version of namex in xv6's original file system.
static struct dirent *lookup_path(struct dirent* env,char *path, int parent, char *name,int* devno)
{
    8020417a:	711d                	addi	sp,sp,-96
    8020417c:	ec86                	sd	ra,88(sp)
    8020417e:	e8a2                	sd	s0,80(sp)
    80204180:	e4a6                	sd	s1,72(sp)
    80204182:	e0ca                	sd	s2,64(sp)
    80204184:	fc4e                	sd	s3,56(sp)
    80204186:	f852                	sd	s4,48(sp)
    80204188:	f456                	sd	s5,40(sp)
    8020418a:	f05a                	sd	s6,32(sp)
    8020418c:	ec5e                	sd	s7,24(sp)
    8020418e:	e862                	sd	s8,16(sp)
    80204190:	e466                	sd	s9,8(sp)
    80204192:	e06a                	sd	s10,0(sp)
    80204194:	1080                	addi	s0,sp,96
    80204196:	892e                	mv	s2,a1
    80204198:	8bb2                	mv	s7,a2
    8020419a:	8ab6                	mv	s5,a3
    8020419c:	8b3a                	mv	s6,a4
    struct dirent *entry, *next;
    
    struct fs * self_fs;
    if(devno)*devno = -1;
    8020419e:	c319                	beqz	a4,802041a4 <lookup_path+0x2a>
    802041a0:	57fd                	li	a5,-1
    802041a2:	c31c                	sw	a5,0(a4)
    if (*path == '/') {
    802041a4:	00094783          	lbu	a5,0(s2)
    802041a8:	02f00713          	li	a4,47
    802041ac:	02e78363          	beq	a5,a4,802041d2 <lookup_path+0x58>
        self_fs = &FatFs[0];
        entry = edup(&self_fs->root);
    } else if(env){
    802041b0:	c91d                	beqz	a0,802041e6 <lookup_path+0x6c>
        entry = edup(env); 
    802041b2:	fffff097          	auipc	ra,0xfffff
    802041b6:	5ea080e7          	jalr	1514(ra) # 8020379c <edup>
    802041ba:	89aa                	mv	s3,a0
    while (*path == '/') {
    802041bc:	02f00a13          	li	s4,47
    802041c0:	0ff00c13          	li	s8,255
    802041c4:	0ff00d13          	li	s10,255
        return NULL;
    }

    while ((path = skipelem(path, name)) != 0) {
        elock(entry);
        if(devno&&entry == dev){
    802041c8:	0516ac97          	auipc	s9,0x516a
    802041cc:	df8c8c93          	addi	s9,s9,-520 # 8536dfc0 <dev>
    802041d0:	aa0d                	j	80204302 <lookup_path+0x188>
        entry = edup(&self_fs->root);
    802041d2:	01057517          	auipc	a0,0x1057
    802041d6:	22e50513          	addi	a0,a0,558 # 8125b400 <FatFs+0x4830>
    802041da:	fffff097          	auipc	ra,0xfffff
    802041de:	5c2080e7          	jalr	1474(ra) # 8020379c <edup>
    802041e2:	89aa                	mv	s3,a0
    802041e4:	bfe1                	j	802041bc <lookup_path+0x42>
        return NULL;
    802041e6:	89aa                	mv	s3,a0
    } else if (*path != '\0') {
    802041e8:	cba1                	beqz	a5,80204238 <lookup_path+0xbe>
        self_fs = &FatFs[myproc()->cwd->dev];
    802041ea:	00008097          	auipc	ra,0x8
    802041ee:	1c8080e7          	jalr	456(ra) # 8020c3b2 <myproc>
        entry = edup(myproc()->cwd);
    802041f2:	00008097          	auipc	ra,0x8
    802041f6:	1c0080e7          	jalr	448(ra) # 8020c3b2 <myproc>
    802041fa:	7d68                	ld	a0,248(a0)
    802041fc:	fffff097          	auipc	ra,0xfffff
    80204200:	5a0080e7          	jalr	1440(ra) # 8020379c <edup>
    80204204:	89aa                	mv	s3,a0
    80204206:	bf5d                	j	802041bc <lookup_path+0x42>
          eunlock(entry);
    80204208:	854e                	mv	a0,s3
    8020420a:	00000097          	auipc	ra,0x0
    8020420e:	896080e7          	jalr	-1898(ra) # 80203aa0 <eunlock>
          *devno = devlookup(name);
    80204212:	8556                	mv	a0,s5
    80204214:	00004097          	auipc	ra,0x4
    80204218:	58c080e7          	jalr	1420(ra) # 802087a0 <devlookup>
    8020421c:	00ab2023          	sw	a0,0(s6)
          return entry;
    80204220:	a821                	j	80204238 <lookup_path+0xbe>
        }
        if (!(entry->attribute & ATTR_DIRECTORY)) {
            eunlock(entry);
    80204222:	854e                	mv	a0,s3
    80204224:	00000097          	auipc	ra,0x0
    80204228:	87c080e7          	jalr	-1924(ra) # 80203aa0 <eunlock>
            eput(entry);
    8020422c:	854e                	mv	a0,s3
    8020422e:	00000097          	auipc	ra,0x0
    80204232:	8c0080e7          	jalr	-1856(ra) # 80203aee <eput>
            return NULL;
    80204236:	4981                	li	s3,0
    if (parent) {
        eput(entry);
        return NULL;
    }
    return entry;
}
    80204238:	854e                	mv	a0,s3
    8020423a:	60e6                	ld	ra,88(sp)
    8020423c:	6446                	ld	s0,80(sp)
    8020423e:	64a6                	ld	s1,72(sp)
    80204240:	6906                	ld	s2,64(sp)
    80204242:	79e2                	ld	s3,56(sp)
    80204244:	7a42                	ld	s4,48(sp)
    80204246:	7aa2                	ld	s5,40(sp)
    80204248:	7b02                	ld	s6,32(sp)
    8020424a:	6be2                	ld	s7,24(sp)
    8020424c:	6c42                	ld	s8,16(sp)
    8020424e:	6ca2                	ld	s9,8(sp)
    80204250:	6d02                	ld	s10,0(sp)
    80204252:	6125                	addi	sp,sp,96
    80204254:	8082                	ret
            eunlock(entry);
    80204256:	854e                	mv	a0,s3
    80204258:	00000097          	auipc	ra,0x0
    8020425c:	848080e7          	jalr	-1976(ra) # 80203aa0 <eunlock>
            return entry;
    80204260:	bfe1                	j	80204238 <lookup_path+0xbe>
            eunlock(entry);
    80204262:	854e                	mv	a0,s3
    80204264:	00000097          	auipc	ra,0x0
    80204268:	83c080e7          	jalr	-1988(ra) # 80203aa0 <eunlock>
            eput(entry);
    8020426c:	854e                	mv	a0,s3
    8020426e:	00000097          	auipc	ra,0x0
    80204272:	880080e7          	jalr	-1920(ra) # 80203aee <eput>
            return NULL;
    80204276:	89ca                	mv	s3,s2
    80204278:	b7c1                	j	80204238 <lookup_path+0xbe>
    int len = path - s;
    8020427a:	412487bb          	subw	a5,s1,s2
    if (len > FAT32_MAX_FILENAME) {
    8020427e:	863e                	mv	a2,a5
    80204280:	00fc5363          	bge	s8,a5,80204286 <lookup_path+0x10c>
    80204284:	866a                	mv	a2,s10
    80204286:	0006079b          	sext.w	a5,a2
    name[len] = 0;
    8020428a:	97d6                	add	a5,a5,s5
    8020428c:	00078023          	sb	zero,0(a5)
    memmove(name, s, len);
    80204290:	2601                	sext.w	a2,a2
    80204292:	85ca                	mv	a1,s2
    80204294:	8556                	mv	a0,s5
    80204296:	ffffd097          	auipc	ra,0xffffd
    8020429a:	b3e080e7          	jalr	-1218(ra) # 80200dd4 <memmove>
    while (*path == '/') {
    8020429e:	0004c783          	lbu	a5,0(s1)
    802042a2:	01479763          	bne	a5,s4,802042b0 <lookup_path+0x136>
        path++;
    802042a6:	0485                	addi	s1,s1,1
    while (*path == '/') {
    802042a8:	0004c783          	lbu	a5,0(s1)
    802042ac:	ff478de3          	beq	a5,s4,802042a6 <lookup_path+0x12c>
        elock(entry);
    802042b0:	854e                	mv	a0,s3
    802042b2:	fffff097          	auipc	ra,0xfffff
    802042b6:	7b8080e7          	jalr	1976(ra) # 80203a6a <elock>
        if(devno&&entry == dev){
    802042ba:	000b0663          	beqz	s6,802042c6 <lookup_path+0x14c>
    802042be:	000cb783          	ld	a5,0(s9)
    802042c2:	f53783e3          	beq	a5,s3,80204208 <lookup_path+0x8e>
        if (!(entry->attribute & ATTR_DIRECTORY)) {
    802042c6:	1009c783          	lbu	a5,256(s3)
    802042ca:	8bc1                	andi	a5,a5,16
    802042cc:	dbb9                	beqz	a5,80204222 <lookup_path+0xa8>
        if (parent && *path == '\0') {
    802042ce:	000b8563          	beqz	s7,802042d8 <lookup_path+0x15e>
    802042d2:	0004c783          	lbu	a5,0(s1)
    802042d6:	d3c1                	beqz	a5,80204256 <lookup_path+0xdc>
        if ((next = dirlookup(entry, name, 0)) == 0) {
    802042d8:	4601                	li	a2,0
    802042da:	85d6                	mv	a1,s5
    802042dc:	854e                	mv	a0,s3
    802042de:	00000097          	auipc	ra,0x0
    802042e2:	b72080e7          	jalr	-1166(ra) # 80203e50 <dirlookup>
    802042e6:	892a                	mv	s2,a0
    802042e8:	dd2d                	beqz	a0,80204262 <lookup_path+0xe8>
        eunlock(entry);
    802042ea:	854e                	mv	a0,s3
    802042ec:	fffff097          	auipc	ra,0xfffff
    802042f0:	7b4080e7          	jalr	1972(ra) # 80203aa0 <eunlock>
        eput(entry);
    802042f4:	854e                	mv	a0,s3
    802042f6:	fffff097          	auipc	ra,0xfffff
    802042fa:	7f8080e7          	jalr	2040(ra) # 80203aee <eput>
        entry = next;
    802042fe:	89ca                	mv	s3,s2
        eput(entry);
    80204300:	8926                	mv	s2,s1
    while (*path == '/') {
    80204302:	00094783          	lbu	a5,0(s2)
    80204306:	03479363          	bne	a5,s4,8020432c <lookup_path+0x1b2>
        path++;
    8020430a:	0905                	addi	s2,s2,1
    while (*path == '/') {
    8020430c:	00094783          	lbu	a5,0(s2)
    80204310:	ff478de3          	beq	a5,s4,8020430a <lookup_path+0x190>
    if (*path == 0) { return NULL; }
    80204314:	cf89                	beqz	a5,8020432e <lookup_path+0x1b4>
        path++;
    80204316:	84ca                	mv	s1,s2
    while (*path != '/' && *path != 0) {
    80204318:	f74781e3          	beq	a5,s4,8020427a <lookup_path+0x100>
        eput(entry);
    8020431c:	84ca                	mv	s1,s2
    while (*path != '/' && *path != 0) {
    8020431e:	dfb1                	beqz	a5,8020427a <lookup_path+0x100>
        path++;
    80204320:	0485                	addi	s1,s1,1
    while (*path != '/' && *path != 0) {
    80204322:	0004c783          	lbu	a5,0(s1)
    80204326:	ff479ce3          	bne	a5,s4,8020431e <lookup_path+0x1a4>
    8020432a:	bf81                	j	8020427a <lookup_path+0x100>
    if (*path == 0) { return NULL; }
    8020432c:	fbe5                	bnez	a5,8020431c <lookup_path+0x1a2>
    if (parent) {
    8020432e:	f00b85e3          	beqz	s7,80204238 <lookup_path+0xbe>
        eput(entry);
    80204332:	854e                	mv	a0,s3
    80204334:	fffff097          	auipc	ra,0xfffff
    80204338:	7ba080e7          	jalr	1978(ra) # 80203aee <eput>
        return NULL;
    8020433c:	4981                	li	s3,0
    8020433e:	bded                	j	80204238 <lookup_path+0xbe>

0000000080204340 <isdirempty>:

// Is the directory dp empty except for "." and ".." ?
int
isdirempty(struct dirent *dp)
{
    80204340:	7165                	addi	sp,sp,-400
    80204342:	e706                	sd	ra,392(sp)
    80204344:	e322                	sd	s0,384(sp)
    80204346:	0b00                	addi	s0,sp,400
  struct dirent ep;
  int count;
  int ret;
  ep.valid = 0;
    80204348:	f8041b23          	sh	zero,-106(s0)
  ret = enext(dp, &ep, 2 * 32, &count);   // skip the "." and ".."
    8020434c:	e7c40693          	addi	a3,s0,-388
    80204350:	04000613          	li	a2,64
    80204354:	e8040593          	addi	a1,s0,-384
    80204358:	00000097          	auipc	ra,0x0
    8020435c:	92a080e7          	jalr	-1750(ra) # 80203c82 <enext>
  return ret == -1;
    80204360:	0505                	addi	a0,a0,1
}
    80204362:	00153513          	seqz	a0,a0
    80204366:	60ba                	ld	ra,392(sp)
    80204368:	641a                	ld	s0,384(sp)
    8020436a:	6159                	addi	sp,sp,400
    8020436c:	8082                	ret

000000008020436e <hashpath>:

int hashpath(char* name){
    8020436e:	1141                	addi	sp,sp,-16
    80204370:	e422                	sd	s0,8(sp)
    80204372:	0800                	addi	s0,sp,16
  int hashvalue = 0;
  for(int i = 0;name[i];i++){
    80204374:	00054783          	lbu	a5,0(a0)
    80204378:	cf91                	beqz	a5,80204394 <hashpath+0x26>
    8020437a:	872a                	mv	a4,a0
    8020437c:	0007851b          	sext.w	a0,a5
    80204380:	0705                	addi	a4,a4,1
    hashvalue = hashvalue*128;
    hashvalue += name[i];
    if(hashvalue > NAME_HASH){
    80204382:	000f46b7          	lui	a3,0xf4
    80204386:	24068693          	addi	a3,a3,576 # f4240 <_entry-0x8010bdc0>
      hashvalue = hashvalue%NAME_HASH;
    8020438a:	000f4637          	lui	a2,0xf4
    8020438e:	2406061b          	addiw	a2,a2,576
    80204392:	a031                	j	8020439e <hashpath+0x30>
  int hashvalue = 0;
    80204394:	4501                	li	a0,0
    }
  }
  return hashvalue;
}
    80204396:	6422                	ld	s0,8(sp)
    80204398:	0141                	addi	sp,sp,16
    8020439a:	8082                	ret
    8020439c:	0705                	addi	a4,a4,1
  for(int i = 0;name[i];i++){
    8020439e:	00074783          	lbu	a5,0(a4)
    802043a2:	dbf5                	beqz	a5,80204396 <hashpath+0x28>
    hashvalue = hashvalue*128;
    802043a4:	0075151b          	slliw	a0,a0,0x7
    hashvalue += name[i];
    802043a8:	9fa9                	addw	a5,a5,a0
    802043aa:	0007851b          	sext.w	a0,a5
    if(hashvalue > NAME_HASH){
    802043ae:	fea6d7e3          	bge	a3,a0,8020439c <hashpath+0x2e>
      hashvalue = hashvalue%NAME_HASH;
    802043b2:	02c7e53b          	remw	a0,a5,a2
    802043b6:	b7dd                	j	8020439c <hashpath+0x2e>

00000000802043b8 <ekstat>:


void ekstat(struct dirent *de, struct kstat *st)
{
    802043b8:	1101                	addi	sp,sp,-32
    802043ba:	ec06                	sd	ra,24(sp)
    802043bc:	e822                	sd	s0,16(sp)
    802043be:	e426                	sd	s1,8(sp)
    802043c0:	e04a                	sd	s2,0(sp)
    802043c2:	1000                	addi	s0,sp,32
    802043c4:	892a                	mv	s2,a0
    802043c6:	84ae                	mv	s1,a1
    struct fs *self_fs = &FatFs[de->dev];
    802043c8:	11454703          	lbu	a4,276(a0)
    st->st_dev = de->dev;
    802043cc:	e198                	sd	a4,0(a1)
    st->st_size = de->file_size;
    802043ce:	10856783          	lwu	a5,264(a0)
    802043d2:	f99c                	sd	a5,48(a1)
    st->st_blksize = self_fs->fat.bpb.byts_per_sec;
    802043d4:	6695                	lui	a3,0x5
    802043d6:	9b868693          	addi	a3,a3,-1608 # 49b8 <_entry-0x801fb648>
    802043da:	02d706b3          	mul	a3,a4,a3
    802043de:	01052717          	auipc	a4,0x1052
    802043e2:	7f270713          	addi	a4,a4,2034 # 81256bd0 <FatFs>
    802043e6:	9736                	add	a4,a4,a3
    802043e8:	02075683          	lhu	a3,32(a4)
    802043ec:	dd94                	sw	a3,56(a1)
    st->st_blocks = (st->st_size + st->st_blksize - 1) / st->st_blksize;
    802043ee:	97b6                	add	a5,a5,a3
    802043f0:	17fd                	addi	a5,a5,-1
    802043f2:	02d7c7b3          	div	a5,a5,a3
    802043f6:	e1bc                	sd	a5,64(a1)
    st->st_atime_nsec = 0;
    802043f8:	0405b823          	sd	zero,80(a1)
    st->st_atime_sec = 0;
    802043fc:	0405b423          	sd	zero,72(a1)
    st->st_ctime_nsec = 0;
    80204400:	0605b823          	sd	zero,112(a1)
    st->st_ctime_sec = 0;
    80204404:	0605b423          	sd	zero,104(a1)
    st->st_mtime_nsec = 0;
    80204408:	0605b023          	sd	zero,96(a1)
    st->st_mtime_sec = 0;
    8020440c:	0405bc23          	sd	zero,88(a1)
    st->st_uid = 0;
    80204410:	0005ac23          	sw	zero,24(a1)
    st->st_gid = 0;
    80204414:	0005ae23          	sw	zero,28(a1)
    st->st_dev = self_fs->devno;
    80204418:	00076783          	lwu	a5,0(a4)
    8020441c:	e19c                	sd	a5,0(a1)
    st->st_rdev = de->dev;
    8020441e:	11454783          	lbu	a5,276(a0)
    80204422:	f19c                	sd	a5,32(a1)
    st->st_nlink = 1;
    80204424:	4785                	li	a5,1
    80204426:	c9dc                	sw	a5,20(a1)
    st->st_ino = hashpath(de->filename);
    80204428:	00000097          	auipc	ra,0x0
    8020442c:	f46080e7          	jalr	-186(ra) # 8020436e <hashpath>
    80204430:	e488                	sd	a0,8(s1)
    st->st_mode = 0;
    80204432:	0004a823          	sw	zero,16(s1)
    st->st_mode = (de->attribute & ATTR_DIRECTORY) ? S_IFDIR : S_IFREG;
    80204436:	10094703          	lbu	a4,256(s2)
    8020443a:	8b41                	andi	a4,a4,16
    8020443c:	6791                	lui	a5,0x4
    8020443e:	e311                	bnez	a4,80204442 <ekstat+0x8a>
    80204440:	67a1                	lui	a5,0x8
    st->st_mode |= 0x1ff;
    80204442:	1ff7e793          	ori	a5,a5,511
    80204446:	c89c                	sw	a5,16(s1)
}
    80204448:	60e2                	ld	ra,24(sp)
    8020444a:	6442                	ld	s0,16(sp)
    8020444c:	64a2                	ld	s1,8(sp)
    8020444e:	6902                	ld	s2,0(sp)
    80204450:	6105                	addi	sp,sp,32
    80204452:	8082                	ret

0000000080204454 <estatfs>:


void estatfs(struct dirent *de, struct statfs *st){
    80204454:	1141                	addi	sp,sp,-16
    80204456:	e422                	sd	s0,8(sp)
    80204458:	0800                	addi	s0,sp,16
    struct fs *self_fs = &FatFs[de->dev];
    8020445a:	11454783          	lbu	a5,276(a0)
    st->f_type = 0;
    8020445e:	0005b023          	sd	zero,0(a1)
    st->f_bsize = self_fs->fat.byts_per_clus;
    80204462:	6715                	lui	a4,0x5
    80204464:	9b870713          	addi	a4,a4,-1608 # 49b8 <_entry-0x801fb648>
    80204468:	02e78733          	mul	a4,a5,a4
    8020446c:	01052797          	auipc	a5,0x1052
    80204470:	76478793          	addi	a5,a5,1892 # 81256bd0 <FatFs>
    80204474:	97ba                	add	a5,a5,a4
    80204476:	01c7e703          	lwu	a4,28(a5)
    8020447a:	e598                	sd	a4,8(a1)
    st->f_blocks = self_fs->fat.data_clus_cnt;
    8020447c:	0187e703          	lwu	a4,24(a5)
    80204480:	e998                	sd	a4,16(a1)
    st->f_bfree = self_fs->fat.bpb.rsvd_sec_cnt;
    80204482:	0247d703          	lhu	a4,36(a5)
    80204486:	ed98                	sd	a4,24(a1)
    st->f_bavail = self_fs->fat.bpb.rsvd_sec_cnt-self_fs->fat.bpb.hidd_sec;
    80204488:	0247d703          	lhu	a4,36(a5)
    8020448c:	579c                	lw	a5,40(a5)
    8020448e:	40f707bb          	subw	a5,a4,a5
    80204492:	1782                	slli	a5,a5,0x20
    80204494:	9381                	srli	a5,a5,0x20
    80204496:	f19c                	sd	a5,32(a1)
    st->f_files = FILENUM(self_fs);
    80204498:	47b5                	li	a5,13
    8020449a:	f59c                	sd	a5,40(a1)
    st->f_ffree = FILEFREE(self_fs);
    8020449c:	0205b823          	sd	zero,48(a1)
    st->f_namelen = FAT32_MAX_FILENAME;
    802044a0:	0ff00793          	li	a5,255
    802044a4:	e1bc                	sd	a5,64(a1)
}
    802044a6:	6422                	ld	s0,8(sp)
    802044a8:	0141                	addi	sp,sp,16
    802044aa:	8082                	ret

00000000802044ac <ename>:

struct dirent *ename(struct dirent* env,char *path,int* devno)
{
    802044ac:	716d                	addi	sp,sp,-272
    802044ae:	e606                	sd	ra,264(sp)
    802044b0:	e222                	sd	s0,256(sp)
    802044b2:	0a00                	addi	s0,sp,272
    802044b4:	8732                	mv	a4,a2
    char name[FAT32_MAX_FILENAME + 1];
    return lookup_path(env,path, 0, name, devno);
    802044b6:	ef040693          	addi	a3,s0,-272
    802044ba:	4601                	li	a2,0
    802044bc:	00000097          	auipc	ra,0x0
    802044c0:	cbe080e7          	jalr	-834(ra) # 8020417a <lookup_path>
}
    802044c4:	60b2                	ld	ra,264(sp)
    802044c6:	6412                	ld	s0,256(sp)
    802044c8:	6151                	addi	sp,sp,272
    802044ca:	8082                	ret

00000000802044cc <enameparent>:

struct dirent *enameparent(struct dirent* env,char *path, char *name,int* devno)
{
    802044cc:	1141                	addi	sp,sp,-16
    802044ce:	e406                	sd	ra,8(sp)
    802044d0:	e022                	sd	s0,0(sp)
    802044d2:	0800                	addi	s0,sp,16
    802044d4:	8736                	mv	a4,a3
    return lookup_path(env,path, 1, name, devno);
    802044d6:	86b2                	mv	a3,a2
    802044d8:	4605                	li	a2,1
    802044da:	00000097          	auipc	ra,0x0
    802044de:	ca0080e7          	jalr	-864(ra) # 8020417a <lookup_path>
}
    802044e2:	60a2                	ld	ra,8(sp)
    802044e4:	6402                	ld	s0,0(sp)
    802044e6:	0141                	addi	sp,sp,16
    802044e8:	8082                	ret

00000000802044ea <emount>:

int emount(struct fs* fatfs,char* mnt){
    802044ea:	1101                	addi	sp,sp,-32
    802044ec:	ec06                	sd	ra,24(sp)
    802044ee:	e822                	sd	s0,16(sp)
    802044f0:	e426                	sd	s1,8(sp)
    802044f2:	1000                	addi	s0,sp,32
    802044f4:	84aa                	mv	s1,a0
    struct dirent* mntpoint = ename(NULL,mnt,0);
    802044f6:	4601                	li	a2,0
    802044f8:	4501                	li	a0,0
    802044fa:	00000097          	auipc	ra,0x0
    802044fe:	fb2080e7          	jalr	-78(ra) # 802044ac <ename>
    if(mntpoint == NULL||!(mntpoint->attribute&ATTR_DIRECTORY))return -1; 
    80204502:	c90d                	beqz	a0,80204534 <emount+0x4a>
    80204504:	10054783          	lbu	a5,256(a0)
    80204508:	8bc1                	andi	a5,a5,16
    8020450a:	c79d                	beqz	a5,80204538 <emount+0x4e>
    mntpoint = edup(mntpoint);
    8020450c:	fffff097          	auipc	ra,0xfffff
    80204510:	290080e7          	jalr	656(ra) # 8020379c <edup>
    mntpoint->mnt = 1;
    80204514:	4785                	li	a5,1
    80204516:	10f52e23          	sw	a5,284(a0)
    mntpoint->dev = fatfs->devno;
    8020451a:	409c                	lw	a5,0(s1)
    8020451c:	10f50a23          	sb	a5,276(a0)
    fatfs->root.parent = mntpoint;
    80204520:	6795                	lui	a5,0x5
    80204522:	94be                	add	s1,s1,a5
    80204524:	94a4bc23          	sd	a0,-1704(s1)
    return 0;
    80204528:	4501                	li	a0,0
}
    8020452a:	60e2                	ld	ra,24(sp)
    8020452c:	6442                	ld	s0,16(sp)
    8020452e:	64a2                	ld	s1,8(sp)
    80204530:	6105                	addi	sp,sp,32
    80204532:	8082                	ret
    if(mntpoint == NULL||!(mntpoint->attribute&ATTR_DIRECTORY))return -1; 
    80204534:	557d                	li	a0,-1
    80204536:	bfd5                	j	8020452a <emount+0x40>
    80204538:	557d                	li	a0,-1
    8020453a:	bfc5                	j	8020452a <emount+0x40>

000000008020453c <eumount>:

int eumount(char* mnt){
    8020453c:	1101                	addi	sp,sp,-32
    8020453e:	ec06                	sd	ra,24(sp)
    80204540:	e822                	sd	s0,16(sp)
    80204542:	e426                	sd	s1,8(sp)
    80204544:	1000                	addi	s0,sp,32
    80204546:	85aa                	mv	a1,a0
    struct dirent* mntpoint = ename(NULL,mnt,0);
    80204548:	4601                	li	a2,0
    8020454a:	4501                	li	a0,0
    8020454c:	00000097          	auipc	ra,0x0
    80204550:	f60080e7          	jalr	-160(ra) # 802044ac <ename>
    if(mntpoint == NULL)return -1; 
    80204554:	c939                	beqz	a0,802045aa <eumount+0x6e>
    80204556:	84aa                	mv	s1,a0
    if(mntpoint->mnt) mntpoint->mnt=0;
    80204558:	11c52783          	lw	a5,284(a0)
    8020455c:	c399                	beqz	a5,80204562 <eumount+0x26>
    8020455e:	10052e23          	sw	zero,284(a0)
    if(FatFs[mntpoint->dev].image)eput(FatFs[mntpoint->dev].image);
    80204562:	1144c783          	lbu	a5,276(s1)
    80204566:	6715                	lui	a4,0x5
    80204568:	9b870713          	addi	a4,a4,-1608 # 49b8 <_entry-0x801fb648>
    8020456c:	02e78733          	mul	a4,a5,a4
    80204570:	01052797          	auipc	a5,0x1052
    80204574:	66078793          	addi	a5,a5,1632 # 81256bd0 <FatFs>
    80204578:	97ba                	add	a5,a5,a4
    8020457a:	6788                	ld	a0,8(a5)
    8020457c:	c509                	beqz	a0,80204586 <eumount+0x4a>
    8020457e:	fffff097          	auipc	ra,0xfffff
    80204582:	570080e7          	jalr	1392(ra) # 80203aee <eput>
    if(mntpoint->parent)mntpoint->dev = mntpoint->parent->dev;
    80204586:	1284b783          	ld	a5,296(s1)
    8020458a:	c789                	beqz	a5,80204594 <eumount+0x58>
    8020458c:	1147c783          	lbu	a5,276(a5)
    80204590:	10f48a23          	sb	a5,276(s1)
    eput(mntpoint);
    80204594:	8526                	mv	a0,s1
    80204596:	fffff097          	auipc	ra,0xfffff
    8020459a:	558080e7          	jalr	1368(ra) # 80203aee <eput>
    return 0;
    8020459e:	4501                	li	a0,0
}
    802045a0:	60e2                	ld	ra,24(sp)
    802045a2:	6442                	ld	s0,16(sp)
    802045a4:	64a2                	ld	s1,8(sp)
    802045a6:	6105                	addi	sp,sp,32
    802045a8:	8082                	ret
    if(mntpoint == NULL)return -1; 
    802045aa:	557d                	li	a0,-1
    802045ac:	bfd5                	j	802045a0 <eumount+0x64>

00000000802045ae <create>:
}


struct dirent*
create(struct dirent* env, char *path, short type, int mode, int *err)
{
    802045ae:	dc010113          	addi	sp,sp,-576
    802045b2:	22113c23          	sd	ra,568(sp)
    802045b6:	22813823          	sd	s0,560(sp)
    802045ba:	22913423          	sd	s1,552(sp)
    802045be:	23213023          	sd	s2,544(sp)
    802045c2:	21313c23          	sd	s3,536(sp)
    802045c6:	21413823          	sd	s4,528(sp)
    802045ca:	21513423          	sd	s5,520(sp)
    802045ce:	21613023          	sd	s6,512(sp)
    802045d2:	0480                	addi	s0,sp,576
    802045d4:	8aaa                	mv	s5,a0
    802045d6:	8a2e                	mv	s4,a1
    802045d8:	8932                	mv	s2,a2
    802045da:	8b3a                	mv	s6,a4
  if (type == T_DIR) {
    mode = ATTR_DIRECTORY;
  } else if (mode & O_RDONLY) {
    mode = ATTR_READ_ONLY;
  } else {
    mode = 0;  
    802045dc:	fff60993          	addi	s3,a2,-1 # f3fff <_entry-0x8010c001>
    802045e0:	0019b993          	seqz	s3,s3
    802045e4:	0992                	slli	s3,s3,0x4
  }

  if((dp = enameparent(env, path, name, 0)) == NULL)
    802045e6:	4681                	li	a3,0
    802045e8:	ec040613          	addi	a2,s0,-320
    802045ec:	00000097          	auipc	ra,0x0
    802045f0:	ee0080e7          	jalr	-288(ra) # 802044cc <enameparent>
    802045f4:	c541                	beqz	a0,8020467c <create+0xce>
    802045f6:	84aa                	mv	s1,a0
      return NULL;
    } 
  }
  else
  {
    elock(dp);
    802045f8:	fffff097          	auipc	ra,0xfffff
    802045fc:	472080e7          	jalr	1138(ra) # 80203a6a <elock>
  }
  
  if ((ep = ealloc(dp, name, mode)) == NULL) {
    80204600:	864e                	mv	a2,s3
    80204602:	ec040593          	addi	a1,s0,-320
    80204606:	8526                	mv	a0,s1
    80204608:	00000097          	auipc	ra,0x0
    8020460c:	9ee080e7          	jalr	-1554(ra) # 80203ff6 <ealloc>
    80204610:	89aa                	mv	s3,a0
    80204612:	14050663          	beqz	a0,8020475e <create+0x1b0>
    eput(dp);
    *err = -EINVAL;
    return NULL;
  }
  
  if ((type == T_DIR && !(ep->attribute & ATTR_DIRECTORY)) ||
    80204616:	0009079b          	sext.w	a5,s2
    8020461a:	4705                	li	a4,1
    8020461c:	14e78f63          	beq	a5,a4,8020477a <create+0x1cc>
    80204620:	2901                	sext.w	s2,s2
    80204622:	4789                	li	a5,2
    80204624:	00f91763          	bne	s2,a5,80204632 <create+0x84>
      (type == T_FILE && (ep->attribute & ATTR_DIRECTORY))) {
    80204628:	10054783          	lbu	a5,256(a0)
    8020462c:	8bc1                	andi	a5,a5,16
    8020462e:	14079b63          	bnez	a5,80204784 <create+0x1d6>
    eput(dp);
    *err = -EINVAL;
    return NULL;
  }

  eunlock(dp);
    80204632:	8526                	mv	a0,s1
    80204634:	fffff097          	auipc	ra,0xfffff
    80204638:	46c080e7          	jalr	1132(ra) # 80203aa0 <eunlock>
  eput(dp);
    8020463c:	8526                	mv	a0,s1
    8020463e:	fffff097          	auipc	ra,0xfffff
    80204642:	4b0080e7          	jalr	1200(ra) # 80203aee <eput>
  elock(ep);
    80204646:	854e                	mv	a0,s3
    80204648:	fffff097          	auipc	ra,0xfffff
    8020464c:	422080e7          	jalr	1058(ra) # 80203a6a <elock>
  *err = 0;
    80204650:	000b2023          	sw	zero,0(s6)
  return ep;
}
    80204654:	854e                	mv	a0,s3
    80204656:	23813083          	ld	ra,568(sp)
    8020465a:	23013403          	ld	s0,560(sp)
    8020465e:	22813483          	ld	s1,552(sp)
    80204662:	22013903          	ld	s2,544(sp)
    80204666:	21813983          	ld	s3,536(sp)
    8020466a:	21013a03          	ld	s4,528(sp)
    8020466e:	20813a83          	ld	s5,520(sp)
    80204672:	20013b03          	ld	s6,512(sp)
    80204676:	24010113          	addi	sp,sp,576
    8020467a:	8082                	ret
  int len = strlen(path);
    8020467c:	8552                	mv	a0,s4
    8020467e:	ffffd097          	auipc	ra,0xffffd
    80204682:	87e080e7          	jalr	-1922(ra) # 80200efc <strlen>
    80204686:	84aa                	mv	s1,a0
  strncpy(pname, path, len + 1);
    80204688:	0015061b          	addiw	a2,a0,1
    8020468c:	85d2                	mv	a1,s4
    8020468e:	dc040513          	addi	a0,s0,-576
    80204692:	ffffc097          	auipc	ra,0xffffc
    80204696:	7fa080e7          	jalr	2042(ra) # 80200e8c <strncpy>
  int i = len - 1;
    8020469a:	fff4871b          	addiw	a4,s1,-1
  if(pname[i] == '/' && i == 0)		// root dir
    8020469e:	fc040793          	addi	a5,s0,-64
    802046a2:	97ba                	add	a5,a5,a4
    802046a4:	e007c683          	lbu	a3,-512(a5)
    802046a8:	02f00793          	li	a5,47
    802046ac:	02f68863          	beq	a3,a5,802046dc <create+0x12e>
  for(; i >= 0; --i)
    802046b0:	06074363          	bltz	a4,80204716 <create+0x168>
    802046b4:	dc040793          	addi	a5,s0,-576
    802046b8:	97ba                	add	a5,a5,a4
    802046ba:	dbf40693          	addi	a3,s0,-577
    802046be:	96ba                	add	a3,a3,a4
    802046c0:	1702                	slli	a4,a4,0x20
    802046c2:	9301                	srli	a4,a4,0x20
    802046c4:	40e68733          	sub	a4,a3,a4
    if(pname[i] == '/')
    802046c8:	02f00613          	li	a2,47
    802046cc:	0007c683          	lbu	a3,0(a5)
    802046d0:	04c68163          	beq	a3,a2,80204712 <create+0x164>
  for(; i >= 0; --i)
    802046d4:	17fd                	addi	a5,a5,-1
    802046d6:	fee79be3          	bne	a5,a4,802046cc <create+0x11e>
    802046da:	a835                	j	80204716 <create+0x168>
  if(pname[i] == '/' && i == 0)		// root dir
    802046dc:	c701                	beqz	a4,802046e4 <create+0x136>
    i--;
    802046de:	ffe4871b          	addiw	a4,s1,-2
    802046e2:	b7f9                	j	802046b0 <create+0x102>
    pname[0] = 0;
    802046e4:	dc040023          	sb	zero,-576(s0)
      *err = -EEXIST;
    802046e8:	57bd                	li	a5,-17
    802046ea:	00fb2023          	sw	a5,0(s6)
      elock(&rootfs->root);
    802046ee:	01069917          	auipc	s2,0x1069
    802046f2:	58290913          	addi	s2,s2,1410 # 8126dc70 <rootfs>
    802046f6:	00093503          	ld	a0,0(s2)
    802046fa:	6995                	lui	s3,0x5
    802046fc:	83098493          	addi	s1,s3,-2000 # 4830 <_entry-0x801fb7d0>
    80204700:	9526                	add	a0,a0,s1
    80204702:	fffff097          	auipc	ra,0xfffff
    80204706:	368080e7          	jalr	872(ra) # 80203a6a <elock>
      return &rootfs->root;
    8020470a:	00093983          	ld	s3,0(s2)
    8020470e:	99a6                	add	s3,s3,s1
    80204710:	b791                	j	80204654 <create+0xa6>
      pname[i] = 0;
    80204712:	00078023          	sb	zero,0(a5)
  int len2 = strlen(pname);
    80204716:	dc040513          	addi	a0,s0,-576
    8020471a:	ffffc097          	auipc	ra,0xffffc
    8020471e:	7e2080e7          	jalr	2018(ra) # 80200efc <strlen>
  strncpy(name, path + len2 + 1, len - len2 + 1);
    80204722:	40a4863b          	subw	a2,s1,a0
    80204726:	00150593          	addi	a1,a0,1
    8020472a:	2605                	addiw	a2,a2,1
    8020472c:	95d2                	add	a1,a1,s4
    8020472e:	ec040513          	addi	a0,s0,-320
    80204732:	ffffc097          	auipc	ra,0xffffc
    80204736:	75a080e7          	jalr	1882(ra) # 80200e8c <strncpy>
    if(pname[0] == 0)
    8020473a:	dc044783          	lbu	a5,-576(s0)
    8020473e:	d7cd                	beqz	a5,802046e8 <create+0x13a>
    dp = create(env, pname, T_DIR, O_RDWR, err);
    80204740:	875a                	mv	a4,s6
    80204742:	4689                	li	a3,2
    80204744:	4605                	li	a2,1
    80204746:	dc040593          	addi	a1,s0,-576
    8020474a:	8556                	mv	a0,s5
    8020474c:	00000097          	auipc	ra,0x0
    80204750:	e62080e7          	jalr	-414(ra) # 802045ae <create>
    80204754:	84aa                	mv	s1,a0
    if(dp == NULL)
    80204756:	ea0515e3          	bnez	a0,80204600 <create+0x52>
      return NULL;
    8020475a:	89aa                	mv	s3,a0
    8020475c:	bde5                	j	80204654 <create+0xa6>
    eunlock(dp);
    8020475e:	8526                	mv	a0,s1
    80204760:	fffff097          	auipc	ra,0xfffff
    80204764:	340080e7          	jalr	832(ra) # 80203aa0 <eunlock>
    eput(dp);
    80204768:	8526                	mv	a0,s1
    8020476a:	fffff097          	auipc	ra,0xfffff
    8020476e:	384080e7          	jalr	900(ra) # 80203aee <eput>
    *err = -EINVAL;
    80204772:	57a9                	li	a5,-22
    80204774:	00fb2023          	sw	a5,0(s6)
    return NULL;
    80204778:	bdf1                	j	80204654 <create+0xa6>
  if ((type == T_DIR && !(ep->attribute & ATTR_DIRECTORY)) ||
    8020477a:	10054783          	lbu	a5,256(a0)
    8020477e:	8bc1                	andi	a5,a5,16
    80204780:	ea0799e3          	bnez	a5,80204632 <create+0x84>
    eunlock(dp);
    80204784:	8526                	mv	a0,s1
    80204786:	fffff097          	auipc	ra,0xfffff
    8020478a:	31a080e7          	jalr	794(ra) # 80203aa0 <eunlock>
    eput(ep);
    8020478e:	854e                	mv	a0,s3
    80204790:	fffff097          	auipc	ra,0xfffff
    80204794:	35e080e7          	jalr	862(ra) # 80203aee <eput>
    eput(dp);
    80204798:	8526                	mv	a0,s1
    8020479a:	fffff097          	auipc	ra,0xfffff
    8020479e:	354080e7          	jalr	852(ra) # 80203aee <eput>
    *err = -EINVAL;
    802047a2:	57a9                	li	a5,-22
    802047a4:	00fb2023          	sw	a5,0(s6)
    return NULL;
    802047a8:	4981                	li	s3,0
    802047aa:	b56d                	j	80204654 <create+0xa6>

00000000802047ac <pipepoll>:
}


static
uint32 pipepoll(struct file *fp, struct poll_table *pt)
{
    802047ac:	7179                	addi	sp,sp,-48
    802047ae:	f406                	sd	ra,40(sp)
    802047b0:	f022                	sd	s0,32(sp)
    802047b2:	ec26                	sd	s1,24(sp)
    802047b4:	e84a                	sd	s2,16(sp)
    802047b6:	e44e                	sd	s3,8(sp)
    802047b8:	1800                	addi	s0,sp,48
    802047ba:	84aa                	mv	s1,a0
    802047bc:	892e                	mv	s2,a1
	uint32 mask = 0;
	struct pipe *pi = fp->pipe;
    802047be:	02053983          	ld	s3,32(a0)
	__debug_info("pipepoll", "r/w=%d/%d | ro/wo=%d/%d | rq/wq=%d/%d rn/wn=%d/%d\n",
				fp->readable, fp->writable, pi->readopen, pi->writeopen,
				!wait_queue_empty(&pi->rqueue), !wait_queue_empty(&pi->wqueue),
				pi->nread, pi->nwrite);
*/
	if (fp->readable)
    802047c2:	00854783          	lbu	a5,8(a0)
    802047c6:	c3d9                	beqz	a5,8020484c <pipepoll+0xa0>


static inline void
poll_wait(struct file * fp, struct wait_queue *wq, struct poll_table *pt)
{
	if (pt && pt->func && wq)
    802047c8:	c5cd                	beqz	a1,80204872 <pipepoll+0xc6>
    802047ca:	619c                	ld	a5,0(a1)
    802047cc:	cfa5                	beqz	a5,80204844 <pipepoll+0x98>
		pt->func(fp, wq, pt);
    802047ce:	862e                	mv	a2,a1
    802047d0:	04098593          	addi	a1,s3,64
    802047d4:	9782                	jalr	a5
		poll_wait(fp, &pi->rqueue, pt);
	if (fp->writable)
    802047d6:	0094c783          	lbu	a5,9(s1)
    802047da:	c781                	beqz	a5,802047e2 <pipepoll+0x36>
		poll_wait(fp, &pi->wqueue, pt);
    802047dc:	01898593          	addi	a1,s3,24
	if (pt && pt->func && wq)
    802047e0:	a8b5                	j	8020485c <pipepoll+0xb0>

	if (fp->readable) {
    802047e2:	0084c783          	lbu	a5,8(s1)
	uint32 mask = 0;
    802047e6:	4501                	li	a0,0
	if (fp->readable) {
    802047e8:	c7b9                	beqz	a5,80204836 <pipepoll+0x8a>
		if (pi->nwrite - pi->nread > 0)			// has something to read
    802047ea:	06c9a503          	lw	a0,108(s3)
    802047ee:	0689a783          	lw	a5,104(s3)
    802047f2:	8d1d                	sub	a0,a0,a5
    802047f4:	00a037b3          	snez	a5,a0
	uint32 mask = 0;
    802047f8:	00a03533          	snez	a0,a0
			mask |= POLLIN;
		if (!pi->writeopen) {
    802047fc:	0719c703          	lbu	a4,113(s3)
    80204800:	e701                	bnez	a4,80204808 <pipepoll+0x5c>
			// if (pi->nwrite - pi->nread == 0)
			// 	mask |= POLLPRI;
			// else
				mask |= POLLHUP;
    80204802:	0107e513          	ori	a0,a5,16
    80204806:	2501                	sext.w	a0,a0
		}
	}

	if (fp->writable) {
    80204808:	0094c783          	lbu	a5,9(s1)
    8020480c:	c78d                	beqz	a5,80204836 <pipepoll+0x8a>
		if (pi->nwrite - pi->nread < PIPESIZE(pi))	// has room to write
    8020480e:	06c9a703          	lw	a4,108(s3)
    80204812:	0689a783          	lw	a5,104(s3)
    80204816:	0739c683          	lbu	a3,115(s3)
    8020481a:	9f1d                	subw	a4,a4,a5
    8020481c:	20000793          	li	a5,512
    80204820:	00d797bb          	sllw	a5,a5,a3
    80204824:	00f77463          	bgeu	a4,a5,8020482c <pipepoll+0x80>
			mask |= POLLOUT;
    80204828:	00456513          	ori	a0,a0,4
		if (!pi->readopen)
    8020482c:	0709c783          	lbu	a5,112(s3)
    80204830:	e399                	bnez	a5,80204836 <pipepoll+0x8a>
			mask |= POLLERR;
    80204832:	00856513          	ori	a0,a0,8
	}

	return mask;
}
    80204836:	70a2                	ld	ra,40(sp)
    80204838:	7402                	ld	s0,32(sp)
    8020483a:	64e2                	ld	s1,24(sp)
    8020483c:	6942                	ld	s2,16(sp)
    8020483e:	69a2                	ld	s3,8(sp)
    80204840:	6145                	addi	sp,sp,48
    80204842:	8082                	ret
	if (fp->writable)
    80204844:	00954783          	lbu	a5,9(a0)
    80204848:	fbd1                	bnez	a5,802047dc <pipepoll+0x30>
    8020484a:	b745                	j	802047ea <pipepoll+0x3e>
    8020484c:	00954783          	lbu	a5,9(a0)
	uint32 mask = 0;
    80204850:	4501                	li	a0,0
	if (fp->writable)
    80204852:	d3f5                	beqz	a5,80204836 <pipepoll+0x8a>
    80204854:	02090263          	beqz	s2,80204878 <pipepoll+0xcc>
		poll_wait(fp, &pi->wqueue, pt);
    80204858:	01898593          	addi	a1,s3,24
    8020485c:	00093783          	ld	a5,0(s2)
    80204860:	cf81                	beqz	a5,80204878 <pipepoll+0xcc>
		pt->func(fp, wq, pt);
    80204862:	864a                	mv	a2,s2
    80204864:	8526                	mv	a0,s1
    80204866:	9782                	jalr	a5
	if (fp->readable) {
    80204868:	0084c783          	lbu	a5,8(s1)
	uint32 mask = 0;
    8020486c:	4501                	li	a0,0
	if (fp->readable) {
    8020486e:	dfc9                	beqz	a5,80204808 <pipepoll+0x5c>
    80204870:	bfad                	j	802047ea <pipepoll+0x3e>
	if (fp->writable)
    80204872:	00954783          	lbu	a5,9(a0)
    80204876:	d7b5                	beqz	a5,802047e2 <pipepoll+0x36>
	if (fp->readable) {
    80204878:	0084c783          	lbu	a5,8(s1)
	uint32 mask = 0;
    8020487c:	4501                	li	a0,0
	if (fp->readable) {
    8020487e:	dbc1                	beqz	a5,8020480e <pipepoll+0x62>
    80204880:	b7ad                	j	802047ea <pipepoll+0x3e>

0000000080204882 <pipeepoll>:


static
uint32 pipeepoll(struct file *fp, struct poll_table *pt)
{
    80204882:	7179                	addi	sp,sp,-48
    80204884:	f406                	sd	ra,40(sp)
    80204886:	f022                	sd	s0,32(sp)
    80204888:	ec26                	sd	s1,24(sp)
    8020488a:	e84a                	sd	s2,16(sp)
    8020488c:	e44e                	sd	s3,8(sp)
    8020488e:	1800                	addi	s0,sp,48
    80204890:	84aa                	mv	s1,a0
    80204892:	892e                	mv	s2,a1
	uint32 mask = 0;
	struct pipe *pi = fp->pipe;
    80204894:	02053983          	ld	s3,32(a0)
	__debug_info("pipepoll", "r/w=%d/%d | ro/wo=%d/%d | rq/wq=%d/%d rn/wn=%d/%d\n",
				fp->readable, fp->writable, pi->readopen, pi->writeopen,
				!wait_queue_empty(&pi->rqueue), !wait_queue_empty(&pi->wqueue),
				pi->nread, pi->nwrite);
*/
	if (fp->readable)
    80204898:	00854783          	lbu	a5,8(a0)
    8020489c:	c3d9                	beqz	a5,80204922 <pipeepoll+0xa0>
	if (pt && pt->func && wq)
    8020489e:	c5cd                	beqz	a1,80204948 <pipeepoll+0xc6>
    802048a0:	619c                	ld	a5,0(a1)
    802048a2:	cfa5                	beqz	a5,8020491a <pipeepoll+0x98>
		pt->func(fp, wq, pt);
    802048a4:	862e                	mv	a2,a1
    802048a6:	04098593          	addi	a1,s3,64
    802048aa:	9782                	jalr	a5
		poll_wait(fp, &pi->rqueue, pt);
	if (fp->writable)
    802048ac:	0094c783          	lbu	a5,9(s1)
    802048b0:	c781                	beqz	a5,802048b8 <pipeepoll+0x36>
		poll_wait(fp, &pi->wqueue, pt);
    802048b2:	01898593          	addi	a1,s3,24
	if (pt && pt->func && wq)
    802048b6:	a8b5                	j	80204932 <pipeepoll+0xb0>

	if (fp->readable) {
    802048b8:	0084c783          	lbu	a5,8(s1)
	uint32 mask = 0;
    802048bc:	4501                	li	a0,0
	if (fp->readable) {
    802048be:	c7b9                	beqz	a5,8020490c <pipeepoll+0x8a>
		if (pi->nwrite - pi->nread > 0)			// has something to read
    802048c0:	06c9a503          	lw	a0,108(s3)
    802048c4:	0689a783          	lw	a5,104(s3)
    802048c8:	8d1d                	sub	a0,a0,a5
    802048ca:	00a037b3          	snez	a5,a0
	uint32 mask = 0;
    802048ce:	00a03533          	snez	a0,a0
			mask |= EPOLLIN;
		if (!pi->writeopen) {
    802048d2:	0719c703          	lbu	a4,113(s3)
    802048d6:	e701                	bnez	a4,802048de <pipeepoll+0x5c>
			// if (pi->nwrite - pi->nread == 0)
			// 	mask |= POLLPRI;
			// else
				mask |= EPOLLHUP;
    802048d8:	0107e513          	ori	a0,a5,16
    802048dc:	2501                	sext.w	a0,a0
		}
	}

	if (fp->writable) {
    802048de:	0094c783          	lbu	a5,9(s1)
    802048e2:	c78d                	beqz	a5,8020490c <pipeepoll+0x8a>
		if (pi->nwrite - pi->nread < PIPESIZE(pi))	// has room to write
    802048e4:	06c9a703          	lw	a4,108(s3)
    802048e8:	0689a783          	lw	a5,104(s3)
    802048ec:	0739c683          	lbu	a3,115(s3)
    802048f0:	9f1d                	subw	a4,a4,a5
    802048f2:	20000793          	li	a5,512
    802048f6:	00d797bb          	sllw	a5,a5,a3
    802048fa:	00f77463          	bgeu	a4,a5,80204902 <pipeepoll+0x80>
			mask |= EPOLLOUT;
    802048fe:	00456513          	ori	a0,a0,4
		if (!pi->readopen)
    80204902:	0709c783          	lbu	a5,112(s3)
    80204906:	e399                	bnez	a5,8020490c <pipeepoll+0x8a>
			mask |= EPOLLERR;
    80204908:	00856513          	ori	a0,a0,8
	}

	return mask;
}
    8020490c:	70a2                	ld	ra,40(sp)
    8020490e:	7402                	ld	s0,32(sp)
    80204910:	64e2                	ld	s1,24(sp)
    80204912:	6942                	ld	s2,16(sp)
    80204914:	69a2                	ld	s3,8(sp)
    80204916:	6145                	addi	sp,sp,48
    80204918:	8082                	ret
	if (fp->writable)
    8020491a:	00954783          	lbu	a5,9(a0)
    8020491e:	fbd1                	bnez	a5,802048b2 <pipeepoll+0x30>
    80204920:	b745                	j	802048c0 <pipeepoll+0x3e>
    80204922:	00954783          	lbu	a5,9(a0)
	uint32 mask = 0;
    80204926:	4501                	li	a0,0
	if (fp->writable)
    80204928:	d3f5                	beqz	a5,8020490c <pipeepoll+0x8a>
    8020492a:	02090263          	beqz	s2,8020494e <pipeepoll+0xcc>
		poll_wait(fp, &pi->wqueue, pt);
    8020492e:	01898593          	addi	a1,s3,24
    80204932:	00093783          	ld	a5,0(s2)
    80204936:	cf81                	beqz	a5,8020494e <pipeepoll+0xcc>
		pt->func(fp, wq, pt);
    80204938:	864a                	mv	a2,s2
    8020493a:	8526                	mv	a0,s1
    8020493c:	9782                	jalr	a5
	if (fp->readable) {
    8020493e:	0084c783          	lbu	a5,8(s1)
	uint32 mask = 0;
    80204942:	4501                	li	a0,0
	if (fp->readable) {
    80204944:	dfc9                	beqz	a5,802048de <pipeepoll+0x5c>
    80204946:	bfad                	j	802048c0 <pipeepoll+0x3e>
	if (fp->writable)
    80204948:	00954783          	lbu	a5,9(a0)
    8020494c:	d7b5                	beqz	a5,802048b8 <pipeepoll+0x36>
	if (fp->readable) {
    8020494e:	0084c783          	lbu	a5,8(s1)
	uint32 mask = 0;
    80204952:	4501                	li	a0,0
	if (fp->readable) {
    80204954:	dbc1                	beqz	a5,802048e4 <pipeepoll+0x62>
    80204956:	b7ad                	j	802048c0 <pipeepoll+0x3e>

0000000080204958 <pipewakeup>:
{
    80204958:	1101                	addi	sp,sp,-32
    8020495a:	ec06                	sd	ra,24(sp)
    8020495c:	e822                	sd	s0,16(sp)
    8020495e:	e426                	sd	s1,8(sp)
    80204960:	e04a                	sd	s2,0(sp)
    80204962:	1000                	addi	s0,sp,32
	queue = (who == PIPE_READER) ? &pi->rqueue : &pi->wqueue;
    80204964:	01850493          	addi	s1,a0,24
    80204968:	e199                	bnez	a1,8020496e <pipewakeup+0x16>
    8020496a:	04050493          	addi	s1,a0,64
	acquire(&queue->lock);
    8020496e:	8926                	mv	s2,s1
    80204970:	8526                	mv	a0,s1
    80204972:	00004097          	auipc	ra,0x4
    80204976:	568080e7          	jalr	1384(ra) # 80208eda <acquire>
	return head->next == head;
    8020497a:	709c                	ld	a5,32(s1)
	initlock(&wq->lock, str);
	list_init(&wq->head);
}

static inline int wait_queue_empty(struct wait_queue *wq) {
	return list_empty(&wq->head);
    8020497c:	04e1                	addi	s1,s1,24
	if (!wait_queue_empty(queue)) {
    8020497e:	00978863          	beq	a5,s1,8020498e <pipewakeup+0x36>
		wakeup(wno->chan);
    80204982:	ff87b503          	ld	a0,-8(a5)
    80204986:	ffffd097          	auipc	ra,0xffffd
    8020498a:	4c2080e7          	jalr	1218(ra) # 80201e48 <wakeup>
	release(&queue->lock);
    8020498e:	854a                	mv	a0,s2
    80204990:	00004097          	auipc	ra,0x4
    80204994:	59e080e7          	jalr	1438(ra) # 80208f2e <release>
}
    80204998:	60e2                	ld	ra,24(sp)
    8020499a:	6442                	ld	s0,16(sp)
    8020499c:	64a2                	ld	s1,8(sp)
    8020499e:	6902                	ld	s2,0(sp)
    802049a0:	6105                	addi	sp,sp,32
    802049a2:	8082                	ret

00000000802049a4 <pipelock>:
{
    802049a4:	7179                	addi	sp,sp,-48
    802049a6:	f406                	sd	ra,40(sp)
    802049a8:	f022                	sd	s0,32(sp)
    802049aa:	ec26                	sd	s1,24(sp)
    802049ac:	e84a                	sd	s2,16(sp)
    802049ae:	e44e                	sd	s3,8(sp)
    802049b0:	e052                	sd	s4,0(sp)
    802049b2:	1800                	addi	s0,sp,48
    802049b4:	892e                	mv	s2,a1
	q = (who == PIPE_READER) ? &pi->rqueue : &pi->wqueue;
    802049b6:	01850493          	addi	s1,a0,24
    802049ba:	e219                	bnez	a2,802049c0 <pipelock+0x1c>
    802049bc:	04050493          	addi	s1,a0,64
	acquire(&q->lock);
    802049c0:	8a26                	mv	s4,s1
    802049c2:	8526                	mv	a0,s1
    802049c4:	00004097          	auipc	ra,0x4
    802049c8:	516080e7          	jalr	1302(ra) # 80208eda <acquire>
	return wq->head.next == &node->list;
}

// This goes without locking. Add node to the last.
static inline void wait_queue_add(struct wait_queue *wq, struct wait_node *node) {
	list_add_before(&wq->head, &node->list);
    802049cc:	00890993          	addi	s3,s2,8
	__list_insert(node, beforeme->prev, beforeme);
    802049d0:	6c9c                	ld	a5,24(s1)
	prev->next = next->prev = node;
    802049d2:	0134bc23          	sd	s3,24(s1)
    802049d6:	0137b423          	sd	s3,8(a5)
    802049da:	01848713          	addi	a4,s1,24
	node->next = next;
    802049de:	00e93823          	sd	a4,16(s2)
	node->prev = prev;
    802049e2:	00f93423          	sd	a5,8(s2)
	while (!wait_queue_is_first(q, wait)) {
    802049e6:	709c                	ld	a5,32(s1)
    802049e8:	00f98c63          	beq	s3,a5,80204a00 <pipelock+0x5c>
		sleep(wait->chan, &q->lock);
    802049ec:	85d2                	mv	a1,s4
    802049ee:	00093503          	ld	a0,0(s2)
    802049f2:	ffffd097          	auipc	ra,0xffffd
    802049f6:	34c080e7          	jalr	844(ra) # 80201d3e <sleep>
	while (!wait_queue_is_first(q, wait)) {
    802049fa:	709c                	ld	a5,32(s1)
    802049fc:	fef998e3          	bne	s3,a5,802049ec <pipelock+0x48>
	release(&q->lock);
    80204a00:	8552                	mv	a0,s4
    80204a02:	00004097          	auipc	ra,0x4
    80204a06:	52c080e7          	jalr	1324(ra) # 80208f2e <release>
}
    80204a0a:	70a2                	ld	ra,40(sp)
    80204a0c:	7402                	ld	s0,32(sp)
    80204a0e:	64e2                	ld	s1,24(sp)
    80204a10:	6942                	ld	s2,16(sp)
    80204a12:	69a2                	ld	s3,8(sp)
    80204a14:	6a02                	ld	s4,0(sp)
    80204a16:	6145                	addi	sp,sp,48
    80204a18:	8082                	ret

0000000080204a1a <pipewritable>:
{
    80204a1a:	7139                	addi	sp,sp,-64
    80204a1c:	fc06                	sd	ra,56(sp)
    80204a1e:	f822                	sd	s0,48(sp)
    80204a20:	f426                	sd	s1,40(sp)
    80204a22:	f04a                	sd	s2,32(sp)
    80204a24:	ec4e                	sd	s3,24(sp)
    80204a26:	e852                	sd	s4,16(sp)
    80204a28:	e456                	sd	s5,8(sp)
    80204a2a:	e05a                	sd	s6,0(sp)
    80204a2c:	0080                	addi	s0,sp,64
    80204a2e:	84aa                	mv	s1,a0
	struct proc *pr = myproc();
    80204a30:	00008097          	auipc	ra,0x8
    80204a34:	982080e7          	jalr	-1662(ra) # 8020c3b2 <myproc>
    80204a38:	89aa                	mv	s3,a0
	return container_of(wq->head.next, struct wait_node, list);
    80204a3a:	0384ba83          	ld	s5,56(s1)
	acquire(&pi->lock);
    80204a3e:	8526                	mv	a0,s1
    80204a40:	00004097          	auipc	ra,0x4
    80204a44:	49a080e7          	jalr	1178(ra) # 80208eda <acquire>
	pi->writing = 1;
    80204a48:	4785                	li	a5,1
    80204a4a:	06f48923          	sb	a5,114(s1)
	while ((m = pi->nwrite - pi->nread) == PIPESIZE(pi)) {		// pipe is full
    80204a4e:	06c4a903          	lw	s2,108(s1)
    80204a52:	54bc                	lw	a5,104(s1)
    80204a54:	40f9093b          	subw	s2,s2,a5
    80204a58:	0734c703          	lbu	a4,115(s1)
    80204a5c:	20000793          	li	a5,512
    80204a60:	00e797bb          	sllw	a5,a5,a4
    80204a64:	05279763          	bne	a5,s2,80204ab2 <pipewritable+0x98>
    80204a68:	8a26                	mv	s4,s1
    80204a6a:	20000b13          	li	s6,512
		if (pr->killed) {
    80204a6e:	0389a783          	lw	a5,56(s3)
    80204a72:	ef8d                	bnez	a5,80204aac <pipewritable+0x92>
		if (pi->readopen == 0) {
    80204a74:	0704c783          	lbu	a5,112(s1)
    80204a78:	cfa9                	beqz	a5,80204ad2 <pipewritable+0xb8>
		pipewakeup(pi, PIPE_READER);
    80204a7a:	4581                	li	a1,0
    80204a7c:	8526                	mv	a0,s1
    80204a7e:	00000097          	auipc	ra,0x0
    80204a82:	eda080e7          	jalr	-294(ra) # 80204958 <pipewakeup>
		sleep(wait->chan, &pi->lock);
    80204a86:	85d2                	mv	a1,s4
    80204a88:	ff8ab503          	ld	a0,-8(s5)
    80204a8c:	ffffd097          	auipc	ra,0xffffd
    80204a90:	2b2080e7          	jalr	690(ra) # 80201d3e <sleep>
	while ((m = pi->nwrite - pi->nread) == PIPESIZE(pi)) {		// pipe is full
    80204a94:	06c4a903          	lw	s2,108(s1)
    80204a98:	54bc                	lw	a5,104(s1)
    80204a9a:	40f9093b          	subw	s2,s2,a5
    80204a9e:	0734c783          	lbu	a5,115(s1)
    80204aa2:	00fb17bb          	sllw	a5,s6,a5
    80204aa6:	fd2784e3          	beq	a5,s2,80204a6e <pipewritable+0x54>
    80204aaa:	a021                	j	80204ab2 <pipewritable+0x98>
			pi->writing = 0;
    80204aac:	06048923          	sb	zero,114(s1)
			m = -EINTR;
    80204ab0:	5971                	li	s2,-4
	release(&pi->lock);
    80204ab2:	8526                	mv	a0,s1
    80204ab4:	00004097          	auipc	ra,0x4
    80204ab8:	47a080e7          	jalr	1146(ra) # 80208f2e <release>
}
    80204abc:	854a                	mv	a0,s2
    80204abe:	70e2                	ld	ra,56(sp)
    80204ac0:	7442                	ld	s0,48(sp)
    80204ac2:	74a2                	ld	s1,40(sp)
    80204ac4:	7902                	ld	s2,32(sp)
    80204ac6:	69e2                	ld	s3,24(sp)
    80204ac8:	6a42                	ld	s4,16(sp)
    80204aca:	6aa2                	ld	s5,8(sp)
    80204acc:	6b02                	ld	s6,0(sp)
    80204ace:	6121                	addi	sp,sp,64
    80204ad0:	8082                	ret
			pi->writing = 0;
    80204ad2:	06048923          	sb	zero,114(s1)
			m = -EPIPE;
    80204ad6:	5901                	li	s2,-32
			break;
    80204ad8:	bfe9                	j	80204ab2 <pipewritable+0x98>

0000000080204ada <pipereadable>:
{
    80204ada:	7139                	addi	sp,sp,-64
    80204adc:	fc06                	sd	ra,56(sp)
    80204ade:	f822                	sd	s0,48(sp)
    80204ae0:	f426                	sd	s1,40(sp)
    80204ae2:	f04a                	sd	s2,32(sp)
    80204ae4:	ec4e                	sd	s3,24(sp)
    80204ae6:	e852                	sd	s4,16(sp)
    80204ae8:	e456                	sd	s5,8(sp)
    80204aea:	e05a                	sd	s6,0(sp)
    80204aec:	0080                	addi	s0,sp,64
    80204aee:	84aa                	mv	s1,a0
    80204af0:	8b2e                	mv	s6,a1
	struct proc *pr = myproc();
    80204af2:	00008097          	auipc	ra,0x8
    80204af6:	8c0080e7          	jalr	-1856(ra) # 8020c3b2 <myproc>
    80204afa:	89aa                	mv	s3,a0
    80204afc:	0604ba83          	ld	s5,96(s1)
	acquire(&pi->lock);
    80204b00:	8a26                	mv	s4,s1
    80204b02:	8526                	mv	a0,s1
    80204b04:	00004097          	auipc	ra,0x4
    80204b08:	3d6080e7          	jalr	982(ra) # 80208eda <acquire>
	while ((m = pi->nwrite - pi->nread) == 0) {	// pipe is empty
    80204b0c:	06c4a903          	lw	s2,108(s1)
    80204b10:	54bc                	lw	a5,104(s1)
    80204b12:	40f9093b          	subw	s2,s2,a5
    80204b16:	02090163          	beqz	s2,80204b38 <pipereadable+0x5e>
    80204b1a:	a099                	j	80204b60 <pipereadable+0x86>
			sleep(wait->chan, &pi->lock);
    80204b1c:	85d2                	mv	a1,s4
    80204b1e:	ff8ab503          	ld	a0,-8(s5)
    80204b22:	ffffd097          	auipc	ra,0xffffd
    80204b26:	21c080e7          	jalr	540(ra) # 80201d3e <sleep>
	while ((m = pi->nwrite - pi->nread) == 0) {	// pipe is empty
    80204b2a:	06c4a903          	lw	s2,108(s1)
    80204b2e:	54bc                	lw	a5,104(s1)
    80204b30:	40f9093b          	subw	s2,s2,a5
    80204b34:	02091663          	bnez	s2,80204b60 <pipereadable+0x86>
		if (pr->killed) {
    80204b38:	0389a783          	lw	a5,56(s3)
    80204b3c:	e38d                	bnez	a5,80204b5e <pipereadable+0x84>
		if (pi->writeopen == 0) {
    80204b3e:	0714c783          	lbu	a5,113(s1)
    80204b42:	cf9d                	beqz	a5,80204b80 <pipereadable+0xa6>
		pipewakeup(pi, PIPE_WRITER);
    80204b44:	4585                	li	a1,1
    80204b46:	8526                	mv	a0,s1
    80204b48:	00000097          	auipc	ra,0x0
    80204b4c:	e10080e7          	jalr	-496(ra) # 80204958 <pipewakeup>
		if (!pi->writing && immediate) {
    80204b50:	0724c783          	lbu	a5,114(s1)
    80204b54:	f7e1                	bnez	a5,80204b1c <pipereadable+0x42>
    80204b56:	fc0b03e3          	beqz	s6,80204b1c <pipereadable+0x42>
			m = -1;
    80204b5a:	597d                	li	s2,-1
    80204b5c:	a011                	j	80204b60 <pipereadable+0x86>
			m = -EINTR;
    80204b5e:	5971                	li	s2,-4
	release(&pi->lock);
    80204b60:	8526                	mv	a0,s1
    80204b62:	00004097          	auipc	ra,0x4
    80204b66:	3cc080e7          	jalr	972(ra) # 80208f2e <release>
}
    80204b6a:	854a                	mv	a0,s2
    80204b6c:	70e2                	ld	ra,56(sp)
    80204b6e:	7442                	ld	s0,48(sp)
    80204b70:	74a2                	ld	s1,40(sp)
    80204b72:	7902                	ld	s2,32(sp)
    80204b74:	69e2                	ld	s3,24(sp)
    80204b76:	6a42                	ld	s4,16(sp)
    80204b78:	6aa2                	ld	s5,8(sp)
    80204b7a:	6b02                	ld	s6,0(sp)
    80204b7c:	6121                	addi	sp,sp,64
    80204b7e:	8082                	ret
			m = -EPIPE;
    80204b80:	5901                	li	s2,-32
    80204b82:	bff9                	j	80204b60 <pipereadable+0x86>

0000000080204b84 <pipeunlock>:
{
    80204b84:	7179                	addi	sp,sp,-48
    80204b86:	f406                	sd	ra,40(sp)
    80204b88:	f022                	sd	s0,32(sp)
    80204b8a:	ec26                	sd	s1,24(sp)
    80204b8c:	e84a                	sd	s2,16(sp)
    80204b8e:	e44e                	sd	s3,8(sp)
    80204b90:	1800                	addi	s0,sp,48
    80204b92:	892e                	mv	s2,a1
	q = (who == PIPE_READER) ? &pi->rqueue : &pi->wqueue;
    80204b94:	01850493          	addi	s1,a0,24
    80204b98:	e219                	bnez	a2,80204b9e <pipeunlock+0x1a>
    80204b9a:	04050493          	addi	s1,a0,64
	acquire(&q->lock);
    80204b9e:	89a6                	mv	s3,s1
    80204ba0:	8526                	mv	a0,s1
    80204ba2:	00004097          	auipc	ra,0x4
    80204ba6:	338080e7          	jalr	824(ra) # 80208eda <acquire>
	__list_link(node->prev, node->next);
    80204baa:	00893703          	ld	a4,8(s2)
    80204bae:	01093783          	ld	a5,16(s2)
	prev->next = next;
    80204bb2:	e71c                	sd	a5,8(a4)
	next->prev = prev;
    80204bb4:	e398                	sd	a4,0(a5)
	return head->next == head;
    80204bb6:	709c                	ld	a5,32(s1)
	return list_empty(&wq->head);
    80204bb8:	04e1                	addi	s1,s1,24
	if (!wait_queue_empty(q)) {		// wake up the next one
    80204bba:	00978863          	beq	a5,s1,80204bca <pipeunlock+0x46>
		wakeup(wait->chan);
    80204bbe:	ff87b503          	ld	a0,-8(a5)
    80204bc2:	ffffd097          	auipc	ra,0xffffd
    80204bc6:	286080e7          	jalr	646(ra) # 80201e48 <wakeup>
	release(&q->lock);
    80204bca:	854e                	mv	a0,s3
    80204bcc:	00004097          	auipc	ra,0x4
    80204bd0:	362080e7          	jalr	866(ra) # 80208f2e <release>
}
    80204bd4:	70a2                	ld	ra,40(sp)
    80204bd6:	7402                	ld	s0,32(sp)
    80204bd8:	64e2                	ld	s1,24(sp)
    80204bda:	6942                	ld	s2,16(sp)
    80204bdc:	69a2                	ld	s3,8(sp)
    80204bde:	6145                	addi	sp,sp,48
    80204be0:	8082                	ret

0000000080204be2 <pipealloc>:
{
    80204be2:	7139                	addi	sp,sp,-64
    80204be4:	fc06                	sd	ra,56(sp)
    80204be6:	f822                	sd	s0,48(sp)
    80204be8:	f426                	sd	s1,40(sp)
    80204bea:	f04a                	sd	s2,32(sp)
    80204bec:	ec4e                	sd	s3,24(sp)
    80204bee:	e852                	sd	s4,16(sp)
    80204bf0:	e456                	sd	s5,8(sp)
    80204bf2:	0080                	addi	s0,sp,64
    80204bf4:	892a                	mv	s2,a0
    80204bf6:	89ae                	mv	s3,a1
	if ((f0 = filealloc()) == NULL ||
    80204bf8:	00001097          	auipc	ra,0x1
    80204bfc:	60c080e7          	jalr	1548(ra) # 80206204 <filealloc>
    80204c00:	cd6d                	beqz	a0,80204cfa <pipealloc+0x118>
    80204c02:	8a2a                	mv	s4,a0
		(f1 = filealloc()) == NULL ||
    80204c04:	00001097          	auipc	ra,0x1
    80204c08:	600080e7          	jalr	1536(ra) # 80206204 <filealloc>
    80204c0c:	8aaa                	mv	s5,a0
	if ((f0 = filealloc()) == NULL ||
    80204c0e:	c971                	beqz	a0,80204ce2 <pipealloc+0x100>
		(pi = kmalloc(sizeof(struct pipe))) == NULL)
    80204c10:	28000513          	li	a0,640
    80204c14:	00005097          	auipc	ra,0x5
    80204c18:	3a8080e7          	jalr	936(ra) # 80209fbc <kmalloc>
    80204c1c:	84aa                	mv	s1,a0
		(f1 = filealloc()) == NULL ||
    80204c1e:	c171                	beqz	a0,80204ce2 <pipealloc+0x100>
	pi->readopen = 1;
    80204c20:	4785                	li	a5,1
    80204c22:	06f50823          	sb	a5,112(a0)
	pi->writeopen = 1;
    80204c26:	06f508a3          	sb	a5,113(a0)
	pi->nwrite = 0;
    80204c2a:	06052623          	sw	zero,108(a0)
	pi->nread = 0;
    80204c2e:	06052423          	sw	zero,104(a0)
	pi->writing = 0;
    80204c32:	06050923          	sb	zero,114(a0)
	pi->pdata = pi->data;
    80204c36:	08050793          	addi	a5,a0,128
    80204c3a:	fd3c                	sd	a5,120(a0)
	pi->size_shift = 0;
    80204c3c:	060509a3          	sb	zero,115(a0)
	initlock(&pi->lock, "pipe");
    80204c40:	00010597          	auipc	a1,0x10
    80204c44:	88858593          	addi	a1,a1,-1912 # 802144c8 <rodata_start+0x4c8>
    80204c48:	00004097          	auipc	ra,0x4
    80204c4c:	24e080e7          	jalr	590(ra) # 80208e96 <initlock>
	initlock(&wq->lock, str);
    80204c50:	00010597          	auipc	a1,0x10
    80204c54:	88058593          	addi	a1,a1,-1920 # 802144d0 <rodata_start+0x4d0>
    80204c58:	01848513          	addi	a0,s1,24
    80204c5c:	00004097          	auipc	ra,0x4
    80204c60:	23a080e7          	jalr	570(ra) # 80208e96 <initlock>
	list_init(&wq->head);
    80204c64:	03048793          	addi	a5,s1,48
	node->prev = node->next = node;
    80204c68:	fc9c                	sd	a5,56(s1)
    80204c6a:	f89c                	sd	a5,48(s1)
	initlock(&wq->lock, str);
    80204c6c:	00010597          	auipc	a1,0x10
    80204c70:	87458593          	addi	a1,a1,-1932 # 802144e0 <rodata_start+0x4e0>
    80204c74:	04048513          	addi	a0,s1,64
    80204c78:	00004097          	auipc	ra,0x4
    80204c7c:	21e080e7          	jalr	542(ra) # 80208e96 <initlock>
	list_init(&wq->head);
    80204c80:	05848793          	addi	a5,s1,88
    80204c84:	f0bc                	sd	a5,96(s1)
    80204c86:	ecbc                	sd	a5,88(s1)
	f0->type = FD_PIPE;
    80204c88:	4785                	li	a5,1
    80204c8a:	00fa2023          	sw	a5,0(s4)
	f0->readable = 1;
    80204c8e:	00fa0423          	sb	a5,8(s4)
	f0->writable = 0;
    80204c92:	000a04a3          	sb	zero,9(s4)
	f0->pipe = pi;
    80204c96:	029a3023          	sd	s1,32(s4)
	f0->poll = pipepoll;
    80204c9a:	00000717          	auipc	a4,0x0
    80204c9e:	b1270713          	addi	a4,a4,-1262 # 802047ac <pipepoll>
    80204ca2:	04ea3c23          	sd	a4,88(s4)
	f0->epollv = pipeepoll;
    80204ca6:	00000697          	auipc	a3,0x0
    80204caa:	bdc68693          	addi	a3,a3,-1060 # 80204882 <pipeepoll>
    80204cae:	06da3023          	sd	a3,96(s4)
	f1->type = FD_PIPE;
    80204cb2:	00faa023          	sw	a5,0(s5)
	f1->readable = 0;
    80204cb6:	000a8423          	sb	zero,8(s5)
	f1->writable = 1;
    80204cba:	00fa84a3          	sb	a5,9(s5)
	f1->pipe = pi;
    80204cbe:	029ab023          	sd	s1,32(s5)
	f1->poll = pipepoll;
    80204cc2:	04eabc23          	sd	a4,88(s5)
	*pf0 = f0;
    80204cc6:	01493023          	sd	s4,0(s2)
	*pf1 = f1;
    80204cca:	0159b023          	sd	s5,0(s3)
	return 0;
    80204cce:	4501                	li	a0,0
}
    80204cd0:	70e2                	ld	ra,56(sp)
    80204cd2:	7442                	ld	s0,48(sp)
    80204cd4:	74a2                	ld	s1,40(sp)
    80204cd6:	7902                	ld	s2,32(sp)
    80204cd8:	69e2                	ld	s3,24(sp)
    80204cda:	6a42                	ld	s4,16(sp)
    80204cdc:	6aa2                	ld	s5,8(sp)
    80204cde:	6121                	addi	sp,sp,64
    80204ce0:	8082                	ret
		fileclose(f0);
    80204ce2:	8552                	mv	a0,s4
    80204ce4:	00001097          	auipc	ra,0x1
    80204ce8:	5b8080e7          	jalr	1464(ra) # 8020629c <fileclose>
	if (f1)
    80204cec:	000a8763          	beqz	s5,80204cfa <pipealloc+0x118>
		fileclose(f1);
    80204cf0:	8556                	mv	a0,s5
    80204cf2:	00001097          	auipc	ra,0x1
    80204cf6:	5aa080e7          	jalr	1450(ra) # 8020629c <fileclose>
	*pf0 = *pf1 = NULL;
    80204cfa:	0009b023          	sd	zero,0(s3)
    80204cfe:	00093023          	sd	zero,0(s2)
	return -ENOMEM;
    80204d02:	5551                	li	a0,-12
    80204d04:	b7f1                	j	80204cd0 <pipealloc+0xee>

0000000080204d06 <pipeclose>:
{
    80204d06:	1101                	addi	sp,sp,-32
    80204d08:	ec06                	sd	ra,24(sp)
    80204d0a:	e822                	sd	s0,16(sp)
    80204d0c:	e426                	sd	s1,8(sp)
    80204d0e:	e04a                	sd	s2,0(sp)
    80204d10:	1000                	addi	s0,sp,32
    80204d12:	84aa                	mv	s1,a0
    80204d14:	892e                	mv	s2,a1
	acquire(&pi->lock);
    80204d16:	00004097          	auipc	ra,0x4
    80204d1a:	1c4080e7          	jalr	452(ra) # 80208eda <acquire>
	if (writable) {
    80204d1e:	04090063          	beqz	s2,80204d5e <pipeclose+0x58>
		pi->writeopen = 0;
    80204d22:	060488a3          	sb	zero,113(s1)
		pipewakeup(pi, PIPE_READER);
    80204d26:	4581                	li	a1,0
    80204d28:	8526                	mv	a0,s1
    80204d2a:	00000097          	auipc	ra,0x0
    80204d2e:	c2e080e7          	jalr	-978(ra) # 80204958 <pipewakeup>
	if (pi->readopen == 0 && pi->writeopen == 0) {
    80204d32:	0704d783          	lhu	a5,112(s1)
    80204d36:	e7a1                	bnez	a5,80204d7e <pipeclose+0x78>
		release(&pi->lock);
    80204d38:	8526                	mv	a0,s1
    80204d3a:	00004097          	auipc	ra,0x4
    80204d3e:	1f4080e7          	jalr	500(ra) # 80208f2e <release>
		if (pi->size_shift)
    80204d42:	0734c783          	lbu	a5,115(s1)
    80204d46:	e78d                	bnez	a5,80204d70 <pipeclose+0x6a>
		kfree(pi);
    80204d48:	8526                	mv	a0,s1
    80204d4a:	00005097          	auipc	ra,0x5
    80204d4e:	4bc080e7          	jalr	1212(ra) # 8020a206 <kfree>
}
    80204d52:	60e2                	ld	ra,24(sp)
    80204d54:	6442                	ld	s0,16(sp)
    80204d56:	64a2                	ld	s1,8(sp)
    80204d58:	6902                	ld	s2,0(sp)
    80204d5a:	6105                	addi	sp,sp,32
    80204d5c:	8082                	ret
		pi->readopen = 0;
    80204d5e:	06048823          	sb	zero,112(s1)
		pipewakeup(pi, PIPE_WRITER);
    80204d62:	4585                	li	a1,1
    80204d64:	8526                	mv	a0,s1
    80204d66:	00000097          	auipc	ra,0x0
    80204d6a:	bf2080e7          	jalr	-1038(ra) # 80204958 <pipewakeup>
    80204d6e:	b7d1                	j	80204d32 <pipeclose+0x2c>
			freepage_n((uint64)pi->pdata, 4);
    80204d70:	4591                	li	a1,4
    80204d72:	7ca8                	ld	a0,120(s1)
    80204d74:	00005097          	auipc	ra,0x5
    80204d78:	f78080e7          	jalr	-136(ra) # 80209cec <freepage_n>
    80204d7c:	b7f1                	j	80204d48 <pipeclose+0x42>
		release(&pi->lock);
    80204d7e:	8526                	mv	a0,s1
    80204d80:	00004097          	auipc	ra,0x4
    80204d84:	1ae080e7          	jalr	430(ra) # 80208f2e <release>
}
    80204d88:	b7e9                	j	80204d52 <pipeclose+0x4c>

0000000080204d8a <pipewrite>:
{
    80204d8a:	7135                	addi	sp,sp,-160
    80204d8c:	ed06                	sd	ra,152(sp)
    80204d8e:	e922                	sd	s0,144(sp)
    80204d90:	e526                	sd	s1,136(sp)
    80204d92:	e14a                	sd	s2,128(sp)
    80204d94:	fcce                	sd	s3,120(sp)
    80204d96:	f8d2                	sd	s4,112(sp)
    80204d98:	f4d6                	sd	s5,104(sp)
    80204d9a:	f0da                	sd	s6,96(sp)
    80204d9c:	ecde                	sd	s7,88(sp)
    80204d9e:	e8e2                	sd	s8,80(sp)
    80204da0:	e4e6                	sd	s9,72(sp)
    80204da2:	e0ea                	sd	s10,64(sp)
    80204da4:	fc6e                	sd	s11,56(sp)
    80204da6:	1100                	addi	s0,sp,160
    80204da8:	84aa                	mv	s1,a0
    80204daa:	8bae                	mv	s7,a1
    80204dac:	8c32                	mv	s8,a2
    80204dae:	8936                	mv	s2,a3
    80204db0:	f6d43423          	sd	a3,-152(s0)
	wait.chan = &wait;
    80204db4:	f7840593          	addi	a1,s0,-136
    80204db8:	f6b43c23          	sd	a1,-136(s0)
	pipelock(pi, &wait, PIPE_WRITER);		// block other writers
    80204dbc:	4605                	li	a2,1
    80204dbe:	00000097          	auipc	ra,0x0
    80204dc2:	be6080e7          	jalr	-1050(ra) # 802049a4 <pipelock>
	if (!pi->size_shift && n > PIPE_SIZE && 
    80204dc6:	0734c783          	lbu	a5,115(s1)
    80204dca:	e3b1                	bnez	a5,80204e0e <pipewrite+0x84>
    80204dcc:	20000713          	li	a4,512
    80204dd0:	03275f63          	bge	a4,s2,80204e0e <pipewrite+0x84>
    80204dd4:	54b8                	lw	a4,104(s1)
    80204dd6:	54fc                	lw	a5,108(s1)
    80204dd8:	00f70c63          	beq	a4,a5,80204df0 <pipewrite+0x66>
	char *const pipebound = pi->pdata + PIPESIZE(pi);
    80204ddc:	0734cb03          	lbu	s6,115(s1)
    80204de0:	20000793          	li	a5,512
    80204de4:	016797bb          	sllw	a5,a5,s6
    80204de8:	0784bb03          	ld	s6,120(s1)
    80204dec:	9b3e                	add	s6,s6,a5
	for (i = 0; i < n;) {
    80204dee:	a81d                	j	80204e24 <pipewrite+0x9a>
		char *bigger = allocpage_n(4);
    80204df0:	4511                	li	a0,4
    80204df2:	00005097          	auipc	ra,0x5
    80204df6:	ea0080e7          	jalr	-352(ra) # 80209c92 <allocpage_n>
		if (bigger) {
    80204dfa:	d16d                	beqz	a0,80204ddc <pipewrite+0x52>
			pi->nwrite = pi->nread = 0;
    80204dfc:	0604a423          	sw	zero,104(s1)
    80204e00:	0604a623          	sw	zero,108(s1)
			pi->pdata = bigger;
    80204e04:	fca8                	sd	a0,120(s1)
			pi->size_shift = 5;
    80204e06:	4795                	li	a5,5
    80204e08:	06f489a3          	sb	a5,115(s1)
    80204e0c:	bfc1                	j	80204ddc <pipewrite+0x52>
	char *const pipebound = pi->pdata + PIPESIZE(pi);
    80204e0e:	20000b13          	li	s6,512
    80204e12:	00fb17bb          	sllw	a5,s6,a5
    80204e16:	0784bb03          	ld	s6,120(s1)
    80204e1a:	9b3e                	add	s6,s6,a5
	for (i = 0; i < n;) {
    80204e1c:	f6843783          	ld	a5,-152(s0)
    80204e20:	0cf05963          	blez	a5,80204ef2 <pipewrite+0x168>
{
    80204e24:	4a81                	li	s5,0
		m = (PIPESIZE(pi) - m < n - i) ?	// amount of bytes to write
    80204e26:	20000c93          	li	s9,512
		if ((m = pipewritable(pi)) < 0) {
    80204e2a:	8526                	mv	a0,s1
    80204e2c:	00000097          	auipc	ra,0x0
    80204e30:	bee080e7          	jalr	-1042(ra) # 80204a1a <pipewritable>
    80204e34:	10054a63          	bltz	a0,80204f48 <pipewrite+0x1be>
		m = (PIPESIZE(pi) - m < n - i) ?	// amount of bytes to write
    80204e38:	0734c783          	lbu	a5,115(s1)
    80204e3c:	00fc973b          	sllw	a4,s9,a5
    80204e40:	40a7053b          	subw	a0,a4,a0
    80204e44:	f6843783          	ld	a5,-152(s0)
    80204e48:	415787bb          	subw	a5,a5,s5
    80204e4c:	86be                	mv	a3,a5
    80204e4e:	2781                	sext.w	a5,a5
    80204e50:	0005061b          	sext.w	a2,a0
    80204e54:	00f65363          	bge	a2,a5,80204e5a <pipewrite+0xd0>
    80204e58:	86aa                	mv	a3,a0
    80204e5a:	00068d9b          	sext.w	s11,a3
		int mm = m > PIPESIZE(pi) / 2 ? (PIPESIZE(pi) / 2) : m;
    80204e5e:	01f7579b          	srliw	a5,a4,0x1f
    80204e62:	9fb9                	addw	a5,a5,a4
    80204e64:	4017d79b          	sraiw	a5,a5,0x1
    80204e68:	8d3e                	mv	s10,a5
    80204e6a:	2781                	sext.w	a5,a5
    80204e6c:	00fdd363          	bge	s11,a5,80204e72 <pipewrite+0xe8>
    80204e70:	8d36                	mv	s10,a3
    80204e72:	2d01                	sext.w	s10,s10
		while (m > 0) {					// pipe is a loop in a buf
    80204e74:	07b05263          	blez	s11,80204ed8 <pipewrite+0x14e>
			while (mm > 0) {
    80204e78:	05a05c63          	blez	s10,80204ed0 <pipewrite+0x146>
    80204e7c:	89ea                	mv	s3,s10
    80204e7e:	a805                	j	80204eae <pipewrite+0x124>
				int count = (pipebound - paddr < mm) ? pipebound - paddr : mm;
    80204e80:	00090a1b          	sext.w	s4,s2
				if (either_copyin(user,paddr, addr + i, count) < 0) {
    80204e84:	86d2                	mv	a3,s4
    80204e86:	018a8633          	add	a2,s5,s8
    80204e8a:	855e                	mv	a0,s7
    80204e8c:	00007097          	auipc	ra,0x7
    80204e90:	c00080e7          	jalr	-1024(ra) # 8020ba8c <either_copyin>
    80204e94:	06054063          	bltz	a0,80204ef4 <pipewrite+0x16a>
				i += count;
    80204e98:	015a0abb          	addw	s5,s4,s5
				pi->nwrite += count;
    80204e9c:	54fc                	lw	a5,108(s1)
    80204e9e:	0127893b          	addw	s2,a5,s2
    80204ea2:	0724a623          	sw	s2,108(s1)
				mm -= count;
    80204ea6:	414989bb          	subw	s3,s3,s4
			while (mm > 0) {
    80204eaa:	03305363          	blez	s3,80204ed0 <pipewrite+0x146>
				char *paddr = pi->pdata + pi->nwrite % PIPESIZE(pi);
    80204eae:	0734c583          	lbu	a1,115(s1)
    80204eb2:	00bc95bb          	sllw	a1,s9,a1
    80204eb6:	35fd                	addiw	a1,a1,-1
    80204eb8:	54fc                	lw	a5,108(s1)
    80204eba:	8dfd                	and	a1,a1,a5
    80204ebc:	1582                	slli	a1,a1,0x20
    80204ebe:	9181                	srli	a1,a1,0x20
    80204ec0:	7cbc                	ld	a5,120(s1)
    80204ec2:	95be                	add	a1,a1,a5
				int count = (pipebound - paddr < mm) ? pipebound - paddr : mm;
    80204ec4:	40bb0933          	sub	s2,s6,a1
    80204ec8:	fb29dce3          	bge	s3,s2,80204e80 <pipewrite+0xf6>
    80204ecc:	894e                	mv	s2,s3
    80204ece:	bf4d                	j	80204e80 <pipewrite+0xf6>
			m -= mm;
    80204ed0:	41ad8dbb          	subw	s11,s11,s10
			if ((mm = m) > 0) {
    80204ed4:	01b04763          	bgtz	s11,80204ee2 <pipewrite+0x158>
	for (i = 0; i < n;) {
    80204ed8:	f6843783          	ld	a5,-152(s0)
    80204edc:	f4fac7e3          	blt	s5,a5,80204e2a <pipewrite+0xa0>
    80204ee0:	a811                	j	80204ef4 <pipewrite+0x16a>
				pipewakeup(pi, PIPE_READER);
    80204ee2:	4581                	li	a1,0
    80204ee4:	8526                	mv	a0,s1
    80204ee6:	00000097          	auipc	ra,0x0
    80204eea:	a72080e7          	jalr	-1422(ra) # 80204958 <pipewakeup>
    80204eee:	8d6e                	mv	s10,s11
    80204ef0:	b761                	j	80204e78 <pipewrite+0xee>
	for (i = 0; i < n;) {
    80204ef2:	4a81                	li	s5,0
	acquire(&pi->lock);		// see pipewritable()
    80204ef4:	8526                	mv	a0,s1
    80204ef6:	00004097          	auipc	ra,0x4
    80204efa:	fe4080e7          	jalr	-28(ra) # 80208eda <acquire>
	pipewakeup(pi, PIPE_READER);
    80204efe:	4581                	li	a1,0
    80204f00:	8526                	mv	a0,s1
    80204f02:	00000097          	auipc	ra,0x0
    80204f06:	a56080e7          	jalr	-1450(ra) # 80204958 <pipewakeup>
	pi->writing = 0;
    80204f0a:	06048923          	sb	zero,114(s1)
	release(&pi->lock);
    80204f0e:	8526                	mv	a0,s1
    80204f10:	00004097          	auipc	ra,0x4
    80204f14:	01e080e7          	jalr	30(ra) # 80208f2e <release>
	pipeunlock(pi, &wait, PIPE_WRITER);
    80204f18:	4605                	li	a2,1
    80204f1a:	f7840593          	addi	a1,s0,-136
    80204f1e:	8526                	mv	a0,s1
    80204f20:	00000097          	auipc	ra,0x0
    80204f24:	c64080e7          	jalr	-924(ra) # 80204b84 <pipeunlock>
}
    80204f28:	8556                	mv	a0,s5
    80204f2a:	60ea                	ld	ra,152(sp)
    80204f2c:	644a                	ld	s0,144(sp)
    80204f2e:	64aa                	ld	s1,136(sp)
    80204f30:	690a                	ld	s2,128(sp)
    80204f32:	79e6                	ld	s3,120(sp)
    80204f34:	7a46                	ld	s4,112(sp)
    80204f36:	7aa6                	ld	s5,104(sp)
    80204f38:	7b06                	ld	s6,96(sp)
    80204f3a:	6be6                	ld	s7,88(sp)
    80204f3c:	6c46                	ld	s8,80(sp)
    80204f3e:	6ca6                	ld	s9,72(sp)
    80204f40:	6d06                	ld	s10,64(sp)
    80204f42:	7de2                	ld	s11,56(sp)
    80204f44:	610d                	addi	sp,sp,160
    80204f46:	8082                	ret
		if ((m = pipewritable(pi)) < 0) {
    80204f48:	8aaa                	mv	s5,a0
    80204f4a:	b7f9                	j	80204f18 <pipewrite+0x18e>

0000000080204f4c <piperead>:
{
    80204f4c:	7135                	addi	sp,sp,-160
    80204f4e:	ed06                	sd	ra,152(sp)
    80204f50:	e922                	sd	s0,144(sp)
    80204f52:	e526                	sd	s1,136(sp)
    80204f54:	e14a                	sd	s2,128(sp)
    80204f56:	fcce                	sd	s3,120(sp)
    80204f58:	f8d2                	sd	s4,112(sp)
    80204f5a:	f4d6                	sd	s5,104(sp)
    80204f5c:	f0da                	sd	s6,96(sp)
    80204f5e:	ecde                	sd	s7,88(sp)
    80204f60:	e8e2                	sd	s8,80(sp)
    80204f62:	e4e6                	sd	s9,72(sp)
    80204f64:	e0ea                	sd	s10,64(sp)
    80204f66:	fc6e                	sd	s11,56(sp)
    80204f68:	1100                	addi	s0,sp,160
    80204f6a:	84aa                	mv	s1,a0
    80204f6c:	8c2e                	mv	s8,a1
    80204f6e:	8cb2                	mv	s9,a2
    80204f70:	8936                	mv	s2,a3
    80204f72:	f6d43423          	sd	a3,-152(s0)
	wait.chan = &wait;
    80204f76:	f7840593          	addi	a1,s0,-136
    80204f7a:	f6b43c23          	sd	a1,-136(s0)
	pipelock(pi, &wait, PIPE_READER);	// block other readers
    80204f7e:	4601                	li	a2,0
    80204f80:	00000097          	auipc	ra,0x0
    80204f84:	a24080e7          	jalr	-1500(ra) # 802049a4 <pipelock>
	while (tot < n) {
    80204f88:	0f205263          	blez	s2,8020506c <piperead+0x120>
	int tot = 0, m;
    80204f8c:	4b01                	li	s6,0
		char *const pipebound = pi->pdata + PIPESIZE(pi);
    80204f8e:	20000d13          	li	s10,512
		if ((m = pipereadable(pi, tot > 0)) < 0) {
    80204f92:	016025b3          	sgtz	a1,s6
    80204f96:	8526                	mv	a0,s1
    80204f98:	00000097          	auipc	ra,0x0
    80204f9c:	b42080e7          	jalr	-1214(ra) # 80204ada <pipereadable>
    80204fa0:	04054763          	bltz	a0,80204fee <piperead+0xa2>
		if (m > n - tot)
    80204fa4:	f6843783          	ld	a5,-152(s0)
    80204fa8:	416787bb          	subw	a5,a5,s6
    80204fac:	86be                	mv	a3,a5
    80204fae:	2781                	sext.w	a5,a5
    80204fb0:	00f55363          	bge	a0,a5,80204fb6 <piperead+0x6a>
    80204fb4:	86aa                	mv	a3,a0
    80204fb6:	00068d9b          	sext.w	s11,a3
		char *const pipebound = pi->pdata + PIPESIZE(pi);
    80204fba:	0734c783          	lbu	a5,115(s1)
    80204fbe:	00fd173b          	sllw	a4,s10,a5
    80204fc2:	0007079b          	sext.w	a5,a4
    80204fc6:	0784bb83          	ld	s7,120(s1)
    80204fca:	9bbe                	add	s7,s7,a5
		int mm = m > PIPESIZE(pi) / 2 ? (PIPESIZE(pi) / 2) : m;
    80204fcc:	01f7579b          	srliw	a5,a4,0x1f
    80204fd0:	9fb9                	addw	a5,a5,a4
    80204fd2:	4017d79b          	sraiw	a5,a5,0x1
    80204fd6:	8abe                	mv	s5,a5
    80204fd8:	2781                	sext.w	a5,a5
    80204fda:	00fdd363          	bge	s11,a5,80204fe0 <piperead+0x94>
    80204fde:	8ab6                	mv	s5,a3
    80204fe0:	2a81                	sext.w	s5,s5
		while (m > 0) {
    80204fe2:	07b05863          	blez	s11,80205052 <piperead+0x106>
			for (int i = 0; i < mm;) {
    80204fe6:	07505263          	blez	s5,8020504a <piperead+0xfe>
    80204fea:	4901                	li	s2,0
    80204fec:	a825                	j	80205024 <piperead+0xd8>
			if (tot == 0)
    80204fee:	0a0b1063          	bnez	s6,8020508e <piperead+0x142>
		if ((m = pipereadable(pi, tot > 0)) < 0) {
    80204ff2:	8b2a                	mv	s6,a0
    80204ff4:	a869                	j	8020508e <piperead+0x142>
				int count = (pipebound - paddr < mm - i) ? pipebound - paddr : mm - i;
    80204ff6:	00098a1b          	sext.w	s4,s3
				if (either_copyout(user, addr + i, paddr, count) < 0) {
    80204ffa:	86d2                	mv	a3,s4
    80204ffc:	019905b3          	add	a1,s2,s9
    80205000:	8562                	mv	a0,s8
    80205002:	00007097          	auipc	ra,0x7
    80205006:	a34080e7          	jalr	-1484(ra) # 8020ba36 <either_copyout>
    8020500a:	06054263          	bltz	a0,8020506e <piperead+0x122>
				pi->nread += count;
    8020500e:	54bc                	lw	a5,104(s1)
    80205010:	013789bb          	addw	s3,a5,s3
    80205014:	0734a423          	sw	s3,104(s1)
				i += count;
    80205018:	012a093b          	addw	s2,s4,s2
				tot += count;
    8020501c:	016a0b3b          	addw	s6,s4,s6
			for (int i = 0; i < mm;) {
    80205020:	03595563          	bge	s2,s5,8020504a <piperead+0xfe>
				char *paddr = pi->pdata + pi->nread % PIPESIZE(pi);
    80205024:	0734c603          	lbu	a2,115(s1)
    80205028:	00cd163b          	sllw	a2,s10,a2
    8020502c:	367d                	addiw	a2,a2,-1
    8020502e:	54bc                	lw	a5,104(s1)
    80205030:	8e7d                	and	a2,a2,a5
    80205032:	1602                	slli	a2,a2,0x20
    80205034:	9201                	srli	a2,a2,0x20
    80205036:	7cbc                	ld	a5,120(s1)
    80205038:	963e                	add	a2,a2,a5
				int count = (pipebound - paddr < mm - i) ? pipebound - paddr : mm - i;
    8020503a:	40cb87b3          	sub	a5,s7,a2
    8020503e:	412a89bb          	subw	s3,s5,s2
    80205042:	fb37dae3          	bge	a5,s3,80204ff6 <piperead+0xaa>
    80205046:	89be                	mv	s3,a5
    80205048:	b77d                	j	80204ff6 <piperead+0xaa>
			m -= mm;
    8020504a:	415d8dbb          	subw	s11,s11,s5
			if ((mm = m) > 0) {
    8020504e:	01b04763          	bgtz	s11,8020505c <piperead+0x110>
	while (tot < n) {
    80205052:	f6843783          	ld	a5,-152(s0)
    80205056:	f2fb4ee3          	blt	s6,a5,80204f92 <piperead+0x46>
    8020505a:	a811                	j	8020506e <piperead+0x122>
				pipewakeup(pi, PIPE_WRITER);
    8020505c:	4585                	li	a1,1
    8020505e:	8526                	mv	a0,s1
    80205060:	00000097          	auipc	ra,0x0
    80205064:	8f8080e7          	jalr	-1800(ra) # 80204958 <pipewakeup>
    80205068:	8aee                	mv	s5,s11
    8020506a:	bfb5                	j	80204fe6 <piperead+0x9a>
	int tot = 0, m;
    8020506c:	4b01                	li	s6,0
	acquire(&pi->lock);		// see pipewritable()
    8020506e:	8526                	mv	a0,s1
    80205070:	00004097          	auipc	ra,0x4
    80205074:	e6a080e7          	jalr	-406(ra) # 80208eda <acquire>
	pipewakeup(pi, PIPE_WRITER);
    80205078:	4585                	li	a1,1
    8020507a:	8526                	mv	a0,s1
    8020507c:	00000097          	auipc	ra,0x0
    80205080:	8dc080e7          	jalr	-1828(ra) # 80204958 <pipewakeup>
	release(&pi->lock);
    80205084:	8526                	mv	a0,s1
    80205086:	00004097          	auipc	ra,0x4
    8020508a:	ea8080e7          	jalr	-344(ra) # 80208f2e <release>
	pipeunlock(pi, &wait, PIPE_READER);
    8020508e:	4601                	li	a2,0
    80205090:	f7840593          	addi	a1,s0,-136
    80205094:	8526                	mv	a0,s1
    80205096:	00000097          	auipc	ra,0x0
    8020509a:	aee080e7          	jalr	-1298(ra) # 80204b84 <pipeunlock>
}
    8020509e:	855a                	mv	a0,s6
    802050a0:	60ea                	ld	ra,152(sp)
    802050a2:	644a                	ld	s0,144(sp)
    802050a4:	64aa                	ld	s1,136(sp)
    802050a6:	690a                	ld	s2,128(sp)
    802050a8:	79e6                	ld	s3,120(sp)
    802050aa:	7a46                	ld	s4,112(sp)
    802050ac:	7aa6                	ld	s5,104(sp)
    802050ae:	7b06                	ld	s6,96(sp)
    802050b0:	6be6                	ld	s7,88(sp)
    802050b2:	6c46                	ld	s8,80(sp)
    802050b4:	6ca6                	ld	s9,72(sp)
    802050b6:	6d06                	ld	s10,64(sp)
    802050b8:	7de2                	ld	s11,56(sp)
    802050ba:	610d                	addi	sp,sp,160
    802050bc:	8082                	ret

00000000802050be <pipewritev>:
{
    802050be:	7135                	addi	sp,sp,-160
    802050c0:	ed06                	sd	ra,152(sp)
    802050c2:	e922                	sd	s0,144(sp)
    802050c4:	e526                	sd	s1,136(sp)
    802050c6:	e14a                	sd	s2,128(sp)
    802050c8:	fcce                	sd	s3,120(sp)
    802050ca:	f8d2                	sd	s4,112(sp)
    802050cc:	f4d6                	sd	s5,104(sp)
    802050ce:	f0da                	sd	s6,96(sp)
    802050d0:	ecde                	sd	s7,88(sp)
    802050d2:	e8e2                	sd	s8,80(sp)
    802050d4:	e4e6                	sd	s9,72(sp)
    802050d6:	e0ea                	sd	s10,64(sp)
    802050d8:	fc6e                	sd	s11,56(sp)
    802050da:	1100                	addi	s0,sp,160
    802050dc:	84aa                	mv	s1,a0
    802050de:	89ae                	mv	s3,a1
    802050e0:	8932                	mv	s2,a2
	char *const pipebound = pi->pdata + PIPESIZE(pi);
    802050e2:	07354783          	lbu	a5,115(a0)
    802050e6:	20000c13          	li	s8,512
    802050ea:	00fc17bb          	sllw	a5,s8,a5
    802050ee:	07853c03          	ld	s8,120(a0)
    802050f2:	9c3e                	add	s8,s8,a5
	wait.chan = &wait;
    802050f4:	f7840593          	addi	a1,s0,-136
    802050f8:	f6b43c23          	sd	a1,-136(s0)
	pipelock(pi, &wait, PIPE_WRITER);	// block other writers
    802050fc:	4605                	li	a2,1
    802050fe:	00000097          	auipc	ra,0x0
    80205102:	8a6080e7          	jalr	-1882(ra) # 802049a4 <pipelock>
	for (int i = 0; i < count; i++) {
    80205106:	0f205563          	blez	s2,802051f0 <pipewritev+0x132>
    8020510a:	8dce                	mv	s11,s3
    8020510c:	fff9079b          	addiw	a5,s2,-1
    80205110:	1782                	slli	a5,a5,0x20
    80205112:	9381                	srli	a5,a5,0x20
    80205114:	0792                	slli	a5,a5,0x4
    80205116:	09c1                	addi	s3,s3,16
    80205118:	97ce                	add	a5,a5,s3
    8020511a:	f6f43423          	sd	a5,-152(s0)
	int ret = 0;
    8020511e:	4b01                	li	s6,0
			m = (PIPESIZE(pi) - m < n - j) ? PIPESIZE(pi) - m : n - j;		// amount of bytes to write
    80205120:	20000c93          	li	s9,512
		uint64 addr = (uint64)ioarr[i].iov_base;
    80205124:	000dbb83          	ld	s7,0(s11)
		uint64 n = ioarr[i].iov_len;
    80205128:	008ded03          	lwu	s10,8(s11)
		struct vma* vma = myproc()->vma;
    8020512c:	00007097          	auipc	ra,0x7
    80205130:	286080e7          	jalr	646(ra) # 8020c3b2 <myproc>
    80205134:	17053903          	ld	s2,368(a0)
		if (!addr_locate_vma(vma, addr)||!addr_locate_vma(vma, addr+n-1))
    80205138:	85de                	mv	a1,s7
    8020513a:	854a                	mv	a0,s2
    8020513c:	00007097          	auipc	ra,0x7
    80205140:	45c080e7          	jalr	1116(ra) # 8020c598 <addr_locate_vma>
    80205144:	c55d                	beqz	a0,802051f2 <pipewritev+0x134>
    80205146:	01ab85b3          	add	a1,s7,s10
    8020514a:	15fd                	addi	a1,a1,-1
    8020514c:	854a                	mv	a0,s2
    8020514e:	00007097          	auipc	ra,0x7
    80205152:	44a080e7          	jalr	1098(ra) # 8020c598 <addr_locate_vma>
    80205156:	cd51                	beqz	a0,802051f2 <pipewritev+0x134>
		for (j = 0; j < n;) {
    80205158:	020d0c63          	beqz	s10,80205190 <pipewritev+0xd2>
    8020515c:	4a81                	li	s5,0
    8020515e:	4981                	li	s3,0
			int m = pipewritable(pi);
    80205160:	8526                	mv	a0,s1
    80205162:	00000097          	auipc	ra,0x0
    80205166:	8b8080e7          	jalr	-1864(ra) # 80204a1a <pipewritable>
			if (m < 0) {
    8020516a:	0c054e63          	bltz	a0,80205246 <pipewritev+0x188>
			m = (PIPESIZE(pi) - m < n - j) ? PIPESIZE(pi) - m : n - j;		// amount of bytes to write
    8020516e:	0734c903          	lbu	s2,115(s1)
    80205172:	012c993b          	sllw	s2,s9,s2
    80205176:	413d09b3          	sub	s3,s10,s3
    8020517a:	40a9093b          	subw	s2,s2,a0
    8020517e:	0129f363          	bgeu	s3,s2,80205184 <pipewritev+0xc6>
    80205182:	894e                	mv	s2,s3
    80205184:	2901                	sext.w	s2,s2
			while (m > 0) {							// pipe is a loop in a buf
    80205186:	05204463          	bgtz	s2,802051ce <pipewritev+0x110>
		for (j = 0; j < n;) {
    8020518a:	89d6                	mv	s3,s5
    8020518c:	fdaaeae3          	bltu	s5,s10,80205160 <pipewritev+0xa2>
	for (int i = 0; i < count; i++) {
    80205190:	0dc1                	addi	s11,s11,16
    80205192:	f6843783          	ld	a5,-152(s0)
    80205196:	f8fd97e3          	bne	s11,a5,80205124 <pipewritev+0x66>
    8020519a:	a8a1                	j	802051f2 <pipewritev+0x134>
				int cnt = (pipebound - paddr < m) ? pipebound - paddr : m;
    8020519c:	000a099b          	sext.w	s3,s4
				if (either_copyin(1, paddr, addr + j, cnt) < 0)
    802051a0:	86ce                	mv	a3,s3
    802051a2:	017a8633          	add	a2,s5,s7
    802051a6:	4505                	li	a0,1
    802051a8:	00007097          	auipc	ra,0x7
    802051ac:	8e4080e7          	jalr	-1820(ra) # 8020ba8c <either_copyin>
    802051b0:	04054163          	bltz	a0,802051f2 <pipewritev+0x134>
				m -= cnt;
    802051b4:	4139093b          	subw	s2,s2,s3
				j += cnt;
    802051b8:	01598abb          	addw	s5,s3,s5
				pi->nwrite += cnt;
    802051bc:	54fc                	lw	a5,108(s1)
    802051be:	01478a3b          	addw	s4,a5,s4
    802051c2:	0744a623          	sw	s4,108(s1)
				ret += cnt;
    802051c6:	01698b3b          	addw	s6,s3,s6
			while (m > 0) {							// pipe is a loop in a buf
    802051ca:	fd2050e3          	blez	s2,8020518a <pipewritev+0xcc>
				char *paddr = pi->pdata + pi->nwrite % PIPESIZE(pi);
    802051ce:	0734c583          	lbu	a1,115(s1)
    802051d2:	00bc95bb          	sllw	a1,s9,a1
    802051d6:	35fd                	addiw	a1,a1,-1
    802051d8:	54fc                	lw	a5,108(s1)
    802051da:	8dfd                	and	a1,a1,a5
    802051dc:	1582                	slli	a1,a1,0x20
    802051de:	9181                	srli	a1,a1,0x20
    802051e0:	7cbc                	ld	a5,120(s1)
    802051e2:	95be                	add	a1,a1,a5
				int cnt = (pipebound - paddr < m) ? pipebound - paddr : m;
    802051e4:	40bc0a33          	sub	s4,s8,a1
    802051e8:	fb495ae3          	bge	s2,s4,8020519c <pipewritev+0xde>
    802051ec:	8a4a                	mv	s4,s2
    802051ee:	b77d                	j	8020519c <pipewritev+0xde>
	int ret = 0;
    802051f0:	4b01                	li	s6,0
	acquire(&pi->lock);		// see pipewritable()
    802051f2:	8526                	mv	a0,s1
    802051f4:	00004097          	auipc	ra,0x4
    802051f8:	ce6080e7          	jalr	-794(ra) # 80208eda <acquire>
	pipewakeup(pi, PIPE_READER);
    802051fc:	4581                	li	a1,0
    802051fe:	8526                	mv	a0,s1
    80205200:	fffff097          	auipc	ra,0xfffff
    80205204:	758080e7          	jalr	1880(ra) # 80204958 <pipewakeup>
	pi->writing = 0;
    80205208:	06048923          	sb	zero,114(s1)
	release(&pi->lock);
    8020520c:	8526                	mv	a0,s1
    8020520e:	00004097          	auipc	ra,0x4
    80205212:	d20080e7          	jalr	-736(ra) # 80208f2e <release>
	pipeunlock(pi, &wait, PIPE_WRITER);
    80205216:	4605                	li	a2,1
    80205218:	f7840593          	addi	a1,s0,-136
    8020521c:	8526                	mv	a0,s1
    8020521e:	00000097          	auipc	ra,0x0
    80205222:	966080e7          	jalr	-1690(ra) # 80204b84 <pipeunlock>
}
    80205226:	855a                	mv	a0,s6
    80205228:	60ea                	ld	ra,152(sp)
    8020522a:	644a                	ld	s0,144(sp)
    8020522c:	64aa                	ld	s1,136(sp)
    8020522e:	690a                	ld	s2,128(sp)
    80205230:	79e6                	ld	s3,120(sp)
    80205232:	7a46                	ld	s4,112(sp)
    80205234:	7aa6                	ld	s5,104(sp)
    80205236:	7b06                	ld	s6,96(sp)
    80205238:	6be6                	ld	s7,88(sp)
    8020523a:	6c46                	ld	s8,80(sp)
    8020523c:	6ca6                	ld	s9,72(sp)
    8020523e:	6d06                	ld	s10,64(sp)
    80205240:	7de2                	ld	s11,56(sp)
    80205242:	610d                	addi	sp,sp,160
    80205244:	8082                	ret
				ret = -EPIPE;
    80205246:	5b01                	li	s6,-32
    80205248:	b7f9                	j	80205216 <pipewritev+0x158>

000000008020524a <pipereadv>:
{
    8020524a:	7135                	addi	sp,sp,-160
    8020524c:	ed06                	sd	ra,152(sp)
    8020524e:	e922                	sd	s0,144(sp)
    80205250:	e526                	sd	s1,136(sp)
    80205252:	e14a                	sd	s2,128(sp)
    80205254:	fcce                	sd	s3,120(sp)
    80205256:	f8d2                	sd	s4,112(sp)
    80205258:	f4d6                	sd	s5,104(sp)
    8020525a:	f0da                	sd	s6,96(sp)
    8020525c:	ecde                	sd	s7,88(sp)
    8020525e:	e8e2                	sd	s8,80(sp)
    80205260:	e4e6                	sd	s9,72(sp)
    80205262:	e0ea                	sd	s10,64(sp)
    80205264:	fc6e                	sd	s11,56(sp)
    80205266:	1100                	addi	s0,sp,160
    80205268:	84aa                	mv	s1,a0
    8020526a:	89ae                	mv	s3,a1
    8020526c:	8932                	mv	s2,a2
	char *const pipebound = pi->pdata + PIPESIZE(pi);
    8020526e:	07354783          	lbu	a5,115(a0)
    80205272:	20000c93          	li	s9,512
    80205276:	00fc97bb          	sllw	a5,s9,a5
    8020527a:	07853c83          	ld	s9,120(a0)
    8020527e:	9cbe                	add	s9,s9,a5
	wait.chan = &wait;
    80205280:	f7840593          	addi	a1,s0,-136
    80205284:	f6b43c23          	sd	a1,-136(s0)
	pipelock(pi, &wait, PIPE_READER);	// block other readers
    80205288:	4601                	li	a2,0
    8020528a:	fffff097          	auipc	ra,0xfffff
    8020528e:	71a080e7          	jalr	1818(ra) # 802049a4 <pipelock>
	if ((ndata = pipereadable(pi, 0)) < 0) {
    80205292:	4581                	li	a1,0
    80205294:	8526                	mv	a0,s1
    80205296:	00000097          	auipc	ra,0x0
    8020529a:	844080e7          	jalr	-1980(ra) # 80204ada <pipereadable>
    8020529e:	12054563          	bltz	a0,802053c8 <pipereadv+0x17e>
    802052a2:	8aaa                	mv	s5,a0
	for (int i = 0; i < count && ndata > 0; i++) {
    802052a4:	0d205763          	blez	s2,80205372 <pipereadv+0x128>
    802052a8:	10a05e63          	blez	a0,802053c4 <pipereadv+0x17a>
    802052ac:	8dce                	mv	s11,s3
    802052ae:	fff9079b          	addiw	a5,s2,-1
    802052b2:	1782                	slli	a5,a5,0x20
    802052b4:	9381                	srli	a5,a5,0x20
    802052b6:	0792                	slli	a5,a5,0x4
    802052b8:	97ce                	add	a5,a5,s3
    802052ba:	f6f43423          	sd	a5,-152(s0)
	int ndata, ret = 0;
    802052be:	4b81                	li	s7,0
			char *paddr = pi->pdata + pi->nread % PIPESIZE(pi);
    802052c0:	20000d13          	li	s10,512
		uint64 addr = (uint64)ioarr[i].iov_base;
    802052c4:	000dbc03          	ld	s8,0(s11)
		uint64 n = ioarr[i].iov_len;
    802052c8:	008de903          	lwu	s2,8(s11)
		int m = n < ndata ? n : ndata;
    802052cc:	8b56                	mv	s6,s5
    802052ce:	01597363          	bgeu	s2,s5,802052d4 <pipereadv+0x8a>
    802052d2:	8b4a                	mv	s6,s2
    802052d4:	2b01                	sext.w	s6,s6
		struct vma* vma = myproc()->vma;
    802052d6:	00007097          	auipc	ra,0x7
    802052da:	0dc080e7          	jalr	220(ra) # 8020c3b2 <myproc>
    802052de:	17053983          	ld	s3,368(a0)
		if (!addr_locate_vma(vma, addr)||!addr_locate_vma(vma, addr+n-1))
    802052e2:	85e2                	mv	a1,s8
    802052e4:	854e                	mv	a0,s3
    802052e6:	00007097          	auipc	ra,0x7
    802052ea:	2b2080e7          	jalr	690(ra) # 8020c598 <addr_locate_vma>
    802052ee:	c159                	beqz	a0,80205374 <pipereadv+0x12a>
    802052f0:	012c05b3          	add	a1,s8,s2
    802052f4:	15fd                	addi	a1,a1,-1
    802052f6:	854e                	mv	a0,s3
    802052f8:	00007097          	auipc	ra,0x7
    802052fc:	2a0080e7          	jalr	672(ra) # 8020c598 <addr_locate_vma>
    80205300:	c935                	beqz	a0,80205374 <pipereadv+0x12a>
		for (j = 0; j < m;) {
    80205302:	07605063          	blez	s6,80205362 <pipereadv+0x118>
    80205306:	4901                	li	s2,0
    80205308:	a815                	j	8020533c <pipereadv+0xf2>
			int cnt = (pipebound - paddr < m - j) ? pipebound - paddr : m - j;
    8020530a:	000a099b          	sext.w	s3,s4
			if (either_copyout(1, addr + j, paddr, cnt) < 0)
    8020530e:	86ce                	mv	a3,s3
    80205310:	018905b3          	add	a1,s2,s8
    80205314:	4505                	li	a0,1
    80205316:	00006097          	auipc	ra,0x6
    8020531a:	720080e7          	jalr	1824(ra) # 8020ba36 <either_copyout>
    8020531e:	04054b63          	bltz	a0,80205374 <pipereadv+0x12a>
			pi->nread += cnt;
    80205322:	54bc                	lw	a5,104(s1)
    80205324:	01478a3b          	addw	s4,a5,s4
    80205328:	0744a423          	sw	s4,104(s1)
			j += cnt;
    8020532c:	0129893b          	addw	s2,s3,s2
			ret += cnt;
    80205330:	01798bbb          	addw	s7,s3,s7
			ndata -= cnt;
    80205334:	413a8abb          	subw	s5,s5,s3
		for (j = 0; j < m;) {
    80205338:	03695563          	bge	s2,s6,80205362 <pipereadv+0x118>
			char *paddr = pi->pdata + pi->nread % PIPESIZE(pi);
    8020533c:	0734c603          	lbu	a2,115(s1)
    80205340:	00cd163b          	sllw	a2,s10,a2
    80205344:	367d                	addiw	a2,a2,-1
    80205346:	54bc                	lw	a5,104(s1)
    80205348:	8e7d                	and	a2,a2,a5
    8020534a:	1602                	slli	a2,a2,0x20
    8020534c:	9201                	srli	a2,a2,0x20
    8020534e:	7cbc                	ld	a5,120(s1)
    80205350:	963e                	add	a2,a2,a5
			int cnt = (pipebound - paddr < m - j) ? pipebound - paddr : m - j;
    80205352:	40cc87b3          	sub	a5,s9,a2
    80205356:	412b0a3b          	subw	s4,s6,s2
    8020535a:	fb47d8e3          	bge	a5,s4,8020530a <pipereadv+0xc0>
    8020535e:	8a3e                	mv	s4,a5
    80205360:	b76d                	j	8020530a <pipereadv+0xc0>
	for (int i = 0; i < count && ndata > 0; i++) {
    80205362:	f6843783          	ld	a5,-152(s0)
    80205366:	00fd8763          	beq	s11,a5,80205374 <pipereadv+0x12a>
    8020536a:	0dc1                	addi	s11,s11,16
    8020536c:	f5504ce3          	bgtz	s5,802052c4 <pipereadv+0x7a>
    80205370:	a011                	j	80205374 <pipereadv+0x12a>
	int ndata, ret = 0;
    80205372:	4b81                	li	s7,0
	acquire(&pi->lock);		// see pipewritable()
    80205374:	8526                	mv	a0,s1
    80205376:	00004097          	auipc	ra,0x4
    8020537a:	b64080e7          	jalr	-1180(ra) # 80208eda <acquire>
	pipewakeup(pi, PIPE_WRITER);
    8020537e:	4585                	li	a1,1
    80205380:	8526                	mv	a0,s1
    80205382:	fffff097          	auipc	ra,0xfffff
    80205386:	5d6080e7          	jalr	1494(ra) # 80204958 <pipewakeup>
	release(&pi->lock);
    8020538a:	8526                	mv	a0,s1
    8020538c:	00004097          	auipc	ra,0x4
    80205390:	ba2080e7          	jalr	-1118(ra) # 80208f2e <release>
	pipeunlock(pi, &wait, PIPE_READER);
    80205394:	4601                	li	a2,0
    80205396:	f7840593          	addi	a1,s0,-136
    8020539a:	8526                	mv	a0,s1
    8020539c:	fffff097          	auipc	ra,0xfffff
    802053a0:	7e8080e7          	jalr	2024(ra) # 80204b84 <pipeunlock>
}
    802053a4:	855e                	mv	a0,s7
    802053a6:	60ea                	ld	ra,152(sp)
    802053a8:	644a                	ld	s0,144(sp)
    802053aa:	64aa                	ld	s1,136(sp)
    802053ac:	690a                	ld	s2,128(sp)
    802053ae:	79e6                	ld	s3,120(sp)
    802053b0:	7a46                	ld	s4,112(sp)
    802053b2:	7aa6                	ld	s5,104(sp)
    802053b4:	7b06                	ld	s6,96(sp)
    802053b6:	6be6                	ld	s7,88(sp)
    802053b8:	6c46                	ld	s8,80(sp)
    802053ba:	6ca6                	ld	s9,72(sp)
    802053bc:	6d06                	ld	s10,64(sp)
    802053be:	7de2                	ld	s11,56(sp)
    802053c0:	610d                	addi	sp,sp,160
    802053c2:	8082                	ret
	int ndata, ret = 0;
    802053c4:	4b81                	li	s7,0
    802053c6:	b77d                	j	80205374 <pipereadv+0x12a>
		ret = -EPIPE;
    802053c8:	5b81                	li	s7,-32
    802053ca:	b7e9                	j	80205394 <pipereadv+0x14a>

00000000802053cc <portinit>:
  return 0;
}

void
portinit(struct netport* port,uint64 portid)
{
    802053cc:	1101                	addi	sp,sp,-32
    802053ce:	ec06                	sd	ra,24(sp)
    802053d0:	e822                	sd	s0,16(sp)
    802053d2:	e426                	sd	s1,8(sp)
    802053d4:	e04a                	sd	s2,0(sp)
    802053d6:	1000                	addi	s0,sp,32
    802053d8:	84aa                	mv	s1,a0
    802053da:	892e                	mv	s2,a1
  memset(port,0,sizeof(struct netport));
    802053dc:	06800613          	li	a2,104
    802053e0:	4581                	li	a1,0
    802053e2:	ffffc097          	auipc	ra,0xffffc
    802053e6:	992080e7          	jalr	-1646(ra) # 80200d74 <memset>
  port->portid = portid;
    802053ea:	0124a023          	sw	s2,0(s1)
  initlock(&port->lk, "net port");
    802053ee:	0000f597          	auipc	a1,0xf
    802053f2:	10258593          	addi	a1,a1,258 # 802144f0 <rodata_start+0x4f0>
    802053f6:	05048513          	addi	a0,s1,80
    802053fa:	00004097          	auipc	ra,0x4
    802053fe:	a9c080e7          	jalr	-1380(ra) # 80208e96 <initlock>
  list_init(&port->msg);
    80205402:	03048793          	addi	a5,s1,48
    80205406:	fc9c                	sd	a5,56(s1)
    80205408:	f89c                	sd	a5,48(s1)
  list_init(&port->req);
    8020540a:	04048793          	addi	a5,s1,64
    8020540e:	e4bc                	sd	a5,72(s1)
    80205410:	e0bc                	sd	a5,64(s1)
}
    80205412:	60e2                	ld	ra,24(sp)
    80205414:	6442                	ld	s0,16(sp)
    80205416:	64a2                	ld	s1,8(sp)
    80205418:	6902                	ld	s2,0(sp)
    8020541a:	6105                	addi	sp,sp,32
    8020541c:	8082                	ret

000000008020541e <IPinit>:

void
IPinit(struct netIP* ip,void* addr,int type)
{
    8020541e:	7179                	addi	sp,sp,-48
    80205420:	f406                	sd	ra,40(sp)
    80205422:	f022                	sd	s0,32(sp)
    80205424:	ec26                	sd	s1,24(sp)
    80205426:	e84a                	sd	s2,16(sp)
    80205428:	e44e                	sd	s3,8(sp)
    8020542a:	e052                	sd	s4,0(sp)
    8020542c:	1800                	addi	s0,sp,48
    8020542e:	89aa                	mv	s3,a0
    80205430:	87b2                	mv	a5,a2
  ip->type = type;
    80205432:	c110                	sw	a2,0(a0)
  int cplen = type==IPv4?4:16;
    80205434:	4705                	li	a4,1
    80205436:	4611                	li	a2,4
    80205438:	00e78363          	beq	a5,a4,8020543e <IPinit+0x20>
    8020543c:	4641                	li	a2,16
  memcpy(ip->addr, addr, cplen);
    8020543e:	00498513          	addi	a0,s3,4
    80205442:	ffffc097          	auipc	ra,0xffffc
    80205446:	9f6080e7          	jalr	-1546(ra) # 80200e38 <memcpy>
  for(int i = 0;i<PORTNUM;i++){
    8020544a:	01898913          	addi	s2,s3,24
  memcpy(ip->addr, addr, cplen);
    8020544e:	4481                	li	s1,0
  for(int i = 0;i<PORTNUM;i++){
    80205450:	6a41                	lui	s4,0x10
    portinit(ip->ports+i, i);
    80205452:	85a6                	mv	a1,s1
    80205454:	854a                	mv	a0,s2
    80205456:	00000097          	auipc	ra,0x0
    8020545a:	f76080e7          	jalr	-138(ra) # 802053cc <portinit>
    ip->ports[i].IP = ip;
    8020545e:	01393423          	sd	s3,8(s2)
  for(int i = 0;i<PORTNUM;i++){
    80205462:	0485                	addi	s1,s1,1
    80205464:	06890913          	addi	s2,s2,104
    80205468:	ff4495e3          	bne	s1,s4,80205452 <IPinit+0x34>
  }
}
    8020546c:	70a2                	ld	ra,40(sp)
    8020546e:	7402                	ld	s0,32(sp)
    80205470:	64e2                	ld	s1,24(sp)
    80205472:	6942                	ld	s2,16(sp)
    80205474:	69a2                	ld	s3,8(sp)
    80205476:	6a02                	ld	s4,0(sp)
    80205478:	6145                	addi	sp,sp,48
    8020547a:	8082                	ret

000000008020547c <netinit>:
{
    8020547c:	7179                	addi	sp,sp,-48
    8020547e:	f406                	sd	ra,40(sp)
    80205480:	f022                	sd	s0,32(sp)
    80205482:	1800                	addi	s0,sp,48
  testbit = 0;
    80205484:	05169797          	auipc	a5,0x5169
    80205488:	8e07a623          	sw	zero,-1812(a5) # 8536dd70 <testbit>
  skid = 0;
    8020548c:	05169797          	auipc	a5,0x5169
    80205490:	8e07a423          	sw	zero,-1816(a5) # 8536dd74 <skid>
  uint64 local_ipv4 = 0x100007f;
    80205494:	010007b7          	lui	a5,0x1000
    80205498:	07f78793          	addi	a5,a5,127 # 100007f <_entry-0x7f1fff81>
    8020549c:	fef43423          	sd	a5,-24(s0)
  uint64 local_ipv6[2] = {0,0};
    802054a0:	fc043c23          	sd	zero,-40(s0)
    802054a4:	fe043023          	sd	zero,-32(s0)
  for(int i=0;i<LOCALIPNUM;i++)
    802054a8:	01068797          	auipc	a5,0x1068
    802054ac:	7d878793          	addi	a5,a5,2008 # 8126dc80 <localIP>
    802054b0:	05169697          	auipc	a3,0x5169
    802054b4:	8c068693          	addi	a3,a3,-1856 # 8536dd70 <testbit>
    802054b8:	00680737          	lui	a4,0x680
    802054bc:	0761                	addi	a4,a4,24
    localIP[i].type=IPn;
    802054be:	0007a023          	sw	zero,0(a5)
  for(int i=0;i<LOCALIPNUM;i++)
    802054c2:	97ba                	add	a5,a5,a4
    802054c4:	fed79de3          	bne	a5,a3,802054be <netinit+0x42>
  IPinit(localIP+0, &local_ipv4, IPv4);
    802054c8:	4605                	li	a2,1
    802054ca:	fe840593          	addi	a1,s0,-24
    802054ce:	01068517          	auipc	a0,0x1068
    802054d2:	7b250513          	addi	a0,a0,1970 # 8126dc80 <localIP>
    802054d6:	00000097          	auipc	ra,0x0
    802054da:	f48080e7          	jalr	-184(ra) # 8020541e <IPinit>
  IPinit(localIP+1, &local_ipv6, IPv6);
    802054de:	4609                	li	a2,2
    802054e0:	fd840593          	addi	a1,s0,-40
    802054e4:	016e8517          	auipc	a0,0x16e8
    802054e8:	7b450513          	addi	a0,a0,1972 # 818edc98 <localIP+0x680018>
    802054ec:	00000097          	auipc	ra,0x0
    802054f0:	f32080e7          	jalr	-206(ra) # 8020541e <IPinit>
}
    802054f4:	4501                	li	a0,0
    802054f6:	70a2                	ld	ra,40(sp)
    802054f8:	7402                	ld	s0,32(sp)
    802054fa:	6145                	addi	sp,sp,48
    802054fc:	8082                	ret

00000000802054fe <IPaddr>:

void
IPaddr(struct netIP* ip,sockaddr* addr)
{
    802054fe:	1141                	addi	sp,sp,-16
    80205500:	e406                	sd	ra,8(sp)
    80205502:	e022                	sd	s0,0(sp)
    80205504:	0800                	addi	s0,sp,16
    80205506:	87ae                	mv	a5,a1
  if(ip->type == IPv4){
    80205508:	4118                	lw	a4,0(a0)
    8020550a:	4685                	li	a3,1
    8020550c:	00d70963          	beq	a4,a3,8020551e <IPaddr+0x20>
    addr->addr4.sin_family = 0x2;
    memcpy(&addr->addr4.sin_addr, ip->addr, 4);
  }else if(ip->type == IPv6){
    80205510:	4689                	li	a3,2
    80205512:	02d70363          	beq	a4,a3,80205538 <IPaddr+0x3a>
    addr->addr6.sin6_family = 0xa;
    memcpy(addr->addr6.sin6_addr.__u6_addr.__u6_addr8, ip->addr, 16);
  }
}
    80205516:	60a2                	ld	ra,8(sp)
    80205518:	6402                	ld	s0,0(sp)
    8020551a:	0141                	addi	sp,sp,16
    8020551c:	8082                	ret
    addr->addr4.sin_family = 0x2;
    8020551e:	4709                	li	a4,2
    80205520:	00e59023          	sh	a4,0(a1)
    memcpy(&addr->addr4.sin_addr, ip->addr, 4);
    80205524:	4611                	li	a2,4
    80205526:	00450593          	addi	a1,a0,4
    8020552a:	00478513          	addi	a0,a5,4
    8020552e:	ffffc097          	auipc	ra,0xffffc
    80205532:	90a080e7          	jalr	-1782(ra) # 80200e38 <memcpy>
    80205536:	b7c5                	j	80205516 <IPaddr+0x18>
    addr->addr6.sin6_family = 0xa;
    80205538:	4729                	li	a4,10
    8020553a:	00e59023          	sh	a4,0(a1)
    memcpy(addr->addr6.sin6_addr.__u6_addr.__u6_addr8, ip->addr, 16);
    8020553e:	4641                	li	a2,16
    80205540:	00450593          	addi	a1,a0,4
    80205544:	00878513          	addi	a0,a5,8
    80205548:	ffffc097          	auipc	ra,0xffffc
    8020554c:	8f0080e7          	jalr	-1808(ra) # 80200e38 <memcpy>
}
    80205550:	b7d9                	j	80205516 <IPaddr+0x18>

0000000080205552 <portaddr>:

void
portaddr(struct netport* port,sockaddr* addr)
{
    80205552:	1101                	addi	sp,sp,-32
    80205554:	ec06                	sd	ra,24(sp)
    80205556:	e822                	sd	s0,16(sp)
    80205558:	e426                	sd	s1,8(sp)
    8020555a:	e04a                	sd	s2,0(sp)
    8020555c:	1000                	addi	s0,sp,32
    8020555e:	892a                	mv	s2,a0
    80205560:	84ae                	mv	s1,a1
  IPaddr(port->IP,addr);
    80205562:	6508                	ld	a0,8(a0)
    80205564:	00000097          	auipc	ra,0x0
    80205568:	f9a080e7          	jalr	-102(ra) # 802054fe <IPaddr>
  int family = ADDR_FAMILY(addr);
    8020556c:	0004d783          	lhu	a5,0(s1)
  if(family == 0x2){
    80205570:	4709                	li	a4,2
    80205572:	00e78b63          	beq	a5,a4,80205588 <portaddr+0x36>
    addr->addr4.sin_port = port->portid;
  }else if(family == 0xa){
    80205576:	4729                	li	a4,10
    80205578:	00e78d63          	beq	a5,a4,80205592 <portaddr+0x40>
    addr->addr6.sin6_port = port->portid;
  }
}
    8020557c:	60e2                	ld	ra,24(sp)
    8020557e:	6442                	ld	s0,16(sp)
    80205580:	64a2                	ld	s1,8(sp)
    80205582:	6902                	ld	s2,0(sp)
    80205584:	6105                	addi	sp,sp,32
    80205586:	8082                	ret
    addr->addr4.sin_port = port->portid;
    80205588:	00092783          	lw	a5,0(s2)
    8020558c:	00f49123          	sh	a5,2(s1)
    80205590:	b7f5                	j	8020557c <portaddr+0x2a>
    addr->addr6.sin6_port = port->portid;
    80205592:	00092783          	lw	a5,0(s2)
    80205596:	00f49123          	sh	a5,2(s1)
}
    8020559a:	b7cd                	j	8020557c <portaddr+0x2a>

000000008020559c <bindalloc>:
    release(&port->lk);
    return ret;
}

int
bindalloc(struct socket* sk){
    8020559c:	7139                	addi	sp,sp,-64
    8020559e:	fc06                	sd	ra,56(sp)
    802055a0:	f822                	sd	s0,48(sp)
    802055a2:	f426                	sd	s1,40(sp)
    802055a4:	f04a                	sd	s2,32(sp)
    802055a6:	ec4e                	sd	s3,24(sp)
    802055a8:	e852                	sd	s4,16(sp)
    802055aa:	e456                	sd	s5,8(sp)
    802055ac:	0080                	addi	s0,sp,64
    802055ae:	8aaa                	mv	s5,a0
  struct netport* ports = localIP->ports;
  for(int i = 0;i<PORTNUM;i++){
    802055b0:	01068497          	auipc	s1,0x1068
    802055b4:	6e848493          	addi	s1,s1,1768 # 8126dc98 <localIP+0x18>
    802055b8:	016e8a17          	auipc	s4,0x16e8
    802055bc:	6e0a0a13          	addi	s4,s4,1760 # 818edc98 <localIP+0x680018>
    acquire(&ports[i].lk);
    802055c0:	05048913          	addi	s2,s1,80
    802055c4:	854a                	mv	a0,s2
    802055c6:	00004097          	auipc	ra,0x4
    802055ca:	914080e7          	jalr	-1772(ra) # 80208eda <acquire>
    if(!ports[i].sk){
    802055ce:	6c9c                	ld	a5,24(s1)
    802055d0:	cf81                	beqz	a5,802055e8 <bindalloc+0x4c>
      sk->bind_port = ports+i;
      ports[i].sk = sk;
      release(&ports[i].lk);
      return 0;
    }
    release(&ports[i].lk);
    802055d2:	854a                	mv	a0,s2
    802055d4:	00004097          	auipc	ra,0x4
    802055d8:	95a080e7          	jalr	-1702(ra) # 80208f2e <release>
  for(int i = 0;i<PORTNUM;i++){
    802055dc:	06848493          	addi	s1,s1,104
    802055e0:	ff4490e3          	bne	s1,s4,802055c0 <bindalloc+0x24>
  }
  return -1;
    802055e4:	557d                	li	a0,-1
    802055e6:	a819                	j	802055fc <bindalloc+0x60>
      sk->bind_port = ports+i;
    802055e8:	149ab423          	sd	s1,328(s5)
      ports[i].sk = sk;
    802055ec:	0154bc23          	sd	s5,24(s1)
      release(&ports[i].lk);
    802055f0:	854a                	mv	a0,s2
    802055f2:	00004097          	auipc	ra,0x4
    802055f6:	93c080e7          	jalr	-1732(ra) # 80208f2e <release>
      return 0;
    802055fa:	4501                	li	a0,0
}
    802055fc:	70e2                	ld	ra,56(sp)
    802055fe:	7442                	ld	s0,48(sp)
    80205600:	74a2                	ld	s1,40(sp)
    80205602:	7902                	ld	s2,32(sp)
    80205604:	69e2                	ld	s3,24(sp)
    80205606:	6a42                	ld	s4,16(sp)
    80205608:	6aa2                	ld	s5,8(sp)
    8020560a:	6121                	addi	sp,sp,64
    8020560c:	8082                	ret

000000008020560e <findIP>:
  return 0;
}

struct netIP*
findIP(void* addr,int type)
{
    8020560e:	711d                	addi	sp,sp,-96
    80205610:	ec86                	sd	ra,88(sp)
    80205612:	e8a2                	sd	s0,80(sp)
    80205614:	e4a6                	sd	s1,72(sp)
    80205616:	e0ca                	sd	s2,64(sp)
    80205618:	fc4e                	sd	s3,56(sp)
    8020561a:	f852                	sd	s4,48(sp)
    8020561c:	f456                	sd	s5,40(sp)
    8020561e:	f05a                	sd	s6,32(sp)
    80205620:	ec5e                	sd	s7,24(sp)
    80205622:	1080                	addi	s0,sp,96
    80205624:	8baa                	mv	s7,a0
  int cmplen = type==IPv4?4:16;
    80205626:	4785                	li	a5,1
    80205628:	4a91                	li	s5,4
    8020562a:	00f58363          	beq	a1,a5,80205630 <findIP+0x22>
    8020562e:	4ac1                	li	s5,16
  uint64 zero[2] = {0,0};
    80205630:	fa043023          	sd	zero,-96(s0)
    80205634:	fa043423          	sd	zero,-88(s0)
  for(int i=0;i<LOCALIPNUM;i++)
    80205638:	01068497          	auipc	s1,0x1068
    8020563c:	64c48493          	addi	s1,s1,1612 # 8126dc84 <localIP+0x4>
    80205640:	4901                	li	s2,0
  {
    if(localIP[i].type!=type)continue;
    80205642:	0005899b          	sext.w	s3,a1
    if(memcmp(localIP[i].addr,addr,cmplen)==0
    80205646:	2a81                	sext.w	s5,s5
    80205648:	00680a37          	lui	s4,0x680
    8020564c:	0a61                	addi	s4,s4,24
  for(int i=0;i<LOCALIPNUM;i++)
    8020564e:	4b29                	li	s6,10
    80205650:	a029                	j	8020565a <findIP+0x4c>
    80205652:	2905                	addiw	s2,s2,1
    80205654:	94d2                	add	s1,s1,s4
    80205656:	05690263          	beq	s2,s6,8020569a <findIP+0x8c>
    if(localIP[i].type!=type)continue;
    8020565a:	ffc4a783          	lw	a5,-4(s1)
    8020565e:	ff379ae3          	bne	a5,s3,80205652 <findIP+0x44>
    if(memcmp(localIP[i].addr,addr,cmplen)==0
    80205662:	8656                	mv	a2,s5
    80205664:	85de                	mv	a1,s7
    80205666:	8526                	mv	a0,s1
    80205668:	ffffb097          	auipc	ra,0xffffb
    8020566c:	732080e7          	jalr	1842(ra) # 80200d9a <memcmp>
    80205670:	c911                	beqz	a0,80205684 <findIP+0x76>
     ||memcmp(addr,zero,cmplen)==0){
    80205672:	8656                	mv	a2,s5
    80205674:	fa040593          	addi	a1,s0,-96
    80205678:	855e                	mv	a0,s7
    8020567a:	ffffb097          	auipc	ra,0xffffb
    8020567e:	720080e7          	jalr	1824(ra) # 80200d9a <memcmp>
    80205682:	f961                	bnez	a0,80205652 <findIP+0x44>
      return localIP+i;
    80205684:	00680537          	lui	a0,0x680
    80205688:	0561                	addi	a0,a0,24
    8020568a:	02a90933          	mul	s2,s2,a0
    8020568e:	01068517          	auipc	a0,0x1068
    80205692:	5f250513          	addi	a0,a0,1522 # 8126dc80 <localIP>
    80205696:	954a                	add	a0,a0,s2
    80205698:	a011                	j	8020569c <findIP+0x8e>
    }
  } 
  return NULL;
    8020569a:	4501                	li	a0,0
}
    8020569c:	60e6                	ld	ra,88(sp)
    8020569e:	6446                	ld	s0,80(sp)
    802056a0:	64a6                	ld	s1,72(sp)
    802056a2:	6906                	ld	s2,64(sp)
    802056a4:	79e2                	ld	s3,56(sp)
    802056a6:	7a42                	ld	s4,48(sp)
    802056a8:	7aa2                	ld	s5,40(sp)
    802056aa:	7b02                	ld	s6,32(sp)
    802056ac:	6be2                	ld	s7,24(sp)
    802056ae:	6125                	addi	sp,sp,96
    802056b0:	8082                	ret

00000000802056b2 <findport>:

struct netport*
findport(sockaddr* addr)
{
    802056b2:	1101                	addi	sp,sp,-32
    802056b4:	ec06                	sd	ra,24(sp)
    802056b6:	e822                	sd	s0,16(sp)
    802056b8:	e426                	sd	s1,8(sp)
    802056ba:	1000                	addi	s0,sp,32
    802056bc:	87aa                	mv	a5,a0
  int family = ADDR_FAMILY(addr);
    802056be:	00055703          	lhu	a4,0(a0)
  int type = 0;
  void* ipaddr;
  uint32 portid;
  if(family == 0x2){
    802056c2:	4689                	li	a3,2
    802056c4:	02d70b63          	beq	a4,a3,802056fa <findport+0x48>
    type = IPv4;
    ipaddr = &addr->addr4.sin_addr;
    portid = addr->addr4.sin_port;
  }else if(family == 0xa){
    802056c8:	46a9                	li	a3,10
    type = IPv6;
    ipaddr = addr->addr6.sin6_addr.__u6_addr.__u6_addr8;
    portid = addr->addr6.sin6_port;
  }else{
    return NULL;
    802056ca:	4501                	li	a0,0
  }else if(family == 0xa){
    802056cc:	02d71263          	bne	a4,a3,802056f0 <findport+0x3e>
    ipaddr = addr->addr6.sin6_addr.__u6_addr.__u6_addr8;
    802056d0:	00878513          	addi	a0,a5,8
    portid = addr->addr6.sin6_port;
    802056d4:	0027d483          	lhu	s1,2(a5)
    type = IPv6;
    802056d8:	4589                	li	a1,2
  }
  struct netIP* ip = findIP(ipaddr,type);
    802056da:	00000097          	auipc	ra,0x0
    802056de:	f34080e7          	jalr	-204(ra) # 8020560e <findIP>
  if(!ip||portid<0||portid>PORTNUM)return NULL;
    802056e2:	c519                	beqz	a0,802056f0 <findport+0x3e>
  return ip->ports+portid;
    802056e4:	0561                	addi	a0,a0,24
    802056e6:	06800793          	li	a5,104
    802056ea:	02f484b3          	mul	s1,s1,a5
    802056ee:	9526                	add	a0,a0,s1
}
    802056f0:	60e2                	ld	ra,24(sp)
    802056f2:	6442                	ld	s0,16(sp)
    802056f4:	64a2                	ld	s1,8(sp)
    802056f6:	6105                	addi	sp,sp,32
    802056f8:	8082                	ret
    ipaddr = &addr->addr4.sin_addr;
    802056fa:	0511                	addi	a0,a0,4
    portid = addr->addr4.sin_port;
    802056fc:	0027d483          	lhu	s1,2(a5)
    type = IPv4;
    80205700:	4585                	li	a1,1
    80205702:	bfe1                	j	802056da <findport+0x28>

0000000080205704 <bindaddr>:
bindaddr(struct socket* sk, sockaddr* addr){
    80205704:	7179                	addi	sp,sp,-48
    80205706:	f406                	sd	ra,40(sp)
    80205708:	f022                	sd	s0,32(sp)
    8020570a:	ec26                	sd	s1,24(sp)
    8020570c:	e84a                	sd	s2,16(sp)
    8020570e:	e44e                	sd	s3,8(sp)
    80205710:	e052                	sd	s4,0(sp)
    80205712:	1800                	addi	s0,sp,48
    80205714:	892a                	mv	s2,a0
    struct netport* port = findport(addr);
    80205716:	852e                	mv	a0,a1
    80205718:	00000097          	auipc	ra,0x0
    8020571c:	f9a080e7          	jalr	-102(ra) # 802056b2 <findport>
    if(!port){
    80205720:	c915                	beqz	a0,80205754 <bindaddr+0x50>
    80205722:	84aa                	mv	s1,a0
    acquire(&port->lk);
    80205724:	05050993          	addi	s3,a0,80
    80205728:	854e                	mv	a0,s3
    8020572a:	00003097          	auipc	ra,0x3
    8020572e:	7b0080e7          	jalr	1968(ra) # 80208eda <acquire>
    if(!port->sk){
    80205732:	6c9c                	ld	a5,24(s1)
    int ret = -1;
    80205734:	5a7d                	li	s4,-1
    if(!port->sk){
    80205736:	cb8d                	beqz	a5,80205768 <bindaddr+0x64>
    release(&port->lk);
    80205738:	854e                	mv	a0,s3
    8020573a:	00003097          	auipc	ra,0x3
    8020573e:	7f4080e7          	jalr	2036(ra) # 80208f2e <release>
}
    80205742:	8552                	mv	a0,s4
    80205744:	70a2                	ld	ra,40(sp)
    80205746:	7402                	ld	s0,32(sp)
    80205748:	64e2                	ld	s1,24(sp)
    8020574a:	6942                	ld	s2,16(sp)
    8020574c:	69a2                	ld	s3,8(sp)
    8020574e:	6a02                	ld	s4,0(sp)
    80205750:	6145                	addi	sp,sp,48
    80205752:	8082                	ret
      __debug_warn("[bind addr] addr not found\n");
    80205754:	0000f517          	auipc	a0,0xf
    80205758:	dac50513          	addi	a0,a0,-596 # 80214500 <rodata_start+0x500>
    8020575c:	00004097          	auipc	ra,0x4
    80205760:	f14080e7          	jalr	-236(ra) # 80209670 <__debug_warn>
      return ret;
    80205764:	5a7d                	li	s4,-1
    80205766:	bff1                	j	80205742 <bindaddr+0x3e>
      sk->bind_port = port;
    80205768:	14993423          	sd	s1,328(s2)
      port->sk = sk;
    8020576c:	0124bc23          	sd	s2,24(s1)
      ret = 0;
    80205770:	4a01                	li	s4,0
    80205772:	b7d9                	j	80205738 <bindaddr+0x34>

0000000080205774 <port_pop_msg>:
  release(&port->lk);
  return ret;
}

struct msg* port_pop_msg(struct netport* port,struct netport* pport)
{
    80205774:	1101                	addi	sp,sp,-32
    80205776:	ec06                	sd	ra,24(sp)
    80205778:	e822                	sd	s0,16(sp)
    8020577a:	e426                	sd	s1,8(sp)
    8020577c:	1000                	addi	s0,sp,32
  struct msg* msg = NULL;
  acquire(&port->lk);
    8020577e:	05050493          	addi	s1,a0,80
    80205782:	8526                	mv	a0,s1
    80205784:	00003097          	auipc	ra,0x3
    80205788:	756080e7          	jalr	1878(ra) # 80208eda <acquire>
    if(msg->port == pport){
      break;
    }
    it = list_next(it);
  }
  release(&port->lk);
    8020578c:	8526                	mv	a0,s1
    8020578e:	00003097          	auipc	ra,0x3
    80205792:	7a0080e7          	jalr	1952(ra) # 80208f2e <release>
  return msg;
}
    80205796:	4501                	li	a0,0
    80205798:	60e2                	ld	ra,24(sp)
    8020579a:	6442                	ld	s0,16(sp)
    8020579c:	64a2                	ld	s1,8(sp)
    8020579e:	6105                	addi	sp,sp,32
    802057a0:	8082                	ret

00000000802057a2 <port_has_req>:
  }
  release(&port->lk);
}

int port_has_req(struct netport* port)
{
    802057a2:	7179                	addi	sp,sp,-48
    802057a4:	f406                	sd	ra,40(sp)
    802057a6:	f022                	sd	s0,32(sp)
    802057a8:	ec26                	sd	s1,24(sp)
    802057aa:	e84a                	sd	s2,16(sp)
    802057ac:	e44e                	sd	s3,8(sp)
    802057ae:	1800                	addi	s0,sp,48
    802057b0:	892a                	mv	s2,a0
  int ret;
  acquire(&port->lk);
    802057b2:	05050993          	addi	s3,a0,80
    802057b6:	854e                	mv	a0,s3
    802057b8:	00003097          	auipc	ra,0x3
    802057bc:	722080e7          	jalr	1826(ra) # 80208eda <acquire>
  ret = !list_empty(&port->req);
    802057c0:	04090793          	addi	a5,s2,64
    802057c4:	04893483          	ld	s1,72(s2)
    802057c8:	8c9d                	sub	s1,s1,a5
    802057ca:	009034b3          	snez	s1,s1
  release(&port->lk);
    802057ce:	854e                	mv	a0,s3
    802057d0:	00003097          	auipc	ra,0x3
    802057d4:	75e080e7          	jalr	1886(ra) # 80208f2e <release>
  return ret;
}
    802057d8:	8526                	mv	a0,s1
    802057da:	70a2                	ld	ra,40(sp)
    802057dc:	7402                	ld	s0,32(sp)
    802057de:	64e2                	ld	s1,24(sp)
    802057e0:	6942                	ld	s2,16(sp)
    802057e2:	69a2                	ld	s3,8(sp)
    802057e4:	6145                	addi	sp,sp,48
    802057e6:	8082                	ret

00000000802057e8 <port_pop_req>:

struct msg* port_pop_req(struct netport* port)
{
    802057e8:	7179                	addi	sp,sp,-48
    802057ea:	f406                	sd	ra,40(sp)
    802057ec:	f022                	sd	s0,32(sp)
    802057ee:	ec26                	sd	s1,24(sp)
    802057f0:	e84a                	sd	s2,16(sp)
    802057f2:	e44e                	sd	s3,8(sp)
    802057f4:	1800                	addi	s0,sp,48
    802057f6:	84aa                	mv	s1,a0
  struct msg* msg = NULL;
  acquire(&port->lk);
    802057f8:	05050913          	addi	s2,a0,80
    802057fc:	854a                	mv	a0,s2
    802057fe:	00003097          	auipc	ra,0x3
    80205802:	6dc080e7          	jalr	1756(ra) # 80208eda <acquire>
	return head->next == head;
    80205806:	64bc                	ld	a5,72(s1)
  if(!list_empty(&port->req)){
    80205808:	04048713          	addi	a4,s1,64
    8020580c:	04e78163          	beq	a5,a4,8020584e <port_pop_req+0x66>
    msg = dlist_entry(list_next(&port->req),struct msg, list);
    80205810:	fe878993          	addi	s3,a5,-24
	if(node==NULL){
    80205814:	c78d                	beqz	a5,8020583e <port_pop_req+0x56>
	__list_link(node->prev, node->next);
    80205816:	6398                	ld	a4,0(a5)
    80205818:	679c                	ld	a5,8(a5)
	prev->next = next;
    8020581a:	e71c                	sd	a5,8(a4)
	next->prev = prev;
    8020581c:	e398                	sd	a4,0(a5)
    list_del(&msg->list);
    port->msgnum--;
    8020581e:	40dc                	lw	a5,4(s1)
    80205820:	37fd                	addiw	a5,a5,-1
    80205822:	c0dc                	sw	a5,4(s1)
  }
  release(&port->lk);
    80205824:	854a                	mv	a0,s2
    80205826:	00003097          	auipc	ra,0x3
    8020582a:	708080e7          	jalr	1800(ra) # 80208f2e <release>
  return msg;
}
    8020582e:	854e                	mv	a0,s3
    80205830:	70a2                	ld	ra,40(sp)
    80205832:	7402                	ld	s0,32(sp)
    80205834:	64e2                	ld	s1,24(sp)
    80205836:	6942                	ld	s2,16(sp)
    80205838:	69a2                	ld	s3,8(sp)
    8020583a:	6145                	addi	sp,sp,48
    8020583c:	8082                	ret
	  panic("[list next]list is null");
    8020583e:	0000f517          	auipc	a0,0xf
    80205842:	8f250513          	addi	a0,a0,-1806 # 80214130 <rodata_start+0x130>
    80205846:	00004097          	auipc	ra,0x4
    8020584a:	a04080e7          	jalr	-1532(ra) # 8020924a <panic>
  struct msg* msg = NULL;
    8020584e:	4981                	li	s3,0
    80205850:	bfd1                	j	80205824 <port_pop_req+0x3c>

0000000080205852 <socketalloc>:
}


struct socket*
socketalloc()
{
    80205852:	1101                	addi	sp,sp,-32
    80205854:	ec06                	sd	ra,24(sp)
    80205856:	e822                	sd	s0,16(sp)
    80205858:	e426                	sd	s1,8(sp)
    8020585a:	1000                	addi	s0,sp,32
  struct socket* sk = kmalloc(sizeof(struct socket));
    8020585c:	17000513          	li	a0,368
    80205860:	00004097          	auipc	ra,0x4
    80205864:	75c080e7          	jalr	1884(ra) # 80209fbc <kmalloc>
    80205868:	84aa                	mv	s1,a0
  memset(sk,0,sizeof(struct socket));
    8020586a:	17000613          	li	a2,368
    8020586e:	4581                	li	a1,0
    80205870:	ffffb097          	auipc	ra,0xffffb
    80205874:	504080e7          	jalr	1284(ra) # 80200d74 <memset>
  sk->id = ++skid;
    80205878:	05168717          	auipc	a4,0x5168
    8020587c:	4fc70713          	addi	a4,a4,1276 # 8536dd74 <skid>
    80205880:	431c                	lw	a5,0(a4)
    80205882:	2785                	addiw	a5,a5,1
    80205884:	c31c                	sw	a5,0(a4)
    80205886:	c09c                	sw	a5,0(s1)
  initlock(&sk->lk,"socket");
    80205888:	0000f597          	auipc	a1,0xf
    8020588c:	c9858593          	addi	a1,a1,-872 # 80214520 <rodata_start+0x520>
    80205890:	15848513          	addi	a0,s1,344
    80205894:	00003097          	auipc	ra,0x3
    80205898:	602080e7          	jalr	1538(ra) # 80208e96 <initlock>
	initlock(&wq->lock, str);
    8020589c:	0000f597          	auipc	a1,0xf
    802058a0:	c8c58593          	addi	a1,a1,-884 # 80214528 <rodata_start+0x528>
    802058a4:	01848513          	addi	a0,s1,24
    802058a8:	00003097          	auipc	ra,0x3
    802058ac:	5ee080e7          	jalr	1518(ra) # 80208e96 <initlock>
	list_init(&wq->head);
    802058b0:	03048793          	addi	a5,s1,48
	node->prev = node->next = node;
    802058b4:	fc9c                	sd	a5,56(s1)
    802058b6:	f89c                	sd	a5,48(s1)
  wait_queue_init(&sk->rqueue, "socket read queue");
  return sk;
}
    802058b8:	8526                	mv	a0,s1
    802058ba:	60e2                	ld	ra,24(sp)
    802058bc:	6442                	ld	s0,16(sp)
    802058be:	64a2                	ld	s1,8(sp)
    802058c0:	6105                	addi	sp,sp,32
    802058c2:	8082                	ret

00000000802058c4 <socketclose>:

void
socketclose(struct socket* sk)
{
    802058c4:	1141                	addi	sp,sp,-16
    802058c6:	e406                	sd	ra,8(sp)
    802058c8:	e022                	sd	s0,0(sp)
    802058ca:	0800                	addi	s0,sp,16
  //acquire(&sk->lk);
  //release(&sk->lk);
  kfree(sk);
    802058cc:	00005097          	auipc	ra,0x5
    802058d0:	93a080e7          	jalr	-1734(ra) # 8020a206 <kfree>
}
    802058d4:	60a2                	ld	ra,8(sp)
    802058d6:	6402                	ld	s0,0(sp)
    802058d8:	0141                	addi	sp,sp,16
    802058da:	8082                	ret

00000000802058dc <socketwakeup>:

void socketwakeup(struct socket *sk)
{
    802058dc:	1101                	addi	sp,sp,-32
    802058de:	ec06                	sd	ra,24(sp)
    802058e0:	e822                	sd	s0,16(sp)
    802058e2:	e426                	sd	s1,8(sp)
    802058e4:	e04a                	sd	s2,0(sp)
    802058e6:	1000                	addi	s0,sp,32
    802058e8:	84aa                	mv	s1,a0
	struct wait_queue *queue= &sk->rqueue;
	acquire(&queue->lock);
    802058ea:	01850913          	addi	s2,a0,24
    802058ee:	854a                	mv	a0,s2
    802058f0:	00003097          	auipc	ra,0x3
    802058f4:	5ea080e7          	jalr	1514(ra) # 80208eda <acquire>
	return head->next == head;
    802058f8:	7c9c                	ld	a5,56(s1)
	return list_empty(&wq->head);
    802058fa:	03048493          	addi	s1,s1,48
	if (!wait_queue_empty(queue)) {
    802058fe:	00978863          	beq	a5,s1,8020590e <socketwakeup+0x32>
		struct wait_node *wno = wait_queue_next(queue);
		wakeup(wno->chan);
    80205902:	ff87b503          	ld	a0,-8(a5)
    80205906:	ffffc097          	auipc	ra,0xffffc
    8020590a:	542080e7          	jalr	1346(ra) # 80201e48 <wakeup>
	}
	release(&queue->lock);
    8020590e:	854a                	mv	a0,s2
    80205910:	00003097          	auipc	ra,0x3
    80205914:	61e080e7          	jalr	1566(ra) # 80208f2e <release>
}
    80205918:	60e2                	ld	ra,24(sp)
    8020591a:	6442                	ld	s0,16(sp)
    8020591c:	64a2                	ld	s1,8(sp)
    8020591e:	6902                	ld	s2,0(sp)
    80205920:	6105                	addi	sp,sp,32
    80205922:	8082                	ret

0000000080205924 <port_recv_req>:
{
    80205924:	7179                	addi	sp,sp,-48
    80205926:	f406                	sd	ra,40(sp)
    80205928:	f022                	sd	s0,32(sp)
    8020592a:	ec26                	sd	s1,24(sp)
    8020592c:	e84a                	sd	s2,16(sp)
    8020592e:	e44e                	sd	s3,8(sp)
    80205930:	1800                	addi	s0,sp,48
    80205932:	84aa                	mv	s1,a0
    80205934:	892e                	mv	s2,a1
  acquire(&port->lk);
    80205936:	05050993          	addi	s3,a0,80
    8020593a:	854e                	mv	a0,s3
    8020593c:	00003097          	auipc	ra,0x3
    80205940:	59e080e7          	jalr	1438(ra) # 80208eda <acquire>
  list_add_before(&port->req,&msg->list);
    80205944:	01890713          	addi	a4,s2,24
	__list_insert(node, beforeme->prev, beforeme);
    80205948:	60bc                	ld	a5,64(s1)
	prev->next = next->prev = node;
    8020594a:	e0b8                	sd	a4,64(s1)
    8020594c:	e798                	sd	a4,8(a5)
    8020594e:	04048713          	addi	a4,s1,64
	node->next = next;
    80205952:	02e93023          	sd	a4,32(s2)
	node->prev = prev;
    80205956:	00f93c23          	sd	a5,24(s2)
  struct socket* sk = port->sk;
    8020595a:	6c84                	ld	s1,24(s1)
  if(sk){
    8020595c:	c095                	beqz	s1,80205980 <port_recv_req+0x5c>


void slock(struct socket* sk){
  acquire(&sk->lk);
    8020595e:	15848913          	addi	s2,s1,344
    80205962:	854a                	mv	a0,s2
    80205964:	00003097          	auipc	ra,0x3
    80205968:	576080e7          	jalr	1398(ra) # 80208eda <acquire>
    socketwakeup(sk);
    8020596c:	8526                	mv	a0,s1
    8020596e:	00000097          	auipc	ra,0x0
    80205972:	f6e080e7          	jalr	-146(ra) # 802058dc <socketwakeup>
}


void sunlock(struct socket* sk){
  release(&sk->lk);
    80205976:	854a                	mv	a0,s2
    80205978:	00003097          	auipc	ra,0x3
    8020597c:	5b6080e7          	jalr	1462(ra) # 80208f2e <release>
  release(&port->lk);
    80205980:	854e                	mv	a0,s3
    80205982:	00003097          	auipc	ra,0x3
    80205986:	5ac080e7          	jalr	1452(ra) # 80208f2e <release>
}
    8020598a:	70a2                	ld	ra,40(sp)
    8020598c:	7402                	ld	s0,32(sp)
    8020598e:	64e2                	ld	s1,24(sp)
    80205990:	6942                	ld	s2,16(sp)
    80205992:	69a2                	ld	s3,8(sp)
    80205994:	6145                	addi	sp,sp,48
    80205996:	8082                	ret

0000000080205998 <slock>:
void slock(struct socket* sk){
    80205998:	1141                	addi	sp,sp,-16
    8020599a:	e406                	sd	ra,8(sp)
    8020599c:	e022                	sd	s0,0(sp)
    8020599e:	0800                	addi	s0,sp,16
  acquire(&sk->lk);
    802059a0:	15850513          	addi	a0,a0,344
    802059a4:	00003097          	auipc	ra,0x3
    802059a8:	536080e7          	jalr	1334(ra) # 80208eda <acquire>
}
    802059ac:	60a2                	ld	ra,8(sp)
    802059ae:	6402                	ld	s0,0(sp)
    802059b0:	0141                	addi	sp,sp,16
    802059b2:	8082                	ret

00000000802059b4 <sunlock>:
void sunlock(struct socket* sk){
    802059b4:	1141                	addi	sp,sp,-16
    802059b6:	e406                	sd	ra,8(sp)
    802059b8:	e022                	sd	s0,0(sp)
    802059ba:	0800                	addi	s0,sp,16
  release(&sk->lk);
    802059bc:	15850513          	addi	a0,a0,344
    802059c0:	00003097          	auipc	ra,0x3
    802059c4:	56e080e7          	jalr	1390(ra) # 80208f2e <release>
}
    802059c8:	60a2                	ld	ra,8(sp)
    802059ca:	6402                	ld	s0,0(sp)
    802059cc:	0141                	addi	sp,sp,16
    802059ce:	8082                	ret

00000000802059d0 <socketkstat>:

void
socketkstat(struct socket* sk, struct kstat* kst)
{
    802059d0:	1141                	addi	sp,sp,-16
    802059d2:	e422                	sd	s0,8(sp)
    802059d4:	0800                	addi	s0,sp,16
  
}
    802059d6:	6422                	ld	s0,8(sp)
    802059d8:	0141                	addi	sp,sp,16
    802059da:	8082                	ret

00000000802059dc <socketlock>:

void socketlock(struct socket *sk, struct wait_node *wait)
{
    802059dc:	7179                	addi	sp,sp,-48
    802059de:	f406                	sd	ra,40(sp)
    802059e0:	f022                	sd	s0,32(sp)
    802059e2:	ec26                	sd	s1,24(sp)
    802059e4:	e84a                	sd	s2,16(sp)
    802059e6:	e44e                	sd	s3,8(sp)
    802059e8:	e052                	sd	s4,0(sp)
    802059ea:	1800                	addi	s0,sp,48
    802059ec:	84aa                	mv	s1,a0
    802059ee:	892e                	mv	s2,a1
	struct wait_queue *q = &sk->rqueue;

	acquire(&q->lock);
    802059f0:	01850a13          	addi	s4,a0,24
    802059f4:	8552                	mv	a0,s4
    802059f6:	00003097          	auipc	ra,0x3
    802059fa:	4e4080e7          	jalr	1252(ra) # 80208eda <acquire>
	list_add_before(&wq->head, &node->list);
    802059fe:	00890993          	addi	s3,s2,8
	__list_insert(node, beforeme->prev, beforeme);
    80205a02:	789c                	ld	a5,48(s1)
	prev->next = next->prev = node;
    80205a04:	0334b823          	sd	s3,48(s1)
    80205a08:	0137b423          	sd	s3,8(a5)
    80205a0c:	03048713          	addi	a4,s1,48
	node->next = next;
    80205a10:	00e93823          	sd	a4,16(s2)
	node->prev = prev;
    80205a14:	00f93423          	sd	a5,8(s2)
	wait_queue_add(q, wait);	// stay in line

	// whether we are the first arrival
	while (!wait_queue_is_first(q, wait)) {
    80205a18:	7c9c                	ld	a5,56(s1)
    80205a1a:	00f98c63          	beq	s3,a5,80205a32 <socketlock+0x56>
		sleep(wait->chan, &q->lock);
    80205a1e:	85d2                	mv	a1,s4
    80205a20:	00093503          	ld	a0,0(s2)
    80205a24:	ffffc097          	auipc	ra,0xffffc
    80205a28:	31a080e7          	jalr	794(ra) # 80201d3e <sleep>
	while (!wait_queue_is_first(q, wait)) {
    80205a2c:	7c9c                	ld	a5,56(s1)
    80205a2e:	fef998e3          	bne	s3,a5,80205a1e <socketlock+0x42>
	}
	release(&q->lock);
    80205a32:	8552                	mv	a0,s4
    80205a34:	00003097          	auipc	ra,0x3
    80205a38:	4fa080e7          	jalr	1274(ra) # 80208f2e <release>
}
    80205a3c:	70a2                	ld	ra,40(sp)
    80205a3e:	7402                	ld	s0,32(sp)
    80205a40:	64e2                	ld	s1,24(sp)
    80205a42:	6942                	ld	s2,16(sp)
    80205a44:	69a2                	ld	s3,8(sp)
    80205a46:	6a02                	ld	s4,0(sp)
    80205a48:	6145                	addi	sp,sp,48
    80205a4a:	8082                	ret

0000000080205a4c <socketunlock>:

void socketunlock(struct socket *sk, struct wait_node *wait)
{
    80205a4c:	7179                	addi	sp,sp,-48
    80205a4e:	f406                	sd	ra,40(sp)
    80205a50:	f022                	sd	s0,32(sp)
    80205a52:	ec26                	sd	s1,24(sp)
    80205a54:	e84a                	sd	s2,16(sp)
    80205a56:	e44e                	sd	s3,8(sp)
    80205a58:	1800                	addi	s0,sp,48
    80205a5a:	84aa                	mv	s1,a0
    80205a5c:	892e                	mv	s2,a1
	struct wait_queue *q = &sk->rqueue;

	acquire(&q->lock);
    80205a5e:	01850993          	addi	s3,a0,24
    80205a62:	854e                	mv	a0,s3
    80205a64:	00003097          	auipc	ra,0x3
    80205a68:	476080e7          	jalr	1142(ra) # 80208eda <acquire>
	__list_link(node->prev, node->next);
    80205a6c:	00893703          	ld	a4,8(s2)
    80205a70:	01093783          	ld	a5,16(s2)
	prev->next = next;
    80205a74:	e71c                	sd	a5,8(a4)
	next->prev = prev;
    80205a76:	e398                	sd	a4,0(a5)
	return head->next == head;
    80205a78:	7c9c                	ld	a5,56(s1)
	return list_empty(&wq->head);
    80205a7a:	03048493          	addi	s1,s1,48

	// if (wait != wait_queue_next(q))
	// 	panic("pipeunlock: not next");
	
	wait_queue_del(wait);			// walk out the queue
	if (!wait_queue_empty(q)) {		// wake up the next one
    80205a7e:	00978863          	beq	a5,s1,80205a8e <socketunlock+0x42>
		wait = wait_queue_next(q);
		wakeup(wait->chan);
    80205a82:	ff87b503          	ld	a0,-8(a5)
    80205a86:	ffffc097          	auipc	ra,0xffffc
    80205a8a:	3c2080e7          	jalr	962(ra) # 80201e48 <wakeup>
	}
	release(&q->lock);
    80205a8e:	854e                	mv	a0,s3
    80205a90:	00003097          	auipc	ra,0x3
    80205a94:	49e080e7          	jalr	1182(ra) # 80208f2e <release>
}
    80205a98:	70a2                	ld	ra,40(sp)
    80205a9a:	7402                	ld	s0,32(sp)
    80205a9c:	64e2                	ld	s1,24(sp)
    80205a9e:	6942                	ld	s2,16(sp)
    80205aa0:	69a2                	ld	s3,8(sp)
    80205aa2:	6145                	addi	sp,sp,48
    80205aa4:	8082                	ret

0000000080205aa6 <socketread>:

int
socketread(struct socket* sk, int user, uint64 addr, int n)
{
    80205aa6:	1141                	addi	sp,sp,-16
    80205aa8:	e406                	sd	ra,8(sp)
    80205aaa:	e022                	sd	s0,0(sp)
    80205aac:	0800                	addi	s0,sp,16
    80205aae:	85b2                	mv	a1,a2
  __debug_warn("socket read addr:%p n:%p\n", addr, n);
    80205ab0:	8636                	mv	a2,a3
    80205ab2:	0000f517          	auipc	a0,0xf
    80205ab6:	a8e50513          	addi	a0,a0,-1394 # 80214540 <rodata_start+0x540>
    80205aba:	00004097          	auipc	ra,0x4
    80205abe:	bb6080e7          	jalr	-1098(ra) # 80209670 <__debug_warn>
  return 0;
}
    80205ac2:	4501                	li	a0,0
    80205ac4:	60a2                	ld	ra,8(sp)
    80205ac6:	6402                	ld	s0,0(sp)
    80205ac8:	0141                	addi	sp,sp,16
    80205aca:	8082                	ret

0000000080205acc <createmsg>:
  return n;
}

struct msg*
createmsg(char* data, uint64 len)
{
    80205acc:	1101                	addi	sp,sp,-32
    80205ace:	ec06                	sd	ra,24(sp)
    80205ad0:	e822                	sd	s0,16(sp)
    80205ad2:	e426                	sd	s1,8(sp)
    80205ad4:	e04a                	sd	s2,0(sp)
    80205ad6:	1000                	addi	s0,sp,32
    80205ad8:	892a                	mv	s2,a0
    80205ada:	84ae                	mv	s1,a1
  struct msg* msg = kmalloc(sizeof(struct msg));
    80205adc:	02800513          	li	a0,40
    80205ae0:	00004097          	auipc	ra,0x4
    80205ae4:	4dc080e7          	jalr	1244(ra) # 80209fbc <kmalloc>
  if(!msg)return NULL;
    80205ae8:	c911                	beqz	a0,80205afc <createmsg+0x30>
  msg->data = data;
    80205aea:	01253023          	sd	s2,0(a0)
  msg->len = len;
    80205aee:	e904                	sd	s1,16(a0)
  msg->port = NULL;
    80205af0:	00053423          	sd	zero,8(a0)
  list_init(&msg->list);
    80205af4:	01850793          	addi	a5,a0,24
	node->prev = node->next = node;
    80205af8:	f11c                	sd	a5,32(a0)
    80205afa:	ed1c                	sd	a5,24(a0)
  return msg;
}
    80205afc:	60e2                	ld	ra,24(sp)
    80205afe:	6442                	ld	s0,16(sp)
    80205b00:	64a2                	ld	s1,8(sp)
    80205b02:	6902                	ld	s2,0(sp)
    80205b04:	6105                	addi	sp,sp,32
    80205b06:	8082                	ret

0000000080205b08 <nullmsg>:

struct msg*
nullmsg()
{
    80205b08:	1141                	addi	sp,sp,-16
    80205b0a:	e406                	sd	ra,8(sp)
    80205b0c:	e022                	sd	s0,0(sp)
    80205b0e:	0800                	addi	s0,sp,16
  struct msg* msg = kmalloc(sizeof(struct msg));
    80205b10:	02800513          	li	a0,40
    80205b14:	00004097          	auipc	ra,0x4
    80205b18:	4a8080e7          	jalr	1192(ra) # 80209fbc <kmalloc>
  msg->data = NULL;
    80205b1c:	00053023          	sd	zero,0(a0)
  return msg;
}
    80205b20:	60a2                	ld	ra,8(sp)
    80205b22:	6402                	ld	s0,0(sp)
    80205b24:	0141                	addi	sp,sp,16
    80205b26:	8082                	ret

0000000080205b28 <destroymsg>:

void
destroymsg(struct msg* msg)
{
    80205b28:	1101                	addi	sp,sp,-32
    80205b2a:	ec06                	sd	ra,24(sp)
    80205b2c:	e822                	sd	s0,16(sp)
    80205b2e:	e426                	sd	s1,8(sp)
    80205b30:	1000                	addi	s0,sp,32
    80205b32:	84aa                	mv	s1,a0
  if(msg->data)kfree(msg->data);
    80205b34:	6108                	ld	a0,0(a0)
    80205b36:	c509                	beqz	a0,80205b40 <destroymsg+0x18>
    80205b38:	00004097          	auipc	ra,0x4
    80205b3c:	6ce080e7          	jalr	1742(ra) # 8020a206 <kfree>
  kfree(msg);
    80205b40:	8526                	mv	a0,s1
    80205b42:	00004097          	auipc	ra,0x4
    80205b46:	6c4080e7          	jalr	1732(ra) # 8020a206 <kfree>
}
    80205b4a:	60e2                	ld	ra,24(sp)
    80205b4c:	6442                	ld	s0,16(sp)
    80205b4e:	64a2                	ld	s1,8(sp)
    80205b50:	6105                	addi	sp,sp,32
    80205b52:	8082                	ret

0000000080205b54 <getconn>:
{
    80205b54:	715d                	addi	sp,sp,-80
    80205b56:	e486                	sd	ra,72(sp)
    80205b58:	e0a2                	sd	s0,64(sp)
    80205b5a:	fc26                	sd	s1,56(sp)
    80205b5c:	f84a                	sd	s2,48(sp)
    80205b5e:	f44e                	sd	s3,40(sp)
    80205b60:	f052                	sd	s4,32(sp)
    80205b62:	0880                	addi	s0,sp,80
    80205b64:	84ae                	mv	s1,a1
  int nonblock = sk->nonblock;
    80205b66:	01052903          	lw	s2,16(a0)
  if(!port)return NULL;
    80205b6a:	c1c9                	beqz	a1,80205bec <getconn+0x98>
    80205b6c:	8a2a                	mv	s4,a0
  struct msg* msg = NULL;
    80205b6e:	fc043423          	sd	zero,-56(s0)
  node.chan = &msg;
    80205b72:	fc840793          	addi	a5,s0,-56
    80205b76:	faf43823          	sd	a5,-80(s0)
  socketlock(sk,&node);
    80205b7a:	fb040593          	addi	a1,s0,-80
    80205b7e:	00000097          	auipc	ra,0x0
    80205b82:	e5e080e7          	jalr	-418(ra) # 802059dc <socketlock>
      sleep(&msg,&sk->lk);
    80205b86:	158a0993          	addi	s3,s4,344 # 680158 <_entry-0x7fb7fea8>
    msg = port_pop_req(port);
    80205b8a:	8526                	mv	a0,s1
    80205b8c:	00000097          	auipc	ra,0x0
    80205b90:	c5c080e7          	jalr	-932(ra) # 802057e8 <port_pop_req>
    80205b94:	fca43423          	sd	a0,-56(s0)
    if(msg||nonblock)break;
    80205b98:	e919                	bnez	a0,80205bae <getconn+0x5a>
    80205b9a:	00091a63          	bnez	s2,80205bae <getconn+0x5a>
      sleep(&msg,&sk->lk);
    80205b9e:	85ce                	mv	a1,s3
    80205ba0:	fc840513          	addi	a0,s0,-56
    80205ba4:	ffffc097          	auipc	ra,0xffffc
    80205ba8:	19a080e7          	jalr	410(ra) # 80201d3e <sleep>
    msg = port_pop_req(port);
    80205bac:	bff9                	j	80205b8a <getconn+0x36>
  socketunlock(sk,&node);
    80205bae:	fb040593          	addi	a1,s0,-80
    80205bb2:	8552                	mv	a0,s4
    80205bb4:	00000097          	auipc	ra,0x0
    80205bb8:	e98080e7          	jalr	-360(ra) # 80205a4c <socketunlock>
  struct netport* ret = msg?msg->port:NULL;
    80205bbc:	fc843503          	ld	a0,-56(s0)
    80205bc0:	892a                	mv	s2,a0
    80205bc2:	c519                	beqz	a0,80205bd0 <getconn+0x7c>
    80205bc4:	00853903          	ld	s2,8(a0)
  if(msg)destroymsg(msg);
    80205bc8:	00000097          	auipc	ra,0x0
    80205bcc:	f60080e7          	jalr	-160(ra) # 80205b28 <destroymsg>
  wakeup(port);
    80205bd0:	8526                	mv	a0,s1
    80205bd2:	ffffc097          	auipc	ra,0xffffc
    80205bd6:	276080e7          	jalr	630(ra) # 80201e48 <wakeup>
}
    80205bda:	854a                	mv	a0,s2
    80205bdc:	60a6                	ld	ra,72(sp)
    80205bde:	6406                	ld	s0,64(sp)
    80205be0:	74e2                	ld	s1,56(sp)
    80205be2:	7942                	ld	s2,48(sp)
    80205be4:	79a2                	ld	s3,40(sp)
    80205be6:	7a02                	ld	s4,32(sp)
    80205be8:	6161                	addi	sp,sp,80
    80205bea:	8082                	ret
  if(!port)return NULL;
    80205bec:	892e                	mv	s2,a1
    80205bee:	b7f5                	j	80205bda <getconn+0x86>

0000000080205bf0 <msgcopy>:


struct msg*
msgcopy(struct msg* msg){
    80205bf0:	1101                	addi	sp,sp,-32
    80205bf2:	ec06                	sd	ra,24(sp)
    80205bf4:	e822                	sd	s0,16(sp)
    80205bf6:	e426                	sd	s1,8(sp)
    80205bf8:	e04a                	sd	s2,0(sp)
    80205bfa:	1000                	addi	s0,sp,32
    80205bfc:	892a                	mv	s2,a0
  struct msg* cp = kmalloc(sizeof(struct msg));
    80205bfe:	02800513          	li	a0,40
    80205c02:	00004097          	auipc	ra,0x4
    80205c06:	3ba080e7          	jalr	954(ra) # 80209fbc <kmalloc>
    80205c0a:	84aa                	mv	s1,a0
  cp->data = kmalloc(msg->len);
    80205c0c:	01092503          	lw	a0,16(s2)
    80205c10:	00004097          	auipc	ra,0x4
    80205c14:	3ac080e7          	jalr	940(ra) # 80209fbc <kmalloc>
    80205c18:	e088                	sd	a0,0(s1)
  cp->len = msg->len;
    80205c1a:	01093783          	ld	a5,16(s2)
    80205c1e:	e89c                	sd	a5,16(s1)
  cp->port = NULL;
    80205c20:	0004b423          	sd	zero,8(s1)
  memcpy(cp->data,msg->data,msg->len);
    80205c24:	01092603          	lw	a2,16(s2)
    80205c28:	00093583          	ld	a1,0(s2)
    80205c2c:	ffffb097          	auipc	ra,0xffffb
    80205c30:	20c080e7          	jalr	524(ra) # 80200e38 <memcpy>
  list_init(&cp->list);
    80205c34:	01848793          	addi	a5,s1,24
    80205c38:	f09c                	sd	a5,32(s1)
    80205c3a:	ec9c                	sd	a5,24(s1)
  return cp;
}
    80205c3c:	8526                	mv	a0,s1
    80205c3e:	60e2                	ld	ra,24(sp)
    80205c40:	6442                	ld	s0,16(sp)
    80205c42:	64a2                	ld	s1,8(sp)
    80205c44:	6902                	ld	s2,0(sp)
    80205c46:	6105                	addi	sp,sp,32
    80205c48:	8082                	ret

0000000080205c4a <sendreq>:
  port_recv_msg(port, cp);
}

void
sendreq(struct netport* port, struct netport* pport)
{
    80205c4a:	1101                	addi	sp,sp,-32
    80205c4c:	ec06                	sd	ra,24(sp)
    80205c4e:	e822                	sd	s0,16(sp)
    80205c50:	e426                	sd	s1,8(sp)
    80205c52:	e04a                	sd	s2,0(sp)
    80205c54:	1000                	addi	s0,sp,32
    80205c56:	892a                	mv	s2,a0
    80205c58:	84ae                	mv	s1,a1
  struct msg* msg = nullmsg();
    80205c5a:	00000097          	auipc	ra,0x0
    80205c5e:	eae080e7          	jalr	-338(ra) # 80205b08 <nullmsg>
    80205c62:	85aa                	mv	a1,a0
  msg->port = port;
    80205c64:	01253423          	sd	s2,8(a0)
  port_recv_req(pport,msg);
    80205c68:	8526                	mv	a0,s1
    80205c6a:	00000097          	auipc	ra,0x0
    80205c6e:	cba080e7          	jalr	-838(ra) # 80205924 <port_recv_req>
}
    80205c72:	60e2                	ld	ra,24(sp)
    80205c74:	6442                	ld	s0,16(sp)
    80205c76:	64a2                	ld	s1,8(sp)
    80205c78:	6902                	ld	s2,0(sp)
    80205c7a:	6105                	addi	sp,sp,32
    80205c7c:	8082                	ret

0000000080205c7e <connect>:
{
    80205c7e:	7179                	addi	sp,sp,-48
    80205c80:	f406                	sd	ra,40(sp)
    80205c82:	f022                	sd	s0,32(sp)
    80205c84:	ec26                	sd	s1,24(sp)
    80205c86:	e84a                	sd	s2,16(sp)
    80205c88:	e44e                	sd	s3,8(sp)
    80205c8a:	e052                	sd	s4,0(sp)
    80205c8c:	1800                	addi	s0,sp,48
    80205c8e:	892a                	mv	s2,a0
  struct netport* myport = sk->bind_port;
    80205c90:	14853983          	ld	s3,328(a0)
  struct netport* port = findport(addr);
    80205c94:	852e                	mv	a0,a1
    80205c96:	00000097          	auipc	ra,0x0
    80205c9a:	a1c080e7          	jalr	-1508(ra) # 802056b2 <findport>
  if(!port||!myport){
    80205c9e:	c931                	beqz	a0,80205cf2 <connect+0x74>
    80205ca0:	84aa                	mv	s1,a0
    80205ca2:	04098a63          	beqz	s3,80205cf6 <connect+0x78>
  acquire(&myport->lk);
    80205ca6:	05098a13          	addi	s4,s3,80
    80205caa:	8552                	mv	a0,s4
    80205cac:	00003097          	auipc	ra,0x3
    80205cb0:	22e080e7          	jalr	558(ra) # 80208eda <acquire>
  sk->conn_port = port; 
    80205cb4:	14993823          	sd	s1,336(s2)
  myport->conn = port;
    80205cb8:	0099b823          	sd	s1,16(s3)
  sendreq(myport,port);
    80205cbc:	85a6                	mv	a1,s1
    80205cbe:	854e                	mv	a0,s3
    80205cc0:	00000097          	auipc	ra,0x0
    80205cc4:	f8a080e7          	jalr	-118(ra) # 80205c4a <sendreq>
  release(&myport->lk);
    80205cc8:	8552                	mv	a0,s4
    80205cca:	00003097          	auipc	ra,0x3
    80205cce:	264080e7          	jalr	612(ra) # 80208f2e <release>
  sleep(port,&sk->lk);
    80205cd2:	15890593          	addi	a1,s2,344
    80205cd6:	8526                	mv	a0,s1
    80205cd8:	ffffc097          	auipc	ra,0xffffc
    80205cdc:	066080e7          	jalr	102(ra) # 80201d3e <sleep>
  return 0;
    80205ce0:	4501                	li	a0,0
}
    80205ce2:	70a2                	ld	ra,40(sp)
    80205ce4:	7402                	ld	s0,32(sp)
    80205ce6:	64e2                	ld	s1,24(sp)
    80205ce8:	6942                	ld	s2,16(sp)
    80205cea:	69a2                	ld	s3,8(sp)
    80205cec:	6a02                	ld	s4,0(sp)
    80205cee:	6145                	addi	sp,sp,48
    80205cf0:	8082                	ret
    return -1;
    80205cf2:	557d                	li	a0,-1
    80205cf4:	b7fd                	j	80205ce2 <connect+0x64>
    80205cf6:	557d                	li	a0,-1
    80205cf8:	b7ed                	j	80205ce2 <connect+0x64>

0000000080205cfa <recvmsgfrom>:

struct msg*
recvmsgfrom(struct socket* sk,sockaddr* addr)
{
    80205cfa:	7139                	addi	sp,sp,-64
    80205cfc:	fc06                	sd	ra,56(sp)
    80205cfe:	f822                	sd	s0,48(sp)
    80205d00:	f426                	sd	s1,40(sp)
    80205d02:	f04a                	sd	s2,32(sp)
    80205d04:	0080                	addi	s0,sp,64
    80205d06:	892a                	mv	s2,a0
  struct netport* port;
  if(sk->sk_type==SK_CONNECT){
    80205d08:	4138                	lw	a4,64(a0)
    80205d0a:	4789                	li	a5,2
    80205d0c:	04f71a63          	bne	a4,a5,80205d60 <recvmsgfrom+0x66>
    port = sk->bind_port;
    80205d10:	14853483          	ld	s1,328(a0)
  }
  else port = findport(addr);
  if(!port){
    80205d14:	cca9                	beqz	s1,80205d6e <recvmsgfrom+0x74>
    __debug_warn("recv fail\n");
    return NULL;
  }
  struct msg* msg =NULL;
    80205d16:	fc043c23          	sd	zero,-40(s0)
  struct wait_node node;
  node.chan = &msg;
    80205d1a:	fd840793          	addi	a5,s0,-40
    80205d1e:	fcf43023          	sd	a5,-64(s0)
  socketlock(sk,&node);
    80205d22:	fc040593          	addi	a1,s0,-64
    80205d26:	854a                	mv	a0,s2
    80205d28:	00000097          	auipc	ra,0x0
    80205d2c:	cb4080e7          	jalr	-844(ra) # 802059dc <socketlock>
  acquire(&port->lk);
    80205d30:	05048493          	addi	s1,s1,80
  while(1){
    msg = port_pop_msg(port,sk->conn_port);
    if(msg)break;
    else{
      sleep(&msg,&sk->lk);
    80205d34:	15890913          	addi	s2,s2,344
  acquire(&port->lk);
    80205d38:	8526                	mv	a0,s1
    80205d3a:	00003097          	auipc	ra,0x3
    80205d3e:	1a0080e7          	jalr	416(ra) # 80208eda <acquire>
  release(&port->lk);
    80205d42:	8526                	mv	a0,s1
    80205d44:	00003097          	auipc	ra,0x3
    80205d48:	1ea080e7          	jalr	490(ra) # 80208f2e <release>
    msg = port_pop_msg(port,sk->conn_port);
    80205d4c:	fc043c23          	sd	zero,-40(s0)
      sleep(&msg,&sk->lk);
    80205d50:	85ca                	mv	a1,s2
    80205d52:	fd840513          	addi	a0,s0,-40
    80205d56:	ffffc097          	auipc	ra,0xffffc
    80205d5a:	fe8080e7          	jalr	-24(ra) # 80201d3e <sleep>
  while(1){
    80205d5e:	bfe9                	j	80205d38 <recvmsgfrom+0x3e>
  else port = findport(addr);
    80205d60:	852e                	mv	a0,a1
    80205d62:	00000097          	auipc	ra,0x0
    80205d66:	950080e7          	jalr	-1712(ra) # 802056b2 <findport>
    80205d6a:	84aa                	mv	s1,a0
    80205d6c:	b765                	j	80205d14 <recvmsgfrom+0x1a>
    __debug_warn("recv fail\n");
    80205d6e:	0000e517          	auipc	a0,0xe
    80205d72:	7f250513          	addi	a0,a0,2034 # 80214560 <rodata_start+0x560>
    80205d76:	00004097          	auipc	ra,0x4
    80205d7a:	8fa080e7          	jalr	-1798(ra) # 80209670 <__debug_warn>
    }
  }
  socketunlock(sk,&node);
  
  return msg;
}
    80205d7e:	4501                	li	a0,0
    80205d80:	70e2                	ld	ra,56(sp)
    80205d82:	7442                	ld	s0,48(sp)
    80205d84:	74a2                	ld	s1,40(sp)
    80205d86:	7902                	ld	s2,32(sp)
    80205d88:	6121                	addi	sp,sp,64
    80205d8a:	8082                	ret

0000000080205d8c <acceptepoll>:

uint32
acceptepoll(struct file *fp, struct poll_table *pt)
{
    80205d8c:	1101                	addi	sp,sp,-32
    80205d8e:	ec06                	sd	ra,24(sp)
    80205d90:	e822                	sd	s0,16(sp)
    80205d92:	e426                	sd	s1,8(sp)
    80205d94:	1000                	addi	s0,sp,32
	uint32 mask = 0;
	struct socket* sk = fp->sk;
    80205d96:	6904                	ld	s1,16(a0)
	if(!sk)return 0;
    80205d98:	cc8d                	beqz	s1,80205dd2 <acceptepoll+0x46>
	if (fp->readable)
    80205d9a:	00854783          	lbu	a5,8(a0)
    80205d9e:	cb81                	beqz	a5,80205dae <acceptepoll+0x22>
	if (pt && pt->func && wq)
    80205da0:	c599                	beqz	a1,80205dae <acceptepoll+0x22>
    80205da2:	619c                	ld	a5,0(a1)
    80205da4:	c789                	beqz	a5,80205dae <acceptepoll+0x22>
		pt->func(fp, wq, pt);
    80205da6:	862e                	mv	a2,a1
    80205da8:	01848593          	addi	a1,s1,24
    80205dac:	9782                	jalr	a5
		poll_wait(fp, &sk->rqueue, pt);
	if(sk->bind_port&&port_has_req(sk->bind_port))mask|=EPOLLIN;
    80205dae:	1484b503          	ld	a0,328(s1)
	uint32 mask = 0;
    80205db2:	4781                	li	a5,0
	if(sk->bind_port&&port_has_req(sk->bind_port))mask|=EPOLLIN;
    80205db4:	c519                	beqz	a0,80205dc2 <acceptepoll+0x36>
    80205db6:	00000097          	auipc	ra,0x0
    80205dba:	9ec080e7          	jalr	-1556(ra) # 802057a2 <port_has_req>
	uint32 mask = 0;
    80205dbe:	00a037b3          	snez	a5,a0
	mask|=EPOLLOUT;
    80205dc2:	0047e513          	ori	a0,a5,4
    80205dc6:	2501                	sext.w	a0,a0
	return mask;
}
    80205dc8:	60e2                	ld	ra,24(sp)
    80205dca:	6442                	ld	s0,16(sp)
    80205dcc:	64a2                	ld	s1,8(sp)
    80205dce:	6105                	addi	sp,sp,32
    80205dd0:	8082                	ret
	if(!sk)return 0;
    80205dd2:	4501                	li	a0,0
    80205dd4:	bfd5                	j	80205dc8 <acceptepoll+0x3c>

0000000080205dd6 <socketepoll>:


uint32
socketepoll(struct file *fp, struct poll_table *pt)
{
    80205dd6:	1101                	addi	sp,sp,-32
    80205dd8:	ec06                	sd	ra,24(sp)
    80205dda:	e822                	sd	s0,16(sp)
    80205ddc:	e426                	sd	s1,8(sp)
    80205dde:	1000                	addi	s0,sp,32
	uint32 mask = 0;
	struct socket* sk = fp->sk;
    80205de0:	6904                	ld	s1,16(a0)
	if(!sk)return 0;
    80205de2:	c0a9                	beqz	s1,80205e24 <socketepoll+0x4e>
	if (fp->readable)
    80205de4:	00854783          	lbu	a5,8(a0)
    80205de8:	cb81                	beqz	a5,80205df8 <socketepoll+0x22>
	if (pt && pt->func && wq)
    80205dea:	c599                	beqz	a1,80205df8 <socketepoll+0x22>
    80205dec:	619c                	ld	a5,0(a1)
    80205dee:	c789                	beqz	a5,80205df8 <socketepoll+0x22>
		pt->func(fp, wq, pt);
    80205df0:	862e                	mv	a2,a1
    80205df2:	01848593          	addi	a1,s1,24
    80205df6:	9782                	jalr	a5
		poll_wait(fp, &sk->rqueue, pt);
	if(sk->bind_port&&port_has_msg(sk->bind_port,sk->conn_port))mask|=EPOLLIN;
    80205df8:	1484b783          	ld	a5,328(s1)
	mask|=EPOLLOUT;
	return mask;
    80205dfc:	4511                	li	a0,4
	if(sk->bind_port&&port_has_msg(sk->bind_port,sk->conn_port))mask|=EPOLLIN;
    80205dfe:	cf91                	beqz	a5,80205e1a <socketepoll+0x44>
  acquire(&port->lk);
    80205e00:	05078493          	addi	s1,a5,80
    80205e04:	8526                	mv	a0,s1
    80205e06:	00003097          	auipc	ra,0x3
    80205e0a:	0d4080e7          	jalr	212(ra) # 80208eda <acquire>
  release(&port->lk);
    80205e0e:	8526                	mv	a0,s1
    80205e10:	00003097          	auipc	ra,0x3
    80205e14:	11e080e7          	jalr	286(ra) # 80208f2e <release>
	return mask;
    80205e18:	4511                	li	a0,4
}
    80205e1a:	60e2                	ld	ra,24(sp)
    80205e1c:	6442                	ld	s0,16(sp)
    80205e1e:	64a2                	ld	s1,8(sp)
    80205e20:	6105                	addi	sp,sp,32
    80205e22:	8082                	ret
	if(!sk)return 0;
    80205e24:	4501                	li	a0,0
    80205e26:	bfd5                	j	80205e1a <socketepoll+0x44>

0000000080205e28 <socketnoepoll>:


uint32
socketnoepoll(struct file *fp, struct poll_table *pt)
{
    80205e28:	1141                	addi	sp,sp,-16
    80205e2a:	e422                	sd	s0,8(sp)
    80205e2c:	0800                	addi	s0,sp,16
	return 0;
}
    80205e2e:	4501                	li	a0,0
    80205e30:	6422                	ld	s0,8(sp)
    80205e32:	0141                	addi	sp,sp,16
    80205e34:	8082                	ret

0000000080205e36 <print_sockaddr>:

void
print_sockaddr(sockaddr* addr){
    80205e36:	7179                	addi	sp,sp,-48
    80205e38:	f406                	sd	ra,40(sp)
    80205e3a:	f022                	sd	s0,32(sp)
    80205e3c:	1800                	addi	s0,sp,48
  int family = ADDR_FAMILY(addr);
    80205e3e:	00055783          	lhu	a5,0(a0)
  if(family == 0x2){
    80205e42:	4709                	li	a4,2
    80205e44:	00e78963          	beq	a5,a4,80205e56 <print_sockaddr+0x20>
    char ipv4_4 = (addr->addr4.sin_addr)>>24;
    printf("sockaddr family %p\taddr %d:%d:%d:%d\tport %p\n", addr->addr4.sin_family
    							, ipv4_1, ipv4_2, ipv4_3, ipv4_4
    							, addr->addr4.sin_port);
  }
  else if(family == 0xa){
    80205e48:	4729                	li	a4,10
    80205e4a:	02e78f63          	beq	a5,a4,80205e88 <print_sockaddr+0x52>
    printf("sockaddr family %p\taddr %o:%o:%o:%o:%o:%o:%o:%o\tport %p\n",addr->addr6.sin6_family
    							, ipv6_1, ipv6_2, ipv6_3, ipv6_4
    							, ipv6_5, ipv6_6, ipv6_7, ipv6_8
    							, addr->addr6.sin6_port);
  }
}
    80205e4e:	70a2                	ld	ra,40(sp)
    80205e50:	7402                	ld	s0,32(sp)
    80205e52:	6145                	addi	sp,sp,48
    80205e54:	8082                	ret
    char ipv4_1 = (addr->addr4.sin_addr)>>0;
    80205e56:	4150                	lw	a2,4(a0)
    char ipv4_3 = (addr->addr4.sin_addr)>>16;
    80205e58:	0106571b          	srliw	a4,a2,0x10
    char ipv4_2 = (addr->addr4.sin_addr)>>8;
    80205e5c:	0086569b          	srliw	a3,a2,0x8
    printf("sockaddr family %p\taddr %d:%d:%d:%d\tport %p\n", addr->addr4.sin_family
    80205e60:	00255803          	lhu	a6,2(a0)
    80205e64:	0186579b          	srliw	a5,a2,0x18
    80205e68:	0ff77713          	andi	a4,a4,255
    80205e6c:	0ff6f693          	andi	a3,a3,255
    80205e70:	0ff67613          	andi	a2,a2,255
    80205e74:	4589                	li	a1,2
    80205e76:	0000e517          	auipc	a0,0xe
    80205e7a:	6fa50513          	addi	a0,a0,1786 # 80214570 <rodata_start+0x570>
    80205e7e:	00003097          	auipc	ra,0x3
    80205e82:	416080e7          	jalr	1046(ra) # 80209294 <printf>
    80205e86:	b7e1                	j	80205e4e <print_sockaddr+0x18>
    uint16 ipv6_6 = ((uint16)(addr6[11])<<8)+addr6[10];
    80205e88:	01354883          	lbu	a7,19(a0)
    80205e8c:	0088989b          	slliw	a7,a7,0x8
    80205e90:	01254783          	lbu	a5,18(a0)
    80205e94:	00f888bb          	addw	a7,a7,a5
    uint16 ipv6_5 = ((uint16)(addr6[9])<<8)+addr6[8];
    80205e98:	01154803          	lbu	a6,17(a0)
    80205e9c:	0088181b          	slliw	a6,a6,0x8
    80205ea0:	01054783          	lbu	a5,16(a0)
    80205ea4:	00f8083b          	addw	a6,a6,a5
    uint16 ipv6_4 = ((uint16)(addr6[7])<<8)+addr6[6];
    80205ea8:	00f54783          	lbu	a5,15(a0)
    80205eac:	0087979b          	slliw	a5,a5,0x8
    80205eb0:	00e54703          	lbu	a4,14(a0)
    80205eb4:	9fb9                	addw	a5,a5,a4
    uint16 ipv6_3 = ((uint16)(addr6[5])<<8)+addr6[4];
    80205eb6:	00d54703          	lbu	a4,13(a0)
    80205eba:	0087171b          	slliw	a4,a4,0x8
    80205ebe:	00c54683          	lbu	a3,12(a0)
    80205ec2:	9f35                	addw	a4,a4,a3
    uint16 ipv6_2 = ((uint16)(addr6[3])<<8)+addr6[2];
    80205ec4:	00b54683          	lbu	a3,11(a0)
    80205ec8:	0086969b          	slliw	a3,a3,0x8
    80205ecc:	00a54603          	lbu	a2,10(a0)
    80205ed0:	9eb1                	addw	a3,a3,a2
    uint16 ipv6_1 = ((uint16)(addr6[1])<<8)+addr6[0];
    80205ed2:	00954603          	lbu	a2,9(a0)
    80205ed6:	0086161b          	slliw	a2,a2,0x8
    80205eda:	00854583          	lbu	a1,8(a0)
    80205ede:	9e2d                	addw	a2,a2,a1
    printf("sockaddr family %p\taddr %o:%o:%o:%o:%o:%o:%o:%o\tport %p\n",addr->addr6.sin6_family
    80205ee0:	00255583          	lhu	a1,2(a0)
    80205ee4:	e82e                	sd	a1,16(sp)
    uint16 ipv6_8 = ((uint16)(addr6[15])<<8)+addr6[14];
    80205ee6:	01754583          	lbu	a1,23(a0)
    80205eea:	0085959b          	slliw	a1,a1,0x8
    80205eee:	01654303          	lbu	t1,22(a0)
    80205ef2:	006585bb          	addw	a1,a1,t1
    printf("sockaddr family %p\taddr %o:%o:%o:%o:%o:%o:%o:%o\tport %p\n",addr->addr6.sin6_family
    80205ef6:	15c2                	slli	a1,a1,0x30
    80205ef8:	91c1                	srli	a1,a1,0x30
    80205efa:	e42e                	sd	a1,8(sp)
    uint16 ipv6_7 = ((uint16)(addr6[13])<<8)+addr6[12];
    80205efc:	01554583          	lbu	a1,21(a0)
    80205f00:	0085959b          	slliw	a1,a1,0x8
    80205f04:	01454503          	lbu	a0,20(a0)
    80205f08:	9da9                	addw	a1,a1,a0
    printf("sockaddr family %p\taddr %o:%o:%o:%o:%o:%o:%o:%o\tport %p\n",addr->addr6.sin6_family
    80205f0a:	15c2                	slli	a1,a1,0x30
    80205f0c:	91c1                	srli	a1,a1,0x30
    80205f0e:	e02e                	sd	a1,0(sp)
    80205f10:	18c2                	slli	a7,a7,0x30
    80205f12:	0308d893          	srli	a7,a7,0x30
    80205f16:	1842                	slli	a6,a6,0x30
    80205f18:	03085813          	srli	a6,a6,0x30
    80205f1c:	17c2                	slli	a5,a5,0x30
    80205f1e:	93c1                	srli	a5,a5,0x30
    80205f20:	1742                	slli	a4,a4,0x30
    80205f22:	9341                	srli	a4,a4,0x30
    80205f24:	16c2                	slli	a3,a3,0x30
    80205f26:	92c1                	srli	a3,a3,0x30
    80205f28:	1642                	slli	a2,a2,0x30
    80205f2a:	9241                	srli	a2,a2,0x30
    80205f2c:	45a9                	li	a1,10
    80205f2e:	0000e517          	auipc	a0,0xe
    80205f32:	67250513          	addi	a0,a0,1650 # 802145a0 <rodata_start+0x5a0>
    80205f36:	00003097          	auipc	ra,0x3
    80205f3a:	35e080e7          	jalr	862(ra) # 80209294 <printf>
}
    80205f3e:	bf01                	j	80205e4e <print_sockaddr+0x18>

0000000080205f40 <print_msg>:

void
print_msg(struct msg* msg)
{
    80205f40:	1101                	addi	sp,sp,-32
    80205f42:	ec06                	sd	ra,24(sp)
    80205f44:	e822                	sd	s0,16(sp)
    80205f46:	e426                	sd	s1,8(sp)
    80205f48:	1000                	addi	s0,sp,32
    80205f4a:	84aa                	mv	s1,a0
  printf("-----msg portid:%d len:%d S-----\n",msg->port->portid,msg->len);
    80205f4c:	651c                	ld	a5,8(a0)
    80205f4e:	6910                	ld	a2,16(a0)
    80205f50:	438c                	lw	a1,0(a5)
    80205f52:	0000e517          	auipc	a0,0xe
    80205f56:	68e50513          	addi	a0,a0,1678 # 802145e0 <rodata_start+0x5e0>
    80205f5a:	00003097          	auipc	ra,0x3
    80205f5e:	33a080e7          	jalr	826(ra) # 80209294 <printf>
  printf("%s\n",msg->data);
    80205f62:	608c                	ld	a1,0(s1)
    80205f64:	0000e517          	auipc	a0,0xe
    80205f68:	6a450513          	addi	a0,a0,1700 # 80214608 <rodata_start+0x608>
    80205f6c:	00003097          	auipc	ra,0x3
    80205f70:	328080e7          	jalr	808(ra) # 80209294 <printf>
  printf("-----msg portid:%d len:%d E-----\n",msg->port->portid,msg->len);
    80205f74:	649c                	ld	a5,8(s1)
    80205f76:	6890                	ld	a2,16(s1)
    80205f78:	438c                	lw	a1,0(a5)
    80205f7a:	0000e517          	auipc	a0,0xe
    80205f7e:	69650513          	addi	a0,a0,1686 # 80214610 <rodata_start+0x610>
    80205f82:	00003097          	auipc	ra,0x3
    80205f86:	312080e7          	jalr	786(ra) # 80209294 <printf>
}
    80205f8a:	60e2                	ld	ra,24(sp)
    80205f8c:	6442                	ld	s0,16(sp)
    80205f8e:	64a2                	ld	s1,8(sp)
    80205f90:	6105                	addi	sp,sp,32
    80205f92:	8082                	ret

0000000080205f94 <print_port_info>:

void
print_port_info(struct netport* port)
{
    80205f94:	7179                	addi	sp,sp,-48
    80205f96:	f406                	sd	ra,40(sp)
    80205f98:	f022                	sd	s0,32(sp)
    80205f9a:	ec26                	sd	s1,24(sp)
    80205f9c:	e84a                	sd	s2,16(sp)
    80205f9e:	e44e                	sd	s3,8(sp)
    80205fa0:	1800                	addi	s0,sp,48
    80205fa2:	84aa                	mv	s1,a0
  printf("[PORT]portid:%p\n",port->portid);
    80205fa4:	410c                	lw	a1,0(a0)
    80205fa6:	0000e517          	auipc	a0,0xe
    80205faa:	69250513          	addi	a0,a0,1682 # 80214638 <rodata_start+0x638>
    80205fae:	00003097          	auipc	ra,0x3
    80205fb2:	2e6080e7          	jalr	742(ra) # 80209294 <printf>
  acquire(&port->lk);
    80205fb6:	05048993          	addi	s3,s1,80
    80205fba:	854e                	mv	a0,s3
    80205fbc:	00003097          	auipc	ra,0x3
    80205fc0:	f1e080e7          	jalr	-226(ra) # 80208eda <acquire>
  printf("[PORT]msgnum:%p\n",port->msgnum);
    80205fc4:	40cc                	lw	a1,4(s1)
    80205fc6:	0000e517          	auipc	a0,0xe
    80205fca:	68a50513          	addi	a0,a0,1674 # 80214650 <rodata_start+0x650>
    80205fce:	00003097          	auipc	ra,0x3
    80205fd2:	2c6080e7          	jalr	710(ra) # 80209294 <printf>
  struct list* head = &port->msg;
    80205fd6:	03048913          	addi	s2,s1,48
	return node->next;
    80205fda:	7c84                	ld	s1,56(s1)
  struct list* it = list_next(head);
  while(it!=head){
    80205fdc:	00990b63          	beq	s2,s1,80205ff2 <print_port_info+0x5e>
    struct msg* msg = dlist_entry(it,struct msg, list);
    print_msg(msg);
    80205fe0:	fe848513          	addi	a0,s1,-24
    80205fe4:	00000097          	auipc	ra,0x0
    80205fe8:	f5c080e7          	jalr	-164(ra) # 80205f40 <print_msg>
    80205fec:	6484                	ld	s1,8(s1)
  while(it!=head){
    80205fee:	fe9919e3          	bne	s2,s1,80205fe0 <print_port_info+0x4c>
    it = list_next(it);
  }
  printf("[PORT]end\n");
    80205ff2:	0000e517          	auipc	a0,0xe
    80205ff6:	67650513          	addi	a0,a0,1654 # 80214668 <rodata_start+0x668>
    80205ffa:	00003097          	auipc	ra,0x3
    80205ffe:	29a080e7          	jalr	666(ra) # 80209294 <printf>
  release(&port->lk);
    80206002:	854e                	mv	a0,s3
    80206004:	00003097          	auipc	ra,0x3
    80206008:	f2a080e7          	jalr	-214(ra) # 80208f2e <release>
}
    8020600c:	70a2                	ld	ra,40(sp)
    8020600e:	7402                	ld	s0,32(sp)
    80206010:	64e2                	ld	s1,24(sp)
    80206012:	6942                	ld	s2,16(sp)
    80206014:	69a2                	ld	s3,8(sp)
    80206016:	6145                	addi	sp,sp,48
    80206018:	8082                	ret

000000008020601a <sendmsg>:
{
    8020601a:	7179                	addi	sp,sp,-48
    8020601c:	f406                	sd	ra,40(sp)
    8020601e:	f022                	sd	s0,32(sp)
    80206020:	ec26                	sd	s1,24(sp)
    80206022:	e84a                	sd	s2,16(sp)
    80206024:	e44e                	sd	s3,8(sp)
    80206026:	e052                	sd	s4,0(sp)
    80206028:	1800                	addi	s0,sp,48
    8020602a:	89aa                	mv	s3,a0
    8020602c:	8932                	mv	s2,a2
  if(sock->sk_type==SK_CONNECT){
    8020602e:	4138                	lw	a4,64(a0)
    80206030:	4789                	li	a5,2
    80206032:	0af71663          	bne	a4,a5,802060de <sendmsg+0xc4>
    port = sock->conn_port;
    80206036:	15053483          	ld	s1,336(a0)
  if(!port){
    8020603a:	c8cd                	beqz	s1,802060ec <sendmsg+0xd2>
  struct msg* cp = msgcopy(msg);
    8020603c:	854a                	mv	a0,s2
    8020603e:	00000097          	auipc	ra,0x0
    80206042:	bb2080e7          	jalr	-1102(ra) # 80205bf0 <msgcopy>
    80206046:	892a                	mv	s2,a0
  cp->port = sock->bind_port;
    80206048:	1489b783          	ld	a5,328(s3)
    8020604c:	e51c                	sd	a5,8(a0)
  printf("[sendmsg]");
    8020604e:	0000e517          	auipc	a0,0xe
    80206052:	63a50513          	addi	a0,a0,1594 # 80214688 <rodata_start+0x688>
    80206056:	00003097          	auipc	ra,0x3
    8020605a:	23e080e7          	jalr	574(ra) # 80209294 <printf>
  print_port_info(port);
    8020605e:	8526                	mv	a0,s1
    80206060:	00000097          	auipc	ra,0x0
    80206064:	f34080e7          	jalr	-204(ra) # 80205f94 <print_port_info>
  testbit = 1;
    80206068:	4785                	li	a5,1
    8020606a:	05168717          	auipc	a4,0x5168
    8020606e:	d0f72323          	sw	a5,-762(a4) # 8536dd70 <testbit>
  acquire(&port->lk);
    80206072:	05048a13          	addi	s4,s1,80
    80206076:	8552                	mv	a0,s4
    80206078:	00003097          	auipc	ra,0x3
    8020607c:	e62080e7          	jalr	-414(ra) # 80208eda <acquire>
  port->msgnum++;
    80206080:	40dc                	lw	a5,4(s1)
    80206082:	2785                	addiw	a5,a5,1
    80206084:	c0dc                	sw	a5,4(s1)
  list_add_before(&port->msg,&msg->list);
    80206086:	01890713          	addi	a4,s2,24
	__list_insert(node, beforeme->prev, beforeme);
    8020608a:	789c                	ld	a5,48(s1)
	prev->next = next->prev = node;
    8020608c:	f898                	sd	a4,48(s1)
    8020608e:	e798                	sd	a4,8(a5)
    80206090:	03048713          	addi	a4,s1,48
	node->next = next;
    80206094:	02e93023          	sd	a4,32(s2)
	node->prev = prev;
    80206098:	00f93c23          	sd	a5,24(s2)
     if(!port->sesk[i])continue;
    8020609c:	0204b983          	ld	s3,32(s1)
    802060a0:	00098863          	beqz	s3,802060b0 <sendmsg+0x96>
     if(port->sesk[i]->conn_port==msg->port){
    802060a4:	1509b703          	ld	a4,336(s3)
    802060a8:	00893783          	ld	a5,8(s2)
    802060ac:	04f70963          	beq	a4,a5,802060fe <sendmsg+0xe4>
     if(!port->sesk[i])continue;
    802060b0:	0284b983          	ld	s3,40(s1)
    802060b4:	00098863          	beqz	s3,802060c4 <sendmsg+0xaa>
     if(port->sesk[i]->conn_port==msg->port){
    802060b8:	1509b703          	ld	a4,336(s3)
    802060bc:	00893783          	ld	a5,8(s2)
    802060c0:	02f70f63          	beq	a4,a5,802060fe <sendmsg+0xe4>
  release(&port->lk);
    802060c4:	8552                	mv	a0,s4
    802060c6:	00003097          	auipc	ra,0x3
    802060ca:	e68080e7          	jalr	-408(ra) # 80208f2e <release>
}
    802060ce:	70a2                	ld	ra,40(sp)
    802060d0:	7402                	ld	s0,32(sp)
    802060d2:	64e2                	ld	s1,24(sp)
    802060d4:	6942                	ld	s2,16(sp)
    802060d6:	69a2                	ld	s3,8(sp)
    802060d8:	6a02                	ld	s4,0(sp)
    802060da:	6145                	addi	sp,sp,48
    802060dc:	8082                	ret
  else port = findport(addr);
    802060de:	852e                	mv	a0,a1
    802060e0:	fffff097          	auipc	ra,0xfffff
    802060e4:	5d2080e7          	jalr	1490(ra) # 802056b2 <findport>
    802060e8:	84aa                	mv	s1,a0
    802060ea:	bf81                	j	8020603a <sendmsg+0x20>
    __debug_warn("send fail\n");
    802060ec:	0000e517          	auipc	a0,0xe
    802060f0:	58c50513          	addi	a0,a0,1420 # 80214678 <rodata_start+0x678>
    802060f4:	00003097          	auipc	ra,0x3
    802060f8:	57c080e7          	jalr	1404(ra) # 80209670 <__debug_warn>
    return;
    802060fc:	bfc9                	j	802060ce <sendmsg+0xb4>
  acquire(&sk->lk);
    802060fe:	15898493          	addi	s1,s3,344
    80206102:	8526                	mv	a0,s1
    80206104:	00003097          	auipc	ra,0x3
    80206108:	dd6080e7          	jalr	-554(ra) # 80208eda <acquire>
    socketwakeup(sk);
    8020610c:	854e                	mv	a0,s3
    8020610e:	fffff097          	auipc	ra,0xfffff
    80206112:	7ce080e7          	jalr	1998(ra) # 802058dc <socketwakeup>
  release(&sk->lk);
    80206116:	8526                	mv	a0,s1
    80206118:	00003097          	auipc	ra,0x3
    8020611c:	e16080e7          	jalr	-490(ra) # 80208f2e <release>
}
    80206120:	b755                	j	802060c4 <sendmsg+0xaa>

0000000080206122 <socketwrite>:
{
    80206122:	7139                	addi	sp,sp,-64
    80206124:	fc06                	sd	ra,56(sp)
    80206126:	f822                	sd	s0,48(sp)
    80206128:	f426                	sd	s1,40(sp)
    8020612a:	f04a                	sd	s2,32(sp)
    8020612c:	ec4e                	sd	s3,24(sp)
    8020612e:	e852                	sd	s4,16(sp)
    80206130:	e456                	sd	s5,8(sp)
    80206132:	0080                	addi	s0,sp,64
    80206134:	8aaa                	mv	s5,a0
    80206136:	8a2e                	mv	s4,a1
    80206138:	89b2                	mv	s3,a2
    8020613a:	84b6                	mv	s1,a3
  __debug_warn("socket write addr:%p n:%p\n", addr, n);
    8020613c:	8636                	mv	a2,a3
    8020613e:	85ce                	mv	a1,s3
    80206140:	0000e517          	auipc	a0,0xe
    80206144:	55850513          	addi	a0,a0,1368 # 80214698 <rodata_start+0x698>
    80206148:	00003097          	auipc	ra,0x3
    8020614c:	528080e7          	jalr	1320(ra) # 80209670 <__debug_warn>
  char* data = kmalloc(n);
    80206150:	8526                	mv	a0,s1
    80206152:	00004097          	auipc	ra,0x4
    80206156:	e6a080e7          	jalr	-406(ra) # 80209fbc <kmalloc>
  if(!data)return 0;
    8020615a:	c53d                	beqz	a0,802061c8 <socketwrite+0xa6>
    8020615c:	892a                	mv	s2,a0
  if(either_copyin(user,data,addr,n)<0){
    8020615e:	86a6                	mv	a3,s1
    80206160:	864e                	mv	a2,s3
    80206162:	85aa                	mv	a1,a0
    80206164:	8552                	mv	a0,s4
    80206166:	00006097          	auipc	ra,0x6
    8020616a:	926080e7          	jalr	-1754(ra) # 8020ba8c <either_copyin>
    8020616e:	87aa                	mv	a5,a0
    return 0;
    80206170:	4501                	li	a0,0
  if(either_copyin(user,data,addr,n)<0){
    80206172:	0407cc63          	bltz	a5,802061ca <socketwrite+0xa8>
  struct msg* msg =createmsg(data,n);
    80206176:	85a6                	mv	a1,s1
    80206178:	854a                	mv	a0,s2
    8020617a:	00000097          	auipc	ra,0x0
    8020617e:	952080e7          	jalr	-1710(ra) # 80205acc <createmsg>
    80206182:	892a                	mv	s2,a0
  if(!msg)return 0;
    80206184:	4501                	li	a0,0
    80206186:	04090263          	beqz	s2,802061ca <socketwrite+0xa8>
  sendmsg(sk,NULL,msg);
    8020618a:	864a                	mv	a2,s2
    8020618c:	4581                	li	a1,0
    8020618e:	8556                	mv	a0,s5
    80206190:	00000097          	auipc	ra,0x0
    80206194:	e8a080e7          	jalr	-374(ra) # 8020601a <sendmsg>
  destroymsg(msg);
    80206198:	854a                	mv	a0,s2
    8020619a:	00000097          	auipc	ra,0x0
    8020619e:	98e080e7          	jalr	-1650(ra) # 80205b28 <destroymsg>
  print_port_info(localIP->ports+0);
    802061a2:	01068517          	auipc	a0,0x1068
    802061a6:	af650513          	addi	a0,a0,-1290 # 8126dc98 <localIP+0x18>
    802061aa:	00000097          	auipc	ra,0x0
    802061ae:	dea080e7          	jalr	-534(ra) # 80205f94 <print_port_info>
  printf("[socket write]ret %d\n",n);
    802061b2:	85a6                	mv	a1,s1
    802061b4:	0000e517          	auipc	a0,0xe
    802061b8:	50450513          	addi	a0,a0,1284 # 802146b8 <rodata_start+0x6b8>
    802061bc:	00003097          	auipc	ra,0x3
    802061c0:	0d8080e7          	jalr	216(ra) # 80209294 <printf>
  return n;
    802061c4:	8526                	mv	a0,s1
    802061c6:	a011                	j	802061ca <socketwrite+0xa8>
  if(!data)return 0;
    802061c8:	4501                	li	a0,0
}
    802061ca:	70e2                	ld	ra,56(sp)
    802061cc:	7442                	ld	s0,48(sp)
    802061ce:	74a2                	ld	s1,40(sp)
    802061d0:	7902                	ld	s2,32(sp)
    802061d2:	69e2                	ld	s3,24(sp)
    802061d4:	6a42                	ld	s4,16(sp)
    802061d6:	6aa2                	ld	s5,8(sp)
    802061d8:	6121                	addi	sp,sp,64
    802061da:	8082                	ret

00000000802061dc <fileinit>:

extern int disk_init_flag;

void
fileinit(void)
{
    802061dc:	1141                	addi	sp,sp,-16
    802061de:	e406                	sd	ra,8(sp)
    802061e0:	e022                	sd	s0,0(sp)
    802061e2:	0800                	addi	s0,sp,16
  disk_init_flag = 0;
    802061e4:	01044797          	auipc	a5,0x1044
    802061e8:	fa07ae23          	sw	zero,-68(a5) # 8124a1a0 <disk_init_flag>
  #ifdef DEBUG
  printf("fileinit\n");
    802061ec:	0000e517          	auipc	a0,0xe
    802061f0:	4e450513          	addi	a0,a0,1252 # 802146d0 <rodata_start+0x6d0>
    802061f4:	00003097          	auipc	ra,0x3
    802061f8:	0a0080e7          	jalr	160(ra) # 80209294 <printf>
  #endif
}
    802061fc:	60a2                	ld	ra,8(sp)
    802061fe:	6402                	ld	s0,0(sp)
    80206200:	0141                	addi	sp,sp,16
    80206202:	8082                	ret

0000000080206204 <filealloc>:

// Allocate a file structure.
struct file*
filealloc(void)
{
    80206204:	1101                	addi	sp,sp,-32
    80206206:	ec06                	sd	ra,24(sp)
    80206208:	e822                	sd	s0,16(sp)
    8020620a:	e426                	sd	s1,8(sp)
    8020620c:	1000                	addi	s0,sp,32
  struct file *f = kmalloc(sizeof(struct file));
    8020620e:	08800513          	li	a0,136
    80206212:	00004097          	auipc	ra,0x4
    80206216:	daa080e7          	jalr	-598(ra) # 80209fbc <kmalloc>
    8020621a:	84aa                	mv	s1,a0
  memset(f,0,sizeof(struct file));
    8020621c:	08800613          	li	a2,136
    80206220:	4581                	li	a1,0
    80206222:	ffffb097          	auipc	ra,0xffffb
    80206226:	b52080e7          	jalr	-1198(ra) # 80200d74 <memset>
  f->ref = 1;
    8020622a:	4785                	li	a5,1
    8020622c:	c0dc                	sw	a5,4(s1)
  initlock(&f->lk,"file lock");
    8020622e:	0000e597          	auipc	a1,0xe
    80206232:	4b258593          	addi	a1,a1,1202 # 802146e0 <rodata_start+0x6e0>
    80206236:	03048513          	addi	a0,s1,48
    8020623a:	00003097          	auipc	ra,0x3
    8020623e:	c5c080e7          	jalr	-932(ra) # 80208e96 <initlock>
  return f;
}
    80206242:	8526                	mv	a0,s1
    80206244:	60e2                	ld	ra,24(sp)
    80206246:	6442                	ld	s0,16(sp)
    80206248:	64a2                	ld	s1,8(sp)
    8020624a:	6105                	addi	sp,sp,32
    8020624c:	8082                	ret

000000008020624e <filedup>:

// Increment ref count for file f.
struct file*
filedup(struct file *f)
{
    8020624e:	1101                	addi	sp,sp,-32
    80206250:	ec06                	sd	ra,24(sp)
    80206252:	e822                	sd	s0,16(sp)
    80206254:	e426                	sd	s1,8(sp)
    80206256:	e04a                	sd	s2,0(sp)
    80206258:	1000                	addi	s0,sp,32
    8020625a:	84aa                	mv	s1,a0
  acquire(&f->lk);
    8020625c:	03050913          	addi	s2,a0,48
    80206260:	854a                	mv	a0,s2
    80206262:	00003097          	auipc	ra,0x3
    80206266:	c78080e7          	jalr	-904(ra) # 80208eda <acquire>
  if(f->ref < 1)
    8020626a:	40dc                	lw	a5,4(s1)
    8020626c:	02f05063          	blez	a5,8020628c <filedup+0x3e>
    panic("filedup");
  f->ref++;
    80206270:	2785                	addiw	a5,a5,1
    80206272:	c0dc                	sw	a5,4(s1)
  release(&f->lk);
    80206274:	854a                	mv	a0,s2
    80206276:	00003097          	auipc	ra,0x3
    8020627a:	cb8080e7          	jalr	-840(ra) # 80208f2e <release>
  return f;
}
    8020627e:	8526                	mv	a0,s1
    80206280:	60e2                	ld	ra,24(sp)
    80206282:	6442                	ld	s0,16(sp)
    80206284:	64a2                	ld	s1,8(sp)
    80206286:	6902                	ld	s2,0(sp)
    80206288:	6105                	addi	sp,sp,32
    8020628a:	8082                	ret
    panic("filedup");
    8020628c:	0000e517          	auipc	a0,0xe
    80206290:	46450513          	addi	a0,a0,1124 # 802146f0 <rodata_start+0x6f0>
    80206294:	00003097          	auipc	ra,0x3
    80206298:	fb6080e7          	jalr	-74(ra) # 8020924a <panic>

000000008020629c <fileclose>:

// Close file f.  (Decrement ref count, close when reaches 0.)
void
fileclose(struct file *f)
{
    8020629c:	1101                	addi	sp,sp,-32
    8020629e:	ec06                	sd	ra,24(sp)
    802062a0:	e822                	sd	s0,16(sp)
    802062a2:	e426                	sd	s1,8(sp)
    802062a4:	e04a                	sd	s2,0(sp)
    802062a6:	1000                	addi	s0,sp,32
    802062a8:	84aa                	mv	s1,a0
  acquire(&f->lk);
    802062aa:	03050913          	addi	s2,a0,48
    802062ae:	854a                	mv	a0,s2
    802062b0:	00003097          	auipc	ra,0x3
    802062b4:	c2a080e7          	jalr	-982(ra) # 80208eda <acquire>
  if(f->ref < 1)
    802062b8:	40dc                	lw	a5,4(s1)
    802062ba:	04f05863          	blez	a5,8020630a <fileclose+0x6e>
    panic("fileclose");
  if(--f->ref > 0){
    802062be:	37fd                	addiw	a5,a5,-1
    802062c0:	0007871b          	sext.w	a4,a5
    802062c4:	c0dc                	sw	a5,4(s1)
    802062c6:	04e04a63          	bgtz	a4,8020631a <fileclose+0x7e>
    release(&f->lk);
    return;
  }
  release(&f->lk);
    802062ca:	854a                	mv	a0,s2
    802062cc:	00003097          	auipc	ra,0x3
    802062d0:	c62080e7          	jalr	-926(ra) # 80208f2e <release>

  if(f->type == FD_PIPE){
    802062d4:	409c                	lw	a5,0(s1)
    802062d6:	4705                	li	a4,1
    802062d8:	04e78763          	beq	a5,a4,80206326 <fileclose+0x8a>
    pipeclose(f->pipe, f->writable);
  } else if(f->type == FD_ENTRY){
    802062dc:	4709                	li	a4,2
    802062de:	04e78c63          	beq	a5,a4,80206336 <fileclose+0x9a>
    eput(f->ep);
  } else if (f->type == FD_DEVICE) {
    802062e2:	470d                	li	a4,3
    802062e4:	00e78863          	beq	a5,a4,802062f4 <fileclose+0x58>

  }else if (f->type == FD_EPOLL) {
    802062e8:	4711                	li	a4,4
    802062ea:	04e78c63          	beq	a5,a4,80206342 <fileclose+0xa6>
    epollclose(f->epoll);
  }else if (f->type == FD_SOCKET) {
    802062ee:	4715                	li	a4,5
    802062f0:	04e78f63          	beq	a5,a4,8020634e <fileclose+0xb2>
    socketclose(f->sk);
  }
  kfree(f);
    802062f4:	8526                	mv	a0,s1
    802062f6:	00004097          	auipc	ra,0x4
    802062fa:	f10080e7          	jalr	-240(ra) # 8020a206 <kfree>
}
    802062fe:	60e2                	ld	ra,24(sp)
    80206300:	6442                	ld	s0,16(sp)
    80206302:	64a2                	ld	s1,8(sp)
    80206304:	6902                	ld	s2,0(sp)
    80206306:	6105                	addi	sp,sp,32
    80206308:	8082                	ret
    panic("fileclose");
    8020630a:	0000e517          	auipc	a0,0xe
    8020630e:	3ee50513          	addi	a0,a0,1006 # 802146f8 <rodata_start+0x6f8>
    80206312:	00003097          	auipc	ra,0x3
    80206316:	f38080e7          	jalr	-200(ra) # 8020924a <panic>
    release(&f->lk);
    8020631a:	854a                	mv	a0,s2
    8020631c:	00003097          	auipc	ra,0x3
    80206320:	c12080e7          	jalr	-1006(ra) # 80208f2e <release>
    return;
    80206324:	bfe9                	j	802062fe <fileclose+0x62>
    pipeclose(f->pipe, f->writable);
    80206326:	0094c583          	lbu	a1,9(s1)
    8020632a:	7088                	ld	a0,32(s1)
    8020632c:	fffff097          	auipc	ra,0xfffff
    80206330:	9da080e7          	jalr	-1574(ra) # 80204d06 <pipeclose>
    80206334:	b7c1                	j	802062f4 <fileclose+0x58>
    eput(f->ep);
    80206336:	7488                	ld	a0,40(s1)
    80206338:	ffffd097          	auipc	ra,0xffffd
    8020633c:	7b6080e7          	jalr	1974(ra) # 80203aee <eput>
    80206340:	bf55                	j	802062f4 <fileclose+0x58>
    epollclose(f->epoll);
    80206342:	6c88                	ld	a0,24(s1)
    80206344:	00006097          	auipc	ra,0x6
    80206348:	e2a080e7          	jalr	-470(ra) # 8020c16e <epollclose>
    8020634c:	b765                	j	802062f4 <fileclose+0x58>
    socketclose(f->sk);
    8020634e:	6888                	ld	a0,16(s1)
    80206350:	fffff097          	auipc	ra,0xfffff
    80206354:	574080e7          	jalr	1396(ra) # 802058c4 <socketclose>
    80206358:	bf71                	j	802062f4 <fileclose+0x58>

000000008020635a <fileillegal>:

int fileillegal(struct file* f){
    8020635a:	1101                	addi	sp,sp,-32
    8020635c:	ec06                	sd	ra,24(sp)
    8020635e:	e822                	sd	s0,16(sp)
    80206360:	e426                	sd	s1,8(sp)
    80206362:	e04a                	sd	s2,0(sp)
    80206364:	1000                	addi	s0,sp,32
  switch (f->type) {
    80206366:	411c                	lw	a5,0(a0)
    80206368:	470d                	li	a4,3
    8020636a:	02e78b63          	beq	a5,a4,802063a0 <fileillegal+0x46>
    8020636e:	00f76d63          	bltu	a4,a5,80206388 <fileillegal+0x2e>
    80206372:	37fd                	addiw	a5,a5,-1
    80206374:	4705                	li	a4,1
    80206376:	00f76d63          	bltu	a4,a5,80206390 <fileillegal+0x36>
    8020637a:	4501                	li	a0,0
    default:
      panic("fileillegal");
      return 1;
  }
  return 0;
}
    8020637c:	60e2                	ld	ra,24(sp)
    8020637e:	6442                	ld	s0,16(sp)
    80206380:	64a2                	ld	s1,8(sp)
    80206382:	6902                	ld	s2,0(sp)
    80206384:	6105                	addi	sp,sp,32
    80206386:	8082                	ret
  switch (f->type) {
    80206388:	4715                	li	a4,5
    8020638a:	4501                	li	a0,0
    8020638c:	fee788e3          	beq	a5,a4,8020637c <fileillegal+0x22>
      panic("fileillegal");
    80206390:	0000e517          	auipc	a0,0xe
    80206394:	37850513          	addi	a0,a0,888 # 80214708 <rodata_start+0x708>
    80206398:	00003097          	auipc	ra,0x3
    8020639c:	eb2080e7          	jalr	-334(ra) # 8020924a <panic>
    802063a0:	84aa                	mv	s1,a0
        if(f->major < 0 || f->major >= getdevnum() || !devsw[f->major].read || !devsw[f->major].write)
    802063a2:	05051903          	lh	s2,80(a0)
          return 1;
    802063a6:	4505                	li	a0,1
        if(f->major < 0 || f->major >= getdevnum() || !devsw[f->major].read || !devsw[f->major].write)
    802063a8:	fc094ae3          	bltz	s2,8020637c <fileillegal+0x22>
    802063ac:	00002097          	auipc	ra,0x2
    802063b0:	07e080e7          	jalr	126(ra) # 8020842a <getdevnum>
    802063b4:	87aa                	mv	a5,a0
    802063b6:	2901                	sext.w	s2,s2
          return 1;
    802063b8:	4505                	li	a0,1
        if(f->major < 0 || f->major >= getdevnum() || !devsw[f->major].read || !devsw[f->major].write)
    802063ba:	fcf951e3          	bge	s2,a5,8020637c <fileillegal+0x22>
    802063be:	05049703          	lh	a4,80(s1)
    802063c2:	00371793          	slli	a5,a4,0x3
    802063c6:	8f99                	sub	a5,a5,a4
    802063c8:	078e                	slli	a5,a5,0x3
    802063ca:	05168697          	auipc	a3,0x5168
    802063ce:	9ae68693          	addi	a3,a3,-1618 # 8536dd78 <devsw>
    802063d2:	97b6                	add	a5,a5,a3
    802063d4:	779c                	ld	a5,40(a5)
    802063d6:	cb91                	beqz	a5,802063ea <fileillegal+0x90>
    802063d8:	00371793          	slli	a5,a4,0x3
    802063dc:	8f99                	sub	a5,a5,a4
    802063de:	078e                	slli	a5,a5,0x3
    802063e0:	97b6                	add	a5,a5,a3
    802063e2:	7b88                	ld	a0,48(a5)
          return 1;
    802063e4:	00153513          	seqz	a0,a0
    802063e8:	bf51                	j	8020637c <fileillegal+0x22>
    802063ea:	4505                	li	a0,1
    802063ec:	bf41                	j	8020637c <fileillegal+0x22>

00000000802063ee <print_f_info>:

void print_f_info(struct file* f){
  switch (f->type) {
    802063ee:	4118                	lw	a4,0(a0)
    802063f0:	4795                	li	a5,5
    802063f2:	0ae7e663          	bltu	a5,a4,8020649e <print_f_info+0xb0>
void print_f_info(struct file* f){
    802063f6:	1141                	addi	sp,sp,-16
    802063f8:	e406                	sd	ra,8(sp)
    802063fa:	e022                	sd	s0,0(sp)
    802063fc:	0800                	addi	s0,sp,16
    802063fe:	00056783          	lwu	a5,0(a0)
    80206402:	078a                	slli	a5,a5,0x2
    80206404:	0000e717          	auipc	a4,0xe
    80206408:	3e070713          	addi	a4,a4,992 # 802147e4 <rodata_start+0x7e4>
    8020640c:	97ba                	add	a5,a5,a4
    8020640e:	439c                	lw	a5,0(a5)
    80206410:	97ba                	add	a5,a5,a4
    80206412:	8782                	jr	a5
    case FD_PIPE:
        printf("[file]PIPE\n");
    80206414:	0000e517          	auipc	a0,0xe
    80206418:	30450513          	addi	a0,a0,772 # 80214718 <rodata_start+0x718>
    8020641c:	00003097          	auipc	ra,0x3
    80206420:	e78080e7          	jalr	-392(ra) # 80209294 <printf>
    case FD_SOCKET:
        printf("[file]SOCKET\n");
        break;
  }

}
    80206424:	60a2                	ld	ra,8(sp)
    80206426:	6402                	ld	s0,0(sp)
    80206428:	0141                	addi	sp,sp,16
    8020642a:	8082                	ret
        printf("[file]DEVICE name:%s\n",devsw[f->major].name);
    8020642c:	05051583          	lh	a1,80(a0)
    80206430:	00359793          	slli	a5,a1,0x3
    80206434:	8f8d                	sub	a5,a5,a1
    80206436:	078e                	slli	a5,a5,0x3
    80206438:	05168597          	auipc	a1,0x5168
    8020643c:	94058593          	addi	a1,a1,-1728 # 8536dd78 <devsw>
    80206440:	95be                	add	a1,a1,a5
    80206442:	0000e517          	auipc	a0,0xe
    80206446:	2e650513          	addi	a0,a0,742 # 80214728 <rodata_start+0x728>
    8020644a:	00003097          	auipc	ra,0x3
    8020644e:	e4a080e7          	jalr	-438(ra) # 80209294 <printf>
        break;
    80206452:	bfc9                	j	80206424 <print_f_info+0x36>
        printf("[file]ENTRY name:%s\n",f->ep->filename);
    80206454:	750c                	ld	a1,40(a0)
    80206456:	0000e517          	auipc	a0,0xe
    8020645a:	2ea50513          	addi	a0,a0,746 # 80214740 <rodata_start+0x740>
    8020645e:	00003097          	auipc	ra,0x3
    80206462:	e36080e7          	jalr	-458(ra) # 80209294 <printf>
        break;
    80206466:	bf7d                	j	80206424 <print_f_info+0x36>
        printf("[file]NONE\n");
    80206468:	0000e517          	auipc	a0,0xe
    8020646c:	2f050513          	addi	a0,a0,752 # 80214758 <rodata_start+0x758>
    80206470:	00003097          	auipc	ra,0x3
    80206474:	e24080e7          	jalr	-476(ra) # 80209294 <printf>
    	return;
    80206478:	b775                	j	80206424 <print_f_info+0x36>
        printf("[file]EPOLL\n");
    8020647a:	0000e517          	auipc	a0,0xe
    8020647e:	2ee50513          	addi	a0,a0,750 # 80214768 <rodata_start+0x768>
    80206482:	00003097          	auipc	ra,0x3
    80206486:	e12080e7          	jalr	-494(ra) # 80209294 <printf>
    	return;
    8020648a:	bf69                	j	80206424 <print_f_info+0x36>
        printf("[file]SOCKET\n");
    8020648c:	0000e517          	auipc	a0,0xe
    80206490:	2ec50513          	addi	a0,a0,748 # 80214778 <rodata_start+0x778>
    80206494:	00003097          	auipc	ra,0x3
    80206498:	e00080e7          	jalr	-512(ra) # 80209294 <printf>
        break;
    8020649c:	b761                	j	80206424 <print_f_info+0x36>
    8020649e:	8082                	ret

00000000802064a0 <fileiolock>:

void fileiolock(struct file* f){
    802064a0:	1141                	addi	sp,sp,-16
    802064a2:	e406                	sd	ra,8(sp)
    802064a4:	e022                	sd	s0,0(sp)
    802064a6:	0800                	addi	s0,sp,16
  switch (f->type) {
    802064a8:	411c                	lw	a5,0(a0)
    802064aa:	470d                	li	a4,3
    802064ac:	00e78c63          	beq	a5,a4,802064c4 <fileiolock+0x24>
    802064b0:	4715                	li	a4,5
    802064b2:	02e78f63          	beq	a5,a4,802064f0 <fileiolock+0x50>
    802064b6:	4709                	li	a4,2
    802064b8:	02e78663          	beq	a5,a4,802064e4 <fileiolock+0x44>
        acquire(&f->sk->lk);
    	break;
    case FD_NONE:
    	return;
  }
}
    802064bc:	60a2                	ld	ra,8(sp)
    802064be:	6402                	ld	s0,0(sp)
    802064c0:	0141                	addi	sp,sp,16
    802064c2:	8082                	ret
        acquire(&(devsw + f->major)->lk);
    802064c4:	05051503          	lh	a0,80(a0)
    802064c8:	00351793          	slli	a5,a0,0x3
    802064cc:	8f89                	sub	a5,a5,a0
    802064ce:	078e                	slli	a5,a5,0x3
    802064d0:	05168517          	auipc	a0,0x5168
    802064d4:	8b850513          	addi	a0,a0,-1864 # 8536dd88 <devsw+0x10>
    802064d8:	953e                	add	a0,a0,a5
    802064da:	00003097          	auipc	ra,0x3
    802064de:	a00080e7          	jalr	-1536(ra) # 80208eda <acquire>
        break;
    802064e2:	bfe9                	j	802064bc <fileiolock+0x1c>
        elock(f->ep);
    802064e4:	7508                	ld	a0,40(a0)
    802064e6:	ffffd097          	auipc	ra,0xffffd
    802064ea:	584080e7          	jalr	1412(ra) # 80203a6a <elock>
        break;
    802064ee:	b7f9                	j	802064bc <fileiolock+0x1c>
        acquire(&f->sk->lk);
    802064f0:	6908                	ld	a0,16(a0)
    802064f2:	15850513          	addi	a0,a0,344
    802064f6:	00003097          	auipc	ra,0x3
    802064fa:	9e4080e7          	jalr	-1564(ra) # 80208eda <acquire>
    	break;
    802064fe:	bf7d                	j	802064bc <fileiolock+0x1c>

0000000080206500 <fileiounlock>:

void fileiounlock(struct file* f){
    80206500:	1141                	addi	sp,sp,-16
    80206502:	e406                	sd	ra,8(sp)
    80206504:	e022                	sd	s0,0(sp)
    80206506:	0800                	addi	s0,sp,16
  switch (f->type) {
    80206508:	411c                	lw	a5,0(a0)
    8020650a:	470d                	li	a4,3
    8020650c:	00e78c63          	beq	a5,a4,80206524 <fileiounlock+0x24>
    80206510:	4715                	li	a4,5
    80206512:	02e78f63          	beq	a5,a4,80206550 <fileiounlock+0x50>
    80206516:	4709                	li	a4,2
    80206518:	02e78663          	beq	a5,a4,80206544 <fileiounlock+0x44>
    	break;
    case FD_NONE:
    	return;
    	
  }
}
    8020651c:	60a2                	ld	ra,8(sp)
    8020651e:	6402                	ld	s0,0(sp)
    80206520:	0141                	addi	sp,sp,16
    80206522:	8082                	ret
        release(&(devsw + f->major)->lk);
    80206524:	05051503          	lh	a0,80(a0)
    80206528:	00351793          	slli	a5,a0,0x3
    8020652c:	8f89                	sub	a5,a5,a0
    8020652e:	078e                	slli	a5,a5,0x3
    80206530:	05168517          	auipc	a0,0x5168
    80206534:	85850513          	addi	a0,a0,-1960 # 8536dd88 <devsw+0x10>
    80206538:	953e                	add	a0,a0,a5
    8020653a:	00003097          	auipc	ra,0x3
    8020653e:	9f4080e7          	jalr	-1548(ra) # 80208f2e <release>
        break;
    80206542:	bfe9                	j	8020651c <fileiounlock+0x1c>
        eunlock(f->ep);
    80206544:	7508                	ld	a0,40(a0)
    80206546:	ffffd097          	auipc	ra,0xffffd
    8020654a:	55a080e7          	jalr	1370(ra) # 80203aa0 <eunlock>
        break;
    8020654e:	b7f9                	j	8020651c <fileiounlock+0x1c>
        release(&f->sk->lk);
    80206550:	6908                	ld	a0,16(a0)
    80206552:	15850513          	addi	a0,a0,344
    80206556:	00003097          	auipc	ra,0x3
    8020655a:	9d8080e7          	jalr	-1576(ra) # 80208f2e <release>
    	break;
    8020655e:	bf7d                	j	8020651c <fileiounlock+0x1c>

0000000080206560 <fileinput>:

uint64
fileinput(struct file* f, int user, uint64 addr, int n, uint64 off){
    80206560:	1141                	addi	sp,sp,-16
    80206562:	e406                	sd	ra,8(sp)
    80206564:	e022                	sd	s0,0(sp)
    80206566:	0800                	addi	s0,sp,16
    80206568:	882e                	mv	a6,a1
    8020656a:	85b2                	mv	a1,a2
    8020656c:	863a                	mv	a2,a4
  uint64 r = 0;
  switch (f->type) {
    8020656e:	411c                	lw	a5,0(a0)
    80206570:	470d                	li	a4,3
    80206572:	04e78763          	beq	a5,a4,802065c0 <fileinput+0x60>
    80206576:	02f76563          	bltu	a4,a5,802065a0 <fileinput+0x40>
    8020657a:	4705                	li	a4,1
    8020657c:	02e78a63          	beq	a5,a4,802065b0 <fileinput+0x50>
    80206580:	4709                	li	a4,2
    80206582:	00e79d63          	bne	a5,a4,8020659c <fileinput+0x3c>
        break;
    case FD_DEVICE:
        r = (devsw + f->major)->read(user, addr, n);
        break;
    case FD_ENTRY:
        r = eread(f->ep, user, addr, off, n);
    80206586:	8736                	mv	a4,a3
    80206588:	0006069b          	sext.w	a3,a2
    8020658c:	862e                	mv	a2,a1
    8020658e:	85c2                	mv	a1,a6
    80206590:	7508                	ld	a0,40(a0)
    80206592:	ffffd097          	auipc	ra,0xffffd
    80206596:	af8080e7          	jalr	-1288(ra) # 8020308a <eread>
        break;
    8020659a:	a039                	j	802065a8 <fileinput+0x48>
  switch (f->type) {
    8020659c:	4501                	li	a0,0
    8020659e:	a029                	j	802065a8 <fileinput+0x48>
    802065a0:	4715                	li	a4,5
    802065a2:	02e78f63          	beq	a5,a4,802065e0 <fileinput+0x80>
    802065a6:	4501                	li	a0,0
    	break;
    case FD_NONE:
    	return 0;
  }
  return r;
}
    802065a8:	60a2                	ld	ra,8(sp)
    802065aa:	6402                	ld	s0,0(sp)
    802065ac:	0141                	addi	sp,sp,16
    802065ae:	8082                	ret
        r = piperead(f->pipe, user, addr, n);
    802065b0:	862e                	mv	a2,a1
    802065b2:	85c2                	mv	a1,a6
    802065b4:	7108                	ld	a0,32(a0)
    802065b6:	fffff097          	auipc	ra,0xfffff
    802065ba:	996080e7          	jalr	-1642(ra) # 80204f4c <piperead>
        break;
    802065be:	b7ed                	j	802065a8 <fileinput+0x48>
        r = (devsw + f->major)->read(user, addr, n);
    802065c0:	05051703          	lh	a4,80(a0)
    802065c4:	00371793          	slli	a5,a4,0x3
    802065c8:	8f99                	sub	a5,a5,a4
    802065ca:	078e                	slli	a5,a5,0x3
    802065cc:	05167717          	auipc	a4,0x5167
    802065d0:	7ac70713          	addi	a4,a4,1964 # 8536dd78 <devsw>
    802065d4:	97ba                	add	a5,a5,a4
    802065d6:	779c                	ld	a5,40(a5)
    802065d8:	8636                	mv	a2,a3
    802065da:	8542                	mv	a0,a6
    802065dc:	9782                	jalr	a5
        break;
    802065de:	b7e9                	j	802065a8 <fileinput+0x48>
    	r = socketread(f->sk, user, addr, n);
    802065e0:	862e                	mv	a2,a1
    802065e2:	85c2                	mv	a1,a6
    802065e4:	6908                	ld	a0,16(a0)
    802065e6:	fffff097          	auipc	ra,0xfffff
    802065ea:	4c0080e7          	jalr	1216(ra) # 80205aa6 <socketread>
    	break;
    802065ee:	bf6d                	j	802065a8 <fileinput+0x48>

00000000802065f0 <fileoutput>:

uint64
fileoutput(struct file* f, int user, uint64 addr, int n, uint64 off){
    802065f0:	1141                	addi	sp,sp,-16
    802065f2:	e406                	sd	ra,8(sp)
    802065f4:	e022                	sd	s0,0(sp)
    802065f6:	0800                	addi	s0,sp,16
    802065f8:	882e                	mv	a6,a1
    802065fa:	85b2                	mv	a1,a2
    802065fc:	863a                	mv	a2,a4
  uint64 r = 0;
  switch (f->type) {
    802065fe:	411c                	lw	a5,0(a0)
    80206600:	470d                	li	a4,3
    80206602:	04e78763          	beq	a5,a4,80206650 <fileoutput+0x60>
    80206606:	02f76563          	bltu	a4,a5,80206630 <fileoutput+0x40>
    8020660a:	4705                	li	a4,1
    8020660c:	02e78a63          	beq	a5,a4,80206640 <fileoutput+0x50>
    80206610:	4709                	li	a4,2
    80206612:	00e79d63          	bne	a5,a4,8020662c <fileoutput+0x3c>
        break;
    case FD_DEVICE:
        r = (devsw + f->major)->write(user, addr, n);
        break;
    case FD_ENTRY:
        r = ewrite(f->ep, user, addr, off, n);
    80206616:	8736                	mv	a4,a3
    80206618:	0006069b          	sext.w	a3,a2
    8020661c:	862e                	mv	a2,a1
    8020661e:	85c2                	mv	a1,a6
    80206620:	7508                	ld	a0,40(a0)
    80206622:	ffffd097          	auipc	ra,0xffffd
    80206626:	b7e080e7          	jalr	-1154(ra) # 802031a0 <ewrite>
        break;
    8020662a:	a039                	j	80206638 <fileoutput+0x48>
  switch (f->type) {
    8020662c:	4501                	li	a0,0
    8020662e:	a029                	j	80206638 <fileoutput+0x48>
    80206630:	4715                	li	a4,5
    80206632:	02e78f63          	beq	a5,a4,80206670 <fileoutput+0x80>
    80206636:	4501                	li	a0,0
    	break;
    case FD_NONE:
    	return 0;
  }
  return r;
}
    80206638:	60a2                	ld	ra,8(sp)
    8020663a:	6402                	ld	s0,0(sp)
    8020663c:	0141                	addi	sp,sp,16
    8020663e:	8082                	ret
        r = pipewrite(f->pipe, user, addr, n);
    80206640:	862e                	mv	a2,a1
    80206642:	85c2                	mv	a1,a6
    80206644:	7108                	ld	a0,32(a0)
    80206646:	ffffe097          	auipc	ra,0xffffe
    8020664a:	744080e7          	jalr	1860(ra) # 80204d8a <pipewrite>
        break;
    8020664e:	b7ed                	j	80206638 <fileoutput+0x48>
        r = (devsw + f->major)->write(user, addr, n);
    80206650:	05051703          	lh	a4,80(a0)
    80206654:	00371793          	slli	a5,a4,0x3
    80206658:	8f99                	sub	a5,a5,a4
    8020665a:	078e                	slli	a5,a5,0x3
    8020665c:	05167717          	auipc	a4,0x5167
    80206660:	71c70713          	addi	a4,a4,1820 # 8536dd78 <devsw>
    80206664:	97ba                	add	a5,a5,a4
    80206666:	7b9c                	ld	a5,48(a5)
    80206668:	8636                	mv	a2,a3
    8020666a:	8542                	mv	a0,a6
    8020666c:	9782                	jalr	a5
        break;
    8020666e:	b7e9                	j	80206638 <fileoutput+0x48>
    	r = socketread(f->sk, user, addr, n);
    80206670:	862e                	mv	a2,a1
    80206672:	85c2                	mv	a1,a6
    80206674:	6908                	ld	a0,16(a0)
    80206676:	fffff097          	auipc	ra,0xfffff
    8020667a:	430080e7          	jalr	1072(ra) # 80205aa6 <socketread>
    	break;
    8020667e:	bf6d                	j	80206638 <fileoutput+0x48>

0000000080206680 <filekstat>:

// Get metadata about file f.
// addr is a user virtual address, pointing to a struct stat.
int
filekstat(struct file *f, uint64 addr)
{
    80206680:	7171                	addi	sp,sp,-176
    80206682:	f506                	sd	ra,168(sp)
    80206684:	f122                	sd	s0,160(sp)
    80206686:	ed26                	sd	s1,152(sp)
    80206688:	e94a                	sd	s2,144(sp)
    8020668a:	e54e                	sd	s3,136(sp)
    8020668c:	1900                	addi	s0,sp,176
    8020668e:	84aa                	mv	s1,a0
    80206690:	892e                	mv	s2,a1
  //struct proc *p = myproc();
  struct kstat kst;

  if(f->type == FD_ENTRY){
    80206692:	411c                	lw	a5,0(a0)
    80206694:	4709                	li	a4,2
    80206696:	06e78063          	beq	a5,a4,802066f6 <filekstat+0x76>
    kst.st_mtime_nsec = f->t1_sec;
    if(kst.st_mtime_sec == 0x000000003ffffffe)kst.st_mtime_sec = 0;
    if(kst.st_atime_sec == 0x000000003ffffffe)kst.st_atime_sec = 0;
    if(kst.st_mtime_nsec == 0x0000000100000000)kst.st_mtime_sec = 0x0000000100000000;
    if(kst.st_atime_nsec == 0x0000000100000000)kst.st_atime_sec = 0x0000000100000000;
  }else if(f->type == FD_DEVICE){
    8020669a:	470d                	li	a4,3
    8020669c:	0ce78c63          	beq	a5,a4,80206774 <filekstat+0xf4>
          return -1;
    struct devsw* mydev = devsw + f->major;
    acquire(&mydev->lk);
    devkstat(mydev,&kst);
    release(&mydev->lk);
  }else if(f->type == FD_SOCKET){
    802066a0:	4715                	li	a4,5
    802066a2:	14e79063          	bne	a5,a4,802067e2 <filekstat+0x162>
    acquire(&f->sk->lk);
    802066a6:	6908                	ld	a0,16(a0)
    802066a8:	15850513          	addi	a0,a0,344
    802066ac:	00003097          	auipc	ra,0x3
    802066b0:	82e080e7          	jalr	-2002(ra) # 80208eda <acquire>
    socketkstat(f->sk, &kst);
    802066b4:	f5040593          	addi	a1,s0,-176
    802066b8:	6888                	ld	a0,16(s1)
    802066ba:	fffff097          	auipc	ra,0xfffff
    802066be:	316080e7          	jalr	790(ra) # 802059d0 <socketkstat>
    release(&f->sk->lk);
    802066c2:	6888                	ld	a0,16(s1)
    802066c4:	15850513          	addi	a0,a0,344
    802066c8:	00003097          	auipc	ra,0x3
    802066cc:	866080e7          	jalr	-1946(ra) # 80208f2e <release>
  }else {
    return -1;
  }    
  if(either_copyout(1, addr, (char *)&kst, sizeof(kst)) < 0)
    802066d0:	08000693          	li	a3,128
    802066d4:	f5040613          	addi	a2,s0,-176
    802066d8:	85ca                	mv	a1,s2
    802066da:	4505                	li	a0,1
    802066dc:	00005097          	auipc	ra,0x5
    802066e0:	35a080e7          	jalr	858(ra) # 8020ba36 <either_copyout>
    802066e4:	41f5551b          	sraiw	a0,a0,0x1f
    // if(copyout2(addr, (char *)&kst, sizeof(kst)) < 0)
      return -1;
  return 0;
}
    802066e8:	70aa                	ld	ra,168(sp)
    802066ea:	740a                	ld	s0,160(sp)
    802066ec:	64ea                	ld	s1,152(sp)
    802066ee:	694a                	ld	s2,144(sp)
    802066f0:	69aa                	ld	s3,136(sp)
    802066f2:	614d                	addi	sp,sp,176
    802066f4:	8082                	ret
    elock(f->ep);
    802066f6:	7508                	ld	a0,40(a0)
    802066f8:	ffffd097          	auipc	ra,0xffffd
    802066fc:	372080e7          	jalr	882(ra) # 80203a6a <elock>
    ekstat(f->ep, &kst);
    80206700:	f5040593          	addi	a1,s0,-176
    80206704:	7488                	ld	a0,40(s1)
    80206706:	ffffe097          	auipc	ra,0xffffe
    8020670a:	cb2080e7          	jalr	-846(ra) # 802043b8 <ekstat>
    eunlock(f->ep);
    8020670e:	7488                	ld	a0,40(s1)
    80206710:	ffffd097          	auipc	ra,0xffffd
    80206714:	390080e7          	jalr	912(ra) # 80203aa0 <eunlock>
    kst.st_atime_sec = f->t0_nsec;
    80206718:	78b0                	ld	a2,112(s1)
    8020671a:	f8c43c23          	sd	a2,-104(s0)
    kst.st_atime_nsec = f->t0_sec;
    8020671e:	74b8                	ld	a4,104(s1)
    80206720:	fae43023          	sd	a4,-96(s0)
    kst.st_mtime_sec = f->t1_nsec;
    80206724:	60cc                	ld	a1,128(s1)
    80206726:	fab43423          	sd	a1,-88(s0)
    kst.st_mtime_nsec = f->t1_sec;
    8020672a:	7cb4                	ld	a3,120(s1)
    8020672c:	fad43823          	sd	a3,-80(s0)
    if(kst.st_mtime_sec == 0x000000003ffffffe)kst.st_mtime_sec = 0;
    80206730:	400007b7          	lui	a5,0x40000
    80206734:	17f9                	addi	a5,a5,-2
    80206736:	02f58463          	beq	a1,a5,8020675e <filekstat+0xde>
    if(kst.st_atime_sec == 0x000000003ffffffe)kst.st_atime_sec = 0;
    8020673a:	400007b7          	lui	a5,0x40000
    8020673e:	17f9                	addi	a5,a5,-2
    80206740:	02f60263          	beq	a2,a5,80206764 <filekstat+0xe4>
    if(kst.st_mtime_nsec == 0x0000000100000000)kst.st_mtime_sec = 0x0000000100000000;
    80206744:	4785                	li	a5,1
    80206746:	1782                	slli	a5,a5,0x20
    80206748:	02f68163          	beq	a3,a5,8020676a <filekstat+0xea>
    if(kst.st_atime_nsec == 0x0000000100000000)kst.st_atime_sec = 0x0000000100000000;
    8020674c:	4785                	li	a5,1
    8020674e:	1782                	slli	a5,a5,0x20
    80206750:	f8f710e3          	bne	a4,a5,802066d0 <filekstat+0x50>
    80206754:	4785                	li	a5,1
    80206756:	1782                	slli	a5,a5,0x20
    80206758:	f8f43c23          	sd	a5,-104(s0)
    8020675c:	bf95                	j	802066d0 <filekstat+0x50>
    if(kst.st_mtime_sec == 0x000000003ffffffe)kst.st_mtime_sec = 0;
    8020675e:	fa043423          	sd	zero,-88(s0)
    80206762:	bfe1                	j	8020673a <filekstat+0xba>
    if(kst.st_atime_sec == 0x000000003ffffffe)kst.st_atime_sec = 0;
    80206764:	f8043c23          	sd	zero,-104(s0)
    80206768:	bff1                	j	80206744 <filekstat+0xc4>
    if(kst.st_mtime_nsec == 0x0000000100000000)kst.st_mtime_sec = 0x0000000100000000;
    8020676a:	4785                	li	a5,1
    8020676c:	1782                	slli	a5,a5,0x20
    8020676e:	faf43423          	sd	a5,-88(s0)
    80206772:	bfe9                	j	8020674c <filekstat+0xcc>
    if(f->major < 0 || f->major >= getdevnum() || !devsw[f->major].read)
    80206774:	05051983          	lh	s3,80(a0)
    80206778:	0409cf63          	bltz	s3,802067d6 <filekstat+0x156>
    8020677c:	00002097          	auipc	ra,0x2
    80206780:	cae080e7          	jalr	-850(ra) # 8020842a <getdevnum>
    80206784:	2981                	sext.w	s3,s3
    80206786:	04a9da63          	bge	s3,a0,802067da <filekstat+0x15a>
    8020678a:	05049703          	lh	a4,80(s1)
    8020678e:	00371793          	slli	a5,a4,0x3
    80206792:	8f99                	sub	a5,a5,a4
    80206794:	078e                	slli	a5,a5,0x3
    80206796:	05167697          	auipc	a3,0x5167
    8020679a:	5e268693          	addi	a3,a3,1506 # 8536dd78 <devsw>
    8020679e:	97b6                	add	a5,a5,a3
    802067a0:	779c                	ld	a5,40(a5)
    802067a2:	cf95                	beqz	a5,802067de <filekstat+0x15e>
    struct devsw* mydev = devsw + f->major;
    802067a4:	00371493          	slli	s1,a4,0x3
    802067a8:	8c99                	sub	s1,s1,a4
    802067aa:	048e                	slli	s1,s1,0x3
    802067ac:	94b6                	add	s1,s1,a3
    acquire(&mydev->lk);
    802067ae:	01048993          	addi	s3,s1,16
    802067b2:	854e                	mv	a0,s3
    802067b4:	00002097          	auipc	ra,0x2
    802067b8:	726080e7          	jalr	1830(ra) # 80208eda <acquire>
    devkstat(mydev,&kst);
    802067bc:	f5040593          	addi	a1,s0,-176
    802067c0:	8526                	mv	a0,s1
    802067c2:	00002097          	auipc	ra,0x2
    802067c6:	0b6080e7          	jalr	182(ra) # 80208878 <devkstat>
    release(&mydev->lk);
    802067ca:	854e                	mv	a0,s3
    802067cc:	00002097          	auipc	ra,0x2
    802067d0:	762080e7          	jalr	1890(ra) # 80208f2e <release>
    802067d4:	bdf5                	j	802066d0 <filekstat+0x50>
          return -1;
    802067d6:	557d                	li	a0,-1
    802067d8:	bf01                	j	802066e8 <filekstat+0x68>
    802067da:	557d                	li	a0,-1
    802067dc:	b731                	j	802066e8 <filekstat+0x68>
    802067de:	557d                	li	a0,-1
    802067e0:	b721                	j	802066e8 <filekstat+0x68>
    return -1;
    802067e2:	557d                	li	a0,-1
    802067e4:	b711                	j	802066e8 <filekstat+0x68>

00000000802067e6 <fileread>:

// Read from file f.
// addr is a user virtual address.
int
fileread(struct file *f, uint64 addr, int n)
{
    802067e6:	7179                	addi	sp,sp,-48
    802067e8:	f406                	sd	ra,40(sp)
    802067ea:	f022                	sd	s0,32(sp)
    802067ec:	ec26                	sd	s1,24(sp)
    802067ee:	e84a                	sd	s2,16(sp)
    802067f0:	e44e                	sd	s3,8(sp)
    802067f2:	e052                	sd	s4,0(sp)
    802067f4:	1800                	addi	s0,sp,48
  int r = 0;
  if(f->readable == 0){
    802067f6:	00854783          	lbu	a5,8(a0)
    802067fa:	12078763          	beqz	a5,80206928 <fileread+0x142>
    802067fe:	84aa                	mv	s1,a0
    80206800:	89ae                	mv	s3,a1
    80206802:	8932                	mv	s2,a2
    return -1;
  }
  //printf("[file read]\n");
  //print_f_info(f);
  switch (f->type) {
    80206804:	411c                	lw	a5,0(a0)
    80206806:	470d                	li	a4,3
    80206808:	0ae78863          	beq	a5,a4,802068b8 <fileread+0xd2>
    8020680c:	04f76263          	bltu	a4,a5,80206850 <fileread+0x6a>
    80206810:	4705                	li	a4,1
    80206812:	06e78a63          	beq	a5,a4,80206886 <fileread+0xa0>
    80206816:	4709                	li	a4,2
    80206818:	10e79063          	bne	a5,a4,80206918 <fileread+0x132>
        acquire(&mydev->lk);
        r = mydev->read(1, addr, n);
        release(&mydev->lk);
        break;
    case FD_ENTRY:
        elock(f->ep);
    8020681c:	7508                	ld	a0,40(a0)
    8020681e:	ffffd097          	auipc	ra,0xffffd
    80206822:	24c080e7          	jalr	588(ra) # 80203a6a <elock>
        if((r = eread(f->ep, 1, addr, f->off, n)) > 0)
    80206826:	874a                	mv	a4,s2
    80206828:	44b4                	lw	a3,72(s1)
    8020682a:	864e                	mv	a2,s3
    8020682c:	4585                	li	a1,1
    8020682e:	7488                	ld	a0,40(s1)
    80206830:	ffffd097          	auipc	ra,0xffffd
    80206834:	85a080e7          	jalr	-1958(ra) # 8020308a <eread>
    80206838:	892a                	mv	s2,a0
    8020683a:	00a05563          	blez	a0,80206844 <fileread+0x5e>
          f->off += r;
    8020683e:	64bc                	ld	a5,72(s1)
    80206840:	97aa                	add	a5,a5,a0
    80206842:	e4bc                	sd	a5,72(s1)
        eunlock(f->ep);
    80206844:	7488                	ld	a0,40(s1)
    80206846:	ffffd097          	auipc	ra,0xffffd
    8020684a:	25a080e7          	jalr	602(ra) # 80203aa0 <eunlock>
        break;
    8020684e:	a8a1                	j	802068a6 <fileread+0xc0>
  switch (f->type) {
    80206850:	4715                	li	a4,5
    80206852:	0ce79363          	bne	a5,a4,80206918 <fileread+0x132>
    case FD_SOCKET:
    	acquire(&f->sk->lk);
    80206856:	6908                	ld	a0,16(a0)
    80206858:	15850513          	addi	a0,a0,344
    8020685c:	00002097          	auipc	ra,0x2
    80206860:	67e080e7          	jalr	1662(ra) # 80208eda <acquire>
    	r = socketwrite(f->sk, 1, addr, n);
    80206864:	86ca                	mv	a3,s2
    80206866:	864e                	mv	a2,s3
    80206868:	4585                	li	a1,1
    8020686a:	6888                	ld	a0,16(s1)
    8020686c:	00000097          	auipc	ra,0x0
    80206870:	8b6080e7          	jalr	-1866(ra) # 80206122 <socketwrite>
    80206874:	892a                	mv	s2,a0
    	release(&f->sk->lk);
    80206876:	6888                	ld	a0,16(s1)
    80206878:	15850513          	addi	a0,a0,344
    8020687c:	00002097          	auipc	ra,0x2
    80206880:	6b2080e7          	jalr	1714(ra) # 80208f2e <release>
    	break;
    80206884:	a00d                	j	802068a6 <fileread+0xc0>
        r = piperead(f->pipe, 1, addr, n);
    80206886:	86b2                	mv	a3,a2
    80206888:	862e                	mv	a2,a1
    8020688a:	4585                	li	a1,1
    8020688c:	7108                	ld	a0,32(a0)
    8020688e:	ffffe097          	auipc	ra,0xffffe
    80206892:	6be080e7          	jalr	1726(ra) # 80204f4c <piperead>
        if(r<0)r = 0;
    80206896:	fff54913          	not	s2,a0
    8020689a:	43f95913          	srai	s2,s2,0x3f
    8020689e:	01257533          	and	a0,a0,s2
    802068a2:	0005091b          	sext.w	s2,a0
    default:
      panic("fileread");
  }
  // printf("[file read] r:%p\n",r);
  return r;
}
    802068a6:	854a                	mv	a0,s2
    802068a8:	70a2                	ld	ra,40(sp)
    802068aa:	7402                	ld	s0,32(sp)
    802068ac:	64e2                	ld	s1,24(sp)
    802068ae:	6942                	ld	s2,16(sp)
    802068b0:	69a2                	ld	s3,8(sp)
    802068b2:	6a02                	ld	s4,0(sp)
    802068b4:	6145                	addi	sp,sp,48
    802068b6:	8082                	ret
        if(f->major < 0 || f->major >= getdevnum() || !devsw[f->major].read)
    802068b8:	05051a03          	lh	s4,80(a0)
    802068bc:	060a4863          	bltz	s4,8020692c <fileread+0x146>
    802068c0:	00002097          	auipc	ra,0x2
    802068c4:	b6a080e7          	jalr	-1174(ra) # 8020842a <getdevnum>
    802068c8:	2a01                	sext.w	s4,s4
    802068ca:	06aa5363          	bge	s4,a0,80206930 <fileread+0x14a>
    802068ce:	05049703          	lh	a4,80(s1)
    802068d2:	00371793          	slli	a5,a4,0x3
    802068d6:	8f99                	sub	a5,a5,a4
    802068d8:	078e                	slli	a5,a5,0x3
    802068da:	05167697          	auipc	a3,0x5167
    802068de:	49e68693          	addi	a3,a3,1182 # 8536dd78 <devsw>
    802068e2:	97b6                	add	a5,a5,a3
    802068e4:	779c                	ld	a5,40(a5)
    802068e6:	c7b9                	beqz	a5,80206934 <fileread+0x14e>
        struct devsw* mydev = devsw + f->major;
    802068e8:	00371493          	slli	s1,a4,0x3
    802068ec:	8c99                	sub	s1,s1,a4
    802068ee:	048e                	slli	s1,s1,0x3
    802068f0:	94b6                	add	s1,s1,a3
        acquire(&mydev->lk);
    802068f2:	01048a13          	addi	s4,s1,16
    802068f6:	8552                	mv	a0,s4
    802068f8:	00002097          	auipc	ra,0x2
    802068fc:	5e2080e7          	jalr	1506(ra) # 80208eda <acquire>
        r = mydev->read(1, addr, n);
    80206900:	749c                	ld	a5,40(s1)
    80206902:	864a                	mv	a2,s2
    80206904:	85ce                	mv	a1,s3
    80206906:	4505                	li	a0,1
    80206908:	9782                	jalr	a5
    8020690a:	892a                	mv	s2,a0
        release(&mydev->lk);
    8020690c:	8552                	mv	a0,s4
    8020690e:	00002097          	auipc	ra,0x2
    80206912:	620080e7          	jalr	1568(ra) # 80208f2e <release>
        break;
    80206916:	bf41                	j	802068a6 <fileread+0xc0>
      panic("fileread");
    80206918:	0000e517          	auipc	a0,0xe
    8020691c:	e7050513          	addi	a0,a0,-400 # 80214788 <rodata_start+0x788>
    80206920:	00003097          	auipc	ra,0x3
    80206924:	92a080e7          	jalr	-1750(ra) # 8020924a <panic>
    return -1;
    80206928:	597d                	li	s2,-1
    8020692a:	bfb5                	j	802068a6 <fileread+0xc0>
          return -1;
    8020692c:	597d                	li	s2,-1
    8020692e:	bfa5                	j	802068a6 <fileread+0xc0>
    80206930:	597d                	li	s2,-1
    80206932:	bf95                	j	802068a6 <fileread+0xc0>
    80206934:	597d                	li	s2,-1
    80206936:	bf85                	j	802068a6 <fileread+0xc0>

0000000080206938 <filewrite>:

// Write to file f.
// addr is a user virtual address.
int
filewrite(struct file *f, uint64 addr, int n)
{
    80206938:	7179                	addi	sp,sp,-48
    8020693a:	f406                	sd	ra,40(sp)
    8020693c:	f022                	sd	s0,32(sp)
    8020693e:	ec26                	sd	s1,24(sp)
    80206940:	e84a                	sd	s2,16(sp)
    80206942:	e44e                	sd	s3,8(sp)
    80206944:	e052                	sd	s4,0(sp)
    80206946:	1800                	addi	s0,sp,48
    80206948:	89b2                	mv	s3,a2
  int ret = 0;
  //printf("major:%d off:%p\n",f->major,consolewrite-(char*)(devsw[f->major].write));
  if(!n)return 0;
    8020694a:	10060b63          	beqz	a2,80206a60 <filewrite+0x128>
    8020694e:	84aa                	mv	s1,a0
    80206950:	892e                	mv	s2,a1
  //print_f_info(f);
  //printf("[filewrite] addr:%p n:%p \n",addr,n);
  if(f->writable == 0)
    80206952:	00954783          	lbu	a5,9(a0)
    80206956:	10078f63          	beqz	a5,80206a74 <filewrite+0x13c>
    return -1;
  if(f->type == FD_PIPE){
    8020695a:	411c                	lw	a5,0(a0)
    8020695c:	4705                	li	a4,1
    8020695e:	04e78363          	beq	a5,a4,802069a4 <filewrite+0x6c>
    ret = pipewrite(f->pipe, 1, addr, n);
  } else if(f->type == FD_DEVICE){
    80206962:	470d                	li	a4,3
    80206964:	04e78a63          	beq	a5,a4,802069b8 <filewrite+0x80>
    struct devsw* mydev = devsw + f->major;
    struct spinlock* dlk = &(mydev->lk);
    acquire(dlk);
    ret = mydev->write(1, addr, n);
    release(dlk);
  } else if(f->type == FD_ENTRY){
    80206968:	4709                	li	a4,2
    8020696a:	0ae78763          	beq	a5,a4,80206a18 <filewrite+0xe0>
      f->off += n;
    } else {
      ret = -1;
    }
    eunlock(f->ep);
  } else if(f->type == FD_SOCKET){
    8020696e:	4715                	li	a4,5
    80206970:	0ee79063          	bne	a5,a4,80206a50 <filewrite+0x118>
    acquire(&f->sk->lk);
    80206974:	6908                	ld	a0,16(a0)
    80206976:	15850513          	addi	a0,a0,344
    8020697a:	00002097          	auipc	ra,0x2
    8020697e:	560080e7          	jalr	1376(ra) # 80208eda <acquire>
    ret = socketwrite(f->sk, 1, addr, n);
    80206982:	86ce                	mv	a3,s3
    80206984:	864a                	mv	a2,s2
    80206986:	4585                	li	a1,1
    80206988:	6888                	ld	a0,16(s1)
    8020698a:	fffff097          	auipc	ra,0xfffff
    8020698e:	798080e7          	jalr	1944(ra) # 80206122 <socketwrite>
    80206992:	892a                	mv	s2,a0
    release(&f->sk->lk);
    80206994:	6888                	ld	a0,16(s1)
    80206996:	15850513          	addi	a0,a0,344
    8020699a:	00002097          	auipc	ra,0x2
    8020699e:	594080e7          	jalr	1428(ra) # 80208f2e <release>
    802069a2:	a0c1                	j	80206a62 <filewrite+0x12a>
    ret = pipewrite(f->pipe, 1, addr, n);
    802069a4:	86b2                	mv	a3,a2
    802069a6:	862e                	mv	a2,a1
    802069a8:	4585                	li	a1,1
    802069aa:	7108                	ld	a0,32(a0)
    802069ac:	ffffe097          	auipc	ra,0xffffe
    802069b0:	3de080e7          	jalr	990(ra) # 80204d8a <pipewrite>
    802069b4:	892a                	mv	s2,a0
    802069b6:	a075                	j	80206a62 <filewrite+0x12a>
    if(f->major < 0 || f->major >= getdevnum() || !devsw[f->major].write)
    802069b8:	05051a03          	lh	s4,80(a0)
    802069bc:	0a0a4e63          	bltz	s4,80206a78 <filewrite+0x140>
    802069c0:	00002097          	auipc	ra,0x2
    802069c4:	a6a080e7          	jalr	-1430(ra) # 8020842a <getdevnum>
    802069c8:	2a01                	sext.w	s4,s4
    802069ca:	0aaa5963          	bge	s4,a0,80206a7c <filewrite+0x144>
    802069ce:	05049703          	lh	a4,80(s1)
    802069d2:	00371793          	slli	a5,a4,0x3
    802069d6:	8f99                	sub	a5,a5,a4
    802069d8:	078e                	slli	a5,a5,0x3
    802069da:	05167697          	auipc	a3,0x5167
    802069de:	39e68693          	addi	a3,a3,926 # 8536dd78 <devsw>
    802069e2:	97b6                	add	a5,a5,a3
    802069e4:	7b9c                	ld	a5,48(a5)
    802069e6:	cfc9                	beqz	a5,80206a80 <filewrite+0x148>
    struct devsw* mydev = devsw + f->major;
    802069e8:	00371493          	slli	s1,a4,0x3
    802069ec:	8c99                	sub	s1,s1,a4
    802069ee:	048e                	slli	s1,s1,0x3
    802069f0:	94b6                	add	s1,s1,a3
    struct spinlock* dlk = &(mydev->lk);
    802069f2:	01048a13          	addi	s4,s1,16
    acquire(dlk);
    802069f6:	8552                	mv	a0,s4
    802069f8:	00002097          	auipc	ra,0x2
    802069fc:	4e2080e7          	jalr	1250(ra) # 80208eda <acquire>
    ret = mydev->write(1, addr, n);
    80206a00:	789c                	ld	a5,48(s1)
    80206a02:	864e                	mv	a2,s3
    80206a04:	85ca                	mv	a1,s2
    80206a06:	4505                	li	a0,1
    80206a08:	9782                	jalr	a5
    80206a0a:	892a                	mv	s2,a0
    release(dlk);
    80206a0c:	8552                	mv	a0,s4
    80206a0e:	00002097          	auipc	ra,0x2
    80206a12:	520080e7          	jalr	1312(ra) # 80208f2e <release>
    80206a16:	a0b1                	j	80206a62 <filewrite+0x12a>
    elock(f->ep);
    80206a18:	7508                	ld	a0,40(a0)
    80206a1a:	ffffd097          	auipc	ra,0xffffd
    80206a1e:	050080e7          	jalr	80(ra) # 80203a6a <elock>
    if (ewrite(f->ep, 1, addr, f->off, n) == n) {
    80206a22:	874e                	mv	a4,s3
    80206a24:	44b4                	lw	a3,72(s1)
    80206a26:	864a                	mv	a2,s2
    80206a28:	4585                	li	a1,1
    80206a2a:	7488                	ld	a0,40(s1)
    80206a2c:	ffffc097          	auipc	ra,0xffffc
    80206a30:	774080e7          	jalr	1908(ra) # 802031a0 <ewrite>
      ret = -1;
    80206a34:	597d                	li	s2,-1
    if (ewrite(f->ep, 1, addr, f->off, n) == n) {
    80206a36:	01350863          	beq	a0,s3,80206a46 <filewrite+0x10e>
    eunlock(f->ep);
    80206a3a:	7488                	ld	a0,40(s1)
    80206a3c:	ffffd097          	auipc	ra,0xffffd
    80206a40:	064080e7          	jalr	100(ra) # 80203aa0 <eunlock>
    80206a44:	a839                	j	80206a62 <filewrite+0x12a>
      f->off += n;
    80206a46:	64bc                	ld	a5,72(s1)
    80206a48:	97ce                	add	a5,a5,s3
    80206a4a:	e4bc                	sd	a5,72(s1)
      ret = n;
    80206a4c:	894e                	mv	s2,s3
    80206a4e:	b7f5                	j	80206a3a <filewrite+0x102>
  }else {
    panic("filewrite");
    80206a50:	0000e517          	auipc	a0,0xe
    80206a54:	d4850513          	addi	a0,a0,-696 # 80214798 <rodata_start+0x798>
    80206a58:	00002097          	auipc	ra,0x2
    80206a5c:	7f2080e7          	jalr	2034(ra) # 8020924a <panic>
  if(!n)return 0;
    80206a60:	8932                	mv	s2,a2
  }
  return ret;
}
    80206a62:	854a                	mv	a0,s2
    80206a64:	70a2                	ld	ra,40(sp)
    80206a66:	7402                	ld	s0,32(sp)
    80206a68:	64e2                	ld	s1,24(sp)
    80206a6a:	6942                	ld	s2,16(sp)
    80206a6c:	69a2                	ld	s3,8(sp)
    80206a6e:	6a02                	ld	s4,0(sp)
    80206a70:	6145                	addi	sp,sp,48
    80206a72:	8082                	ret
    return -1;
    80206a74:	597d                	li	s2,-1
    80206a76:	b7f5                	j	80206a62 <filewrite+0x12a>
      return -1;
    80206a78:	597d                	li	s2,-1
    80206a7a:	b7e5                	j	80206a62 <filewrite+0x12a>
    80206a7c:	597d                	li	s2,-1
    80206a7e:	b7d5                	j	80206a62 <filewrite+0x12a>
    80206a80:	597d                	li	s2,-1
    80206a82:	b7c5                	j	80206a62 <filewrite+0x12a>

0000000080206a84 <filesend>:

uint64
filesend(struct file* fin,struct file* fout,uint64 addr,uint64 n){
    80206a84:	bb010113          	addi	sp,sp,-1104
    80206a88:	44113423          	sd	ra,1096(sp)
    80206a8c:	44813023          	sd	s0,1088(sp)
    80206a90:	42913c23          	sd	s1,1080(sp)
    80206a94:	43213823          	sd	s2,1072(sp)
    80206a98:	43313423          	sd	s3,1064(sp)
    80206a9c:	43413023          	sd	s4,1056(sp)
    80206aa0:	41513c23          	sd	s5,1048(sp)
    80206aa4:	41613823          	sd	s6,1040(sp)
    80206aa8:	45010413          	addi	s0,sp,1104
    80206aac:	89aa                	mv	s3,a0
    80206aae:	892e                	mv	s2,a1
    80206ab0:	8ab2                	mv	s5,a2
    80206ab2:	84b6                	mv	s1,a3
  uint64 off = 0;
    80206ab4:	fa043c23          	sd	zero,-72(s0)
  uint64 rlen = 0;
  uint64 wlen = 0;
  uint64 ret = 0;
  if(addr){
    80206ab8:	ca19                	beqz	a2,80206ace <filesend+0x4a>
    if(either_copyin(1,&off,addr,sizeof(uint64))<0){
    80206aba:	46a1                	li	a3,8
    80206abc:	fb840593          	addi	a1,s0,-72
    80206ac0:	4505                	li	a0,1
    80206ac2:	00005097          	auipc	ra,0x5
    80206ac6:	fca080e7          	jalr	-54(ra) # 8020ba8c <either_copyin>
    80206aca:	04054363          	bltz	a0,80206b10 <filesend+0x8c>
      __debug_warn("[filesend]obtain addr bad\n");
      return -1;
    }
  }
  if(fileillegal(fin)||fileillegal(fout)){
    80206ace:	854e                	mv	a0,s3
    80206ad0:	00000097          	auipc	ra,0x0
    80206ad4:	88a080e7          	jalr	-1910(ra) # 8020635a <fileillegal>
    80206ad8:	e531                	bnez	a0,80206b24 <filesend+0xa0>
    80206ada:	854a                	mv	a0,s2
    80206adc:	00000097          	auipc	ra,0x0
    80206ae0:	87e080e7          	jalr	-1922(ra) # 8020635a <fileillegal>
    80206ae4:	e121                	bnez	a0,80206b24 <filesend+0xa0>
  }
  //printf("[filesend]want send n:%p\n",n);
  //printf("[filesend]before send fout off:%p\n",fout->off);
  //print_f_info(fin);
  //print_f_info(fout);
  fileiolock(fin);
    80206ae6:	854e                	mv	a0,s3
    80206ae8:	00000097          	auipc	ra,0x0
    80206aec:	9b8080e7          	jalr	-1608(ra) # 802064a0 <fileiolock>
  fileiolock(fout);
    80206af0:	854a                	mv	a0,s2
    80206af2:	00000097          	auipc	ra,0x0
    80206af6:	9ae080e7          	jalr	-1618(ra) # 802064a0 <fileiolock>
  if(!addr)off = fin->off;
    80206afa:	120a9963          	bnez	s5,80206c2c <filesend+0x1a8>
    80206afe:	0489b783          	ld	a5,72(s3)
    80206b02:	faf43c23          	sd	a5,-72(s0)
  while(n){
    80206b06:	c0ed                	beqz	s1,80206be8 <filesend+0x164>
filesend(struct file* fin,struct file* fout,uint64 addr,uint64 n){
    80206b08:	4a01                	li	s4,0
    char buf[1024];
    rlen = MIN(n,sizeof(buf));
    80206b0a:	40000b13          	li	s6,1024
    80206b0e:	a8ad                	j	80206b88 <filesend+0x104>
      __debug_warn("[filesend]obtain addr bad\n");
    80206b10:	0000e517          	auipc	a0,0xe
    80206b14:	c9850513          	addi	a0,a0,-872 # 802147a8 <rodata_start+0x7a8>
    80206b18:	00003097          	auipc	ra,0x3
    80206b1c:	b58080e7          	jalr	-1192(ra) # 80209670 <__debug_warn>
      return -1;
    80206b20:	5a7d                	li	s4,-1
    80206b22:	a811                	j	80206b36 <filesend+0xb2>
      __debug_warn("[filesend]fin/fout illegal\n");
    80206b24:	0000e517          	auipc	a0,0xe
    80206b28:	ca450513          	addi	a0,a0,-860 # 802147c8 <rodata_start+0x7c8>
    80206b2c:	00003097          	auipc	ra,0x3
    80206b30:	b44080e7          	jalr	-1212(ra) # 80209670 <__debug_warn>
      return -1;
    80206b34:	5a7d                	li	s4,-1
      return -1;
    }
  }
  //printf("[filesend]ret:%p\n",ret);
  return ret;
}
    80206b36:	8552                	mv	a0,s4
    80206b38:	44813083          	ld	ra,1096(sp)
    80206b3c:	44013403          	ld	s0,1088(sp)
    80206b40:	43813483          	ld	s1,1080(sp)
    80206b44:	43013903          	ld	s2,1072(sp)
    80206b48:	42813983          	ld	s3,1064(sp)
    80206b4c:	42013a03          	ld	s4,1056(sp)
    80206b50:	41813a83          	ld	s5,1048(sp)
    80206b54:	41013b03          	ld	s6,1040(sp)
    80206b58:	45010113          	addi	sp,sp,1104
    80206b5c:	8082                	ret
    n -= rlen;
    80206b5e:	8c89                	sub	s1,s1,a0
    if(!rlen){
    80206b60:	c549                	beqz	a0,80206bea <filesend+0x166>
    wlen = fileoutput(fout,0,(uint64)&buf,rlen,fout->off);
    80206b62:	04893703          	ld	a4,72(s2)
    80206b66:	0005069b          	sext.w	a3,a0
    80206b6a:	bb840613          	addi	a2,s0,-1096
    80206b6e:	4581                	li	a1,0
    80206b70:	854a                	mv	a0,s2
    80206b72:	00000097          	auipc	ra,0x0
    80206b76:	a7e080e7          	jalr	-1410(ra) # 802065f0 <fileoutput>
    fout->off += wlen;
    80206b7a:	04893783          	ld	a5,72(s2)
    80206b7e:	97aa                	add	a5,a5,a0
    80206b80:	04f93423          	sd	a5,72(s2)
    ret += wlen;
    80206b84:	9a2a                	add	s4,s4,a0
  while(n){
    80206b86:	c0b5                	beqz	s1,80206bea <filesend+0x166>
    rlen = MIN(n,sizeof(buf));
    80206b88:	86a6                	mv	a3,s1
    80206b8a:	009b7363          	bgeu	s6,s1,80206b90 <filesend+0x10c>
    80206b8e:	86da                	mv	a3,s6
    rlen = fileinput(fin,0,(uint64)&buf,rlen,off);
    80206b90:	fb843703          	ld	a4,-72(s0)
    80206b94:	2681                	sext.w	a3,a3
    80206b96:	bb840613          	addi	a2,s0,-1096
    80206b9a:	4581                	li	a1,0
    80206b9c:	854e                	mv	a0,s3
    80206b9e:	00000097          	auipc	ra,0x0
    80206ba2:	9c2080e7          	jalr	-1598(ra) # 80206560 <fileinput>
    off += rlen;
    80206ba6:	fb843783          	ld	a5,-72(s0)
    80206baa:	97aa                	add	a5,a5,a0
    80206bac:	faf43c23          	sd	a5,-72(s0)
    if(!addr)fin->off+=rlen;
    80206bb0:	fa0a97e3          	bnez	s5,80206b5e <filesend+0xda>
    80206bb4:	0489b783          	ld	a5,72(s3)
    80206bb8:	97aa                	add	a5,a5,a0
    80206bba:	04f9b423          	sd	a5,72(s3)
    n -= rlen;
    80206bbe:	8c89                	sub	s1,s1,a0
    if(!rlen){
    80206bc0:	c50d                	beqz	a0,80206bea <filesend+0x166>
    wlen = fileoutput(fout,0,(uint64)&buf,rlen,fout->off);
    80206bc2:	04893703          	ld	a4,72(s2)
    80206bc6:	0005069b          	sext.w	a3,a0
    80206bca:	bb840613          	addi	a2,s0,-1096
    80206bce:	4581                	li	a1,0
    80206bd0:	854a                	mv	a0,s2
    80206bd2:	00000097          	auipc	ra,0x0
    80206bd6:	a1e080e7          	jalr	-1506(ra) # 802065f0 <fileoutput>
    fout->off += wlen;
    80206bda:	04893783          	ld	a5,72(s2)
    80206bde:	97aa                	add	a5,a5,a0
    if(!addr)fout->off+=wlen;
    80206be0:	97aa                	add	a5,a5,a0
    80206be2:	04f93423          	sd	a5,72(s2)
    80206be6:	bf79                	j	80206b84 <filesend+0x100>
  while(n){
    80206be8:	8a26                	mv	s4,s1
  fileiounlock(fout);
    80206bea:	854a                	mv	a0,s2
    80206bec:	00000097          	auipc	ra,0x0
    80206bf0:	914080e7          	jalr	-1772(ra) # 80206500 <fileiounlock>
  fileiounlock(fin);
    80206bf4:	854e                	mv	a0,s3
    80206bf6:	00000097          	auipc	ra,0x0
    80206bfa:	90a080e7          	jalr	-1782(ra) # 80206500 <fileiounlock>
  if(addr){
    80206bfe:	f20a8ce3          	beqz	s5,80206b36 <filesend+0xb2>
    if(either_copyout(1,addr,&off,sizeof(uint64))<0){
    80206c02:	46a1                	li	a3,8
    80206c04:	fb840613          	addi	a2,s0,-72
    80206c08:	85d6                	mv	a1,s5
    80206c0a:	4505                	li	a0,1
    80206c0c:	00005097          	auipc	ra,0x5
    80206c10:	e2a080e7          	jalr	-470(ra) # 8020ba36 <either_copyout>
    80206c14:	f20551e3          	bgez	a0,80206b36 <filesend+0xb2>
      __debug_warn("[filesend]obtain addr bad\n");
    80206c18:	0000e517          	auipc	a0,0xe
    80206c1c:	b9050513          	addi	a0,a0,-1136 # 802147a8 <rodata_start+0x7a8>
    80206c20:	00003097          	auipc	ra,0x3
    80206c24:	a50080e7          	jalr	-1456(ra) # 80209670 <__debug_warn>
      return -1;
    80206c28:	5a7d                	li	s4,-1
    80206c2a:	b731                	j	80206b36 <filesend+0xb2>
  while(n){
    80206c2c:	ec049ee3          	bnez	s1,80206b08 <filesend+0x84>
  fileiounlock(fout);
    80206c30:	854a                	mv	a0,s2
    80206c32:	00000097          	auipc	ra,0x0
    80206c36:	8ce080e7          	jalr	-1842(ra) # 80206500 <fileiounlock>
  fileiounlock(fin);
    80206c3a:	854e                	mv	a0,s3
    80206c3c:	00000097          	auipc	ra,0x0
    80206c40:	8c4080e7          	jalr	-1852(ra) # 80206500 <fileiounlock>
    80206c44:	8a26                	mv	s4,s1
    80206c46:	bf75                	j	80206c02 <filesend+0x17e>

0000000080206c48 <findfile>:

struct file*
findfile(char* path)
{
    80206c48:	7139                	addi	sp,sp,-64
    80206c4a:	fc06                	sd	ra,56(sp)
    80206c4c:	f822                	sd	s0,48(sp)
    80206c4e:	f426                	sd	s1,40(sp)
    80206c50:	f04a                	sd	s2,32(sp)
    80206c52:	ec4e                	sd	s3,24(sp)
    80206c54:	0080                	addi	s0,sp,64
    80206c56:	85aa                	mv	a1,a0
  int dev;
  struct dirent* ep = ename(NULL,path,&dev);
    80206c58:	fcc40613          	addi	a2,s0,-52
    80206c5c:	4501                	li	a0,0
    80206c5e:	ffffe097          	auipc	ra,0xffffe
    80206c62:	84e080e7          	jalr	-1970(ra) # 802044ac <ename>
    80206c66:	892a                	mv	s2,a0
  struct proc* p = myproc();
    80206c68:	00005097          	auipc	ra,0x5
    80206c6c:	74a080e7          	jalr	1866(ra) # 8020c3b2 <myproc>
  if(ep == NULL)return NULL;
    80206c70:	08090163          	beqz	s2,80206cf2 <findfile+0xaa>
    80206c74:	89aa                	mv	s3,a0
  elock(ep);
    80206c76:	854a                	mv	a0,s2
    80206c78:	ffffd097          	auipc	ra,0xffffd
    80206c7c:	df2080e7          	jalr	-526(ra) # 80203a6a <elock>
  for(int i = 0;i<NOFILEMAX(p);i++){
    80206c80:	0e09b783          	ld	a5,224(s3)
    80206c84:	85be                	mv	a1,a5
    80206c86:	0c800713          	li	a4,200
    80206c8a:	00f75463          	bge	a4,a5,80206c92 <findfile+0x4a>
    80206c8e:	0c800593          	li	a1,200
    80206c92:	04f05563          	blez	a5,80206cdc <findfile+0x94>
    80206c96:	0e89b683          	ld	a3,232(s3)
    if(!p->ofile[i])continue;
    80206c9a:	4781                	li	a5,0
    if(p->ofile[i]->type==FD_ENTRY&&p->ofile[i]->ep==ep){
    80206c9c:	4809                	li	a6,2
    80206c9e:	a029                	j	80206ca8 <findfile+0x60>
  for(int i = 0;i<NOFILEMAX(p);i++){
    80206ca0:	0785                	addi	a5,a5,1
    80206ca2:	06a1                	addi	a3,a3,8
    80206ca4:	02b7dc63          	bge	a5,a1,80206cdc <findfile+0x94>
    if(!p->ofile[i])continue;
    80206ca8:	00379493          	slli	s1,a5,0x3
    80206cac:	6298                	ld	a4,0(a3)
    80206cae:	db6d                	beqz	a4,80206ca0 <findfile+0x58>
    if(p->ofile[i]->type==FD_ENTRY&&p->ofile[i]->ep==ep){
    80206cb0:	4310                	lw	a2,0(a4)
    80206cb2:	ff0617e3          	bne	a2,a6,80206ca0 <findfile+0x58>
    80206cb6:	7718                	ld	a4,40(a4)
    80206cb8:	ff2714e3          	bne	a4,s2,80206ca0 <findfile+0x58>
      eunlock(ep);
    80206cbc:	854a                	mv	a0,s2
    80206cbe:	ffffd097          	auipc	ra,0xffffd
    80206cc2:	de2080e7          	jalr	-542(ra) # 80203aa0 <eunlock>
      eput(ep);
    80206cc6:	854a                	mv	a0,s2
    80206cc8:	ffffd097          	auipc	ra,0xffffd
    80206ccc:	e26080e7          	jalr	-474(ra) # 80203aee <eput>
      return p->ofile[i];
    80206cd0:	0e89b783          	ld	a5,232(s3)
    80206cd4:	94be                	add	s1,s1,a5
    80206cd6:	0004b903          	ld	s2,0(s1)
    80206cda:	a821                	j	80206cf2 <findfile+0xaa>
    }
  }
  eunlock(ep);
    80206cdc:	854a                	mv	a0,s2
    80206cde:	ffffd097          	auipc	ra,0xffffd
    80206ce2:	dc2080e7          	jalr	-574(ra) # 80203aa0 <eunlock>
  eput(ep);
    80206ce6:	854a                	mv	a0,s2
    80206ce8:	ffffd097          	auipc	ra,0xffffd
    80206cec:	e06080e7          	jalr	-506(ra) # 80203aee <eput>
  return NULL;
    80206cf0:	4901                	li	s2,0
}
    80206cf2:	854a                	mv	a0,s2
    80206cf4:	70e2                	ld	ra,56(sp)
    80206cf6:	7442                	ld	s0,48(sp)
    80206cf8:	74a2                	ld	s1,40(sp)
    80206cfa:	7902                	ld	s2,32(sp)
    80206cfc:	69e2                	ld	s3,24(sp)
    80206cfe:	6121                	addi	sp,sp,64
    80206d00:	8082                	ret

0000000080206d02 <dirent_next>:


int
dirent_next(struct file *f, uint64 addr, int n)
{
    80206d02:	d1010113          	addi	sp,sp,-752
    80206d06:	2e113423          	sd	ra,744(sp)
    80206d0a:	2e813023          	sd	s0,736(sp)
    80206d0e:	2c913c23          	sd	s1,728(sp)
    80206d12:	2d213823          	sd	s2,720(sp)
    80206d16:	2d313423          	sd	s3,712(sp)
    80206d1a:	2d413023          	sd	s4,704(sp)
    80206d1e:	2b513c23          	sd	s5,696(sp)
    80206d22:	2b613823          	sd	s6,688(sp)
    80206d26:	2b713423          	sd	s7,680(sp)
    80206d2a:	2b813023          	sd	s8,672(sp)
    80206d2e:	29913c23          	sd	s9,664(sp)
    80206d32:	1d80                	addi	s0,sp,752
  if(f->readable == 0 || !(f->ep->attribute & ATTR_DIRECTORY))
    80206d34:	00854783          	lbu	a5,8(a0)
    80206d38:	14078463          	beqz	a5,80206e80 <dirent_next+0x17e>
    80206d3c:	892a                	mv	s2,a0
    80206d3e:	8a2e                	mv	s4,a1
    80206d40:	89b2                	mv	s3,a2
    80206d42:	7508                	ld	a0,40(a0)
    80206d44:	10054783          	lbu	a5,256(a0)
    80206d48:	8bc1                	andi	a5,a5,16
    80206d4a:	12078d63          	beqz	a5,80206e84 <dirent_next+0x182>
    return -1;
  //printf("[dirent next]addr:%p n:%p\n",addr,n);
  struct dirent de;
  struct linux_dirent64 lde;
  int count = 0;
    80206d4e:	d0042a23          	sw	zero,-748(s0)
  int ret;
  int copysize = 0;
  elock(f->ep);
    80206d52:	ffffd097          	auipc	ra,0xffffd
    80206d56:	d18080e7          	jalr	-744(ra) # 80203a6a <elock>
  int copysize = 0;
    80206d5a:	4a81                	li	s5,0
    // empty entry
    if(ret == 0) {
      continue;
    }
    // end of file, return 0
    if(ret == -1) {
    80206d5c:	5bfd                	li	s7,-1
    memcpy(lde.d_name, de.filename, sizeof(de.filename));
    lde.d_type = (de.attribute & ATTR_DIRECTORY) ? T_DIR : T_FILE;
    lde.d_ino = 0;
    // Size of this dent, varies from length of filename.
    int size = sizeof(struct linux_dirent64) - sizeof(lde.d_name) + strlen(lde.d_name) + 1;
    size += (sizeof(uint64) - (size % sizeof(uint64))) % sizeof(uint64); // Align to 8.
    80206d5e:	5c1d                	li	s8,-25
    lde.d_reclen = size;
    int realsize = lde.d_reclen;
    80206d60:	6b41                	lui	s6,0x10
    80206d62:	1b7d                	addi	s6,s6,-1
    lde.d_off = f->off;
    80206d64:	04893603          	ld	a2,72(s2)
    80206d68:	d2c43023          	sd	a2,-736(s0)
    ret = enext(f->ep, &de, f->off, &count);
    80206d6c:	d1440693          	addi	a3,s0,-748
    80206d70:	2601                	sext.w	a2,a2
    80206d72:	e3040593          	addi	a1,s0,-464
    80206d76:	02893503          	ld	a0,40(s2)
    80206d7a:	ffffd097          	auipc	ra,0xffffd
    80206d7e:	f08080e7          	jalr	-248(ra) # 80203c82 <enext>
    f->off += count * 32;
    80206d82:	d1442783          	lw	a5,-748(s0)
    80206d86:	0057971b          	slliw	a4,a5,0x5
    80206d8a:	04893783          	ld	a5,72(s2)
    80206d8e:	97ba                	add	a5,a5,a4
    80206d90:	04f93423          	sd	a5,72(s2)
    if(ret == 0) {
    80206d94:	d961                	beqz	a0,80206d64 <dirent_next+0x62>
    if(ret == -1) {
    80206d96:	07750d63          	beq	a0,s7,80206e10 <dirent_next+0x10e>
    memcpy(lde.d_name, de.filename, sizeof(de.filename));
    80206d9a:	10000613          	li	a2,256
    80206d9e:	e3040593          	addi	a1,s0,-464
    80206da2:	d2b40513          	addi	a0,s0,-725
    80206da6:	ffffa097          	auipc	ra,0xffffa
    80206daa:	092080e7          	jalr	146(ra) # 80200e38 <memcpy>
    lde.d_type = (de.attribute & ATTR_DIRECTORY) ? T_DIR : T_FILE;
    80206dae:	f3044783          	lbu	a5,-208(s0)
    80206db2:	8bc1                	andi	a5,a5,16
    80206db4:	0017b793          	seqz	a5,a5
    80206db8:	0785                	addi	a5,a5,1
    80206dba:	d2f40523          	sb	a5,-726(s0)
    lde.d_ino = 0;
    80206dbe:	d0043c23          	sd	zero,-744(s0)
    int size = sizeof(struct linux_dirent64) - sizeof(lde.d_name) + strlen(lde.d_name) + 1;
    80206dc2:	d2b40513          	addi	a0,s0,-725
    80206dc6:	ffffa097          	auipc	ra,0xffffa
    80206dca:	136080e7          	jalr	310(ra) # 80200efc <strlen>
    size += (sizeof(uint64) - (size % sizeof(uint64))) % sizeof(uint64); // Align to 8.
    80206dce:	40ac04bb          	subw	s1,s8,a0
    80206dd2:	889d                	andi	s1,s1,7
    int size = sizeof(struct linux_dirent64) - sizeof(lde.d_name) + strlen(lde.d_name) + 1;
    80206dd4:	2565                	addiw	a0,a0,25
    size += (sizeof(uint64) - (size % sizeof(uint64))) % sizeof(uint64); // Align to 8.
    80206dd6:	9ca9                	addw	s1,s1,a0
    lde.d_reclen = size;
    80206dd8:	03049c93          	slli	s9,s1,0x30
    80206ddc:	030cdc93          	srli	s9,s9,0x30
    80206de0:	d3941423          	sh	s9,-728(s0)
    int realsize = lde.d_reclen;
    80206de4:	009b74b3          	and	s1,s6,s1
    80206de8:	2481                	sext.w	s1,s1
    // buf size limits
    if(lde.d_reclen > n) {
    80206dea:	0699cb63          	blt	s3,s1,80206e60 <dirent_next+0x15e>
      break;
    }

    // copy error, return -1
    if(either_copyout(1,addr, (char *)&lde, realsize) < 0){
    80206dee:	86e6                	mv	a3,s9
    80206df0:	d1840613          	addi	a2,s0,-744
    80206df4:	85d2                	mv	a1,s4
    80206df6:	4505                	li	a0,1
    80206df8:	00005097          	auipc	ra,0x5
    80206dfc:	c3e080e7          	jalr	-962(ra) # 8020ba36 <either_copyout>
    80206e00:	04054863          	bltz	a0,80206e50 <dirent_next+0x14e>
      eunlock(f->ep);
      return -1;
    }
    
    addr += realsize;
    80206e04:	9a66                	add	s4,s4,s9
    n -= realsize;
    80206e06:	409989bb          	subw	s3,s3,s1
    copysize += realsize;
    80206e0a:	009a8abb          	addw	s5,s5,s1
    80206e0e:	bf99                	j	80206d64 <dirent_next+0x62>
      eunlock(f->ep);
    80206e10:	02893503          	ld	a0,40(s2)
    80206e14:	ffffd097          	auipc	ra,0xffffd
    80206e18:	c8c080e7          	jalr	-884(ra) # 80203aa0 <eunlock>
  }
  f->off += count * 32;
  eunlock(f->ep);

  return copysize; 
}
    80206e1c:	8556                	mv	a0,s5
    80206e1e:	2e813083          	ld	ra,744(sp)
    80206e22:	2e013403          	ld	s0,736(sp)
    80206e26:	2d813483          	ld	s1,728(sp)
    80206e2a:	2d013903          	ld	s2,720(sp)
    80206e2e:	2c813983          	ld	s3,712(sp)
    80206e32:	2c013a03          	ld	s4,704(sp)
    80206e36:	2b813a83          	ld	s5,696(sp)
    80206e3a:	2b013b03          	ld	s6,688(sp)
    80206e3e:	2a813b83          	ld	s7,680(sp)
    80206e42:	2a013c03          	ld	s8,672(sp)
    80206e46:	29813c83          	ld	s9,664(sp)
    80206e4a:	2f010113          	addi	sp,sp,752
    80206e4e:	8082                	ret
      eunlock(f->ep);
    80206e50:	02893503          	ld	a0,40(s2)
    80206e54:	ffffd097          	auipc	ra,0xffffd
    80206e58:	c4c080e7          	jalr	-948(ra) # 80203aa0 <eunlock>
      return -1;
    80206e5c:	5afd                	li	s5,-1
    80206e5e:	bf7d                	j	80206e1c <dirent_next+0x11a>
  f->off += count * 32;
    80206e60:	d1442783          	lw	a5,-748(s0)
    80206e64:	0057971b          	slliw	a4,a5,0x5
    80206e68:	04893783          	ld	a5,72(s2)
    80206e6c:	97ba                	add	a5,a5,a4
    80206e6e:	04f93423          	sd	a5,72(s2)
  eunlock(f->ep);
    80206e72:	02893503          	ld	a0,40(s2)
    80206e76:	ffffd097          	auipc	ra,0xffffd
    80206e7a:	c2a080e7          	jalr	-982(ra) # 80203aa0 <eunlock>
  return copysize; 
    80206e7e:	bf79                	j	80206e1c <dirent_next+0x11a>
    return -1;
    80206e80:	5afd                	li	s5,-1
    80206e82:	bf69                	j	80206e1c <dirent_next+0x11a>
    80206e84:	5afd                	li	s5,-1
    80206e86:	bf59                	j	80206e1c <dirent_next+0x11a>

0000000080206e88 <filelseek>:

uint64 
filelseek(struct file *f, uint64 offset, int whence)
{
    80206e88:	7179                	addi	sp,sp,-48
    80206e8a:	f406                	sd	ra,40(sp)
    80206e8c:	f022                	sd	s0,32(sp)
    80206e8e:	ec26                	sd	s1,24(sp)
    80206e90:	e84a                	sd	s2,16(sp)
    80206e92:	e44e                	sd	s3,8(sp)
    80206e94:	1800                	addi	s0,sp,48
    80206e96:	892a                	mv	s2,a0
    80206e98:	89ae                	mv	s3,a1
    80206e9a:	84b2                	mv	s1,a2
  fileiolock(f);
    80206e9c:	fffff097          	auipc	ra,0xfffff
    80206ea0:	604080e7          	jalr	1540(ra) # 802064a0 <fileiolock>
  uint64 cur = f->off;
    80206ea4:	04893683          	ld	a3,72(s2)
  uint64 size = f->ep->file_size;
    80206ea8:	02893783          	ld	a5,40(s2)
    80206eac:	1087a703          	lw	a4,264(a5) # 40000108 <_entry-0x401ffef8>
  switch (whence)
    80206eb0:	4785                	li	a5,1
    80206eb2:	00f48e63          	beq	s1,a5,80206ece <filelseek+0x46>
    80206eb6:	4789                	li	a5,2
    80206eb8:	02f48a63          	beq	s1,a5,80206eec <filelseek+0x64>
    80206ebc:	5529                	li	a0,-22
    80206ebe:	c889                	beqz	s1,80206ed0 <filelseek+0x48>
  }

  f->off = cur;
  fileiounlock(f);
  return cur;
}
    80206ec0:	70a2                	ld	ra,40(sp)
    80206ec2:	7402                	ld	s0,32(sp)
    80206ec4:	64e2                	ld	s1,24(sp)
    80206ec6:	6942                	ld	s2,16(sp)
    80206ec8:	69a2                	ld	s3,8(sp)
    80206eca:	6145                	addi	sp,sp,48
    80206ecc:	8082                	ret
    cur += offset;
    80206ece:	99b6                	add	s3,s3,a3
  if(cur > 0xffffffff)
    80206ed0:	57fd                	li	a5,-1
    80206ed2:	9381                	srli	a5,a5,0x20
    return -EFBIG;
    80206ed4:	5515                	li	a0,-27
  if(cur > 0xffffffff)
    80206ed6:	ff37e5e3          	bltu	a5,s3,80206ec0 <filelseek+0x38>
  f->off = cur;
    80206eda:	05393423          	sd	s3,72(s2)
  fileiounlock(f);
    80206ede:	854a                	mv	a0,s2
    80206ee0:	fffff097          	auipc	ra,0xfffff
    80206ee4:	620080e7          	jalr	1568(ra) # 80206500 <fileiounlock>
  return cur;
    80206ee8:	854e                	mv	a0,s3
    80206eea:	bfd9                	j	80206ec0 <filelseek+0x38>
  uint64 size = f->ep->file_size;
    80206eec:	1702                	slli	a4,a4,0x20
    80206eee:	9301                	srli	a4,a4,0x20
    cur = size + offset;
    80206ef0:	99ba                	add	s3,s3,a4
    break;
    80206ef2:	bff9                	j	80206ed0 <filelseek+0x48>
	...

0000000080206f00 <initcode>:
    80206f00:	00000797          	auipc	a5,0x0
    80206f04:	08a78793          	addi	a5,a5,138 # 80206f8a <initcode+0x8a>
    80206f08:	00351513          	slli	a0,a0,0x3
    80206f0c:	00a787b3          	add	a5,a5,a0
    80206f10:	0007a783          	lw	a5,0(a5)
    80206f14:	f9c00513          	li	a0,-100
    80206f18:	00000597          	auipc	a1,0x0
    80206f1c:	08258593          	addi	a1,a1,130 # 80206f9a <initcode+0x9a>
    80206f20:	00200613          	li	a2,2
    80206f24:	03800893          	li	a7,56
    80206f28:	00000073          	ecall
    80206f2c:	00000513          	li	a0,0
    80206f30:	01700893          	li	a7,23
    80206f34:	00000073          	ecall
    80206f38:	00000513          	li	a0,0
    80206f3c:	01700893          	li	a7,23
    80206f40:	00000073          	ecall
    80206f44:	00078513          	mv	a0,a5
    80206f48:	00000597          	auipc	a1,0x0
    80206f4c:	06c58593          	addi	a1,a1,108 # 80206fb4 <initcode+0xb4>
    80206f50:	00f5a023          	sw	a5,0(a1)
    80206f54:	00000617          	auipc	a2,0x0
    80206f58:	07060613          	addi	a2,a2,112 # 80206fc4 <initcode+0xc4>
    80206f5c:	0dd00893          	li	a7,221
    80206f60:	00000073          	ecall
    80206f64:	05d00893          	li	a7,93
    80206f68:	00000073          	ecall
    80206f6c:	ff9ff0ef          	jal	ra,80206f64 <initcode+0x64>
    80206f70:	2f2e                	fld	ft10,200(sp)
    80206f72:	76726573          	csrrsi	a0,0x767,4
    80206f76:	7265                	lui	tp,0xffff9
    80206f78:	732e                	ld	t1,232(sp)
    80206f7a:	0068                	addi	a0,sp,12
    80206f7c:	2e00                	fld	fs0,24(a2)
    80206f7e:	696c632f          	0x696c632f
    80206f82:	6e65                	lui	t3,0x19
    80206f84:	2e74                	fld	fa3,216(a2)
    80206f86:	00006873          	csrrsi	a6,ustatus,0
    80206f8a:	0070                	addi	a2,sp,12
    80206f8c:	0000                	unimp
    80206f8e:	0000                	unimp
    80206f90:	0000                	unimp
    80206f92:	007d                	c.nop	31
    80206f94:	0000                	unimp
    80206f96:	0000                	unimp
    80206f98:	0000                	unimp
    80206f9a:	7665642f          	0x7665642f
    80206f9e:	6e6f632f          	0x6e6f632f
    80206fa2:	656c6f73          	csrrsi	t5,0x656,24
	...

0000000080206fcc <initcodesize>:
    80206fcc:	00cc                	addi	a1,sp,68
	...

0000000080206fd0 <server_start>:
    80206fd0:	622f2123          	sw	sp,1570(t5)
    80206fd4:	6e69                	lui	t3,0x1a
    80206fd6:	7361622f          	0x7361622f
    80206fda:	0a68                	addi	a0,sp,284
    80206fdc:	2e0a                	fld	ft8,128(sp)
    80206fde:	6465722f          	0x6465722f
    80206fe2:	7369                	lui	t1,0xffffa
    80206fe4:	732d                	lui	t1,0xfffeb
    80206fe6:	7265                	lui	tp,0xffff9
    80206fe8:	6576                	ld	a0,344(sp)
    80206fea:	2072                	fld	ft0,280(sp)
    80206fec:	2d2d                	addiw	s10,s10,11
    80206fee:	7270                	ld	a2,224(a2)
    80206ff0:	6365746f          	jal	s0,8025e626 <data_start+0x46626>
    80206ff4:	6574                	ld	a3,200(a0)
    80206ff6:	2d64                	fld	fs1,216(a0)
    80206ff8:	6f6d                	lui	t5,0x1b
    80206ffa:	6564                	ld	s1,200(a0)
    80206ffc:	6e20                	ld	s0,88(a2)
    80206ffe:	          	jal	s4,80206ffe <server_start+0x2e>

0000000080207000 <server_size>:
    80207000:	0030                	addi	a2,sp,8
	...

0000000080207004 <client_start>:
    80207004:	622f2123          	sw	sp,1570(t5) # 1b622 <_entry-0x801e49de>
    80207008:	6e69                	lui	t3,0x1a
    8020700a:	7361622f          	0x7361622f
    8020700e:	0a68                	addi	a0,sp,284
    80207010:	2e0a                	fld	ft8,128(sp)
    80207012:	6465722f          	0x6465722f
    80207016:	7369                	lui	t1,0xffffa
    80207018:	632d                	lui	t1,0xb
    8020701a:	696c                	ld	a1,208(a0)
    8020701c:	0a              	Address 0x000000008020701c is out of bounds.


000000008020701d <client_size>:
    8020701d:	0019                	c.nop	6
	...

0000000080207021 <localtime>:
    80207021:	5a54                	lw	a3,52(a2)
    80207023:	6669                	lui	a2,0x1a
    80207025:	0032                	c.slli	zero,0xc
	...
    80207037:	0500                	addi	s0,sp,640
    80207039:	0000                	unimp
    8020703b:	0500                	addi	s0,sp,640
    8020703d:	0000                	unimp
    8020703f:	0000                	unimp
    80207041:	0000                	unimp
    80207043:	ba00                	fsd	fs0,48(a2)
    80207045:	0000                	unimp
    80207047:	0500                	addi	s0,sp,640
    80207049:	0000                	unimp
    8020704b:	1400                	addi	s0,sp,544
    8020704d:	0080                	addi	s0,sp,64
    8020704f:	0000                	unimp
    80207051:	a69e                	fsd	ft7,328(sp)
    80207053:	a048                	fsd	fa0,128(s0)
    80207055:	bb9f 9015 86a0      	0x86a09015bb9f
    8020705b:	a02a                	fsd	fa0,0(sp)
    8020705d:	9aa1                	andi	a3,a3,-24
    8020705f:	89cb90f7          	0x89cb90f7
    80207063:	a01a                	fsd	ft6,0(sp)
    80207065:	23d2                	fld	ft7,272(sp)
    80207067:	70f4                	ld	a3,224(s1)
    80207069:	61d2                	ld	gp,272(sp)
    8020706b:	1026                	c.slli	zero,0x29
    8020706d:	fed6                	sd	s5,376(sp)
    8020706f:	5c74                	lw	a3,124(s0)
    80207071:	80d8                	0x80d8
    80207073:	90ad                	srli	s1,s1,0x2b
    80207075:	feda                	sd	s6,376(sp)
    80207077:	c0db90c3          	fmadd.s	ft1,fs7,fa3,fs8,rtz
    8020707b:	1090                	addi	a2,sp,96
    8020707d:	dedc                	sw	a5,60(a3)
    8020707f:	90a5                	srli	s1,s1,0x29
    80207081:	a9dd                	j	80207577 <localtime+0x556>
    80207083:	90ac                	0x90ac
    80207085:	bede                	fsd	fs7,376(sp)
    80207087:	89df9087          	0x89df9087
    8020708b:	908e                	add	ra,ra,gp
    8020708d:	9ee0                	0x9ee0
    8020708f:	9069                	srli	s0,s0,0x3a
    80207091:	69e1                	lui	s3,0x18
    80207093:	9070                	0x9070
    80207095:	7ee2                	ld	t4,56(sp)
    80207097:	49e3904b          	fnmsub.s	ft0,ft7,ft10,fs1,rtz
    8020709b:	9052                	c.add	zero,s4
    8020709d:	5ee4                	lw	s1,124(a3)
    8020709f:	902d                	srli	s0,s0,0x2b
    802070a1:	29e5                	addiw	s3,s3,25
    802070a3:	9034                	0x9034
    802070a5:	47e6                	lw	a5,88(sp)
    802070a7:	104a                	c.slli	zero,0x32
    802070a9:	105112e7          	0x105112e7
    802070ad:	27e8                	fld	fa0,200(a5)
    802070af:	102c                	addi	a1,sp,40
    802070b1:	f2e8                	sd	a0,224(a3)
    802070b3:	07ea1033          	0x7ea1033
    802070b7:	100e                	c.slli	zero,0x23
    802070b9:	d2ea                	sw	s10,100(sp)
    802070bb:	1015                	c.nop	-27
    802070bd:	10f0e6eb          	0x10f0e6eb
    802070c1:	b1ec                	fsd	fa1,224(a1)
    802070c3:	c6ed10f7          	0xc6ed10f7
    802070c7:	10d2                	slli	ra,ra,0x34
    802070c9:	91ee                	add	gp,gp,s11
    802070cb:	10d9                	addi	ra,ra,-10
    802070cd:	90eeafef          	jal	t6,801f11db <_entry-0xee25>
    802070d1:	71f0                	ld	a2,224(a1)
    802070d3:	8ff110bb          	0x8ff110bb
    802070d7:	90d0                	0x90d0
    802070d9:	7ff2                	ld	t6,312(sp)
    802070db:	90c1                	srli	s1,s1,0x30
    802070dd:	90b26ff3          	csrrsi	t6,0x90b,4
    802070e1:	5ff4                	lw	a3,124(a5)
    802070e3:	4ff590a3          	sh	t6,1249(a1)
    802070e7:	9094                	0x9094
    802070e9:	3ff6                	fld	ft11,376(sp)
    802070eb:	9085                	srli	s1,s1,0x21
    802070ed:	90762ff7          	0x90762ff7
    802070f1:	28f8                	fld	fa4,208(s1)
    802070f3:	10a2                	slli	ra,ra,0x28
    802070f5:	0ff9                	addi	t6,t6,30
    802070f7:	9058                	0x9058
    802070f9:	08fa                	slli	a7,a7,0x1e
    802070fb:	1084                	addi	s1,sp,96
    802070fd:	f8fa                	sd	t5,112(sp)
    802070ff:	e8fb2083          	lw	ra,-369(s6) # fe8f <_entry-0x801f0171>
    80207103:	1066                	c.slli	zero,0x39
    80207105:	d8fc                	sw	a5,116(s1)
    80207107:	2065                	0x2065
    80207109:	c8fd                	beqz	s1,802071ff <localtime+0x1de>
    8020710b:	1048                	addi	a0,sp,36
    8020710d:	b8fe                	fsd	ft11,112(sp)
    8020710f:	a8ff2047          	fmsub.s	ft0,ft10,fa5,fs5,rdn
    80207113:	102a                	c.slli	zero,0x2a
    80207115:	9800                	0x9800
    80207117:	2029                	0x2029
    80207119:	8801                	andi	s0,s0,0
    8020711b:	100c                	addi	a1,sp,32
    8020711d:	7802                	ld	a6,32(sp)
    8020711f:	7103200b          	0x7103200b
    80207123:	9028                	0x9028
    80207125:	6104                	ld	s1,0(a0)
    80207127:	5105a027          	fsw	fa6,1280(a1)
    8020712b:	900a                	c.add	zero,sp
    8020712d:	4106                	lw	sp,64(sp)
    8020712f:	a009                	j	80207131 <localtime+0x110>
    80207131:	90ec3007          	fld	ft0,-1778(s8)
    80207135:	a0438d07          	0xa0438d07
    80207139:	1009                	c.nop	-30
    8020713b:	90ce                	add	ra,ra,s3
    8020713d:	ad09                	j	8020774f <localtime+0x72e>
    8020713f:	f00a20bf e00b90b0 	0xe00b90b0f00a20bf
    80207147:	d90ca0af          	0xd90ca0af
    8020714b:	10cd                	addi	ra,ra,-13
    8020714d:	c00d                	beqz	s0,8020716f <localtime+0x14e>
    8020714f:	a091                	j	80207193 <localtime+0x172>
    80207151:	b90e                	fsd	ft3,176(sp)
    80207153:	a90f10af          	0xa90f10af
    80207157:	20ae                	fld	ft1,200(sp)
    80207159:	9910                	0x9910
    8020715b:	1091                	addi	ra,ra,-28
    8020715d:	8911                	andi	a0,a0,4
    8020715f:	2090                	fld	fa2,0(s1)
    80207161:	7912                	ld	s2,288(sp)
    80207163:	69131073          	csrw	0x691,t1
    80207167:	2072                	fld	ft0,280(sp)
    80207169:	5914                	lw	a3,48(a0)
    8020716b:	1055                	c.nop	-11
    8020716d:	4915                	li	s2,5
    8020716f:	2054                	fld	fa3,128(s0)
    80207171:	3916                	fld	fs2,352(sp)
    80207173:	29171037          	lui	zero,0x29171
    80207177:	2036                	fld	ft0,328(sp)
    80207179:	2218                	fld	fa4,0(a2)
    8020717b:	09199053          	fsub.s	ft0,fs3,fa7,rtz
    8020717f:	2018                	fld	fa4,0(s0)
    80207181:	021a                	slli	tp,tp,0x6
    80207183:	9035                	srli	s0,s0,0x2d
    80207185:	f21a                	sd	t1,288(sp)
    80207187:	a034                	fsd	fa3,64(s0)
    80207189:	9017e21b          	0x9017e21b
    8020718d:	d21c                	sw	a5,32(a2)
    8020718f:	a016                	fsd	ft5,0(sp)
    80207191:	c11d                	beqz	a0,802071b7 <localtime+0x196>
    80207193:	90f9                	srli	s1,s1,0x3e
    80207195:	b11e                	fsd	ft7,160(sp)
    80207197:	a0f8                	fsd	fa4,192(s1)
    80207199:	a11f 90db 7620      	0x762090dba11f
    8020719f:	8121202b          	0x8121202b
    802071a3:	90bd                	srli	s1,s1,0x2f
    802071a5:	5622                	lw	a2,40(sp)
    802071a7:	200d                	0x200d
    802071a9:	10da6a23          	0x10da6a23
    802071ad:	3524                	fld	fs1,104(a0)
    802071af:	4a2520ef          	jal	ra,80259651 <data_start+0x41651>
    802071b3:	10bc                	addi	a5,sp,104
    802071b5:	1526                	slli	a0,a0,0x29
    802071b7:	20d1                	addiw	ra,ra,20
    802071b9:	109e2a27          	fsw	fs1,276(t3) # 1a114 <_entry-0x801e5eec>
    802071bd:	a0edfe27          	0xa0edfe27
    802071c1:	0a29                	addi	s4,s4,10
    802071c3:	1080                	addi	s0,sp,96
    802071c5:	de29                	beqz	a2,8020711f <localtime+0xfe>
    802071c7:	ea2aa0cf          	fnmadd.d	ft1,fs5,ft2,ft9,rdn
    802071cb:	1062                	c.slli	zero,0x38
    802071cd:	a0b1be2b          	0xa0b1be2b
    802071d1:	d32c                	sw	a1,96(a4)
    802071d3:	907e                	c.add	zero,t6
    802071d5:	9e2d                	addw	a2,a2,a1
    802071d7:	b32ea093          	slti	ra,t4,-1230
    802071db:	9060                	0x9060
    802071dd:	a0757e2f          	0xa0757e2f
    802071e1:	9330                	0x9330
    802071e3:	9042                	c.add	zero,a6
    802071e5:	6731                	lui	a4,0xc
    802071e7:	2092                	fld	ft1,256(sp)
    802071e9:	7332                	ld	t1,296(sp)
    802071eb:	9024                	0x9024
    802071ed:	20744733          	0x20744733
    802071f1:	5334                	lw	a3,96(a4)
    802071f3:	9006                	c.add	zero,ra
    802071f5:	2735                	addiw	a4,a4,13
    802071f7:	2056                	fld	ft0,336(sp)
    802071f9:	3236                	fld	ft4,360(sp)
    802071fb:	90e8                	0x90e8
    802071fd:	20380737          	lui	a4,0x20380
    80207201:	1c38                	addi	a4,sp,568
    80207203:	1005                	c.nop	-31
    80207205:	e738                	sd	a4,72(a4)
    80207207:	201a                	fld	ft0,384(sp)
    80207209:	fb39                	bnez	a4,8020715f <localtime+0x13e>
    8020720b:	c63a10e7          	0xc63a10e7
    8020720f:	20fc                	fld	fa5,192(s1)
    80207211:	10c9db3b          	0x10c9db3b
    80207215:	b03c                	fsd	fa5,96(s0)
    80207217:	a018                	fsd	fa4,0(s0)
    80207219:	bb3d                	j	80206f57 <initcode+0x57>
    8020721b:	8f3e10ab          	0x8f3e10ab
    8020721f:	a0fa                	fsd	ft10,64(sp)
    80207221:	108d9b3f a0dc6f40 	0xa0dc6f40108d9b3f
    80207229:	8441                	srai	s0,s0,0x10
    8020722b:	90a9                	srli	s1,s1,0x2a
    8020722d:	4f42                	lw	t5,16(sp)
    8020722f:	a0be                	fsd	fa5,64(sp)
    80207231:	908b6443          	fmadd.s	fs0,fs6,fs0,fs2,unknown
    80207235:	2f44                	fld	fs1,152(a4)
    80207237:	a0a0                	fsd	fs0,64(s1)
    80207239:	4445                	li	s0,17
    8020723b:	906d                	srli	s0,s0,0x3b
    8020723d:	f345                	bnez	a4,802071dd <localtime+0x1bc>
    8020723f:	2d4720d3          	0x2d4720d3
    80207243:	108a                	slli	ra,ra,0x22
    80207245:	20b5d347          	fmsub.s	ft6,fa1,fa1,ft4,unknown
    80207249:	0d49                	addi	s10,s10,18
    8020724b:	106c                	addi	a1,sp,44
    8020724d:	b349                	j	80206fcf <initcodesize+0x3>
    8020724f:	ed4a2097          	auipc	ra,0xed4a2
    80207253:	104e                	c.slli	zero,0x33
    80207255:	a0b39c4b          	fnmsub.s	fs8,ft7,fa1,fs4,rtz
    80207259:	d64c                	sw	a1,44(a2)
    8020725b:	906a                	c.add	zero,s10
    8020725d:	7c4d                	lui	s8,0xffff3
    8020725f:	a095                	j	802072c3 <localtime+0x2a2>
    80207261:	b64e                	fsd	fs3,296(sp)
    80207263:	904c                	0x904c
    80207265:	a0775c4f          	fnmadd.s	fs8,fa4,ft7,fs4,unknown
    80207269:	9650                	0x9650
    8020726b:	902e                	c.add	zero,a1
    8020726d:	3c51                	addiw	s8,s8,-12
    8020726f:	a059                	j	802072f5 <localtime+0x2d4>
    80207271:	7652                	ld	a2,304(sp)
    80207273:	9010                	0x9010
    80207275:	a03b1c53          	flt.s	s8,fs6,ft3
    80207279:	5554                	lw	a3,44(a0)
    8020727b:	90f2                	add	ra,ra,t3
    8020727d:	fc54                	sd	a3,184(s0)
    8020727f:	a01d                	j	802072a5 <localtime+0x284>
    80207281:	3556                	fld	fa0,368(sp)
    80207283:	90d4                	0x90d4
    80207285:	e556                	sd	s5,136(sp)
    80207287:	203a                	fld	ft0,392(sp)
    80207289:	1e58                	addi	a4,sp,820
    8020728b:	10f1                	addi	ra,ra,-4
    8020728d:	c558                	sw	a4,12(a0)
    8020728f:	201c                	fld	fa5,0(s0)
    80207291:	fe59                	bnez	a2,8020722f <localtime+0x20e>
    80207293:	a45a10d3          	0xa45a10d3
    80207297:	20fe                	fld	ft1,472(sp)
    80207299:	10b5de5b          	0x10b5de5b
    8020729d:	845c                	0x845c
    8020729f:	20e0                	fld	fs0,192(s1)
    802072a1:	be5d                	j	80206e57 <dirent_next+0x155>
    802072a3:	645e1097          	auipc	ra,0x645e1
    802072a7:	20c2                	fld	ft1,16(sp)
    802072a9:	9e5f 1079 4d60      	0x4d6010799e5f
    802072af:	a0de                	fsd	fs7,64(sp)
    802072b1:	8761                	srai	a4,a4,0x18
    802072b3:	9095                	srli	s1,s1,0x25
    802072b5:	2d62                	fld	fs10,24(sp)
    802072b7:	a0c0                	fsd	fs0,128(s1)
    802072b9:	90776763          	bltu	a4,t2,802063c7 <fileillegal+0x6d>
    802072bd:	0d64                	addi	s1,sp,668
    802072bf:	a0a2                	fsd	fs0,64(sp)
    802072c1:	4765                	li	a4,25
    802072c3:	9059                	srli	s0,s0,0x36
    802072c5:	ed65                	bnez	a0,802073bd <localtime+0x39c>
    802072c7:	a084                	fsd	fs1,0(s1)
    802072c9:	903b2767          	0x903b2767
    802072cd:	a066cd67          	0xa066cd67
    802072d1:	0769                	addi	a4,a4,26
    802072d3:	901d                	srli	s0,s0,0x27
    802072d5:	ad69                	j	8020796f <localtime+0x94e>
    802072d7:	a048                	fsd	fa0,128(s0)
    802072d9:	e66a                	sd	s10,264(sp)
    802072db:	90ff                	0x90ff
    802072dd:	2065966b          	0x2065966b
    802072e1:	d06c                	sw	a1,100(s0)
    802072e3:	101c                	addi	a5,sp,32
    802072e5:	766d                	lui	a2,0xffffb
    802072e7:	af6e2047          	fmsub.q	ft0,ft8,fs6,fs5,rdn
    802072eb:	10fe                	slli	ra,ra,0x3f
    802072ed:	2029566f          	jal	a2,8029c4ef <data_start+0x844ef>
    802072f1:	8f70                	0x8f70
    802072f3:	10e0                	addi	s0,sp,108
    802072f5:	3671                	addiw	a2,a2,-4
    802072f7:	6f72200b          	0x6f72200b
    802072fb:	10c2                	slli	ra,ra,0x30
    802072fd:	20ed1573          	csrrw	a0,0x20e,s10
    80207301:	4f74                	lw	a3,92(a4)
    80207303:	10a4                	addi	s1,sp,104
    80207305:	ff74                	sd	a3,248(a4)
    80207307:	a009                	j	80207309 <localtime+0x2e8>
    80207309:	3876                	fld	fa6,376(sp)
    8020730b:	90c0                	0x90c0
    8020730d:	de76                	sw	t4,60(sp)
    8020730f:	1878a0eb          	0x1878a0eb
    80207313:	90a2                	add	ra,ra,s0
    80207315:	be78                	fsd	fa4,248(a2)
    80207317:	a0cd                	j	802073f9 <localtime+0x3d8>
    80207319:	f879                	bnez	s0,802072ef <localtime+0x2ce>
    8020731b:	9084                	0x9084
    8020731d:	9e7a                	add	t3,t3,t5
    8020731f:	d87ba0af          	0xd87ba0af
    80207323:	9066                	c.add	zero,s9
    80207325:	7e7c                	ld	a5,248(a2)
    80207327:	a091                	j	8020736b <localtime+0x34a>
    80207329:	b87d                	j	80206be7 <filesend+0x163>
    8020732b:	9048                	0x9048
    8020732d:	5e7e                	lw	t3,252(sp)
    8020732f:	987fa073          	csrs	0x987,t6
    80207333:	902a                	c.add	zero,a0
    80207335:	0102                	c.slli64	sp
    80207337:	0102                	c.slli64	sp
    80207339:	0302                	c.slli64	t1
    8020733b:	0204                	addi	s1,sp,256
    8020733d:	0201                	addi	tp,tp,0
    8020733f:	0201                	addi	tp,tp,0
    80207341:	0201                	addi	tp,tp,0
    80207343:	0201                	addi	tp,tp,0
    80207345:	0201                	addi	tp,tp,0
    80207347:	0201                	addi	tp,tp,0
    80207349:	0201                	addi	tp,tp,0
    8020734b:	0201                	addi	tp,tp,0
    8020734d:	0201                	addi	tp,tp,0
    8020734f:	0201                	addi	tp,tp,0
    80207351:	0201                	addi	tp,tp,0
    80207353:	0201                	addi	tp,tp,0
    80207355:	0201                	addi	tp,tp,0
    80207357:	0201                	addi	tp,tp,0
    80207359:	0201                	addi	tp,tp,0
    8020735b:	0201                	addi	tp,tp,0
    8020735d:	0201                	addi	tp,tp,0
    8020735f:	0201                	addi	tp,tp,0
    80207361:	0201                	addi	tp,tp,0
    80207363:	0201                	addi	tp,tp,0
    80207365:	0201                	addi	tp,tp,0
    80207367:	0201                	addi	tp,tp,0
    80207369:	0201                	addi	tp,tp,0
    8020736b:	0201                	addi	tp,tp,0
    8020736d:	0201                	addi	tp,tp,0
    8020736f:	0201                	addi	tp,tp,0
    80207371:	0201                	addi	tp,tp,0
    80207373:	0201                	addi	tp,tp,0
    80207375:	0201                	addi	tp,tp,0
    80207377:	0201                	addi	tp,tp,0
    80207379:	0201                	addi	tp,tp,0
    8020737b:	0201                	addi	tp,tp,0
    8020737d:	0201                	addi	tp,tp,0
    8020737f:	0201                	addi	tp,tp,0
    80207381:	0201                	addi	tp,tp,0
    80207383:	0201                	addi	tp,tp,0
    80207385:	0201                	addi	tp,tp,0
    80207387:	0201                	addi	tp,tp,0
    80207389:	0201                	addi	tp,tp,0
    8020738b:	0201                	addi	tp,tp,0
    8020738d:	0201                	addi	tp,tp,0
    8020738f:	0201                	addi	tp,tp,0
    80207391:	0201                	addi	tp,tp,0
    80207393:	0201                	addi	tp,tp,0
    80207395:	0201                	addi	tp,tp,0
    80207397:	0201                	addi	tp,tp,0
    80207399:	0201                	addi	tp,tp,0
    8020739b:	0201                	addi	tp,tp,0
    8020739d:	0201                	addi	tp,tp,0
    8020739f:	0201                	addi	tp,tp,0
    802073a1:	0201                	addi	tp,tp,0
    802073a3:	0201                	addi	tp,tp,0
    802073a5:	0201                	addi	tp,tp,0
    802073a7:	0201                	addi	tp,tp,0
    802073a9:	0201                	addi	tp,tp,0
    802073ab:	0201                	addi	tp,tp,0
    802073ad:	0201                	addi	tp,tp,0
    802073af:	0201                	addi	tp,tp,0
    802073b1:	0201                	addi	tp,tp,0
    802073b3:	0201                	addi	tp,tp,0
    802073b5:	0201                	addi	tp,tp,0
    802073b7:	0201                	addi	tp,tp,0
    802073b9:	0201                	addi	tp,tp,0
    802073bb:	0201                	addi	tp,tp,0
    802073bd:	0201                	addi	tp,tp,0
    802073bf:	0201                	addi	tp,tp,0
    802073c1:	0201                	addi	tp,tp,0
    802073c3:	0201                	addi	tp,tp,0
    802073c5:	0201                	addi	tp,tp,0
    802073c7:	0201                	addi	tp,tp,0
    802073c9:	0201                	addi	tp,tp,0
    802073cb:	0201                	addi	tp,tp,0
    802073cd:	0201                	addi	tp,tp,0
    802073cf:	0201                	addi	tp,tp,0
    802073d1:	0201                	addi	tp,tp,0
    802073d3:	0201                	addi	tp,tp,0
    802073d5:	0201                	addi	tp,tp,0
    802073d7:	0201                	addi	tp,tp,0
    802073d9:	0201                	addi	tp,tp,0
    802073db:	0201                	addi	tp,tp,0
    802073dd:	0201                	addi	tp,tp,0
    802073df:	0201                	addi	tp,tp,0
    802073e1:	0201                	addi	tp,tp,0
    802073e3:	0201                	addi	tp,tp,0
    802073e5:	0201                	addi	tp,tp,0
    802073e7:	0201                	addi	tp,tp,0
    802073e9:	0201                	addi	tp,tp,0
    802073eb:	0201                	addi	tp,tp,0
    802073ed:	0201                	addi	tp,tp,0
    802073ef:	ffff                	0xffff
    802073f1:	2691                	addiw	a3,a3,4
    802073f3:	0000                	unimp
    802073f5:	ffff                	0xffff
    802073f7:	909d                	srli	s1,s1,0x27
    802073f9:	0401                	addi	s0,s0,0
    802073fb:	ffff                	0xffff
    802073fd:	0800808f          	0x800808f
    80207401:	ffff                	0xffff
    80207403:	909d                	srli	s1,s1,0x27
    80207405:	0c01                	addi	s8,s8,0
    80207407:	ffff                	0xffff
    80207409:	909d                	srli	s1,s1,0x27
    8020740b:	1001                	c.nop	-32
    8020740d:	4d4c                	lw	a1,28(a0)
    8020740f:	0054                	addi	a3,sp,4
    80207411:	4450                	lw	a2,12(s0)
    80207413:	0054                	addi	a3,sp,4
    80207415:	5350                	lw	a2,36(a4)
    80207417:	0054                	addi	a3,sp,4
    80207419:	5750                	lw	a2,44(a4)
    8020741b:	0054                	addi	a3,sp,4
    8020741d:	5050                	lw	a2,36(s0)
    8020741f:	0054                	addi	a3,sp,4
    80207421:	0000                	unimp
    80207423:	0000                	unimp
    80207425:	0001                	nop
    80207427:	0000                	unimp
    80207429:	0100                	addi	s0,sp,128
    8020742b:	5a54                	lw	a3,52(a2)
    8020742d:	6669                	lui	a2,0x1a
    8020742f:	0032                	c.slli	zero,0xc
	...
    80207441:	0500                	addi	s0,sp,640
    80207443:	0000                	unimp
    80207445:	0500                	addi	s0,sp,640
    80207447:	0000                	unimp
    80207449:	0000                	unimp
    8020744b:	0000                	unimp
    8020744d:	ba00                	fsd	fs0,48(a2)
    8020744f:	0000                	unimp
    80207451:	0500                	addi	s0,sp,640
    80207453:	0000                	unimp
    80207455:	1400                	addi	s0,sp,544
    80207457:	ffff                	0xffff
    80207459:	ffff                	0xffff
    8020745b:	045e                	slli	s0,s0,0x17
    8020745d:	c01a                	sw	t1,0(sp)
    8020745f:	ffff                	0xffff
    80207461:	ffff                	0xffff
    80207463:	a69e                	fsd	ft7,328(sp)
    80207465:	a048                	fsd	fa0,128(s0)
    80207467:	ffff                	0xffff
    80207469:	ffff                	0xffff
    8020746b:	bb9f 9015 ffff      	0xffff9015bb9f
    80207471:	ffff                	0xffff
    80207473:	86a0                	0x86a0
    80207475:	a02a                	fsd	fa0,0(sp)
    80207477:	ffff                	0xffff
    80207479:	ffff                	0xffff
    8020747b:	9aa1                	andi	a3,a3,-24
    8020747d:	ffff90f7          	0xffff90f7
    80207481:	ffff                	0xffff
    80207483:	a01a89cb          	fnmsub.s	fs3,fs5,ft1,fs4,rne
    80207487:	ffff                	0xffff
    80207489:	ffff                	0xffff
    8020748b:	23d2                	fld	ft7,272(sp)
    8020748d:	70f4                	ld	a3,224(s1)
    8020748f:	ffff                	0xffff
    80207491:	ffff                	0xffff
    80207493:	61d2                	ld	gp,272(sp)
    80207495:	1026                	c.slli	zero,0x29
    80207497:	ffff                	0xffff
    80207499:	ffff                	0xffff
    8020749b:	fed6                	sd	s5,376(sp)
    8020749d:	5c74                	lw	a3,124(s0)
    8020749f:	ffff                	0xffff
    802074a1:	ffff                	0xffff
    802074a3:	80d8                	0x80d8
    802074a5:	90ad                	srli	s1,s1,0x2b
    802074a7:	ffff                	0xffff
    802074a9:	ffff                	0xffff
    802074ab:	feda                	sd	s6,376(sp)
    802074ad:	ffff90c3          	fmadd.q	ft1,ft11,ft11,ft11,rtz
    802074b1:	ffff                	0xffff
    802074b3:	1090c0db          	0x1090c0db
    802074b7:	ffff                	0xffff
    802074b9:	ffff                	0xffff
    802074bb:	dedc                	sw	a5,60(a3)
    802074bd:	90a5                	srli	s1,s1,0x29
    802074bf:	ffff                	0xffff
    802074c1:	ffff                	0xffff
    802074c3:	a9dd                	j	802079b9 <localtime+0x998>
    802074c5:	90ac                	0x90ac
    802074c7:	ffff                	0xffff
    802074c9:	ffff                	0xffff
    802074cb:	bede                	fsd	fs7,376(sp)
    802074cd:	ffff9087          	0xffff9087
    802074d1:	ffff                	0xffff
    802074d3:	89df 908e ffff      	0xffff908e89df
    802074d9:	ffff                	0xffff
    802074db:	9ee0                	0x9ee0
    802074dd:	9069                	srli	s0,s0,0x3a
    802074df:	ffff                	0xffff
    802074e1:	ffff                	0xffff
    802074e3:	69e1                	lui	s3,0x18
    802074e5:	9070                	0x9070
    802074e7:	ffff                	0xffff
    802074e9:	ffff                	0xffff
    802074eb:	7ee2                	ld	t4,56(sp)
    802074ed:	ffff904b          	fnmsub.q	ft0,ft11,ft11,ft11,rtz
    802074f1:	ffff                	0xffff
    802074f3:	905249e3          	blt	tp,t0,80206e05 <dirent_next+0x103>
    802074f7:	ffff                	0xffff
    802074f9:	ffff                	0xffff
    802074fb:	5ee4                	lw	s1,124(a3)
    802074fd:	902d                	srli	s0,s0,0x2b
    802074ff:	ffff                	0xffff
    80207501:	ffff                	0xffff
    80207503:	29e5                	addiw	s3,s3,25
    80207505:	9034                	0x9034
    80207507:	ffff                	0xffff
    80207509:	ffff                	0xffff
    8020750b:	47e6                	lw	a5,88(sp)
    8020750d:	104a                	c.slli	zero,0x32
    8020750f:	ffff                	0xffff
    80207511:	ffff                	0xffff
    80207513:	105112e7          	0x105112e7
    80207517:	ffff                	0xffff
    80207519:	ffff                	0xffff
    8020751b:	27e8                	fld	fa0,200(a5)
    8020751d:	102c                	addi	a1,sp,40
    8020751f:	ffff                	0xffff
    80207521:	ffff                	0xffff
    80207523:	f2e8                	sd	a0,224(a3)
    80207525:	ffff1033          	0xffff1033
    80207529:	ffff                	0xffff
    8020752b:	07ea                	slli	a5,a5,0x1a
    8020752d:	100e                	c.slli	zero,0x23
    8020752f:	ffff                	0xffff
    80207531:	ffff                	0xffff
    80207533:	d2ea                	sw	s10,100(sp)
    80207535:	1015                	c.nop	-27
    80207537:	ffff                	0xffff
    80207539:	ffff                	0xffff
    8020753b:	10f0e6eb          	0x10f0e6eb
    8020753f:	ffff                	0xffff
    80207541:	ffff                	0xffff
    80207543:	b1ec                	fsd	fa1,224(a1)
    80207545:	ffff10f7          	0xffff10f7
    80207549:	ffff                	0xffff
    8020754b:	c6ed                	beqz	a3,80207635 <localtime+0x614>
    8020754d:	10d2                	slli	ra,ra,0x34
    8020754f:	ffff                	0xffff
    80207551:	ffff                	0xffff
    80207553:	91ee                	add	gp,gp,s11
    80207555:	10d9                	addi	ra,ra,-10
    80207557:	ffff                	0xffff
    80207559:	ffff                	0xffff
    8020755b:	90eeafef          	jal	t6,801f1669 <_entry-0xe997>
    8020755f:	ffff                	0xffff
    80207561:	ffff                	0xffff
    80207563:	71f0                	ld	a2,224(a1)
    80207565:	ffff10bb          	0xffff10bb
    80207569:	ffff                	0xffff
    8020756b:	8ff1                	and	a5,a5,a2
    8020756d:	90d0                	0x90d0
    8020756f:	ffff                	0xffff
    80207571:	ffff                	0xffff
    80207573:	7ff2                	ld	t6,312(sp)
    80207575:	90c1                	srli	s1,s1,0x30
    80207577:	ffff                	0xffff
    80207579:	ffff                	0xffff
    8020757b:	90b26ff3          	csrrsi	t6,0x90b,4
    8020757f:	ffff                	0xffff
    80207581:	ffff                	0xffff
    80207583:	5ff4                	lw	a3,124(a5)
    80207585:	ffff90a3          	sh	t6,-31(t6)
    80207589:	ffff                	0xffff
    8020758b:	4ff5                	li	t6,29
    8020758d:	9094                	0x9094
    8020758f:	ffff                	0xffff
    80207591:	ffff                	0xffff
    80207593:	3ff6                	fld	ft11,376(sp)
    80207595:	9085                	srli	s1,s1,0x21
    80207597:	ffff                	0xffff
    80207599:	ffff                	0xffff
    8020759b:	90762ff7          	0x90762ff7
    8020759f:	ffff                	0xffff
    802075a1:	ffff                	0xffff
    802075a3:	28f8                	fld	fa4,208(s1)
    802075a5:	10a2                	slli	ra,ra,0x28
    802075a7:	ffff                	0xffff
    802075a9:	ffff                	0xffff
    802075ab:	0ff9                	addi	t6,t6,30
    802075ad:	9058                	0x9058
    802075af:	ffff                	0xffff
    802075b1:	ffff                	0xffff
    802075b3:	08fa                	slli	a7,a7,0x1e
    802075b5:	1084                	addi	s1,sp,96
    802075b7:	ffff                	0xffff
    802075b9:	ffff                	0xffff
    802075bb:	f8fa                	sd	t5,112(sp)
    802075bd:	ffff2083          	lw	ra,-1(t5)
    802075c1:	ffff                	0xffff
    802075c3:	1066e8fb          	0x1066e8fb
    802075c7:	ffff                	0xffff
    802075c9:	ffff                	0xffff
    802075cb:	d8fc                	sw	a5,116(s1)
    802075cd:	2065                	0x2065
    802075cf:	ffff                	0xffff
    802075d1:	ffff                	0xffff
    802075d3:	c8fd                	beqz	s1,802076c9 <localtime+0x6a8>
    802075d5:	1048                	addi	a0,sp,36
    802075d7:	ffff                	0xffff
    802075d9:	ffff                	0xffff
    802075db:	b8fe                	fsd	ft11,112(sp)
    802075dd:	ffff2047          	fmsub.q	ft0,ft10,ft11,ft11,rdn
    802075e1:	ffff                	0xffff
    802075e3:	a8ff                	0xa8ff
    802075e5:	102a                	c.slli	zero,0x2a
    802075e7:	0000                	unimp
    802075e9:	0000                	unimp
    802075eb:	9800                	0x9800
    802075ed:	2029                	0x2029
    802075ef:	0000                	unimp
    802075f1:	0000                	unimp
    802075f3:	8801                	andi	s0,s0,0
    802075f5:	100c                	addi	a1,sp,32
    802075f7:	0000                	unimp
    802075f9:	0000                	unimp
    802075fb:	7802                	ld	a6,32(sp)
    802075fd:	0000200b          	0x200b
    80207601:	0000                	unimp
    80207603:	90287103          	0x90287103
    80207607:	0000                	unimp
    80207609:	0000                	unimp
    8020760b:	6104                	ld	s1,0(a0)
    8020760d:	0000a027          	fsw	ft0,0(ra) # e47e82a3 <kernel_end+0x5f4792a3>
    80207611:	0000                	unimp
    80207613:	5105                	li	sp,-31
    80207615:	900a                	c.add	zero,sp
    80207617:	0000                	unimp
    80207619:	0000                	unimp
    8020761b:	4106                	lw	sp,64(sp)
    8020761d:	a009                	j	8020761f <localtime+0x5fe>
    8020761f:	0000                	unimp
    80207621:	0000                	unimp
    80207623:	90ec3007          	fld	ft0,-1778(s8) # ffffffffffff290e <kernel_end+0xffffffff7ac8390e>
    80207627:	0000                	unimp
    80207629:	0000                	unimp
    8020762b:	a0438d07          	0xa0438d07
    8020762f:	0000                	unimp
    80207631:	0000                	unimp
    80207633:	1009                	c.nop	-30
    80207635:	90ce                	add	ra,ra,s3
    80207637:	0000                	unimp
    80207639:	0000                	unimp
    8020763b:	ad09                	j	80207c4d <meminfo+0xe0>
    8020763d:	000020bf f00a0000 	0xf00a0000000020bf
    80207645:	90b0                	0x90b0
    80207647:	0000                	unimp
    80207649:	0000                	unimp
    8020764b:	a0afe00b          	0xa0afe00b
    8020764f:	0000                	unimp
    80207651:	0000                	unimp
    80207653:	d90c                	sw	a1,48(a0)
    80207655:	10cd                	addi	ra,ra,-13
    80207657:	0000                	unimp
    80207659:	0000                	unimp
    8020765b:	c00d                	beqz	s0,8020767d <localtime+0x65c>
    8020765d:	a091                	j	802076a1 <localtime+0x680>
    8020765f:	0000                	unimp
    80207661:	0000                	unimp
    80207663:	b90e                	fsd	ft3,176(sp)
    80207665:	000010af          	0x10af
    80207669:	0000                	unimp
    8020766b:	20aea90f          	0x20aea90f
    8020766f:	0000                	unimp
    80207671:	0000                	unimp
    80207673:	9910                	0x9910
    80207675:	1091                	addi	ra,ra,-28
    80207677:	0000                	unimp
    80207679:	0000                	unimp
    8020767b:	8911                	andi	a0,a0,4
    8020767d:	2090                	fld	fa2,0(s1)
    8020767f:	0000                	unimp
    80207681:	0000                	unimp
    80207683:	7912                	ld	s2,288(sp)
    80207685:	00001073          	csrw	ustatus,zero
    80207689:	0000                	unimp
    8020768b:	20726913          	ori	s2,tp,519
    8020768f:	0000                	unimp
    80207691:	0000                	unimp
    80207693:	5914                	lw	a3,48(a0)
    80207695:	1055                	c.nop	-11
    80207697:	0000                	unimp
    80207699:	0000                	unimp
    8020769b:	4915                	li	s2,5
    8020769d:	2054                	fld	fa3,128(s0)
    8020769f:	0000                	unimp
    802076a1:	0000                	unimp
    802076a3:	3916                	fld	fs2,352(sp)
    802076a5:	00001037          	lui	zero,0x1
    802076a9:	0000                	unimp
    802076ab:	20362917          	auipc	s2,0x20362
    802076af:	0000                	unimp
    802076b1:	0000                	unimp
    802076b3:	2218                	fld	fa4,0(a2)
    802076b5:	00009053          	fadd.s	ft0,ft1,ft0,rtz
    802076b9:	0000                	unimp
    802076bb:	0919                	addi	s2,s2,6
    802076bd:	2018                	fld	fa4,0(s0)
    802076bf:	0000                	unimp
    802076c1:	0000                	unimp
    802076c3:	021a                	slli	tp,tp,0x6
    802076c5:	9035                	srli	s0,s0,0x2d
    802076c7:	0000                	unimp
    802076c9:	0000                	unimp
    802076cb:	f21a                	sd	t1,288(sp)
    802076cd:	a034                	fsd	fa3,64(s0)
    802076cf:	0000                	unimp
    802076d1:	0000                	unimp
    802076d3:	9017e21b          	0x9017e21b
    802076d7:	0000                	unimp
    802076d9:	0000                	unimp
    802076db:	d21c                	sw	a5,32(a2)
    802076dd:	a016                	fsd	ft5,0(sp)
    802076df:	0000                	unimp
    802076e1:	0000                	unimp
    802076e3:	c11d                	beqz	a0,80207709 <localtime+0x6e8>
    802076e5:	90f9                	srli	s1,s1,0x3e
    802076e7:	0000                	unimp
    802076e9:	0000                	unimp
    802076eb:	b11e                	fsd	ft7,160(sp)
    802076ed:	a0f8                	fsd	fa4,192(s1)
    802076ef:	0000                	unimp
    802076f1:	0000                	unimp
    802076f3:	a11f 90db 0000      	0x90dba11f
    802076f9:	0000                	unimp
    802076fb:	7620                	ld	s0,104(a2)
    802076fd:	0000202b          	0x202b
    80207701:	0000                	unimp
    80207703:	8121                	srli	a0,a0,0x8
    80207705:	90bd                	srli	s1,s1,0x2f
    80207707:	0000                	unimp
    80207709:	0000                	unimp
    8020770b:	5622                	lw	a2,40(sp)
    8020770d:	200d                	0x200d
    8020770f:	0000                	unimp
    80207711:	0000                	unimp
    80207713:	10da6a23          	0x10da6a23
    80207717:	0000                	unimp
    80207719:	0000                	unimp
    8020771b:	3524                	fld	fs1,104(a0)
    8020771d:	000020ef          	jal	ra,8020971d <__debug_warn+0xad>
    80207721:	0000                	unimp
    80207723:	4a25                	li	s4,9
    80207725:	10bc                	addi	a5,sp,104
    80207727:	0000                	unimp
    80207729:	0000                	unimp
    8020772b:	1526                	slli	a0,a0,0x29
    8020772d:	20d1                	addiw	ra,ra,20
    8020772f:	0000                	unimp
    80207731:	0000                	unimp
    80207733:	109e2a27          	fsw	fs1,276(t3)
    80207737:	0000                	unimp
    80207739:	0000                	unimp
    8020773b:	a0edfe27          	0xa0edfe27
    8020773f:	0000                	unimp
    80207741:	0000                	unimp
    80207743:	0a29                	addi	s4,s4,10
    80207745:	1080                	addi	s0,sp,96
    80207747:	0000                	unimp
    80207749:	0000                	unimp
    8020774b:	de29                	beqz	a2,802076a5 <localtime+0x684>
    8020774d:	0000a0cf          	fnmadd.s	ft1,ft1,ft0,ft0,rdn
    80207751:	0000                	unimp
    80207753:	ea2a                	sd	a0,272(sp)
    80207755:	1062                	c.slli	zero,0x38
    80207757:	0000                	unimp
    80207759:	0000                	unimp
    8020775b:	a0b1be2b          	0xa0b1be2b
    8020775f:	0000                	unimp
    80207761:	0000                	unimp
    80207763:	d32c                	sw	a1,96(a4)
    80207765:	907e                	c.add	zero,t6
    80207767:	0000                	unimp
    80207769:	0000                	unimp
    8020776b:	9e2d                	addw	a2,a2,a1
    8020776d:	0000a093          	slti	ra,ra,0
    80207771:	0000                	unimp
    80207773:	b32e                	fsd	fa1,416(sp)
    80207775:	9060                	0x9060
    80207777:	0000                	unimp
    80207779:	0000                	unimp
    8020777b:	a0757e2f          	0xa0757e2f
    8020777f:	0000                	unimp
    80207781:	0000                	unimp
    80207783:	9330                	0x9330
    80207785:	9042                	c.add	zero,a6
    80207787:	0000                	unimp
    80207789:	0000                	unimp
    8020778b:	6731                	lui	a4,0xc
    8020778d:	2092                	fld	ft1,256(sp)
    8020778f:	0000                	unimp
    80207791:	0000                	unimp
    80207793:	7332                	ld	t1,296(sp)
    80207795:	9024                	0x9024
    80207797:	0000                	unimp
    80207799:	0000                	unimp
    8020779b:	20744733          	0x20744733
    8020779f:	0000                	unimp
    802077a1:	0000                	unimp
    802077a3:	5334                	lw	a3,96(a4)
    802077a5:	9006                	c.add	zero,ra
    802077a7:	0000                	unimp
    802077a9:	0000                	unimp
    802077ab:	2735                	addiw	a4,a4,13
    802077ad:	2056                	fld	ft0,336(sp)
    802077af:	0000                	unimp
    802077b1:	0000                	unimp
    802077b3:	3236                	fld	ft4,360(sp)
    802077b5:	90e8                	0x90e8
    802077b7:	0000                	unimp
    802077b9:	0000                	unimp
    802077bb:	20380737          	lui	a4,0x20380
    802077bf:	0000                	unimp
    802077c1:	0000                	unimp
    802077c3:	1c38                	addi	a4,sp,568
    802077c5:	1005                	c.nop	-31
    802077c7:	0000                	unimp
    802077c9:	0000                	unimp
    802077cb:	e738                	sd	a4,72(a4)
    802077cd:	201a                	fld	ft0,384(sp)
    802077cf:	0000                	unimp
    802077d1:	0000                	unimp
    802077d3:	fb39                	bnez	a4,80207729 <localtime+0x708>
    802077d5:	000010e7          	0x10e7
    802077d9:	0000                	unimp
    802077db:	c63a                	sw	a4,12(sp)
    802077dd:	20fc                	fld	fa5,192(s1)
    802077df:	0000                	unimp
    802077e1:	0000                	unimp
    802077e3:	10c9db3b          	0x10c9db3b
    802077e7:	0000                	unimp
    802077e9:	0000                	unimp
    802077eb:	b03c                	fsd	fa5,96(s0)
    802077ed:	a018                	fsd	fa4,0(s0)
    802077ef:	0000                	unimp
    802077f1:	0000                	unimp
    802077f3:	bb3d                	j	80207531 <localtime+0x510>
    802077f5:	000010ab          	0x10ab
    802077f9:	0000                	unimp
    802077fb:	8f3e                	mv	t5,a5
    802077fd:	a0fa                	fsd	ft10,64(sp)
    802077ff:	0000                	unimp
    80207801:	0000                	unimp
    80207803:	108d9b3f 00000000 	0x108d9b3f
    8020780b:	6f40                	ld	s0,152(a4)
    8020780d:	a0dc                	fsd	fa5,128(s1)
    8020780f:	0000                	unimp
    80207811:	0000                	unimp
    80207813:	8441                	srai	s0,s0,0x10
    80207815:	90a9                	srli	s1,s1,0x2a
    80207817:	0000                	unimp
    80207819:	0000                	unimp
    8020781b:	4f42                	lw	t5,16(sp)
    8020781d:	a0be                	fsd	fa5,64(sp)
    8020781f:	0000                	unimp
    80207821:	0000                	unimp
    80207823:	908b6443          	fmadd.s	fs0,fs6,fs0,fs2,unknown
    80207827:	0000                	unimp
    80207829:	0000                	unimp
    8020782b:	2f44                	fld	fs1,152(a4)
    8020782d:	a0a0                	fsd	fs0,64(s1)
    8020782f:	0000                	unimp
    80207831:	0000                	unimp
    80207833:	4445                	li	s0,17
    80207835:	906d                	srli	s0,s0,0x3b
    80207837:	0000                	unimp
    80207839:	0000                	unimp
    8020783b:	f345                	bnez	a4,802077db <localtime+0x7ba>
    8020783d:	000020d3          	fadd.s	ft1,ft0,ft0,rdn
    80207841:	0000                	unimp
    80207843:	108a2d47          	fmsub.s	fs10,fs4,fs0,ft2,rdn
    80207847:	0000                	unimp
    80207849:	0000                	unimp
    8020784b:	20b5d347          	fmsub.s	ft6,fa1,fa1,ft4,unknown
    8020784f:	0000                	unimp
    80207851:	0000                	unimp
    80207853:	0d49                	addi	s10,s10,18
    80207855:	106c                	addi	a1,sp,44
    80207857:	0000                	unimp
    80207859:	0000                	unimp
    8020785b:	b349                	j	802075dd <localtime+0x5bc>
    8020785d:	00002097          	auipc	ra,0x2
    80207861:	0000                	unimp
    80207863:	ed4a                	sd	s2,152(sp)
    80207865:	104e                	c.slli	zero,0x33
    80207867:	0000                	unimp
    80207869:	0000                	unimp
    8020786b:	a0b39c4b          	fnmsub.s	fs8,ft7,fa1,fs4,rtz
    8020786f:	0000                	unimp
    80207871:	0000                	unimp
    80207873:	d64c                	sw	a1,44(a2)
    80207875:	906a                	c.add	zero,s10
    80207877:	0000                	unimp
    80207879:	0000                	unimp
    8020787b:	7c4d                	lui	s8,0xffff3
    8020787d:	a095                	j	802078e1 <localtime+0x8c0>
    8020787f:	0000                	unimp
    80207881:	0000                	unimp
    80207883:	b64e                	fsd	fs3,296(sp)
    80207885:	904c                	0x904c
    80207887:	0000                	unimp
    80207889:	0000                	unimp
    8020788b:	a0775c4f          	fnmadd.s	fs8,fa4,ft7,fs4,unknown
    8020788f:	0000                	unimp
    80207891:	0000                	unimp
    80207893:	9650                	0x9650
    80207895:	902e                	c.add	zero,a1
    80207897:	0000                	unimp
    80207899:	0000                	unimp
    8020789b:	3c51                	addiw	s8,s8,-12
    8020789d:	a059                	j	80207923 <localtime+0x902>
    8020789f:	0000                	unimp
    802078a1:	0000                	unimp
    802078a3:	7652                	ld	a2,304(sp)
    802078a5:	9010                	0x9010
    802078a7:	0000                	unimp
    802078a9:	0000                	unimp
    802078ab:	a03b1c53          	flt.s	s8,fs6,ft3
    802078af:	0000                	unimp
    802078b1:	0000                	unimp
    802078b3:	5554                	lw	a3,44(a0)
    802078b5:	90f2                	add	ra,ra,t3
    802078b7:	0000                	unimp
    802078b9:	0000                	unimp
    802078bb:	fc54                	sd	a3,184(s0)
    802078bd:	a01d                	j	802078e3 <localtime+0x8c2>
    802078bf:	0000                	unimp
    802078c1:	0000                	unimp
    802078c3:	3556                	fld	fa0,368(sp)
    802078c5:	90d4                	0x90d4
    802078c7:	0000                	unimp
    802078c9:	0000                	unimp
    802078cb:	e556                	sd	s5,136(sp)
    802078cd:	203a                	fld	ft0,392(sp)
    802078cf:	0000                	unimp
    802078d1:	0000                	unimp
    802078d3:	1e58                	addi	a4,sp,820
    802078d5:	10f1                	addi	ra,ra,-4
    802078d7:	0000                	unimp
    802078d9:	0000                	unimp
    802078db:	c558                	sw	a4,12(a0)
    802078dd:	201c                	fld	fa5,0(s0)
    802078df:	0000                	unimp
    802078e1:	0000                	unimp
    802078e3:	fe59                	bnez	a2,80207881 <localtime+0x860>
    802078e5:	000010d3          	fadd.s	ft1,ft0,ft0,rtz
    802078e9:	0000                	unimp
    802078eb:	a45a                	fsd	fs6,8(sp)
    802078ed:	20fe                	fld	ft1,472(sp)
    802078ef:	0000                	unimp
    802078f1:	0000                	unimp
    802078f3:	10b5de5b          	0x10b5de5b
    802078f7:	0000                	unimp
    802078f9:	0000                	unimp
    802078fb:	845c                	0x845c
    802078fd:	20e0                	fld	fs0,192(s1)
    802078ff:	0000                	unimp
    80207901:	0000                	unimp
    80207903:	be5d                	j	802074b9 <localtime+0x498>
    80207905:	00001097          	auipc	ra,0x1
    80207909:	0000                	unimp
    8020790b:	645e                	ld	s0,464(sp)
    8020790d:	20c2                	fld	ft1,16(sp)
    8020790f:	0000                	unimp
    80207911:	0000                	unimp
    80207913:	9e5f 1079 0000      	0x10799e5f
    80207919:	0000                	unimp
    8020791b:	4d60                	lw	s0,92(a0)
    8020791d:	a0de                	fsd	fs7,64(sp)
    8020791f:	0000                	unimp
    80207921:	0000                	unimp
    80207923:	8761                	srai	a4,a4,0x18
    80207925:	9095                	srli	s1,s1,0x25
    80207927:	0000                	unimp
    80207929:	0000                	unimp
    8020792b:	2d62                	fld	fs10,24(sp)
    8020792d:	a0c0                	fsd	fs0,128(s1)
    8020792f:	0000                	unimp
    80207931:	0000                	unimp
    80207933:	90776763          	bltu	a4,t2,80206a41 <filewrite+0x109>
    80207937:	0000                	unimp
    80207939:	0000                	unimp
    8020793b:	0d64                	addi	s1,sp,668
    8020793d:	a0a2                	fsd	fs0,64(sp)
    8020793f:	0000                	unimp
    80207941:	0000                	unimp
    80207943:	4765                	li	a4,25
    80207945:	9059                	srli	s0,s0,0x36
    80207947:	0000                	unimp
    80207949:	0000                	unimp
    8020794b:	ed65                	bnez	a0,80207a43 <localtime+0xa22>
    8020794d:	a084                	fsd	fs1,0(s1)
    8020794f:	0000                	unimp
    80207951:	0000                	unimp
    80207953:	903b2767          	0x903b2767
    80207957:	0000                	unimp
    80207959:	0000                	unimp
    8020795b:	a066cd67          	0xa066cd67
    8020795f:	0000                	unimp
    80207961:	0000                	unimp
    80207963:	0769                	addi	a4,a4,26
    80207965:	901d                	srli	s0,s0,0x27
    80207967:	0000                	unimp
    80207969:	0000                	unimp
    8020796b:	ad69                	j	80208005 <meminfo+0x498>
    8020796d:	a048                	fsd	fa0,128(s0)
    8020796f:	0000                	unimp
    80207971:	0000                	unimp
    80207973:	e66a                	sd	s10,264(sp)
    80207975:	90ff                	0x90ff
    80207977:	0000                	unimp
    80207979:	0000                	unimp
    8020797b:	2065966b          	0x2065966b
    8020797f:	0000                	unimp
    80207981:	0000                	unimp
    80207983:	d06c                	sw	a1,100(s0)
    80207985:	101c                	addi	a5,sp,32
    80207987:	0000                	unimp
    80207989:	0000                	unimp
    8020798b:	766d                	lui	a2,0xffffb
    8020798d:	00002047          	fmsub.s	ft0,ft0,ft0,ft0,rdn
    80207991:	0000                	unimp
    80207993:	af6e                	fsd	fs11,408(sp)
    80207995:	10fe                	slli	ra,ra,0x3f
    80207997:	0000                	unimp
    80207999:	0000                	unimp
    8020799b:	2029566f          	jal	a2,8029cb9d <data_start+0x84b9d>
    8020799f:	0000                	unimp
    802079a1:	0000                	unimp
    802079a3:	8f70                	0x8f70
    802079a5:	10e0                	addi	s0,sp,108
    802079a7:	0000                	unimp
    802079a9:	0000                	unimp
    802079ab:	3671                	addiw	a2,a2,-4
    802079ad:	0000200b          	0x200b
    802079b1:	0000                	unimp
    802079b3:	6f72                	ld	t5,280(sp)
    802079b5:	10c2                	slli	ra,ra,0x30
    802079b7:	0000                	unimp
    802079b9:	0000                	unimp
    802079bb:	20ed1573          	csrrw	a0,0x20e,s10
    802079bf:	0000                	unimp
    802079c1:	0000                	unimp
    802079c3:	4f74                	lw	a3,92(a4)
    802079c5:	10a4                	addi	s1,sp,104
    802079c7:	0000                	unimp
    802079c9:	0000                	unimp
    802079cb:	ff74                	sd	a3,248(a4)
    802079cd:	a009                	j	802079cf <localtime+0x9ae>
    802079cf:	0000                	unimp
    802079d1:	0000                	unimp
    802079d3:	3876                	fld	fa6,376(sp)
    802079d5:	90c0                	0x90c0
    802079d7:	0000                	unimp
    802079d9:	0000                	unimp
    802079db:	de76                	sw	t4,60(sp)
    802079dd:	0000a0eb          	0xa0eb
    802079e1:	0000                	unimp
    802079e3:	1878                	addi	a4,sp,60
    802079e5:	90a2                	add	ra,ra,s0
    802079e7:	0000                	unimp
    802079e9:	0000                	unimp
    802079eb:	be78                	fsd	fa4,248(a2)
    802079ed:	a0cd                	j	80207acf <localtime+0xaae>
    802079ef:	0000                	unimp
    802079f1:	0000                	unimp
    802079f3:	f879                	bnez	s0,802079c9 <localtime+0x9a8>
    802079f5:	9084                	0x9084
    802079f7:	0000                	unimp
    802079f9:	0000                	unimp
    802079fb:	9e7a                	add	t3,t3,t5
    802079fd:	0000a0af          	amoadd.w	ra,zero,(ra)
    80207a01:	0000                	unimp
    80207a03:	9066d87b          	0x9066d87b
    80207a07:	0000                	unimp
    80207a09:	0000                	unimp
    80207a0b:	7e7c                	ld	a5,248(a2)
    80207a0d:	a091                	j	80207a51 <localtime+0xa30>
    80207a0f:	0000                	unimp
    80207a11:	0000                	unimp
    80207a13:	b87d                	j	802072d1 <localtime+0x2b0>
    80207a15:	9048                	0x9048
    80207a17:	0000                	unimp
    80207a19:	0000                	unimp
    80207a1b:	5e7e                	lw	t3,252(sp)
    80207a1d:	0000a073          	csrs	ustatus,ra
    80207a21:	0000                	unimp
    80207a23:	987f                	0x987f
    80207a25:	902a                	c.add	zero,a0
    80207a27:	0102                	c.slli64	sp
    80207a29:	0102                	c.slli64	sp
    80207a2b:	0302                	c.slli64	t1
    80207a2d:	0204                	addi	s1,sp,256
    80207a2f:	0201                	addi	tp,tp,0
    80207a31:	0201                	addi	tp,tp,0
    80207a33:	0201                	addi	tp,tp,0
    80207a35:	0201                	addi	tp,tp,0
    80207a37:	0201                	addi	tp,tp,0
    80207a39:	0201                	addi	tp,tp,0
    80207a3b:	0201                	addi	tp,tp,0
    80207a3d:	0201                	addi	tp,tp,0
    80207a3f:	0201                	addi	tp,tp,0
    80207a41:	0201                	addi	tp,tp,0
    80207a43:	0201                	addi	tp,tp,0
    80207a45:	0201                	addi	tp,tp,0
    80207a47:	0201                	addi	tp,tp,0
    80207a49:	0201                	addi	tp,tp,0
    80207a4b:	0201                	addi	tp,tp,0
    80207a4d:	0201                	addi	tp,tp,0
    80207a4f:	0201                	addi	tp,tp,0
    80207a51:	0201                	addi	tp,tp,0
    80207a53:	0201                	addi	tp,tp,0
    80207a55:	0201                	addi	tp,tp,0
    80207a57:	0201                	addi	tp,tp,0
    80207a59:	0201                	addi	tp,tp,0
    80207a5b:	0201                	addi	tp,tp,0
    80207a5d:	0201                	addi	tp,tp,0
    80207a5f:	0201                	addi	tp,tp,0
    80207a61:	0201                	addi	tp,tp,0
    80207a63:	0201                	addi	tp,tp,0
    80207a65:	0201                	addi	tp,tp,0
    80207a67:	0201                	addi	tp,tp,0
    80207a69:	0201                	addi	tp,tp,0
    80207a6b:	0201                	addi	tp,tp,0
    80207a6d:	0201                	addi	tp,tp,0
    80207a6f:	0201                	addi	tp,tp,0
    80207a71:	0201                	addi	tp,tp,0
    80207a73:	0201                	addi	tp,tp,0
    80207a75:	0201                	addi	tp,tp,0
    80207a77:	0201                	addi	tp,tp,0
    80207a79:	0201                	addi	tp,tp,0
    80207a7b:	0201                	addi	tp,tp,0
    80207a7d:	0201                	addi	tp,tp,0
    80207a7f:	0201                	addi	tp,tp,0
    80207a81:	0201                	addi	tp,tp,0
    80207a83:	0201                	addi	tp,tp,0
    80207a85:	0201                	addi	tp,tp,0
    80207a87:	0201                	addi	tp,tp,0
    80207a89:	0201                	addi	tp,tp,0
    80207a8b:	0201                	addi	tp,tp,0
    80207a8d:	0201                	addi	tp,tp,0
    80207a8f:	0201                	addi	tp,tp,0
    80207a91:	0201                	addi	tp,tp,0
    80207a93:	0201                	addi	tp,tp,0
    80207a95:	0201                	addi	tp,tp,0
    80207a97:	0201                	addi	tp,tp,0
    80207a99:	0201                	addi	tp,tp,0
    80207a9b:	0201                	addi	tp,tp,0
    80207a9d:	0201                	addi	tp,tp,0
    80207a9f:	0201                	addi	tp,tp,0
    80207aa1:	0201                	addi	tp,tp,0
    80207aa3:	0201                	addi	tp,tp,0
    80207aa5:	0201                	addi	tp,tp,0
    80207aa7:	0201                	addi	tp,tp,0
    80207aa9:	0201                	addi	tp,tp,0
    80207aab:	0201                	addi	tp,tp,0
    80207aad:	0201                	addi	tp,tp,0
    80207aaf:	0201                	addi	tp,tp,0
    80207ab1:	0201                	addi	tp,tp,0
    80207ab3:	0201                	addi	tp,tp,0
    80207ab5:	0201                	addi	tp,tp,0
    80207ab7:	0201                	addi	tp,tp,0
    80207ab9:	0201                	addi	tp,tp,0
    80207abb:	0201                	addi	tp,tp,0
    80207abd:	0201                	addi	tp,tp,0
    80207abf:	0201                	addi	tp,tp,0
    80207ac1:	0201                	addi	tp,tp,0
    80207ac3:	0201                	addi	tp,tp,0
    80207ac5:	0201                	addi	tp,tp,0
    80207ac7:	0201                	addi	tp,tp,0
    80207ac9:	0201                	addi	tp,tp,0
    80207acb:	0201                	addi	tp,tp,0
    80207acd:	0201                	addi	tp,tp,0
    80207acf:	0201                	addi	tp,tp,0
    80207ad1:	0201                	addi	tp,tp,0
    80207ad3:	0201                	addi	tp,tp,0
    80207ad5:	0201                	addi	tp,tp,0
    80207ad7:	0201                	addi	tp,tp,0
    80207ad9:	0201                	addi	tp,tp,0
    80207adb:	0201                	addi	tp,tp,0
    80207add:	0201                	addi	tp,tp,0
    80207adf:	0201                	addi	tp,tp,0
    80207ae1:	ffff                	0xffff
    80207ae3:	2691                	addiw	a3,a3,4
    80207ae5:	0000                	unimp
    80207ae7:	ffff                	0xffff
    80207ae9:	909d                	srli	s1,s1,0x27
    80207aeb:	0401                	addi	s0,s0,0
    80207aed:	ffff                	0xffff
    80207aef:	0800808f          	0x800808f
    80207af3:	ffff                	0xffff
    80207af5:	909d                	srli	s1,s1,0x27
    80207af7:	0c01                	addi	s8,s8,0
    80207af9:	ffff                	0xffff
    80207afb:	909d                	srli	s1,s1,0x27
    80207afd:	1001                	c.nop	-32
    80207aff:	4d4c                	lw	a1,28(a0)
    80207b01:	0054                	addi	a3,sp,4
    80207b03:	4450                	lw	a2,12(s0)
    80207b05:	0054                	addi	a3,sp,4
    80207b07:	5350                	lw	a2,36(a4)
    80207b09:	0054                	addi	a3,sp,4
    80207b0b:	5750                	lw	a2,44(a4)
    80207b0d:	0054                	addi	a3,sp,4
    80207b0f:	5050                	lw	a2,36(s0)
    80207b11:	0054                	addi	a3,sp,4
    80207b13:	0000                	unimp
    80207b15:	0000                	unimp
    80207b17:	0001                	nop
    80207b19:	0000                	unimp
    80207b1b:	0100                	addi	s0,sp,128
    80207b1d:	500a                	0x500a
    80207b1f:	50385453          	0x50385453
    80207b23:	5444                	lw	s1,44(s0)
    80207b25:	4d2c                	lw	a1,88(a0)
    80207b27:	2e322e33          	0x2e322e33
    80207b2b:	2c30                	fld	fa2,88(s0)
    80207b2d:	314d                	addiw	sp,sp,-13
    80207b2f:	2e31                	addiw	t3,t3,12
    80207b31:	2e31                	addiw	t3,t3,12
    80207b33:	0a30                	addi	a2,sp,280

0000000080207b35 <localtime_size>:
    80207b35:	0b14                	addi	a3,sp,400
	...

0000000080207b39 <mounts>:
    80207b39:	6f72                	ld	t5,280(sp)
    80207b3b:	7366746f          	jal	s0,8026f271 <data_start+0x57271>
    80207b3f:	2f20                	fld	fs0,88(a4)
    80207b41:	7220                	ld	s0,96(a2)
    80207b43:	20746f6f          	jal	t5,8024e549 <data_start+0x36549>
    80207b47:	7772                	ld	a4,312(sp)
    80207b49:	722c                	ld	a1,96(a2)
    80207b4b:	6c65                	lui	s8,0x19
    80207b4d:	7461                	lui	s0,0xffff8
    80207b4f:	6d69                	lui	s10,0x1a
    80207b51:	2c65                	addiw	s8,s8,25
    80207b53:	7265                	lui	tp,0xffff9
    80207b55:	6f72                	ld	t5,280(sp)
    80207b57:	7372                	ld	t1,312(sp)
    80207b59:	723d                	lui	tp,0xfffef
    80207b5b:	6d65                	lui	s10,0x19
    80207b5d:	746e756f          	jal	a0,802ef2a3 <data_start+0xd72a3>
    80207b61:	722d                	lui	tp,0xfffeb
    80207b63:	2030206f          	j	8020a565 <kvminit+0xc5>
    80207b67:	0a30                	addi	a2,sp,280

0000000080207b69 <mounts_size>:
    80207b69:	0030                	addi	a2,sp,8
	...

0000000080207b6d <meminfo>:
    80207b6d:	654d                	lui	a0,0x13
    80207b6f:	546d                	li	s0,-5
    80207b71:	6c61746f          	jal	s0,8021f237 <data_start+0x7237>
    80207b75:	203a                	fld	ft0,392(sp)
    80207b77:	2020                	fld	fs0,64(s0)
    80207b79:	2020                	fld	fs0,64(s0)
    80207b7b:	2020                	fld	fs0,64(s0)
    80207b7d:	2020                	fld	fs0,64(s0)
    80207b7f:	3231                	addiw	tp,tp,-20
    80207b81:	3434                	fld	fa3,104(s0)
    80207b83:	3639                	addiw	a2,a2,-18
    80207b85:	6b20                	ld	s0,80(a4)
    80207b87:	0a42                	slli	s4,s4,0x10
    80207b89:	654d                	lui	a0,0x13
    80207b8b:	466d                	li	a2,27
    80207b8d:	6572                	ld	a0,280(sp)
    80207b8f:	3a65                	addiw	s4,s4,-7
    80207b91:	2020                	fld	fs0,64(s0)
    80207b93:	2020                	fld	fs0,64(s0)
    80207b95:	2020                	fld	fs0,64(s0)
    80207b97:	2020                	fld	fs0,64(s0)
    80207b99:	2020                	fld	fs0,64(s0)
    80207b9b:	3120                	fld	fs0,96(a0)
    80207b9d:	3036                	fld	ft0,360(sp)
    80207b9f:	3930                	fld	fa2,112(a0)
    80207ba1:	6b20                	ld	s0,80(a4)
    80207ba3:	0a42                	slli	s4,s4,0x10
    80207ba5:	654d                	lui	a0,0x13
    80207ba7:	416d                	li	sp,27
    80207ba9:	6176                	ld	sp,344(sp)
    80207bab:	6c69                	lui	s8,0x1a
    80207bad:	6261                	lui	tp,0x18
    80207baf:	656c                	ld	a1,200(a0)
    80207bb1:	203a                	fld	ft0,392(sp)
    80207bb3:	2020                	fld	fs0,64(s0)
    80207bb5:	2020                	fld	fs0,64(s0)
    80207bb7:	3720                	fld	fs0,104(a4)
    80207bb9:	39383737          	lui	a4,0x39383
    80207bbd:	6b20                	ld	s0,80(a4)
    80207bbf:	0a42                	slli	s4,s4,0x10
    80207bc1:	7542                	ld	a0,48(sp)
    80207bc3:	6666                	ld	a2,88(sp)
    80207bc5:	7265                	lui	tp,0xffff9
    80207bc7:	20203a73          	csrrc	s4,hedeleg,zero
    80207bcb:	2020                	fld	fs0,64(s0)
    80207bcd:	2020                	fld	fs0,64(s0)
    80207bcf:	2020                	fld	fs0,64(s0)
    80207bd1:	2020                	fld	fs0,64(s0)
    80207bd3:	3420                	fld	fs0,104(s0)
    80207bd5:	36373137          	lui	sp,0x36373
    80207bd9:	6b20                	ld	s0,80(a4)
    80207bdb:	0a42                	slli	s4,s4,0x10
    80207bdd:	68636143          	fmadd.s	ft2,ft6,ft6,fa3,unknown
    80207be1:	6465                	lui	s0,0x19
    80207be3:	203a                	fld	ft0,392(sp)
    80207be5:	2020                	fld	fs0,64(s0)
    80207be7:	2020                	fld	fs0,64(s0)
    80207be9:	2020                	fld	fs0,64(s0)
    80207beb:	2020                	fld	fs0,64(s0)
    80207bed:	2020                	fld	fs0,64(s0)
    80207bef:	3620                	fld	fs0,104(a2)
    80207bf1:	3334                	fld	fa3,96(a4)
    80207bf3:	3836                	fld	fa6,360(sp)
    80207bf5:	6b20                	ld	s0,80(a4)
    80207bf7:	0a42                	slli	s4,s4,0x10
    80207bf9:	70617753          	0x70617753
    80207bfd:	68636143          	fmadd.s	ft2,ft6,ft6,fa3,unknown
    80207c01:	6465                	lui	s0,0x19
    80207c03:	203a                	fld	ft0,392(sp)
    80207c05:	2020                	fld	fs0,64(s0)
    80207c07:	2020                	fld	fs0,64(s0)
    80207c09:	2020                	fld	fs0,64(s0)
    80207c0b:	2020                	fld	fs0,64(s0)
    80207c0d:	2020                	fld	fs0,64(s0)
    80207c0f:	3020                	fld	fs0,96(s0)
    80207c11:	6b20                	ld	s0,80(a4)
    80207c13:	0a42                	slli	s4,s4,0x10
    80207c15:	6341                	lui	t1,0x10
    80207c17:	6974                	ld	a3,208(a0)
    80207c19:	6576                	ld	a0,344(sp)
    80207c1b:	203a                	fld	ft0,392(sp)
    80207c1d:	2020                	fld	fs0,64(s0)
    80207c1f:	2020                	fld	fs0,64(s0)
    80207c21:	2020                	fld	fs0,64(s0)
    80207c23:	2020                	fld	fs0,64(s0)
    80207c25:	2020                	fld	fs0,64(s0)
    80207c27:	3320                	fld	fs0,96(a4)
    80207c29:	3231                	addiw	tp,tp,-20
    80207c2b:	3031                	0x3031
    80207c2d:	6b20                	ld	s0,80(a4)
    80207c2f:	0a42                	slli	s4,s4,0x10
    80207c31:	6e49                	lui	t3,0x12
    80207c33:	6361                	lui	t1,0x18
    80207c35:	6974                	ld	a3,208(a0)
    80207c37:	6576                	ld	a0,344(sp)
    80207c39:	203a                	fld	ft0,392(sp)
    80207c3b:	2020                	fld	fs0,64(s0)
    80207c3d:	2020                	fld	fs0,64(s0)
    80207c3f:	2020                	fld	fs0,64(s0)
    80207c41:	2020                	fld	fs0,64(s0)
    80207c43:	3920                	fld	fs0,112(a0)
    80207c45:	3630                	fld	fa2,104(a2)
    80207c47:	3839                	addiw	a6,a6,-18
    80207c49:	6b20                	ld	s0,80(a4)
    80207c4b:	0a42                	slli	s4,s4,0x10
    80207c4d:	6341                	lui	t1,0x10
    80207c4f:	6974                	ld	a3,208(a0)
    80207c51:	6576                	ld	a0,344(sp)
    80207c53:	6128                	ld	a0,64(a0)
    80207c55:	6f6e                	ld	t5,216(sp)
    80207c57:	296e                	fld	fs2,216(sp)
    80207c59:	203a                	fld	ft0,392(sp)
    80207c5b:	2020                	fld	fs0,64(s0)
    80207c5d:	2020                	fld	fs0,64(s0)
    80207c5f:	2020                	fld	fs0,64(s0)
    80207c61:	3120                	fld	fs0,96(a0)
    80207c63:	3235                	addiw	tp,tp,-19
    80207c65:	6b20                	ld	s0,80(a4)
    80207c67:	0a42                	slli	s4,s4,0x10
    80207c69:	6e49                	lui	t3,0x12
    80207c6b:	6361                	lui	t1,0x18
    80207c6d:	6974                	ld	a3,208(a0)
    80207c6f:	6576                	ld	a0,344(sp)
    80207c71:	6128                	ld	a0,64(a0)
    80207c73:	6f6e                	ld	t5,216(sp)
    80207c75:	296e                	fld	fs2,216(sp)
    80207c77:	203a                	fld	ft0,392(sp)
    80207c79:	2020                	fld	fs0,64(s0)
    80207c7b:	3520                	fld	fs0,104(a0)
    80207c7d:	3332                	fld	ft6,296(sp)
    80207c7f:	3835                	addiw	a6,a6,-19
    80207c81:	6b20                	ld	s0,80(a4)
    80207c83:	0a42                	slli	s4,s4,0x10
    80207c85:	6341                	lui	t1,0x10
    80207c87:	6974                	ld	a3,208(a0)
    80207c89:	6576                	ld	a0,344(sp)
    80207c8b:	6628                	ld	a0,72(a2)
    80207c8d:	6c69                	lui	s8,0x1a
    80207c8f:	2965                	addiw	s2,s2,25
    80207c91:	203a                	fld	ft0,392(sp)
    80207c93:	2020                	fld	fs0,64(s0)
    80207c95:	2020                	fld	fs0,64(s0)
    80207c97:	3320                	fld	fs0,96(a4)
    80207c99:	3031                	0x3031
    80207c9b:	3735                	addiw	a4,a4,-19
    80207c9d:	6b20                	ld	s0,80(a4)
    80207c9f:	0a42                	slli	s4,s4,0x10
    80207ca1:	6e49                	lui	t3,0x12
    80207ca3:	6361                	lui	t1,0x18
    80207ca5:	6974                	ld	a3,208(a0)
    80207ca7:	6576                	ld	a0,344(sp)
    80207ca9:	6628                	ld	a0,72(a2)
    80207cab:	6c69                	lui	s8,0x1a
    80207cad:	2965                	addiw	s2,s2,25
    80207caf:	203a                	fld	ft0,392(sp)
    80207cb1:	2020                	fld	fs0,64(s0)
    80207cb3:	3320                	fld	fs0,96(a4)
    80207cb5:	3338                	fld	fa4,96(a4)
    80207cb7:	3034                	fld	fa3,96(s0)
    80207cb9:	6b20                	ld	s0,80(a4)
    80207cbb:	0a42                	slli	s4,s4,0x10
    80207cbd:	6e55                	lui	t3,0x15
    80207cbf:	7665                	lui	a2,0xffff9
    80207cc1:	6369                	lui	t1,0x1a
    80207cc3:	6174                	ld	a3,192(a0)
    80207cc5:	6c62                	ld	s8,24(sp)
    80207cc7:	3a65                	addiw	s4,s4,-7
    80207cc9:	2020                	fld	fs0,64(s0)
    80207ccb:	2020                	fld	fs0,64(s0)
    80207ccd:	2020                	fld	fs0,64(s0)
    80207ccf:	2020                	fld	fs0,64(s0)
    80207cd1:	2020                	fld	fs0,64(s0)
    80207cd3:	3020                	fld	fs0,96(s0)
    80207cd5:	6b20                	ld	s0,80(a4)
    80207cd7:	0a42                	slli	s4,s4,0x10
    80207cd9:	6c4d                	lui	s8,0x13
    80207cdb:	656b636f          	jal	t1,802be331 <data_start+0xa6331>
    80207cdf:	3a64                	fld	fs1,240(a2)
    80207ce1:	2020                	fld	fs0,64(s0)
    80207ce3:	2020                	fld	fs0,64(s0)
    80207ce5:	2020                	fld	fs0,64(s0)
    80207ce7:	2020                	fld	fs0,64(s0)
    80207ce9:	2020                	fld	fs0,64(s0)
    80207ceb:	2020                	fld	fs0,64(s0)
    80207ced:	2020                	fld	fs0,64(s0)
    80207cef:	3020                	fld	fs0,96(s0)
    80207cf1:	6b20                	ld	s0,80(a4)
    80207cf3:	0a42                	slli	s4,s4,0x10
    80207cf5:	70617753          	0x70617753
    80207cf9:	6f54                	ld	a3,152(a4)
    80207cfb:	6174                	ld	a3,192(a0)
    80207cfd:	3a6c                	fld	fa1,240(a2)
    80207cff:	2020                	fld	fs0,64(s0)
    80207d01:	2020                	fld	fs0,64(s0)
    80207d03:	2020                	fld	fs0,64(s0)
    80207d05:	2020                	fld	fs0,64(s0)
    80207d07:	3920                	fld	fs0,112(a0)
    80207d09:	3534                	fld	fa3,104(a0)
    80207d0b:	3134                	fld	fa3,96(a0)
    80207d0d:	6b20                	ld	s0,80(a4)
    80207d0f:	0a42                	slli	s4,s4,0x10
    80207d11:	70617753          	0x70617753
    80207d15:	7246                	ld	tp,112(sp)
    80207d17:	6565                	lui	a0,0x19
    80207d19:	203a                	fld	ft0,392(sp)
    80207d1b:	2020                	fld	fs0,64(s0)
    80207d1d:	2020                	fld	fs0,64(s0)
    80207d1f:	2020                	fld	fs0,64(s0)
    80207d21:	2020                	fld	fs0,64(s0)
    80207d23:	3920                	fld	fs0,112(a0)
    80207d25:	3534                	fld	fa3,104(a0)
    80207d27:	3134                	fld	fa3,96(a0)
    80207d29:	6b20                	ld	s0,80(a4)
    80207d2b:	0a42                	slli	s4,s4,0x10
    80207d2d:	6944                	ld	s1,144(a0)
    80207d2f:	7472                	ld	s0,312(sp)
    80207d31:	3a79                	addiw	s4,s4,-2
    80207d33:	2020                	fld	fs0,64(s0)
    80207d35:	2020                	fld	fs0,64(s0)
    80207d37:	2020                	fld	fs0,64(s0)
    80207d39:	2020                	fld	fs0,64(s0)
    80207d3b:	2020                	fld	fs0,64(s0)
    80207d3d:	2020                	fld	fs0,64(s0)
    80207d3f:	2020                	fld	fs0,64(s0)
    80207d41:	2020                	fld	fs0,64(s0)
    80207d43:	3020                	fld	fs0,96(s0)
    80207d45:	6b20                	ld	s0,80(a4)
    80207d47:	0a42                	slli	s4,s4,0x10
    80207d49:	74697257          	0x74697257
    80207d4d:	6265                	lui	tp,0x19
    80207d4f:	6361                	lui	t1,0x18
    80207d51:	20203a6b          	0x20203a6b
    80207d55:	2020                	fld	fs0,64(s0)
    80207d57:	2020                	fld	fs0,64(s0)
    80207d59:	2020                	fld	fs0,64(s0)
    80207d5b:	2020                	fld	fs0,64(s0)
    80207d5d:	2020                	fld	fs0,64(s0)
    80207d5f:	3020                	fld	fs0,96(s0)
    80207d61:	6b20                	ld	s0,80(a4)
    80207d63:	0a42                	slli	s4,s4,0x10
    80207d65:	6e41                	lui	t3,0x10
    80207d67:	61506e6f          	jal	t3,8020eb7b <sys_mkdirat+0xf5>
    80207d6b:	3a736567          	0x3a736567
    80207d6f:	2020                	fld	fs0,64(s0)
    80207d71:	2020                	fld	fs0,64(s0)
    80207d73:	2020                	fld	fs0,64(s0)
    80207d75:	2020                	fld	fs0,64(s0)
    80207d77:	3520                	fld	fs0,104(a0)
    80207d79:	3832                	fld	fa6,296(sp)
    80207d7b:	3332                	fld	ft6,296(sp)
    80207d7d:	6b20                	ld	s0,80(a4)
    80207d7f:	0a42                	slli	s4,s4,0x10
    80207d81:	614d                	addi	sp,sp,176
    80207d83:	7070                	ld	a2,224(s0)
    80207d85:	6465                	lui	s0,0x19
    80207d87:	203a                	fld	ft0,392(sp)
    80207d89:	2020                	fld	fs0,64(s0)
    80207d8b:	2020                	fld	fs0,64(s0)
    80207d8d:	2020                	fld	fs0,64(s0)
    80207d8f:	2020                	fld	fs0,64(s0)
    80207d91:	2020                	fld	fs0,64(s0)
    80207d93:	3220                	fld	fs0,96(a2)
    80207d95:	3034                	fld	fa3,96(s0)
    80207d97:	3931                	addiw	s2,s2,-20
    80207d99:	6b20                	ld	s0,80(a4)
    80207d9b:	0a42                	slli	s4,s4,0x10
    80207d9d:	656d6853          	0x656d6853
    80207da1:	3a6d                	addiw	s4,s4,-5
    80207da3:	2020                	fld	fs0,64(s0)
    80207da5:	2020                	fld	fs0,64(s0)
    80207da7:	2020                	fld	fs0,64(s0)
    80207da9:	2020                	fld	fs0,64(s0)
    80207dab:	2020                	fld	fs0,64(s0)
    80207dad:	2020                	fld	fs0,64(s0)
    80207daf:	2020                	fld	fs0,64(s0)
    80207db1:	3732                	fld	fa4,296(sp)
    80207db3:	3036                	fld	ft0,360(sp)
    80207db5:	6b20                	ld	s0,80(a4)
    80207db7:	0a42                	slli	s4,s4,0x10
    80207db9:	6365524b          	fnmsub.d	ft4,fa0,fs6,fa2,unknown
    80207dbd:	616c                	ld	a1,192(a0)
    80207dbf:	6d69                	lui	s10,0x1a
    80207dc1:	6261                	lui	tp,0x18
    80207dc3:	656c                	ld	a1,200(a0)
    80207dc5:	203a                	fld	ft0,392(sp)
    80207dc7:	2020                	fld	fs0,64(s0)
    80207dc9:	2020                	fld	fs0,64(s0)
    80207dcb:	2020                	fld	fs0,64(s0)
    80207dcd:	3436                	fld	fs0,360(sp)
    80207dcf:	3634                	fld	fa3,104(a2)
    80207dd1:	6b20                	ld	s0,80(a4)
    80207dd3:	0a42                	slli	s4,s4,0x10
    80207dd5:	62616c53          	0x62616c53
    80207dd9:	203a                	fld	ft0,392(sp)
    80207ddb:	2020                	fld	fs0,64(s0)
    80207ddd:	2020                	fld	fs0,64(s0)
    80207ddf:	2020                	fld	fs0,64(s0)
    80207de1:	2020                	fld	fs0,64(s0)
    80207de3:	2020                	fld	fs0,64(s0)
    80207de5:	2020                	fld	fs0,64(s0)
    80207de7:	3120                	fld	fs0,96(a0)
    80207de9:	3234                	fld	fa3,96(a2)
    80207deb:	3031                	0x3031
    80207ded:	6b20                	ld	s0,80(a4)
    80207def:	0a42                	slli	s4,s4,0x10
    80207df1:	63655253          	0x63655253
    80207df5:	616c                	ld	a1,192(a0)
    80207df7:	6d69                	lui	s10,0x1a
    80207df9:	6261                	lui	tp,0x18
    80207dfb:	656c                	ld	a1,200(a0)
    80207dfd:	203a                	fld	ft0,392(sp)
    80207dff:	2020                	fld	fs0,64(s0)
    80207e01:	2020                	fld	fs0,64(s0)
    80207e03:	2020                	fld	fs0,64(s0)
    80207e05:	3436                	fld	fs0,360(sp)
    80207e07:	3634                	fld	fa3,104(a2)
    80207e09:	6b20                	ld	s0,80(a4)
    80207e0b:	0a42                	slli	s4,s4,0x10
    80207e0d:	726e5553          	0x726e5553
    80207e11:	6365                	lui	t1,0x19
    80207e13:	616c                	ld	a1,192(a0)
    80207e15:	6d69                	lui	s10,0x1a
    80207e17:	203a                	fld	ft0,392(sp)
    80207e19:	2020                	fld	fs0,64(s0)
    80207e1b:	2020                	fld	fs0,64(s0)
    80207e1d:	2020                	fld	fs0,64(s0)
    80207e1f:	2020                	fld	fs0,64(s0)
    80207e21:	34363737          	lui	a4,0x34363
    80207e25:	6b20                	ld	s0,80(a4)
    80207e27:	0a42                	slli	s4,s4,0x10
    80207e29:	6e72654b          	fnmsub.q	fa0,ft4,ft7,fa3,unknown
    80207e2d:	6c65                	lui	s8,0x19
    80207e2f:	63617453          	0x63617453
    80207e33:	20203a6b          	0x20203a6b
    80207e37:	2020                	fld	fs0,64(s0)
    80207e39:	2020                	fld	fs0,64(s0)
    80207e3b:	2020                	fld	fs0,64(s0)
    80207e3d:	2020                	fld	fs0,64(s0)
    80207e3f:	3120                	fld	fs0,96(a0)
    80207e41:	6b20                	ld	s0,80(a4)
    80207e43:	0a42                	slli	s4,s4,0x10
    80207e45:	6150                	ld	a2,128(a0)
    80207e47:	61546567          	0x61546567
    80207e4b:	6c62                	ld	s8,24(sp)
    80207e4d:	7365                	lui	t1,0xffff9
    80207e4f:	203a                	fld	ft0,392(sp)
    80207e51:	2020                	fld	fs0,64(s0)
    80207e53:	2020                	fld	fs0,64(s0)
    80207e55:	2020                	fld	fs0,64(s0)
    80207e57:	2020                	fld	fs0,64(s0)
    80207e59:	38303933          	0x38303933
    80207e5d:	6b20                	ld	s0,80(a4)
    80207e5f:	0a42                	slli	s4,s4,0x10
    80207e61:	464e                	lw	a2,208(sp)
    80207e63:	6e555f53          	0x6e555f53
    80207e67:	62617473          	csrrci	s0,0x626,2
    80207e6b:	656c                	ld	a1,200(a0)
    80207e6d:	203a                	fld	ft0,392(sp)
    80207e6f:	2020                	fld	fs0,64(s0)
    80207e71:	2020                	fld	fs0,64(s0)
    80207e73:	2020                	fld	fs0,64(s0)
    80207e75:	2020                	fld	fs0,64(s0)
    80207e77:	3020                	fld	fs0,96(s0)
    80207e79:	6b20                	ld	s0,80(a4)
    80207e7b:	0a42                	slli	s4,s4,0x10
    80207e7d:	6f42                	ld	t5,16(sp)
    80207e7f:	6e75                	lui	t3,0x1d
    80207e81:	203a6563          	bltu	s4,gp,8020808b <meminfo+0x51e>
    80207e85:	2020                	fld	fs0,64(s0)
    80207e87:	2020                	fld	fs0,64(s0)
    80207e89:	2020                	fld	fs0,64(s0)
    80207e8b:	2020                	fld	fs0,64(s0)
    80207e8d:	2020                	fld	fs0,64(s0)
    80207e8f:	2020                	fld	fs0,64(s0)
    80207e91:	2020                	fld	fs0,64(s0)
    80207e93:	3020                	fld	fs0,96(s0)
    80207e95:	6b20                	ld	s0,80(a4)
    80207e97:	0a42                	slli	s4,s4,0x10
    80207e99:	74697257          	0x74697257
    80207e9d:	6265                	lui	tp,0x19
    80207e9f:	6361                	lui	t1,0x18
    80207ea1:	706d546b          	0x706d546b
    80207ea5:	203a                	fld	ft0,392(sp)
    80207ea7:	2020                	fld	fs0,64(s0)
    80207ea9:	2020                	fld	fs0,64(s0)
    80207eab:	2020                	fld	fs0,64(s0)
    80207ead:	2020                	fld	fs0,64(s0)
    80207eaf:	3020                	fld	fs0,96(s0)
    80207eb1:	6b20                	ld	s0,80(a4)
    80207eb3:	0a42                	slli	s4,s4,0x10
    80207eb5:	6d6d6f43          	0x6d6d6f43
    80207eb9:	7469                	lui	s0,0xffffa
    80207ebb:	694c                	ld	a1,144(a0)
    80207ebd:	696d                	lui	s2,0x1b
    80207ebf:	3a74                	fld	fa3,240(a2)
    80207ec1:	2020                	fld	fs0,64(s0)
    80207ec3:	2020                	fld	fs0,64(s0)
    80207ec5:	2020                	fld	fs0,64(s0)
    80207ec7:	3120                	fld	fs0,96(a0)
    80207ec9:	3439                	addiw	s0,s0,-18
    80207ecb:	3730                	fld	fa2,104(a4)
    80207ecd:	6b20                	ld	s0,80(a4)
    80207ecf:	0a42                	slli	s4,s4,0x10
    80207ed1:	6d6d6f43          	0x6d6d6f43
    80207ed5:	7469                	lui	s0,0xffffa
    80207ed7:	6574                	ld	a3,200(a0)
    80207ed9:	5f64                	lw	s1,124(a4)
    80207edb:	5341                	li	t1,-16
    80207edd:	203a                	fld	ft0,392(sp)
    80207edf:	2020                	fld	fs0,64(s0)
    80207ee1:	2020                	fld	fs0,64(s0)
    80207ee3:	3320                	fld	fs0,96(a4)
    80207ee5:	3532                	fld	fa0,296(sp)
    80207ee7:	3532                	fld	fa0,296(sp)
    80207ee9:	6b20                	ld	s0,80(a4)
    80207eeb:	0a42                	slli	s4,s4,0x10
    80207eed:	6d56                	ld	s10,336(sp)
    80207eef:	6c61                	lui	s8,0x18
    80207ef1:	6f6c                	ld	a1,216(a4)
    80207ef3:	746f5463          	bge	t5,t1,8020863b <devinit+0x14f>
    80207ef7:	6c61                	lui	s8,0x18
    80207ef9:	203a                	fld	ft0,392(sp)
    80207efb:	2020                	fld	fs0,64(s0)
    80207efd:	2020                	fld	fs0,64(s0)
    80207eff:	35333433          	0x35333433
    80207f03:	3739                	addiw	a4,a4,-18
    80207f05:	6b20                	ld	s0,80(a4)
    80207f07:	0a42                	slli	s4,s4,0x10
    80207f09:	6d56                	ld	s10,336(sp)
    80207f0b:	6c61                	lui	s8,0x18
    80207f0d:	6f6c                	ld	a1,216(a4)
    80207f0f:	65735563          	bge	t1,s7,80208559 <devinit+0x6d>
    80207f13:	3a64                	fld	fs1,240(a2)
    80207f15:	2020                	fld	fs0,64(s0)
    80207f17:	2020                	fld	fs0,64(s0)
    80207f19:	2020                	fld	fs0,64(s0)
    80207f1b:	2020                	fld	fs0,64(s0)
    80207f1d:	3835                	addiw	a6,a6,-19
    80207f1f:	3238                	fld	fa4,96(a2)
    80207f21:	6b20                	ld	s0,80(a4)
    80207f23:	0a42                	slli	s4,s4,0x10
    80207f25:	6d56                	ld	s10,336(sp)
    80207f27:	6c61                	lui	s8,0x18
    80207f29:	6f6c                	ld	a1,216(a4)
    80207f2b:	75684363          	blt	a6,s6,80208671 <devinit+0x185>
    80207f2f:	6b6e                	ld	s6,216(sp)
    80207f31:	203a                	fld	ft0,392(sp)
    80207f33:	2020                	fld	fs0,64(s0)
    80207f35:	2020                	fld	fs0,64(s0)
    80207f37:	2020                	fld	fs0,64(s0)
    80207f39:	2020                	fld	fs0,64(s0)
    80207f3b:	3020                	fld	fs0,96(s0)
    80207f3d:	6b20                	ld	s0,80(a4)
    80207f3f:	0a42                	slli	s4,s4,0x10
    80207f41:	6550                	ld	a2,136(a0)
    80207f43:	6372                	ld	t1,280(sp)
    80207f45:	7570                	ld	a2,232(a0)
    80207f47:	203a                	fld	ft0,392(sp)
    80207f49:	2020                	fld	fs0,64(s0)
    80207f4b:	2020                	fld	fs0,64(s0)
    80207f4d:	2020                	fld	fs0,64(s0)
    80207f4f:	2020                	fld	fs0,64(s0)
    80207f51:	2020                	fld	fs0,64(s0)
    80207f53:	2020                	fld	fs0,64(s0)
    80207f55:	3439                	addiw	s0,s0,-18
    80207f57:	6b203237          	lui	tp,0x6b203
    80207f5b:	0a42                	slli	s4,s4,0x10
    80207f5d:	6148                	ld	a0,128(a0)
    80207f5f:	6472                	ld	s0,280(sp)
    80207f61:	65726177          	0x65726177
    80207f65:	72726f43          	fmadd.d	ft10,ft4,ft7,fa4,unknown
    80207f69:	7075                	c.lui	zero,0xffffd
    80207f6b:	6574                	ld	a3,200(a0)
    80207f6d:	3a64                	fld	fs1,240(a2)
    80207f6f:	2020                	fld	fs0,64(s0)
    80207f71:	2020                	fld	fs0,64(s0)
    80207f73:	3020                	fld	fs0,96(s0)
    80207f75:	6b20                	ld	s0,80(a4)
    80207f77:	0a42                	slli	s4,s4,0x10
    80207f79:	6e41                	lui	t3,0x10
    80207f7b:	75486e6f          	jal	t3,8028e6cf <data_start+0x766cf>
    80207f7f:	61506567          	0x61506567
    80207f83:	3a736567          	0x3a736567
    80207f87:	2020                	fld	fs0,64(s0)
    80207f89:	2020                	fld	fs0,64(s0)
    80207f8b:	2020                	fld	fs0,64(s0)
    80207f8d:	2020                	fld	fs0,64(s0)
    80207f8f:	3020                	fld	fs0,96(s0)
    80207f91:	6b20                	ld	s0,80(a4)
    80207f93:	0a42                	slli	s4,s4,0x10
    80207f95:	656d6853          	0x656d6853
    80207f99:	486d                	li	a6,27
    80207f9b:	6775                	lui	a4,0x1d
    80207f9d:	5065                	c.li	zero,-7
    80207f9f:	6761                	lui	a4,0x18
    80207fa1:	7365                	lui	t1,0xffff9
    80207fa3:	203a                	fld	ft0,392(sp)
    80207fa5:	2020                	fld	fs0,64(s0)
    80207fa7:	2020                	fld	fs0,64(s0)
    80207fa9:	2020                	fld	fs0,64(s0)
    80207fab:	3020                	fld	fs0,96(s0)
    80207fad:	6b20                	ld	s0,80(a4)
    80207faf:	0a42                	slli	s4,s4,0x10
    80207fb1:	656d6853          	0x656d6853
    80207fb5:	506d                	c.li	zero,-5
    80207fb7:	646d                	lui	s0,0x1b
    80207fb9:	614d                	addi	sp,sp,176
    80207fbb:	7070                	ld	a2,224(s0)
    80207fbd:	6465                	lui	s0,0x19
    80207fbf:	203a                	fld	ft0,392(sp)
    80207fc1:	2020                	fld	fs0,64(s0)
    80207fc3:	2020                	fld	fs0,64(s0)
    80207fc5:	2020                	fld	fs0,64(s0)
    80207fc7:	3020                	fld	fs0,96(s0)
    80207fc9:	6b20                	ld	s0,80(a4)
    80207fcb:	0a42                	slli	s4,s4,0x10
    80207fcd:	6946                	ld	s2,80(sp)
    80207fcf:	656c                	ld	a1,200(a0)
    80207fd1:	7548                	ld	a0,168(a0)
    80207fd3:	61506567          	0x61506567
    80207fd7:	3a736567          	0x3a736567
    80207fdb:	2020                	fld	fs0,64(s0)
    80207fdd:	2020                	fld	fs0,64(s0)
    80207fdf:	2020                	fld	fs0,64(s0)
    80207fe1:	2020                	fld	fs0,64(s0)
    80207fe3:	3020                	fld	fs0,96(s0)
    80207fe5:	6b20                	ld	s0,80(a4)
    80207fe7:	0a42                	slli	s4,s4,0x10
    80207fe9:	6946                	ld	s2,80(sp)
    80207feb:	656c                	ld	a1,200(a0)
    80207fed:	6d50                	ld	a2,152(a0)
    80207fef:	4d64                	lw	s1,92(a0)
    80207ff1:	7061                	c.lui	zero,0xffff8
    80207ff3:	6570                	ld	a2,200(a0)
    80207ff5:	3a64                	fld	fs1,240(a2)
    80207ff7:	2020                	fld	fs0,64(s0)
    80207ff9:	2020                	fld	fs0,64(s0)
    80207ffb:	2020                	fld	fs0,64(s0)
    80207ffd:	2020                	fld	fs0,64(s0)
    80207fff:	3020                	fld	fs0,96(s0)
    80208001:	6b20                	ld	s0,80(a4)
    80208003:	0a42                	slli	s4,s4,0x10
    80208005:	7548                	ld	a0,168(a0)
    80208007:	61506567          	0x61506567
    8020800b:	5f736567          	0x5f736567
    8020800f:	6f54                	ld	a3,152(a4)
    80208011:	6174                	ld	a3,192(a0)
    80208013:	3a6c                	fld	fa1,240(a2)
    80208015:	2020                	fld	fs0,64(s0)
    80208017:	2020                	fld	fs0,64(s0)
    80208019:	2020                	fld	fs0,64(s0)
    8020801b:	3020                	fld	fs0,96(s0)
    8020801d:	480a                	lw	a6,128(sp)
    8020801f:	6775                	lui	a4,0x1d
    80208021:	5065                	c.li	zero,-7
    80208023:	6761                	lui	a4,0x18
    80208025:	7365                	lui	t1,0xffff9
    80208027:	465f 6572 3a65      	0x3a656572465f
    8020802d:	2020                	fld	fs0,64(s0)
    8020802f:	2020                	fld	fs0,64(s0)
    80208031:	2020                	fld	fs0,64(s0)
    80208033:	2020                	fld	fs0,64(s0)
    80208035:	0a30                	addi	a2,sp,280
    80208037:	7548                	ld	a0,168(a0)
    80208039:	61506567          	0x61506567
    8020803d:	5f736567          	0x5f736567
    80208041:	7352                	ld	t1,304(sp)
    80208043:	6476                	ld	s0,344(sp)
    80208045:	203a                	fld	ft0,392(sp)
    80208047:	2020                	fld	fs0,64(s0)
    80208049:	2020                	fld	fs0,64(s0)
    8020804b:	2020                	fld	fs0,64(s0)
    8020804d:	3020                	fld	fs0,96(s0)
    8020804f:	480a                	lw	a6,128(sp)
    80208051:	6775                	lui	a4,0x1d
    80208053:	5065                	c.li	zero,-7
    80208055:	6761                	lui	a4,0x18
    80208057:	7365                	lui	t1,0xffff9
    80208059:	535f 7275 3a70      	0x3a707275535f
    8020805f:	2020                	fld	fs0,64(s0)
    80208061:	2020                	fld	fs0,64(s0)
    80208063:	2020                	fld	fs0,64(s0)
    80208065:	2020                	fld	fs0,64(s0)
    80208067:	0a30                	addi	a2,sp,280
    80208069:	7548                	ld	a0,168(a0)
    8020806b:	61706567          	0x61706567
    8020806f:	69736567          	0x69736567
    80208073:	657a                	ld	a0,408(sp)
    80208075:	203a                	fld	ft0,392(sp)
    80208077:	2020                	fld	fs0,64(s0)
    80208079:	2020                	fld	fs0,64(s0)
    8020807b:	2020                	fld	fs0,64(s0)
    8020807d:	3032                	fld	ft0,296(sp)
    8020807f:	3834                	fld	fa3,112(s0)
    80208081:	6b20                	ld	s0,80(a4)
    80208083:	0a42                	slli	s4,s4,0x10
    80208085:	7548                	ld	a0,168(a0)
    80208087:	6c746567          	0x6c746567
    8020808b:	3a62                	fld	fs4,56(sp)
    8020808d:	2020                	fld	fs0,64(s0)
    8020808f:	2020                	fld	fs0,64(s0)
    80208091:	2020                	fld	fs0,64(s0)
    80208093:	2020                	fld	fs0,64(s0)
    80208095:	2020                	fld	fs0,64(s0)
    80208097:	2020                	fld	fs0,64(s0)
    80208099:	2020                	fld	fs0,64(s0)
    8020809b:	3020                	fld	fs0,96(s0)
    8020809d:	6b20                	ld	s0,80(a4)
    8020809f:	0a42                	slli	s4,s4,0x10
    802080a1:	6944                	ld	s1,144(a0)
    802080a3:	6572                	ld	a0,280(sp)
    802080a5:	614d7463          	bgeu	s10,s4,802086ad <devinit+0x1c1>
    802080a9:	3470                	fld	fa2,232(s0)
    802080ab:	20203a6b          	0x20203a6b
    802080af:	2020                	fld	fs0,64(s0)
    802080b1:	2020                	fld	fs0,64(s0)
    802080b3:	3332                	fld	ft6,296(sp)
    802080b5:	34343333          	0x34343333
    802080b9:	6b20                	ld	s0,80(a4)
    802080bb:	0a42                	slli	s4,s4,0x10
    802080bd:	6944                	ld	s1,144(a0)
    802080bf:	6572                	ld	a0,280(sp)
    802080c1:	614d7463          	bgeu	s10,s4,802086c9 <devinit+0x1dd>
    802080c5:	3270                	fld	fa2,224(a2)
    802080c7:	3a4d                	addiw	s4,s4,-13
    802080c9:	2020                	fld	fs0,64(s0)
    802080cb:	2020                	fld	fs0,64(s0)
    802080cd:	3120                	fld	fs0,96(a0)
    802080cf:	3638                	fld	fa4,104(a2)
    802080d1:	30383633          	0x30383633
    802080d5:	6b20                	ld	s0,80(a4)
    802080d7:	0a42                	slli	s4,s4,0x10
    802080d9:	6944                	ld	s1,144(a0)
    802080db:	6572                	ld	a0,280(sp)
    802080dd:	614d7463          	bgeu	s10,s4,802086e5 <devinit+0x1f9>
    802080e1:	3170                	fld	fa2,224(a0)
    802080e3:	20203a47          	fmsub.s	fs4,ft0,ft2,ft4,rup
    802080e7:	2020                	fld	fs0,64(s0)
    802080e9:	2020                	fld	fs0,64(s0)
    802080eb:	2020                	fld	fs0,64(s0)
    802080ed:	2020                	fld	fs0,64(s0)
    802080ef:	3020                	fld	fs0,96(s0)
    802080f1:	6b20                	ld	s0,80(a4)
    802080f3:	0a42                	slli	s4,s4,0x10
    802080f5:	0a              	Address 0x00000000802080f5 is out of bounds.


00000000802080f6 <meminfo_size>:
    802080f6:	0589                	addi	a1,a1,2
	...

00000000802080fa <lat_sig>:
    802080fa:	6d6c                	ld	a1,216(a0)
    802080fc:	6562                	ld	a0,24(sp)
    802080fe:	636e                	ld	t1,216(sp)
    80208100:	5f68                	lw	a0,124(a4)
    80208102:	6c61                	lui	s8,0x18
    80208104:	206c                	fld	fa1,192(s0)
    80208106:	616c                	ld	a1,192(a0)
    80208108:	5f74                	lw	a3,124(a4)
    8020810a:	20676973          	csrrsi	s2,0x206,14
    8020810e:	2422                	fld	fs0,8(sp)
    80208110:	2240                	fld	fs0,128(a2)
    80208112:	0a              	Address 0x0000000080208112 is out of bounds.


0000000080208113 <lat_sig_size>:
    80208113:	0019                	c.nop	6
	...

0000000080208117 <hello>:
    80208117:	6d6c                	ld	a1,216(a0)
    80208119:	6562                	ld	a0,24(sp)
    8020811b:	636e                	ld	t1,216(sp)
    8020811d:	5f68                	lw	a0,124(a4)
    8020811f:	6c61                	lui	s8,0x18
    80208121:	206c                	fld	fa1,192(s0)
    80208123:	6568                	ld	a0,200(a0)
    80208125:	6c6c                	ld	a1,216(s0)
    80208127:	2422206f          	j	8022a369 <data_start+0x12369>
    8020812b:	2240                	fld	fs0,128(a2)
    8020812d:	0a              	Address 0x000000008020812d is out of bounds.


000000008020812e <hello_size>:
    8020812e:	00000017          	auipc	zero,0x0

0000000080208132 <sh>:
    80208132:	7562                	ld	a0,56(sp)
    80208134:	6f627973          	csrrci	s2,0x6f6,4
    80208138:	2078                	fld	fa4,192(s0)
    8020813a:	24206873          	csrrsi	a6,hcause,0
    8020813e:	0a40                	addi	s0,sp,276

0000000080208140 <sh_size>:
    80208140:	000e                	c.slli	zero,0x3
	...

0000000080208152 <rtcwrite>:
  return len;
}

int
rtcwrite(int user_dst, uint64 addr, int n)
{
    80208152:	1141                	addi	sp,sp,-16
    80208154:	e422                	sd	s0,8(sp)
    80208156:	0800                	addi	s0,sp,16
  return 0;
}
    80208158:	4501                	li	a0,0
    8020815a:	6422                	ld	s0,8(sp)
    8020815c:	0141                	addi	sp,sp,16
    8020815e:	8082                	ret

0000000080208160 <nullread>:

int
nullread(int user_dst,uint64 addr,int n){
    80208160:	1141                	addi	sp,sp,-16
    80208162:	e422                	sd	s0,8(sp)
    80208164:	0800                	addi	s0,sp,16
  return 0;
}
    80208166:	4501                	li	a0,0
    80208168:	6422                	ld	s0,8(sp)
    8020816a:	0141                	addi	sp,sp,16
    8020816c:	8082                	ret

000000008020816e <nullwrite>:

int
nullwrite(int user_dst,uint64 addr,int n){
    8020816e:	1141                	addi	sp,sp,-16
    80208170:	e422                	sd	s0,8(sp)
    80208172:	0800                	addi	s0,sp,16
  return n;
}
    80208174:	8532                	mv	a0,a2
    80208176:	6422                	ld	s0,8(sp)
    80208178:	0141                	addi	sp,sp,16
    8020817a:	8082                	ret

000000008020817c <zerowrite>:
  }
}
  

int
zerowrite(int user_dst,uint64 addr,int n){
    8020817c:	1141                	addi	sp,sp,-16
    8020817e:	e422                	sd	s0,8(sp)
    80208180:	0800                	addi	s0,sp,16
  return n;
}
    80208182:	8532                	mv	a0,a2
    80208184:	6422                	ld	s0,8(sp)
    80208186:	0141                	addi	sp,sp,16
    80208188:	8082                	ret

000000008020818a <urandomwrite>:
  }
  return ret;
}

int
urandomwrite(int user_dst,uint64 addr,int n){
    8020818a:	1141                	addi	sp,sp,-16
    8020818c:	e422                	sd	s0,8(sp)
    8020818e:	0800                	addi	s0,sp,16
  return n;
}
    80208190:	8532                	mv	a0,a2
    80208192:	6422                	ld	s0,8(sp)
    80208194:	0141                	addi	sp,sp,16
    80208196:	8082                	ret

0000000080208198 <rtcread>:
{
    80208198:	7179                	addi	sp,sp,-48
    8020819a:	f406                	sd	ra,40(sp)
    8020819c:	f022                	sd	s0,32(sp)
    8020819e:	ec26                	sd	s1,24(sp)
    802081a0:	1800                	addi	s0,sp,48
    802081a2:	84b2                	mv	s1,a2
  asm volatile("rdtime %0" : "=r" (x) );
    802081a4:	c01027f3          	rdtime	a5
  uint64 myticks = r_time();
    802081a8:	fcf43c23          	sd	a5,-40(s0) # 18fd8 <_entry-0x801e7028>
  int len = MIN(n,sizeof(myticks));
    802081ac:	0006071b          	sext.w	a4,a2
    802081b0:	479d                	li	a5,7
    802081b2:	00e7f363          	bgeu	a5,a4,802081b8 <rtcread+0x20>
    802081b6:	44a1                	li	s1,8
  if(either_copyout(user_dst, addr, &myticks,len)<0){
    802081b8:	86a6                	mv	a3,s1
    802081ba:	fd840613          	addi	a2,s0,-40
    802081be:	00004097          	auipc	ra,0x4
    802081c2:	878080e7          	jalr	-1928(ra) # 8020ba36 <either_copyout>
    return 0;
    802081c6:	fff54513          	not	a0,a0
    802081ca:	957d                	srai	a0,a0,0x3f
}
    802081cc:	8d65                	and	a0,a0,s1
    802081ce:	70a2                	ld	ra,40(sp)
    802081d0:	7402                	ld	s0,32(sp)
    802081d2:	64e2                	ld	s1,24(sp)
    802081d4:	6145                	addi	sp,sp,48
    802081d6:	8082                	ret

00000000802081d8 <zeroread>:
zeroread(int user_dst,uint64 addr,int n){
    802081d8:	1101                	addi	sp,sp,-32
    802081da:	ec06                	sd	ra,24(sp)
    802081dc:	e822                	sd	s0,16(sp)
    802081de:	e426                	sd	s1,8(sp)
    802081e0:	1000                	addi	s0,sp,32
    802081e2:	87aa                	mv	a5,a0
    802081e4:	852e                	mv	a0,a1
    802081e6:	84b2                	mv	s1,a2
  if(user_dst){
    802081e8:	cb99                	beqz	a5,802081fe <zeroread+0x26>
    return zero_out(addr,n);
    802081ea:	85b2                	mv	a1,a2
    802081ec:	00003097          	auipc	ra,0x3
    802081f0:	7b0080e7          	jalr	1968(ra) # 8020b99c <zero_out>
}
    802081f4:	60e2                	ld	ra,24(sp)
    802081f6:	6442                	ld	s0,16(sp)
    802081f8:	64a2                	ld	s1,8(sp)
    802081fa:	6105                	addi	sp,sp,32
    802081fc:	8082                	ret
    memset((void*)addr,0,n);
    802081fe:	4581                	li	a1,0
    80208200:	ffff9097          	auipc	ra,0xffff9
    80208204:	b74080e7          	jalr	-1164(ra) # 80200d74 <memset>
    return n;
    80208208:	8526                	mv	a0,s1
    8020820a:	b7ed                	j	802081f4 <zeroread+0x1c>

000000008020820c <consoleread>:
consoleread(int user_dst,uint64 addr,int n){
    8020820c:	7109                	addi	sp,sp,-384
    8020820e:	fe86                	sd	ra,376(sp)
    80208210:	faa2                	sd	s0,368(sp)
    80208212:	f6a6                	sd	s1,360(sp)
    80208214:	f2ca                	sd	s2,352(sp)
    80208216:	eece                	sd	s3,344(sp)
    80208218:	ead2                	sd	s4,336(sp)
    8020821a:	e6d6                	sd	s5,328(sp)
    8020821c:	e2da                	sd	s6,320(sp)
    8020821e:	fe5e                	sd	s7,312(sp)
    80208220:	fa62                	sd	s8,304(sp)
    80208222:	f666                	sd	s9,296(sp)
    80208224:	f26a                	sd	s10,288(sp)
    80208226:	ee6e                	sd	s11,280(sp)
    80208228:	0300                	addi	s0,sp,384
    8020822a:	e8a43423          	sd	a0,-376(s0)
    8020822e:	8cb2                	mv	s9,a2
  while(n&&!interp){
    80208230:	c65d                	beqz	a2,802082de <consoleread+0xd2>
    80208232:	8d2e                	mv	s10,a1
  int ret = 0;
    80208234:	4d81                	li	s11,0
    for(i=0;i<len;i++){
    80208236:	4901                	li	s2,0
      while((c=sbi_console_getchar())==255);
    80208238:	0ff00993          	li	s3,255
      c = c==13?10:c;
    8020823c:	4c35                	li	s8,13
      if(c == 10){
    8020823e:	4ba9                	li	s7,10
    80208240:	a895                	j	802082b4 <consoleread+0xa8>
      readbuf[i] = c;
    80208242:	009a8023          	sb	s1,0(s5)
      consputc(c);
    80208246:	8526                	mv	a0,s1
    80208248:	00001097          	auipc	ra,0x1
    8020824c:	e30080e7          	jalr	-464(ra) # 80209078 <consputc>
      if(c == 10){
    80208250:	09748563          	beq	s1,s7,802082da <consoleread+0xce>
    for(i=0;i<len;i++){
    80208254:	2a05                	addiw	s4,s4,1
    80208256:	0a85                	addi	s5,s5,1
    80208258:	076a5c63          	bge	s4,s6,802082d0 <consoleread+0xc4>
	SBI_EXT_HSM_HART_STOP,
	SBI_EXT_HSM_HART_STATUS,
};

static int inline sbi_call(uint64 which, uint64 arg0, uint64 arg1, uint64 arg2) {
    register uint64 a0 asm("a0") = arg0;
    8020825c:	854a                	mv	a0,s2
    register uint64 a1 asm("a1") = arg1;
    8020825e:	85ca                	mv	a1,s2
    register uint64 a2 asm("a2") = arg2;
    80208260:	864a                	mv	a2,s2
    register uint64 a7 asm("a7") = which;
    80208262:	4889                	li	a7,2
    asm volatile("ecall"
    80208264:	00000073          	ecall
      while((c=sbi_console_getchar())==255);
    80208268:	0ff57493          	andi	s1,a0,255
    8020826c:	ff3488e3          	beq	s1,s3,8020825c <consoleread+0x50>
      c = c==13?10:c;
    80208270:	fd8499e3          	bne	s1,s8,80208242 <consoleread+0x36>
      readbuf[i] = c;
    80208274:	4729                	li	a4,10
    80208276:	f9040793          	addi	a5,s0,-112
    8020827a:	97d2                	add	a5,a5,s4
    8020827c:	f0e78023          	sb	a4,-256(a5)
      consputc(c);
    80208280:	855e                	mv	a0,s7
    80208282:	00001097          	auipc	ra,0x1
    80208286:	df6080e7          	jalr	-522(ra) # 80209078 <consputc>
        interp = 1;
    8020828a:	4485                	li	s1,1
    if(either_copyout(user_dst,addr,readbuf,i)<0){
    8020828c:	86d2                	mv	a3,s4
    8020828e:	e9040613          	addi	a2,s0,-368
    80208292:	85ea                	mv	a1,s10
    80208294:	e8843503          	ld	a0,-376(s0)
    80208298:	00003097          	auipc	ra,0x3
    8020829c:	79e080e7          	jalr	1950(ra) # 8020ba36 <either_copyout>
    802082a0:	04054063          	bltz	a0,802082e0 <consoleread+0xd4>
    n -= i;
    802082a4:	414c8cbb          	subw	s9,s9,s4
    ret += i;
    802082a8:	014d8dbb          	addw	s11,s11,s4
    addr += i;
    802082ac:	9d52                	add	s10,s10,s4
  while(n&&!interp){
    802082ae:	020c8963          	beqz	s9,802082e0 <consoleread+0xd4>
    802082b2:	e49d                	bnez	s1,802082e0 <consoleread+0xd4>
    int len = MIN(n,CONSOLE_BUF_LEN);
    802082b4:	8b66                	mv	s6,s9
    802082b6:	10000793          	li	a5,256
    802082ba:	0197d463          	bge	a5,s9,802082c2 <consoleread+0xb6>
    802082be:	10000b13          	li	s6,256
    802082c2:	2b01                	sext.w	s6,s6
    for(i=0;i<len;i++){
    802082c4:	01905863          	blez	s9,802082d4 <consoleread+0xc8>
    802082c8:	e9040a93          	addi	s5,s0,-368
    802082cc:	8a4a                	mv	s4,s2
    802082ce:	b779                	j	8020825c <consoleread+0x50>
    802082d0:	84ca                	mv	s1,s2
    802082d2:	bf6d                	j	8020828c <consoleread+0x80>
    802082d4:	8a4a                	mv	s4,s2
    802082d6:	84ca                	mv	s1,s2
    802082d8:	bf55                	j	8020828c <consoleread+0x80>
        interp = 1;
    802082da:	4485                	li	s1,1
    802082dc:	bf45                	j	8020828c <consoleread+0x80>
  int ret = 0;
    802082de:	8db2                	mv	s11,a2
}
    802082e0:	856e                	mv	a0,s11
    802082e2:	70f6                	ld	ra,376(sp)
    802082e4:	7456                	ld	s0,368(sp)
    802082e6:	74b6                	ld	s1,360(sp)
    802082e8:	7916                	ld	s2,352(sp)
    802082ea:	69f6                	ld	s3,344(sp)
    802082ec:	6a56                	ld	s4,336(sp)
    802082ee:	6ab6                	ld	s5,328(sp)
    802082f0:	6b16                	ld	s6,320(sp)
    802082f2:	7bf2                	ld	s7,312(sp)
    802082f4:	7c52                	ld	s8,304(sp)
    802082f6:	7cb2                	ld	s9,296(sp)
    802082f8:	7d12                	ld	s10,288(sp)
    802082fa:	6df2                	ld	s11,280(sp)
    802082fc:	6119                	addi	sp,sp,384
    802082fe:	8082                	ret

0000000080208300 <consolewrite>:
consolewrite(int user_dst,uint64 addr,int n){
    80208300:	710d                	addi	sp,sp,-352
    80208302:	ee86                	sd	ra,344(sp)
    80208304:	eaa2                	sd	s0,336(sp)
    80208306:	e6a6                	sd	s1,328(sp)
    80208308:	e2ca                	sd	s2,320(sp)
    8020830a:	fe4e                	sd	s3,312(sp)
    8020830c:	fa52                	sd	s4,304(sp)
    8020830e:	f656                	sd	s5,296(sp)
    80208310:	f25a                	sd	s6,288(sp)
    80208312:	ee5e                	sd	s7,280(sp)
    80208314:	ea62                	sd	s8,272(sp)
    80208316:	e666                	sd	s9,264(sp)
    80208318:	e26a                	sd	s10,256(sp)
    8020831a:	1280                	addi	s0,sp,352
    8020831c:	8a32                	mv	s4,a2
  while(n){
    8020831e:	c22d                	beqz	a2,80208380 <consolewrite+0x80>
    80208320:	8baa                	mv	s7,a0
    80208322:	8aae                	mv	s5,a1
  int ret = 0;
    80208324:	4b01                	li	s6,0
    int len = MIN(n,CONSOLE_BUF_LEN);
    80208326:	10000c13          	li	s8,256
    8020832a:	10000d13          	li	s10,256
    for(int i=0;i<len;i++){
    8020832e:	4c81                	li	s9,0
    80208330:	a099                	j	80208376 <consolewrite+0x76>
    int len = MIN(n,CONSOLE_BUF_LEN);
    80208332:	2981                	sext.w	s3,s3
    if(either_copyin(user_dst,writebuf,addr,len)<0){
    80208334:	86ce                	mv	a3,s3
    80208336:	8656                	mv	a2,s5
    80208338:	ea040593          	addi	a1,s0,-352
    8020833c:	855e                	mv	a0,s7
    8020833e:	00003097          	auipc	ra,0x3
    80208342:	74e080e7          	jalr	1870(ra) # 8020ba8c <either_copyin>
    80208346:	02054e63          	bltz	a0,80208382 <consolewrite+0x82>
    for(int i=0;i<len;i++){
    8020834a:	01405f63          	blez	s4,80208368 <consolewrite+0x68>
    8020834e:	ea040913          	addi	s2,s0,-352
    80208352:	84e6                	mv	s1,s9
      consputc(writebuf[i]);
    80208354:	00094503          	lbu	a0,0(s2) # 1b000 <_entry-0x801e5000>
    80208358:	00001097          	auipc	ra,0x1
    8020835c:	d20080e7          	jalr	-736(ra) # 80209078 <consputc>
    for(int i=0;i<len;i++){
    80208360:	2485                	addiw	s1,s1,1
    80208362:	0905                	addi	s2,s2,1
    80208364:	ff34c8e3          	blt	s1,s3,80208354 <consolewrite+0x54>
    n -= len;
    80208368:	413a0a3b          	subw	s4,s4,s3
    ret += len;
    8020836c:	01698b3b          	addw	s6,s3,s6
    addr += len;
    80208370:	9ace                	add	s5,s5,s3
  while(n){
    80208372:	000a0863          	beqz	s4,80208382 <consolewrite+0x82>
    int len = MIN(n,CONSOLE_BUF_LEN);
    80208376:	89d2                	mv	s3,s4
    80208378:	fb4c5de3          	bge	s8,s4,80208332 <consolewrite+0x32>
    8020837c:	89ea                	mv	s3,s10
    8020837e:	bf55                	j	80208332 <consolewrite+0x32>
  int ret = 0;
    80208380:	8b32                	mv	s6,a2
}
    80208382:	855a                	mv	a0,s6
    80208384:	60f6                	ld	ra,344(sp)
    80208386:	6456                	ld	s0,336(sp)
    80208388:	64b6                	ld	s1,328(sp)
    8020838a:	6916                	ld	s2,320(sp)
    8020838c:	79f2                	ld	s3,312(sp)
    8020838e:	7a52                	ld	s4,304(sp)
    80208390:	7ab2                	ld	s5,296(sp)
    80208392:	7b12                	ld	s6,288(sp)
    80208394:	6bf2                	ld	s7,280(sp)
    80208396:	6c52                	ld	s8,272(sp)
    80208398:	6cb2                	ld	s9,264(sp)
    8020839a:	6d12                	ld	s10,256(sp)
    8020839c:	6135                	addi	sp,sp,352
    8020839e:	8082                	ret

00000000802083a0 <loadfile>:
{
    802083a0:	715d                	addi	sp,sp,-80
    802083a2:	e486                	sd	ra,72(sp)
    802083a4:	e0a2                	sd	s0,64(sp)
    802083a6:	fc26                	sd	s1,56(sp)
    802083a8:	f84a                	sd	s2,48(sp)
    802083aa:	f44e                	sd	s3,40(sp)
    802083ac:	f052                	sd	s4,32(sp)
    802083ae:	ec56                	sd	s5,24(sp)
    802083b0:	0880                	addi	s0,sp,80
    802083b2:	892a                	mv	s2,a0
    802083b4:	8aae                	mv	s5,a1
    802083b6:	8a32                	mv	s4,a2
    802083b8:	89b6                	mv	s3,a3
  struct dirent* ep = ename(NULL, name, NULL);
    802083ba:	4601                	li	a2,0
    802083bc:	85aa                	mv	a1,a0
    802083be:	4501                	li	a0,0
    802083c0:	ffffc097          	auipc	ra,0xffffc
    802083c4:	0ec080e7          	jalr	236(ra) # 802044ac <ename>
    802083c8:	84aa                	mv	s1,a0
  if(ep){
    802083ca:	cd09                	beqz	a0,802083e4 <loadfile+0x44>
  if(!need)eput(ep);
    802083cc:	04098963          	beqz	s3,8020841e <loadfile+0x7e>
}
    802083d0:	8526                	mv	a0,s1
    802083d2:	60a6                	ld	ra,72(sp)
    802083d4:	6406                	ld	s0,64(sp)
    802083d6:	74e2                	ld	s1,56(sp)
    802083d8:	7942                	ld	s2,48(sp)
    802083da:	79a2                	ld	s3,40(sp)
    802083dc:	7a02                	ld	s4,32(sp)
    802083de:	6ae2                	ld	s5,24(sp)
    802083e0:	6161                	addi	sp,sp,80
    802083e2:	8082                	ret
  ep = create(NULL, name, T_FILE, 0, &err);
    802083e4:	fbc40713          	addi	a4,s0,-68
    802083e8:	4681                	li	a3,0
    802083ea:	4609                	li	a2,2
    802083ec:	85ca                	mv	a1,s2
    802083ee:	4501                	li	a0,0
    802083f0:	ffffc097          	auipc	ra,0xffffc
    802083f4:	1be080e7          	jalr	446(ra) # 802045ae <create>
    802083f8:	84aa                	mv	s1,a0
  if(size)ewrite(ep, 0, (uint64)start, 0, size);
    802083fa:	000a1863          	bnez	s4,8020840a <loadfile+0x6a>
  eunlock(ep);
    802083fe:	8526                	mv	a0,s1
    80208400:	ffffb097          	auipc	ra,0xffffb
    80208404:	6a0080e7          	jalr	1696(ra) # 80203aa0 <eunlock>
    80208408:	b7d1                	j	802083cc <loadfile+0x2c>
  if(size)ewrite(ep, 0, (uint64)start, 0, size);
    8020840a:	000a071b          	sext.w	a4,s4
    8020840e:	4681                	li	a3,0
    80208410:	8656                	mv	a2,s5
    80208412:	4581                	li	a1,0
    80208414:	ffffb097          	auipc	ra,0xffffb
    80208418:	d8c080e7          	jalr	-628(ra) # 802031a0 <ewrite>
    8020841c:	b7cd                	j	802083fe <loadfile+0x5e>
  if(!need)eput(ep);
    8020841e:	8526                	mv	a0,s1
    80208420:	ffffb097          	auipc	ra,0xffffb
    80208424:	6ce080e7          	jalr	1742(ra) # 80203aee <eput>
  return ep;
    80208428:	b765                	j	802083d0 <loadfile+0x30>

000000008020842a <getdevnum>:
int getdevnum(){
    8020842a:	1141                	addi	sp,sp,-16
    8020842c:	e422                	sd	s0,8(sp)
    8020842e:	0800                	addi	s0,sp,16
}
    80208430:	05166517          	auipc	a0,0x5166
    80208434:	b8852503          	lw	a0,-1144(a0) # 8536dfb8 <devnum>
    80208438:	6422                	ld	s0,8(sp)
    8020843a:	0141                	addi	sp,sp,16
    8020843c:	8082                	ret

000000008020843e <allocdev>:
allocdev(char* name,int (*devread)(int, uint64, int),int (*devwrite)(int, uint64, int)){
    8020843e:	7139                	addi	sp,sp,-64
    80208440:	fc06                	sd	ra,56(sp)
    80208442:	f822                	sd	s0,48(sp)
    80208444:	f426                	sd	s1,40(sp)
    80208446:	f04a                	sd	s2,32(sp)
    80208448:	ec4e                	sd	s3,24(sp)
    8020844a:	e852                	sd	s4,16(sp)
    8020844c:	e456                	sd	s5,8(sp)
    8020844e:	0080                	addi	s0,sp,64
    80208450:	8aaa                	mv	s5,a0
  if(devnum == NDEV){
    80208452:	05166517          	auipc	a0,0x5166
    80208456:	b6652503          	lw	a0,-1178(a0) # 8536dfb8 <devnum>
    8020845a:	47a9                	li	a5,10
    8020845c:	06f50e63          	beq	a0,a5,802084d8 <allocdev+0x9a>
    80208460:	8a2e                	mv	s4,a1
    80208462:	8932                	mv	s2,a2
  strncpy(devsw[devnum].name,name,DEV_NAME_MAX+1);
    80208464:	05166497          	auipc	s1,0x5166
    80208468:	91448493          	addi	s1,s1,-1772 # 8536dd78 <devsw>
    8020846c:	00351793          	slli	a5,a0,0x3
    80208470:	8f89                	sub	a5,a5,a0
    80208472:	078e                	slli	a5,a5,0x3
    80208474:	4635                	li	a2,13
    80208476:	85d6                	mv	a1,s5
    80208478:	00f48533          	add	a0,s1,a5
    8020847c:	ffff9097          	auipc	ra,0xffff9
    80208480:	a10080e7          	jalr	-1520(ra) # 80200e8c <strncpy>
  initlock(&devsw[devnum].lk,name);
    80208484:	05166997          	auipc	s3,0x5166
    80208488:	b3498993          	addi	s3,s3,-1228 # 8536dfb8 <devnum>
    8020848c:	0009a503          	lw	a0,0(s3)
    80208490:	00351793          	slli	a5,a0,0x3
    80208494:	8f89                	sub	a5,a5,a0
    80208496:	078e                	slli	a5,a5,0x3
    80208498:	07c1                	addi	a5,a5,16
    8020849a:	85d6                	mv	a1,s5
    8020849c:	00f48533          	add	a0,s1,a5
    802084a0:	00001097          	auipc	ra,0x1
    802084a4:	9f6080e7          	jalr	-1546(ra) # 80208e96 <initlock>
  devsw[devnum].read = devread;
    802084a8:	0009a783          	lw	a5,0(s3)
    802084ac:	00379713          	slli	a4,a5,0x3
    802084b0:	8f1d                	sub	a4,a4,a5
    802084b2:	070e                	slli	a4,a4,0x3
    802084b4:	94ba                	add	s1,s1,a4
    802084b6:	0344b423          	sd	s4,40(s1)
  devsw[devnum].write = devwrite;
    802084ba:	0324b823          	sd	s2,48(s1)
  devnum++;
    802084be:	2785                	addiw	a5,a5,1
    802084c0:	00f9a023          	sw	a5,0(s3)
  return 0;
    802084c4:	4501                	li	a0,0
}
    802084c6:	70e2                	ld	ra,56(sp)
    802084c8:	7442                	ld	s0,48(sp)
    802084ca:	74a2                	ld	s1,40(sp)
    802084cc:	7902                	ld	s2,32(sp)
    802084ce:	69e2                	ld	s3,24(sp)
    802084d0:	6a42                	ld	s4,16(sp)
    802084d2:	6aa2                	ld	s5,8(sp)
    802084d4:	6121                	addi	sp,sp,64
    802084d6:	8082                	ret
    __debug_warn("[dev]no more space for device\n");
    802084d8:	0000c517          	auipc	a0,0xc
    802084dc:	32850513          	addi	a0,a0,808 # 80214800 <rodata_start+0x800>
    802084e0:	00001097          	auipc	ra,0x1
    802084e4:	190080e7          	jalr	400(ra) # 80209670 <__debug_warn>
    return -1;
    802084e8:	557d                	li	a0,-1
    802084ea:	bff1                	j	802084c6 <allocdev+0x88>

00000000802084ec <devinit>:
{
    802084ec:	1101                	addi	sp,sp,-32
    802084ee:	ec06                	sd	ra,24(sp)
    802084f0:	e822                	sd	s0,16(sp)
    802084f2:	1000                	addi	s0,sp,32
  int err = 0;
    802084f4:	fe042623          	sw	zero,-20(s0)
  devnum = 0;
    802084f8:	05166797          	auipc	a5,0x5166
    802084fc:	ac07a023          	sw	zero,-1344(a5) # 8536dfb8 <devnum>
  dev = create(NULL,"/dev",T_DIR,0, &err);
    80208500:	fec40713          	addi	a4,s0,-20
    80208504:	4681                	li	a3,0
    80208506:	4605                	li	a2,1
    80208508:	0000c597          	auipc	a1,0xc
    8020850c:	31858593          	addi	a1,a1,792 # 80214820 <rodata_start+0x820>
    80208510:	4501                	li	a0,0
    80208512:	ffffc097          	auipc	ra,0xffffc
    80208516:	09c080e7          	jalr	156(ra) # 802045ae <create>
    8020851a:	05166797          	auipc	a5,0x5166
    8020851e:	aaa7b323          	sd	a0,-1370(a5) # 8536dfc0 <dev>
  eunlock(dev);
    80208522:	ffffb097          	auipc	ra,0xffffb
    80208526:	57e080e7          	jalr	1406(ra) # 80203aa0 <eunlock>
  loadfile("/etc/passwd", 0, 0, 0);
    8020852a:	4681                	li	a3,0
    8020852c:	4601                	li	a2,0
    8020852e:	4581                	li	a1,0
    80208530:	0000c517          	auipc	a0,0xc
    80208534:	2f850513          	addi	a0,a0,760 # 80214828 <rodata_start+0x828>
    80208538:	00000097          	auipc	ra,0x0
    8020853c:	e68080e7          	jalr	-408(ra) # 802083a0 <loadfile>
  loadfile("/etc/adjtime", 0, 0, 0);
    80208540:	4681                	li	a3,0
    80208542:	4601                	li	a2,0
    80208544:	4581                	li	a1,0
    80208546:	0000c517          	auipc	a0,0xc
    8020854a:	2f250513          	addi	a0,a0,754 # 80214838 <rodata_start+0x838>
    8020854e:	00000097          	auipc	ra,0x0
    80208552:	e52080e7          	jalr	-430(ra) # 802083a0 <loadfile>
  loadfile("/etc/group", 0, 0, 0);
    80208556:	4681                	li	a3,0
    80208558:	4601                	li	a2,0
    8020855a:	4581                	li	a1,0
    8020855c:	0000c517          	auipc	a0,0xc
    80208560:	2ec50513          	addi	a0,a0,748 # 80214848 <rodata_start+0x848>
    80208564:	00000097          	auipc	ra,0x0
    80208568:	e3c080e7          	jalr	-452(ra) # 802083a0 <loadfile>
  loadfile("/bin/ls", 0, 0, 0);
    8020856c:	4681                	li	a3,0
    8020856e:	4601                	li	a2,0
    80208570:	4581                	li	a1,0
    80208572:	0000c517          	auipc	a0,0xc
    80208576:	2e650513          	addi	a0,a0,742 # 80214858 <rodata_start+0x858>
    8020857a:	00000097          	auipc	ra,0x0
    8020857e:	e26080e7          	jalr	-474(ra) # 802083a0 <loadfile>
  loadfile("/etc/localtime", localtime, localtime_size, 0);
    80208582:	4681                	li	a3,0
    80208584:	fffff617          	auipc	a2,0xfffff
    80208588:	5b163603          	ld	a2,1457(a2) # 80207b35 <localtime_size>
    8020858c:	fffff597          	auipc	a1,0xfffff
    80208590:	a9558593          	addi	a1,a1,-1387 # 80207021 <localtime>
    80208594:	0000c517          	auipc	a0,0xc
    80208598:	2cc50513          	addi	a0,a0,716 # 80214860 <rodata_start+0x860>
    8020859c:	00000097          	auipc	ra,0x0
    802085a0:	e04080e7          	jalr	-508(ra) # 802083a0 <loadfile>
  loadfile("/proc/mounts", mounts, mounts_size, 0);
    802085a4:	4681                	li	a3,0
    802085a6:	fffff617          	auipc	a2,0xfffff
    802085aa:	5c363603          	ld	a2,1475(a2) # 80207b69 <mounts_size>
    802085ae:	fffff597          	auipc	a1,0xfffff
    802085b2:	58b58593          	addi	a1,a1,1419 # 80207b39 <mounts>
    802085b6:	0000c517          	auipc	a0,0xc
    802085ba:	2ba50513          	addi	a0,a0,698 # 80214870 <rodata_start+0x870>
    802085be:	00000097          	auipc	ra,0x0
    802085c2:	de2080e7          	jalr	-542(ra) # 802083a0 <loadfile>
  loadfile("/proc/meminfo", meminfo, meminfo_size, 0);
    802085c6:	4681                	li	a3,0
    802085c8:	00000617          	auipc	a2,0x0
    802085cc:	b2e63603          	ld	a2,-1234(a2) # 802080f6 <meminfo_size>
    802085d0:	fffff597          	auipc	a1,0xfffff
    802085d4:	59d58593          	addi	a1,a1,1437 # 80207b6d <meminfo>
    802085d8:	0000c517          	auipc	a0,0xc
    802085dc:	2a850513          	addi	a0,a0,680 # 80214880 <rodata_start+0x880>
    802085e0:	00000097          	auipc	ra,0x0
    802085e4:	dc0080e7          	jalr	-576(ra) # 802083a0 <loadfile>
  loadfile("/server.sh", server_start, server_size, 0);
    802085e8:	4681                	li	a3,0
    802085ea:	fffff617          	auipc	a2,0xfffff
    802085ee:	a1663603          	ld	a2,-1514(a2) # 80207000 <server_size>
    802085f2:	fffff597          	auipc	a1,0xfffff
    802085f6:	9de58593          	addi	a1,a1,-1570 # 80206fd0 <server_start>
    802085fa:	0000c517          	auipc	a0,0xc
    802085fe:	29650513          	addi	a0,a0,662 # 80214890 <rodata_start+0x890>
    80208602:	00000097          	auipc	ra,0x0
    80208606:	d9e080e7          	jalr	-610(ra) # 802083a0 <loadfile>
  loadfile("/client.sh", client_start, client_size, 0);
    8020860a:	4681                	li	a3,0
    8020860c:	fffff617          	auipc	a2,0xfffff
    80208610:	a1163603          	ld	a2,-1519(a2) # 8020701d <client_size>
    80208614:	fffff597          	auipc	a1,0xfffff
    80208618:	9f058593          	addi	a1,a1,-1552 # 80207004 <client_start>
    8020861c:	0000c517          	auipc	a0,0xc
    80208620:	28450513          	addi	a0,a0,644 # 802148a0 <rodata_start+0x8a0>
    80208624:	00000097          	auipc	ra,0x0
    80208628:	d7c080e7          	jalr	-644(ra) # 802083a0 <loadfile>
  loadfile("/lat_sig", lat_sig, lat_sig_size, 0);
    8020862c:	4681                	li	a3,0
    8020862e:	00000617          	auipc	a2,0x0
    80208632:	ae563603          	ld	a2,-1307(a2) # 80208113 <lat_sig_size>
    80208636:	00000597          	auipc	a1,0x0
    8020863a:	ac458593          	addi	a1,a1,-1340 # 802080fa <lat_sig>
    8020863e:	0000c517          	auipc	a0,0xc
    80208642:	27250513          	addi	a0,a0,626 # 802148b0 <rodata_start+0x8b0>
    80208646:	00000097          	auipc	ra,0x0
    8020864a:	d5a080e7          	jalr	-678(ra) # 802083a0 <loadfile>
  loadfile("/tmp/hello", hello, hello_size, 0);
    8020864e:	4681                	li	a3,0
    80208650:	00000617          	auipc	a2,0x0
    80208654:	ade63603          	ld	a2,-1314(a2) # 8020812e <hello_size>
    80208658:	00000597          	auipc	a1,0x0
    8020865c:	abf58593          	addi	a1,a1,-1345 # 80208117 <hello>
    80208660:	0000c517          	auipc	a0,0xc
    80208664:	26050513          	addi	a0,a0,608 # 802148c0 <rodata_start+0x8c0>
    80208668:	00000097          	auipc	ra,0x0
    8020866c:	d38080e7          	jalr	-712(ra) # 802083a0 <loadfile>
  loadfile("/bin/sh", sh, sh_size, 0);
    80208670:	4681                	li	a3,0
    80208672:	00000617          	auipc	a2,0x0
    80208676:	ace63603          	ld	a2,-1330(a2) # 80208140 <sh_size>
    8020867a:	00000597          	auipc	a1,0x0
    8020867e:	ab858593          	addi	a1,a1,-1352 # 80208132 <sh>
    80208682:	0000c517          	auipc	a0,0xc
    80208686:	24e50513          	addi	a0,a0,590 # 802148d0 <rodata_start+0x8d0>
    8020868a:	00000097          	auipc	ra,0x0
    8020868e:	d16080e7          	jalr	-746(ra) # 802083a0 <loadfile>
  selfexe = loadfile("/proc/self/exe", 0, 0, 1);
    80208692:	4685                	li	a3,1
    80208694:	4601                	li	a2,0
    80208696:	4581                	li	a1,0
    80208698:	0000c517          	auipc	a0,0xc
    8020869c:	24050513          	addi	a0,a0,576 # 802148d8 <rodata_start+0x8d8>
    802086a0:	00000097          	auipc	ra,0x0
    802086a4:	d00080e7          	jalr	-768(ra) # 802083a0 <loadfile>
    802086a8:	05166797          	auipc	a5,0x5166
    802086ac:	90a7b423          	sd	a0,-1784(a5) # 8536dfb0 <selfexe>
  __debug_info("devinit\n");
    802086b0:	0000c517          	auipc	a0,0xc
    802086b4:	23850513          	addi	a0,a0,568 # 802148e8 <rodata_start+0x8e8>
    802086b8:	00001097          	auipc	ra,0x1
    802086bc:	df2080e7          	jalr	-526(ra) # 802094aa <__debug_info>
  memset(devsw,0,NDEV*sizeof(struct devsw));
    802086c0:	23000613          	li	a2,560
    802086c4:	4581                	li	a1,0
    802086c6:	05165517          	auipc	a0,0x5165
    802086ca:	6b250513          	addi	a0,a0,1714 # 8536dd78 <devsw>
    802086ce:	ffff8097          	auipc	ra,0xffff8
    802086d2:	6a6080e7          	jalr	1702(ra) # 80200d74 <memset>
  allocdev("console",consoleread,consolewrite);
    802086d6:	00000617          	auipc	a2,0x0
    802086da:	c2a60613          	addi	a2,a2,-982 # 80208300 <consolewrite>
    802086de:	00000597          	auipc	a1,0x0
    802086e2:	b2e58593          	addi	a1,a1,-1234 # 8020820c <consoleread>
    802086e6:	0000c517          	auipc	a0,0xc
    802086ea:	21250513          	addi	a0,a0,530 # 802148f8 <rodata_start+0x8f8>
    802086ee:	00000097          	auipc	ra,0x0
    802086f2:	d50080e7          	jalr	-688(ra) # 8020843e <allocdev>
  allocdev("tty",consoleread,consolewrite);
    802086f6:	00000617          	auipc	a2,0x0
    802086fa:	c0a60613          	addi	a2,a2,-1014 # 80208300 <consolewrite>
    802086fe:	00000597          	auipc	a1,0x0
    80208702:	b0e58593          	addi	a1,a1,-1266 # 8020820c <consoleread>
    80208706:	0000c517          	auipc	a0,0xc
    8020870a:	1fa50513          	addi	a0,a0,506 # 80214900 <rodata_start+0x900>
    8020870e:	00000097          	auipc	ra,0x0
    80208712:	d30080e7          	jalr	-720(ra) # 8020843e <allocdev>
  allocdev("null",nullread,nullwrite);
    80208716:	00000617          	auipc	a2,0x0
    8020871a:	a5860613          	addi	a2,a2,-1448 # 8020816e <nullwrite>
    8020871e:	00000597          	auipc	a1,0x0
    80208722:	a4258593          	addi	a1,a1,-1470 # 80208160 <nullread>
    80208726:	0000c517          	auipc	a0,0xc
    8020872a:	1e250513          	addi	a0,a0,482 # 80214908 <rodata_start+0x908>
    8020872e:	00000097          	auipc	ra,0x0
    80208732:	d10080e7          	jalr	-752(ra) # 8020843e <allocdev>
  allocdev("zero",zeroread,zerowrite);
    80208736:	00000617          	auipc	a2,0x0
    8020873a:	a4660613          	addi	a2,a2,-1466 # 8020817c <zerowrite>
    8020873e:	00000597          	auipc	a1,0x0
    80208742:	a9a58593          	addi	a1,a1,-1382 # 802081d8 <zeroread>
    80208746:	0000c517          	auipc	a0,0xc
    8020874a:	1ca50513          	addi	a0,a0,458 # 80214910 <rodata_start+0x910>
    8020874e:	00000097          	auipc	ra,0x0
    80208752:	cf0080e7          	jalr	-784(ra) # 8020843e <allocdev>
  allocdev("rtc",rtcread,rtcwrite);
    80208756:	00000617          	auipc	a2,0x0
    8020875a:	9fc60613          	addi	a2,a2,-1540 # 80208152 <rtcwrite>
    8020875e:	00000597          	auipc	a1,0x0
    80208762:	a3a58593          	addi	a1,a1,-1478 # 80208198 <rtcread>
    80208766:	0000c517          	auipc	a0,0xc
    8020876a:	1b250513          	addi	a0,a0,434 # 80214918 <rodata_start+0x918>
    8020876e:	00000097          	auipc	ra,0x0
    80208772:	cd0080e7          	jalr	-816(ra) # 8020843e <allocdev>
  allocdev("urandom",urandomread,urandomwrite);
    80208776:	00000617          	auipc	a2,0x0
    8020877a:	a1460613          	addi	a2,a2,-1516 # 8020818a <urandomwrite>
    8020877e:	00000597          	auipc	a1,0x0
    80208782:	09258593          	addi	a1,a1,146 # 80208810 <urandomread>
    80208786:	0000c517          	auipc	a0,0xc
    8020878a:	19a50513          	addi	a0,a0,410 # 80214920 <rodata_start+0x920>
    8020878e:	00000097          	auipc	ra,0x0
    80208792:	cb0080e7          	jalr	-848(ra) # 8020843e <allocdev>
}
    80208796:	4501                	li	a0,0
    80208798:	60e2                	ld	ra,24(sp)
    8020879a:	6442                	ld	s0,16(sp)
    8020879c:	6105                	addi	sp,sp,32
    8020879e:	8082                	ret

00000000802087a0 <devlookup>:
{
    802087a0:	7179                	addi	sp,sp,-48
    802087a2:	f406                	sd	ra,40(sp)
    802087a4:	f022                	sd	s0,32(sp)
    802087a6:	ec26                	sd	s1,24(sp)
    802087a8:	e84a                	sd	s2,16(sp)
    802087aa:	e44e                	sd	s3,8(sp)
    802087ac:	e052                	sd	s4,0(sp)
    802087ae:	1800                	addi	s0,sp,48
    802087b0:	89aa                	mv	s3,a0
  for(int i = 0;i < NDEV;i++){
    802087b2:	05165917          	auipc	s2,0x5165
    802087b6:	5c690913          	addi	s2,s2,1478 # 8536dd78 <devsw>
    802087ba:	4481                	li	s1,0
    802087bc:	4a29                	li	s4,10
    if(strncmp(name,devsw[i].name,DEV_NAME_MAX+1)==0){
    802087be:	4635                	li	a2,13
    802087c0:	85ca                	mv	a1,s2
    802087c2:	854e                	mv	a0,s3
    802087c4:	ffff8097          	auipc	ra,0xffff8
    802087c8:	68c080e7          	jalr	1676(ra) # 80200e50 <strncmp>
    802087cc:	c519                	beqz	a0,802087da <devlookup+0x3a>
  for(int i = 0;i < NDEV;i++){
    802087ce:	2485                	addiw	s1,s1,1
    802087d0:	03890913          	addi	s2,s2,56
    802087d4:	ff4495e3          	bne	s1,s4,802087be <devlookup+0x1e>
  return -1;
    802087d8:	54fd                	li	s1,-1
}
    802087da:	8526                	mv	a0,s1
    802087dc:	70a2                	ld	ra,40(sp)
    802087de:	7402                	ld	s0,32(sp)
    802087e0:	64e2                	ld	s1,24(sp)
    802087e2:	6942                	ld	s2,16(sp)
    802087e4:	69a2                	ld	s3,8(sp)
    802087e6:	6a02                	ld	s4,0(sp)
    802087e8:	6145                	addi	sp,sp,48
    802087ea:	8082                	ret

00000000802087ec <getrandom>:
getrandom(){
    802087ec:	1141                	addi	sp,sp,-16
    802087ee:	e422                	sd	s0,8(sp)
    802087f0:	0800                	addi	s0,sp,16
  randomseed++;
    802087f2:	05165797          	auipc	a5,0x5165
    802087f6:	7b678793          	addi	a5,a5,1974 # 8536dfa8 <randomseed>
    802087fa:	6388                	ld	a0,0(a5)
    802087fc:	0505                	addi	a0,a0,1
    802087fe:	e388                	sd	a0,0(a5)
  return randomseed*0x1938e1%0x100;
    80208800:	0055179b          	slliw	a5,a0,0x5
    80208804:	9d1d                	subw	a0,a0,a5
}
    80208806:	0ff57513          	andi	a0,a0,255
    8020880a:	6422                	ld	s0,8(sp)
    8020880c:	0141                	addi	sp,sp,16
    8020880e:	8082                	ret

0000000080208810 <urandomread>:
urandomread(int user_dst,uint64 addr,int n){
    80208810:	7139                	addi	sp,sp,-64
    80208812:	fc06                	sd	ra,56(sp)
    80208814:	f822                	sd	s0,48(sp)
    80208816:	f426                	sd	s1,40(sp)
    80208818:	f04a                	sd	s2,32(sp)
    8020881a:	ec4e                	sd	s3,24(sp)
    8020881c:	e852                	sd	s4,16(sp)
    8020881e:	0080                	addi	s0,sp,64
  while(n){
    80208820:	ca31                	beqz	a2,80208874 <urandomread+0x64>
    80208822:	8a2a                	mv	s4,a0
    80208824:	84ae                	mv	s1,a1
    80208826:	fff6099b          	addiw	s3,a2,-1
    8020882a:	1982                	slli	s3,s3,0x20
    8020882c:	0209d993          	srli	s3,s3,0x20
    80208830:	00158793          	addi	a5,a1,1
    80208834:	99be                	add	s3,s3,a5
  int ret = 0;
    80208836:	4901                	li	s2,0
    char c= getrandom();
    80208838:	00000097          	auipc	ra,0x0
    8020883c:	fb4080e7          	jalr	-76(ra) # 802087ec <getrandom>
    80208840:	fca407a3          	sb	a0,-49(s0)
    if(either_copyout(user_dst, addr, &c, 1)<0){
    80208844:	4685                	li	a3,1
    80208846:	fcf40613          	addi	a2,s0,-49
    8020884a:	85a6                	mv	a1,s1
    8020884c:	8552                	mv	a0,s4
    8020884e:	00003097          	auipc	ra,0x3
    80208852:	1e8080e7          	jalr	488(ra) # 8020ba36 <either_copyout>
    80208856:	00054663          	bltz	a0,80208862 <urandomread+0x52>
    ret += 1;
    8020885a:	2905                	addiw	s2,s2,1
    addr += 1;
    8020885c:	0485                	addi	s1,s1,1
  while(n){
    8020885e:	fd349de3          	bne	s1,s3,80208838 <urandomread+0x28>
}
    80208862:	854a                	mv	a0,s2
    80208864:	70e2                	ld	ra,56(sp)
    80208866:	7442                	ld	s0,48(sp)
    80208868:	74a2                	ld	s1,40(sp)
    8020886a:	7902                	ld	s2,32(sp)
    8020886c:	69e2                	ld	s3,24(sp)
    8020886e:	6a42                	ld	s4,16(sp)
    80208870:	6121                	addi	sp,sp,64
    80208872:	8082                	ret
  int ret = 0;
    80208874:	8932                	mv	s2,a2
    80208876:	b7f5                	j	80208862 <urandomread+0x52>

0000000080208878 <devkstat>:

int 
devkstat(struct devsw* mydev, struct kstat* st){
    80208878:	1101                	addi	sp,sp,-32
    8020887a:	ec06                	sd	ra,24(sp)
    8020887c:	e822                	sd	s0,16(sp)
    8020887e:	e426                	sd	s1,8(sp)
    80208880:	1000                	addi	s0,sp,32
    80208882:	84ae                	mv	s1,a1
    st->st_dev = mydev-devsw;
    80208884:	05165797          	auipc	a5,0x5165
    80208888:	4f478793          	addi	a5,a5,1268 # 8536dd78 <devsw>
    8020888c:	40f507b3          	sub	a5,a0,a5
    80208890:	878d                	srai	a5,a5,0x3
    80208892:	0000f717          	auipc	a4,0xf
    80208896:	f6673703          	ld	a4,-154(a4) # 802177f8 <erodata+0x8>
    8020889a:	02e787b3          	mul	a5,a5,a4
    8020889e:	e19c                	sd	a5,0(a1)
    st->st_size = 0;
    802088a0:	0205b823          	sd	zero,48(a1)
    st->st_blksize = 128;
    802088a4:	08000793          	li	a5,128
    802088a8:	dd9c                	sw	a5,56(a1)
    st->st_blocks = 0;
    802088aa:	0405b023          	sd	zero,64(a1)
    st->st_atime_nsec = 0;
    802088ae:	0405b823          	sd	zero,80(a1)
    st->st_atime_sec = 0;
    802088b2:	0405b423          	sd	zero,72(a1)
    st->st_ctime_nsec = 0;
    802088b6:	0605b823          	sd	zero,112(a1)
    st->st_ctime_sec = 0;
    802088ba:	0605b423          	sd	zero,104(a1)
    st->st_mtime_nsec = 0;
    802088be:	0605b023          	sd	zero,96(a1)
    st->st_mtime_sec = 0;
    802088c2:	0405bc23          	sd	zero,88(a1)
    st->st_uid = 0;
    802088c6:	0005ac23          	sw	zero,24(a1)
    st->st_gid = 0;
    802088ca:	0005ae23          	sw	zero,28(a1)
    st->st_rdev = 0;
    802088ce:	0205b023          	sd	zero,32(a1)
    st->st_nlink = 1;
    802088d2:	4785                	li	a5,1
    802088d4:	c9dc                	sw	a5,20(a1)
    st->st_ino = hashpath(mydev->name);
    802088d6:	ffffc097          	auipc	ra,0xffffc
    802088da:	a98080e7          	jalr	-1384(ra) # 8020436e <hashpath>
    802088de:	e488                	sd	a0,8(s1)
    st->st_mode = S_IFCHR;
    802088e0:	6789                	lui	a5,0x2
    802088e2:	c89c                	sw	a5,16(s1)
  return 0;
}
    802088e4:	4501                	li	a0,0
    802088e6:	60e2                	ld	ra,24(sp)
    802088e8:	6442                	ld	s0,16(sp)
    802088ea:	64a2                	ld	s1,8(sp)
    802088ec:	6105                	addi	sp,sp,32
    802088ee:	8082                	ret

00000000802088f0 <swtch>:
    802088f0:	00153023          	sd	ra,0(a0)
    802088f4:	00253423          	sd	sp,8(a0)
    802088f8:	e900                	sd	s0,16(a0)
    802088fa:	ed04                	sd	s1,24(a0)
    802088fc:	03253023          	sd	s2,32(a0)
    80208900:	03353423          	sd	s3,40(a0)
    80208904:	03453823          	sd	s4,48(a0)
    80208908:	03553c23          	sd	s5,56(a0)
    8020890c:	05653023          	sd	s6,64(a0)
    80208910:	05753423          	sd	s7,72(a0)
    80208914:	05853823          	sd	s8,80(a0)
    80208918:	05953c23          	sd	s9,88(a0)
    8020891c:	07a53023          	sd	s10,96(a0)
    80208920:	07b53423          	sd	s11,104(a0)
    80208924:	0005b083          	ld	ra,0(a1)
    80208928:	0085b103          	ld	sp,8(a1)
    8020892c:	6980                	ld	s0,16(a1)
    8020892e:	6d84                	ld	s1,24(a1)
    80208930:	0205b903          	ld	s2,32(a1)
    80208934:	0285b983          	ld	s3,40(a1)
    80208938:	0305ba03          	ld	s4,48(a1)
    8020893c:	0385ba83          	ld	s5,56(a1)
    80208940:	0405bb03          	ld	s6,64(a1)
    80208944:	0485bb83          	ld	s7,72(a1)
    80208948:	0505bc03          	ld	s8,80(a1)
    8020894c:	0585bc83          	ld	s9,88(a1)
    80208950:	0605bd03          	ld	s10,96(a1)
    80208954:	0685bd83          	ld	s11,104(a1)
    80208958:	8082                	ret

000000008020895a <send_signal>:
// the list, we must make sure that there's no sigaction for 
// the same signum in the sigaction list. 


void send_signal(int signum)
{
    8020895a:	1101                	addi	sp,sp,-32
    8020895c:	ec06                	sd	ra,24(sp)
    8020895e:	e822                	sd	s0,16(sp)
    80208960:	e426                	sd	s1,8(sp)
    80208962:	1000                	addi	s0,sp,32
    80208964:	84aa                	mv	s1,a0
	struct proc* p = myproc();
    80208966:	00004097          	auipc	ra,0x4
    8020896a:	a4c080e7          	jalr	-1460(ra) # 8020c3b2 <myproc>
	p->killed = signum;
    8020896e:	dd04                	sw	s1,56(a0)
	p->sig_pending.__val[0] |= 1ul << signum;
    80208970:	4785                	li	a5,1
    80208972:	009797b3          	sll	a5,a5,s1
    80208976:	19853483          	ld	s1,408(a0)
    8020897a:	8cdd                	or	s1,s1,a5
    8020897c:	18953c23          	sd	s1,408(a0)
	// sighandle();
}
    80208980:	60e2                	ld	ra,24(sp)
    80208982:	6442                	ld	s0,16(sp)
    80208984:	64a2                	ld	s1,8(sp)
    80208986:	6105                	addi	sp,sp,32
    80208988:	8082                	ret

000000008020898a <set_sigaction>:

int set_sigaction(
	int signum, 
	struct sigaction const *act, 
	struct sigaction *oldact 
) {
    8020898a:	7179                	addi	sp,sp,-48
    8020898c:	f406                	sd	ra,40(sp)
    8020898e:	f022                	sd	s0,32(sp)
    80208990:	ec26                	sd	s1,24(sp)
    80208992:	e84a                	sd	s2,16(sp)
    80208994:	e44e                	sd	s3,8(sp)
    80208996:	e052                	sd	s4,0(sp)
    80208998:	1800                	addi	s0,sp,48
    8020899a:	84aa                	mv	s1,a0
    8020899c:	892e                	mv	s2,a1
    8020899e:	89b2                	mv	s3,a2
	struct proc *p = myproc();
    802089a0:	00004097          	auipc	ra,0x4
    802089a4:	a12080e7          	jalr	-1518(ra) # 8020c3b2 <myproc>
    802089a8:	8a2a                	mv	s4,a0
	ksigaction_t const* tmp = p->sig_act;
    802089aa:	18853783          	ld	a5,392(a0)
	while (NULL != tmp) {
    802089ae:	c791                	beqz	a5,802089ba <set_sigaction+0x30>
		if (tmp->signum == signum) {
    802089b0:	5398                	lw	a4,32(a5)
    802089b2:	02970563          	beq	a4,s1,802089dc <set_sigaction+0x52>
		tmp = tmp->next;
    802089b6:	639c                	ld	a5,0(a5)
	while (NULL != tmp) {
    802089b8:	ffe5                	bnez	a5,802089b0 <set_sigaction+0x26>

	ksigaction_t *tmp = __search_sig(p, signum);
	// printf("pid %d search %d find %p\n", p->pid, signum, tmp);

	if (NULL != oldact && NULL != tmp) {
    802089ba:	04098563          	beqz	s3,80208a04 <set_sigaction+0x7a>
		// for (int i = 0; i < len; i ++) {
		// 	oldact->sa_mask.__val[i] = tmp->sigact.sa_mask.__val[i];
		// }
	}

	if (NULL != act) {
    802089be:	02090a63          	beqz	s2,802089f2 <set_sigaction+0x68>
		if (NULL == tmp) {
			// insert a new action into the proc 
			// ksigaction_t *new = kmalloc(sizeof(ksigaction_t));
            		ksigaction_t *new = kmalloc(sizeof(ksigaction_t));
    802089c2:	02800513          	li	a0,40
    802089c6:	00001097          	auipc	ra,0x1
    802089ca:	5f6080e7          	jalr	1526(ra) # 80209fbc <kmalloc>
    802089ce:	87aa                	mv	a5,a0
	ksig->next = p->sig_act;
    802089d0:	188a3703          	ld	a4,392(s4)
    802089d4:	e118                	sd	a4,0(a0)
	p->sig_act = ksig;
    802089d6:	18aa3423          	sd	a0,392(s4)
}
    802089da:	a801                	j	802089ea <set_sigaction+0x60>
	if (NULL != oldact && NULL != tmp) {
    802089dc:	02098763          	beqz	s3,80208a0a <set_sigaction+0x80>
		oldact->__sigaction_handler = tmp->sigact.__sigaction_handler;
    802089e0:	6798                	ld	a4,8(a5)
    802089e2:	00e9b023          	sd	a4,0(s3)
	if (NULL != act) {
    802089e6:	00090663          	beqz	s2,802089f2 <set_sigaction+0x68>
			__insert_sig(p, new);
			tmp = new;
		}

		// tmp->sigact.sa_flags = act->sa_flags;
		tmp->sigact.__sigaction_handler = act->__sigaction_handler;
    802089ea:	00093703          	ld	a4,0(s2)
    802089ee:	e798                	sd	a4,8(a5)
		// for (int i = 0; i < len; i ++) {
		// 	tmp->sigact.sa_mask.__val[i] = act->sa_mask.__val[i];
		// }
		tmp->signum = signum;
    802089f0:	d384                	sw	s1,32(a5)
	}


	return 0;
}
    802089f2:	4501                	li	a0,0
    802089f4:	70a2                	ld	ra,40(sp)
    802089f6:	7402                	ld	s0,32(sp)
    802089f8:	64e2                	ld	s1,24(sp)
    802089fa:	6942                	ld	s2,16(sp)
    802089fc:	69a2                	ld	s3,8(sp)
    802089fe:	6a02                	ld	s4,0(sp)
    80208a00:	6145                	addi	sp,sp,48
    80208a02:	8082                	ret
	if (NULL != act) {
    80208a04:	fe0907e3          	beqz	s2,802089f2 <set_sigaction+0x68>
    80208a08:	bf6d                	j	802089c2 <set_sigaction+0x38>
    80208a0a:	fe0910e3          	bnez	s2,802089ea <set_sigaction+0x60>
    80208a0e:	b7d5                	j	802089f2 <set_sigaction+0x68>

0000000080208a10 <sigprocmask>:

int sigprocmask(
	int how, 
	__sigset_t *set, 
	__sigset_t *oldset
) {
    80208a10:	7179                	addi	sp,sp,-48
    80208a12:	f406                	sd	ra,40(sp)
    80208a14:	f022                	sd	s0,32(sp)
    80208a16:	ec26                	sd	s1,24(sp)
    80208a18:	e84a                	sd	s2,16(sp)
    80208a1a:	e44e                	sd	s3,8(sp)
    80208a1c:	1800                	addi	s0,sp,48
    80208a1e:	84aa                	mv	s1,a0
    80208a20:	89ae                	mv	s3,a1
    80208a22:	8932                	mv	s2,a2
	struct proc *p = myproc();
    80208a24:	00004097          	auipc	ra,0x4
    80208a28:	98e080e7          	jalr	-1650(ra) # 8020c3b2 <myproc>


	for (int i = 0; i < SIGSET_LEN; i ++) {
		if (NULL != oldset) {
    80208a2c:	00090663          	beqz	s2,80208a38 <sigprocmask+0x28>
			oldset->__val[i] = p->sig_set.__val[i];
    80208a30:	19053783          	ld	a5,400(a0)
    80208a34:	00f93023          	sd	a5,0(s2)
		}

		switch (how) {
    80208a38:	4785                	li	a5,1
    80208a3a:	02f48c63          	beq	s1,a5,80208a72 <sigprocmask+0x62>
    80208a3e:	4789                	li	a5,2
    80208a40:	04f48363          	beq	s1,a5,80208a86 <sigprocmask+0x76>
    80208a44:	cc99                	beqz	s1,80208a62 <sigprocmask+0x52>
				// panic("invalid how\n");
		}
	}

	// SIGTERM cannot be masked 
	p->sig_set.__val[0] &= 1ul << SIGTERM;
    80208a46:	19053783          	ld	a5,400(a0)
    80208a4a:	6721                	lui	a4,0x8
    80208a4c:	8ff9                	and	a5,a5,a4
    80208a4e:	18f53823          	sd	a5,400(a0)

	return 0;
}
    80208a52:	4501                	li	a0,0
    80208a54:	70a2                	ld	ra,40(sp)
    80208a56:	7402                	ld	s0,32(sp)
    80208a58:	64e2                	ld	s1,24(sp)
    80208a5a:	6942                	ld	s2,16(sp)
    80208a5c:	69a2                	ld	s3,8(sp)
    80208a5e:	6145                	addi	sp,sp,48
    80208a60:	8082                	ret
				p->sig_set.__val[i] |= set->__val[i];
    80208a62:	19053783          	ld	a5,400(a0)
    80208a66:	0009b703          	ld	a4,0(s3)
    80208a6a:	8fd9                	or	a5,a5,a4
    80208a6c:	18f53823          	sd	a5,400(a0)
				break;
    80208a70:	bfd9                	j	80208a46 <sigprocmask+0x36>
				p->sig_set.__val[i] &= ~(set->__val[i]);
    80208a72:	0009b783          	ld	a5,0(s3)
    80208a76:	fff7c713          	not	a4,a5
    80208a7a:	19053783          	ld	a5,400(a0)
    80208a7e:	8ff9                	and	a5,a5,a4
    80208a80:	18f53823          	sd	a5,400(a0)
				break;
    80208a84:	b7c9                	j	80208a46 <sigprocmask+0x36>
				p->sig_set.__val[i] = set->__val[i];
    80208a86:	0009b783          	ld	a5,0(s3)
    80208a8a:	18f53823          	sd	a5,400(a0)
				break;
    80208a8e:	bf65                	j	80208a46 <sigprocmask+0x36>

0000000080208a90 <sighandle>:

extern char sig_trampoline[];
extern char sig_handler[];
extern char default_sigaction[];

void sighandle(void) {
    80208a90:	7179                	addi	sp,sp,-48
    80208a92:	f406                	sd	ra,40(sp)
    80208a94:	f022                	sd	s0,32(sp)
    80208a96:	ec26                	sd	s1,24(sp)
    80208a98:	e84a                	sd	s2,16(sp)
    80208a9a:	e44e                	sd	s3,8(sp)
    80208a9c:	e052                	sd	s4,0(sp)
    80208a9e:	1800                	addi	s0,sp,48
	struct proc *p = myproc();
    80208aa0:	00004097          	auipc	ra,0x4
    80208aa4:	912080e7          	jalr	-1774(ra) # 8020c3b2 <myproc>

	int signum = 0;
	if (p->killed) {
    80208aa8:	03852903          	lw	s2,56(a0)
    80208aac:	10090163          	beqz	s2,80208bae <sighandle+0x11e>
    80208ab0:	89aa                	mv	s3,a0
		signum = p->killed;

		const int len = sizeof(unsigned long) * 8;
		int i = (unsigned long)(p->killed) / len;
    80208ab2:	40695593          	srai	a1,s2,0x6
		int bit = (unsigned long)(p->killed) % len;
    80208ab6:	03f97613          	andi	a2,s2,63
		p->sig_pending.__val[i] &= ~(1ul << bit++);
    80208aba:	00160793          	addi	a5,a2,1
    80208abe:	00359713          	slli	a4,a1,0x3
    80208ac2:	972a                	add	a4,a4,a0
    80208ac4:	4685                	li	a3,1
    80208ac6:	00c696b3          	sll	a3,a3,a2
    80208aca:	fff6c693          	not	a3,a3
    80208ace:	19873603          	ld	a2,408(a4) # 8198 <_entry-0x801f7e68>
    80208ad2:	8ef1                	and	a3,a3,a2
    80208ad4:	18d73c23          	sd	a3,408(a4)
		p->killed = 0;
    80208ad8:	02052c23          	sw	zero,56(a0)

		for (; i < SIGSET_LEN; i ++) {
			while (bit < len) {
    80208adc:	03f00513          	li	a0,63
    80208ae0:	04000613          	li	a2,64
		for (; i < SIGSET_LEN; i ++) {
    80208ae4:	4805                	li	a6,1
    80208ae6:	02b04463          	bgtz	a1,80208b0e <sighandle+0x7e>
			while (bit < len) {
    80208aea:	0cf54a63          	blt	a0,a5,80208bbe <sighandle+0x12e>
				if (p->sig_pending.__val[i] & (1ul << bit)) {
    80208aee:	00f6d733          	srl	a4,a3,a5
    80208af2:	8b05                	andi	a4,a4,1
    80208af4:	eb01                	bnez	a4,80208b04 <sighandle+0x74>
					p->killed = i * len + bit; // p->killed
					goto start_handle;
				}
				bit ++;
    80208af6:	2785                	addiw	a5,a5,1
			while (bit < len) {
    80208af8:	0cc78363          	beq	a5,a2,80208bbe <sighandle+0x12e>
				if (p->sig_pending.__val[i] & (1ul << bit)) {
    80208afc:	00f6d733          	srl	a4,a3,a5
    80208b00:	8b05                	andi	a4,a4,1
    80208b02:	db75                	beqz	a4,80208af6 <sighandle+0x66>
					p->killed = i * len + bit; // p->killed
    80208b04:	0065959b          	slliw	a1,a1,0x6
    80208b08:	9fad                	addw	a5,a5,a1
    80208b0a:	02f9ac23          	sw	a5,56(s3)
	ksigaction_t const* tmp = p->sig_act;
    80208b0e:	1889b483          	ld	s1,392(s3)
	while (NULL != tmp) {
    80208b12:	12048363          	beqz	s1,80208c38 <sighandle+0x1a8>
		if (tmp->signum == signum) {
    80208b16:	509c                	lw	a5,32(s1)
    80208b18:	0b278763          	beq	a5,s2,80208bc6 <sighandle+0x136>
		tmp = tmp->next;
    80208b1c:	6084                	ld	s1,0(s1)
	while (NULL != tmp) {
    80208b1e:	fce5                	bnez	s1,80208b16 <sighandle+0x86>

	// fast skip 
	// if (NULL == sigact && SIGCHLD == signum) {
	// 	return ;
	// }
	if (SIGCHLD == signum && 
    80208b20:	47c5                	li	a5,17
    80208b22:	08f90663          	beq	s2,a5,80208bae <sighandle+0x11e>
		(NULL == sigact || NULL == sigact->sigact.__sigaction_handler.sa_handler)) {
			return;
	}

	frame = kmalloc(sizeof(struct sig_frame));
    80208b26:	4561                	li	a0,24
    80208b28:	00001097          	auipc	ra,0x1
    80208b2c:	494080e7          	jalr	1172(ra) # 80209fbc <kmalloc>
    80208b30:	8a2a                	mv	s4,a0
	frame->tf = kmalloc(sizeof(struct trapframe));
    80208b32:	12000513          	li	a0,288
    80208b36:	00001097          	auipc	ra,0x1
    80208b3a:	486080e7          	jalr	1158(ra) # 80209fbc <kmalloc>
    80208b3e:	00aa3423          	sd	a0,8(s4)
	// 		p->sig_set.__val[i] &= sigact->sigact.sa_mask.__val[i];
	// 	}
	// }

	// store proc's trapframe 
	*(frame->tf) = *(p->trapframe);
    80208b42:	0689b783          	ld	a5,104(s3)
    80208b46:	12078813          	addi	a6,a5,288 # 2120 <_entry-0x801fdee0>
    80208b4a:	638c                	ld	a1,0(a5)
    80208b4c:	6790                	ld	a2,8(a5)
    80208b4e:	6b94                	ld	a3,16(a5)
    80208b50:	6f98                	ld	a4,24(a5)
    80208b52:	e10c                	sd	a1,0(a0)
    80208b54:	e510                	sd	a2,8(a0)
    80208b56:	e914                	sd	a3,16(a0)
    80208b58:	ed18                	sd	a4,24(a0)
    80208b5a:	02078793          	addi	a5,a5,32
    80208b5e:	02050513          	addi	a0,a0,32
    80208b62:	ff0794e3          	bne	a5,a6,80208b4a <sighandle+0xba>
	tf->epc = (uint64)(SIG_TRAMPOLINE + ((uint64)sig_handler - (uint64)sig_trampoline));
    80208b66:	0000a597          	auipc	a1,0xa
    80208b6a:	49a58593          	addi	a1,a1,1178 # 80213000 <_sig_trampoline>
    80208b6e:	020007b7          	lui	a5,0x2000
    80208b72:	0000a717          	auipc	a4,0xa
    80208b76:	48e70713          	addi	a4,a4,1166 # 80213000 <_sig_trampoline>
    80208b7a:	17fd                	addi	a5,a5,-1
    80208b7c:	07b6                	slli	a5,a5,0xd
    80208b7e:	973e                	add	a4,a4,a5
    80208b80:	8f0d                	sub	a4,a4,a1
	tf->sp = p->trapframe->sp;
    80208b82:	0689b683          	ld	a3,104(s3)
		//__debug_info("do signal_handler\n");
		tf->a1 = (uint64)(sigact->sigact.__sigaction_handler.sa_handler);
	}
	else {
		// use the default handler 
		tf->a1 = (uint64)(SIG_TRAMPOLINE + ((uint64)default_sigaction - (uint64)sig_trampoline));
    80208b86:	02000637          	lui	a2,0x2000
    80208b8a:	0000a797          	auipc	a5,0xa
    80208b8e:	48078793          	addi	a5,a5,1152 # 8021300a <default_sigaction>
    80208b92:	167d                	addi	a2,a2,-1
    80208b94:	0636                	slli	a2,a2,0xd
    80208b96:	97b2                	add	a5,a5,a2
    80208b98:	8f8d                	sub	a5,a5,a1
	}
	*(p->trapframe) = *tf;
    80208b9a:	ee98                	sd	a4,24(a3)
    80208b9c:	0726b823          	sd	s2,112(a3)
    80208ba0:	febc                	sd	a5,120(a3)

	// insert sig_frame into proc's sig_frame list 
	frame->next = p->sig_frame;
    80208ba2:	1a09b783          	ld	a5,416(s3)
    80208ba6:	00fa3823          	sd	a5,16(s4)
	p->sig_frame = frame;
    80208baa:	1b49b023          	sd	s4,416(s3)
}
    80208bae:	70a2                	ld	ra,40(sp)
    80208bb0:	7402                	ld	s0,32(sp)
    80208bb2:	64e2                	ld	s1,24(sp)
    80208bb4:	6942                	ld	s2,16(sp)
    80208bb6:	69a2                	ld	s3,8(sp)
    80208bb8:	6a02                	ld	s4,0(sp)
    80208bba:	6145                	addi	sp,sp,48
    80208bbc:	8082                	ret
		for (; i < SIGSET_LEN; i ++) {
    80208bbe:	2585                	addiw	a1,a1,1
    80208bc0:	f30595e3          	bne	a1,a6,80208aea <sighandle+0x5a>
    80208bc4:	b7a9                	j	80208b0e <sighandle+0x7e>
	if (SIGCHLD == signum && 
    80208bc6:	47c5                	li	a5,17
    80208bc8:	0cf91d63          	bne	s2,a5,80208ca2 <sighandle+0x212>
		(NULL == sigact || NULL == sigact->sigact.__sigaction_handler.sa_handler)) {
    80208bcc:	649c                	ld	a5,8(s1)
    80208bce:	d3e5                	beqz	a5,80208bae <sighandle+0x11e>
	frame = kmalloc(sizeof(struct sig_frame));
    80208bd0:	4561                	li	a0,24
    80208bd2:	00001097          	auipc	ra,0x1
    80208bd6:	3ea080e7          	jalr	1002(ra) # 80209fbc <kmalloc>
    80208bda:	8a2a                	mv	s4,a0
	frame->tf = kmalloc(sizeof(struct trapframe));
    80208bdc:	12000513          	li	a0,288
    80208be0:	00001097          	auipc	ra,0x1
    80208be4:	3dc080e7          	jalr	988(ra) # 80209fbc <kmalloc>
    80208be8:	87aa                	mv	a5,a0
    80208bea:	00aa3423          	sd	a0,8(s4)
	*(frame->tf) = *(p->trapframe);
    80208bee:	0689b703          	ld	a4,104(s3)
    80208bf2:	12070813          	addi	a6,a4,288
    80208bf6:	6308                	ld	a0,0(a4)
    80208bf8:	670c                	ld	a1,8(a4)
    80208bfa:	6b10                	ld	a2,16(a4)
    80208bfc:	6f14                	ld	a3,24(a4)
    80208bfe:	e388                	sd	a0,0(a5)
    80208c00:	e78c                	sd	a1,8(a5)
    80208c02:	eb90                	sd	a2,16(a5)
    80208c04:	ef94                	sd	a3,24(a5)
    80208c06:	02070713          	addi	a4,a4,32
    80208c0a:	02078793          	addi	a5,a5,32
    80208c0e:	ff0714e3          	bne	a4,a6,80208bf6 <sighandle+0x166>
	tf->epc = (uint64)(SIG_TRAMPOLINE + ((uint64)sig_handler - (uint64)sig_trampoline));
    80208c12:	0000a597          	auipc	a1,0xa
    80208c16:	3ee58593          	addi	a1,a1,1006 # 80213000 <_sig_trampoline>
    80208c1a:	020006b7          	lui	a3,0x2000
    80208c1e:	0000a717          	auipc	a4,0xa
    80208c22:	3e270713          	addi	a4,a4,994 # 80213000 <_sig_trampoline>
    80208c26:	16fd                	addi	a3,a3,-1
    80208c28:	06b6                	slli	a3,a3,0xd
    80208c2a:	9736                	add	a4,a4,a3
    80208c2c:	8f0d                	sub	a4,a4,a1
	tf->sp = p->trapframe->sp;
    80208c2e:	0689b683          	ld	a3,104(s3)
	if (NULL != sigact && sigact->sigact.__sigaction_handler.sa_handler) {
    80208c32:	649c                	ld	a5,8(s1)
    80208c34:	f3bd                	bnez	a5,80208b9a <sighandle+0x10a>
    80208c36:	bf81                	j	80208b86 <sighandle+0xf6>
	if (SIGCHLD == signum && 
    80208c38:	47c5                	li	a5,17
    80208c3a:	f6f90ae3          	beq	s2,a5,80208bae <sighandle+0x11e>
	frame = kmalloc(sizeof(struct sig_frame));
    80208c3e:	4561                	li	a0,24
    80208c40:	00001097          	auipc	ra,0x1
    80208c44:	37c080e7          	jalr	892(ra) # 80209fbc <kmalloc>
    80208c48:	8a2a                	mv	s4,a0
	frame->tf = kmalloc(sizeof(struct trapframe));
    80208c4a:	12000513          	li	a0,288
    80208c4e:	00001097          	auipc	ra,0x1
    80208c52:	36e080e7          	jalr	878(ra) # 80209fbc <kmalloc>
    80208c56:	87aa                	mv	a5,a0
    80208c58:	00aa3423          	sd	a0,8(s4)
	*(frame->tf) = *(p->trapframe);
    80208c5c:	0689b703          	ld	a4,104(s3)
    80208c60:	12070813          	addi	a6,a4,288
    80208c64:	6308                	ld	a0,0(a4)
    80208c66:	670c                	ld	a1,8(a4)
    80208c68:	6b10                	ld	a2,16(a4)
    80208c6a:	6f14                	ld	a3,24(a4)
    80208c6c:	e388                	sd	a0,0(a5)
    80208c6e:	e78c                	sd	a1,8(a5)
    80208c70:	eb90                	sd	a2,16(a5)
    80208c72:	ef94                	sd	a3,24(a5)
    80208c74:	02070713          	addi	a4,a4,32
    80208c78:	02078793          	addi	a5,a5,32
    80208c7c:	ff0714e3          	bne	a4,a6,80208c64 <sighandle+0x1d4>
	tf->epc = (uint64)(SIG_TRAMPOLINE + ((uint64)sig_handler - (uint64)sig_trampoline));
    80208c80:	0000a597          	auipc	a1,0xa
    80208c84:	38058593          	addi	a1,a1,896 # 80213000 <_sig_trampoline>
    80208c88:	020007b7          	lui	a5,0x2000
    80208c8c:	0000a717          	auipc	a4,0xa
    80208c90:	37470713          	addi	a4,a4,884 # 80213000 <_sig_trampoline>
    80208c94:	17fd                	addi	a5,a5,-1
    80208c96:	07b6                	slli	a5,a5,0xd
    80208c98:	973e                	add	a4,a4,a5
    80208c9a:	8f0d                	sub	a4,a4,a1
	tf->sp = p->trapframe->sp;
    80208c9c:	0689b683          	ld	a3,104(s3)
	if (NULL != sigact && sigact->sigact.__sigaction_handler.sa_handler) {
    80208ca0:	b5dd                	j	80208b86 <sighandle+0xf6>
	frame = kmalloc(sizeof(struct sig_frame));
    80208ca2:	4561                	li	a0,24
    80208ca4:	00001097          	auipc	ra,0x1
    80208ca8:	318080e7          	jalr	792(ra) # 80209fbc <kmalloc>
    80208cac:	8a2a                	mv	s4,a0
	frame->tf = kmalloc(sizeof(struct trapframe));
    80208cae:	12000513          	li	a0,288
    80208cb2:	00001097          	auipc	ra,0x1
    80208cb6:	30a080e7          	jalr	778(ra) # 80209fbc <kmalloc>
    80208cba:	87aa                	mv	a5,a0
    80208cbc:	00aa3423          	sd	a0,8(s4)
	*(frame->tf) = *(p->trapframe);
    80208cc0:	0689b703          	ld	a4,104(s3)
    80208cc4:	12070813          	addi	a6,a4,288
    80208cc8:	6308                	ld	a0,0(a4)
    80208cca:	670c                	ld	a1,8(a4)
    80208ccc:	6b10                	ld	a2,16(a4)
    80208cce:	6f14                	ld	a3,24(a4)
    80208cd0:	e388                	sd	a0,0(a5)
    80208cd2:	e78c                	sd	a1,8(a5)
    80208cd4:	eb90                	sd	a2,16(a5)
    80208cd6:	ef94                	sd	a3,24(a5)
    80208cd8:	02070713          	addi	a4,a4,32
    80208cdc:	02078793          	addi	a5,a5,32 # 2000020 <_entry-0x7e1fffe0>
    80208ce0:	ff0714e3          	bne	a4,a6,80208cc8 <sighandle+0x238>
	tf->epc = (uint64)(SIG_TRAMPOLINE + ((uint64)sig_handler - (uint64)sig_trampoline));
    80208ce4:	0000a597          	auipc	a1,0xa
    80208ce8:	31c58593          	addi	a1,a1,796 # 80213000 <_sig_trampoline>
    80208cec:	020007b7          	lui	a5,0x2000
    80208cf0:	0000a717          	auipc	a4,0xa
    80208cf4:	31070713          	addi	a4,a4,784 # 80213000 <_sig_trampoline>
    80208cf8:	17fd                	addi	a5,a5,-1
    80208cfa:	07b6                	slli	a5,a5,0xd
    80208cfc:	973e                	add	a4,a4,a5
    80208cfe:	8f0d                	sub	a4,a4,a1
	tf->sp = p->trapframe->sp;
    80208d00:	0689b683          	ld	a3,104(s3)
	if (NULL != sigact && sigact->sigact.__sigaction_handler.sa_handler) {
    80208d04:	b73d                	j	80208c32 <sighandle+0x1a2>

0000000080208d06 <sigframefree>:

void sigframefree(struct sig_frame *head) {
	while (NULL != head) {
    80208d06:	c52d                	beqz	a0,80208d70 <sigframefree+0x6a>
void sigframefree(struct sig_frame *head) {
    80208d08:	7179                	addi	sp,sp,-48
    80208d0a:	f406                	sd	ra,40(sp)
    80208d0c:	f022                	sd	s0,32(sp)
    80208d0e:	ec26                	sd	s1,24(sp)
    80208d10:	e84a                	sd	s2,16(sp)
    80208d12:	e44e                	sd	s3,8(sp)
    80208d14:	1800                	addi	s0,sp,48
    80208d16:	84aa                	mv	s1,a0
		struct sig_frame *next = head->next;
		if(next == head)
		{
		  __debug_warn("[sigframefree] loop!\n");
    80208d18:	0000c997          	auipc	s3,0xc
    80208d1c:	c1098993          	addi	s3,s3,-1008 # 80214928 <rodata_start+0x928>
    80208d20:	a00d                	j	80208d42 <sigframefree+0x3c>
    80208d22:	854e                	mv	a0,s3
    80208d24:	00001097          	auipc	ra,0x1
    80208d28:	94c080e7          	jalr	-1716(ra) # 80209670 <__debug_warn>
		}
		//__debug_info("[sigframefree] free trapframe %p\n", head->tf);
		kfree(head->tf);
    80208d2c:	6488                	ld	a0,8(s1)
    80208d2e:	00001097          	auipc	ra,0x1
    80208d32:	4d8080e7          	jalr	1240(ra) # 8020a206 <kfree>
		//__debug_info("[sigframefree] free %p\n", head);
		kfree(head);
    80208d36:	8526                	mv	a0,s1
    80208d38:	00001097          	auipc	ra,0x1
    80208d3c:	4ce080e7          	jalr	1230(ra) # 8020a206 <kfree>
		head = next;
    80208d40:	84ca                	mv	s1,s2
		struct sig_frame *next = head->next;
    80208d42:	0104b903          	ld	s2,16(s1)
		if(next == head)
    80208d46:	fc990ee3          	beq	s2,s1,80208d22 <sigframefree+0x1c>
		kfree(head->tf);
    80208d4a:	6488                	ld	a0,8(s1)
    80208d4c:	00001097          	auipc	ra,0x1
    80208d50:	4ba080e7          	jalr	1210(ra) # 8020a206 <kfree>
		kfree(head);
    80208d54:	8526                	mv	a0,s1
    80208d56:	00001097          	auipc	ra,0x1
    80208d5a:	4b0080e7          	jalr	1200(ra) # 8020a206 <kfree>
	while (NULL != head) {
    80208d5e:	fe0911e3          	bnez	s2,80208d40 <sigframefree+0x3a>
	}
}
    80208d62:	70a2                	ld	ra,40(sp)
    80208d64:	7402                	ld	s0,32(sp)
    80208d66:	64e2                	ld	s1,24(sp)
    80208d68:	6942                	ld	s2,16(sp)
    80208d6a:	69a2                	ld	s3,8(sp)
    80208d6c:	6145                	addi	sp,sp,48
    80208d6e:	8082                	ret
    80208d70:	8082                	ret

0000000080208d72 <sigaction_free>:

void sigaction_free(ksigaction_t *head) {
    80208d72:	1101                	addi	sp,sp,-32
    80208d74:	ec06                	sd	ra,24(sp)
    80208d76:	e822                	sd	s0,16(sp)
    80208d78:	e426                	sd	s1,8(sp)
    80208d7a:	1000                	addi	s0,sp,32
    80208d7c:	84aa                	mv	s1,a0
	while (NULL != head) {
    80208d7e:	c901                	beqz	a0,80208d8e <sigaction_free+0x1c>
		ksigaction_t *next = head->next;
    80208d80:	8526                	mv	a0,s1
    80208d82:	6084                	ld	s1,0(s1)
		kfree(head);
    80208d84:	00001097          	auipc	ra,0x1
    80208d88:	482080e7          	jalr	1154(ra) # 8020a206 <kfree>
	while (NULL != head) {
    80208d8c:	f8f5                	bnez	s1,80208d80 <sigaction_free+0xe>
		head = next;
	}
}
    80208d8e:	60e2                	ld	ra,24(sp)
    80208d90:	6442                	ld	s0,16(sp)
    80208d92:	64a2                	ld	s1,8(sp)
    80208d94:	6105                	addi	sp,sp,32
    80208d96:	8082                	ret

0000000080208d98 <sigaction_copy>:

int sigaction_copy(ksigaction_t **pdst, ksigaction_t const *src) {
    80208d98:	1101                	addi	sp,sp,-32
    80208d9a:	ec06                	sd	ra,24(sp)
    80208d9c:	e822                	sd	s0,16(sp)
    80208d9e:	e426                	sd	s1,8(sp)
    80208da0:	e04a                	sd	s2,0(sp)
    80208da2:	1000                	addi	s0,sp,32
    80208da4:	892a                	mv	s2,a0
    80208da6:	84ae                	mv	s1,a1
	ksigaction_t *tmp = NULL;

	*pdst = NULL;
    80208da8:	00053023          	sd	zero,0(a0)
	if (NULL == src) {
    80208dac:	c1b5                	beqz	a1,80208e10 <sigaction_copy+0x78>
		return 0;
	}

	while (NULL != src) {
		tmp = kmalloc(sizeof(ksigaction_t));
    80208dae:	02800513          	li	a0,40
    80208db2:	00001097          	auipc	ra,0x1
    80208db6:	20a080e7          	jalr	522(ra) # 80209fbc <kmalloc>
		if (NULL == tmp) {
    80208dba:	c505                	beqz	a0,80208de2 <sigaction_copy+0x4a>
			sigaction_free(*pdst);
			*pdst = NULL;
			return -1;
		}

		*tmp = *src;
    80208dbc:	608c                	ld	a1,0(s1)
    80208dbe:	6490                	ld	a2,8(s1)
    80208dc0:	6894                	ld	a3,16(s1)
    80208dc2:	6c98                	ld	a4,24(s1)
    80208dc4:	709c                	ld	a5,32(s1)
    80208dc6:	e10c                	sd	a1,0(a0)
    80208dc8:	e510                	sd	a2,8(a0)
    80208dca:	e914                	sd	a3,16(a0)
    80208dcc:	ed18                	sd	a4,24(a0)
    80208dce:	f11c                	sd	a5,32(a0)
		tmp->next = *pdst;
    80208dd0:	00093783          	ld	a5,0(s2)
    80208dd4:	e11c                	sd	a5,0(a0)
		*pdst = tmp;
    80208dd6:	00a93023          	sd	a0,0(s2)

		src = src->next;
    80208dda:	6084                	ld	s1,0(s1)
	while (NULL != src) {
    80208ddc:	f8e9                	bnez	s1,80208dae <sigaction_copy+0x16>
	}

	return 0;
    80208dde:	4501                	li	a0,0
    80208de0:	a015                	j	80208e04 <sigaction_copy+0x6c>
			__debug_warn("[sigaction_copy] fail to alloc\n");
    80208de2:	0000c517          	auipc	a0,0xc
    80208de6:	b5e50513          	addi	a0,a0,-1186 # 80214940 <rodata_start+0x940>
    80208dea:	00001097          	auipc	ra,0x1
    80208dee:	886080e7          	jalr	-1914(ra) # 80209670 <__debug_warn>
			sigaction_free(*pdst);
    80208df2:	00093503          	ld	a0,0(s2)
    80208df6:	00000097          	auipc	ra,0x0
    80208dfa:	f7c080e7          	jalr	-132(ra) # 80208d72 <sigaction_free>
			*pdst = NULL;
    80208dfe:	00093023          	sd	zero,0(s2)
			return -1;
    80208e02:	557d                	li	a0,-1
}
    80208e04:	60e2                	ld	ra,24(sp)
    80208e06:	6442                	ld	s0,16(sp)
    80208e08:	64a2                	ld	s1,8(sp)
    80208e0a:	6902                	ld	s2,0(sp)
    80208e0c:	6105                	addi	sp,sp,32
    80208e0e:	8082                	ret
		return 0;
    80208e10:	4501                	li	a0,0
    80208e12:	bfcd                	j	80208e04 <sigaction_copy+0x6c>

0000000080208e14 <sigreturn>:

void sigreturn(void) {
    80208e14:	1101                	addi	sp,sp,-32
    80208e16:	ec06                	sd	ra,24(sp)
    80208e18:	e822                	sd	s0,16(sp)
    80208e1a:	e426                	sd	s1,8(sp)
    80208e1c:	e04a                	sd	s2,0(sp)
    80208e1e:	1000                	addi	s0,sp,32
	struct proc *p = myproc();
    80208e20:	00003097          	auipc	ra,0x3
    80208e24:	592080e7          	jalr	1426(ra) # 8020c3b2 <myproc>
    80208e28:	84aa                	mv	s1,a0

	if (NULL == p->sig_frame) {	// it's not in a sighandler!
    80208e2a:	1a053783          	ld	a5,416(a0)
    80208e2e:	cfb1                	beqz	a5,80208e8a <sigreturn+0x76>
		exit(-1);
	}

	struct sig_frame *frame = p->sig_frame;
    80208e30:	1a04b903          	ld	s2,416(s1)
	// for (int i = 0; i < SIGSET_LEN; i ++) {
	// 	p->sig_set.__val[i] = frame->mask.__val[i];
	// }
	*(p->trapframe) = *(frame->tf);
    80208e34:	00893683          	ld	a3,8(s2)
    80208e38:	87b6                	mv	a5,a3
    80208e3a:	74b8                	ld	a4,104(s1)
    80208e3c:	12068693          	addi	a3,a3,288 # 2000120 <_entry-0x7e1ffee0>
    80208e40:	0007b803          	ld	a6,0(a5) # 2000000 <_entry-0x7e200000>
    80208e44:	6788                	ld	a0,8(a5)
    80208e46:	6b8c                	ld	a1,16(a5)
    80208e48:	6f90                	ld	a2,24(a5)
    80208e4a:	01073023          	sd	a6,0(a4)
    80208e4e:	e708                	sd	a0,8(a4)
    80208e50:	eb0c                	sd	a1,16(a4)
    80208e52:	ef10                	sd	a2,24(a4)
    80208e54:	02078793          	addi	a5,a5,32
    80208e58:	02070713          	addi	a4,a4,32
    80208e5c:	fed792e3          	bne	a5,a3,80208e40 <sigreturn+0x2c>
	kfree(frame->tf);
    80208e60:	00893503          	ld	a0,8(s2)
    80208e64:	00001097          	auipc	ra,0x1
    80208e68:	3a2080e7          	jalr	930(ra) # 8020a206 <kfree>

	// remove this frame from list 
	p->sig_frame = frame->next;
    80208e6c:	01093783          	ld	a5,16(s2)
    80208e70:	1af4b023          	sd	a5,416(s1)
	kfree(frame);
    80208e74:	854a                	mv	a0,s2
    80208e76:	00001097          	auipc	ra,0x1
    80208e7a:	390080e7          	jalr	912(ra) # 8020a206 <kfree>
}
    80208e7e:	60e2                	ld	ra,24(sp)
    80208e80:	6442                	ld	s0,16(sp)
    80208e82:	64a2                	ld	s1,8(sp)
    80208e84:	6902                	ld	s2,0(sp)
    80208e86:	6105                	addi	sp,sp,32
    80208e88:	8082                	ret
		exit(-1);
    80208e8a:	557d                	li	a0,-1
    80208e8c:	ffff9097          	auipc	ra,0xffff9
    80208e90:	4c4080e7          	jalr	1220(ra) # 80202350 <exit>
    80208e94:	bf71                	j	80208e30 <sigreturn+0x1c>

0000000080208e96 <initlock>:



void
initlock(struct spinlock *lk, char *name)
{
    80208e96:	1141                	addi	sp,sp,-16
    80208e98:	e422                	sd	s0,8(sp)
    80208e9a:	0800                	addi	s0,sp,16
  lk->name = name;
    80208e9c:	e50c                	sd	a1,8(a0)
  lk->locked = 0;
    80208e9e:	00052023          	sw	zero,0(a0)
  lk->cpu = 0;
    80208ea2:	00053823          	sd	zero,16(a0)
}
    80208ea6:	6422                	ld	s0,8(sp)
    80208ea8:	0141                	addi	sp,sp,16
    80208eaa:	8082                	ret

0000000080208eac <holding>:
// Interrupts must be off.
int
holding(struct spinlock *lk)
{
  int r;
  r = (lk->locked && lk->cpu == mycpu());
    80208eac:	411c                	lw	a5,0(a0)
    80208eae:	e399                	bnez	a5,80208eb4 <holding+0x8>
    80208eb0:	4501                	li	a0,0
  return r;
}
    80208eb2:	8082                	ret
{
    80208eb4:	1101                	addi	sp,sp,-32
    80208eb6:	ec06                	sd	ra,24(sp)
    80208eb8:	e822                	sd	s0,16(sp)
    80208eba:	e426                	sd	s1,8(sp)
    80208ebc:	1000                	addi	s0,sp,32
  r = (lk->locked && lk->cpu == mycpu());
    80208ebe:	6904                	ld	s1,16(a0)
    80208ec0:	00003097          	auipc	ra,0x3
    80208ec4:	4d6080e7          	jalr	1238(ra) # 8020c396 <mycpu>
    80208ec8:	40a48533          	sub	a0,s1,a0
    80208ecc:	00153513          	seqz	a0,a0
}
    80208ed0:	60e2                	ld	ra,24(sp)
    80208ed2:	6442                	ld	s0,16(sp)
    80208ed4:	64a2                	ld	s1,8(sp)
    80208ed6:	6105                	addi	sp,sp,32
    80208ed8:	8082                	ret

0000000080208eda <acquire>:
{
    80208eda:	1101                	addi	sp,sp,-32
    80208edc:	ec06                	sd	ra,24(sp)
    80208ede:	e822                	sd	s0,16(sp)
    80208ee0:	e426                	sd	s1,8(sp)
    80208ee2:	1000                	addi	s0,sp,32
    80208ee4:	84aa                	mv	s1,a0
  push_off(); // disable interrupts to avoid deadlock.
    80208ee6:	ffff8097          	auipc	ra,0xffff8
    80208eea:	11c080e7          	jalr	284(ra) # 80201002 <push_off>
  if(holding(lk))
    80208eee:	8526                	mv	a0,s1
    80208ef0:	00000097          	auipc	ra,0x0
    80208ef4:	fbc080e7          	jalr	-68(ra) # 80208eac <holding>
  while(__sync_lock_test_and_set(&lk->locked, 1) != 0)
    80208ef8:	4705                	li	a4,1
  if(holding(lk))
    80208efa:	e115                	bnez	a0,80208f1e <acquire+0x44>
  while(__sync_lock_test_and_set(&lk->locked, 1) != 0)
    80208efc:	87ba                	mv	a5,a4
    80208efe:	0cf4a7af          	amoswap.w.aq	a5,a5,(s1)
    80208f02:	2781                	sext.w	a5,a5
    80208f04:	ffe5                	bnez	a5,80208efc <acquire+0x22>
  __sync_synchronize();
    80208f06:	0ff0000f          	fence
  lk->cpu = mycpu();
    80208f0a:	00003097          	auipc	ra,0x3
    80208f0e:	48c080e7          	jalr	1164(ra) # 8020c396 <mycpu>
    80208f12:	e888                	sd	a0,16(s1)
}
    80208f14:	60e2                	ld	ra,24(sp)
    80208f16:	6442                	ld	s0,16(sp)
    80208f18:	64a2                	ld	s1,8(sp)
    80208f1a:	6105                	addi	sp,sp,32
    80208f1c:	8082                	ret
    panic("acquire");
    80208f1e:	0000c517          	auipc	a0,0xc
    80208f22:	a4250513          	addi	a0,a0,-1470 # 80214960 <rodata_start+0x960>
    80208f26:	00000097          	auipc	ra,0x0
    80208f2a:	324080e7          	jalr	804(ra) # 8020924a <panic>

0000000080208f2e <release>:
{
    80208f2e:	1101                	addi	sp,sp,-32
    80208f30:	ec06                	sd	ra,24(sp)
    80208f32:	e822                	sd	s0,16(sp)
    80208f34:	e426                	sd	s1,8(sp)
    80208f36:	1000                	addi	s0,sp,32
    80208f38:	84aa                	mv	s1,a0
  if(!holding(lk))
    80208f3a:	00000097          	auipc	ra,0x0
    80208f3e:	f72080e7          	jalr	-142(ra) # 80208eac <holding>
    80208f42:	c115                	beqz	a0,80208f66 <release+0x38>
  lk->cpu = 0;
    80208f44:	0004b823          	sd	zero,16(s1)
  __sync_synchronize();
    80208f48:	0ff0000f          	fence
  __sync_lock_release(&lk->locked);
    80208f4c:	0f50000f          	fence	iorw,ow
    80208f50:	0804a02f          	amoswap.w	zero,zero,(s1)
  pop_off();
    80208f54:	ffff8097          	auipc	ra,0xffff8
    80208f58:	0fa080e7          	jalr	250(ra) # 8020104e <pop_off>
}
    80208f5c:	60e2                	ld	ra,24(sp)
    80208f5e:	6442                	ld	s0,16(sp)
    80208f60:	64a2                	ld	s1,8(sp)
    80208f62:	6105                	addi	sp,sp,32
    80208f64:	8082                	ret
    panic("release");
    80208f66:	0000c517          	auipc	a0,0xc
    80208f6a:	a0250513          	addi	a0,a0,-1534 # 80214968 <rodata_start+0x968>
    80208f6e:	00000097          	auipc	ra,0x0
    80208f72:	2dc080e7          	jalr	732(ra) # 8020924a <panic>

0000000080208f76 <initsleeplock>:

extern int fat32_init_flag;

void
initsleeplock(struct sleeplock *lk, char *name)
{
    80208f76:	1101                	addi	sp,sp,-32
    80208f78:	ec06                	sd	ra,24(sp)
    80208f7a:	e822                	sd	s0,16(sp)
    80208f7c:	e426                	sd	s1,8(sp)
    80208f7e:	e04a                	sd	s2,0(sp)
    80208f80:	1000                	addi	s0,sp,32
    80208f82:	84aa                	mv	s1,a0
    80208f84:	892e                	mv	s2,a1
  initlock(&lk->lk, "sleep lock");
    80208f86:	0000c597          	auipc	a1,0xc
    80208f8a:	9ea58593          	addi	a1,a1,-1558 # 80214970 <rodata_start+0x970>
    80208f8e:	0521                	addi	a0,a0,8
    80208f90:	00000097          	auipc	ra,0x0
    80208f94:	f06080e7          	jalr	-250(ra) # 80208e96 <initlock>
  lk->name = name;
    80208f98:	0324b023          	sd	s2,32(s1)
  lk->locked = 0;
    80208f9c:	0004a023          	sw	zero,0(s1)
  lk->pid = 0;
    80208fa0:	0204a423          	sw	zero,40(s1)
}
    80208fa4:	60e2                	ld	ra,24(sp)
    80208fa6:	6442                	ld	s0,16(sp)
    80208fa8:	64a2                	ld	s1,8(sp)
    80208faa:	6902                	ld	s2,0(sp)
    80208fac:	6105                	addi	sp,sp,32
    80208fae:	8082                	ret

0000000080208fb0 <acquiresleep>:

void
acquiresleep(struct sleeplock *lk)
{
    80208fb0:	1101                	addi	sp,sp,-32
    80208fb2:	ec06                	sd	ra,24(sp)
    80208fb4:	e822                	sd	s0,16(sp)
    80208fb6:	e426                	sd	s1,8(sp)
    80208fb8:	e04a                	sd	s2,0(sp)
    80208fba:	1000                	addi	s0,sp,32
    80208fbc:	84aa                	mv	s1,a0
  acquire(&lk->lk);
    80208fbe:	00850913          	addi	s2,a0,8
    80208fc2:	854a                	mv	a0,s2
    80208fc4:	00000097          	auipc	ra,0x0
    80208fc8:	f16080e7          	jalr	-234(ra) # 80208eda <acquire>
  while (lk->locked) {
    80208fcc:	409c                	lw	a5,0(s1)
    80208fce:	cb89                	beqz	a5,80208fe0 <acquiresleep+0x30>
    sleep(lk, &lk->lk);
    80208fd0:	85ca                	mv	a1,s2
    80208fd2:	8526                	mv	a0,s1
    80208fd4:	ffff9097          	auipc	ra,0xffff9
    80208fd8:	d6a080e7          	jalr	-662(ra) # 80201d3e <sleep>
  while (lk->locked) {
    80208fdc:	409c                	lw	a5,0(s1)
    80208fde:	fbed                	bnez	a5,80208fd0 <acquiresleep+0x20>
  }
  lk->locked = 1;
    80208fe0:	4785                	li	a5,1
    80208fe2:	c09c                	sw	a5,0(s1)
  //lk->pid = myproc()->pid;
  release(&lk->lk);
    80208fe4:	854a                	mv	a0,s2
    80208fe6:	00000097          	auipc	ra,0x0
    80208fea:	f48080e7          	jalr	-184(ra) # 80208f2e <release>
}
    80208fee:	60e2                	ld	ra,24(sp)
    80208ff0:	6442                	ld	s0,16(sp)
    80208ff2:	64a2                	ld	s1,8(sp)
    80208ff4:	6902                	ld	s2,0(sp)
    80208ff6:	6105                	addi	sp,sp,32
    80208ff8:	8082                	ret

0000000080208ffa <releasesleep>:

void
releasesleep(struct sleeplock *lk)
{
    80208ffa:	1101                	addi	sp,sp,-32
    80208ffc:	ec06                	sd	ra,24(sp)
    80208ffe:	e822                	sd	s0,16(sp)
    80209000:	e426                	sd	s1,8(sp)
    80209002:	e04a                	sd	s2,0(sp)
    80209004:	1000                	addi	s0,sp,32
    80209006:	84aa                	mv	s1,a0
  acquire(&lk->lk);
    80209008:	00850913          	addi	s2,a0,8
    8020900c:	854a                	mv	a0,s2
    8020900e:	00000097          	auipc	ra,0x0
    80209012:	ecc080e7          	jalr	-308(ra) # 80208eda <acquire>
  lk->locked = 0;
    80209016:	0004a023          	sw	zero,0(s1)
  lk->pid = 0;
    8020901a:	0204a423          	sw	zero,40(s1)
  wakeup(lk);
    8020901e:	8526                	mv	a0,s1
    80209020:	ffff9097          	auipc	ra,0xffff9
    80209024:	e28080e7          	jalr	-472(ra) # 80201e48 <wakeup>
  release(&lk->lk);
    80209028:	854a                	mv	a0,s2
    8020902a:	00000097          	auipc	ra,0x0
    8020902e:	f04080e7          	jalr	-252(ra) # 80208f2e <release>
}
    80209032:	60e2                	ld	ra,24(sp)
    80209034:	6442                	ld	s0,16(sp)
    80209036:	64a2                	ld	s1,8(sp)
    80209038:	6902                	ld	s2,0(sp)
    8020903a:	6105                	addi	sp,sp,32
    8020903c:	8082                	ret

000000008020903e <holdingsleep>:

int
holdingsleep(struct sleeplock *lk)
{
    8020903e:	1101                	addi	sp,sp,-32
    80209040:	ec06                	sd	ra,24(sp)
    80209042:	e822                	sd	s0,16(sp)
    80209044:	e426                	sd	s1,8(sp)
    80209046:	e04a                	sd	s2,0(sp)
    80209048:	1000                	addi	s0,sp,32
    8020904a:	84aa                	mv	s1,a0
  int r;
  
  acquire(&lk->lk);
    8020904c:	00850913          	addi	s2,a0,8
    80209050:	854a                	mv	a0,s2
    80209052:	00000097          	auipc	ra,0x0
    80209056:	e88080e7          	jalr	-376(ra) # 80208eda <acquire>
  //r = lk->locked && (lk->pid == myproc()->pid);
  r = lk->locked && 1;
    8020905a:	4084                	lw	s1,0(s1)
    8020905c:	009034b3          	snez	s1,s1
  release(&lk->lk);
    80209060:	854a                	mv	a0,s2
    80209062:	00000097          	auipc	ra,0x0
    80209066:	ecc080e7          	jalr	-308(ra) # 80208f2e <release>
  return r;
}
    8020906a:	8526                	mv	a0,s1
    8020906c:	60e2                	ld	ra,24(sp)
    8020906e:	6442                	ld	s0,16(sp)
    80209070:	64a2                	ld	s1,8(sp)
    80209072:	6902                	ld	s2,0(sp)
    80209074:	6105                	addi	sp,sp,32
    80209076:	8082                	ret

0000000080209078 <consputc>:
static struct {
  struct spinlock lock;
  int locking;
} pr;

void consputc(int c) {
    80209078:	1141                	addi	sp,sp,-16
    8020907a:	e422                	sd	s0,8(sp)
    8020907c:	0800                	addi	s0,sp,16
  if(c == BACKSPACE){
    8020907e:	10000793          	li	a5,256
    80209082:	00f50a63          	beq	a0,a5,80209096 <consputc+0x1e>
    register uint64 a1 asm("a1") = arg1;
    80209086:	4581                	li	a1,0
    register uint64 a2 asm("a2") = arg2;
    80209088:	4601                	li	a2,0
    register uint64 a7 asm("a7") = which;
    8020908a:	4885                	li	a7,1
    asm volatile("ecall"
    8020908c:	00000073          	ecall
    sbi_console_putchar(' ');
    sbi_console_putchar('\b');
  } else {
    sbi_console_putchar(c);
  }
}
    80209090:	6422                	ld	s0,8(sp)
    80209092:	0141                	addi	sp,sp,16
    80209094:	8082                	ret
    register uint64 a0 asm("a0") = arg0;
    80209096:	4521                	li	a0,8
    register uint64 a1 asm("a1") = arg1;
    80209098:	4581                	li	a1,0
    register uint64 a2 asm("a2") = arg2;
    8020909a:	4601                	li	a2,0
    register uint64 a7 asm("a7") = which;
    8020909c:	4885                	li	a7,1
    asm volatile("ecall"
    8020909e:	00000073          	ecall
    register uint64 a0 asm("a0") = arg0;
    802090a2:	02000513          	li	a0,32
    asm volatile("ecall"
    802090a6:	00000073          	ecall
    register uint64 a0 asm("a0") = arg0;
    802090aa:	4521                	li	a0,8
    asm volatile("ecall"
    802090ac:	00000073          	ecall
	return ret;
}

static inline void sbi_console_putchar(int c) {
    sbi_call(SBI_CONSOLE_PUTCHAR, c, 0, 0);
}
    802090b0:	b7c5                	j	80209090 <consputc+0x18>

00000000802090b2 <printint>:
    }
}

static void
printint(int xx, int base, int sign)
{
    802090b2:	7179                	addi	sp,sp,-48
    802090b4:	f406                	sd	ra,40(sp)
    802090b6:	f022                	sd	s0,32(sp)
    802090b8:	ec26                	sd	s1,24(sp)
    802090ba:	e84a                	sd	s2,16(sp)
    802090bc:	1800                	addi	s0,sp,48
  char buf[16];
  int i;
  uint x;

  if(sign && (sign = xx < 0))
    802090be:	c219                	beqz	a2,802090c4 <printint+0x12>
    802090c0:	08054663          	bltz	a0,8020914c <printint+0x9a>
    x = -xx;
  else
    x = xx;
    802090c4:	2501                	sext.w	a0,a0
    802090c6:	4881                	li	a7,0
    802090c8:	fd040693          	addi	a3,s0,-48

  i = 0;
    802090cc:	4701                	li	a4,0
  do {
    buf[i++] = digits[x % base];
    802090ce:	2581                	sext.w	a1,a1
    802090d0:	0000c617          	auipc	a2,0xc
    802090d4:	a5860613          	addi	a2,a2,-1448 # 80214b28 <digits>
    802090d8:	883a                	mv	a6,a4
    802090da:	2705                	addiw	a4,a4,1
    802090dc:	02b577bb          	remuw	a5,a0,a1
    802090e0:	1782                	slli	a5,a5,0x20
    802090e2:	9381                	srli	a5,a5,0x20
    802090e4:	97b2                	add	a5,a5,a2
    802090e6:	0007c783          	lbu	a5,0(a5)
    802090ea:	00f68023          	sb	a5,0(a3)
  } while((x /= base) != 0);
    802090ee:	0005079b          	sext.w	a5,a0
    802090f2:	02b5553b          	divuw	a0,a0,a1
    802090f6:	0685                	addi	a3,a3,1
    802090f8:	feb7f0e3          	bgeu	a5,a1,802090d8 <printint+0x26>

  if(sign)
    802090fc:	00088b63          	beqz	a7,80209112 <printint+0x60>
    buf[i++] = '-';
    80209100:	fe040793          	addi	a5,s0,-32
    80209104:	973e                	add	a4,a4,a5
    80209106:	02d00793          	li	a5,45
    8020910a:	fef70823          	sb	a5,-16(a4)
    8020910e:	0028071b          	addiw	a4,a6,2

  while(--i >= 0)
    80209112:	02e05763          	blez	a4,80209140 <printint+0x8e>
    80209116:	fd040793          	addi	a5,s0,-48
    8020911a:	00e784b3          	add	s1,a5,a4
    8020911e:	fff78913          	addi	s2,a5,-1
    80209122:	993a                	add	s2,s2,a4
    80209124:	377d                	addiw	a4,a4,-1
    80209126:	1702                	slli	a4,a4,0x20
    80209128:	9301                	srli	a4,a4,0x20
    8020912a:	40e90933          	sub	s2,s2,a4
    consputc(buf[i]);
    8020912e:	fff4c503          	lbu	a0,-1(s1)
    80209132:	00000097          	auipc	ra,0x0
    80209136:	f46080e7          	jalr	-186(ra) # 80209078 <consputc>
  while(--i >= 0)
    8020913a:	14fd                	addi	s1,s1,-1
    8020913c:	ff2499e3          	bne	s1,s2,8020912e <printint+0x7c>
}
    80209140:	70a2                	ld	ra,40(sp)
    80209142:	7402                	ld	s0,32(sp)
    80209144:	64e2                	ld	s1,24(sp)
    80209146:	6942                	ld	s2,16(sp)
    80209148:	6145                	addi	sp,sp,48
    8020914a:	8082                	ret
    x = -xx;
    8020914c:	40a0053b          	negw	a0,a0
  if(sign && (sign = xx < 0))
    80209150:	4885                	li	a7,1
    x = -xx;
    80209152:	bf9d                	j	802090c8 <printint+0x16>

0000000080209154 <printptr>:


static void
printptr(uint64 x)
{
    80209154:	7179                	addi	sp,sp,-48
    80209156:	f406                	sd	ra,40(sp)
    80209158:	f022                	sd	s0,32(sp)
    8020915a:	ec26                	sd	s1,24(sp)
    8020915c:	e84a                	sd	s2,16(sp)
    8020915e:	e44e                	sd	s3,8(sp)
    80209160:	1800                	addi	s0,sp,48
    80209162:	84aa                	mv	s1,a0
  int i;
  consputc('0');
    80209164:	03000513          	li	a0,48
    80209168:	00000097          	auipc	ra,0x0
    8020916c:	f10080e7          	jalr	-240(ra) # 80209078 <consputc>
  consputc('x');
    80209170:	07800513          	li	a0,120
    80209174:	00000097          	auipc	ra,0x0
    80209178:	f04080e7          	jalr	-252(ra) # 80209078 <consputc>
    8020917c:	4941                	li	s2,16
  for (i = 0; i < (sizeof(uint64) * 2); i++, x <<= 4)
    consputc(digits[x >> (sizeof(uint64) * 8 - 4)]);
    8020917e:	0000c997          	auipc	s3,0xc
    80209182:	9aa98993          	addi	s3,s3,-1622 # 80214b28 <digits>
    80209186:	03c4d793          	srli	a5,s1,0x3c
    8020918a:	97ce                	add	a5,a5,s3
    8020918c:	0007c503          	lbu	a0,0(a5)
    80209190:	00000097          	auipc	ra,0x0
    80209194:	ee8080e7          	jalr	-280(ra) # 80209078 <consputc>
  for (i = 0; i < (sizeof(uint64) * 2); i++, x <<= 4)
    80209198:	0492                	slli	s1,s1,0x4
    8020919a:	397d                	addiw	s2,s2,-1
    8020919c:	fe0915e3          	bnez	s2,80209186 <printptr+0x32>
}
    802091a0:	70a2                	ld	ra,40(sp)
    802091a2:	7402                	ld	s0,32(sp)
    802091a4:	64e2                	ld	s1,24(sp)
    802091a6:	6942                	ld	s2,16(sp)
    802091a8:	69a2                	ld	s3,8(sp)
    802091aa:	6145                	addi	sp,sp,48
    802091ac:	8082                	ret

00000000802091ae <printstring>:
void printstring(const char* s) {
    802091ae:	1101                	addi	sp,sp,-32
    802091b0:	ec06                	sd	ra,24(sp)
    802091b2:	e822                	sd	s0,16(sp)
    802091b4:	e426                	sd	s1,8(sp)
    802091b6:	1000                	addi	s0,sp,32
    802091b8:	84aa                	mv	s1,a0
    while (*s)
    802091ba:	00054503          	lbu	a0,0(a0)
    802091be:	c909                	beqz	a0,802091d0 <printstring+0x22>
        consputc(*s++);
    802091c0:	0485                	addi	s1,s1,1
    802091c2:	00000097          	auipc	ra,0x0
    802091c6:	eb6080e7          	jalr	-330(ra) # 80209078 <consputc>
    while (*s)
    802091ca:	0004c503          	lbu	a0,0(s1)
    802091ce:	f96d                	bnez	a0,802091c0 <printstring+0x12>
}
    802091d0:	60e2                	ld	ra,24(sp)
    802091d2:	6442                	ld	s0,16(sp)
    802091d4:	64a2                	ld	s1,8(sp)
    802091d6:	6105                	addi	sp,sp,32
    802091d8:	8082                	ret

00000000802091da <backtrace>:
  for(;;)
    ;
}

void backtrace()
{
    802091da:	7179                	addi	sp,sp,-48
    802091dc:	f406                	sd	ra,40(sp)
    802091de:	f022                	sd	s0,32(sp)
    802091e0:	ec26                	sd	s1,24(sp)
    802091e2:	e84a                	sd	s2,16(sp)
    802091e4:	e44e                	sd	s3,8(sp)
    802091e6:	1800                	addi	s0,sp,48
  asm volatile("mv %0, s0" : "=r" (x) );
    802091e8:	8922                	mv	s2,s0
  uint64 *fp = (uint64 *)r_fp();
    802091ea:	84ca                	mv	s1,s2
  uint64 *bottom = (uint64 *)PGROUNDUP((uint64)fp);
    802091ec:	6785                	lui	a5,0x1
    802091ee:	17fd                	addi	a5,a5,-1
    802091f0:	993e                	add	s2,s2,a5
    802091f2:	77fd                	lui	a5,0xfffff
    802091f4:	00f97933          	and	s2,s2,a5
  printf("backtrace:\n");
    802091f8:	0000b517          	auipc	a0,0xb
    802091fc:	78850513          	addi	a0,a0,1928 # 80214980 <rodata_start+0x980>
    80209200:	00000097          	auipc	ra,0x0
    80209204:	094080e7          	jalr	148(ra) # 80209294 <printf>
  while (fp < bottom) {
    80209208:	0324f263          	bgeu	s1,s2,8020922c <backtrace+0x52>
    uint64 ra = *(fp - 1);
    printf("%p\n", ra - 4);
    8020920c:	0000c997          	auipc	s3,0xc
    80209210:	48498993          	addi	s3,s3,1156 # 80215690 <digits+0xb68>
    80209214:	ff84b583          	ld	a1,-8(s1)
    80209218:	15f1                	addi	a1,a1,-4
    8020921a:	854e                	mv	a0,s3
    8020921c:	00000097          	auipc	ra,0x0
    80209220:	078080e7          	jalr	120(ra) # 80209294 <printf>
    fp = (uint64 *)*(fp - 2);
    80209224:	ff04b483          	ld	s1,-16(s1)
  while (fp < bottom) {
    80209228:	ff24e6e3          	bltu	s1,s2,80209214 <backtrace+0x3a>
  }
  printf("!TEST FINISH!\n");
    8020922c:	0000b517          	auipc	a0,0xb
    80209230:	76450513          	addi	a0,a0,1892 # 80214990 <rodata_start+0x990>
    80209234:	00000097          	auipc	ra,0x0
    80209238:	060080e7          	jalr	96(ra) # 80209294 <printf>
}
    8020923c:	70a2                	ld	ra,40(sp)
    8020923e:	7402                	ld	s0,32(sp)
    80209240:	64e2                	ld	s1,24(sp)
    80209242:	6942                	ld	s2,16(sp)
    80209244:	69a2                	ld	s3,8(sp)
    80209246:	6145                	addi	sp,sp,48
    80209248:	8082                	ret

000000008020924a <panic>:
{
    8020924a:	1101                	addi	sp,sp,-32
    8020924c:	ec06                	sd	ra,24(sp)
    8020924e:	e822                	sd	s0,16(sp)
    80209250:	e426                	sd	s1,8(sp)
    80209252:	1000                	addi	s0,sp,32
    80209254:	84aa                	mv	s1,a0
  printf("panic: ");
    80209256:	0000b517          	auipc	a0,0xb
    8020925a:	74a50513          	addi	a0,a0,1866 # 802149a0 <rodata_start+0x9a0>
    8020925e:	00000097          	auipc	ra,0x0
    80209262:	036080e7          	jalr	54(ra) # 80209294 <printf>
  printf(s);
    80209266:	8526                	mv	a0,s1
    80209268:	00000097          	auipc	ra,0x0
    8020926c:	02c080e7          	jalr	44(ra) # 80209294 <printf>
  printf("\n");
    80209270:	0000c517          	auipc	a0,0xc
    80209274:	cb850513          	addi	a0,a0,-840 # 80214f28 <digits+0x400>
    80209278:	00000097          	auipc	ra,0x0
    8020927c:	01c080e7          	jalr	28(ra) # 80209294 <printf>
  backtrace();
    80209280:	00000097          	auipc	ra,0x0
    80209284:	f5a080e7          	jalr	-166(ra) # 802091da <backtrace>
  panicked = 1; // freeze uart output from other CPUs
    80209288:	4785                	li	a5,1
    8020928a:	05165717          	auipc	a4,0x5165
    8020928e:	d4f72f23          	sw	a5,-674(a4) # 8536dfe8 <panicked>
  for(;;)
    80209292:	a001                	j	80209292 <panic+0x48>

0000000080209294 <printf>:
{
    80209294:	7131                	addi	sp,sp,-192
    80209296:	fc86                	sd	ra,120(sp)
    80209298:	f8a2                	sd	s0,112(sp)
    8020929a:	f4a6                	sd	s1,104(sp)
    8020929c:	f0ca                	sd	s2,96(sp)
    8020929e:	ecce                	sd	s3,88(sp)
    802092a0:	e8d2                	sd	s4,80(sp)
    802092a2:	e4d6                	sd	s5,72(sp)
    802092a4:	e0da                	sd	s6,64(sp)
    802092a6:	fc5e                	sd	s7,56(sp)
    802092a8:	f862                	sd	s8,48(sp)
    802092aa:	f466                	sd	s9,40(sp)
    802092ac:	f06a                	sd	s10,32(sp)
    802092ae:	ec6e                	sd	s11,24(sp)
    802092b0:	0100                	addi	s0,sp,128
    802092b2:	89aa                	mv	s3,a0
    802092b4:	e40c                	sd	a1,8(s0)
    802092b6:	e810                	sd	a2,16(s0)
    802092b8:	ec14                	sd	a3,24(s0)
    802092ba:	f018                	sd	a4,32(s0)
    802092bc:	f41c                	sd	a5,40(s0)
    802092be:	03043823          	sd	a6,48(s0)
    802092c2:	03143c23          	sd	a7,56(s0)
  locking = pr.locking;
    802092c6:	05165c17          	auipc	s8,0x5165
    802092ca:	d1ac2c03          	lw	s8,-742(s8) # 8536dfe0 <pr+0x18>
  if(locking)
    802092ce:	020c1c63          	bnez	s8,80209306 <printf+0x72>
  if (fmt == 0)
    802092d2:	04098363          	beqz	s3,80209318 <printf+0x84>
  va_start(ap, fmt);
    802092d6:	00840793          	addi	a5,s0,8
    802092da:	f8f43423          	sd	a5,-120(s0)
  for(i = 0; (c = fmt[i] & 0xff) != 0; i++){
    802092de:	0009c503          	lbu	a0,0(s3)
    802092e2:	18050a63          	beqz	a0,80209476 <printf+0x1e2>
    802092e6:	4481                	li	s1,0
    if(c != '%'){
    802092e8:	02500a13          	li	s4,37
    switch(c){
    802092ec:	4ad5                	li	s5,21
    802092ee:	0000b917          	auipc	s2,0xb
    802092f2:	6da90913          	addi	s2,s2,1754 # 802149c8 <rodata_start+0x9c8>
      for(; *s; s++)
    802092f6:	02800d13          	li	s10,40
      print16(va_arg(ap, int));
    802092fa:	4c91                	li	s9,4
    consputc(digits[x >> (sizeof(uint16) * 8 - 4)]);
    802092fc:	0000cb97          	auipc	s7,0xc
    80209300:	82cb8b93          	addi	s7,s7,-2004 # 80214b28 <digits>
    80209304:	a82d                	j	8020933e <printf+0xaa>
    acquire(&pr.lock);
    80209306:	05165517          	auipc	a0,0x5165
    8020930a:	cc250513          	addi	a0,a0,-830 # 8536dfc8 <pr>
    8020930e:	00000097          	auipc	ra,0x0
    80209312:	bcc080e7          	jalr	-1076(ra) # 80208eda <acquire>
    80209316:	bf75                	j	802092d2 <printf+0x3e>
    panic("null fmt");
    80209318:	0000b517          	auipc	a0,0xb
    8020931c:	69850513          	addi	a0,a0,1688 # 802149b0 <rodata_start+0x9b0>
    80209320:	00000097          	auipc	ra,0x0
    80209324:	f2a080e7          	jalr	-214(ra) # 8020924a <panic>
      consputc(c);
    80209328:	00000097          	auipc	ra,0x0
    8020932c:	d50080e7          	jalr	-688(ra) # 80209078 <consputc>
  for(i = 0; (c = fmt[i] & 0xff) != 0; i++){
    80209330:	2485                	addiw	s1,s1,1
    80209332:	009987b3          	add	a5,s3,s1
    80209336:	0007c503          	lbu	a0,0(a5) # fffffffffffff000 <kernel_end+0xffffffff7ac90000>
    8020933a:	12050e63          	beqz	a0,80209476 <printf+0x1e2>
    if(c != '%'){
    8020933e:	ff4515e3          	bne	a0,s4,80209328 <printf+0x94>
    c = fmt[++i] & 0xff;
    80209342:	2485                	addiw	s1,s1,1
    80209344:	009987b3          	add	a5,s3,s1
    80209348:	0007c783          	lbu	a5,0(a5)
    8020934c:	00078b1b          	sext.w	s6,a5
    if(c == 0)
    80209350:	12078363          	beqz	a5,80209476 <printf+0x1e2>
    switch(c){
    80209354:	11478063          	beq	a5,s4,80209454 <printf+0x1c0>
    80209358:	f9d7871b          	addiw	a4,a5,-99
    8020935c:	0ff77713          	andi	a4,a4,255
    80209360:	10eae063          	bltu	s5,a4,80209460 <printf+0x1cc>
    80209364:	f9d7879b          	addiw	a5,a5,-99
    80209368:	0ff7f713          	andi	a4,a5,255
    8020936c:	0eeaea63          	bltu	s5,a4,80209460 <printf+0x1cc>
    80209370:	00271793          	slli	a5,a4,0x2
    80209374:	97ca                	add	a5,a5,s2
    80209376:	439c                	lw	a5,0(a5)
    80209378:	97ca                	add	a5,a5,s2
    8020937a:	8782                	jr	a5
      consputc(va_arg(ap, int));
    8020937c:	f8843783          	ld	a5,-120(s0)
    80209380:	00878713          	addi	a4,a5,8
    80209384:	f8e43423          	sd	a4,-120(s0)
    80209388:	4388                	lw	a0,0(a5)
    8020938a:	00000097          	auipc	ra,0x0
    8020938e:	cee080e7          	jalr	-786(ra) # 80209078 <consputc>
      break;
    80209392:	bf79                	j	80209330 <printf+0x9c>
      printint(va_arg(ap, int), 10, 1);
    80209394:	f8843783          	ld	a5,-120(s0)
    80209398:	00878713          	addi	a4,a5,8
    8020939c:	f8e43423          	sd	a4,-120(s0)
    802093a0:	4605                	li	a2,1
    802093a2:	45a9                	li	a1,10
    802093a4:	4388                	lw	a0,0(a5)
    802093a6:	00000097          	auipc	ra,0x0
    802093aa:	d0c080e7          	jalr	-756(ra) # 802090b2 <printint>
      break;
    802093ae:	b749                	j	80209330 <printf+0x9c>
      printint(va_arg(ap, int), 16, 1);
    802093b0:	f8843783          	ld	a5,-120(s0)
    802093b4:	00878713          	addi	a4,a5,8
    802093b8:	f8e43423          	sd	a4,-120(s0)
    802093bc:	4605                	li	a2,1
    802093be:	45c1                	li	a1,16
    802093c0:	4388                	lw	a0,0(a5)
    802093c2:	00000097          	auipc	ra,0x0
    802093c6:	cf0080e7          	jalr	-784(ra) # 802090b2 <printint>
      break;
    802093ca:	b79d                	j	80209330 <printf+0x9c>
      printptr(va_arg(ap, uint64));
    802093cc:	f8843783          	ld	a5,-120(s0)
    802093d0:	00878713          	addi	a4,a5,8
    802093d4:	f8e43423          	sd	a4,-120(s0)
    802093d8:	6388                	ld	a0,0(a5)
    802093da:	00000097          	auipc	ra,0x0
    802093de:	d7a080e7          	jalr	-646(ra) # 80209154 <printptr>
      break;
    802093e2:	b7b9                	j	80209330 <printf+0x9c>
      print16(va_arg(ap, int));
    802093e4:	f8843783          	ld	a5,-120(s0)
    802093e8:	00878713          	addi	a4,a5,8
    802093ec:	f8e43423          	sd	a4,-120(s0)
    802093f0:	0007db03          	lhu	s6,0(a5)
    802093f4:	8de6                	mv	s11,s9
    consputc(digits[x >> (sizeof(uint16) * 8 - 4)]);
    802093f6:	00cb5793          	srli	a5,s6,0xc
    802093fa:	97de                	add	a5,a5,s7
    802093fc:	0007c503          	lbu	a0,0(a5)
    80209400:	00000097          	auipc	ra,0x0
    80209404:	c78080e7          	jalr	-904(ra) # 80209078 <consputc>
  for (i = 0; i < (sizeof(uint16) * 2); i++, x <<= 4)
    80209408:	004b1b1b          	slliw	s6,s6,0x4
    8020940c:	1b42                	slli	s6,s6,0x30
    8020940e:	030b5b13          	srli	s6,s6,0x30
    80209412:	3dfd                	addiw	s11,s11,-1
    80209414:	fe0d91e3          	bnez	s11,802093f6 <printf+0x162>
    80209418:	bf21                	j	80209330 <printf+0x9c>
      if((s = va_arg(ap, char*)) == 0)
    8020941a:	f8843783          	ld	a5,-120(s0)
    8020941e:	00878713          	addi	a4,a5,8
    80209422:	f8e43423          	sd	a4,-120(s0)
    80209426:	0007bb03          	ld	s6,0(a5)
    8020942a:	000b0f63          	beqz	s6,80209448 <printf+0x1b4>
      for(; *s; s++)
    8020942e:	000b4503          	lbu	a0,0(s6)
    80209432:	ee050fe3          	beqz	a0,80209330 <printf+0x9c>
        consputc(*s);
    80209436:	00000097          	auipc	ra,0x0
    8020943a:	c42080e7          	jalr	-958(ra) # 80209078 <consputc>
      for(; *s; s++)
    8020943e:	0b05                	addi	s6,s6,1
    80209440:	000b4503          	lbu	a0,0(s6)
    80209444:	f96d                	bnez	a0,80209436 <printf+0x1a2>
    80209446:	b5ed                	j	80209330 <printf+0x9c>
        s = "(null)";
    80209448:	0000bb17          	auipc	s6,0xb
    8020944c:	560b0b13          	addi	s6,s6,1376 # 802149a8 <rodata_start+0x9a8>
      for(; *s; s++)
    80209450:	856a                	mv	a0,s10
    80209452:	b7d5                	j	80209436 <printf+0x1a2>
      consputc('%');
    80209454:	8552                	mv	a0,s4
    80209456:	00000097          	auipc	ra,0x0
    8020945a:	c22080e7          	jalr	-990(ra) # 80209078 <consputc>
      break;
    8020945e:	bdc9                	j	80209330 <printf+0x9c>
      consputc('%');
    80209460:	8552                	mv	a0,s4
    80209462:	00000097          	auipc	ra,0x0
    80209466:	c16080e7          	jalr	-1002(ra) # 80209078 <consputc>
      consputc(c);
    8020946a:	855a                	mv	a0,s6
    8020946c:	00000097          	auipc	ra,0x0
    80209470:	c0c080e7          	jalr	-1012(ra) # 80209078 <consputc>
      break;
    80209474:	bd75                	j	80209330 <printf+0x9c>
  if(locking)
    80209476:	020c1163          	bnez	s8,80209498 <printf+0x204>
}
    8020947a:	70e6                	ld	ra,120(sp)
    8020947c:	7446                	ld	s0,112(sp)
    8020947e:	74a6                	ld	s1,104(sp)
    80209480:	7906                	ld	s2,96(sp)
    80209482:	69e6                	ld	s3,88(sp)
    80209484:	6a46                	ld	s4,80(sp)
    80209486:	6aa6                	ld	s5,72(sp)
    80209488:	6b06                	ld	s6,64(sp)
    8020948a:	7be2                	ld	s7,56(sp)
    8020948c:	7c42                	ld	s8,48(sp)
    8020948e:	7ca2                	ld	s9,40(sp)
    80209490:	7d02                	ld	s10,32(sp)
    80209492:	6de2                	ld	s11,24(sp)
    80209494:	6129                	addi	sp,sp,192
    80209496:	8082                	ret
    release(&pr.lock);
    80209498:	05165517          	auipc	a0,0x5165
    8020949c:	b3050513          	addi	a0,a0,-1232 # 8536dfc8 <pr>
    802094a0:	00000097          	auipc	ra,0x0
    802094a4:	a8e080e7          	jalr	-1394(ra) # 80208f2e <release>
}
    802094a8:	bfc9                	j	8020947a <printf+0x1e6>

00000000802094aa <__debug_info>:

void
__debug_info(char *fmt, ...){
    802094aa:	7135                	addi	sp,sp,-160
    802094ac:	ec86                	sd	ra,88(sp)
    802094ae:	e8a2                	sd	s0,80(sp)
    802094b0:	e4a6                	sd	s1,72(sp)
    802094b2:	e0ca                	sd	s2,64(sp)
    802094b4:	fc4e                	sd	s3,56(sp)
    802094b6:	f852                	sd	s4,48(sp)
    802094b8:	f456                	sd	s5,40(sp)
    802094ba:	f05a                	sd	s6,32(sp)
    802094bc:	ec5e                	sd	s7,24(sp)
    802094be:	e862                	sd	s8,16(sp)
    802094c0:	1080                	addi	s0,sp,96
    802094c2:	89aa                	mv	s3,a0
    802094c4:	e40c                	sd	a1,8(s0)
    802094c6:	e810                	sd	a2,16(s0)
    802094c8:	ec14                	sd	a3,24(s0)
    802094ca:	f018                	sd	a4,32(s0)
    802094cc:	f41c                	sd	a5,40(s0)
    802094ce:	03043823          	sd	a6,48(s0)
    802094d2:	03143c23          	sd	a7,56(s0)
#ifdef DEBUG
  va_list ap;
  int i, c;
  int locking;
  char *s;
  locking = pr.locking;
    802094d6:	05165b97          	auipc	s7,0x5165
    802094da:	b0abab83          	lw	s7,-1270(s7) # 8536dfe0 <pr+0x18>
  if(locking)
    802094de:	020b9763          	bnez	s7,8020950c <__debug_info+0x62>
    acquire(&pr.lock);
  
  if (fmt == 0)
    802094e2:	02098e63          	beqz	s3,8020951e <__debug_info+0x74>
    panic("null fmt");

  va_start(ap, fmt);
    802094e6:	00840793          	addi	a5,s0,8
    802094ea:	faf43423          	sd	a5,-88(s0)
  for(i = 0; (c = fmt[i] & 0xff) != 0; i++){
    802094ee:	0009c503          	lbu	a0,0(s3)
    802094f2:	14050863          	beqz	a0,80209642 <__debug_info+0x198>
    802094f6:	4481                	li	s1,0
    if(c != '%'){
    802094f8:	02500a13          	li	s4,37
      continue;
    }
    c = fmt[++i] & 0xff;
    if(c == 0)
      break;
    switch(c){
    802094fc:	4ad5                	li	s5,21
    802094fe:	0000b917          	auipc	s2,0xb
    80209502:	52290913          	addi	s2,s2,1314 # 80214a20 <rodata_start+0xa20>
      printptr(va_arg(ap, uint64));
      break;
    case 's':
      if((s = va_arg(ap, char*)) == 0)
        s = "(null)";
      for(; *s; s++)
    80209506:	02800c13          	li	s8,40
    8020950a:	a82d                	j	80209544 <__debug_info+0x9a>
    acquire(&pr.lock);
    8020950c:	05165517          	auipc	a0,0x5165
    80209510:	abc50513          	addi	a0,a0,-1348 # 8536dfc8 <pr>
    80209514:	00000097          	auipc	ra,0x0
    80209518:	9c6080e7          	jalr	-1594(ra) # 80208eda <acquire>
    8020951c:	b7d9                	j	802094e2 <__debug_info+0x38>
    panic("null fmt");
    8020951e:	0000b517          	auipc	a0,0xb
    80209522:	49250513          	addi	a0,a0,1170 # 802149b0 <rodata_start+0x9b0>
    80209526:	00000097          	auipc	ra,0x0
    8020952a:	d24080e7          	jalr	-732(ra) # 8020924a <panic>
      consputc(c);
    8020952e:	00000097          	auipc	ra,0x0
    80209532:	b4a080e7          	jalr	-1206(ra) # 80209078 <consputc>
  for(i = 0; (c = fmt[i] & 0xff) != 0; i++){
    80209536:	2485                	addiw	s1,s1,1
    80209538:	009987b3          	add	a5,s3,s1
    8020953c:	0007c503          	lbu	a0,0(a5)
    80209540:	10050163          	beqz	a0,80209642 <__debug_info+0x198>
    if(c != '%'){
    80209544:	ff4515e3          	bne	a0,s4,8020952e <__debug_info+0x84>
    c = fmt[++i] & 0xff;
    80209548:	2485                	addiw	s1,s1,1
    8020954a:	009987b3          	add	a5,s3,s1
    8020954e:	0007c783          	lbu	a5,0(a5)
    80209552:	00078b1b          	sext.w	s6,a5
    if(c == 0)
    80209556:	c7f5                	beqz	a5,80209642 <__debug_info+0x198>
    switch(c){
    80209558:	0d478463          	beq	a5,s4,80209620 <__debug_info+0x176>
    8020955c:	f9d7871b          	addiw	a4,a5,-99
    80209560:	0ff77713          	andi	a4,a4,255
    80209564:	0ceae463          	bltu	s5,a4,8020962c <__debug_info+0x182>
    80209568:	f9d7879b          	addiw	a5,a5,-99
    8020956c:	0ff7f713          	andi	a4,a5,255
    80209570:	0aeaee63          	bltu	s5,a4,8020962c <__debug_info+0x182>
    80209574:	00271793          	slli	a5,a4,0x2
    80209578:	97ca                	add	a5,a5,s2
    8020957a:	439c                	lw	a5,0(a5)
    8020957c:	97ca                	add	a5,a5,s2
    8020957e:	8782                	jr	a5
      consputc(va_arg(ap, int));
    80209580:	fa843783          	ld	a5,-88(s0)
    80209584:	00878713          	addi	a4,a5,8
    80209588:	fae43423          	sd	a4,-88(s0)
    8020958c:	4388                	lw	a0,0(a5)
    8020958e:	00000097          	auipc	ra,0x0
    80209592:	aea080e7          	jalr	-1302(ra) # 80209078 <consputc>
      break;
    80209596:	b745                	j	80209536 <__debug_info+0x8c>
      printint(va_arg(ap, int), 10, 1);
    80209598:	fa843783          	ld	a5,-88(s0)
    8020959c:	00878713          	addi	a4,a5,8
    802095a0:	fae43423          	sd	a4,-88(s0)
    802095a4:	4605                	li	a2,1
    802095a6:	45a9                	li	a1,10
    802095a8:	4388                	lw	a0,0(a5)
    802095aa:	00000097          	auipc	ra,0x0
    802095ae:	b08080e7          	jalr	-1272(ra) # 802090b2 <printint>
      break;
    802095b2:	b751                	j	80209536 <__debug_info+0x8c>
      printint(va_arg(ap, int), 16, 1);
    802095b4:	fa843783          	ld	a5,-88(s0)
    802095b8:	00878713          	addi	a4,a5,8
    802095bc:	fae43423          	sd	a4,-88(s0)
    802095c0:	4605                	li	a2,1
    802095c2:	45c1                	li	a1,16
    802095c4:	4388                	lw	a0,0(a5)
    802095c6:	00000097          	auipc	ra,0x0
    802095ca:	aec080e7          	jalr	-1300(ra) # 802090b2 <printint>
      break;
    802095ce:	b7a5                	j	80209536 <__debug_info+0x8c>
      printptr(va_arg(ap, uint64));
    802095d0:	fa843783          	ld	a5,-88(s0)
    802095d4:	00878713          	addi	a4,a5,8
    802095d8:	fae43423          	sd	a4,-88(s0)
    802095dc:	6388                	ld	a0,0(a5)
    802095de:	00000097          	auipc	ra,0x0
    802095e2:	b76080e7          	jalr	-1162(ra) # 80209154 <printptr>
      break;
    802095e6:	bf81                	j	80209536 <__debug_info+0x8c>
      if((s = va_arg(ap, char*)) == 0)
    802095e8:	fa843783          	ld	a5,-88(s0)
    802095ec:	00878713          	addi	a4,a5,8
    802095f0:	fae43423          	sd	a4,-88(s0)
    802095f4:	0007bb03          	ld	s6,0(a5)
    802095f8:	000b0e63          	beqz	s6,80209614 <__debug_info+0x16a>
      for(; *s; s++)
    802095fc:	000b4503          	lbu	a0,0(s6)
    80209600:	d91d                	beqz	a0,80209536 <__debug_info+0x8c>
        consputc(*s);
    80209602:	00000097          	auipc	ra,0x0
    80209606:	a76080e7          	jalr	-1418(ra) # 80209078 <consputc>
      for(; *s; s++)
    8020960a:	0b05                	addi	s6,s6,1
    8020960c:	000b4503          	lbu	a0,0(s6)
    80209610:	f96d                	bnez	a0,80209602 <__debug_info+0x158>
    80209612:	b715                	j	80209536 <__debug_info+0x8c>
        s = "(null)";
    80209614:	0000bb17          	auipc	s6,0xb
    80209618:	394b0b13          	addi	s6,s6,916 # 802149a8 <rodata_start+0x9a8>
      for(; *s; s++)
    8020961c:	8562                	mv	a0,s8
    8020961e:	b7d5                	j	80209602 <__debug_info+0x158>
      break;
    case '%':
      consputc('%');
    80209620:	8552                	mv	a0,s4
    80209622:	00000097          	auipc	ra,0x0
    80209626:	a56080e7          	jalr	-1450(ra) # 80209078 <consputc>
      break;
    8020962a:	b731                	j	80209536 <__debug_info+0x8c>
    default:
      // Print unknown % sequence to draw attention.
      consputc('%');
    8020962c:	8552                	mv	a0,s4
    8020962e:	00000097          	auipc	ra,0x0
    80209632:	a4a080e7          	jalr	-1462(ra) # 80209078 <consputc>
      consputc(c);
    80209636:	855a                	mv	a0,s6
    80209638:	00000097          	auipc	ra,0x0
    8020963c:	a40080e7          	jalr	-1472(ra) # 80209078 <consputc>
      break;
    80209640:	bddd                	j	80209536 <__debug_info+0x8c>
    }
    
  }
  if(locking)
    80209642:	000b9e63          	bnez	s7,8020965e <__debug_info+0x1b4>
    release(&pr.lock);
#endif    
}
    80209646:	60e6                	ld	ra,88(sp)
    80209648:	6446                	ld	s0,80(sp)
    8020964a:	64a6                	ld	s1,72(sp)
    8020964c:	6906                	ld	s2,64(sp)
    8020964e:	79e2                	ld	s3,56(sp)
    80209650:	7a42                	ld	s4,48(sp)
    80209652:	7aa2                	ld	s5,40(sp)
    80209654:	7b02                	ld	s6,32(sp)
    80209656:	6be2                	ld	s7,24(sp)
    80209658:	6c42                	ld	s8,16(sp)
    8020965a:	610d                	addi	sp,sp,160
    8020965c:	8082                	ret
    release(&pr.lock);
    8020965e:	05165517          	auipc	a0,0x5165
    80209662:	96a50513          	addi	a0,a0,-1686 # 8536dfc8 <pr>
    80209666:	00000097          	auipc	ra,0x0
    8020966a:	8c8080e7          	jalr	-1848(ra) # 80208f2e <release>
}
    8020966e:	bfe1                	j	80209646 <__debug_info+0x19c>

0000000080209670 <__debug_warn>:

void
__debug_warn(char *fmt, ...){
    80209670:	7135                	addi	sp,sp,-160
    80209672:	ec86                	sd	ra,88(sp)
    80209674:	e8a2                	sd	s0,80(sp)
    80209676:	e4a6                	sd	s1,72(sp)
    80209678:	e0ca                	sd	s2,64(sp)
    8020967a:	fc4e                	sd	s3,56(sp)
    8020967c:	f852                	sd	s4,48(sp)
    8020967e:	f456                	sd	s5,40(sp)
    80209680:	f05a                	sd	s6,32(sp)
    80209682:	ec5e                	sd	s7,24(sp)
    80209684:	e862                	sd	s8,16(sp)
    80209686:	1080                	addi	s0,sp,96
    80209688:	89aa                	mv	s3,a0
    8020968a:	e40c                	sd	a1,8(s0)
    8020968c:	e810                	sd	a2,16(s0)
    8020968e:	ec14                	sd	a3,24(s0)
    80209690:	f018                	sd	a4,32(s0)
    80209692:	f41c                	sd	a5,40(s0)
    80209694:	03043823          	sd	a6,48(s0)
    80209698:	03143c23          	sd	a7,56(s0)
#ifdef WARNING
  va_list ap;
  int i, c;
  int locking;
  char *s;
  locking = pr.locking;
    8020969c:	05165b97          	auipc	s7,0x5165
    802096a0:	944bab83          	lw	s7,-1724(s7) # 8536dfe0 <pr+0x18>
  if(locking)
    802096a4:	020b9f63          	bnez	s7,802096e2 <__debug_warn+0x72>
    acquire(&pr.lock);
  
  if (fmt == 0)
    802096a8:	04098663          	beqz	s3,802096f4 <__debug_warn+0x84>
    panic("null fmt");
  printstring(warningstr);
    802096ac:	0100f517          	auipc	a0,0x100f
    802096b0:	96c50513          	addi	a0,a0,-1684 # 81218018 <warningstr>
    802096b4:	00000097          	auipc	ra,0x0
    802096b8:	afa080e7          	jalr	-1286(ra) # 802091ae <printstring>
  va_start(ap, fmt);
    802096bc:	00840793          	addi	a5,s0,8
    802096c0:	faf43423          	sd	a5,-88(s0)
  for(i = 0; (c = fmt[i] & 0xff) != 0; i++){
    802096c4:	0009c503          	lbu	a0,0(s3)
    802096c8:	14050863          	beqz	a0,80209818 <__debug_warn+0x1a8>
    802096cc:	4481                	li	s1,0
    if(c != '%'){
    802096ce:	02500a13          	li	s4,37
      continue;
    }
    c = fmt[++i] & 0xff;
    if(c == 0)
      break;
    switch(c){
    802096d2:	4ad5                	li	s5,21
    802096d4:	0000b917          	auipc	s2,0xb
    802096d8:	3a490913          	addi	s2,s2,932 # 80214a78 <rodata_start+0xa78>
      printptr(va_arg(ap, uint64));
      break;
    case 's':
      if((s = va_arg(ap, char*)) == 0)
        s = "(null)";
      for(; *s; s++)
    802096dc:	02800c13          	li	s8,40
    802096e0:	a82d                	j	8020971a <__debug_warn+0xaa>
    acquire(&pr.lock);
    802096e2:	05165517          	auipc	a0,0x5165
    802096e6:	8e650513          	addi	a0,a0,-1818 # 8536dfc8 <pr>
    802096ea:	fffff097          	auipc	ra,0xfffff
    802096ee:	7f0080e7          	jalr	2032(ra) # 80208eda <acquire>
    802096f2:	bf5d                	j	802096a8 <__debug_warn+0x38>
    panic("null fmt");
    802096f4:	0000b517          	auipc	a0,0xb
    802096f8:	2bc50513          	addi	a0,a0,700 # 802149b0 <rodata_start+0x9b0>
    802096fc:	00000097          	auipc	ra,0x0
    80209700:	b4e080e7          	jalr	-1202(ra) # 8020924a <panic>
      consputc(c);
    80209704:	00000097          	auipc	ra,0x0
    80209708:	974080e7          	jalr	-1676(ra) # 80209078 <consputc>
  for(i = 0; (c = fmt[i] & 0xff) != 0; i++){
    8020970c:	2485                	addiw	s1,s1,1
    8020970e:	009987b3          	add	a5,s3,s1
    80209712:	0007c503          	lbu	a0,0(a5)
    80209716:	10050163          	beqz	a0,80209818 <__debug_warn+0x1a8>
    if(c != '%'){
    8020971a:	ff4515e3          	bne	a0,s4,80209704 <__debug_warn+0x94>
    c = fmt[++i] & 0xff;
    8020971e:	2485                	addiw	s1,s1,1
    80209720:	009987b3          	add	a5,s3,s1
    80209724:	0007c783          	lbu	a5,0(a5)
    80209728:	00078b1b          	sext.w	s6,a5
    if(c == 0)
    8020972c:	c7f5                	beqz	a5,80209818 <__debug_warn+0x1a8>
    switch(c){
    8020972e:	0d478463          	beq	a5,s4,802097f6 <__debug_warn+0x186>
    80209732:	f9d7871b          	addiw	a4,a5,-99
    80209736:	0ff77713          	andi	a4,a4,255
    8020973a:	0ceae463          	bltu	s5,a4,80209802 <__debug_warn+0x192>
    8020973e:	f9d7879b          	addiw	a5,a5,-99
    80209742:	0ff7f713          	andi	a4,a5,255
    80209746:	0aeaee63          	bltu	s5,a4,80209802 <__debug_warn+0x192>
    8020974a:	00271793          	slli	a5,a4,0x2
    8020974e:	97ca                	add	a5,a5,s2
    80209750:	439c                	lw	a5,0(a5)
    80209752:	97ca                	add	a5,a5,s2
    80209754:	8782                	jr	a5
      consputc(va_arg(ap, int));
    80209756:	fa843783          	ld	a5,-88(s0)
    8020975a:	00878713          	addi	a4,a5,8
    8020975e:	fae43423          	sd	a4,-88(s0)
    80209762:	4388                	lw	a0,0(a5)
    80209764:	00000097          	auipc	ra,0x0
    80209768:	914080e7          	jalr	-1772(ra) # 80209078 <consputc>
      break;
    8020976c:	b745                	j	8020970c <__debug_warn+0x9c>
      printint(va_arg(ap, int), 10, 1);
    8020976e:	fa843783          	ld	a5,-88(s0)
    80209772:	00878713          	addi	a4,a5,8
    80209776:	fae43423          	sd	a4,-88(s0)
    8020977a:	4605                	li	a2,1
    8020977c:	45a9                	li	a1,10
    8020977e:	4388                	lw	a0,0(a5)
    80209780:	00000097          	auipc	ra,0x0
    80209784:	932080e7          	jalr	-1742(ra) # 802090b2 <printint>
      break;
    80209788:	b751                	j	8020970c <__debug_warn+0x9c>
      printint(va_arg(ap, int), 16, 1);
    8020978a:	fa843783          	ld	a5,-88(s0)
    8020978e:	00878713          	addi	a4,a5,8
    80209792:	fae43423          	sd	a4,-88(s0)
    80209796:	4605                	li	a2,1
    80209798:	45c1                	li	a1,16
    8020979a:	4388                	lw	a0,0(a5)
    8020979c:	00000097          	auipc	ra,0x0
    802097a0:	916080e7          	jalr	-1770(ra) # 802090b2 <printint>
      break;
    802097a4:	b7a5                	j	8020970c <__debug_warn+0x9c>
      printptr(va_arg(ap, uint64));
    802097a6:	fa843783          	ld	a5,-88(s0)
    802097aa:	00878713          	addi	a4,a5,8
    802097ae:	fae43423          	sd	a4,-88(s0)
    802097b2:	6388                	ld	a0,0(a5)
    802097b4:	00000097          	auipc	ra,0x0
    802097b8:	9a0080e7          	jalr	-1632(ra) # 80209154 <printptr>
      break;
    802097bc:	bf81                	j	8020970c <__debug_warn+0x9c>
      if((s = va_arg(ap, char*)) == 0)
    802097be:	fa843783          	ld	a5,-88(s0)
    802097c2:	00878713          	addi	a4,a5,8
    802097c6:	fae43423          	sd	a4,-88(s0)
    802097ca:	0007bb03          	ld	s6,0(a5)
    802097ce:	000b0e63          	beqz	s6,802097ea <__debug_warn+0x17a>
      for(; *s; s++)
    802097d2:	000b4503          	lbu	a0,0(s6)
    802097d6:	d91d                	beqz	a0,8020970c <__debug_warn+0x9c>
        consputc(*s);
    802097d8:	00000097          	auipc	ra,0x0
    802097dc:	8a0080e7          	jalr	-1888(ra) # 80209078 <consputc>
      for(; *s; s++)
    802097e0:	0b05                	addi	s6,s6,1
    802097e2:	000b4503          	lbu	a0,0(s6)
    802097e6:	f96d                	bnez	a0,802097d8 <__debug_warn+0x168>
    802097e8:	b715                	j	8020970c <__debug_warn+0x9c>
        s = "(null)";
    802097ea:	0000bb17          	auipc	s6,0xb
    802097ee:	1beb0b13          	addi	s6,s6,446 # 802149a8 <rodata_start+0x9a8>
      for(; *s; s++)
    802097f2:	8562                	mv	a0,s8
    802097f4:	b7d5                	j	802097d8 <__debug_warn+0x168>
      break;
    case '%':
      consputc('%');
    802097f6:	8552                	mv	a0,s4
    802097f8:	00000097          	auipc	ra,0x0
    802097fc:	880080e7          	jalr	-1920(ra) # 80209078 <consputc>
      break;
    80209800:	b731                	j	8020970c <__debug_warn+0x9c>
    default:
      // Print unknown % sequence to draw attention.
      consputc('%');
    80209802:	8552                	mv	a0,s4
    80209804:	00000097          	auipc	ra,0x0
    80209808:	874080e7          	jalr	-1932(ra) # 80209078 <consputc>
      consputc(c);
    8020980c:	855a                	mv	a0,s6
    8020980e:	00000097          	auipc	ra,0x0
    80209812:	86a080e7          	jalr	-1942(ra) # 80209078 <consputc>
      break;
    80209816:	bddd                	j	8020970c <__debug_warn+0x9c>
    }
    
  }
  if(locking)
    80209818:	000b9e63          	bnez	s7,80209834 <__debug_warn+0x1c4>
    release(&pr.lock);
#endif
}
    8020981c:	60e6                	ld	ra,88(sp)
    8020981e:	6446                	ld	s0,80(sp)
    80209820:	64a6                	ld	s1,72(sp)
    80209822:	6906                	ld	s2,64(sp)
    80209824:	79e2                	ld	s3,56(sp)
    80209826:	7a42                	ld	s4,48(sp)
    80209828:	7aa2                	ld	s5,40(sp)
    8020982a:	7b02                	ld	s6,32(sp)
    8020982c:	6be2                	ld	s7,24(sp)
    8020982e:	6c42                	ld	s8,16(sp)
    80209830:	610d                	addi	sp,sp,160
    80209832:	8082                	ret
    release(&pr.lock);
    80209834:	05164517          	auipc	a0,0x5164
    80209838:	79450513          	addi	a0,a0,1940 # 8536dfc8 <pr>
    8020983c:	fffff097          	auipc	ra,0xfffff
    80209840:	6f2080e7          	jalr	1778(ra) # 80208f2e <release>
}
    80209844:	bfe1                	j	8020981c <__debug_warn+0x1ac>

0000000080209846 <__debug_error>:

void
__debug_error(char *fmt, ...){
    80209846:	7135                	addi	sp,sp,-160
    80209848:	ec86                	sd	ra,88(sp)
    8020984a:	e8a2                	sd	s0,80(sp)
    8020984c:	e4a6                	sd	s1,72(sp)
    8020984e:	e0ca                	sd	s2,64(sp)
    80209850:	fc4e                	sd	s3,56(sp)
    80209852:	f852                	sd	s4,48(sp)
    80209854:	f456                	sd	s5,40(sp)
    80209856:	f05a                	sd	s6,32(sp)
    80209858:	ec5e                	sd	s7,24(sp)
    8020985a:	e862                	sd	s8,16(sp)
    8020985c:	1080                	addi	s0,sp,96
    8020985e:	8a2a                	mv	s4,a0
    80209860:	e40c                	sd	a1,8(s0)
    80209862:	e810                	sd	a2,16(s0)
    80209864:	ec14                	sd	a3,24(s0)
    80209866:	f018                	sd	a4,32(s0)
    80209868:	f41c                	sd	a5,40(s0)
    8020986a:	03043823          	sd	a6,48(s0)
    8020986e:	03143c23          	sd	a7,56(s0)
#ifdef ERROR
  va_list ap;
  int i, c;
  int locking;
  char *s;
  locking = pr.locking;
    80209872:	05164b17          	auipc	s6,0x5164
    80209876:	76eb2b03          	lw	s6,1902(s6) # 8536dfe0 <pr+0x18>
  if(locking)
    8020987a:	020b1f63          	bnez	s6,802098b8 <__debug_error+0x72>
    acquire(&pr.lock);
  
  if (fmt == 0)
    8020987e:	040a0663          	beqz	s4,802098ca <__debug_error+0x84>
    panic("null fmt");

  printstring(errorstr);
    80209882:	0100e517          	auipc	a0,0x100e
    80209886:	7be50513          	addi	a0,a0,1982 # 81218040 <errorstr>
    8020988a:	00000097          	auipc	ra,0x0
    8020988e:	924080e7          	jalr	-1756(ra) # 802091ae <printstring>
  va_start(ap, fmt);
    80209892:	00840793          	addi	a5,s0,8
    80209896:	faf43423          	sd	a5,-88(s0)
  for(i = 0; (c = fmt[i] & 0xff) != 0; i++){
    8020989a:	000a4503          	lbu	a0,0(s4)
    8020989e:	14050863          	beqz	a0,802099ee <__debug_error+0x1a8>
    802098a2:	4981                	li	s3,0
    if(c != '%'){
    802098a4:	02500a93          	li	s5,37
      continue;
    }
    c = fmt[++i] & 0xff;
    if(c == 0)
      break;
    switch(c){
    802098a8:	4955                	li	s2,21
    802098aa:	0000b497          	auipc	s1,0xb
    802098ae:	22648493          	addi	s1,s1,550 # 80214ad0 <rodata_start+0xad0>
      printptr(va_arg(ap, uint64));
      break;
    case 's':
      if((s = va_arg(ap, char*)) == 0)
        s = "(null)";
      for(; *s; s++)
    802098b2:	02800c13          	li	s8,40
    802098b6:	a82d                	j	802098f0 <__debug_error+0xaa>
    acquire(&pr.lock);
    802098b8:	05164517          	auipc	a0,0x5164
    802098bc:	71050513          	addi	a0,a0,1808 # 8536dfc8 <pr>
    802098c0:	fffff097          	auipc	ra,0xfffff
    802098c4:	61a080e7          	jalr	1562(ra) # 80208eda <acquire>
    802098c8:	bf5d                	j	8020987e <__debug_error+0x38>
    panic("null fmt");
    802098ca:	0000b517          	auipc	a0,0xb
    802098ce:	0e650513          	addi	a0,a0,230 # 802149b0 <rodata_start+0x9b0>
    802098d2:	00000097          	auipc	ra,0x0
    802098d6:	978080e7          	jalr	-1672(ra) # 8020924a <panic>
      consputc(c);
    802098da:	fffff097          	auipc	ra,0xfffff
    802098de:	79e080e7          	jalr	1950(ra) # 80209078 <consputc>
  for(i = 0; (c = fmt[i] & 0xff) != 0; i++){
    802098e2:	2985                	addiw	s3,s3,1
    802098e4:	013a07b3          	add	a5,s4,s3
    802098e8:	0007c503          	lbu	a0,0(a5)
    802098ec:	10050163          	beqz	a0,802099ee <__debug_error+0x1a8>
    if(c != '%'){
    802098f0:	ff5515e3          	bne	a0,s5,802098da <__debug_error+0x94>
    c = fmt[++i] & 0xff;
    802098f4:	2985                	addiw	s3,s3,1
    802098f6:	013a07b3          	add	a5,s4,s3
    802098fa:	0007c783          	lbu	a5,0(a5)
    802098fe:	00078b9b          	sext.w	s7,a5
    if(c == 0)
    80209902:	c7f5                	beqz	a5,802099ee <__debug_error+0x1a8>
    switch(c){
    80209904:	0d578463          	beq	a5,s5,802099cc <__debug_error+0x186>
    80209908:	f9d7871b          	addiw	a4,a5,-99
    8020990c:	0ff77713          	andi	a4,a4,255
    80209910:	0ce96463          	bltu	s2,a4,802099d8 <__debug_error+0x192>
    80209914:	f9d7879b          	addiw	a5,a5,-99
    80209918:	0ff7f713          	andi	a4,a5,255
    8020991c:	0ae96e63          	bltu	s2,a4,802099d8 <__debug_error+0x192>
    80209920:	00271793          	slli	a5,a4,0x2
    80209924:	97a6                	add	a5,a5,s1
    80209926:	439c                	lw	a5,0(a5)
    80209928:	97a6                	add	a5,a5,s1
    8020992a:	8782                	jr	a5
      consputc(va_arg(ap, int));
    8020992c:	fa843783          	ld	a5,-88(s0)
    80209930:	00878713          	addi	a4,a5,8
    80209934:	fae43423          	sd	a4,-88(s0)
    80209938:	4388                	lw	a0,0(a5)
    8020993a:	fffff097          	auipc	ra,0xfffff
    8020993e:	73e080e7          	jalr	1854(ra) # 80209078 <consputc>
      break;
    80209942:	b745                	j	802098e2 <__debug_error+0x9c>
      printint(va_arg(ap, int), 10, 1);
    80209944:	fa843783          	ld	a5,-88(s0)
    80209948:	00878713          	addi	a4,a5,8
    8020994c:	fae43423          	sd	a4,-88(s0)
    80209950:	4605                	li	a2,1
    80209952:	45a9                	li	a1,10
    80209954:	4388                	lw	a0,0(a5)
    80209956:	fffff097          	auipc	ra,0xfffff
    8020995a:	75c080e7          	jalr	1884(ra) # 802090b2 <printint>
      break;
    8020995e:	b751                	j	802098e2 <__debug_error+0x9c>
      printint(va_arg(ap, int), 16, 1);
    80209960:	fa843783          	ld	a5,-88(s0)
    80209964:	00878713          	addi	a4,a5,8
    80209968:	fae43423          	sd	a4,-88(s0)
    8020996c:	4605                	li	a2,1
    8020996e:	45c1                	li	a1,16
    80209970:	4388                	lw	a0,0(a5)
    80209972:	fffff097          	auipc	ra,0xfffff
    80209976:	740080e7          	jalr	1856(ra) # 802090b2 <printint>
      break;
    8020997a:	b7a5                	j	802098e2 <__debug_error+0x9c>
      printptr(va_arg(ap, uint64));
    8020997c:	fa843783          	ld	a5,-88(s0)
    80209980:	00878713          	addi	a4,a5,8
    80209984:	fae43423          	sd	a4,-88(s0)
    80209988:	6388                	ld	a0,0(a5)
    8020998a:	fffff097          	auipc	ra,0xfffff
    8020998e:	7ca080e7          	jalr	1994(ra) # 80209154 <printptr>
      break;
    80209992:	bf81                	j	802098e2 <__debug_error+0x9c>
      if((s = va_arg(ap, char*)) == 0)
    80209994:	fa843783          	ld	a5,-88(s0)
    80209998:	00878713          	addi	a4,a5,8
    8020999c:	fae43423          	sd	a4,-88(s0)
    802099a0:	0007bb83          	ld	s7,0(a5)
    802099a4:	000b8e63          	beqz	s7,802099c0 <__debug_error+0x17a>
      for(; *s; s++)
    802099a8:	000bc503          	lbu	a0,0(s7)
    802099ac:	d91d                	beqz	a0,802098e2 <__debug_error+0x9c>
        consputc(*s);
    802099ae:	fffff097          	auipc	ra,0xfffff
    802099b2:	6ca080e7          	jalr	1738(ra) # 80209078 <consputc>
      for(; *s; s++)
    802099b6:	0b85                	addi	s7,s7,1
    802099b8:	000bc503          	lbu	a0,0(s7)
    802099bc:	f96d                	bnez	a0,802099ae <__debug_error+0x168>
    802099be:	b715                	j	802098e2 <__debug_error+0x9c>
        s = "(null)";
    802099c0:	0000bb97          	auipc	s7,0xb
    802099c4:	fe8b8b93          	addi	s7,s7,-24 # 802149a8 <rodata_start+0x9a8>
      for(; *s; s++)
    802099c8:	8562                	mv	a0,s8
    802099ca:	b7d5                	j	802099ae <__debug_error+0x168>
      break;
    case '%':
      consputc('%');
    802099cc:	8556                	mv	a0,s5
    802099ce:	fffff097          	auipc	ra,0xfffff
    802099d2:	6aa080e7          	jalr	1706(ra) # 80209078 <consputc>
      break;
    802099d6:	b731                	j	802098e2 <__debug_error+0x9c>
    default:
      // Print unknown % sequence to draw attention.
      consputc('%');
    802099d8:	8556                	mv	a0,s5
    802099da:	fffff097          	auipc	ra,0xfffff
    802099de:	69e080e7          	jalr	1694(ra) # 80209078 <consputc>
      consputc(c);
    802099e2:	855e                	mv	a0,s7
    802099e4:	fffff097          	auipc	ra,0xfffff
    802099e8:	694080e7          	jalr	1684(ra) # 80209078 <consputc>
      break;
    802099ec:	bddd                	j	802098e2 <__debug_error+0x9c>
    }
    
  }
  if(locking)
    802099ee:	000b1c63          	bnez	s6,80209a06 <__debug_error+0x1c0>
    release(&pr.lock);
  
  backtrace();
    802099f2:	fffff097          	auipc	ra,0xfffff
    802099f6:	7e8080e7          	jalr	2024(ra) # 802091da <backtrace>
  panicked = 1; // freeze uart output from other CPUs
    802099fa:	4785                	li	a5,1
    802099fc:	05164717          	auipc	a4,0x5164
    80209a00:	5ef72623          	sw	a5,1516(a4) # 8536dfe8 <panicked>
  for(;;)
    80209a04:	a001                	j	80209a04 <__debug_error+0x1be>
    release(&pr.lock);
    80209a06:	05164517          	auipc	a0,0x5164
    80209a0a:	5c250513          	addi	a0,a0,1474 # 8536dfc8 <pr>
    80209a0e:	fffff097          	auipc	ra,0xfffff
    80209a12:	520080e7          	jalr	1312(ra) # 80208f2e <release>
    80209a16:	bff1                	j	802099f2 <__debug_error+0x1ac>

0000000080209a18 <printfinit>:
#endif
}

void
printfinit(void)
{
    80209a18:	1101                	addi	sp,sp,-32
    80209a1a:	ec06                	sd	ra,24(sp)
    80209a1c:	e822                	sd	s0,16(sp)
    80209a1e:	e426                	sd	s1,8(sp)
    80209a20:	1000                	addi	s0,sp,32
  initlock(&pr.lock, "pr");
    80209a22:	05164497          	auipc	s1,0x5164
    80209a26:	5a648493          	addi	s1,s1,1446 # 8536dfc8 <pr>
    80209a2a:	0000b597          	auipc	a1,0xb
    80209a2e:	f9658593          	addi	a1,a1,-106 # 802149c0 <rodata_start+0x9c0>
    80209a32:	8526                	mv	a0,s1
    80209a34:	fffff097          	auipc	ra,0xfffff
    80209a38:	462080e7          	jalr	1122(ra) # 80208e96 <initlock>
  pr.locking = 1;   // changed, used to be 1
    80209a3c:	4785                	li	a5,1
    80209a3e:	cc9c                	sw	a5,24(s1)
}
    80209a40:	60e2                	ld	ra,24(sp)
    80209a42:	6442                	ld	s0,16(sp)
    80209a44:	64a2                	ld	s1,8(sp)
    80209a46:	6105                	addi	sp,sp,32
    80209a48:	8082                	ret

0000000080209a4a <print_logo>:
    printf(" /  .'.  \\ \\-'\\   /   \\  `-' /        \\       / |  |'->  `|  |_)  |  |'->\\-'\\   /    |  `---.,------.)\\  '-'(_ .'\n");
    printf("`--'   '--'    `-'     `----'          `-----'  `--'      `--'    `--'       `-'     `------'`------'  `-----'   \n");
*/
}
#else
void print_logo() {
    80209a4a:	1141                	addi	sp,sp,-16
    80209a4c:	e422                	sd	s0,8(sp)
    80209a4e:	0800                	addi	s0,sp,16
    printf("   \\   \\ |    \\   '   /, | .-.  '  (,------. (_|  | |  |  (|  '--.   |  |'.'|  |  |  |_|( OO )\n");
    printf("  .'    \\_)    \\     /__)' \\  |  |  '------'   |  | |  |   |  .--'   |  |   |  |  |  | | `-' /\n");
    printf(" /  .'.  \\      \\   /    \\  `'  /              '  '-'  '-. |  `---.  |  |   |  | ('  '-'(_.-'\n");
    printf("'--'   '--'      `-'      `----'                `-----'--' `------'  `--'   `--'   `-----'\n");
*/
}
    80209a50:	6422                	ld	s0,8(sp)
    80209a52:	0141                	addi	sp,sp,16
    80209a54:	8082                	ret

0000000080209a56 <__mul_alloc_no_lock>:
	__debug_info("[multiple] %d [single] %d\n", multiple.npage, single.npage);
}


// Allocate n pages 
static void *__mul_alloc_no_lock(uint64 n) {
    80209a56:	1141                	addi	sp,sp,-16
    80209a58:	e422                	sd	s0,8(sp)
    80209a5a:	0800                	addi	s0,sp,16
    80209a5c:	872a                	mv	a4,a0
	struct run *pa;
	struct run **pprev;

	pa = multiple.freelist;
    80209a5e:	05164517          	auipc	a0,0x5164
    80209a62:	5aa53503          	ld	a0,1450(a0) # 8536e008 <multiple+0x18>
	pprev = &(multiple.freelist);

	while (NULL != pa) {
    80209a66:	cd05                	beqz	a0,80209a9e <__mul_alloc_no_lock+0x48>
	pprev = &(multiple.freelist);
    80209a68:	05164697          	auipc	a3,0x5164
    80209a6c:	5a068693          	addi	a3,a3,1440 # 8536e008 <multiple+0x18>
		if (pa->npage >= n) {
    80209a70:	651c                	ld	a5,8(a0)
    80209a72:	00e7f663          	bgeu	a5,a4,80209a7e <__mul_alloc_no_lock+0x28>

			multiple.npage -= n;
			break;
		}

		pprev = &(pa->next);
    80209a76:	86aa                	mv	a3,a0
		pa = pa->next;
    80209a78:	6108                	ld	a0,0(a0)
	while (NULL != pa) {
    80209a7a:	f97d                	bnez	a0,80209a70 <__mul_alloc_no_lock+0x1a>
    80209a7c:	a00d                	j	80209a9e <__mul_alloc_no_lock+0x48>
				(uint64)pa + PGSIZE * (pa->npage - n)
    80209a7e:	8f99                	sub	a5,a5,a4
    80209a80:	00c79613          	slli	a2,a5,0xc
    80209a84:	962a                	add	a2,a2,a0
			if (pa == ret) {	// this block is used up, remove it
    80209a86:	00a60f63          	beq	a2,a0,80209aa4 <__mul_alloc_no_lock+0x4e>
				pa->npage -= n;
    80209a8a:	e51c                	sd	a5,8(a0)
				pa = ret;
    80209a8c:	8532                	mv	a0,a2
			multiple.npage -= n;
    80209a8e:	05164697          	auipc	a3,0x5164
    80209a92:	56268693          	addi	a3,a3,1378 # 8536dff0 <multiple>
    80209a96:	729c                	ld	a5,32(a3)
    80209a98:	40e78733          	sub	a4,a5,a4
    80209a9c:	f298                	sd	a4,32(a3)
	}

	return (void*)pa;
}
    80209a9e:	6422                	ld	s0,8(sp)
    80209aa0:	0141                	addi	sp,sp,16
    80209aa2:	8082                	ret
				*pprev = pa->next;
    80209aa4:	611c                	ld	a5,0(a0)
    80209aa6:	e29c                	sd	a5,0(a3)
    80209aa8:	b7dd                	j	80209a8e <__mul_alloc_no_lock+0x38>

0000000080209aaa <__mul_free_no_lock>:

// free n pages
static void __mul_free_no_lock(uint64 start, uint64 n) {
    80209aaa:	1141                	addi	sp,sp,-16
    80209aac:	e422                	sd	s0,8(sp)
    80209aae:	0800                	addi	s0,sp,16
	if (NULL == multiple.freelist) {
    80209ab0:	05164797          	auipc	a5,0x5164
    80209ab4:	5587b783          	ld	a5,1368(a5) # 8536e008 <multiple+0x18>
    80209ab8:	c7a1                	beqz	a5,80209b00 <__mul_free_no_lock+0x56>
	}

	struct run *prev = NULL;
	struct run *next = multiple.freelist;
	while (NULL != next) {
		if ((uint64)next > start) {
    80209aba:	06f56963          	bltu	a0,a5,80209b2c <__mul_free_no_lock+0x82>
			break;
		}
		else {
			prev = next;
			next = next->next;
    80209abe:	873e                	mv	a4,a5
    80209ac0:	639c                	ld	a5,0(a5)
	while (NULL != next) {
    80209ac2:	c399                	beqz	a5,80209ac8 <__mul_free_no_lock+0x1e>
		if ((uint64)next > start) {
    80209ac4:	fef57de3          	bgeu	a0,a5,80209abe <__mul_free_no_lock+0x14>
		}
	}

	struct run *pa = (struct run*)start;
    80209ac8:	86aa                	mv	a3,a0
	pa->next = next;
    80209aca:	e11c                	sd	a5,0(a0)
	pa->npage = n;
    80209acc:	e50c                	sd	a1,8(a0)

	// merge with previous 
	if (NULL != prev) {
		if (((uint64)prev + prev->npage * PGSIZE) == (uint64)pa) {
    80209ace:	00873803          	ld	a6,8(a4)
    80209ad2:	00c81613          	slli	a2,a6,0xc
    80209ad6:	963a                	add	a2,a2,a4
    80209ad8:	02a60f63          	beq	a2,a0,80209b16 <__mul_free_no_lock+0x6c>
			prev->npage += n;
			pa = prev;
		}
		else {
			prev->next = pa;
    80209adc:	e308                	sd	a0,0(a4)
		multiple.freelist = pa;
		pa->npage = n;
	}

	// merge with next 
	if (NULL != next) {
    80209ade:	c799                	beqz	a5,80209aec <__mul_free_no_lock+0x42>
		if (((uint64)pa + pa->npage * PGSIZE) == (uint64)next) {
    80209ae0:	6690                	ld	a2,8(a3)
    80209ae2:	00c61713          	slli	a4,a2,0xc
    80209ae6:	9736                	add	a4,a4,a3
    80209ae8:	02e78c63          	beq	a5,a4,80209b20 <__mul_free_no_lock+0x76>
			pa->npage += next->npage;
			pa->next = next->next;
		}
	}

	multiple.npage += n;
    80209aec:	05164717          	auipc	a4,0x5164
    80209af0:	50470713          	addi	a4,a4,1284 # 8536dff0 <multiple>
    80209af4:	731c                	ld	a5,32(a4)
    80209af6:	95be                	add	a1,a1,a5
    80209af8:	f30c                	sd	a1,32(a4)
}
    80209afa:	6422                	ld	s0,8(sp)
    80209afc:	0141                	addi	sp,sp,16
    80209afe:	8082                	ret
		multiple.freelist = (struct run*)start;
    80209b00:	05164797          	auipc	a5,0x5164
    80209b04:	4f078793          	addi	a5,a5,1264 # 8536dff0 <multiple>
    80209b08:	ef88                	sd	a0,24(a5)
		multiple.freelist->npage = n;
    80209b0a:	e50c                	sd	a1,8(a0)
		multiple.freelist->next = NULL;
    80209b0c:	6f98                	ld	a4,24(a5)
    80209b0e:	00073023          	sd	zero,0(a4)
		multiple.npage = n;
    80209b12:	f38c                	sd	a1,32(a5)
		return ;
    80209b14:	b7dd                	j	80209afa <__mul_free_no_lock+0x50>
			prev->npage += n;
    80209b16:	982e                	add	a6,a6,a1
    80209b18:	01073423          	sd	a6,8(a4)
			pa = prev;
    80209b1c:	86ba                	mv	a3,a4
    80209b1e:	b7c1                	j	80209ade <__mul_free_no_lock+0x34>
			pa->npage += next->npage;
    80209b20:	6798                	ld	a4,8(a5)
    80209b22:	963a                	add	a2,a2,a4
    80209b24:	e690                	sd	a2,8(a3)
			pa->next = next->next;
    80209b26:	639c                	ld	a5,0(a5)
    80209b28:	e29c                	sd	a5,0(a3)
    80209b2a:	b7c9                	j	80209aec <__mul_free_no_lock+0x42>
	struct run *pa = (struct run*)start;
    80209b2c:	86aa                	mv	a3,a0
	pa->next = next;
    80209b2e:	e11c                	sd	a5,0(a0)
		multiple.freelist = pa;
    80209b30:	05164717          	auipc	a4,0x5164
    80209b34:	4ca73c23          	sd	a0,1240(a4) # 8536e008 <multiple+0x18>
		pa->npage = n;
    80209b38:	e50c                	sd	a1,8(a0)
	if (NULL != next) {
    80209b3a:	b75d                	j	80209ae0 <__mul_free_no_lock+0x36>

0000000080209b3c <print_free_page_n>:
{
    80209b3c:	1141                	addi	sp,sp,-16
    80209b3e:	e406                	sd	ra,8(sp)
    80209b40:	e022                	sd	s0,0(sp)
    80209b42:	0800                	addi	s0,sp,16
	__debug_info("[multiple] %d [single] %d\n", multiple.npage, single.npage);
    80209b44:	05164797          	auipc	a5,0x5164
    80209b48:	4ac78793          	addi	a5,a5,1196 # 8536dff0 <multiple>
    80209b4c:	67b0                	ld	a2,72(a5)
    80209b4e:	738c                	ld	a1,32(a5)
    80209b50:	0000b517          	auipc	a0,0xb
    80209b54:	ff050513          	addi	a0,a0,-16 # 80214b40 <digits+0x18>
    80209b58:	00000097          	auipc	ra,0x0
    80209b5c:	952080e7          	jalr	-1710(ra) # 802094aa <__debug_info>
}
    80209b60:	60a2                	ld	ra,8(sp)
    80209b62:	6402                	ld	s0,0(sp)
    80209b64:	0141                	addi	sp,sp,16
    80209b66:	8082                	ret

0000000080209b68 <kpminit>:
		start += PGSIZE;
	}
	__leave_sin_cs 
}

void kpminit(void) {
    80209b68:	7139                	addi	sp,sp,-64
    80209b6a:	fc06                	sd	ra,56(sp)
    80209b6c:	f822                	sd	s0,48(sp)
    80209b6e:	f426                	sd	s1,40(sp)
    80209b70:	f04a                	sd	s2,32(sp)
    80209b72:	ec4e                	sd	s3,24(sp)
    80209b74:	e852                	sd	s4,16(sp)
    80209b76:	e456                	sd	s5,8(sp)
    80209b78:	0080                	addi	s0,sp,64
	// init multiple 
	multiple.freelist = NULL;
    80209b7a:	05164917          	auipc	s2,0x5164
    80209b7e:	47690913          	addi	s2,s2,1142 # 8536dff0 <multiple>
    80209b82:	00093c23          	sd	zero,24(s2)
	multiple.npage = 0;
    80209b86:	02093023          	sd	zero,32(s2)
	initlock(&multiple.lock, "multi-lock");
    80209b8a:	0000b597          	auipc	a1,0xb
    80209b8e:	fd658593          	addi	a1,a1,-42 # 80214b60 <digits+0x38>
    80209b92:	854a                	mv	a0,s2
    80209b94:	fffff097          	auipc	ra,0xfffff
    80209b98:	302080e7          	jalr	770(ra) # 80208e96 <initlock>

	// init single 
	single.freelist = NULL;
    80209b9c:	04093023          	sd	zero,64(s2)
	single.npage = 0;
    80209ba0:	04093423          	sd	zero,72(s2)
	initlock(&single.lock, "single-lock");
    80209ba4:	05164a17          	auipc	s4,0x5164
    80209ba8:	474a0a13          	addi	s4,s4,1140 # 8536e018 <single>
    80209bac:	0000b597          	auipc	a1,0xb
    80209bb0:	fc458593          	addi	a1,a1,-60 # 80214b70 <digits+0x48>
    80209bb4:	8552                	mv	a0,s4
    80209bb6:	fffff097          	auipc	ra,0xfffff
    80209bba:	2e0080e7          	jalr	736(ra) # 80208e96 <initlock>

	__mul_freerange((uint64)kernel_end, START_SINGLE);
    80209bbe:	0100e497          	auipc	s1,0x100e
    80209bc2:	48a48493          	addi	s1,s1,1162 # 81218048 <START_SINGLE>
	uint64 start = PGROUNDUP(pa_start);
    80209bc6:	7afd                	lui	s5,0xfffff
    80209bc8:	05166997          	auipc	s3,0x5166
    80209bcc:	43798993          	addi	s3,s3,1079 # 8536ffff <kernel_end+0xfff>
    80209bd0:	0159f7b3          	and	a5,s3,s5
	uint64 npage = (pa_end - start) / PGSIZE;
    80209bd4:	0004b983          	ld	s3,0(s1)
    80209bd8:	40f989b3          	sub	s3,s3,a5
    80209bdc:	00c9d993          	srli	s3,s3,0xc
	__enter_mul_cs 
    80209be0:	854a                	mv	a0,s2
    80209be2:	fffff097          	auipc	ra,0xfffff
    80209be6:	2f8080e7          	jalr	760(ra) # 80208eda <acquire>
	__mul_free_no_lock(pa_start, npage);
    80209bea:	85ce                	mv	a1,s3
    80209bec:	05165517          	auipc	a0,0x5165
    80209bf0:	41450513          	addi	a0,a0,1044 # 8536f000 <kernel_end>
    80209bf4:	00000097          	auipc	ra,0x0
    80209bf8:	eb6080e7          	jalr	-330(ra) # 80209aaa <__mul_free_no_lock>
	__leave_mul_cs 
    80209bfc:	854a                	mv	a0,s2
    80209bfe:	fffff097          	auipc	ra,0xfffff
    80209c02:	330080e7          	jalr	816(ra) # 80208f2e <release>
	uint64 start = PGROUNDUP(pa_start);
    80209c06:	6084                	ld	s1,0(s1)
    80209c08:	6785                	lui	a5,0x1
    80209c0a:	17fd                	addi	a5,a5,-1
    80209c0c:	94be                	add	s1,s1,a5
    80209c0e:	0154f4b3          	and	s1,s1,s5
	__enter_sin_cs 
    80209c12:	8552                	mv	a0,s4
    80209c14:	fffff097          	auipc	ra,0xfffff
    80209c18:	2c6080e7          	jalr	710(ra) # 80208eda <acquire>
	while (start < pa_end) {
    80209c1c:	47c5                	li	a5,17
    80209c1e:	07ee                	slli	a5,a5,0x1b
    80209c20:	00f4ff63          	bgeu	s1,a5,80209c3e <kpminit+0xd6>
	page->next = single.freelist;
    80209c24:	87ca                	mv	a5,s2
		start += PGSIZE;
    80209c26:	6605                	lui	a2,0x1
	while (start < pa_end) {
    80209c28:	46c5                	li	a3,17
    80209c2a:	06ee                	slli	a3,a3,0x1b
	page->next = single.freelist;
    80209c2c:	63b8                	ld	a4,64(a5)
    80209c2e:	e098                	sd	a4,0(s1)
	single.freelist = page;
    80209c30:	e3a4                	sd	s1,64(a5)
	single.npage += 1;
    80209c32:	67b8                	ld	a4,72(a5)
    80209c34:	0705                	addi	a4,a4,1
    80209c36:	e7b8                	sd	a4,72(a5)
		start += PGSIZE;
    80209c38:	94b2                	add	s1,s1,a2
	while (start < pa_end) {
    80209c3a:	fed4e9e3          	bltu	s1,a3,80209c2c <kpminit+0xc4>
	__leave_sin_cs 
    80209c3e:	05164497          	auipc	s1,0x5164
    80209c42:	3b248493          	addi	s1,s1,946 # 8536dff0 <multiple>
    80209c46:	05164517          	auipc	a0,0x5164
    80209c4a:	3d250513          	addi	a0,a0,978 # 8536e018 <single>
    80209c4e:	fffff097          	auipc	ra,0xfffff
    80209c52:	2e0080e7          	jalr	736(ra) # 80208f2e <release>
	__sin_freerange(START_SINGLE, PHYSTOP);

	__debug_info("kpminit kernel_end: %p, start_single: %p, phystop: %p, npage %d\n", 
    80209c56:	7098                	ld	a4,32(s1)
    80209c58:	64bc                	ld	a5,72(s1)
    80209c5a:	973e                	add	a4,a4,a5
    80209c5c:	46c5                	li	a3,17
    80209c5e:	06ee                	slli	a3,a3,0x1b
    80209c60:	0100e617          	auipc	a2,0x100e
    80209c64:	3e863603          	ld	a2,1000(a2) # 81218048 <START_SINGLE>
    80209c68:	05165597          	auipc	a1,0x5165
    80209c6c:	39858593          	addi	a1,a1,920 # 8536f000 <kernel_end>
    80209c70:	0000b517          	auipc	a0,0xb
    80209c74:	f1050513          	addi	a0,a0,-240 # 80214b80 <digits+0x58>
    80209c78:	00000097          	auipc	ra,0x0
    80209c7c:	832080e7          	jalr	-1998(ra) # 802094aa <__debug_info>
			kernel_end, (void*)START_SINGLE, (void*)PHYSTOP, multiple.npage + single.npage);
}
    80209c80:	70e2                	ld	ra,56(sp)
    80209c82:	7442                	ld	s0,48(sp)
    80209c84:	74a2                	ld	s1,40(sp)
    80209c86:	7902                	ld	s2,32(sp)
    80209c88:	69e2                	ld	s3,24(sp)
    80209c8a:	6a42                	ld	s4,16(sp)
    80209c8c:	6aa2                	ld	s5,8(sp)
    80209c8e:	6121                	addi	sp,sp,64
    80209c90:	8082                	ret

0000000080209c92 <allocpage_n>:

void *allocpage_n(uint64 n) {
    80209c92:	7179                	addi	sp,sp,-48
    80209c94:	f406                	sd	ra,40(sp)
    80209c96:	f022                	sd	s0,32(sp)
    80209c98:	ec26                	sd	s1,24(sp)
    80209c9a:	e84a                	sd	s2,16(sp)
    80209c9c:	e44e                	sd	s3,8(sp)
    80209c9e:	1800                	addi	s0,sp,48
    80209ca0:	892a                	mv	s2,a0
	//__debug_assert("allocpage_n", n > 1, "n = %d\n", n);

	void *ret;
	__enter_mul_cs 
    80209ca2:	05164997          	auipc	s3,0x5164
    80209ca6:	34e98993          	addi	s3,s3,846 # 8536dff0 <multiple>
    80209caa:	854e                	mv	a0,s3
    80209cac:	fffff097          	auipc	ra,0xfffff
    80209cb0:	22e080e7          	jalr	558(ra) # 80208eda <acquire>
	ret = __mul_alloc_no_lock(n);
    80209cb4:	854a                	mv	a0,s2
    80209cb6:	00000097          	auipc	ra,0x0
    80209cba:	da0080e7          	jalr	-608(ra) # 80209a56 <__mul_alloc_no_lock>
    80209cbe:	84aa                	mv	s1,a0
	__leave_mul_cs 
    80209cc0:	854e                	mv	a0,s3
    80209cc2:	fffff097          	auipc	ra,0xfffff
    80209cc6:	26c080e7          	jalr	620(ra) # 80208f2e <release>

	#ifdef DEBUG
	if (NULL != ret) {
    80209cca:	c889                	beqz	s1,80209cdc <allocpage_n+0x4a>
		memset(ret, 0x5, n * PGSIZE);
    80209ccc:	00c9161b          	slliw	a2,s2,0xc
    80209cd0:	4595                	li	a1,5
    80209cd2:	8526                	mv	a0,s1
    80209cd4:	ffff7097          	auipc	ra,0xffff7
    80209cd8:	0a0080e7          	jalr	160(ra) # 80200d74 <memset>
	}
	#endif 
	//__debug_info("allocpage_n", "%p %d page(s)\n", ret, n);

	return ret;
}
    80209cdc:	8526                	mv	a0,s1
    80209cde:	70a2                	ld	ra,40(sp)
    80209ce0:	7402                	ld	s0,32(sp)
    80209ce2:	64e2                	ld	s1,24(sp)
    80209ce4:	6942                	ld	s2,16(sp)
    80209ce6:	69a2                	ld	s3,8(sp)
    80209ce8:	6145                	addi	sp,sp,48
    80209cea:	8082                	ret

0000000080209cec <freepage_n>:

void freepage_n(uint64 start, uint64 n) {
    80209cec:	7179                	addi	sp,sp,-48
    80209cee:	f406                	sd	ra,40(sp)
    80209cf0:	f022                	sd	s0,32(sp)
    80209cf2:	ec26                	sd	s1,24(sp)
    80209cf4:	e84a                	sd	s2,16(sp)
    80209cf6:	e44e                	sd	s3,8(sp)
    80209cf8:	1800                	addi	s0,sp,48
    80209cfa:	84aa                	mv	s1,a0
    80209cfc:	892e                	mv	s2,a1
		(start >= (uint64)kernel_end && start < START_SINGLE) && 
		(0 == start % PGSIZE) && n > 1, 
		"start = %p, n = %d\n", start, n
	);
*/
	__enter_mul_cs 
    80209cfe:	05164997          	auipc	s3,0x5164
    80209d02:	2f298993          	addi	s3,s3,754 # 8536dff0 <multiple>
    80209d06:	854e                	mv	a0,s3
    80209d08:	fffff097          	auipc	ra,0xfffff
    80209d0c:	1d2080e7          	jalr	466(ra) # 80208eda <acquire>
	__mul_free_no_lock(start, n);
    80209d10:	85ca                	mv	a1,s2
    80209d12:	8526                	mv	a0,s1
    80209d14:	00000097          	auipc	ra,0x0
    80209d18:	d96080e7          	jalr	-618(ra) # 80209aaa <__mul_free_no_lock>
	__leave_mul_cs 
    80209d1c:	854e                	mv	a0,s3
    80209d1e:	fffff097          	auipc	ra,0xfffff
    80209d22:	210080e7          	jalr	528(ra) # 80208f2e <release>

	//__debug_info("freepage_n", "%p %d page(s)\n", start, n);
}
    80209d26:	70a2                	ld	ra,40(sp)
    80209d28:	7402                	ld	s0,32(sp)
    80209d2a:	64e2                	ld	s1,24(sp)
    80209d2c:	6942                	ld	s2,16(sp)
    80209d2e:	69a2                	ld	s3,8(sp)
    80209d30:	6145                	addi	sp,sp,48
    80209d32:	8082                	ret

0000000080209d34 <_allocpage>:

uint64 _allocpage(void) {
    80209d34:	1101                	addi	sp,sp,-32
    80209d36:	ec06                	sd	ra,24(sp)
    80209d38:	e822                	sd	s0,16(sp)
    80209d3a:	e426                	sd	s1,8(sp)
    80209d3c:	e04a                	sd	s2,0(sp)
    80209d3e:	1000                	addi	s0,sp,32
	struct run *ret;

	__enter_sin_cs 
    80209d40:	05164517          	auipc	a0,0x5164
    80209d44:	2d850513          	addi	a0,a0,728 # 8536e018 <single>
    80209d48:	fffff097          	auipc	ra,0xfffff
    80209d4c:	192080e7          	jalr	402(ra) # 80208eda <acquire>
	struct run *ret = single.freelist;
    80209d50:	05164497          	auipc	s1,0x5164
    80209d54:	2e04b483          	ld	s1,736(s1) # 8536e030 <single+0x18>
	if (NULL != ret) {
    80209d58:	c0a1                	beqz	s1,80209d98 <_allocpage+0x64>
		single.freelist = ret->next;
    80209d5a:	6098                	ld	a4,0(s1)
    80209d5c:	05164797          	auipc	a5,0x5164
    80209d60:	29478793          	addi	a5,a5,660 # 8536dff0 <multiple>
    80209d64:	e3b8                	sd	a4,64(a5)
		single.npage -= 1;
    80209d66:	67b8                	ld	a4,72(a5)
    80209d68:	177d                	addi	a4,a4,-1
    80209d6a:	e7b8                	sd	a4,72(a5)
	ret = __sin_alloc_no_lock();
	__leave_sin_cs 
    80209d6c:	05164517          	auipc	a0,0x5164
    80209d70:	2ac50513          	addi	a0,a0,684 # 8536e018 <single>
    80209d74:	fffff097          	auipc	ra,0xfffff
    80209d78:	1ba080e7          	jalr	442(ra) # 80208f2e <release>
		__leave_mul_cs 
	}
	
	#ifdef DEBUG
	if (NULL != ret) {
		memset(ret, 5, PGSIZE);
    80209d7c:	6605                	lui	a2,0x1
    80209d7e:	4595                	li	a1,5
    80209d80:	8526                	mv	a0,s1
    80209d82:	ffff7097          	auipc	ra,0xffff7
    80209d86:	ff2080e7          	jalr	-14(ra) # 80200d74 <memset>
	#endif 
	
	//__debug_info("allocpage %p\n", ret);

	return (uint64)ret;
}
    80209d8a:	8526                	mv	a0,s1
    80209d8c:	60e2                	ld	ra,24(sp)
    80209d8e:	6442                	ld	s0,16(sp)
    80209d90:	64a2                	ld	s1,8(sp)
    80209d92:	6902                	ld	s2,0(sp)
    80209d94:	6105                	addi	sp,sp,32
    80209d96:	8082                	ret
	__leave_sin_cs 
    80209d98:	05164917          	auipc	s2,0x5164
    80209d9c:	25890913          	addi	s2,s2,600 # 8536dff0 <multiple>
    80209da0:	05164517          	auipc	a0,0x5164
    80209da4:	27850513          	addi	a0,a0,632 # 8536e018 <single>
    80209da8:	fffff097          	auipc	ra,0xfffff
    80209dac:	186080e7          	jalr	390(ra) # 80208f2e <release>
		__enter_mul_cs 
    80209db0:	854a                	mv	a0,s2
    80209db2:	fffff097          	auipc	ra,0xfffff
    80209db6:	128080e7          	jalr	296(ra) # 80208eda <acquire>
		ret = __mul_alloc_no_lock(1);
    80209dba:	4505                	li	a0,1
    80209dbc:	00000097          	auipc	ra,0x0
    80209dc0:	c9a080e7          	jalr	-870(ra) # 80209a56 <__mul_alloc_no_lock>
    80209dc4:	84aa                	mv	s1,a0
		__leave_mul_cs 
    80209dc6:	854a                	mv	a0,s2
    80209dc8:	fffff097          	auipc	ra,0xfffff
    80209dcc:	166080e7          	jalr	358(ra) # 80208f2e <release>
	if (NULL != ret) {
    80209dd0:	dccd                	beqz	s1,80209d8a <_allocpage+0x56>
    80209dd2:	b76d                	j	80209d7c <_allocpage+0x48>

0000000080209dd4 <_freepage>:

void _freepage(uint64 pa) {
    80209dd4:	7179                	addi	sp,sp,-48
    80209dd6:	f406                	sd	ra,40(sp)
    80209dd8:	f022                	sd	s0,32(sp)
    80209dda:	ec26                	sd	s1,24(sp)
    80209ddc:	e84a                	sd	s2,16(sp)
    80209dde:	e44e                	sd	s3,8(sp)
    80209de0:	1800                	addi	s0,sp,48
    80209de2:	84aa                	mv	s1,a0
		(start >= (uint64)kernel_end && start < PHYSTOP) && 
		0 == start % PGSIZE, 
		"start = %p\n", start
	);
*/
	if (start < START_SINGLE) {
    80209de4:	0100e797          	auipc	a5,0x100e
    80209de8:	2647b783          	ld	a5,612(a5) # 81218048 <START_SINGLE>
    80209dec:	02f57d63          	bgeu	a0,a5,80209e26 <_freepage+0x52>
		__enter_mul_cs 
    80209df0:	05164917          	auipc	s2,0x5164
    80209df4:	20090913          	addi	s2,s2,512 # 8536dff0 <multiple>
    80209df8:	854a                	mv	a0,s2
    80209dfa:	fffff097          	auipc	ra,0xfffff
    80209dfe:	0e0080e7          	jalr	224(ra) # 80208eda <acquire>
		__mul_free_no_lock(start, 1);
    80209e02:	4585                	li	a1,1
    80209e04:	8526                	mv	a0,s1
    80209e06:	00000097          	auipc	ra,0x0
    80209e0a:	ca4080e7          	jalr	-860(ra) # 80209aaa <__mul_free_no_lock>
		__leave_mul_cs 
    80209e0e:	854a                	mv	a0,s2
    80209e10:	fffff097          	auipc	ra,0xfffff
    80209e14:	11e080e7          	jalr	286(ra) # 80208f2e <release>
		__sin_free_no_lock(start);
		__leave_sin_cs 
	}

	//__debug_info("freepage", "%p\n", start);
}
    80209e18:	70a2                	ld	ra,40(sp)
    80209e1a:	7402                	ld	s0,32(sp)
    80209e1c:	64e2                	ld	s1,24(sp)
    80209e1e:	6942                	ld	s2,16(sp)
    80209e20:	69a2                	ld	s3,8(sp)
    80209e22:	6145                	addi	sp,sp,48
    80209e24:	8082                	ret
		__enter_sin_cs 
    80209e26:	05164917          	auipc	s2,0x5164
    80209e2a:	1ca90913          	addi	s2,s2,458 # 8536dff0 <multiple>
    80209e2e:	05164997          	auipc	s3,0x5164
    80209e32:	1ea98993          	addi	s3,s3,490 # 8536e018 <single>
    80209e36:	854e                	mv	a0,s3
    80209e38:	fffff097          	auipc	ra,0xfffff
    80209e3c:	0a2080e7          	jalr	162(ra) # 80208eda <acquire>
	page->next = single.freelist;
    80209e40:	04093783          	ld	a5,64(s2)
    80209e44:	e09c                	sd	a5,0(s1)
	single.freelist = page;
    80209e46:	04993023          	sd	s1,64(s2)
	single.npage += 1;
    80209e4a:	04893783          	ld	a5,72(s2)
    80209e4e:	0785                	addi	a5,a5,1
    80209e50:	04f93423          	sd	a5,72(s2)
		__leave_sin_cs 
    80209e54:	854e                	mv	a0,s3
    80209e56:	fffff097          	auipc	ra,0xfffff
    80209e5a:	0d8080e7          	jalr	216(ra) # 80208f2e <release>
}
    80209e5e:	bf6d                	j	80209e18 <_freepage+0x44>

0000000080209e60 <idlepages>:

uint64 idlepages(void) {
    80209e60:	1141                	addi	sp,sp,-16
    80209e62:	e422                	sd	s0,8(sp)
    80209e64:	0800                	addi	s0,sp,16
	return multiple.npage + single.npage;
    80209e66:	05164797          	auipc	a5,0x5164
    80209e6a:	18a78793          	addi	a5,a5,394 # 8536dff0 <multiple>
    80209e6e:	7388                	ld	a0,32(a5)
    80209e70:	67bc                	ld	a5,72(a5)
}
    80209e72:	953e                	add	a0,a0,a5
    80209e74:	6422                	ld	s0,8(sp)
    80209e76:	0141                	addi	sp,sp,16
    80209e78:	8082                	ret

0000000080209e7a <pm_dump>:

void pm_dump(void) {
    80209e7a:	1101                	addi	sp,sp,-32
    80209e7c:	ec06                	sd	ra,24(sp)
    80209e7e:	e822                	sd	s0,16(sp)
    80209e80:	e426                	sd	s1,8(sp)
    80209e82:	e04a                	sd	s2,0(sp)
    80209e84:	1000                	addi	s0,sp,32
	__enter_mul_cs 
    80209e86:	05164917          	auipc	s2,0x5164
    80209e8a:	16a90913          	addi	s2,s2,362 # 8536dff0 <multiple>
    80209e8e:	854a                	mv	a0,s2
    80209e90:	fffff097          	auipc	ra,0xfffff
    80209e94:	04a080e7          	jalr	74(ra) # 80208eda <acquire>
	struct run *pa = multiple.freelist;
    80209e98:	01893483          	ld	s1,24(s2)
	printf("multiple avail: %d\n", multiple.npage);
    80209e9c:	02093583          	ld	a1,32(s2)
    80209ea0:	0000b517          	auipc	a0,0xb
    80209ea4:	d2850513          	addi	a0,a0,-728 # 80214bc8 <digits+0xa0>
    80209ea8:	fffff097          	auipc	ra,0xfffff
    80209eac:	3ec080e7          	jalr	1004(ra) # 80209294 <printf>
	while (NULL != pa) {
    80209eb0:	cc91                	beqz	s1,80209ecc <pm_dump+0x52>
		printf("\t%p %d\n", pa, pa->npage);
    80209eb2:	0000b917          	auipc	s2,0xb
    80209eb6:	d2e90913          	addi	s2,s2,-722 # 80214be0 <digits+0xb8>
    80209eba:	6490                	ld	a2,8(s1)
    80209ebc:	85a6                	mv	a1,s1
    80209ebe:	854a                	mv	a0,s2
    80209ec0:	fffff097          	auipc	ra,0xfffff
    80209ec4:	3d4080e7          	jalr	980(ra) # 80209294 <printf>
		pa = pa->next;
    80209ec8:	6084                	ld	s1,0(s1)
	while (NULL != pa) {
    80209eca:	f8e5                	bnez	s1,80209eba <pm_dump+0x40>
	}
	__leave_mul_cs 
    80209ecc:	05164917          	auipc	s2,0x5164
    80209ed0:	12490913          	addi	s2,s2,292 # 8536dff0 <multiple>
    80209ed4:	854a                	mv	a0,s2
    80209ed6:	fffff097          	auipc	ra,0xfffff
    80209eda:	058080e7          	jalr	88(ra) # 80208f2e <release>

	__enter_sin_cs 
    80209ede:	05164497          	auipc	s1,0x5164
    80209ee2:	13a48493          	addi	s1,s1,314 # 8536e018 <single>
    80209ee6:	8526                	mv	a0,s1
    80209ee8:	fffff097          	auipc	ra,0xfffff
    80209eec:	ff2080e7          	jalr	-14(ra) # 80208eda <acquire>
	printf("single avail: %d\n", single.npage);
    80209ef0:	04893583          	ld	a1,72(s2)
    80209ef4:	0000b517          	auipc	a0,0xb
    80209ef8:	cf450513          	addi	a0,a0,-780 # 80214be8 <digits+0xc0>
    80209efc:	fffff097          	auipc	ra,0xfffff
    80209f00:	398080e7          	jalr	920(ra) # 80209294 <printf>
	__leave_sin_cs 
    80209f04:	8526                	mv	a0,s1
    80209f06:	fffff097          	auipc	ra,0xfffff
    80209f0a:	028080e7          	jalr	40(ra) # 80208f2e <release>
}
    80209f0e:	60e2                	ld	ra,24(sp)
    80209f10:	6442                	ld	s0,16(sp)
    80209f12:	64a2                	ld	s1,8(sp)
    80209f14:	6902                	ld	s2,0(sp)
    80209f16:	6105                	addi	sp,sp,32
    80209f18:	8082                	ret

0000000080209f1a <kmallocinit>:
#define ROUNDUP16(n) \
	(((n) + 15) & ~0x0f)

// as kmalloc() use allocpage() and freepage, 
// kmallocinit() should be called at least after kpminit() 
void kmallocinit(void) {
    80209f1a:	1101                	addi	sp,sp,-32
    80209f1c:	ec06                	sd	ra,24(sp)
    80209f1e:	e822                	sd	s0,16(sp)
    80209f20:	e426                	sd	s1,8(sp)
    80209f22:	1000                	addi	s0,sp,32
	// init adam 
	initlock(&(kmem_adam.lock), "kmem_adam");
    80209f24:	05164497          	auipc	s1,0x5164
    80209f28:	11c48493          	addi	s1,s1,284 # 8536e040 <kmem_adam>
    80209f2c:	0000b597          	auipc	a1,0xb
    80209f30:	cd458593          	addi	a1,a1,-812 # 80214c00 <digits+0xd8>
    80209f34:	8526                	mv	a0,s1
    80209f36:	fffff097          	auipc	ra,0xfffff
    80209f3a:	f60080e7          	jalr	-160(ra) # 80208e96 <initlock>
	kmem_adam.list = NULL;
    80209f3e:	0204b023          	sd	zero,32(s1)
	kmem_adam.next = NULL;
    80209f42:	0204b423          	sd	zero,40(s1)
	kmem_adam.npages = 0;
    80209f46:	00049e23          	sh	zero,28(s1)
	kmem_adam.nobjs = 0;
    80209f4a:	00049f23          	sh	zero,30(s1)
	kmem_adam.obj_size = 
    80209f4e:	03000793          	li	a5,48
    80209f52:	cc9c                	sw	a5,24(s1)
			ROUNDUP16(sizeof(struct kmem_allocator));

	// init kmem_table 
	for (uint8 i = 0; i < KMEM_TABLE_SIZE; i++) {
    80209f54:	05164797          	auipc	a5,0x5164
    80209f58:	11c78793          	addi	a5,a5,284 # 8536e070 <kmem_table>
    80209f5c:	05164717          	auipc	a4,0x5164
    80209f60:	19c70713          	addi	a4,a4,412 # 8536e0f8 <kmem_table_lock>
		kmem_table[i] = NULL;
    80209f64:	0007b023          	sd	zero,0(a5)
	for (uint8 i = 0; i < KMEM_TABLE_SIZE; i++) {
    80209f68:	07a1                	addi	a5,a5,8
    80209f6a:	fee79de3          	bne	a5,a4,80209f64 <kmallocinit+0x4a>
	}
	int hash = _hash(kmem_adam.obj_size);
	kmem_table[hash] = &kmem_adam;
    80209f6e:	05164797          	auipc	a5,0x5164
    80209f72:	0d278793          	addi	a5,a5,210 # 8536e040 <kmem_adam>
    80209f76:	f3dc                	sd	a5,160(a5)
	initlock(&kmem_table_lock, "kmem_table");
    80209f78:	0000b597          	auipc	a1,0xb
    80209f7c:	c9858593          	addi	a1,a1,-872 # 80214c10 <digits+0xe8>
    80209f80:	05164517          	auipc	a0,0x5164
    80209f84:	17850513          	addi	a0,a0,376 # 8536e0f8 <kmem_table_lock>
    80209f88:	fffff097          	auipc	ra,0xfffff
    80209f8c:	f0e080e7          	jalr	-242(ra) # 80208e96 <initlock>
	printf("kmallocinit KMEM_NODE_FIX: %p\n", KMEM_NODE_FIX);
    80209f90:	45e9                	li	a1,26
    80209f92:	0000b517          	auipc	a0,0xb
    80209f96:	c8e50513          	addi	a0,a0,-882 # 80214c20 <digits+0xf8>
    80209f9a:	fffff097          	auipc	ra,0xfffff
    80209f9e:	2fa080e7          	jalr	762(ra) # 80209294 <printf>
	__debug_info("kmalloc init\n");
    80209fa2:	0000b517          	auipc	a0,0xb
    80209fa6:	c9e50513          	addi	a0,a0,-866 # 80214c40 <digits+0x118>
    80209faa:	fffff097          	auipc	ra,0xfffff
    80209fae:	500080e7          	jalr	1280(ra) # 802094aa <__debug_info>
}
    80209fb2:	60e2                	ld	ra,24(sp)
    80209fb4:	6442                	ld	s0,16(sp)
    80209fb6:	64a2                	ld	s1,8(sp)
    80209fb8:	6105                	addi	sp,sp,32
    80209fba:	8082                	ret

0000000080209fbc <kmalloc>:
	// leave critical section 

	return tmp;
}

void *kmalloc(uint size) {
    80209fbc:	7179                	addi	sp,sp,-48
    80209fbe:	f406                	sd	ra,40(sp)
    80209fc0:	f022                	sd	s0,32(sp)
    80209fc2:	ec26                	sd	s1,24(sp)
    80209fc4:	e84a                	sd	s2,16(sp)
    80209fc6:	e44e                	sd	s3,8(sp)
    80209fc8:	1800                	addi	s0,sp,48
	// border check for `size`
	if (KMEM_OBJ_MIN_SIZE > size) {
    80209fca:	47fd                	li	a5,31
    80209fcc:	08a7fd63          	bgeu	a5,a0,8020a066 <kmalloc+0xaa>
    80209fd0:	89aa                	mv	s3,a0
		//__debug_warn("kmalloc size %d too small, reset to %d\n", size, KMEM_OBJ_MIN_SIZE);
		size = KMEM_OBJ_MIN_SIZE;
	}
	else if (KMEM_OBJ_MAX_SIZE < size) {
    80209fd2:	6785                	lui	a5,0x1
    80209fd4:	fd078793          	addi	a5,a5,-48 # fd0 <_entry-0x801ff030>
    80209fd8:	06a7ec63          	bltu	a5,a0,8020a050 <kmalloc+0x94>
		__debug_error("kmalloc size %d out of border\n", size);
		return NULL;
	}
	struct kmem_allocator *alloc = get_allocator(size);
    80209fdc:	02099513          	slli	a0,s3,0x20
    80209fe0:	9101                	srli	a0,a0,0x20
    80209fe2:	00000097          	auipc	ra,0x0
    80209fe6:	13a080e7          	jalr	314(ra) # 8020a11c <get_allocator>
    80209fea:	84aa                	mv	s1,a0

	// if failed to alloc 
	if (NULL == alloc) {
    80209fec:	c141                	beqz	a0,8020a06c <kmalloc+0xb0>
		__debug_error("kmalloc fail to get allocator\n");
		return NULL;
	}

	// enter critical section `alloc`
	acquire(&(alloc->lock));
    80209fee:	fffff097          	auipc	ra,0xfffff
    80209ff2:	eec080e7          	jalr	-276(ra) # 80208eda <acquire>

	// if no page available 
	if (NULL == alloc->list) {
    80209ff6:	0204b903          	ld	s2,32(s1)
    80209ffa:	08090363          	beqz	s2,8020a080 <kmalloc+0xc4>
		tmp->table[capa - 1] = TABLE_END;

		alloc->list = tmp;
	}

	alloc->nobjs++;
    80209ffe:	01e4d783          	lhu	a5,30(s1)
    8020a002:	2785                	addiw	a5,a5,1
    8020a004:	00f49f23          	sh	a5,30(s1)

	// now the allocator should be ready 
	struct kmem_node *node = alloc->list;
    8020a008:	709c                	ld	a5,32(s1)
	void *ret;		// the address to be returned 
	ret = (void*)(node->config.obj_addr + 
			((uint64)node->avail) * node->config.obj_size);
    8020a00a:	0187c703          	lbu	a4,24(a5)
    8020a00e:	0087b903          	ld	s2,8(a5)
    8020a012:	03270933          	mul	s2,a4,s2
	ret = (void*)(node->config.obj_addr + 
    8020a016:	6b94                	ld	a3,16(a5)
    8020a018:	9936                	add	s2,s2,a3
	// update `avail` and `cnt`
	node->cnt += 1;
    8020a01a:	0197c683          	lbu	a3,25(a5)
    8020a01e:	2685                	addiw	a3,a3,1
    8020a020:	00d78ca3          	sb	a3,25(a5)
	node->avail = node->table[node->avail];
    8020a024:	973e                	add	a4,a4,a5
    8020a026:	01a74703          	lbu	a4,26(a4)
    8020a02a:	00e78c23          	sb	a4,24(a5)

	// if kmem_node is fully allocated 
	if (TABLE_END == node->avail) {
    8020a02e:	0ff00693          	li	a3,255
    8020a032:	0ed70263          	beq	a4,a3,8020a116 <kmalloc+0x15a>
		alloc->list = node->next;
	}

	release(&(alloc->lock));
    8020a036:	8526                	mv	a0,s1
    8020a038:	fffff097          	auipc	ra,0xfffff
    8020a03c:	ef6080e7          	jalr	-266(ra) # 80208f2e <release>
	// leave critical section `alloc`

	return ret;
}
    8020a040:	854a                	mv	a0,s2
    8020a042:	70a2                	ld	ra,40(sp)
    8020a044:	7402                	ld	s0,32(sp)
    8020a046:	64e2                	ld	s1,24(sp)
    8020a048:	6942                	ld	s2,16(sp)
    8020a04a:	69a2                	ld	s3,8(sp)
    8020a04c:	6145                	addi	sp,sp,48
    8020a04e:	8082                	ret
		__debug_error("kmalloc size %d out of border\n", size);
    8020a050:	85aa                	mv	a1,a0
    8020a052:	0000b517          	auipc	a0,0xb
    8020a056:	bfe50513          	addi	a0,a0,-1026 # 80214c50 <digits+0x128>
    8020a05a:	fffff097          	auipc	ra,0xfffff
    8020a05e:	7ec080e7          	jalr	2028(ra) # 80209846 <__debug_error>
		return NULL;
    8020a062:	4901                	li	s2,0
    8020a064:	bff1                	j	8020a040 <kmalloc+0x84>
		size = KMEM_OBJ_MIN_SIZE;
    8020a066:	02000993          	li	s3,32
    8020a06a:	bf8d                	j	80209fdc <kmalloc+0x20>
		__debug_error("kmalloc fail to get allocator\n");
    8020a06c:	0000b517          	auipc	a0,0xb
    8020a070:	c0450513          	addi	a0,a0,-1020 # 80214c70 <digits+0x148>
    8020a074:	fffff097          	auipc	ra,0xfffff
    8020a078:	7d2080e7          	jalr	2002(ra) # 80209846 <__debug_error>
		return NULL;
    8020a07c:	8926                	mv	s2,s1
    8020a07e:	b7c9                	j	8020a040 <kmalloc+0x84>
		struct kmem_node *tmp = (struct kmem_node*)allocpage();
    8020a080:	00000097          	auipc	ra,0x0
    8020a084:	cb4080e7          	jalr	-844(ra) # 80209d34 <_allocpage>
    8020a088:	86aa                	mv	a3,a0
		if (NULL == tmp) {
    8020a08a:	c925                	beqz	a0,8020a0fa <kmalloc+0x13e>
		alloc->npages++;
    8020a08c:	01c4d783          	lhu	a5,28(s1)
    8020a090:	2785                	addiw	a5,a5,1
    8020a092:	00f49e23          	sh	a5,28(s1)
		uint roundup_size = ROUNDUP16(size);
    8020a096:	29bd                	addiw	s3,s3,15
    8020a098:	ff09f993          	andi	s3,s3,-16
    8020a09c:	0009871b          	sext.w	a4,s3
		uint8 capa = _calc_capa(roundup_size);
    8020a0a0:	2985                	addiw	s3,s3,1
    8020a0a2:	6785                	lui	a5,0x1
    8020a0a4:	3781                	addiw	a5,a5,-32
    8020a0a6:	0337d9bb          	divuw	s3,a5,s3
		tmp->next = NULL;
    8020a0aa:	00053023          	sd	zero,0(a0)
		tmp->config.obj_size = roundup_size;
    8020a0ae:	02071793          	slli	a5,a4,0x20
    8020a0b2:	9381                	srli	a5,a5,0x20
    8020a0b4:	e51c                	sd	a5,8(a0)
		tmp->config.obj_addr = (uint64)tmp + ROUNDUP16(KMEM_NODE_FIX + capa);
    8020a0b6:	0ff9f793          	andi	a5,s3,255
    8020a0ba:	02978793          	addi	a5,a5,41 # 1029 <_entry-0x801fefd7>
    8020a0be:	9bc1                	andi	a5,a5,-16
    8020a0c0:	97aa                	add	a5,a5,a0
    8020a0c2:	e91c                	sd	a5,16(a0)
		tmp->avail = 0;
    8020a0c4:	00050c23          	sb	zero,24(a0)
		tmp->cnt = 0;
    8020a0c8:	00050ca3          	sb	zero,25(a0)
		for (uint8 i = 0; i < capa - 1; i ++) {
    8020a0cc:	0ff9f993          	andi	s3,s3,255
    8020a0d0:	39fd                	addiw	s3,s3,-1
    8020a0d2:	01305e63          	blez	s3,8020a0ee <kmalloc+0x132>
    8020a0d6:	4781                	li	a5,0
    8020a0d8:	4701                	li	a4,0
			tmp->table[i] = i + 1;
    8020a0da:	2785                	addiw	a5,a5,1
    8020a0dc:	0ff7f793          	andi	a5,a5,255
    8020a0e0:	9736                	add	a4,a4,a3
    8020a0e2:	00f70d23          	sb	a5,26(a4)
		for (uint8 i = 0; i < capa - 1; i ++) {
    8020a0e6:	0007871b          	sext.w	a4,a5
    8020a0ea:	ff3748e3          	blt	a4,s3,8020a0da <kmalloc+0x11e>
		tmp->table[capa - 1] = TABLE_END;
    8020a0ee:	99aa                	add	s3,s3,a0
    8020a0f0:	57fd                	li	a5,-1
    8020a0f2:	00f98d23          	sb	a5,26(s3)
		alloc->list = tmp;
    8020a0f6:	f088                	sd	a0,32(s1)
    8020a0f8:	b719                	j	80209ffe <kmalloc+0x42>
			release(&(alloc->lock));
    8020a0fa:	8526                	mv	a0,s1
    8020a0fc:	fffff097          	auipc	ra,0xfffff
    8020a100:	e32080e7          	jalr	-462(ra) # 80208f2e <release>
			__debug_warn("kmalloc fail to allocate a node\n");
    8020a104:	0000b517          	auipc	a0,0xb
    8020a108:	b8c50513          	addi	a0,a0,-1140 # 80214c90 <digits+0x168>
    8020a10c:	fffff097          	auipc	ra,0xfffff
    8020a110:	564080e7          	jalr	1380(ra) # 80209670 <__debug_warn>
			return NULL;
    8020a114:	b735                	j	8020a040 <kmalloc+0x84>
		alloc->list = node->next;
    8020a116:	639c                	ld	a5,0(a5)
    8020a118:	f09c                	sd	a5,32(s1)
    8020a11a:	bf31                	j	8020a036 <kmalloc+0x7a>

000000008020a11c <get_allocator>:
static struct kmem_allocator *get_allocator(uint64 raw_size) {
    8020a11c:	7179                	addi	sp,sp,-48
    8020a11e:	f406                	sd	ra,40(sp)
    8020a120:	f022                	sd	s0,32(sp)
    8020a122:	ec26                	sd	s1,24(sp)
    8020a124:	e84a                	sd	s2,16(sp)
    8020a126:	e44e                	sd	s3,8(sp)
    8020a128:	1800                	addi	s0,sp,48
	uint64 roundup_size = ROUNDUP16(raw_size);
    8020a12a:	00f50913          	addi	s2,a0,15
    8020a12e:	ff097913          	andi	s2,s2,-16
	uint64 hash = _hash(roundup_size);
    8020a132:	49c5                	li	s3,17
    8020a134:	033979b3          	remu	s3,s2,s3
	for (struct kmem_allocator *tmp = kmem_table[hash]; 
    8020a138:	00399713          	slli	a4,s3,0x3
    8020a13c:	05164797          	auipc	a5,0x5164
    8020a140:	f0478793          	addi	a5,a5,-252 # 8536e040 <kmem_adam>
    8020a144:	97ba                	add	a5,a5,a4
    8020a146:	7b84                	ld	s1,48(a5)
    8020a148:	c499                	beqz	s1,8020a156 <get_allocator+0x3a>
		if (roundup_size == tmp->obj_size) {
    8020a14a:	0184e783          	lwu	a5,24(s1)
    8020a14e:	09278463          	beq	a5,s2,8020a1d6 <get_allocator+0xba>
			NULL != tmp; tmp = tmp->next) {
    8020a152:	7484                	ld	s1,40(s1)
	for (struct kmem_allocator *tmp = kmem_table[hash]; 
    8020a154:	f8fd                	bnez	s1,8020a14a <get_allocator+0x2e>
	acquire(&kmem_table_lock);
    8020a156:	05164517          	auipc	a0,0x5164
    8020a15a:	fa250513          	addi	a0,a0,-94 # 8536e0f8 <kmem_table_lock>
    8020a15e:	fffff097          	auipc	ra,0xfffff
    8020a162:	d7c080e7          	jalr	-644(ra) # 80208eda <acquire>
	if (NULL != kmem_table[hash] && 
    8020a166:	00399713          	slli	a4,s3,0x3
    8020a16a:	05164797          	auipc	a5,0x5164
    8020a16e:	ed678793          	addi	a5,a5,-298 # 8536e040 <kmem_adam>
    8020a172:	97ba                	add	a5,a5,a4
    8020a174:	7b9c                	ld	a5,48(a5)
    8020a176:	c789                	beqz	a5,8020a180 <get_allocator+0x64>
			kmem_table[hash]->obj_size == roundup_size) {
    8020a178:	0187e783          	lwu	a5,24(a5)
	if (NULL != kmem_table[hash] && 
    8020a17c:	07278563          	beq	a5,s2,8020a1e6 <get_allocator+0xca>
	struct kmem_allocator *tmp = _malloc_allocator();
    8020a180:	03000513          	li	a0,48
    8020a184:	00000097          	auipc	ra,0x0
    8020a188:	e38080e7          	jalr	-456(ra) # 80209fbc <kmalloc>
    8020a18c:	84aa                	mv	s1,a0
	if (NULL != tmp) {
    8020a18e:	cd05                	beqz	a0,8020a1c6 <get_allocator+0xaa>
		initlock(&(tmp->lock), "kmem_alloc");
    8020a190:	0000b597          	auipc	a1,0xb
    8020a194:	b2858593          	addi	a1,a1,-1240 # 80214cb8 <digits+0x190>
    8020a198:	fffff097          	auipc	ra,0xfffff
    8020a19c:	cfe080e7          	jalr	-770(ra) # 80208e96 <initlock>
		tmp->list = NULL;
    8020a1a0:	0204b023          	sd	zero,32(s1)
		tmp->obj_size = roundup_size;
    8020a1a4:	0124ac23          	sw	s2,24(s1)
		tmp->npages = 0;
    8020a1a8:	00049e23          	sh	zero,28(s1)
		tmp->nobjs = 0;
    8020a1ac:	00049f23          	sh	zero,30(s1)
		tmp->next = kmem_table[hash];
    8020a1b0:	098e                	slli	s3,s3,0x3
    8020a1b2:	05164797          	auipc	a5,0x5164
    8020a1b6:	e8e78793          	addi	a5,a5,-370 # 8536e040 <kmem_adam>
    8020a1ba:	99be                	add	s3,s3,a5
    8020a1bc:	0309b783          	ld	a5,48(s3)
    8020a1c0:	f49c                	sd	a5,40(s1)
		kmem_table[hash] = tmp;
    8020a1c2:	0299b823          	sd	s1,48(s3)
	release(&kmem_table_lock);
    8020a1c6:	05164517          	auipc	a0,0x5164
    8020a1ca:	f3250513          	addi	a0,a0,-206 # 8536e0f8 <kmem_table_lock>
    8020a1ce:	fffff097          	auipc	ra,0xfffff
    8020a1d2:	d60080e7          	jalr	-672(ra) # 80208f2e <release>
}
    8020a1d6:	8526                	mv	a0,s1
    8020a1d8:	70a2                	ld	ra,40(sp)
    8020a1da:	7402                	ld	s0,32(sp)
    8020a1dc:	64e2                	ld	s1,24(sp)
    8020a1de:	6942                	ld	s2,16(sp)
    8020a1e0:	69a2                	ld	s3,8(sp)
    8020a1e2:	6145                	addi	sp,sp,48
    8020a1e4:	8082                	ret
		release(&kmem_table_lock);
    8020a1e6:	05164517          	auipc	a0,0x5164
    8020a1ea:	f1250513          	addi	a0,a0,-238 # 8536e0f8 <kmem_table_lock>
    8020a1ee:	fffff097          	auipc	ra,0xfffff
    8020a1f2:	d40080e7          	jalr	-704(ra) # 80208f2e <release>
		return kmem_table[hash];
    8020a1f6:	098e                	slli	s3,s3,0x3
    8020a1f8:	05164797          	auipc	a5,0x5164
    8020a1fc:	e4878793          	addi	a5,a5,-440 # 8536e040 <kmem_adam>
    8020a200:	97ce                	add	a5,a5,s3
    8020a202:	7b84                	ld	s1,48(a5)
    8020a204:	bfc9                	j	8020a1d6 <get_allocator+0xba>

000000008020a206 <kfree>:

// `addr` must be an address that's allocated before, pass an unallocated 
// address may cause undetectable troubles. 
void kfree(void *addr) {
    8020a206:	7179                	addi	sp,sp,-48
    8020a208:	f406                	sd	ra,40(sp)
    8020a20a:	f022                	sd	s0,32(sp)
    8020a20c:	ec26                	sd	s1,24(sp)
    8020a20e:	e84a                	sd	s2,16(sp)
    8020a210:	e44e                	sd	s3,8(sp)
    8020a212:	e052                	sd	s4,0(sp)
    8020a214:	1800                	addi	s0,sp,48
    8020a216:	892a                	mv	s2,a0
	struct kmem_node *node = (struct kmem_node*)PGROUNDDOWN((uint64)addr);
    8020a218:	74fd                	lui	s1,0xfffff
    8020a21a:	8ce9                	and	s1,s1,a0
    8020a21c:	8a26                	mv	s4,s1
	uint8 avail = ((uint64)addr - node->config.obj_addr) / node->config.obj_size;
    8020a21e:	6488                	ld	a0,8(s1)
    8020a220:	689c                	ld	a5,16(s1)
    8020a222:	40f90933          	sub	s2,s2,a5
    8020a226:	02a95933          	divu	s2,s2,a0
    8020a22a:	0ff97913          	andi	s2,s2,255

	struct kmem_allocator *alloc = get_allocator(node->config.obj_size);
    8020a22e:	00000097          	auipc	ra,0x0
    8020a232:	eee080e7          	jalr	-274(ra) # 8020a11c <get_allocator>
    8020a236:	89aa                	mv	s3,a0

	//__debug_info("kfree alloc: %p, addr: %p\n", alloc, addr);
	// enter critical section `alloc`
	acquire(&(alloc->lock));
    8020a238:	fffff097          	auipc	ra,0xfffff
    8020a23c:	ca2080e7          	jalr	-862(ra) # 80208eda <acquire>

	alloc->nobjs--;
    8020a240:	01e9d783          	lhu	a5,30(s3)
    8020a244:	37fd                	addiw	a5,a5,-1
    8020a246:	00f99f23          	sh	a5,30(s3)

	// if `node` used to be fully allocated, then re-link it to `alloc`
	if (TABLE_END == node->avail) {
    8020a24a:	0184c703          	lbu	a4,24(s1) # fffffffffffff018 <kernel_end+0xffffffff7ac90018>
    8020a24e:	0ff00793          	li	a5,255
    8020a252:	06f70563          	beq	a4,a5,8020a2bc <kfree+0xb6>
		alloc->list = node;
		//__debug_info("kfree pickup\n");
	}

	// node should be on alloc->list 
	node->table[avail] = node->avail;
    8020a256:	009907b3          	add	a5,s2,s1
    8020a25a:	0184c703          	lbu	a4,24(s1)
    8020a25e:	00e78d23          	sb	a4,26(a5)
	node->avail = avail;
    8020a262:	01248c23          	sb	s2,24(s1)
	node->cnt -= 1;
    8020a266:	0194c783          	lbu	a5,25(s1)
    8020a26a:	37fd                	addiw	a5,a5,-1
    8020a26c:	0ff7f793          	andi	a5,a5,255
    8020a270:	00f48ca3          	sb	a5,25(s1)

	// if kmem_node has no allocated obj 
	if (0 == node->cnt) {
    8020a274:	e79d                	bnez	a5,8020a2a2 <kfree+0x9c>
		//__debug_info("kfree drop\n");
		struct kmem_node **pprev = &(alloc->list);
		struct kmem_node *tmp = alloc->list;
    8020a276:	0209b783          	ld	a5,32(s3)

		while (NULL != tmp && node != tmp) {
    8020a27a:	c7b9                	beqz	a5,8020a2c8 <kfree+0xc2>
    8020a27c:	06fa0663          	beq	s4,a5,8020a2e8 <kfree+0xe2>
			pprev = &(tmp->next);
			tmp = tmp->next;
    8020a280:	873e                	mv	a4,a5
    8020a282:	639c                	ld	a5,0(a5)
		while (NULL != tmp && node != tmp) {
    8020a284:	c3b1                	beqz	a5,8020a2c8 <kfree+0xc2>
    8020a286:	fefa1de3          	bne	s4,a5,8020a280 <kfree+0x7a>
			printf("%p -> ", it);
		}
		printf("\n");
		#endif 

		*pprev = tmp->next;
    8020a28a:	639c                	ld	a5,0(a5)
    8020a28c:	e31c                	sd	a5,0(a4)
		//__debug_info("kfree alloc->list = %p\n", alloc->list);
		//__debug_info("kfree tmp = %p\n", tmp);

		freepage(node);
    8020a28e:	8526                	mv	a0,s1
    8020a290:	00000097          	auipc	ra,0x0
    8020a294:	b44080e7          	jalr	-1212(ra) # 80209dd4 <_freepage>
		alloc->npages--;
    8020a298:	01c9d783          	lhu	a5,28(s3)
    8020a29c:	37fd                	addiw	a5,a5,-1
    8020a29e:	00f99e23          	sh	a5,28(s3)
	}

	release(&(alloc->lock));
    8020a2a2:	854e                	mv	a0,s3
    8020a2a4:	fffff097          	auipc	ra,0xfffff
    8020a2a8:	c8a080e7          	jalr	-886(ra) # 80208f2e <release>
	// leave critical section `alloc`
}
    8020a2ac:	70a2                	ld	ra,40(sp)
    8020a2ae:	7402                	ld	s0,32(sp)
    8020a2b0:	64e2                	ld	s1,24(sp)
    8020a2b2:	6942                	ld	s2,16(sp)
    8020a2b4:	69a2                	ld	s3,8(sp)
    8020a2b6:	6a02                	ld	s4,0(sp)
    8020a2b8:	6145                	addi	sp,sp,48
    8020a2ba:	8082                	ret
		node->next = alloc->list;
    8020a2bc:	0209b783          	ld	a5,32(s3)
    8020a2c0:	e09c                	sd	a5,0(s1)
		alloc->list = node;
    8020a2c2:	0299b023          	sd	s1,32(s3)
    8020a2c6:	bf41                	j	8020a256 <kfree+0x50>
			__debug_error("free NULL == tmp\n");
    8020a2c8:	0000b517          	auipc	a0,0xb
    8020a2cc:	a0050513          	addi	a0,a0,-1536 # 80214cc8 <digits+0x1a0>
    8020a2d0:	fffff097          	auipc	ra,0xfffff
    8020a2d4:	576080e7          	jalr	1398(ra) # 80209846 <__debug_error>
			panic("kfree(): linked list broken!\n");
    8020a2d8:	0000b517          	auipc	a0,0xb
    8020a2dc:	a0850513          	addi	a0,a0,-1528 # 80214ce0 <digits+0x1b8>
    8020a2e0:	fffff097          	auipc	ra,0xfffff
    8020a2e4:	f6a080e7          	jalr	-150(ra) # 8020924a <panic>
		struct kmem_node **pprev = &(alloc->list);
    8020a2e8:	02098713          	addi	a4,s3,32
    8020a2ec:	bf79                	j	8020a28a <kfree+0x84>

000000008020a2ee <kvminithart>:

// Switch h/w page table register to the kernel's page table,
// and enable paging.
void
kvminithart()
{
    8020a2ee:	1141                	addi	sp,sp,-16
    8020a2f0:	e406                	sd	ra,8(sp)
    8020a2f2:	e022                	sd	s0,0(sp)
    8020a2f4:	0800                	addi	s0,sp,16
  w_satp(MAKE_SATP(kernel_pagetable));
    8020a2f6:	05164797          	auipc	a5,0x5164
    8020a2fa:	e1a7b783          	ld	a5,-486(a5) # 8536e110 <kernel_pagetable>
    8020a2fe:	83b1                	srli	a5,a5,0xc
    8020a300:	577d                	li	a4,-1
    8020a302:	177e                	slli	a4,a4,0x3f
    8020a304:	8fd9                	or	a5,a5,a4
  asm volatile("csrw satp, %0" : : "r" (x));
    8020a306:	18079073          	csrw	satp,a5
  asm volatile("sfence.vma");
    8020a30a:	12000073          	sfence.vma
  // reg_info();
  sfence_vma();
  //printf("[kvm]readtime:%p\n",*(uint64*)(PLIC_V));
  __debug_info("kvminithart\n");
    8020a30e:	0000b517          	auipc	a0,0xb
    8020a312:	9f250513          	addi	a0,a0,-1550 # 80214d00 <digits+0x1d8>
    8020a316:	fffff097          	auipc	ra,0xfffff
    8020a31a:	194080e7          	jalr	404(ra) # 802094aa <__debug_info>
}
    8020a31e:	60a2                	ld	ra,8(sp)
    8020a320:	6402                	ld	s0,0(sp)
    8020a322:	0141                	addi	sp,sp,16
    8020a324:	8082                	ret

000000008020a326 <walk>:
  }
}

pte_t *
walk(pagetable_t pagetable, uint64 va, int alloc)
{
    8020a326:	715d                	addi	sp,sp,-80
    8020a328:	e486                	sd	ra,72(sp)
    8020a32a:	e0a2                	sd	s0,64(sp)
    8020a32c:	fc26                	sd	s1,56(sp)
    8020a32e:	f84a                	sd	s2,48(sp)
    8020a330:	f44e                	sd	s3,40(sp)
    8020a332:	f052                	sd	s4,32(sp)
    8020a334:	ec56                	sd	s5,24(sp)
    8020a336:	e85a                	sd	s6,16(sp)
    8020a338:	e45e                	sd	s7,8(sp)
    8020a33a:	0880                	addi	s0,sp,80
    8020a33c:	84aa                	mv	s1,a0
    8020a33e:	89ae                	mv	s3,a1
    8020a340:	8b32                	mv	s6,a2
  if(va >= MAXVA)
    8020a342:	57fd                	li	a5,-1
    8020a344:	83e9                	srli	a5,a5,0x1a
    8020a346:	4af9                	li	s5,30
    panic("walk");

  for(int level = 2; level > 0; level--) {
    8020a348:	4bb1                	li	s7,12
  if(va >= MAXVA)
    8020a34a:	04b7f363          	bgeu	a5,a1,8020a390 <walk+0x6a>
    panic("walk");
    8020a34e:	0000b517          	auipc	a0,0xb
    8020a352:	9c250513          	addi	a0,a0,-1598 # 80214d10 <digits+0x1e8>
    8020a356:	fffff097          	auipc	ra,0xfffff
    8020a35a:	ef4080e7          	jalr	-268(ra) # 8020924a <panic>
    pte_t *pte = &pagetable[PX(level, va)];
    if(*pte & PTE_V) {
      pagetable = (pagetable_t)PTE2PA(*pte);
    } else {
      if(!alloc || (pagetable = (pde_t*)allocpage()) == NULL)
    8020a35e:	060b0863          	beqz	s6,8020a3ce <walk+0xa8>
    8020a362:	00000097          	auipc	ra,0x0
    8020a366:	9d2080e7          	jalr	-1582(ra) # 80209d34 <_allocpage>
    8020a36a:	8a2a                	mv	s4,a0
    8020a36c:	84aa                	mv	s1,a0
    8020a36e:	c135                	beqz	a0,8020a3d2 <walk+0xac>
        return NULL;
      
      memset(pagetable, 0, PGSIZE);
    8020a370:	6605                	lui	a2,0x1
    8020a372:	4581                	li	a1,0
    8020a374:	ffff7097          	auipc	ra,0xffff7
    8020a378:	a00080e7          	jalr	-1536(ra) # 80200d74 <memset>
      *pte = PA2PTE(pagetable) | PTE_V;
    8020a37c:	00ca5a13          	srli	s4,s4,0xc
    8020a380:	0a2a                	slli	s4,s4,0xa
    8020a382:	001a6a13          	ori	s4,s4,1
    8020a386:	01493023          	sd	s4,0(s2)
  for(int level = 2; level > 0; level--) {
    8020a38a:	3add                	addiw	s5,s5,-9
    8020a38c:	037a8063          	beq	s5,s7,8020a3ac <walk+0x86>
    pte_t *pte = &pagetable[PX(level, va)];
    8020a390:	0159d933          	srl	s2,s3,s5
    8020a394:	1ff97913          	andi	s2,s2,511
    8020a398:	090e                	slli	s2,s2,0x3
    8020a39a:	9926                	add	s2,s2,s1
    if(*pte & PTE_V) {
    8020a39c:	00093483          	ld	s1,0(s2)
    8020a3a0:	0014f793          	andi	a5,s1,1
    8020a3a4:	dfcd                	beqz	a5,8020a35e <walk+0x38>
      pagetable = (pagetable_t)PTE2PA(*pte);
    8020a3a6:	80a9                	srli	s1,s1,0xa
    8020a3a8:	04b2                	slli	s1,s1,0xc
    8020a3aa:	b7c5                	j	8020a38a <walk+0x64>
    }
  }
  return &pagetable[PX(0, va)];
    8020a3ac:	00c9d513          	srli	a0,s3,0xc
    8020a3b0:	1ff57513          	andi	a0,a0,511
    8020a3b4:	050e                	slli	a0,a0,0x3
    8020a3b6:	9526                	add	a0,a0,s1
}
    8020a3b8:	60a6                	ld	ra,72(sp)
    8020a3ba:	6406                	ld	s0,64(sp)
    8020a3bc:	74e2                	ld	s1,56(sp)
    8020a3be:	7942                	ld	s2,48(sp)
    8020a3c0:	79a2                	ld	s3,40(sp)
    8020a3c2:	7a02                	ld	s4,32(sp)
    8020a3c4:	6ae2                	ld	s5,24(sp)
    8020a3c6:	6b42                	ld	s6,16(sp)
    8020a3c8:	6ba2                	ld	s7,8(sp)
    8020a3ca:	6161                	addi	sp,sp,80
    8020a3cc:	8082                	ret
        return NULL;
    8020a3ce:	4501                	li	a0,0
    8020a3d0:	b7e5                	j	8020a3b8 <walk+0x92>
    8020a3d2:	4501                	li	a0,0
    8020a3d4:	b7d5                	j	8020a3b8 <walk+0x92>

000000008020a3d6 <mappages>:
{
    8020a3d6:	715d                	addi	sp,sp,-80
    8020a3d8:	e486                	sd	ra,72(sp)
    8020a3da:	e0a2                	sd	s0,64(sp)
    8020a3dc:	fc26                	sd	s1,56(sp)
    8020a3de:	f84a                	sd	s2,48(sp)
    8020a3e0:	f44e                	sd	s3,40(sp)
    8020a3e2:	f052                	sd	s4,32(sp)
    8020a3e4:	ec56                	sd	s5,24(sp)
    8020a3e6:	e85a                	sd	s6,16(sp)
    8020a3e8:	e45e                	sd	s7,8(sp)
    8020a3ea:	0880                	addi	s0,sp,80
    8020a3ec:	8b2a                	mv	s6,a0
    8020a3ee:	8aba                	mv	s5,a4
  a = PGROUNDDOWN(va);
    8020a3f0:	777d                	lui	a4,0xfffff
    8020a3f2:	00e5f7b3          	and	a5,a1,a4
  last = PGROUNDDOWN(va + size - 1);
    8020a3f6:	167d                	addi	a2,a2,-1
    8020a3f8:	00b609b3          	add	s3,a2,a1
    8020a3fc:	00e9f9b3          	and	s3,s3,a4
  a = PGROUNDDOWN(va);
    8020a400:	893e                	mv	s2,a5
    8020a402:	40f68a33          	sub	s4,a3,a5
    a += PGSIZE;
    8020a406:	6b85                	lui	s7,0x1
    8020a408:	a821                	j	8020a420 <mappages+0x4a>
      *pte = PA2PTE(pa) | perm | PTE_V | PTE_A | PTE_D;
    8020a40a:	80b1                	srli	s1,s1,0xc
    8020a40c:	00a49793          	slli	a5,s1,0xa
    8020a410:	0157e7b3          	or	a5,a5,s5
    8020a414:	0c17e793          	ori	a5,a5,193
    8020a418:	e11c                	sd	a5,0(a0)
      return 0;
    8020a41a:	4501                	li	a0,0
    8020a41c:	a81d                	j	8020a452 <mappages+0x7c>
    a += PGSIZE;
    8020a41e:	995e                	add	s2,s2,s7
  for(;;){
    8020a420:	012a04b3          	add	s1,s4,s2
    if((pte = walk(pagetable, a, 1)) == NULL)
    8020a424:	4605                	li	a2,1
    8020a426:	85ca                	mv	a1,s2
    8020a428:	855a                	mv	a0,s6
    8020a42a:	00000097          	auipc	ra,0x0
    8020a42e:	efc080e7          	jalr	-260(ra) # 8020a326 <walk>
    8020a432:	cd19                	beqz	a0,8020a450 <mappages+0x7a>
    if(*pte & PTE_V){
    8020a434:	611c                	ld	a5,0(a0)
    8020a436:	8b85                	andi	a5,a5,1
    8020a438:	fbe9                	bnez	a5,8020a40a <mappages+0x34>
    *pte = PA2PTE(pa) | perm | PTE_V | PTE_A | PTE_D;
    8020a43a:	80b1                	srli	s1,s1,0xc
    8020a43c:	04aa                	slli	s1,s1,0xa
    8020a43e:	0154e4b3          	or	s1,s1,s5
    8020a442:	0c14e493          	ori	s1,s1,193
    8020a446:	e104                	sd	s1,0(a0)
    if(a == last)
    8020a448:	fd391be3          	bne	s2,s3,8020a41e <mappages+0x48>
  return 0;
    8020a44c:	4501                	li	a0,0
    8020a44e:	a011                	j	8020a452 <mappages+0x7c>
      return -1;
    8020a450:	557d                	li	a0,-1
}
    8020a452:	60a6                	ld	ra,72(sp)
    8020a454:	6406                	ld	s0,64(sp)
    8020a456:	74e2                	ld	s1,56(sp)
    8020a458:	7942                	ld	s2,48(sp)
    8020a45a:	79a2                	ld	s3,40(sp)
    8020a45c:	7a02                	ld	s4,32(sp)
    8020a45e:	6ae2                	ld	s5,24(sp)
    8020a460:	6b42                	ld	s6,16(sp)
    8020a462:	6ba2                	ld	s7,8(sp)
    8020a464:	6161                	addi	sp,sp,80
    8020a466:	8082                	ret

000000008020a468 <kvmmap>:
{
    8020a468:	1141                	addi	sp,sp,-16
    8020a46a:	e406                	sd	ra,8(sp)
    8020a46c:	e022                	sd	s0,0(sp)
    8020a46e:	0800                	addi	s0,sp,16
    8020a470:	8736                	mv	a4,a3
  if(mappages(kernel_pagetable, va, sz, pa, perm) != 0)
    8020a472:	86ae                	mv	a3,a1
    8020a474:	85aa                	mv	a1,a0
    8020a476:	05164517          	auipc	a0,0x5164
    8020a47a:	c9a53503          	ld	a0,-870(a0) # 8536e110 <kernel_pagetable>
    8020a47e:	00000097          	auipc	ra,0x0
    8020a482:	f58080e7          	jalr	-168(ra) # 8020a3d6 <mappages>
    8020a486:	e509                	bnez	a0,8020a490 <kvmmap+0x28>
}
    8020a488:	60a2                	ld	ra,8(sp)
    8020a48a:	6402                	ld	s0,0(sp)
    8020a48c:	0141                	addi	sp,sp,16
    8020a48e:	8082                	ret
    panic("kvmmap");
    8020a490:	0000b517          	auipc	a0,0xb
    8020a494:	88850513          	addi	a0,a0,-1912 # 80214d18 <digits+0x1f0>
    8020a498:	fffff097          	auipc	ra,0xfffff
    8020a49c:	db2080e7          	jalr	-590(ra) # 8020924a <panic>

000000008020a4a0 <kvminit>:
{
    8020a4a0:	1101                	addi	sp,sp,-32
    8020a4a2:	ec06                	sd	ra,24(sp)
    8020a4a4:	e822                	sd	s0,16(sp)
    8020a4a6:	e426                	sd	s1,8(sp)
    8020a4a8:	1000                	addi	s0,sp,32
  kernel_pagetable = (pagetable_t) allocpage();
    8020a4aa:	00000097          	auipc	ra,0x0
    8020a4ae:	88a080e7          	jalr	-1910(ra) # 80209d34 <_allocpage>
    8020a4b2:	05164797          	auipc	a5,0x5164
    8020a4b6:	c4a7bf23          	sd	a0,-930(a5) # 8536e110 <kernel_pagetable>
  memset(kernel_pagetable, 0, PGSIZE);
    8020a4ba:	6605                	lui	a2,0x1
    8020a4bc:	4581                	li	a1,0
    8020a4be:	ffff7097          	auipc	ra,0xffff7
    8020a4c2:	8b6080e7          	jalr	-1866(ra) # 80200d74 <memset>
  kvmmap(CLINT_V, CLINT, 0x10000, PTE_R | PTE_W);
    8020a4c6:	4699                	li	a3,6
    8020a4c8:	6641                	lui	a2,0x10
    8020a4ca:	020005b7          	lui	a1,0x2000
    8020a4ce:	01f81537          	lui	a0,0x1f81
    8020a4d2:	0536                	slli	a0,a0,0xd
    8020a4d4:	00000097          	auipc	ra,0x0
    8020a4d8:	f94080e7          	jalr	-108(ra) # 8020a468 <kvmmap>
  kvmmap(PLIC_V, PLIC, 0x400000, PTE_R | PTE_W);
    8020a4dc:	4699                	li	a3,6
    8020a4de:	00400637          	lui	a2,0x400
    8020a4e2:	0c0005b7          	lui	a1,0xc000
    8020a4e6:	00fc3537          	lui	a0,0xfc3
    8020a4ea:	053a                	slli	a0,a0,0xe
    8020a4ec:	00000097          	auipc	ra,0x0
    8020a4f0:	f7c080e7          	jalr	-132(ra) # 8020a468 <kvmmap>
  kvmmap(RAMDISK, RAMDISK, 0x5000000, PTE_R | PTE_W);
    8020a4f4:	4699                	li	a3,6
    8020a4f6:	05000637          	lui	a2,0x5000
    8020a4fa:	45a5                	li	a1,9
    8020a4fc:	05f2                	slli	a1,a1,0x1c
    8020a4fe:	852e                	mv	a0,a1
    8020a500:	00000097          	auipc	ra,0x0
    8020a504:	f68080e7          	jalr	-152(ra) # 8020a468 <kvmmap>
  kvmmap(KERNBASE, KERNBASE, (uint64)etext - KERNBASE, PTE_R|PTE_X);
    8020a508:	00008497          	auipc	s1,0x8
    8020a50c:	af848493          	addi	s1,s1,-1288 # 80212000 <_trampoline>
    8020a510:	46a9                	li	a3,10
    8020a512:	bff00613          	li	a2,-1025
    8020a516:	0656                	slli	a2,a2,0x15
    8020a518:	9626                	add	a2,a2,s1
    8020a51a:	40100593          	li	a1,1025
    8020a51e:	05d6                	slli	a1,a1,0x15
    8020a520:	852e                	mv	a0,a1
    8020a522:	00000097          	auipc	ra,0x0
    8020a526:	f46080e7          	jalr	-186(ra) # 8020a468 <kvmmap>
  kvmmap((uint64)etext, (uint64)etext, PHYSTOP - (uint64)etext, PTE_R | PTE_W);
    8020a52a:	4699                	li	a3,6
    8020a52c:	4645                	li	a2,17
    8020a52e:	066e                	slli	a2,a2,0x1b
    8020a530:	8e05                	sub	a2,a2,s1
    8020a532:	85a6                	mv	a1,s1
    8020a534:	8526                	mv	a0,s1
    8020a536:	00000097          	auipc	ra,0x0
    8020a53a:	f32080e7          	jalr	-206(ra) # 8020a468 <kvmmap>
  kvmmap(TRAMPOLINE, (uint64)trampoline, PGSIZE, PTE_R | PTE_X);
    8020a53e:	46a9                	li	a3,10
    8020a540:	6605                	lui	a2,0x1
    8020a542:	00008597          	auipc	a1,0x8
    8020a546:	abe58593          	addi	a1,a1,-1346 # 80212000 <_trampoline>
    8020a54a:	04000537          	lui	a0,0x4000
    8020a54e:	157d                	addi	a0,a0,-1
    8020a550:	0532                	slli	a0,a0,0xc
    8020a552:	00000097          	auipc	ra,0x0
    8020a556:	f16080e7          	jalr	-234(ra) # 8020a468 <kvmmap>
  kvmmap(SIG_TRAMPOLINE, (uint64)sig_trampoline, PGSIZE, PTE_R | PTE_X | PTE_U);
    8020a55a:	46e9                	li	a3,26
    8020a55c:	6605                	lui	a2,0x1
    8020a55e:	00009597          	auipc	a1,0x9
    8020a562:	aa258593          	addi	a1,a1,-1374 # 80213000 <_sig_trampoline>
    8020a566:	02000537          	lui	a0,0x2000
    8020a56a:	157d                	addi	a0,a0,-1
    8020a56c:	0536                	slli	a0,a0,0xd
    8020a56e:	00000097          	auipc	ra,0x0
    8020a572:	efa080e7          	jalr	-262(ra) # 8020a468 <kvmmap>
  __debug_info("kvminit\n");
    8020a576:	0000a517          	auipc	a0,0xa
    8020a57a:	7aa50513          	addi	a0,a0,1962 # 80214d20 <digits+0x1f8>
    8020a57e:	fffff097          	auipc	ra,0xfffff
    8020a582:	f2c080e7          	jalr	-212(ra) # 802094aa <__debug_info>
  print_free_page_n();
    8020a586:	fffff097          	auipc	ra,0xfffff
    8020a58a:	5b6080e7          	jalr	1462(ra) # 80209b3c <print_free_page_n>
}
    8020a58e:	60e2                	ld	ra,24(sp)
    8020a590:	6442                	ld	s0,16(sp)
    8020a592:	64a2                	ld	s1,8(sp)
    8020a594:	6105                	addi	sp,sp,32
    8020a596:	8082                	ret

000000008020a598 <vmunmap>:
{
    8020a598:	711d                	addi	sp,sp,-96
    8020a59a:	ec86                	sd	ra,88(sp)
    8020a59c:	e8a2                	sd	s0,80(sp)
    8020a59e:	e4a6                	sd	s1,72(sp)
    8020a5a0:	e0ca                	sd	s2,64(sp)
    8020a5a2:	fc4e                	sd	s3,56(sp)
    8020a5a4:	f852                	sd	s4,48(sp)
    8020a5a6:	f456                	sd	s5,40(sp)
    8020a5a8:	f05a                	sd	s6,32(sp)
    8020a5aa:	ec5e                	sd	s7,24(sp)
    8020a5ac:	e862                	sd	s8,16(sp)
    8020a5ae:	e466                	sd	s9,8(sp)
    8020a5b0:	1080                	addi	s0,sp,96
  if((va % PGSIZE) != 0)
    8020a5b2:	03459793          	slli	a5,a1,0x34
    8020a5b6:	ef85                	bnez	a5,8020a5ee <vmunmap+0x56>
    8020a5b8:	8aaa                	mv	s5,a0
    8020a5ba:	89ae                	mv	s3,a1
    8020a5bc:	8b36                	mv	s6,a3
  for(a = va; a < va + npages*PGSIZE; a += PGSIZE){
    8020a5be:	0632                	slli	a2,a2,0xc
    8020a5c0:	00b60a33          	add	s4,a2,a1
    if(PTE_FLAGS(*pte) == PTE_V)
    8020a5c4:	4c05                	li	s8,1
        printf("NULL pte:%p\n",pte);
    8020a5c6:	0000ac97          	auipc	s9,0xa
    8020a5ca:	7c2c8c93          	addi	s9,s9,1986 # 80214d88 <digits+0x260>
  for(a = va; a < va + npages*PGSIZE; a += PGSIZE){
    8020a5ce:	6b85                	lui	s7,0x1
    8020a5d0:	0745ef63          	bltu	a1,s4,8020a64e <vmunmap+0xb6>
}
    8020a5d4:	60e6                	ld	ra,88(sp)
    8020a5d6:	6446                	ld	s0,80(sp)
    8020a5d8:	64a6                	ld	s1,72(sp)
    8020a5da:	6906                	ld	s2,64(sp)
    8020a5dc:	79e2                	ld	s3,56(sp)
    8020a5de:	7a42                	ld	s4,48(sp)
    8020a5e0:	7aa2                	ld	s5,40(sp)
    8020a5e2:	7b02                	ld	s6,32(sp)
    8020a5e4:	6be2                	ld	s7,24(sp)
    8020a5e6:	6c42                	ld	s8,16(sp)
    8020a5e8:	6ca2                	ld	s9,8(sp)
    8020a5ea:	6125                	addi	sp,sp,96
    8020a5ec:	8082                	ret
    panic("vmunmap: not aligned");
    8020a5ee:	0000a517          	auipc	a0,0xa
    8020a5f2:	74250513          	addi	a0,a0,1858 # 80214d30 <digits+0x208>
    8020a5f6:	fffff097          	auipc	ra,0xfffff
    8020a5fa:	c54080e7          	jalr	-940(ra) # 8020924a <panic>
      panic("vmunmap: walk");
    8020a5fe:	0000a517          	auipc	a0,0xa
    8020a602:	74a50513          	addi	a0,a0,1866 # 80214d48 <digits+0x220>
    8020a606:	fffff097          	auipc	ra,0xfffff
    8020a60a:	c44080e7          	jalr	-956(ra) # 8020924a <panic>
      panic("vmunmap: not mapped");
    8020a60e:	0000a517          	auipc	a0,0xa
    8020a612:	74a50513          	addi	a0,a0,1866 # 80214d58 <digits+0x230>
    8020a616:	fffff097          	auipc	ra,0xfffff
    8020a61a:	c34080e7          	jalr	-972(ra) # 8020924a <panic>
      panic("vmunmap: not a leaf");
    8020a61e:	0000a517          	auipc	a0,0xa
    8020a622:	75250513          	addi	a0,a0,1874 # 80214d70 <digits+0x248>
    8020a626:	fffff097          	auipc	ra,0xfffff
    8020a62a:	c24080e7          	jalr	-988(ra) # 8020924a <panic>
        printf("NULL pte:%p\n",pte);
    8020a62e:	85aa                	mv	a1,a0
    8020a630:	8566                	mv	a0,s9
    8020a632:	fffff097          	auipc	ra,0xfffff
    8020a636:	c62080e7          	jalr	-926(ra) # 80209294 <printf>
      freepage((void*)pa);
    8020a63a:	854a                	mv	a0,s2
    8020a63c:	fffff097          	auipc	ra,0xfffff
    8020a640:	798080e7          	jalr	1944(ra) # 80209dd4 <_freepage>
    *pte = 0;
    8020a644:	0004b023          	sd	zero,0(s1)
  for(a = va; a < va + npages*PGSIZE; a += PGSIZE){
    8020a648:	99de                	add	s3,s3,s7
    8020a64a:	f949f5e3          	bgeu	s3,s4,8020a5d4 <vmunmap+0x3c>
    if((pte = walk(pagetable, a, 0)) == 0)
    8020a64e:	4601                	li	a2,0
    8020a650:	85ce                	mv	a1,s3
    8020a652:	8556                	mv	a0,s5
    8020a654:	00000097          	auipc	ra,0x0
    8020a658:	cd2080e7          	jalr	-814(ra) # 8020a326 <walk>
    8020a65c:	84aa                	mv	s1,a0
    8020a65e:	d145                	beqz	a0,8020a5fe <vmunmap+0x66>
    if((*pte & PTE_V) == 0)
    8020a660:	611c                	ld	a5,0(a0)
    8020a662:	0017f713          	andi	a4,a5,1
    8020a666:	d745                	beqz	a4,8020a60e <vmunmap+0x76>
    if(PTE_FLAGS(*pte) == PTE_V)
    8020a668:	3ff7f713          	andi	a4,a5,1023
    8020a66c:	fb8709e3          	beq	a4,s8,8020a61e <vmunmap+0x86>
    if(do_free){
    8020a670:	fc0b0ae3          	beqz	s6,8020a644 <vmunmap+0xac>
      uint64 pa = PTE2PA(*pte);
    8020a674:	83a9                	srli	a5,a5,0xa
    8020a676:	00c79913          	slli	s2,a5,0xc
      if(pa==NULL){
    8020a67a:	fc0910e3          	bnez	s2,8020a63a <vmunmap+0xa2>
    8020a67e:	bf45                	j	8020a62e <vmunmap+0x96>

000000008020a680 <walkaddr>:
walkaddr(pagetable_t pagetable, uint64 va)
{
  pte_t *pte;
  uint64 pa;

  if(va >= MAXVA)
    8020a680:	57fd                	li	a5,-1
    8020a682:	83e9                	srli	a5,a5,0x1a
    8020a684:	00b7f463          	bgeu	a5,a1,8020a68c <walkaddr+0xc>
    return NULL;
    8020a688:	4501                	li	a0,0
    return NULL;
  if((*pte & PTE_U) == 0)
    return NULL;
  pa = PTE2PA(*pte);
  return pa;
}
    8020a68a:	8082                	ret
{
    8020a68c:	1141                	addi	sp,sp,-16
    8020a68e:	e406                	sd	ra,8(sp)
    8020a690:	e022                	sd	s0,0(sp)
    8020a692:	0800                	addi	s0,sp,16
  pte = walk(pagetable, va, 0);
    8020a694:	4601                	li	a2,0
    8020a696:	00000097          	auipc	ra,0x0
    8020a69a:	c90080e7          	jalr	-880(ra) # 8020a326 <walk>
  if(pte == 0)
    8020a69e:	c105                	beqz	a0,8020a6be <walkaddr+0x3e>
  if((*pte & PTE_V) == 0)
    8020a6a0:	611c                	ld	a5,0(a0)
  if((*pte & PTE_U) == 0)
    8020a6a2:	0117f693          	andi	a3,a5,17
    8020a6a6:	4745                	li	a4,17
    return NULL;
    8020a6a8:	4501                	li	a0,0
  if((*pte & PTE_U) == 0)
    8020a6aa:	00e68663          	beq	a3,a4,8020a6b6 <walkaddr+0x36>
}
    8020a6ae:	60a2                	ld	ra,8(sp)
    8020a6b0:	6402                	ld	s0,0(sp)
    8020a6b2:	0141                	addi	sp,sp,16
    8020a6b4:	8082                	ret
  pa = PTE2PA(*pte);
    8020a6b6:	00a7d513          	srli	a0,a5,0xa
    8020a6ba:	0532                	slli	a0,a0,0xc
  return pa;
    8020a6bc:	bfcd                	j	8020a6ae <walkaddr+0x2e>
    return NULL;
    8020a6be:	4501                	li	a0,0
    8020a6c0:	b7fd                	j	8020a6ae <walkaddr+0x2e>

000000008020a6c2 <experm>:
experm(pagetable_t pagetable, uint64 va,uint64 perm)
{
  pte_t *pte;
  uint64 pa;

  if(va >= MAXVA)
    8020a6c2:	57fd                	li	a5,-1
    8020a6c4:	83e9                	srli	a5,a5,0x1a
    8020a6c6:	00b7f463          	bgeu	a5,a1,8020a6ce <experm+0xc>
    return NULL;
    8020a6ca:	4501                	li	a0,0
  if((*pte & PTE_U) == 0)
    return NULL;
  *pte |= perm;
  pa = PTE2PA(*pte);
  return pa;
}
    8020a6cc:	8082                	ret
{
    8020a6ce:	1101                	addi	sp,sp,-32
    8020a6d0:	ec06                	sd	ra,24(sp)
    8020a6d2:	e822                	sd	s0,16(sp)
    8020a6d4:	e426                	sd	s1,8(sp)
    8020a6d6:	1000                	addi	s0,sp,32
    8020a6d8:	84b2                	mv	s1,a2
  pte = walk(pagetable, va, 0);
    8020a6da:	4601                	li	a2,0
    8020a6dc:	00000097          	auipc	ra,0x0
    8020a6e0:	c4a080e7          	jalr	-950(ra) # 8020a326 <walk>
    8020a6e4:	87aa                	mv	a5,a0
  if(pte == 0)
    8020a6e6:	c11d                	beqz	a0,8020a70c <experm+0x4a>
  if((*pte & PTE_V) == 0)
    8020a6e8:	6110                	ld	a2,0(a0)
  if((*pte & PTE_U) == 0)
    8020a6ea:	01167693          	andi	a3,a2,17
    8020a6ee:	4745                	li	a4,17
    return NULL;
    8020a6f0:	4501                	li	a0,0
  if((*pte & PTE_U) == 0)
    8020a6f2:	00e68763          	beq	a3,a4,8020a700 <experm+0x3e>
}
    8020a6f6:	60e2                	ld	ra,24(sp)
    8020a6f8:	6442                	ld	s0,16(sp)
    8020a6fa:	64a2                	ld	s1,8(sp)
    8020a6fc:	6105                	addi	sp,sp,32
    8020a6fe:	8082                	ret
  *pte |= perm;
    8020a700:	8e45                	or	a2,a2,s1
    8020a702:	e390                	sd	a2,0(a5)
  pa = PTE2PA(*pte);
    8020a704:	8229                	srli	a2,a2,0xa
    8020a706:	00c61513          	slli	a0,a2,0xc
  return pa;
    8020a70a:	b7f5                	j	8020a6f6 <experm+0x34>
    return NULL;
    8020a70c:	4501                	li	a0,0
    8020a70e:	b7e5                	j	8020a6f6 <experm+0x34>

000000008020a710 <kwalkaddr>:


uint64
kwalkaddr(pagetable_t kpt, uint64 va)
{
    8020a710:	1101                	addi	sp,sp,-32
    8020a712:	ec06                	sd	ra,24(sp)
    8020a714:	e822                	sd	s0,16(sp)
    8020a716:	e426                	sd	s1,8(sp)
    8020a718:	1000                	addi	s0,sp,32
  uint64 off = va % PGSIZE;
    8020a71a:	03459793          	slli	a5,a1,0x34
    8020a71e:	0347d493          	srli	s1,a5,0x34
  pte_t *pte;
  uint64 pa;
  
  pte = walk(kpt, va, 0);
    8020a722:	4601                	li	a2,0
    8020a724:	00000097          	auipc	ra,0x0
    8020a728:	c02080e7          	jalr	-1022(ra) # 8020a326 <walk>
  if(pte == 0)
    8020a72c:	cd09                	beqz	a0,8020a746 <kwalkaddr+0x36>
    panic("kvmpa");
  if((*pte & PTE_V) == 0)
    8020a72e:	6108                	ld	a0,0(a0)
    8020a730:	00157793          	andi	a5,a0,1
    8020a734:	c38d                	beqz	a5,8020a756 <kwalkaddr+0x46>
    panic("kvmpa");
  pa = PTE2PA(*pte);
    8020a736:	8129                	srli	a0,a0,0xa
    8020a738:	0532                	slli	a0,a0,0xc
  return pa+off;
}
    8020a73a:	9526                	add	a0,a0,s1
    8020a73c:	60e2                	ld	ra,24(sp)
    8020a73e:	6442                	ld	s0,16(sp)
    8020a740:	64a2                	ld	s1,8(sp)
    8020a742:	6105                	addi	sp,sp,32
    8020a744:	8082                	ret
    panic("kvmpa");
    8020a746:	0000a517          	auipc	a0,0xa
    8020a74a:	65250513          	addi	a0,a0,1618 # 80214d98 <digits+0x270>
    8020a74e:	fffff097          	auipc	ra,0xfffff
    8020a752:	afc080e7          	jalr	-1284(ra) # 8020924a <panic>
    panic("kvmpa");
    8020a756:	0000a517          	auipc	a0,0xa
    8020a75a:	64250513          	addi	a0,a0,1602 # 80214d98 <digits+0x270>
    8020a75e:	fffff097          	auipc	ra,0xfffff
    8020a762:	aec080e7          	jalr	-1300(ra) # 8020924a <panic>

000000008020a766 <kvmpa>:
{
    8020a766:	1141                	addi	sp,sp,-16
    8020a768:	e406                	sd	ra,8(sp)
    8020a76a:	e022                	sd	s0,0(sp)
    8020a76c:	0800                	addi	s0,sp,16
    8020a76e:	85aa                	mv	a1,a0
  return kwalkaddr(kernel_pagetable, va);
    8020a770:	05164517          	auipc	a0,0x5164
    8020a774:	9a053503          	ld	a0,-1632(a0) # 8536e110 <kernel_pagetable>
    8020a778:	00000097          	auipc	ra,0x0
    8020a77c:	f98080e7          	jalr	-104(ra) # 8020a710 <kwalkaddr>
}
    8020a780:	60a2                	ld	ra,8(sp)
    8020a782:	6402                	ld	s0,0(sp)
    8020a784:	0141                	addi	sp,sp,16
    8020a786:	8082                	ret

000000008020a788 <kwalkaddr1>:



uint64
kwalkaddr1(pagetable_t kpt, uint64 va)
{
    8020a788:	1101                	addi	sp,sp,-32
    8020a78a:	ec06                	sd	ra,24(sp)
    8020a78c:	e822                	sd	s0,16(sp)
    8020a78e:	e426                	sd	s1,8(sp)
    8020a790:	1000                	addi	s0,sp,32
    8020a792:	84ae                	mv	s1,a1
  uint64 off = va % PGSIZE;
  pte_t *pte;
  uint64 pa;
  
  pte = walk(kpt, va, 0);
    8020a794:	4601                	li	a2,0
    8020a796:	00000097          	auipc	ra,0x0
    8020a79a:	b90080e7          	jalr	-1136(ra) # 8020a326 <walk>
  if(pte == 0)
    8020a79e:	c10d                	beqz	a0,8020a7c0 <kwalkaddr1+0x38>
    return NULL;
  if((*pte & PTE_V) == 0)
    8020a7a0:	611c                	ld	a5,0(a0)
    8020a7a2:	0017f513          	andi	a0,a5,1
    8020a7a6:	c901                	beqz	a0,8020a7b6 <kwalkaddr1+0x2e>
    return NULL;
  pa = PTE2PA(*pte);
    8020a7a8:	00a7d513          	srli	a0,a5,0xa
    8020a7ac:	0532                	slli	a0,a0,0xc
  uint64 off = va % PGSIZE;
    8020a7ae:	03449593          	slli	a1,s1,0x34
    8020a7b2:	91d1                	srli	a1,a1,0x34
  return pa+off;
    8020a7b4:	952e                	add	a0,a0,a1
}
    8020a7b6:	60e2                	ld	ra,24(sp)
    8020a7b8:	6442                	ld	s0,16(sp)
    8020a7ba:	64a2                	ld	s1,8(sp)
    8020a7bc:	6105                	addi	sp,sp,32
    8020a7be:	8082                	ret
    return NULL;
    8020a7c0:	4501                	li	a0,0
    8020a7c2:	bfd5                	j	8020a7b6 <kwalkaddr1+0x2e>

000000008020a7c4 <uvmdealloc>:
// process size.  Returns the new process size.
uint64
uvmdealloc(pagetable_t pagetable, uint64 start, uint64 end)
{
  
  if(start>=end)return -1;
    8020a7c4:	04c5f063          	bgeu	a1,a2,8020a804 <uvmdealloc+0x40>
  if(PGROUNDUP(start) < PGROUNDUP(end)){
    8020a7c8:	6785                	lui	a5,0x1
    8020a7ca:	17fd                	addi	a5,a5,-1
    8020a7cc:	95be                	add	a1,a1,a5
    8020a7ce:	777d                	lui	a4,0xfffff
    8020a7d0:	8df9                	and	a1,a1,a4
    8020a7d2:	963e                	add	a2,a2,a5
    8020a7d4:	8e79                	and	a2,a2,a4
    int npages = (PGROUNDUP(end) - PGROUNDUP(start)) / PGSIZE;
    vmunmap(pagetable, PGROUNDUP(start), npages, 1);
  }

  return 0;
    8020a7d6:	4781                	li	a5,0
  if(PGROUNDUP(start) < PGROUNDUP(end)){
    8020a7d8:	00c5e463          	bltu	a1,a2,8020a7e0 <uvmdealloc+0x1c>
}
    8020a7dc:	853e                	mv	a0,a5
    8020a7de:	8082                	ret
{
    8020a7e0:	1141                	addi	sp,sp,-16
    8020a7e2:	e406                	sd	ra,8(sp)
    8020a7e4:	e022                	sd	s0,0(sp)
    8020a7e6:	0800                	addi	s0,sp,16
    int npages = (PGROUNDUP(end) - PGROUNDUP(start)) / PGSIZE;
    8020a7e8:	8e0d                	sub	a2,a2,a1
    8020a7ea:	8231                	srli	a2,a2,0xc
    vmunmap(pagetable, PGROUNDUP(start), npages, 1);
    8020a7ec:	4685                	li	a3,1
    8020a7ee:	2601                	sext.w	a2,a2
    8020a7f0:	00000097          	auipc	ra,0x0
    8020a7f4:	da8080e7          	jalr	-600(ra) # 8020a598 <vmunmap>
  return 0;
    8020a7f8:	4781                	li	a5,0
}
    8020a7fa:	853e                	mv	a0,a5
    8020a7fc:	60a2                	ld	ra,8(sp)
    8020a7fe:	6402                	ld	s0,0(sp)
    8020a800:	0141                	addi	sp,sp,16
    8020a802:	8082                	ret
  if(start>=end)return -1;
    8020a804:	57fd                	li	a5,-1
    8020a806:	bfd9                	j	8020a7dc <uvmdealloc+0x18>

000000008020a808 <uvmalloc>:
  if(start>=end)return -1;
    8020a808:	0ac5fd63          	bgeu	a1,a2,8020a8c2 <uvmalloc+0xba>
{
    8020a80c:	7139                	addi	sp,sp,-64
    8020a80e:	fc06                	sd	ra,56(sp)
    8020a810:	f822                	sd	s0,48(sp)
    8020a812:	f426                	sd	s1,40(sp)
    8020a814:	f04a                	sd	s2,32(sp)
    8020a816:	ec4e                	sd	s3,24(sp)
    8020a818:	e852                	sd	s4,16(sp)
    8020a81a:	e456                	sd	s5,8(sp)
    8020a81c:	e05a                	sd	s6,0(sp)
    8020a81e:	0080                	addi	s0,sp,64
    8020a820:	8a2a                	mv	s4,a0
    8020a822:	8b2e                	mv	s6,a1
    8020a824:	89b2                	mv	s3,a2
    8020a826:	8ab6                	mv	s5,a3
  for(a = start; a < end; a += PGSIZE){
    8020a828:	892e                	mv	s2,a1
    mem = allocpage();
    8020a82a:	fffff097          	auipc	ra,0xfffff
    8020a82e:	50a080e7          	jalr	1290(ra) # 80209d34 <_allocpage>
    8020a832:	84aa                	mv	s1,a0
    if(mem == NULL){
    8020a834:	c51d                	beqz	a0,8020a862 <uvmalloc+0x5a>
    memset(mem, 0, PGSIZE);
    8020a836:	6605                	lui	a2,0x1
    8020a838:	4581                	li	a1,0
    8020a83a:	ffff6097          	auipc	ra,0xffff6
    8020a83e:	53a080e7          	jalr	1338(ra) # 80200d74 <memset>
    if (mappages(pagetable, a, PGSIZE, (uint64)mem, perm) != 0) {
    8020a842:	8756                	mv	a4,s5
    8020a844:	86a6                	mv	a3,s1
    8020a846:	6605                	lui	a2,0x1
    8020a848:	85ca                	mv	a1,s2
    8020a84a:	8552                	mv	a0,s4
    8020a84c:	00000097          	auipc	ra,0x0
    8020a850:	b8a080e7          	jalr	-1142(ra) # 8020a3d6 <mappages>
    8020a854:	e129                	bnez	a0,8020a896 <uvmalloc+0x8e>
  for(a = start; a < end; a += PGSIZE){
    8020a856:	6785                	lui	a5,0x1
    8020a858:	993e                	add	s2,s2,a5
    8020a85a:	fd3968e3          	bltu	s2,s3,8020a82a <uvmalloc+0x22>
  return 0;
    8020a85e:	4501                	li	a0,0
    8020a860:	a00d                	j	8020a882 <uvmalloc+0x7a>
      uvmdealloc(pagetable, start, a);
    8020a862:	864a                	mv	a2,s2
    8020a864:	85da                	mv	a1,s6
    8020a866:	8552                	mv	a0,s4
    8020a868:	00000097          	auipc	ra,0x0
    8020a86c:	f5c080e7          	jalr	-164(ra) # 8020a7c4 <uvmdealloc>
      printf("uvmalloc kalloc failed\n");
    8020a870:	0000a517          	auipc	a0,0xa
    8020a874:	53050513          	addi	a0,a0,1328 # 80214da0 <digits+0x278>
    8020a878:	fffff097          	auipc	ra,0xfffff
    8020a87c:	a1c080e7          	jalr	-1508(ra) # 80209294 <printf>
      return -1;
    8020a880:	557d                	li	a0,-1
}
    8020a882:	70e2                	ld	ra,56(sp)
    8020a884:	7442                	ld	s0,48(sp)
    8020a886:	74a2                	ld	s1,40(sp)
    8020a888:	7902                	ld	s2,32(sp)
    8020a88a:	69e2                	ld	s3,24(sp)
    8020a88c:	6a42                	ld	s4,16(sp)
    8020a88e:	6aa2                	ld	s5,8(sp)
    8020a890:	6b02                	ld	s6,0(sp)
    8020a892:	6121                	addi	sp,sp,64
    8020a894:	8082                	ret
      freepage(mem);
    8020a896:	8526                	mv	a0,s1
    8020a898:	fffff097          	auipc	ra,0xfffff
    8020a89c:	53c080e7          	jalr	1340(ra) # 80209dd4 <_freepage>
      uvmdealloc(pagetable, start, a);
    8020a8a0:	864a                	mv	a2,s2
    8020a8a2:	85da                	mv	a1,s6
    8020a8a4:	8552                	mv	a0,s4
    8020a8a6:	00000097          	auipc	ra,0x0
    8020a8aa:	f1e080e7          	jalr	-226(ra) # 8020a7c4 <uvmdealloc>
      printf("[uvmalloc]map user page failed\n");
    8020a8ae:	0000a517          	auipc	a0,0xa
    8020a8b2:	50a50513          	addi	a0,a0,1290 # 80214db8 <digits+0x290>
    8020a8b6:	fffff097          	auipc	ra,0xfffff
    8020a8ba:	9de080e7          	jalr	-1570(ra) # 80209294 <printf>
      return -1;
    8020a8be:	557d                	li	a0,-1
    8020a8c0:	b7c9                	j	8020a882 <uvmalloc+0x7a>
  if(start>=end)return -1;
    8020a8c2:	557d                	li	a0,-1
}
    8020a8c4:	8082                	ret

000000008020a8c6 <freewalk>:

// Recursively free page-table pages.
// All leaf mappings must already have been removed.
void
freewalk(pagetable_t pagetable)
{
    8020a8c6:	715d                	addi	sp,sp,-80
    8020a8c8:	e486                	sd	ra,72(sp)
    8020a8ca:	e0a2                	sd	s0,64(sp)
    8020a8cc:	fc26                	sd	s1,56(sp)
    8020a8ce:	f84a                	sd	s2,48(sp)
    8020a8d0:	f44e                	sd	s3,40(sp)
    8020a8d2:	f052                	sd	s4,32(sp)
    8020a8d4:	ec56                	sd	s5,24(sp)
    8020a8d6:	e85a                	sd	s6,16(sp)
    8020a8d8:	e45e                	sd	s7,8(sp)
    8020a8da:	e062                	sd	s8,0(sp)
    8020a8dc:	0880                	addi	s0,sp,80
    8020a8de:	8baa                	mv	s7,a0
    8020a8e0:	892a                	mv	s2,a0
    8020a8e2:	4481                	li	s1,0
  //printf("[freewalk]enter %p\n",pagetable);
  // there are 2^9 = 512 PTEs in a page table.
  for(int i = 0; i < 512; i++){
    pte_t pte = pagetable[i];
    if(pagetable[i]==kernel_pagetable[i])continue;
    8020a8e4:	05164a17          	auipc	s4,0x5164
    8020a8e8:	82ca0a13          	addi	s4,s4,-2004 # 8536e110 <kernel_pagetable>
    if((pte & PTE_V) && (pte & (PTE_R|PTE_W|PTE_X) ) == 0){
    8020a8ec:	4a85                	li	s5,1
      uint64 child = PTE2PA(pte);
      freewalk((pagetable_t)child);
      pagetable[i] = 0;
    } 
    else if(pte & PTE_V){
      __debug_warn("freewalk: leaf %d\n",i);
    8020a8ee:	0000ab17          	auipc	s6,0xa
    8020a8f2:	4eab0b13          	addi	s6,s6,1258 # 80214dd8 <digits+0x2b0>
  for(int i = 0; i < 512; i++){
    8020a8f6:	20000993          	li	s3,512
    8020a8fa:	a01d                	j	8020a920 <freewalk+0x5a>
      uint64 child = PTE2PA(pte);
    8020a8fc:	8129                	srli	a0,a0,0xa
      freewalk((pagetable_t)child);
    8020a8fe:	0532                	slli	a0,a0,0xc
    8020a900:	00000097          	auipc	ra,0x0
    8020a904:	fc6080e7          	jalr	-58(ra) # 8020a8c6 <freewalk>
      pagetable[i] = 0;
    8020a908:	00093023          	sd	zero,0(s2)
    8020a90c:	a031                	j	8020a918 <freewalk+0x52>
      __debug_warn("freewalk: leaf %d\n",i);
    8020a90e:	855a                	mv	a0,s6
    8020a910:	fffff097          	auipc	ra,0xfffff
    8020a914:	d60080e7          	jalr	-672(ra) # 80209670 <__debug_warn>
  for(int i = 0; i < 512; i++){
    8020a918:	0485                	addi	s1,s1,1
    8020a91a:	0921                	addi	s2,s2,8
    8020a91c:	03348563          	beq	s1,s3,8020a946 <freewalk+0x80>
    8020a920:	0004859b          	sext.w	a1,s1
    pte_t pte = pagetable[i];
    8020a924:	00093503          	ld	a0,0(s2)
    if(pagetable[i]==kernel_pagetable[i])continue;
    8020a928:	000a3783          	ld	a5,0(s4)
    8020a92c:	00349713          	slli	a4,s1,0x3
    8020a930:	97ba                	add	a5,a5,a4
    8020a932:	639c                	ld	a5,0(a5)
    8020a934:	fea782e3          	beq	a5,a0,8020a918 <freewalk+0x52>
    if((pte & PTE_V) && (pte & (PTE_R|PTE_W|PTE_X) ) == 0){
    8020a938:	00f57793          	andi	a5,a0,15
    8020a93c:	fd5780e3          	beq	a5,s5,8020a8fc <freewalk+0x36>
    else if(pte & PTE_V){
    8020a940:	8905                	andi	a0,a0,1
    8020a942:	d979                	beqz	a0,8020a918 <freewalk+0x52>
    8020a944:	b7e9                	j	8020a90e <freewalk+0x48>
      //pagetable[i]=0;
    }
  }
  freepage((void*)pagetable);
    8020a946:	855e                	mv	a0,s7
    8020a948:	fffff097          	auipc	ra,0xfffff
    8020a94c:	48c080e7          	jalr	1164(ra) # 80209dd4 <_freepage>
}
    8020a950:	60a6                	ld	ra,72(sp)
    8020a952:	6406                	ld	s0,64(sp)
    8020a954:	74e2                	ld	s1,56(sp)
    8020a956:	7942                	ld	s2,48(sp)
    8020a958:	79a2                	ld	s3,40(sp)
    8020a95a:	7a02                	ld	s4,32(sp)
    8020a95c:	6ae2                	ld	s5,24(sp)
    8020a95e:	6b42                	ld	s6,16(sp)
    8020a960:	6ba2                	ld	s7,8(sp)
    8020a962:	6c02                	ld	s8,0(sp)
    8020a964:	6161                	addi	sp,sp,80
    8020a966:	8082                	ret

000000008020a968 <kvmcreate>:

// create an empty user page table.
// returns 0 if out of memory.
pagetable_t
kvmcreate()
{
    8020a968:	1101                	addi	sp,sp,-32
    8020a96a:	ec06                	sd	ra,24(sp)
    8020a96c:	e822                	sd	s0,16(sp)
    8020a96e:	e426                	sd	s1,8(sp)
    8020a970:	e04a                	sd	s2,0(sp)
    8020a972:	1000                	addi	s0,sp,32
  pagetable_t pagetable;
  pagetable = (pagetable_t) allocpage();
    8020a974:	fffff097          	auipc	ra,0xfffff
    8020a978:	3c0080e7          	jalr	960(ra) # 80209d34 <_allocpage>
  if(pagetable == NULL)
    return NULL;
    8020a97c:	4901                	li	s2,0
  if(pagetable == NULL)
    8020a97e:	c11d                	beqz	a0,8020a9a4 <kvmcreate+0x3c>
    8020a980:	84aa                	mv	s1,a0
  pagetable = (pagetable_t) allocpage();
    8020a982:	892a                	mv	s2,a0
  memset(pagetable, 0, PGSIZE);
    8020a984:	6605                	lui	a2,0x1
    8020a986:	4581                	li	a1,0
    8020a988:	ffff6097          	auipc	ra,0xffff6
    8020a98c:	3ec080e7          	jalr	1004(ra) # 80200d74 <memset>
  memmove(pagetable, kernel_pagetable, PGSIZE);
    8020a990:	6605                	lui	a2,0x1
    8020a992:	05163597          	auipc	a1,0x5163
    8020a996:	77e5b583          	ld	a1,1918(a1) # 8536e110 <kernel_pagetable>
    8020a99a:	8526                	mv	a0,s1
    8020a99c:	ffff6097          	auipc	ra,0xffff6
    8020a9a0:	438080e7          	jalr	1080(ra) # 80200dd4 <memmove>
  return pagetable;
}
    8020a9a4:	854a                	mv	a0,s2
    8020a9a6:	60e2                	ld	ra,24(sp)
    8020a9a8:	6442                	ld	s0,16(sp)
    8020a9aa:	64a2                	ld	s1,8(sp)
    8020a9ac:	6902                	ld	s2,0(sp)
    8020a9ae:	6105                	addi	sp,sp,32
    8020a9b0:	8082                	ret

000000008020a9b2 <uvmfree>:

// Free user memory pages,
// then free page-table pages.
void
uvmfree(struct proc *p)
{
    8020a9b2:	1101                	addi	sp,sp,-32
    8020a9b4:	ec06                	sd	ra,24(sp)
    8020a9b6:	e822                	sd	s0,16(sp)
    8020a9b8:	e426                	sd	s1,8(sp)
    8020a9ba:	1000                	addi	s0,sp,32
    8020a9bc:	84aa                	mv	s1,a0
  free_vma_list(p);
    8020a9be:	00002097          	auipc	ra,0x2
    8020a9c2:	fc0080e7          	jalr	-64(ra) # 8020c97e <free_vma_list>
  // vmunmap(pagetable, 0, PGROUNDUP(sz)/PGSIZE, 1);
  freewalk(p->pagetable);
    8020a9c6:	70a8                	ld	a0,96(s1)
    8020a9c8:	00000097          	auipc	ra,0x0
    8020a9cc:	efe080e7          	jalr	-258(ra) # 8020a8c6 <freewalk>
}
    8020a9d0:	60e2                	ld	ra,24(sp)
    8020a9d2:	6442                	ld	s0,16(sp)
    8020a9d4:	64a2                	ld	s1,8(sp)
    8020a9d6:	6105                	addi	sp,sp,32
    8020a9d8:	8082                	ret

000000008020a9da <uvmprotect>:


int 
uvmprotect(uint64 va, uint64 len, int perm)
{
    8020a9da:	7139                	addi	sp,sp,-64
    8020a9dc:	fc06                	sd	ra,56(sp)
    8020a9de:	f822                	sd	s0,48(sp)
    8020a9e0:	f426                	sd	s1,40(sp)
    8020a9e2:	f04a                	sd	s2,32(sp)
    8020a9e4:	ec4e                	sd	s3,24(sp)
    8020a9e6:	e852                	sd	s4,16(sp)
    8020a9e8:	e456                	sd	s5,8(sp)
    8020a9ea:	e05a                	sd	s6,0(sp)
    8020a9ec:	0080                	addi	s0,sp,64
    8020a9ee:	89aa                	mv	s3,a0
    8020a9f0:	892e                	mv	s2,a1
    8020a9f2:	8ab2                	mv	s5,a2
  int fence = 0;
  uint64 i;
  pte_t *pte = NULL;
  struct proc *p = myproc();
    8020a9f4:	00002097          	auipc	ra,0x2
    8020a9f8:	9be080e7          	jalr	-1602(ra) # 8020c3b2 <myproc>
  if(va % PGSIZE != 0)
    8020a9fc:	03499793          	slli	a5,s3,0x34
    8020aa00:	efb9                	bnez	a5,8020aa5e <uvmprotect+0x84>
    8020aa02:	8a2a                	mv	s4,a0
  {
    __debug_warn("[uvmprotect] va is illegal\n");
    return -EINVAL;
  }

  if(len % PGSIZE)
    8020aa04:	03491793          	slli	a5,s2,0x34
    8020aa08:	0347d493          	srli	s1,a5,0x34
    8020aa0c:	e3bd                	bnez	a5,8020aa72 <uvmprotect+0x98>
  {
    __debug_warn("[uvmprotect] len is illegal\n");
    return -EINVAL;
  }
  
  struct vma *vma = (struct vma*)find_map_fix(p, va, len);
    8020aa0e:	864a                	mv	a2,s2
    8020aa10:	85ce                	mv	a1,s3
    8020aa12:	00003097          	auipc	ra,0x3
    8020aa16:	940080e7          	jalr	-1728(ra) # 8020d352 <find_map_fix>
  if(!vma) vma = part_locate_vma(p->vma, va, va + len);
    8020aa1a:	c535                	beqz	a0,8020aa86 <uvmprotect+0xac>
  {
    __debug_warn("[uvmprotect] memory illegal\n");
    return -EINVAL;
  }
  
  if(vma->type == MMAP && vma->fd != -1)
    8020aa1c:	4118                	lw	a4,0(a0)
    8020aa1e:	4799                	li	a5,6
    8020aa20:	08f70763          	beq	a4,a5,8020aaae <uvmprotect+0xd4>
    {
      return -EINVAL;
    }
  }
  
  for(i = 0; i < len; i += PGSIZE)
    8020aa24:	6b05                	lui	s6,0x1
      return -ENOMEM;
    }
  }
  if(fence)
    sfence_vma();
  return 0;
    8020aa26:	4501                	li	a0,0
  for(i = 0; i < len; i += PGSIZE)
    8020aa28:	0c090863          	beqz	s2,8020aaf8 <uvmprotect+0x11e>
    pte = walk(p->pagetable, va + i, 0);
    8020aa2c:	4601                	li	a2,0
    8020aa2e:	009985b3          	add	a1,s3,s1
    8020aa32:	060a3503          	ld	a0,96(s4)
    8020aa36:	00000097          	auipc	ra,0x0
    8020aa3a:	8f0080e7          	jalr	-1808(ra) # 8020a326 <walk>
    if(pte == NULL)
    8020aa3e:	c545                	beqz	a0,8020aae6 <uvmprotect+0x10c>
    if(*pte & PTE_V)
    8020aa40:	611c                	ld	a5,0(a0)
    8020aa42:	0017f713          	andi	a4,a5,1
    8020aa46:	c379                	beqz	a4,8020ab0c <uvmprotect+0x132>
      *pte = (*pte & ~(PTE_W | PTE_R | PTE_X)) | perm;
    8020aa48:	9bc5                	andi	a5,a5,-15
    8020aa4a:	0157e7b3          	or	a5,a5,s5
    8020aa4e:	e11c                	sd	a5,0(a0)
  for(i = 0; i < len; i += PGSIZE)
    8020aa50:	94da                	add	s1,s1,s6
    8020aa52:	fd24ede3          	bltu	s1,s2,8020aa2c <uvmprotect+0x52>
    8020aa56:	12000073          	sfence.vma
  return 0;
    8020aa5a:	4501                	li	a0,0
}
    8020aa5c:	a871                	j	8020aaf8 <uvmprotect+0x11e>
    __debug_warn("[uvmprotect] va is illegal\n");
    8020aa5e:	0000a517          	auipc	a0,0xa
    8020aa62:	39250513          	addi	a0,a0,914 # 80214df0 <digits+0x2c8>
    8020aa66:	fffff097          	auipc	ra,0xfffff
    8020aa6a:	c0a080e7          	jalr	-1014(ra) # 80209670 <__debug_warn>
    return -EINVAL;
    8020aa6e:	5529                	li	a0,-22
    8020aa70:	a061                	j	8020aaf8 <uvmprotect+0x11e>
    __debug_warn("[uvmprotect] len is illegal\n");
    8020aa72:	0000a517          	auipc	a0,0xa
    8020aa76:	39e50513          	addi	a0,a0,926 # 80214e10 <digits+0x2e8>
    8020aa7a:	fffff097          	auipc	ra,0xfffff
    8020aa7e:	bf6080e7          	jalr	-1034(ra) # 80209670 <__debug_warn>
    return -EINVAL;
    8020aa82:	5529                	li	a0,-22
    8020aa84:	a895                	j	8020aaf8 <uvmprotect+0x11e>
  if(!vma) vma = part_locate_vma(p->vma, va, va + len);
    8020aa86:	01298633          	add	a2,s3,s2
    8020aa8a:	85ce                	mv	a1,s3
    8020aa8c:	170a3503          	ld	a0,368(s4)
    8020aa90:	00002097          	auipc	ra,0x2
    8020aa94:	b36080e7          	jalr	-1226(ra) # 8020c5c6 <part_locate_vma>
  if(vma == NULL)
    8020aa98:	f151                	bnez	a0,8020aa1c <uvmprotect+0x42>
    __debug_warn("[uvmprotect] memory illegal\n");
    8020aa9a:	0000a517          	auipc	a0,0xa
    8020aa9e:	39650513          	addi	a0,a0,918 # 80214e30 <digits+0x308>
    8020aaa2:	fffff097          	auipc	ra,0xfffff
    8020aaa6:	bce080e7          	jalr	-1074(ra) # 80209670 <__debug_warn>
    return -EINVAL;
    8020aaaa:	5529                	li	a0,-22
    8020aaac:	a0b1                	j	8020aaf8 <uvmprotect+0x11e>
  if(vma->type == MMAP && vma->fd != -1)
    8020aaae:	555c                	lw	a5,44(a0)
    8020aab0:	577d                	li	a4,-1
    8020aab2:	f6e789e3          	beq	a5,a4,8020aa24 <uvmprotect+0x4a>
    struct file *f = p->ofile[vma->fd];
    8020aab6:	0e8a3703          	ld	a4,232(s4)
    8020aaba:	078e                	slli	a5,a5,0x3
    8020aabc:	97ba                	add	a5,a5,a4
    8020aabe:	639c                	ld	a5,0(a5)
    if(f == NULL)
    8020aac0:	cb89                	beqz	a5,8020aad2 <uvmprotect+0xf8>
    if(!(f->writable) && (perm & PTE_W))
    8020aac2:	0097c783          	lbu	a5,9(a5) # 1009 <_entry-0x801feff7>
    8020aac6:	ffb9                	bnez	a5,8020aa24 <uvmprotect+0x4a>
    8020aac8:	004af793          	andi	a5,s5,4
    8020aacc:	dfa1                	beqz	a5,8020aa24 <uvmprotect+0x4a>
      return -EINVAL;
    8020aace:	5529                	li	a0,-22
    8020aad0:	a025                	j	8020aaf8 <uvmprotect+0x11e>
      __debug_warn("[uvmprotect] something wrong in MMAP memoryn\n");
    8020aad2:	0000a517          	auipc	a0,0xa
    8020aad6:	37e50513          	addi	a0,a0,894 # 80214e50 <digits+0x328>
    8020aada:	fffff097          	auipc	ra,0xfffff
    8020aade:	b96080e7          	jalr	-1130(ra) # 80209670 <__debug_warn>
      return -EINVAL;
    8020aae2:	5529                	li	a0,-22
    8020aae4:	a811                	j	8020aaf8 <uvmprotect+0x11e>
      __debug_warn("[uvmprotect] page not mapped\n");
    8020aae6:	0000a517          	auipc	a0,0xa
    8020aaea:	39a50513          	addi	a0,a0,922 # 80214e80 <digits+0x358>
    8020aaee:	fffff097          	auipc	ra,0xfffff
    8020aaf2:	b82080e7          	jalr	-1150(ra) # 80209670 <__debug_warn>
      return -ENOMEM;
    8020aaf6:	5551                	li	a0,-12
}
    8020aaf8:	70e2                	ld	ra,56(sp)
    8020aafa:	7442                	ld	s0,48(sp)
    8020aafc:	74a2                	ld	s1,40(sp)
    8020aafe:	7902                	ld	s2,32(sp)
    8020ab00:	69e2                	ld	s3,24(sp)
    8020ab02:	6a42                	ld	s4,16(sp)
    8020ab04:	6aa2                	ld	s5,8(sp)
    8020ab06:	6b02                	ld	s6,0(sp)
    8020ab08:	6121                	addi	sp,sp,64
    8020ab0a:	8082                	ret
      __debug_warn("[uvmprotect] page is invalid\n");
    8020ab0c:	0000a517          	auipc	a0,0xa
    8020ab10:	39450513          	addi	a0,a0,916 # 80214ea0 <digits+0x378>
    8020ab14:	fffff097          	auipc	ra,0xfffff
    8020ab18:	b5c080e7          	jalr	-1188(ra) # 80209670 <__debug_warn>
      return -ENOMEM;
    8020ab1c:	5551                	li	a0,-12
    8020ab1e:	bfe9                	j	8020aaf8 <uvmprotect+0x11e>

000000008020ab20 <handle_page_fault>:

int handle_page_fault(int kind, uint64 stval)
{
    8020ab20:	7179                	addi	sp,sp,-48
    8020ab22:	f406                	sd	ra,40(sp)
    8020ab24:	f022                	sd	s0,32(sp)
    8020ab26:	ec26                	sd	s1,24(sp)
    8020ab28:	e84a                	sd	s2,16(sp)
    8020ab2a:	e44e                	sd	s3,8(sp)
    8020ab2c:	e052                	sd	s4,0(sp)
    8020ab2e:	1800                	addi	s0,sp,48
    8020ab30:	89aa                	mv	s3,a0
    8020ab32:	892e                	mv	s2,a1
  struct proc *p = myproc();
    8020ab34:	00002097          	auipc	ra,0x2
    8020ab38:	87e080e7          	jalr	-1922(ra) # 8020c3b2 <myproc>
    8020ab3c:	84aa                	mv	s1,a0
  struct vma *vma1 = addr_locate_vma(p->vma, stval - 1);
    8020ab3e:	fff90593          	addi	a1,s2,-1
    8020ab42:	17053503          	ld	a0,368(a0)
    8020ab46:	00002097          	auipc	ra,0x2
    8020ab4a:	a52080e7          	jalr	-1454(ra) # 8020c598 <addr_locate_vma>
    8020ab4e:	8a2a                	mv	s4,a0
  struct vma *vma2 = addr_locate_vma(p->vma, stval + 1);
    8020ab50:	00190593          	addi	a1,s2,1
    8020ab54:	1704b503          	ld	a0,368(s1)
    8020ab58:	00002097          	auipc	ra,0x2
    8020ab5c:	a40080e7          	jalr	-1472(ra) # 8020c598 <addr_locate_vma>
  if(vma2)
    8020ab60:	c91d                	beqz	a0,8020ab96 <handle_page_fault+0x76>
  {
    if(vma2->type == STACK)
    8020ab62:	4118                	lw	a4,0(a0)
    8020ab64:	479d                	li	a5,7
    {
      vma1 = vma2;
    }
    else 
    {
      return -1;
    8020ab66:	557d                	li	a0,-1
    if(vma2->type == STACK)
    8020ab68:	00f71f63          	bne	a4,a5,8020ab86 <handle_page_fault+0x66>
  else if(!vma1)
  {
    return -1;
  }

  pte_t *pte = walk(p->pagetable, stval, 0);
    8020ab6c:	4601                	li	a2,0
    8020ab6e:	85ca                	mv	a1,s2
    8020ab70:	70a8                	ld	a0,96(s1)
    8020ab72:	fffff097          	auipc	ra,0xfffff
    8020ab76:	7b4080e7          	jalr	1972(ra) # 8020a326 <walk>
    8020ab7a:	87aa                	mv	a5,a0
    {
      return -1;
    }
  }

  return 0;
    8020ab7c:	4501                	li	a0,0
  if(pte)
    8020ab7e:	c781                	beqz	a5,8020ab86 <handle_page_fault+0x66>
    if(kind == 1 && (*pte && PTE_W))
    8020ab80:	4705                	li	a4,1
    8020ab82:	00e98e63          	beq	s3,a4,8020ab9e <handle_page_fault+0x7e>
    8020ab86:	70a2                	ld	ra,40(sp)
    8020ab88:	7402                	ld	s0,32(sp)
    8020ab8a:	64e2                	ld	s1,24(sp)
    8020ab8c:	6942                	ld	s2,16(sp)
    8020ab8e:	69a2                	ld	s3,8(sp)
    8020ab90:	6a02                	ld	s4,0(sp)
    8020ab92:	6145                	addi	sp,sp,48
    8020ab94:	8082                	ret
  else if(!vma1)
    8020ab96:	fc0a1be3          	bnez	s4,8020ab6c <handle_page_fault+0x4c>
    return -1;
    8020ab9a:	557d                	li	a0,-1
    8020ab9c:	b7ed                	j	8020ab86 <handle_page_fault+0x66>
    if(kind == 1 && (*pte && PTE_W))
    8020ab9e:	6388                	ld	a0,0(a5)
    8020aba0:	00a03533          	snez	a0,a0
    8020aba4:	40a00533          	neg	a0,a0
    8020aba8:	bff9                	j	8020ab86 <handle_page_fault+0x66>

000000008020abaa <plicinit>:

//
// the riscv Platform Level Interrupt Controller (PLIC).
//

void plicinit(void) {
    8020abaa:	1141                	addi	sp,sp,-16
    8020abac:	e406                	sd	ra,8(sp)
    8020abae:	e022                	sd	s0,0(sp)
    8020abb0:	0800                	addi	s0,sp,16
    // set desired IRQ priorities non-zero (otherwise disabled).
    //writed(1,PLIC_V + VIRTIO0_IRQ * 4);
    //writed(1, PLIC_V + DISK_IRQ * sizeof(uint32));
    writed(1, PLIC_V + UART1_IRQ * sizeof(uint32));
    8020abb2:	00fc37b7          	lui	a5,0xfc3
    8020abb6:	07ba                	slli	a5,a5,0xe
    8020abb8:	4705                	li	a4,1
    8020abba:	cbd8                	sw	a4,20(a5)
    //writed(1, PLIC_V + UART1_IRQ * sizeof(uint32));
#ifdef	DEBUG
     printf("plicinit\n");
    8020abbc:	0000a517          	auipc	a0,0xa
    8020abc0:	30450513          	addi	a0,a0,772 # 80214ec0 <digits+0x398>
    8020abc4:	ffffe097          	auipc	ra,0xffffe
    8020abc8:	6d0080e7          	jalr	1744(ra) # 80209294 <printf>
#endif 
}
    8020abcc:	60a2                	ld	ra,8(sp)
    8020abce:	6402                	ld	s0,0(sp)
    8020abd0:	0141                	addi	sp,sp,16
    8020abd2:	8082                	ret

000000008020abd4 <plicinithart>:

void plicinithart(void) {
    8020abd4:	1141                	addi	sp,sp,-16
    8020abd6:	e406                	sd	ra,8(sp)
    8020abd8:	e022                	sd	s0,0(sp)
    8020abda:	0800                	addi	s0,sp,16
    int hart = cpuid();
    8020abdc:	00001097          	auipc	ra,0x1
    8020abe0:	7aa080e7          	jalr	1962(ra) # 8020c386 <cpuid>
    // set uart's enable bit for this hart's S-mode.
    *(uint32 *)PLIC_SENABLE(hart) = (1 << UART1_IRQ);
    8020abe4:	0085171b          	slliw	a4,a0,0x8
    8020abe8:	01f867b7          	lui	a5,0x1f86
    8020abec:	0785                	addi	a5,a5,1
    8020abee:	07b6                	slli	a5,a5,0xd
    8020abf0:	97ba                	add	a5,a5,a4
    8020abf2:	02000713          	li	a4,32
    8020abf6:	c398                	sw	a4,0(a5)
    // set this hart's S-mode priority threshold to 0.
    *(uint32 *)PLIC_SPRIORITY(hart) = 0;
    8020abf8:	00d5151b          	slliw	a0,a0,0xd
    8020abfc:	1f8617b7          	lui	a5,0x1f861
    8020ac00:	07a6                	slli	a5,a5,0x9
    8020ac02:	953e                	add	a0,a0,a5
    8020ac04:	00052023          	sw	zero,0(a0)
#ifdef DEBUG
     printf("plichartinit\n");
    8020ac08:	0000a517          	auipc	a0,0xa
    8020ac0c:	2c850513          	addi	a0,a0,712 # 80214ed0 <digits+0x3a8>
    8020ac10:	ffffe097          	auipc	ra,0xffffe
    8020ac14:	684080e7          	jalr	1668(ra) # 80209294 <printf>
#endif 
}
    8020ac18:	60a2                	ld	ra,8(sp)
    8020ac1a:	6402                	ld	s0,0(sp)
    8020ac1c:	0141                	addi	sp,sp,16
    8020ac1e:	8082                	ret

000000008020ac20 <plic_claim>:

// ask the PLIC what interrupt we should serve.
int plic_claim(void) {
    8020ac20:	1141                	addi	sp,sp,-16
    8020ac22:	e406                	sd	ra,8(sp)
    8020ac24:	e022                	sd	s0,0(sp)
    8020ac26:	0800                	addi	s0,sp,16
    int hart = cpuid();
    8020ac28:	00001097          	auipc	ra,0x1
    8020ac2c:	75e080e7          	jalr	1886(ra) # 8020c386 <cpuid>
    int irq = *(uint32 *)PLIC_SCLAIM(hart);
    8020ac30:	00d5179b          	slliw	a5,a0,0xd
    8020ac34:	1f861537          	lui	a0,0x1f861
    8020ac38:	0526                	slli	a0,a0,0x9
    8020ac3a:	953e                	add	a0,a0,a5
    return irq;
}
    8020ac3c:	4148                	lw	a0,4(a0)
    8020ac3e:	60a2                	ld	ra,8(sp)
    8020ac40:	6402                	ld	s0,0(sp)
    8020ac42:	0141                	addi	sp,sp,16
    8020ac44:	8082                	ret

000000008020ac46 <plic_complete>:

// tell the PLIC we've served this IRQ.
void plic_complete(int irq) {
    8020ac46:	1101                	addi	sp,sp,-32
    8020ac48:	ec06                	sd	ra,24(sp)
    8020ac4a:	e822                	sd	s0,16(sp)
    8020ac4c:	e426                	sd	s1,8(sp)
    8020ac4e:	1000                	addi	s0,sp,32
    8020ac50:	84aa                	mv	s1,a0
    int hart = cpuid();
    8020ac52:	00001097          	auipc	ra,0x1
    8020ac56:	734080e7          	jalr	1844(ra) # 8020c386 <cpuid>
    *(uint32 *)PLIC_SCLAIM(hart) = irq;
    8020ac5a:	00d5151b          	slliw	a0,a0,0xd
    8020ac5e:	1f8617b7          	lui	a5,0x1f861
    8020ac62:	07a6                	slli	a5,a5,0x9
    8020ac64:	97aa                	add	a5,a5,a0
    8020ac66:	c3c4                	sw	s1,4(a5)
}
    8020ac68:	60e2                	ld	ra,24(sp)
    8020ac6a:	6442                	ld	s0,16(sp)
    8020ac6c:	64a2                	ld	s1,8(sp)
    8020ac6e:	6105                	addi	sp,sp,32
    8020ac70:	8082                	ret

000000008020ac72 <timerinit>:
#include "include/proc.h"

struct spinlock tickslock;
uint ticks;

void timerinit() {
    8020ac72:	1141                	addi	sp,sp,-16
    8020ac74:	e406                	sd	ra,8(sp)
    8020ac76:	e022                	sd	s0,0(sp)
    8020ac78:	0800                	addi	s0,sp,16
    initlock(&tickslock, "time");
    8020ac7a:	0000a597          	auipc	a1,0xa
    8020ac7e:	bc658593          	addi	a1,a1,-1082 # 80214840 <rodata_start+0x840>
    8020ac82:	05163517          	auipc	a0,0x5163
    8020ac86:	49650513          	addi	a0,a0,1174 # 8536e118 <tickslock>
    8020ac8a:	ffffe097          	auipc	ra,0xffffe
    8020ac8e:	20c080e7          	jalr	524(ra) # 80208e96 <initlock>
    ticks = 0;
    8020ac92:	05163797          	auipc	a5,0x5163
    8020ac96:	4807af23          	sw	zero,1182(a5) # 8536e130 <ticks>
    #ifdef DEBUG
    printf("timerinit\n");
    8020ac9a:	0000a517          	auipc	a0,0xa
    8020ac9e:	24650513          	addi	a0,a0,582 # 80214ee0 <digits+0x3b8>
    8020aca2:	ffffe097          	auipc	ra,0xffffe
    8020aca6:	5f2080e7          	jalr	1522(ra) # 80209294 <printf>
    #endif
}
    8020acaa:	60a2                	ld	ra,8(sp)
    8020acac:	6402                	ld	s0,0(sp)
    8020acae:	0141                	addi	sp,sp,16
    8020acb0:	8082                	ret

000000008020acb2 <set_next_timeout>:

void
set_next_timeout() {
    8020acb2:	1141                	addi	sp,sp,-16
    8020acb4:	e422                	sd	s0,8(sp)
    8020acb6:	0800                	addi	s0,sp,16
  asm volatile("rdtime %0" : "=r" (x) );
    8020acb8:	c0102573          	rdtime	a0
    // if comment the `printf` line below
    // the timer will not work.

    // this bug seems to disappear automatically
    // printf("");
    set_timer(r_time() + INTERVAL);
    8020acbc:	00bec7b7          	lui	a5,0xbec
    8020acc0:	c2078793          	addi	a5,a5,-992 # bebc20 <_entry-0x7f6143e0>
    8020acc4:	953e                	add	a0,a0,a5
	register uint64 a1 asm ("a1") = (uint64)(arg1);
    8020acc6:	4581                	li	a1,0
	register uint64 a2 asm ("a2") = (uint64)(arg2);
    8020acc8:	4601                	li	a2,0
	register uint64 a3 asm ("a3") = (uint64)(arg3);
    8020acca:	4681                	li	a3,0
	register uint64 a4 asm ("a4") = (uint64)(arg4);
    8020accc:	4701                	li	a4,0
	register uint64 a5 asm ("a5") = (uint64)(arg5);
    8020acce:	4781                	li	a5,0
	register uint64 a6 asm ("a6") = (uint64)(fid);
    8020acd0:	4801                	li	a6,0
	register uint64 a7 asm ("a7") = (uint64)(ext);
    8020acd2:	544958b7          	lui	a7,0x54495
    8020acd6:	d4588893          	addi	a7,a7,-699 # 54494d45 <_entry-0x2bd6b2bb>
	asm volatile ("ecall"
    8020acda:	00000073          	ecall
}
    8020acde:	6422                	ld	s0,8(sp)
    8020ace0:	0141                	addi	sp,sp,16
    8020ace2:	8082                	ret

000000008020ace4 <timer_tick>:

void timer_tick() {
    8020ace4:	1101                	addi	sp,sp,-32
    8020ace6:	ec06                	sd	ra,24(sp)
    8020ace8:	e822                	sd	s0,16(sp)
    8020acea:	e426                	sd	s1,8(sp)
    8020acec:	1000                	addi	s0,sp,32
    acquire(&tickslock);
    8020acee:	05163497          	auipc	s1,0x5163
    8020acf2:	42a48493          	addi	s1,s1,1066 # 8536e118 <tickslock>
    8020acf6:	8526                	mv	a0,s1
    8020acf8:	ffffe097          	auipc	ra,0xffffe
    8020acfc:	1e2080e7          	jalr	482(ra) # 80208eda <acquire>
    ticks++;
    8020ad00:	05163517          	auipc	a0,0x5163
    8020ad04:	43050513          	addi	a0,a0,1072 # 8536e130 <ticks>
    8020ad08:	411c                	lw	a5,0(a0)
    8020ad0a:	2785                	addiw	a5,a5,1
    8020ad0c:	c11c                	sw	a5,0(a0)
    wakeup(&ticks);
    8020ad0e:	ffff7097          	auipc	ra,0xffff7
    8020ad12:	13a080e7          	jalr	314(ra) # 80201e48 <wakeup>
    release(&tickslock);
    8020ad16:	8526                	mv	a0,s1
    8020ad18:	ffffe097          	auipc	ra,0xffffe
    8020ad1c:	216080e7          	jalr	534(ra) # 80208f2e <release>
    set_next_timeout();
    8020ad20:	00000097          	auipc	ra,0x0
    8020ad24:	f92080e7          	jalr	-110(ra) # 8020acb2 <set_next_timeout>
}
    8020ad28:	60e2                	ld	ra,24(sp)
    8020ad2a:	6442                	ld	s0,16(sp)
    8020ad2c:	64a2                	ld	s1,8(sp)
    8020ad2e:	6105                	addi	sp,sp,32
    8020ad30:	8082                	ret

000000008020ad32 <get_ticks>:

uint64 get_ticks()
{
    8020ad32:	1101                	addi	sp,sp,-32
    8020ad34:	ec06                	sd	ra,24(sp)
    8020ad36:	e822                	sd	s0,16(sp)
    8020ad38:	e426                	sd	s1,8(sp)
    8020ad3a:	e04a                	sd	s2,0(sp)
    8020ad3c:	1000                	addi	s0,sp,32
    acquire(&tickslock);
    8020ad3e:	05163497          	auipc	s1,0x5163
    8020ad42:	3da48493          	addi	s1,s1,986 # 8536e118 <tickslock>
    8020ad46:	8526                	mv	a0,s1
    8020ad48:	ffffe097          	auipc	ra,0xffffe
    8020ad4c:	192080e7          	jalr	402(ra) # 80208eda <acquire>
    uint64 ret = ticks;
    8020ad50:	05163917          	auipc	s2,0x5163
    8020ad54:	3e096903          	lwu	s2,992(s2) # 8536e130 <ticks>
    release(&tickslock);
    8020ad58:	8526                	mv	a0,s1
    8020ad5a:	ffffe097          	auipc	ra,0xffffe
    8020ad5e:	1d4080e7          	jalr	468(ra) # 80208f2e <release>
    return ret;
}
    8020ad62:	854a                	mv	a0,s2
    8020ad64:	60e2                	ld	ra,24(sp)
    8020ad66:	6442                	ld	s0,16(sp)
    8020ad68:	64a2                	ld	s1,8(sp)
    8020ad6a:	6902                	ld	s2,0(sp)
    8020ad6c:	6105                	addi	sp,sp,32
    8020ad6e:	8082                	ret

000000008020ad70 <get_time_ms>:

uint64 get_time_ms() {
    8020ad70:	1141                	addi	sp,sp,-16
    8020ad72:	e422                	sd	s0,8(sp)
    8020ad74:	0800                	addi	s0,sp,16
    8020ad76:	c0102573          	rdtime	a0
    uint64 time = r_time();
    return time / (TICK_FREQ / MSEC_PER_SEC);
}
    8020ad7a:	3e800793          	li	a5,1000
    8020ad7e:	02f55533          	divu	a0,a0,a5
    8020ad82:	6422                	ld	s0,8(sp)
    8020ad84:	0141                	addi	sp,sp,16
    8020ad86:	8082                	ret

000000008020ad88 <get_time_us>:

uint64 get_time_us() {
    8020ad88:	1141                	addi	sp,sp,-16
    8020ad8a:	e422                	sd	s0,8(sp)
    8020ad8c:	0800                	addi	s0,sp,16
    8020ad8e:	c0102573          	rdtime	a0
    return r_time() * USEC_PER_SEC / TICK_FREQ;
    8020ad92:	000f47b7          	lui	a5,0xf4
    8020ad96:	24078793          	addi	a5,a5,576 # f4240 <_entry-0x8010bdc0>
    8020ad9a:	02f50533          	mul	a0,a0,a5
}
    8020ad9e:	02f55533          	divu	a0,a0,a5
    8020ada2:	6422                	ld	s0,8(sp)
    8020ada4:	0141                	addi	sp,sp,16
    8020ada6:	8082                	ret

000000008020ada8 <get_timeval>:

struct timeval get_timeval(){
    8020ada8:	1101                	addi	sp,sp,-32
    8020adaa:	ec22                	sd	s0,24(sp)
    8020adac:	1000                	addi	s0,sp,32
    8020adae:	c01027f3          	rdtime	a5
   uint64 time = r_time();
   return (struct timeval){
     .sec = time / (TICK_FREQ),
     .usec = time / (TICK_FREQ / MSEC_PER_SEC),
   };
}
    8020adb2:	000f4537          	lui	a0,0xf4
    8020adb6:	24050513          	addi	a0,a0,576 # f4240 <_entry-0x8010bdc0>
    8020adba:	02a7d533          	divu	a0,a5,a0
    8020adbe:	3e800593          	li	a1,1000
    8020adc2:	02b7d5b3          	divu	a1,a5,a1
    8020adc6:	6462                	ld	s0,24(sp)
    8020adc8:	6105                	addi	sp,sp,32
    8020adca:	8082                	ret

000000008020adcc <main>:
}
*/

void
main(unsigned long hartid, unsigned long dtb_pa)
{
    8020adcc:	7139                	addi	sp,sp,-64
    8020adce:	fc06                	sd	ra,56(sp)
    8020add0:	f822                	sd	s0,48(sp)
    8020add2:	f426                	sd	s1,40(sp)
    8020add4:	f04a                	sd	s2,32(sp)
    8020add6:	ec4e                	sd	s3,24(sp)
    8020add8:	e852                	sd	s4,16(sp)
    8020adda:	e456                	sd	s5,8(sp)
    8020addc:	0080                	addi	s0,sp,64
    8020adde:	84aa                	mv	s1,a0
  asm volatile("mv tp, %0" : : "r" (hartid));
    8020ade0:	822a                	mv	tp,a0
  inithartid(hartid);
  booted[hartid]=1;
    8020ade2:	00251713          	slli	a4,a0,0x2
    8020ade6:	05163797          	auipc	a5,0x5163
    8020adea:	35278793          	addi	a5,a5,850 # 8536e138 <booted>
    8020adee:	97ba                	add	a5,a5,a4
    8020adf0:	4705                	li	a4,1
    8020adf2:	c398                	sw	a4,0(a5)
  
  if (__first_boot_magic == 0x5a5a) { /* boot hart not fixed 1 */
    8020adf4:	0100d697          	auipc	a3,0x100d
    8020adf8:	25c6b683          	ld	a3,604(a3) # 81218050 <__first_boot_magic>
    8020adfc:	6799                	lui	a5,0x6
    8020adfe:	a5a78793          	addi	a5,a5,-1446 # 5a5a <_entry-0x801fa5a6>
    started=1;
  }
  else
  {
    // hart 1
    while (started == 0)
    8020ae02:	05163717          	auipc	a4,0x5163
    8020ae06:	39e70713          	addi	a4,a4,926 # 8536e1a0 <started>
  if (__first_boot_magic == 0x5a5a) { /* boot hart not fixed 1 */
    8020ae0a:	04f68563          	beq	a3,a5,8020ae54 <main+0x88>
    while (started == 0)
    8020ae0e:	431c                	lw	a5,0(a4)
    8020ae10:	2781                	sext.w	a5,a5
    8020ae12:	dff5                	beqz	a5,8020ae0e <main+0x42>
    ;
    printf("hart %d enter main()...\n", hartid);
    8020ae14:	85a6                	mv	a1,s1
    8020ae16:	0000a517          	auipc	a0,0xa
    8020ae1a:	11a50513          	addi	a0,a0,282 # 80214f30 <digits+0x408>
    8020ae1e:	ffffe097          	auipc	ra,0xffffe
    8020ae22:	476080e7          	jalr	1142(ra) # 80209294 <printf>
    kvminithart();
    8020ae26:	fffff097          	auipc	ra,0xfffff
    8020ae2a:	4c8080e7          	jalr	1224(ra) # 8020a2ee <kvminithart>
    trapinithart();  // install kernel trap vector, including interrupt handler
    8020ae2e:	00000097          	auipc	ra,0x0
    8020ae32:	260080e7          	jalr	608(ra) # 8020b08e <trapinithart>
    __sync_synchronize();
    8020ae36:	0ff0000f          	fence
  }
  printf("hart %d scheduler!\n", hartid);
    8020ae3a:	85a6                	mv	a1,s1
    8020ae3c:	0000a517          	auipc	a0,0xa
    8020ae40:	11450513          	addi	a0,a0,276 # 80214f50 <digits+0x428>
    8020ae44:	ffffe097          	auipc	ra,0xffffe
    8020ae48:	450080e7          	jalr	1104(ra) # 80209294 <printf>
  scheduler();
    8020ae4c:	ffff7097          	auipc	ra,0xffff7
    8020ae50:	8b6080e7          	jalr	-1866(ra) # 80201702 <scheduler>
    __first_boot_magic = 0;
    8020ae54:	0100d797          	auipc	a5,0x100d
    8020ae58:	1e07be23          	sd	zero,508(a5) # 81218050 <__first_boot_magic>
    cpuinit();
    8020ae5c:	00001097          	auipc	ra,0x1
    8020ae60:	504080e7          	jalr	1284(ra) # 8020c360 <cpuinit>
    printfinit();
    8020ae64:	fffff097          	auipc	ra,0xfffff
    8020ae68:	bb4080e7          	jalr	-1100(ra) # 80209a18 <printfinit>
    printf("hart %d enter main() from %p...\n", hartid,_entry);
    8020ae6c:	ffff5617          	auipc	a2,0xffff5
    8020ae70:	19460613          	addi	a2,a2,404 # 80200000 <_entry>
    8020ae74:	85a6                	mv	a1,s1
    8020ae76:	0000a517          	auipc	a0,0xa
    8020ae7a:	07a50513          	addi	a0,a0,122 # 80214ef0 <digits+0x3c8>
    8020ae7e:	ffffe097          	auipc	ra,0xffffe
    8020ae82:	416080e7          	jalr	1046(ra) # 80209294 <printf>
    8020ae86:	4905                	li	s2,1
	register uint64 a7 asm ("a7") = (uint64)(ext);
    8020ae88:	004859b7          	lui	s3,0x485
    8020ae8c:	34d98993          	addi	s3,s3,845 # 48534d <_entry-0x7fd7acb3>
        printf("cpu#%d state:%d\r\n", i, sbi_hsm_hart_status(i));
    8020ae90:	0000aa97          	auipc	s5,0xa
    8020ae94:	088a8a93          	addi	s5,s5,136 # 80214f18 <digits+0x3f0>
    for(int i = 1; i < NCPU; i++) {
    8020ae98:	4a15                	li	s4,5
    8020ae9a:	a811                	j	8020aeae <main+0xe2>
        printf("cpu#%d state:%d\r\n", i, sbi_hsm_hart_status(i));
    8020ae9c:	859a                	mv	a1,t1
    8020ae9e:	8556                	mv	a0,s5
    8020aea0:	ffffe097          	auipc	ra,0xffffe
    8020aea4:	3f4080e7          	jalr	1012(ra) # 80209294 <printf>
    for(int i = 1; i < NCPU; i++) {
    8020aea8:	0905                	addi	s2,s2,1
    8020aeaa:	03490463          	beq	s2,s4,8020aed2 <main+0x106>
    8020aeae:	0009031b          	sext.w	t1,s2
	register uint64 a0 asm ("a0") = (uint64)(arg0);
    8020aeb2:	854a                	mv	a0,s2
	register uint64 a1 asm ("a1") = (uint64)(arg1);
    8020aeb4:	4581                	li	a1,0
	register uint64 a2 asm ("a2") = (uint64)(arg2);
    8020aeb6:	4601                	li	a2,0
	register uint64 a3 asm ("a3") = (uint64)(arg3);
    8020aeb8:	4681                	li	a3,0
	register uint64 a4 asm ("a4") = (uint64)(arg4);
    8020aeba:	4701                	li	a4,0
	register uint64 a5 asm ("a5") = (uint64)(arg5);
    8020aebc:	4781                	li	a5,0
	register uint64 a6 asm ("a6") = (uint64)(fid);
    8020aebe:	4809                	li	a6,2
	register uint64 a7 asm ("a7") = (uint64)(ext);
    8020aec0:	88ce                	mv	a7,s3
	asm volatile ("ecall"
    8020aec2:	00000073          	ecall
}

static inline int sbi_hsm_hart_status(unsigned long hart){
    struct sbiret ret;
    ret = a_sbi_ecall(0x48534D, 2, hart, 0, 0, 0, 0, 0);
    return (ret.error != 0 ? (int)ret.error : (int)ret.value);
    8020aec6:	0005861b          	sext.w	a2,a1
    8020aeca:	d969                	beqz	a0,8020ae9c <main+0xd0>
    8020aecc:	0005061b          	sext.w	a2,a0
    8020aed0:	b7f1                	j	8020ae9c <main+0xd0>
    kpminit();
    8020aed2:	fffff097          	auipc	ra,0xfffff
    8020aed6:	c96080e7          	jalr	-874(ra) # 80209b68 <kpminit>
    kmallocinit();
    8020aeda:	fffff097          	auipc	ra,0xfffff
    8020aede:	040080e7          	jalr	64(ra) # 80209f1a <kmallocinit>
    kvminit();       // create kernel page table
    8020aee2:	fffff097          	auipc	ra,0xfffff
    8020aee6:	5be080e7          	jalr	1470(ra) # 8020a4a0 <kvminit>
    kvminithart();   // turn on paging
    8020aeea:	fffff097          	auipc	ra,0xfffff
    8020aeee:	404080e7          	jalr	1028(ra) # 8020a2ee <kvminithart>
    timerinit();     // init a lock for timer
    8020aef2:	00000097          	auipc	ra,0x0
    8020aef6:	d80080e7          	jalr	-640(ra) # 8020ac72 <timerinit>
    trapinithart();  // install kernel trap vector, including interrupt handler
    8020aefa:	00000097          	auipc	ra,0x0
    8020aefe:	194080e7          	jalr	404(ra) # 8020b08e <trapinithart>
    procinit();
    8020af02:	ffff6097          	auipc	ra,0xffff6
    8020af06:	3ca080e7          	jalr	970(ra) # 802012cc <procinit>
    plicinit();
    8020af0a:	00000097          	auipc	ra,0x0
    8020af0e:	ca0080e7          	jalr	-864(ra) # 8020abaa <plicinit>
    binit();
    8020af12:	ffff5097          	auipc	ra,0xffff5
    8020af16:	12a080e7          	jalr	298(ra) # 8020003c <binit>
    disk_init();
    8020af1a:	ffff6097          	auipc	ra,0xffff6
    8020af1e:	dec080e7          	jalr	-532(ra) # 80200d06 <disk_init>
    fs_init();
    8020af22:	ffff8097          	auipc	ra,0xffff8
    8020af26:	042080e7          	jalr	66(ra) # 80202f64 <fs_init>
    logbufinit();
    8020af2a:	00005097          	auipc	ra,0x5
    8020af2e:	71e080e7          	jalr	1822(ra) # 80210648 <logbufinit>
    devinit();
    8020af32:	ffffd097          	auipc	ra,0xffffd
    8020af36:	5ba080e7          	jalr	1466(ra) # 802084ec <devinit>
    fileinit();
    8020af3a:	ffffb097          	auipc	ra,0xffffb
    8020af3e:	2a2080e7          	jalr	674(ra) # 802061dc <fileinit>
    netinit();
    8020af42:	ffffa097          	auipc	ra,0xffffa
    8020af46:	53a080e7          	jalr	1338(ra) # 8020547c <netinit>
    userinit(0);
    8020af4a:	4501                	li	a0,0
    8020af4c:	ffff7097          	auipc	ra,0xffff7
    8020af50:	c08080e7          	jalr	-1016(ra) # 80201b54 <userinit>
    userinit(1);
    8020af54:	4505                	li	a0,1
    8020af56:	ffff7097          	auipc	ra,0xffff7
    8020af5a:	bfe080e7          	jalr	-1026(ra) # 80201b54 <userinit>
    __sync_synchronize();
    8020af5e:	0ff0000f          	fence
    for(int i = 1; i < NCPU; i++) {
    8020af62:	05163e17          	auipc	t3,0x5163
    8020af66:	1d6e0e13          	addi	t3,t3,470 # 8536e138 <booted>
    __sync_synchronize();
    8020af6a:	4305                	li	t1,1
          start_hart(i, (uint64)_entry, 0);
    8020af6c:	ffff5f17          	auipc	t5,0xffff5
    8020af70:	094f0f13          	addi	t5,t5,148 # 80200000 <_entry>
	register uint64 a7 asm ("a7") = (uint64)(ext);
    8020af74:	004858b7          	lui	a7,0x485
    8020af78:	34d88893          	addi	a7,a7,845 # 48534d <_entry-0x7fd7acb3>
    for(int i = 1; i < NCPU; i++) {
    8020af7c:	4e95                	li	t4,5
    8020af7e:	a029                	j	8020af88 <main+0x1bc>
    8020af80:	0305                	addi	t1,t1,1
    8020af82:	0e11                	addi	t3,t3,4
    8020af84:	03d30063          	beq	t1,t4,8020afa4 <main+0x1d8>
        if(hartid!=i&&booted[i]==0){
    8020af88:	fe648ce3          	beq	s1,t1,8020af80 <main+0x1b4>
    8020af8c:	004e2783          	lw	a5,4(t3)
    8020af90:	fbe5                	bnez	a5,8020af80 <main+0x1b4>
	register uint64 a0 asm ("a0") = (uint64)(arg0);
    8020af92:	851a                	mv	a0,t1
	register uint64 a1 asm ("a1") = (uint64)(arg1);
    8020af94:	85fa                	mv	a1,t5
	register uint64 a2 asm ("a2") = (uint64)(arg2);
    8020af96:	4601                	li	a2,0
	register uint64 a3 asm ("a3") = (uint64)(arg3);
    8020af98:	4681                	li	a3,0
	register uint64 a4 asm ("a4") = (uint64)(arg4);
    8020af9a:	4701                	li	a4,0
	register uint64 a6 asm ("a6") = (uint64)(fid);
    8020af9c:	4801                	li	a6,0
	asm volatile ("ecall"
    8020af9e:	00000073          	ecall
}
    8020afa2:	bff9                	j	8020af80 <main+0x1b4>
    started=1;
    8020afa4:	4785                	li	a5,1
    8020afa6:	05163717          	auipc	a4,0x5163
    8020afaa:	1ef72d23          	sw	a5,506(a4) # 8536e1a0 <started>
    8020afae:	b571                	j	8020ae3a <main+0x6e>

000000008020afb0 <__get_boot_hartid>:
}

int
__get_boot_hartid(int a0)
{
    8020afb0:	1141                	addi	sp,sp,-16
    8020afb2:	e422                	sd	s0,8(sp)
    8020afb4:	0800                	addi	s0,sp,16
    8020afb6:	8eaa                	mv	t4,a0
    8020afb8:	4301                	li	t1,0
	register uint64 a7 asm ("a7") = (uint64)(ext);
    8020afba:	004858b7          	lui	a7,0x485
    8020afbe:	34d88893          	addi	a7,a7,845 # 48534d <_entry-0x7fd7acb3>
    int i;
    for (i = 0; i < 5; i++)
    8020afc2:	4e15                	li	t3,5
    8020afc4:	a029                	j	8020afce <__get_boot_hartid+0x1e>
    {
        if (sbi_hsm_hart_status(i) == 0)
    8020afc6:	c585                	beqz	a1,8020afee <__get_boot_hartid+0x3e>
    for (i = 0; i < 5; i++)
    8020afc8:	0305                	addi	t1,t1,1
    8020afca:	03c30363          	beq	t1,t3,8020aff0 <__get_boot_hartid+0x40>
    8020afce:	00030f1b          	sext.w	t5,t1
	register uint64 a0 asm ("a0") = (uint64)(arg0);
    8020afd2:	851a                	mv	a0,t1
	register uint64 a1 asm ("a1") = (uint64)(arg1);
    8020afd4:	4581                	li	a1,0
	register uint64 a2 asm ("a2") = (uint64)(arg2);
    8020afd6:	4601                	li	a2,0
	register uint64 a3 asm ("a3") = (uint64)(arg3);
    8020afd8:	4681                	li	a3,0
	register uint64 a4 asm ("a4") = (uint64)(arg4);
    8020afda:	4701                	li	a4,0
	register uint64 a5 asm ("a5") = (uint64)(arg5);
    8020afdc:	4781                	li	a5,0
	register uint64 a6 asm ("a6") = (uint64)(fid);
    8020afde:	4809                	li	a6,2
	asm volatile ("ecall"
    8020afe0:	00000073          	ecall
    return (ret.error != 0 ? (int)ret.error : (int)ret.value);
    8020afe4:	2581                	sext.w	a1,a1
    8020afe6:	d165                	beqz	a0,8020afc6 <__get_boot_hartid+0x16>
    8020afe8:	0005059b          	sext.w	a1,a0
    8020afec:	bfe9                	j	8020afc6 <__get_boot_hartid+0x16>
    8020afee:	8efa                	mv	t4,t5
        {
            return i;
        }
    }
    return a0;
}
    8020aff0:	8576                	mv	a0,t4
    8020aff2:	6422                	ld	s0,8(sp)
    8020aff4:	0141                	addi	sp,sp,16
    8020aff6:	8082                	ret
	...

000000008020b000 <kernelvec>:
    8020b000:	7111                	addi	sp,sp,-256
    8020b002:	e006                	sd	ra,0(sp)
    8020b004:	e40a                	sd	sp,8(sp)
    8020b006:	e80e                	sd	gp,16(sp)
    8020b008:	ec12                	sd	tp,24(sp)
    8020b00a:	f016                	sd	t0,32(sp)
    8020b00c:	f41a                	sd	t1,40(sp)
    8020b00e:	f81e                	sd	t2,48(sp)
    8020b010:	fc22                	sd	s0,56(sp)
    8020b012:	e0a6                	sd	s1,64(sp)
    8020b014:	e4aa                	sd	a0,72(sp)
    8020b016:	e8ae                	sd	a1,80(sp)
    8020b018:	ecb2                	sd	a2,88(sp)
    8020b01a:	f0b6                	sd	a3,96(sp)
    8020b01c:	f4ba                	sd	a4,104(sp)
    8020b01e:	f8be                	sd	a5,112(sp)
    8020b020:	fcc2                	sd	a6,120(sp)
    8020b022:	e146                	sd	a7,128(sp)
    8020b024:	e54a                	sd	s2,136(sp)
    8020b026:	e94e                	sd	s3,144(sp)
    8020b028:	ed52                	sd	s4,152(sp)
    8020b02a:	f156                	sd	s5,160(sp)
    8020b02c:	f55a                	sd	s6,168(sp)
    8020b02e:	f95e                	sd	s7,176(sp)
    8020b030:	fd62                	sd	s8,184(sp)
    8020b032:	e1e6                	sd	s9,192(sp)
    8020b034:	e5ea                	sd	s10,200(sp)
    8020b036:	e9ee                	sd	s11,208(sp)
    8020b038:	edf2                	sd	t3,216(sp)
    8020b03a:	f1f6                	sd	t4,224(sp)
    8020b03c:	f5fa                	sd	t5,232(sp)
    8020b03e:	f9fe                	sd	t6,240(sp)
    8020b040:	184000ef          	jal	ra,8020b1c4 <kerneltrap>
    8020b044:	6082                	ld	ra,0(sp)
    8020b046:	6122                	ld	sp,8(sp)
    8020b048:	61c2                	ld	gp,16(sp)
    8020b04a:	7282                	ld	t0,32(sp)
    8020b04c:	7322                	ld	t1,40(sp)
    8020b04e:	73c2                	ld	t2,48(sp)
    8020b050:	7462                	ld	s0,56(sp)
    8020b052:	6486                	ld	s1,64(sp)
    8020b054:	6526                	ld	a0,72(sp)
    8020b056:	65c6                	ld	a1,80(sp)
    8020b058:	6666                	ld	a2,88(sp)
    8020b05a:	7686                	ld	a3,96(sp)
    8020b05c:	7726                	ld	a4,104(sp)
    8020b05e:	77c6                	ld	a5,112(sp)
    8020b060:	7866                	ld	a6,120(sp)
    8020b062:	688a                	ld	a7,128(sp)
    8020b064:	692a                	ld	s2,136(sp)
    8020b066:	69ca                	ld	s3,144(sp)
    8020b068:	6a6a                	ld	s4,152(sp)
    8020b06a:	7a8a                	ld	s5,160(sp)
    8020b06c:	7b2a                	ld	s6,168(sp)
    8020b06e:	7bca                	ld	s7,176(sp)
    8020b070:	7c6a                	ld	s8,184(sp)
    8020b072:	6c8e                	ld	s9,192(sp)
    8020b074:	6d2e                	ld	s10,200(sp)
    8020b076:	6dce                	ld	s11,208(sp)
    8020b078:	6e6e                	ld	t3,216(sp)
    8020b07a:	7e8e                	ld	t4,224(sp)
    8020b07c:	7f2e                	ld	t5,232(sp)
    8020b07e:	7fce                	ld	t6,240(sp)
    8020b080:	6111                	addi	sp,sp,256
    8020b082:	10200073          	sret
	...

000000008020b08e <trapinithart>:
// }

// set up to take exceptions and traps while in the kernel.
void
trapinithart(void)
{
    8020b08e:	1141                	addi	sp,sp,-16
    8020b090:	e406                	sd	ra,8(sp)
    8020b092:	e022                	sd	s0,0(sp)
    8020b094:	0800                	addi	s0,sp,16
  asm volatile("csrw stvec, %0" : : "r" (x));
    8020b096:	00000797          	auipc	a5,0x0
    8020b09a:	f6a78793          	addi	a5,a5,-150 # 8020b000 <kernelvec>
    8020b09e:	10579073          	csrw	stvec,a5
  asm volatile("csrr %0, sstatus" : "=r" (x) );
    8020b0a2:	100027f3          	csrr	a5,sstatus
  w_stvec((uint64)kernelvec);
  w_sstatus(r_sstatus() | SSTATUS_SIE);
    8020b0a6:	0027e793          	ori	a5,a5,2
  asm volatile("csrw sstatus, %0" : : "r" (x));
    8020b0aa:	10079073          	csrw	sstatus,a5
  asm volatile("csrr %0, sie" : "=r" (x) );
    8020b0ae:	104027f3          	csrr	a5,sie
  // enable supervisor-mode timer interrupts.
  w_sie(r_sie() | SIE_SEIE | SIE_SSIE | SIE_STIE);
    8020b0b2:	2227e793          	ori	a5,a5,546
  asm volatile("csrw sie, %0" : : "r" (x));
    8020b0b6:	10479073          	csrw	sie,a5
  set_next_timeout();
    8020b0ba:	00000097          	auipc	ra,0x0
    8020b0be:	bf8080e7          	jalr	-1032(ra) # 8020acb2 <set_next_timeout>
  __debug_info("trapinithart\n");
    8020b0c2:	0000a517          	auipc	a0,0xa
    8020b0c6:	ea650513          	addi	a0,a0,-346 # 80214f68 <digits+0x440>
    8020b0ca:	ffffe097          	auipc	ra,0xffffe
    8020b0ce:	3e0080e7          	jalr	992(ra) # 802094aa <__debug_info>
}
    8020b0d2:	60a2                	ld	ra,8(sp)
    8020b0d4:	6402                	ld	s0,0(sp)
    8020b0d6:	0141                	addi	sp,sp,16
    8020b0d8:	8082                	ret

000000008020b0da <usertrapret>:
  usertrapret();
}


void
usertrapret(){
    8020b0da:	1141                	addi	sp,sp,-16
    8020b0dc:	e406                	sd	ra,8(sp)
    8020b0de:	e022                	sd	s0,0(sp)
    8020b0e0:	0800                	addi	s0,sp,16
  struct proc *p = myproc();
    8020b0e2:	00001097          	auipc	ra,0x1
    8020b0e6:	2d0080e7          	jalr	720(ra) # 8020c3b2 <myproc>
  asm volatile("csrr %0, sstatus" : "=r" (x) );
    8020b0ea:	100027f3          	csrr	a5,sstatus
  w_sstatus(r_sstatus() & ~SSTATUS_SIE);
    8020b0ee:	9bf5                	andi	a5,a5,-3
  asm volatile("csrw sstatus, %0" : : "r" (x));
    8020b0f0:	10079073          	csrw	sstatus,a5
  // we're about to switch the destination of traps from
  // kerneltrap() to usertrap(), so turn off interrupts until
  // we're back in user space, where usertrap() is correct.
  intr_off();
  // send syscalls, interrupts, and exceptions to trampoline.S
  w_stvec(TRAMPOLINE + (uservec - trampoline));
    8020b0f4:	00007617          	auipc	a2,0x7
    8020b0f8:	f0c60613          	addi	a2,a2,-244 # 80212000 <_trampoline>
    8020b0fc:	00007697          	auipc	a3,0x7
    8020b100:	f0468693          	addi	a3,a3,-252 # 80212000 <_trampoline>
    8020b104:	8e91                	sub	a3,a3,a2
    8020b106:	040007b7          	lui	a5,0x4000
    8020b10a:	17fd                	addi	a5,a5,-1
    8020b10c:	07b2                	slli	a5,a5,0xc
    8020b10e:	96be                	add	a3,a3,a5
  asm volatile("csrw stvec, %0" : : "r" (x));
    8020b110:	10569073          	csrw	stvec,a3

  // set up trapframe values that uservec will need when
  // the process next re-enters the kernel.
  p->trapframe->kernel_satp = r_satp();         // kernel page table
    8020b114:	7538                	ld	a4,104(a0)
  asm volatile("csrr %0, satp" : "=r" (x) );
    8020b116:	180026f3          	csrr	a3,satp
    8020b11a:	e314                	sd	a3,0(a4)
  p->trapframe->kernel_sp = p->kstack + PGSIZE; // process's kernel stack
    8020b11c:	7538                	ld	a4,104(a0)
    8020b11e:	6934                	ld	a3,80(a0)
    8020b120:	6585                	lui	a1,0x1
    8020b122:	96ae                	add	a3,a3,a1
    8020b124:	e714                	sd	a3,8(a4)
  p->trapframe->kernel_trap = (uint64)usertrap;
    8020b126:	7538                	ld	a4,104(a0)
    8020b128:	00000697          	auipc	a3,0x0
    8020b12c:	42668693          	addi	a3,a3,1062 # 8020b54e <usertrap>
    8020b130:	eb14                	sd	a3,16(a4)
  p->trapframe->kernel_hartid = r_tp();         // hartid for cpuid()
    8020b132:	7538                	ld	a4,104(a0)
  asm volatile("mv %0, tp" : "=r" (x) );
    8020b134:	8692                	mv	a3,tp
    8020b136:	f314                	sd	a3,32(a4)
  asm volatile("csrr %0, sstatus" : "=r" (x) );
    8020b138:	100026f3          	csrr	a3,sstatus
  // set up the registers that trampoline.S's sret will use
  // to get to user space.
  
  // set S Previous Privilege mode to User.
  unsigned long x = r_sstatus();
  x &= ~SSTATUS_SPP; // clear SPP to 0 for user mode
    8020b13c:	eff6f693          	andi	a3,a3,-257
  x |= SSTATUS_SPIE; // enable interrupts in user mode
    8020b140:	0206e693          	ori	a3,a3,32
  asm volatile("csrw sstatus, %0" : : "r" (x));
    8020b144:	10069073          	csrw	sstatus,a3
  w_sstatus(x);

  // set S Exception Program Counter to the saved user pc.
  w_sepc(p->trapframe->epc);
    8020b148:	7538                	ld	a4,104(a0)
  asm volatile("csrw sepc, %0" : : "r" (x));
    8020b14a:	6f18                	ld	a4,24(a4)
    8020b14c:	14171073          	csrw	sepc,a4

  // tell trampoline.S the user page table to switch to.
  // printf("[usertrapret]p->pagetable: %p\n", p->pagetable);
  uint64 satp = MAKE_SATP(p->pagetable);
    8020b150:	712c                	ld	a1,96(a0)
    8020b152:	81b1                	srli	a1,a1,0xc

  // jump to trampoline.S at the top of memory, which 
  // switches to the user page table, restores user registers,
  // and switches to user mode with sret.

  uint64 fn = TRAMPOLINE + (userret - trampoline);
    8020b154:	00007717          	auipc	a4,0x7
    8020b158:	f3c70713          	addi	a4,a4,-196 # 80212090 <userret>
    8020b15c:	8f11                	sub	a4,a4,a2
    8020b15e:	97ba                	add	a5,a5,a4
  
  ((void (*)(uint64,uint64))fn)(TRAPFRAME, satp);
    8020b160:	577d                	li	a4,-1
    8020b162:	177e                	slli	a4,a4,0x3f
    8020b164:	8dd9                	or	a1,a1,a4
    8020b166:	7ffff537          	lui	a0,0x7ffff
    8020b16a:	9782                	jalr	a5
}
    8020b16c:	60a2                	ld	ra,8(sp)
    8020b16e:	6402                	ld	s0,0(sp)
    8020b170:	0141                	addi	sp,sp,16
    8020b172:	8082                	ret

000000008020b174 <devintr>:
// Check if it's an external/software interrupt, 
// and handle it. 
// returns  2 if timer interrupt, 
//          1 if other device, 
//          0 if not recognized. 
int devintr(void) {
    8020b174:	1141                	addi	sp,sp,-16
    8020b176:	e406                	sd	ra,8(sp)
    8020b178:	e022                	sd	s0,0(sp)
    8020b17a:	0800                	addi	s0,sp,16
  asm volatile("csrr %0, scause" : "=r" (x) );
    8020b17c:	14202773          	csrr	a4,scause
	uint64 scause = r_scause();
	//printf("devintr scause:%p\n",scause);

	// handle external interrupt 
	if ((0x8000000000000000L & scause) && 9 == (scause & 0xff)) 
    8020b180:	00074c63          	bltz	a4,8020b198 <devintr+0x24>
		sbi_set_mie();
		#endif 

		return 1;
	}
	else if (0x8000000000000005L == scause) {
    8020b184:	57fd                	li	a5,-1
    8020b186:	17fe                	slli	a5,a5,0x3f
    8020b188:	0795                	addi	a5,a5,5
		timer_tick();
                //proc_tick();
		return 2;
	}
	else { return 0;}
    8020b18a:	4501                	li	a0,0
	else if (0x8000000000000005L == scause) {
    8020b18c:	02f70663          	beq	a4,a5,8020b1b8 <devintr+0x44>
}
    8020b190:	60a2                	ld	ra,8(sp)
    8020b192:	6402                	ld	s0,0(sp)
    8020b194:	0141                	addi	sp,sp,16
    8020b196:	8082                	ret
	if ((0x8000000000000000L & scause) && 9 == (scause & 0xff)) 
    8020b198:	0ff77793          	andi	a5,a4,255
    8020b19c:	46a5                	li	a3,9
    8020b19e:	fed793e3          	bne	a5,a3,8020b184 <devintr+0x10>
		printf("irq:%d\n",irq);
    8020b1a2:	4581                	li	a1,0
    8020b1a4:	0000a517          	auipc	a0,0xa
    8020b1a8:	dd450513          	addi	a0,a0,-556 # 80214f78 <digits+0x450>
    8020b1ac:	ffffe097          	auipc	ra,0xffffe
    8020b1b0:	0e8080e7          	jalr	232(ra) # 80209294 <printf>
		return 1;
    8020b1b4:	4505                	li	a0,1
    8020b1b6:	bfe9                	j	8020b190 <devintr+0x1c>
		timer_tick();
    8020b1b8:	00000097          	auipc	ra,0x0
    8020b1bc:	b2c080e7          	jalr	-1236(ra) # 8020ace4 <timer_tick>
		return 2;
    8020b1c0:	4509                	li	a0,2
    8020b1c2:	b7f9                	j	8020b190 <devintr+0x1c>

000000008020b1c4 <kerneltrap>:
kerneltrap() {
    8020b1c4:	7179                	addi	sp,sp,-48
    8020b1c6:	f406                	sd	ra,40(sp)
    8020b1c8:	f022                	sd	s0,32(sp)
    8020b1ca:	ec26                	sd	s1,24(sp)
    8020b1cc:	e84a                	sd	s2,16(sp)
    8020b1ce:	e44e                	sd	s3,8(sp)
    8020b1d0:	1800                	addi	s0,sp,48
  asm volatile("csrr %0, sepc" : "=r" (x) );
    8020b1d2:	14102973          	csrr	s2,sepc
  asm volatile("csrr %0, sstatus" : "=r" (x) );
    8020b1d6:	100024f3          	csrr	s1,sstatus
  asm volatile("csrr %0, scause" : "=r" (x) );
    8020b1da:	142029f3          	csrr	s3,scause
  if((sstatus & SSTATUS_SPP) == 0)
    8020b1de:	1004f793          	andi	a5,s1,256
    8020b1e2:	cb85                	beqz	a5,8020b212 <kerneltrap+0x4e>
  asm volatile("csrr %0, sstatus" : "=r" (x) );
    8020b1e4:	100027f3          	csrr	a5,sstatus
  return (x & SSTATUS_SIE) != 0;
    8020b1e8:	8b89                	andi	a5,a5,2
  if(intr_get() != 0)
    8020b1ea:	ef85                	bnez	a5,8020b222 <kerneltrap+0x5e>
  if((which_dev = devintr()) == 0){
    8020b1ec:	00000097          	auipc	ra,0x0
    8020b1f0:	f88080e7          	jalr	-120(ra) # 8020b174 <devintr>
    8020b1f4:	cd1d                	beqz	a0,8020b232 <kerneltrap+0x6e>
  if(which_dev == 2 && myproc() != 0 && myproc()->state == RUNNING) {
    8020b1f6:	4789                	li	a5,2
    8020b1f8:	08f50b63          	beq	a0,a5,8020b28e <kerneltrap+0xca>
  asm volatile("csrw sepc, %0" : : "r" (x));
    8020b1fc:	14191073          	csrw	sepc,s2
  asm volatile("csrw sstatus, %0" : : "r" (x));
    8020b200:	10049073          	csrw	sstatus,s1
}
    8020b204:	70a2                	ld	ra,40(sp)
    8020b206:	7402                	ld	s0,32(sp)
    8020b208:	64e2                	ld	s1,24(sp)
    8020b20a:	6942                	ld	s2,16(sp)
    8020b20c:	69a2                	ld	s3,8(sp)
    8020b20e:	6145                	addi	sp,sp,48
    8020b210:	8082                	ret
    panic("kerneltrap: not from supervisor mode");
    8020b212:	0000a517          	auipc	a0,0xa
    8020b216:	d6e50513          	addi	a0,a0,-658 # 80214f80 <digits+0x458>
    8020b21a:	ffffe097          	auipc	ra,0xffffe
    8020b21e:	030080e7          	jalr	48(ra) # 8020924a <panic>
    panic("kerneltrap: interrupts enabled");
    8020b222:	0000a517          	auipc	a0,0xa
    8020b226:	d8650513          	addi	a0,a0,-634 # 80214fa8 <digits+0x480>
    8020b22a:	ffffe097          	auipc	ra,0xffffe
    8020b22e:	020080e7          	jalr	32(ra) # 8020924a <panic>
    printf("\nscause %p\n", scause);
    8020b232:	85ce                	mv	a1,s3
    8020b234:	0000a517          	auipc	a0,0xa
    8020b238:	d9450513          	addi	a0,a0,-620 # 80214fc8 <digits+0x4a0>
    8020b23c:	ffffe097          	auipc	ra,0xffffe
    8020b240:	058080e7          	jalr	88(ra) # 80209294 <printf>
  asm volatile("csrr %0, sepc" : "=r" (x) );
    8020b244:	141025f3          	csrr	a1,sepc
  asm volatile("csrr %0, stval" : "=r" (x) );
    8020b248:	14302673          	csrr	a2,stval
  asm volatile("mv %0, tp" : "=r" (x) );
    8020b24c:	8692                	mv	a3,tp
    printf("sepc=%p stval=%p hart=%d\n", r_sepc(), r_stval(), r_tp());
    8020b24e:	0000a517          	auipc	a0,0xa
    8020b252:	d8a50513          	addi	a0,a0,-630 # 80214fd8 <digits+0x4b0>
    8020b256:	ffffe097          	auipc	ra,0xffffe
    8020b25a:	03e080e7          	jalr	62(ra) # 80209294 <printf>
    struct proc *p = myproc();
    8020b25e:	00001097          	auipc	ra,0x1
    8020b262:	154080e7          	jalr	340(ra) # 8020c3b2 <myproc>
    if (p != 0) {
    8020b266:	cd01                	beqz	a0,8020b27e <kerneltrap+0xba>
      printf("pid: %d, name: %s\n", p->pid, p->name);
    8020b268:	10050613          	addi	a2,a0,256
    8020b26c:	412c                	lw	a1,64(a0)
    8020b26e:	0000a517          	auipc	a0,0xa
    8020b272:	d8a50513          	addi	a0,a0,-630 # 80214ff8 <digits+0x4d0>
    8020b276:	ffffe097          	auipc	ra,0xffffe
    8020b27a:	01e080e7          	jalr	30(ra) # 80209294 <printf>
    panic("kerneltrap");
    8020b27e:	0000a517          	auipc	a0,0xa
    8020b282:	d9250513          	addi	a0,a0,-622 # 80215010 <digits+0x4e8>
    8020b286:	ffffe097          	auipc	ra,0xffffe
    8020b28a:	fc4080e7          	jalr	-60(ra) # 8020924a <panic>
  if(which_dev == 2 && myproc() != 0 && myproc()->state == RUNNING) {
    8020b28e:	00001097          	auipc	ra,0x1
    8020b292:	124080e7          	jalr	292(ra) # 8020c3b2 <myproc>
    8020b296:	d13d                	beqz	a0,8020b1fc <kerneltrap+0x38>
    8020b298:	00001097          	auipc	ra,0x1
    8020b29c:	11a080e7          	jalr	282(ra) # 8020c3b2 <myproc>
    8020b2a0:	5118                	lw	a4,32(a0)
    8020b2a2:	478d                	li	a5,3
    8020b2a4:	f4f71ce3          	bne	a4,a5,8020b1fc <kerneltrap+0x38>
    yield();
    8020b2a8:	ffff7097          	auipc	ra,0xffff7
    8020b2ac:	f16080e7          	jalr	-234(ra) # 802021be <yield>
    8020b2b0:	b7b1                	j	8020b1fc <kerneltrap+0x38>

000000008020b2b2 <handle_excp>:

// be noticed that syscall is not handled here 
int handle_excp(uint64 scause) {
    8020b2b2:	1141                	addi	sp,sp,-16
    8020b2b4:	e406                	sd	ra,8(sp)
    8020b2b6:	e022                	sd	s0,0(sp)
    8020b2b8:	0800                	addi	s0,sp,16
	// later implementation may handle more cases, such as lazy allocation, mmap, etc.
	switch (scause) {
    8020b2ba:	4735                	li	a4,13
    8020b2bc:	02e50263          	beq	a0,a4,8020b2e0 <handle_excp+0x2e>
    8020b2c0:	87aa                	mv	a5,a0
    8020b2c2:	473d                	li	a4,15
    8020b2c4:	5579                	li	a0,-2
    8020b2c6:	00e79963          	bne	a5,a4,8020b2d8 <handle_excp+0x26>
  asm volatile("csrr %0, stval" : "=r" (x) );
    8020b2ca:	143025f3          	csrr	a1,stval
	case EXCP_STORE_PAGE: 
	#ifndef QEMU 
	case EXCP_STORE_ACCESS: 
	#endif 
		return handle_page_fault(1, r_stval());
    8020b2ce:	4505                	li	a0,1
    8020b2d0:	00000097          	auipc	ra,0x0
    8020b2d4:	850080e7          	jalr	-1968(ra) # 8020ab20 <handle_page_fault>
	#endif 
		return handle_page_fault(0, r_stval());
	default: 
    return -2;
	}
}
    8020b2d8:	60a2                	ld	ra,8(sp)
    8020b2da:	6402                	ld	s0,0(sp)
    8020b2dc:	0141                	addi	sp,sp,16
    8020b2de:	8082                	ret
    8020b2e0:	143025f3          	csrr	a1,stval
		return handle_page_fault(0, r_stval());
    8020b2e4:	4501                	li	a0,0
    8020b2e6:	00000097          	auipc	ra,0x0
    8020b2ea:	83a080e7          	jalr	-1990(ra) # 8020ab20 <handle_page_fault>
    8020b2ee:	b7ed                	j	8020b2d8 <handle_excp+0x26>

000000008020b2f0 <trapframedump>:


void trapframedump(struct trapframe *tf)
{
    8020b2f0:	1101                	addi	sp,sp,-32
    8020b2f2:	ec06                	sd	ra,24(sp)
    8020b2f4:	e822                	sd	s0,16(sp)
    8020b2f6:	e426                	sd	s1,8(sp)
    8020b2f8:	1000                	addi	s0,sp,32
    8020b2fa:	84aa                	mv	s1,a0
  printf("a0: %p\t", tf->a0);
    8020b2fc:	792c                	ld	a1,112(a0)
    8020b2fe:	0000a517          	auipc	a0,0xa
    8020b302:	d2250513          	addi	a0,a0,-734 # 80215020 <digits+0x4f8>
    8020b306:	ffffe097          	auipc	ra,0xffffe
    8020b30a:	f8e080e7          	jalr	-114(ra) # 80209294 <printf>
  printf("a1: %p\t", tf->a1);
    8020b30e:	7cac                	ld	a1,120(s1)
    8020b310:	0000a517          	auipc	a0,0xa
    8020b314:	d1850513          	addi	a0,a0,-744 # 80215028 <digits+0x500>
    8020b318:	ffffe097          	auipc	ra,0xffffe
    8020b31c:	f7c080e7          	jalr	-132(ra) # 80209294 <printf>
  printf("a2: %p\t", tf->a2);
    8020b320:	60cc                	ld	a1,128(s1)
    8020b322:	0000a517          	auipc	a0,0xa
    8020b326:	d0e50513          	addi	a0,a0,-754 # 80215030 <digits+0x508>
    8020b32a:	ffffe097          	auipc	ra,0xffffe
    8020b32e:	f6a080e7          	jalr	-150(ra) # 80209294 <printf>
  printf("a3: %p\n", tf->a3);
    8020b332:	64cc                	ld	a1,136(s1)
    8020b334:	0000a517          	auipc	a0,0xa
    8020b338:	d0450513          	addi	a0,a0,-764 # 80215038 <digits+0x510>
    8020b33c:	ffffe097          	auipc	ra,0xffffe
    8020b340:	f58080e7          	jalr	-168(ra) # 80209294 <printf>
  printf("a4: %p\t", tf->a4);
    8020b344:	68cc                	ld	a1,144(s1)
    8020b346:	0000a517          	auipc	a0,0xa
    8020b34a:	cfa50513          	addi	a0,a0,-774 # 80215040 <digits+0x518>
    8020b34e:	ffffe097          	auipc	ra,0xffffe
    8020b352:	f46080e7          	jalr	-186(ra) # 80209294 <printf>
  printf("a5: %p\t", tf->a5);
    8020b356:	6ccc                	ld	a1,152(s1)
    8020b358:	0000a517          	auipc	a0,0xa
    8020b35c:	cf050513          	addi	a0,a0,-784 # 80215048 <digits+0x520>
    8020b360:	ffffe097          	auipc	ra,0xffffe
    8020b364:	f34080e7          	jalr	-204(ra) # 80209294 <printf>
  printf("a6: %p\t", tf->a6);
    8020b368:	70cc                	ld	a1,160(s1)
    8020b36a:	0000a517          	auipc	a0,0xa
    8020b36e:	ce650513          	addi	a0,a0,-794 # 80215050 <digits+0x528>
    8020b372:	ffffe097          	auipc	ra,0xffffe
    8020b376:	f22080e7          	jalr	-222(ra) # 80209294 <printf>
  printf("a7: %p\n", tf->a7);
    8020b37a:	74cc                	ld	a1,168(s1)
    8020b37c:	0000a517          	auipc	a0,0xa
    8020b380:	cdc50513          	addi	a0,a0,-804 # 80215058 <digits+0x530>
    8020b384:	ffffe097          	auipc	ra,0xffffe
    8020b388:	f10080e7          	jalr	-240(ra) # 80209294 <printf>
  printf("t0: %p\t", tf->t0);
    8020b38c:	64ac                	ld	a1,72(s1)
    8020b38e:	0000a517          	auipc	a0,0xa
    8020b392:	cd250513          	addi	a0,a0,-814 # 80215060 <digits+0x538>
    8020b396:	ffffe097          	auipc	ra,0xffffe
    8020b39a:	efe080e7          	jalr	-258(ra) # 80209294 <printf>
  printf("t1: %p\t", tf->t1);
    8020b39e:	68ac                	ld	a1,80(s1)
    8020b3a0:	0000a517          	auipc	a0,0xa
    8020b3a4:	cc850513          	addi	a0,a0,-824 # 80215068 <digits+0x540>
    8020b3a8:	ffffe097          	auipc	ra,0xffffe
    8020b3ac:	eec080e7          	jalr	-276(ra) # 80209294 <printf>
  printf("t2: %p\t", tf->t2);
    8020b3b0:	6cac                	ld	a1,88(s1)
    8020b3b2:	0000a517          	auipc	a0,0xa
    8020b3b6:	cbe50513          	addi	a0,a0,-834 # 80215070 <digits+0x548>
    8020b3ba:	ffffe097          	auipc	ra,0xffffe
    8020b3be:	eda080e7          	jalr	-294(ra) # 80209294 <printf>
  printf("t3: %p\n", tf->t3);
    8020b3c2:	1004b583          	ld	a1,256(s1)
    8020b3c6:	0000a517          	auipc	a0,0xa
    8020b3ca:	cb250513          	addi	a0,a0,-846 # 80215078 <digits+0x550>
    8020b3ce:	ffffe097          	auipc	ra,0xffffe
    8020b3d2:	ec6080e7          	jalr	-314(ra) # 80209294 <printf>
  printf("t4: %p\t", tf->t4);
    8020b3d6:	1084b583          	ld	a1,264(s1)
    8020b3da:	0000a517          	auipc	a0,0xa
    8020b3de:	ca650513          	addi	a0,a0,-858 # 80215080 <digits+0x558>
    8020b3e2:	ffffe097          	auipc	ra,0xffffe
    8020b3e6:	eb2080e7          	jalr	-334(ra) # 80209294 <printf>
  printf("t5: %p\t", tf->t5);
    8020b3ea:	1104b583          	ld	a1,272(s1)
    8020b3ee:	0000a517          	auipc	a0,0xa
    8020b3f2:	c9a50513          	addi	a0,a0,-870 # 80215088 <digits+0x560>
    8020b3f6:	ffffe097          	auipc	ra,0xffffe
    8020b3fa:	e9e080e7          	jalr	-354(ra) # 80209294 <printf>
  printf("t6: %p\t", tf->t6);
    8020b3fe:	1184b583          	ld	a1,280(s1)
    8020b402:	0000a517          	auipc	a0,0xa
    8020b406:	c8e50513          	addi	a0,a0,-882 # 80215090 <digits+0x568>
    8020b40a:	ffffe097          	auipc	ra,0xffffe
    8020b40e:	e8a080e7          	jalr	-374(ra) # 80209294 <printf>
  printf("s0: %p\n", tf->s0);
    8020b412:	70ac                	ld	a1,96(s1)
    8020b414:	0000a517          	auipc	a0,0xa
    8020b418:	c8450513          	addi	a0,a0,-892 # 80215098 <digits+0x570>
    8020b41c:	ffffe097          	auipc	ra,0xffffe
    8020b420:	e78080e7          	jalr	-392(ra) # 80209294 <printf>
  printf("s1: %p\t", tf->s1);
    8020b424:	74ac                	ld	a1,104(s1)
    8020b426:	0000a517          	auipc	a0,0xa
    8020b42a:	c7a50513          	addi	a0,a0,-902 # 802150a0 <digits+0x578>
    8020b42e:	ffffe097          	auipc	ra,0xffffe
    8020b432:	e66080e7          	jalr	-410(ra) # 80209294 <printf>
  printf("s2: %p\t", tf->s2);
    8020b436:	78cc                	ld	a1,176(s1)
    8020b438:	0000a517          	auipc	a0,0xa
    8020b43c:	c7050513          	addi	a0,a0,-912 # 802150a8 <digits+0x580>
    8020b440:	ffffe097          	auipc	ra,0xffffe
    8020b444:	e54080e7          	jalr	-428(ra) # 80209294 <printf>
  printf("s3: %p\t", tf->s3);
    8020b448:	7ccc                	ld	a1,184(s1)
    8020b44a:	0000a517          	auipc	a0,0xa
    8020b44e:	c6650513          	addi	a0,a0,-922 # 802150b0 <digits+0x588>
    8020b452:	ffffe097          	auipc	ra,0xffffe
    8020b456:	e42080e7          	jalr	-446(ra) # 80209294 <printf>
  printf("s4: %p\n", tf->s4);
    8020b45a:	60ec                	ld	a1,192(s1)
    8020b45c:	0000a517          	auipc	a0,0xa
    8020b460:	c5c50513          	addi	a0,a0,-932 # 802150b8 <digits+0x590>
    8020b464:	ffffe097          	auipc	ra,0xffffe
    8020b468:	e30080e7          	jalr	-464(ra) # 80209294 <printf>
  printf("s5: %p\t", tf->s5);
    8020b46c:	64ec                	ld	a1,200(s1)
    8020b46e:	0000a517          	auipc	a0,0xa
    8020b472:	c5250513          	addi	a0,a0,-942 # 802150c0 <digits+0x598>
    8020b476:	ffffe097          	auipc	ra,0xffffe
    8020b47a:	e1e080e7          	jalr	-482(ra) # 80209294 <printf>
  printf("s6: %p\t", tf->s6);
    8020b47e:	68ec                	ld	a1,208(s1)
    8020b480:	0000a517          	auipc	a0,0xa
    8020b484:	c4850513          	addi	a0,a0,-952 # 802150c8 <digits+0x5a0>
    8020b488:	ffffe097          	auipc	ra,0xffffe
    8020b48c:	e0c080e7          	jalr	-500(ra) # 80209294 <printf>
  printf("s7: %p\t", tf->s7);
    8020b490:	6cec                	ld	a1,216(s1)
    8020b492:	0000a517          	auipc	a0,0xa
    8020b496:	c3e50513          	addi	a0,a0,-962 # 802150d0 <digits+0x5a8>
    8020b49a:	ffffe097          	auipc	ra,0xffffe
    8020b49e:	dfa080e7          	jalr	-518(ra) # 80209294 <printf>
  printf("s8: %p\n", tf->s8);
    8020b4a2:	70ec                	ld	a1,224(s1)
    8020b4a4:	0000a517          	auipc	a0,0xa
    8020b4a8:	c3450513          	addi	a0,a0,-972 # 802150d8 <digits+0x5b0>
    8020b4ac:	ffffe097          	auipc	ra,0xffffe
    8020b4b0:	de8080e7          	jalr	-536(ra) # 80209294 <printf>
  printf("s9: %p\t", tf->s9);
    8020b4b4:	74ec                	ld	a1,232(s1)
    8020b4b6:	0000a517          	auipc	a0,0xa
    8020b4ba:	c2a50513          	addi	a0,a0,-982 # 802150e0 <digits+0x5b8>
    8020b4be:	ffffe097          	auipc	ra,0xffffe
    8020b4c2:	dd6080e7          	jalr	-554(ra) # 80209294 <printf>
  printf("s10: %p\t", tf->s10);
    8020b4c6:	78ec                	ld	a1,240(s1)
    8020b4c8:	0000a517          	auipc	a0,0xa
    8020b4cc:	c2050513          	addi	a0,a0,-992 # 802150e8 <digits+0x5c0>
    8020b4d0:	ffffe097          	auipc	ra,0xffffe
    8020b4d4:	dc4080e7          	jalr	-572(ra) # 80209294 <printf>
  printf("s11: %p\t", tf->s11);
    8020b4d8:	7cec                	ld	a1,248(s1)
    8020b4da:	0000a517          	auipc	a0,0xa
    8020b4de:	c1e50513          	addi	a0,a0,-994 # 802150f8 <digits+0x5d0>
    8020b4e2:	ffffe097          	auipc	ra,0xffffe
    8020b4e6:	db2080e7          	jalr	-590(ra) # 80209294 <printf>
  printf("ra: %p\n", tf->ra);
    8020b4ea:	748c                	ld	a1,40(s1)
    8020b4ec:	0000a517          	auipc	a0,0xa
    8020b4f0:	c1c50513          	addi	a0,a0,-996 # 80215108 <digits+0x5e0>
    8020b4f4:	ffffe097          	auipc	ra,0xffffe
    8020b4f8:	da0080e7          	jalr	-608(ra) # 80209294 <printf>
  printf("sp: %p\t", tf->sp);
    8020b4fc:	788c                	ld	a1,48(s1)
    8020b4fe:	0000a517          	auipc	a0,0xa
    8020b502:	c1250513          	addi	a0,a0,-1006 # 80215110 <digits+0x5e8>
    8020b506:	ffffe097          	auipc	ra,0xffffe
    8020b50a:	d8e080e7          	jalr	-626(ra) # 80209294 <printf>
  printf("gp: %p\t", tf->gp);
    8020b50e:	7c8c                	ld	a1,56(s1)
    8020b510:	0000a517          	auipc	a0,0xa
    8020b514:	c0850513          	addi	a0,a0,-1016 # 80215118 <digits+0x5f0>
    8020b518:	ffffe097          	auipc	ra,0xffffe
    8020b51c:	d7c080e7          	jalr	-644(ra) # 80209294 <printf>
  printf("tp: %p\t", tf->tp);
    8020b520:	60ac                	ld	a1,64(s1)
    8020b522:	0000a517          	auipc	a0,0xa
    8020b526:	bfe50513          	addi	a0,a0,-1026 # 80215120 <digits+0x5f8>
    8020b52a:	ffffe097          	auipc	ra,0xffffe
    8020b52e:	d6a080e7          	jalr	-662(ra) # 80209294 <printf>
  printf("epc: %p\n", tf->epc);
    8020b532:	6c8c                	ld	a1,24(s1)
    8020b534:	0000a517          	auipc	a0,0xa
    8020b538:	bf450513          	addi	a0,a0,-1036 # 80215128 <digits+0x600>
    8020b53c:	ffffe097          	auipc	ra,0xffffe
    8020b540:	d58080e7          	jalr	-680(ra) # 80209294 <printf>
}
    8020b544:	60e2                	ld	ra,24(sp)
    8020b546:	6442                	ld	s0,16(sp)
    8020b548:	64a2                	ld	s1,8(sp)
    8020b54a:	6105                	addi	sp,sp,32
    8020b54c:	8082                	ret

000000008020b54e <usertrap>:
{
    8020b54e:	7179                	addi	sp,sp,-48
    8020b550:	f406                	sd	ra,40(sp)
    8020b552:	f022                	sd	s0,32(sp)
    8020b554:	ec26                	sd	s1,24(sp)
    8020b556:	e84a                	sd	s2,16(sp)
    8020b558:	e44e                	sd	s3,8(sp)
    8020b55a:	1800                	addi	s0,sp,48
  asm volatile("csrr %0, sstatus" : "=r" (x) );
    8020b55c:	100027f3          	csrr	a5,sstatus
  if((r_sstatus() & SSTATUS_SPP) != 0)
    8020b560:	1007f793          	andi	a5,a5,256
    8020b564:	efbd                	bnez	a5,8020b5e2 <usertrap+0x94>
  asm volatile("csrw stvec, %0" : : "r" (x));
    8020b566:	00000797          	auipc	a5,0x0
    8020b56a:	a9a78793          	addi	a5,a5,-1382 # 8020b000 <kernelvec>
    8020b56e:	10579073          	csrw	stvec,a5
  struct proc *p = myproc();
    8020b572:	00001097          	auipc	ra,0x1
    8020b576:	e40080e7          	jalr	-448(ra) # 8020c3b2 <myproc>
    8020b57a:	84aa                	mv	s1,a0
  p->trapframe->epc = r_sepc();
    8020b57c:	753c                	ld	a5,104(a0)
  asm volatile("csrr %0, sepc" : "=r" (x) );
    8020b57e:	14102773          	csrr	a4,sepc
    8020b582:	ef98                	sd	a4,24(a5)
  asm volatile("csrr %0, scause" : "=r" (x) );
    8020b584:	142029f3          	csrr	s3,scause
  if(cause == EXCP_ENV_CALL){
    8020b588:	47a1                	li	a5,8
    8020b58a:	06f99a63          	bne	s3,a5,8020b5fe <usertrap+0xb0>
    if(p->killed == SIGTERM)
    8020b58e:	5d18                	lw	a4,56(a0)
    8020b590:	47bd                	li	a5,15
    8020b592:	06f70063          	beq	a4,a5,8020b5f2 <usertrap+0xa4>
    p->trapframe->epc += 4;
    8020b596:	74b8                	ld	a4,104(s1)
    8020b598:	6f1c                	ld	a5,24(a4)
    8020b59a:	0791                	addi	a5,a5,4
    8020b59c:	ef1c                	sd	a5,24(a4)
  asm volatile("csrr %0, sstatus" : "=r" (x) );
    8020b59e:	100027f3          	csrr	a5,sstatus
  w_sstatus(r_sstatus() | SSTATUS_SIE);
    8020b5a2:	0027e793          	ori	a5,a5,2
  asm volatile("csrw sstatus, %0" : : "r" (x));
    8020b5a6:	10079073          	csrw	sstatus,a5
    syscall();
    8020b5aa:	00006097          	auipc	ra,0x6
    8020b5ae:	484080e7          	jalr	1156(ra) # 80211a2e <syscall>
  if (p->killed) {
    8020b5b2:	5c9c                	lw	a5,56(s1)
    8020b5b4:	cf81                	beqz	a5,8020b5cc <usertrap+0x7e>
    8020b5b6:	4901                	li	s2,0
		if (SIGTERM == p->killed)
    8020b5b8:	473d                	li	a4,15
    8020b5ba:	0ae78f63          	beq	a5,a4,8020b678 <usertrap+0x12a>
		sighandle();
    8020b5be:	ffffd097          	auipc	ra,0xffffd
    8020b5c2:	4d2080e7          	jalr	1234(ra) # 80208a90 <sighandle>
  if(which_dev == 2){
    8020b5c6:	4789                	li	a5,2
    8020b5c8:	0ef90063          	beq	s2,a5,8020b6a8 <usertrap+0x15a>
  usertrapret();
    8020b5cc:	00000097          	auipc	ra,0x0
    8020b5d0:	b0e080e7          	jalr	-1266(ra) # 8020b0da <usertrapret>
}
    8020b5d4:	70a2                	ld	ra,40(sp)
    8020b5d6:	7402                	ld	s0,32(sp)
    8020b5d8:	64e2                	ld	s1,24(sp)
    8020b5da:	6942                	ld	s2,16(sp)
    8020b5dc:	69a2                	ld	s3,8(sp)
    8020b5de:	6145                	addi	sp,sp,48
    8020b5e0:	8082                	ret
    panic("usertrap: not from user mode");
    8020b5e2:	0000a517          	auipc	a0,0xa
    8020b5e6:	b5650513          	addi	a0,a0,-1194 # 80215138 <digits+0x610>
    8020b5ea:	ffffe097          	auipc	ra,0xffffe
    8020b5ee:	c60080e7          	jalr	-928(ra) # 8020924a <panic>
      exit(-1);
    8020b5f2:	557d                	li	a0,-1
    8020b5f4:	ffff7097          	auipc	ra,0xffff7
    8020b5f8:	d5c080e7          	jalr	-676(ra) # 80202350 <exit>
    8020b5fc:	bf69                	j	8020b596 <usertrap+0x48>
  else if((which_dev = devintr()) != 0){
    8020b5fe:	00000097          	auipc	ra,0x0
    8020b602:	b76080e7          	jalr	-1162(ra) # 8020b174 <devintr>
    8020b606:	892a                	mv	s2,a0
    8020b608:	c501                	beqz	a0,8020b610 <usertrap+0xc2>
  if (p->killed) {
    8020b60a:	5c9c                	lw	a5,56(s1)
    8020b60c:	dfcd                	beqz	a5,8020b5c6 <usertrap+0x78>
    8020b60e:	b76d                	j	8020b5b8 <usertrap+0x6a>
  else if((ret = handle_excp(cause)) != -2)
    8020b610:	854e                	mv	a0,s3
    8020b612:	00000097          	auipc	ra,0x0
    8020b616:	ca0080e7          	jalr	-864(ra) # 8020b2b2 <handle_excp>
    8020b61a:	57f9                	li	a5,-2
    8020b61c:	00f50b63          	beq	a0,a5,8020b632 <usertrap+0xe4>
    if(ret == -1)
    8020b620:	57fd                	li	a5,-1
    8020b622:	f8f518e3          	bne	a0,a5,8020b5b2 <usertrap+0x64>
      send_signal(SIGSEGV);
    8020b626:	452d                	li	a0,11
    8020b628:	ffffd097          	auipc	ra,0xffffd
    8020b62c:	332080e7          	jalr	818(ra) # 8020895a <send_signal>
    8020b630:	b749                	j	8020b5b2 <usertrap+0x64>
  else if(cause == 3){
    8020b632:	478d                	li	a5,3
    8020b634:	04f98863          	beq	s3,a5,8020b684 <usertrap+0x136>
  asm volatile("csrr %0, scause" : "=r" (x) );
    8020b638:	142025f3          	csrr	a1,scause
  	printf("\nusertrap(): unexpected scause %p pid=%d %s\n", r_scause(), p->pid, p->name);
    8020b63c:	10048693          	addi	a3,s1,256
    8020b640:	40b0                	lw	a2,64(s1)
    8020b642:	0000a517          	auipc	a0,0xa
    8020b646:	b1e50513          	addi	a0,a0,-1250 # 80215160 <digits+0x638>
    8020b64a:	ffffe097          	auipc	ra,0xffffe
    8020b64e:	c4a080e7          	jalr	-950(ra) # 80209294 <printf>
  asm volatile("csrr %0, sepc" : "=r" (x) );
    8020b652:	141025f3          	csrr	a1,sepc
  asm volatile("csrr %0, stval" : "=r" (x) );
    8020b656:	14302673          	csrr	a2,stval
        printf("            sepc=%p stval=%p\n", r_sepc(), r_stval());
    8020b65a:	0000a517          	auipc	a0,0xa
    8020b65e:	b3650513          	addi	a0,a0,-1226 # 80215190 <digits+0x668>
    8020b662:	ffffe097          	auipc	ra,0xffffe
    8020b666:	c32080e7          	jalr	-974(ra) # 80209294 <printf>
        trapframedump(p->trapframe);
    8020b66a:	74a8                	ld	a0,104(s1)
    8020b66c:	00000097          	auipc	ra,0x0
    8020b670:	c84080e7          	jalr	-892(ra) # 8020b2f0 <trapframedump>
        p->killed = SIGTERM;
    8020b674:	47bd                	li	a5,15
    8020b676:	dc9c                	sw	a5,56(s1)
			exit(-1);
    8020b678:	557d                	li	a0,-1
    8020b67a:	ffff7097          	auipc	ra,0xffff7
    8020b67e:	cd6080e7          	jalr	-810(ra) # 80202350 <exit>
    8020b682:	bf35                	j	8020b5be <usertrap+0x70>
    printf("ebreak\n");
    8020b684:	0000a517          	auipc	a0,0xa
    8020b688:	ad450513          	addi	a0,a0,-1324 # 80215158 <digits+0x630>
    8020b68c:	ffffe097          	auipc	ra,0xffffe
    8020b690:	c08080e7          	jalr	-1016(ra) # 80209294 <printf>
    trapframedump(p->trapframe);
    8020b694:	74a8                	ld	a0,104(s1)
    8020b696:	00000097          	auipc	ra,0x0
    8020b69a:	c5a080e7          	jalr	-934(ra) # 8020b2f0 <trapframedump>
    p->trapframe->epc += 2;
    8020b69e:	74b8                	ld	a4,104(s1)
    8020b6a0:	6f1c                	ld	a5,24(a4)
    8020b6a2:	0789                	addi	a5,a5,2
    8020b6a4:	ef1c                	sd	a5,24(a4)
    8020b6a6:	b731                	j	8020b5b2 <usertrap+0x64>
    yield();
    8020b6a8:	ffff7097          	auipc	ra,0xffff7
    8020b6ac:	b16080e7          	jalr	-1258(ra) # 802021be <yield>
    p->ivswtch += 1;
    8020b6b0:	1c84a783          	lw	a5,456(s1)
    8020b6b4:	2785                	addiw	a5,a5,1
    8020b6b6:	1cf4a423          	sw	a5,456(s1)
    8020b6ba:	bf09                	j	8020b5cc <usertrap+0x7e>

000000008020b6bc <copyout>:
int
copyout(pagetable_t pagetable, uint64 dstva, char *src, uint64 len)
{
  uint64 n, va0, pa0;

  while(len > 0){
    8020b6bc:	c6bd                	beqz	a3,8020b72a <copyout+0x6e>
{
    8020b6be:	715d                	addi	sp,sp,-80
    8020b6c0:	e486                	sd	ra,72(sp)
    8020b6c2:	e0a2                	sd	s0,64(sp)
    8020b6c4:	fc26                	sd	s1,56(sp)
    8020b6c6:	f84a                	sd	s2,48(sp)
    8020b6c8:	f44e                	sd	s3,40(sp)
    8020b6ca:	f052                	sd	s4,32(sp)
    8020b6cc:	ec56                	sd	s5,24(sp)
    8020b6ce:	e85a                	sd	s6,16(sp)
    8020b6d0:	e45e                	sd	s7,8(sp)
    8020b6d2:	e062                	sd	s8,0(sp)
    8020b6d4:	0880                	addi	s0,sp,80
    8020b6d6:	8b2a                	mv	s6,a0
    8020b6d8:	8c2e                	mv	s8,a1
    8020b6da:	8a32                	mv	s4,a2
    8020b6dc:	89b6                	mv	s3,a3
    va0 = PGROUNDDOWN(dstva);
    8020b6de:	7bfd                	lui	s7,0xfffff
    pa0 = walkaddr(pagetable, va0);
    if(pa0 == NULL)
      return -1;
    n = PGSIZE - (dstva - va0);
    8020b6e0:	6a85                	lui	s5,0x1
    8020b6e2:	a015                	j	8020b706 <copyout+0x4a>
    if(n > len)
      n = len;
    memmove((void *)(pa0 + (dstva - va0)), src, n);
    8020b6e4:	9562                	add	a0,a0,s8
    8020b6e6:	0004861b          	sext.w	a2,s1
    8020b6ea:	85d2                	mv	a1,s4
    8020b6ec:	41250533          	sub	a0,a0,s2
    8020b6f0:	ffff5097          	auipc	ra,0xffff5
    8020b6f4:	6e4080e7          	jalr	1764(ra) # 80200dd4 <memmove>

    len -= n;
    8020b6f8:	409989b3          	sub	s3,s3,s1
    src += n;
    8020b6fc:	9a26                	add	s4,s4,s1
    dstva = va0 + PGSIZE;
    8020b6fe:	01590c33          	add	s8,s2,s5
  while(len > 0){
    8020b702:	02098263          	beqz	s3,8020b726 <copyout+0x6a>
    va0 = PGROUNDDOWN(dstva);
    8020b706:	017c7933          	and	s2,s8,s7
    pa0 = walkaddr(pagetable, va0);
    8020b70a:	85ca                	mv	a1,s2
    8020b70c:	855a                	mv	a0,s6
    8020b70e:	fffff097          	auipc	ra,0xfffff
    8020b712:	f72080e7          	jalr	-142(ra) # 8020a680 <walkaddr>
    if(pa0 == NULL)
    8020b716:	cd01                	beqz	a0,8020b72e <copyout+0x72>
    n = PGSIZE - (dstva - va0);
    8020b718:	418904b3          	sub	s1,s2,s8
    8020b71c:	94d6                	add	s1,s1,s5
    if(n > len)
    8020b71e:	fc99f3e3          	bgeu	s3,s1,8020b6e4 <copyout+0x28>
    8020b722:	84ce                	mv	s1,s3
    8020b724:	b7c1                	j	8020b6e4 <copyout+0x28>
  }
  return 0;
    8020b726:	4501                	li	a0,0
    8020b728:	a021                	j	8020b730 <copyout+0x74>
    8020b72a:	4501                	li	a0,0
}
    8020b72c:	8082                	ret
      return -1;
    8020b72e:	557d                	li	a0,-1
}
    8020b730:	60a6                	ld	ra,72(sp)
    8020b732:	6406                	ld	s0,64(sp)
    8020b734:	74e2                	ld	s1,56(sp)
    8020b736:	7942                	ld	s2,48(sp)
    8020b738:	79a2                	ld	s3,40(sp)
    8020b73a:	7a02                	ld	s4,32(sp)
    8020b73c:	6ae2                	ld	s5,24(sp)
    8020b73e:	6b42                	ld	s6,16(sp)
    8020b740:	6ba2                	ld	s7,8(sp)
    8020b742:	6c02                	ld	s8,0(sp)
    8020b744:	6161                	addi	sp,sp,80
    8020b746:	8082                	ret

000000008020b748 <copyout2>:

int
copyout2(uint64 dstva, char *src, uint64 len)
{
    8020b748:	7179                	addi	sp,sp,-48
    8020b74a:	f406                	sd	ra,40(sp)
    8020b74c:	f022                	sd	s0,32(sp)
    8020b74e:	ec26                	sd	s1,24(sp)
    8020b750:	e84a                	sd	s2,16(sp)
    8020b752:	e44e                	sd	s3,8(sp)
    8020b754:	1800                	addi	s0,sp,48
    8020b756:	84aa                	mv	s1,a0
    8020b758:	89ae                	mv	s3,a1
    8020b75a:	8932                	mv	s2,a2
  uint64 sz = myproc()->sz;
    8020b75c:	00001097          	auipc	ra,0x1
    8020b760:	c56080e7          	jalr	-938(ra) # 8020c3b2 <myproc>
    8020b764:	6d3c                	ld	a5,88(a0)
  if (dstva + len > sz || dstva >= sz) {
    8020b766:	01248733          	add	a4,s1,s2
    8020b76a:	02e7e463          	bltu	a5,a4,8020b792 <copyout2+0x4a>
    8020b76e:	02f4f463          	bgeu	s1,a5,8020b796 <copyout2+0x4e>
    return -1;
  }
  memmove((void *)dstva, src, len);
    8020b772:	0009061b          	sext.w	a2,s2
    8020b776:	85ce                	mv	a1,s3
    8020b778:	8526                	mv	a0,s1
    8020b77a:	ffff5097          	auipc	ra,0xffff5
    8020b77e:	65a080e7          	jalr	1626(ra) # 80200dd4 <memmove>
  return 0;
    8020b782:	4501                	li	a0,0
}
    8020b784:	70a2                	ld	ra,40(sp)
    8020b786:	7402                	ld	s0,32(sp)
    8020b788:	64e2                	ld	s1,24(sp)
    8020b78a:	6942                	ld	s2,16(sp)
    8020b78c:	69a2                	ld	s3,8(sp)
    8020b78e:	6145                	addi	sp,sp,48
    8020b790:	8082                	ret
    return -1;
    8020b792:	557d                	li	a0,-1
    8020b794:	bfc5                	j	8020b784 <copyout2+0x3c>
    8020b796:	557d                	li	a0,-1
    8020b798:	b7f5                	j	8020b784 <copyout2+0x3c>

000000008020b79a <copyin>:
int
copyin(pagetable_t pagetable, char *dst, uint64 srcva, uint64 len)
{
  uint64 n, va0, pa0;

  while(len > 0){
    8020b79a:	c6bd                	beqz	a3,8020b808 <copyin+0x6e>
{
    8020b79c:	715d                	addi	sp,sp,-80
    8020b79e:	e486                	sd	ra,72(sp)
    8020b7a0:	e0a2                	sd	s0,64(sp)
    8020b7a2:	fc26                	sd	s1,56(sp)
    8020b7a4:	f84a                	sd	s2,48(sp)
    8020b7a6:	f44e                	sd	s3,40(sp)
    8020b7a8:	f052                	sd	s4,32(sp)
    8020b7aa:	ec56                	sd	s5,24(sp)
    8020b7ac:	e85a                	sd	s6,16(sp)
    8020b7ae:	e45e                	sd	s7,8(sp)
    8020b7b0:	e062                	sd	s8,0(sp)
    8020b7b2:	0880                	addi	s0,sp,80
    8020b7b4:	8b2a                	mv	s6,a0
    8020b7b6:	8a2e                	mv	s4,a1
    8020b7b8:	8c32                	mv	s8,a2
    8020b7ba:	89b6                	mv	s3,a3
    va0 = PGROUNDDOWN(srcva);
    8020b7bc:	7bfd                	lui	s7,0xfffff
    pa0 = walkaddr(pagetable, va0);
    if(pa0 == NULL)
      return -1;
    n = PGSIZE - (srcva - va0);
    8020b7be:	6a85                	lui	s5,0x1
    8020b7c0:	a015                	j	8020b7e4 <copyin+0x4a>
    if(n > len)
      n = len;
    memmove(dst, (void *)(pa0 + (srcva - va0)), n);
    8020b7c2:	9562                	add	a0,a0,s8
    8020b7c4:	0004861b          	sext.w	a2,s1
    8020b7c8:	412505b3          	sub	a1,a0,s2
    8020b7cc:	8552                	mv	a0,s4
    8020b7ce:	ffff5097          	auipc	ra,0xffff5
    8020b7d2:	606080e7          	jalr	1542(ra) # 80200dd4 <memmove>

    len -= n;
    8020b7d6:	409989b3          	sub	s3,s3,s1
    dst += n;
    8020b7da:	9a26                	add	s4,s4,s1
    srcva = va0 + PGSIZE;
    8020b7dc:	01590c33          	add	s8,s2,s5
  while(len > 0){
    8020b7e0:	02098263          	beqz	s3,8020b804 <copyin+0x6a>
    va0 = PGROUNDDOWN(srcva);
    8020b7e4:	017c7933          	and	s2,s8,s7
    pa0 = walkaddr(pagetable, va0);
    8020b7e8:	85ca                	mv	a1,s2
    8020b7ea:	855a                	mv	a0,s6
    8020b7ec:	fffff097          	auipc	ra,0xfffff
    8020b7f0:	e94080e7          	jalr	-364(ra) # 8020a680 <walkaddr>
    if(pa0 == NULL)
    8020b7f4:	cd01                	beqz	a0,8020b80c <copyin+0x72>
    n = PGSIZE - (srcva - va0);
    8020b7f6:	418904b3          	sub	s1,s2,s8
    8020b7fa:	94d6                	add	s1,s1,s5
    if(n > len)
    8020b7fc:	fc99f3e3          	bgeu	s3,s1,8020b7c2 <copyin+0x28>
    8020b800:	84ce                	mv	s1,s3
    8020b802:	b7c1                	j	8020b7c2 <copyin+0x28>
  }
  return 0;
    8020b804:	4501                	li	a0,0
    8020b806:	a021                	j	8020b80e <copyin+0x74>
    8020b808:	4501                	li	a0,0
}
    8020b80a:	8082                	ret
      return -1;
    8020b80c:	557d                	li	a0,-1
}
    8020b80e:	60a6                	ld	ra,72(sp)
    8020b810:	6406                	ld	s0,64(sp)
    8020b812:	74e2                	ld	s1,56(sp)
    8020b814:	7942                	ld	s2,48(sp)
    8020b816:	79a2                	ld	s3,40(sp)
    8020b818:	7a02                	ld	s4,32(sp)
    8020b81a:	6ae2                	ld	s5,24(sp)
    8020b81c:	6b42                	ld	s6,16(sp)
    8020b81e:	6ba2                	ld	s7,8(sp)
    8020b820:	6c02                	ld	s8,0(sp)
    8020b822:	6161                	addi	sp,sp,80
    8020b824:	8082                	ret

000000008020b826 <copyin2>:

int
copyin2(char *dst, uint64 srcva, uint64 len)
{
    8020b826:	7179                	addi	sp,sp,-48
    8020b828:	f406                	sd	ra,40(sp)
    8020b82a:	f022                	sd	s0,32(sp)
    8020b82c:	ec26                	sd	s1,24(sp)
    8020b82e:	e84a                	sd	s2,16(sp)
    8020b830:	e44e                	sd	s3,8(sp)
    8020b832:	1800                	addi	s0,sp,48
    8020b834:	89aa                	mv	s3,a0
    8020b836:	84ae                	mv	s1,a1
    8020b838:	8932                	mv	s2,a2
  uint64 sz = myproc()->sz;
    8020b83a:	00001097          	auipc	ra,0x1
    8020b83e:	b78080e7          	jalr	-1160(ra) # 8020c3b2 <myproc>
    8020b842:	6d3c                	ld	a5,88(a0)
  if (srcva + len > sz || srcva >= sz) {
    8020b844:	01248733          	add	a4,s1,s2
    8020b848:	02e7e463          	bltu	a5,a4,8020b870 <copyin2+0x4a>
    8020b84c:	02f4f463          	bgeu	s1,a5,8020b874 <copyin2+0x4e>
    return -1;
  }
  memmove(dst, (void *)srcva, len);
    8020b850:	0009061b          	sext.w	a2,s2
    8020b854:	85a6                	mv	a1,s1
    8020b856:	854e                	mv	a0,s3
    8020b858:	ffff5097          	auipc	ra,0xffff5
    8020b85c:	57c080e7          	jalr	1404(ra) # 80200dd4 <memmove>
  return 0;
    8020b860:	4501                	li	a0,0
}
    8020b862:	70a2                	ld	ra,40(sp)
    8020b864:	7402                	ld	s0,32(sp)
    8020b866:	64e2                	ld	s1,24(sp)
    8020b868:	6942                	ld	s2,16(sp)
    8020b86a:	69a2                	ld	s3,8(sp)
    8020b86c:	6145                	addi	sp,sp,48
    8020b86e:	8082                	ret
    return -1;
    8020b870:	557d                	li	a0,-1
    8020b872:	bfc5                	j	8020b862 <copyin2+0x3c>
    8020b874:	557d                	li	a0,-1
    8020b876:	b7f5                	j	8020b862 <copyin2+0x3c>

000000008020b878 <copyinstr>:
copyinstr(pagetable_t pagetable, char *dst, uint64 srcva, uint64 max)
{
  uint64 n, va0, pa0;
  int got_null = 0;

  while(got_null == 0 && max > 0){
    8020b878:	c6c5                	beqz	a3,8020b920 <copyinstr+0xa8>
{
    8020b87a:	715d                	addi	sp,sp,-80
    8020b87c:	e486                	sd	ra,72(sp)
    8020b87e:	e0a2                	sd	s0,64(sp)
    8020b880:	fc26                	sd	s1,56(sp)
    8020b882:	f84a                	sd	s2,48(sp)
    8020b884:	f44e                	sd	s3,40(sp)
    8020b886:	f052                	sd	s4,32(sp)
    8020b888:	ec56                	sd	s5,24(sp)
    8020b88a:	e85a                	sd	s6,16(sp)
    8020b88c:	e45e                	sd	s7,8(sp)
    8020b88e:	0880                	addi	s0,sp,80
    8020b890:	8a2a                	mv	s4,a0
    8020b892:	8b2e                	mv	s6,a1
    8020b894:	8bb2                	mv	s7,a2
    8020b896:	84b6                	mv	s1,a3
    va0 = PGROUNDDOWN(srcva);
    8020b898:	7afd                	lui	s5,0xfffff
    pa0 = walkaddr(pagetable, va0);
    if(pa0 == NULL)
      return -1;
    n = PGSIZE - (srcva - va0);
    8020b89a:	6985                	lui	s3,0x1
    8020b89c:	a035                	j	8020b8c8 <copyinstr+0x50>
      n = max;

    char *p = (char *) (pa0 + (srcva - va0));
    while(n > 0){
      if(*p == '\0'){
        *dst = '\0';
    8020b89e:	00078023          	sb	zero,0(a5)
    8020b8a2:	4785                	li	a5,1
      dst++;
    }

    srcva = va0 + PGSIZE;
  }
  if(got_null){
    8020b8a4:	0017b793          	seqz	a5,a5
    8020b8a8:	40f00533          	neg	a0,a5
    return 0;
  } else {
    return -1;
  }
}
    8020b8ac:	60a6                	ld	ra,72(sp)
    8020b8ae:	6406                	ld	s0,64(sp)
    8020b8b0:	74e2                	ld	s1,56(sp)
    8020b8b2:	7942                	ld	s2,48(sp)
    8020b8b4:	79a2                	ld	s3,40(sp)
    8020b8b6:	7a02                	ld	s4,32(sp)
    8020b8b8:	6ae2                	ld	s5,24(sp)
    8020b8ba:	6b42                	ld	s6,16(sp)
    8020b8bc:	6ba2                	ld	s7,8(sp)
    8020b8be:	6161                	addi	sp,sp,80
    8020b8c0:	8082                	ret
    srcva = va0 + PGSIZE;
    8020b8c2:	01390bb3          	add	s7,s2,s3
  while(got_null == 0 && max > 0){
    8020b8c6:	c8a9                	beqz	s1,8020b918 <copyinstr+0xa0>
    va0 = PGROUNDDOWN(srcva);
    8020b8c8:	015bf933          	and	s2,s7,s5
    pa0 = walkaddr(pagetable, va0);
    8020b8cc:	85ca                	mv	a1,s2
    8020b8ce:	8552                	mv	a0,s4
    8020b8d0:	fffff097          	auipc	ra,0xfffff
    8020b8d4:	db0080e7          	jalr	-592(ra) # 8020a680 <walkaddr>
    if(pa0 == NULL)
    8020b8d8:	c131                	beqz	a0,8020b91c <copyinstr+0xa4>
    n = PGSIZE - (srcva - va0);
    8020b8da:	41790833          	sub	a6,s2,s7
    8020b8de:	984e                	add	a6,a6,s3
    if(n > max)
    8020b8e0:	0104f363          	bgeu	s1,a6,8020b8e6 <copyinstr+0x6e>
    8020b8e4:	8826                	mv	a6,s1
    char *p = (char *) (pa0 + (srcva - va0));
    8020b8e6:	955e                	add	a0,a0,s7
    8020b8e8:	41250533          	sub	a0,a0,s2
    while(n > 0){
    8020b8ec:	fc080be3          	beqz	a6,8020b8c2 <copyinstr+0x4a>
    8020b8f0:	985a                	add	a6,a6,s6
    8020b8f2:	87da                	mv	a5,s6
      if(*p == '\0'){
    8020b8f4:	41650633          	sub	a2,a0,s6
    8020b8f8:	14fd                	addi	s1,s1,-1
    8020b8fa:	9b26                	add	s6,s6,s1
    8020b8fc:	00f60733          	add	a4,a2,a5
    8020b900:	00074703          	lbu	a4,0(a4)
    8020b904:	df49                	beqz	a4,8020b89e <copyinstr+0x26>
        *dst = *p;
    8020b906:	00e78023          	sb	a4,0(a5)
      --max;
    8020b90a:	40fb04b3          	sub	s1,s6,a5
      dst++;
    8020b90e:	0785                	addi	a5,a5,1
    while(n > 0){
    8020b910:	ff0796e3          	bne	a5,a6,8020b8fc <copyinstr+0x84>
      dst++;
    8020b914:	8b42                	mv	s6,a6
    8020b916:	b775                	j	8020b8c2 <copyinstr+0x4a>
    8020b918:	4781                	li	a5,0
    8020b91a:	b769                	j	8020b8a4 <copyinstr+0x2c>
      return -1;
    8020b91c:	557d                	li	a0,-1
    8020b91e:	b779                	j	8020b8ac <copyinstr+0x34>
  int got_null = 0;
    8020b920:	4781                	li	a5,0
  if(got_null){
    8020b922:	0017b793          	seqz	a5,a5
    8020b926:	40f00533          	neg	a0,a5
}
    8020b92a:	8082                	ret

000000008020b92c <copyinstr2>:

int
copyinstr2(char *dst, uint64 srcva, uint64 max)
{
    8020b92c:	7179                	addi	sp,sp,-48
    8020b92e:	f406                	sd	ra,40(sp)
    8020b930:	f022                	sd	s0,32(sp)
    8020b932:	ec26                	sd	s1,24(sp)
    8020b934:	e84a                	sd	s2,16(sp)
    8020b936:	e44e                	sd	s3,8(sp)
    8020b938:	1800                	addi	s0,sp,48
    8020b93a:	89aa                	mv	s3,a0
    8020b93c:	84ae                	mv	s1,a1
    8020b93e:	8932                	mv	s2,a2
  int got_null = 0;
  uint64 sz = myproc()->sz;
    8020b940:	00001097          	auipc	ra,0x1
    8020b944:	a72080e7          	jalr	-1422(ra) # 8020c3b2 <myproc>
    8020b948:	6d34                	ld	a3,88(a0)
  while(srcva < sz && max > 0){
    8020b94a:	04d4f363          	bgeu	s1,a3,8020b990 <copyinstr2+0x64>
    8020b94e:	04090363          	beqz	s2,8020b994 <copyinstr2+0x68>
    8020b952:	01298633          	add	a2,s3,s2
    8020b956:	8e85                	sub	a3,a3,s1
    8020b958:	96ce                	add	a3,a3,s3
    8020b95a:	87ce                	mv	a5,s3
    char *p = (char *)srcva;
    if(*p == '\0'){
    8020b95c:	413485b3          	sub	a1,s1,s3
    8020b960:	00b78733          	add	a4,a5,a1
    8020b964:	00074703          	lbu	a4,0(a4)
    8020b968:	cb11                	beqz	a4,8020b97c <copyinstr2+0x50>
      *dst = '\0';
      got_null = 1;
      break;
    } else {
      *dst = *p;
    8020b96a:	00e78023          	sb	a4,0(a5)
    }
    --max;
    srcva++;
    dst++;
    8020b96e:	0785                	addi	a5,a5,1
  while(srcva < sz && max > 0){
    8020b970:	02d78463          	beq	a5,a3,8020b998 <copyinstr2+0x6c>
    8020b974:	fec796e3          	bne	a5,a2,8020b960 <copyinstr2+0x34>
  }
  if(got_null){
    return 0;
  } else {
    return -1;
    8020b978:	557d                	li	a0,-1
    8020b97a:	a021                	j	8020b982 <copyinstr2+0x56>
      *dst = '\0';
    8020b97c:	00078023          	sb	zero,0(a5)
    return 0;
    8020b980:	4501                	li	a0,0
  }
}
    8020b982:	70a2                	ld	ra,40(sp)
    8020b984:	7402                	ld	s0,32(sp)
    8020b986:	64e2                	ld	s1,24(sp)
    8020b988:	6942                	ld	s2,16(sp)
    8020b98a:	69a2                	ld	s3,8(sp)
    8020b98c:	6145                	addi	sp,sp,48
    8020b98e:	8082                	ret
    return -1;
    8020b990:	557d                	li	a0,-1
    8020b992:	bfc5                	j	8020b982 <copyinstr2+0x56>
    8020b994:	557d                	li	a0,-1
    8020b996:	b7f5                	j	8020b982 <copyinstr2+0x56>
    8020b998:	557d                	li	a0,-1
    8020b99a:	b7e5                	j	8020b982 <copyinstr2+0x56>

000000008020b99c <zero_out>:
// Copy from kernel to user.
// Copy len bytes from src to virtual address dstva in a given page table.
// Return 0 on success, -1 on error.
int
zero_out(uint64 dstva, uint64 len)
{
    8020b99c:	715d                	addi	sp,sp,-80
    8020b99e:	e486                	sd	ra,72(sp)
    8020b9a0:	e0a2                	sd	s0,64(sp)
    8020b9a2:	fc26                	sd	s1,56(sp)
    8020b9a4:	f84a                	sd	s2,48(sp)
    8020b9a6:	f44e                	sd	s3,40(sp)
    8020b9a8:	f052                	sd	s4,32(sp)
    8020b9aa:	ec56                	sd	s5,24(sp)
    8020b9ac:	e85a                	sd	s6,16(sp)
    8020b9ae:	e45e                	sd	s7,8(sp)
    8020b9b0:	e062                	sd	s8,0(sp)
    8020b9b2:	0880                	addi	s0,sp,80
    8020b9b4:	8c2a                	mv	s8,a0
    8020b9b6:	89ae                	mv	s3,a1
  uint64 n, va0, pa0;
  uint64 ret = 0;
  pagetable_t pagetable = myproc()->pagetable;
    8020b9b8:	00001097          	auipc	ra,0x1
    8020b9bc:	9fa080e7          	jalr	-1542(ra) # 8020c3b2 <myproc>
    8020b9c0:	06053b03          	ld	s6,96(a0)
  while(len > 0){
    8020b9c4:	04098a63          	beqz	s3,8020ba18 <zero_out+0x7c>
  uint64 ret = 0;
    8020b9c8:	4a01                	li	s4,0
    va0 = PGROUNDDOWN(dstva);
    8020b9ca:	7bfd                	lui	s7,0xfffff
    pa0 = walkaddr(pagetable, va0);
    if(pa0 == NULL){
      return ret;
    }
    n = PGSIZE - (dstva - va0);
    8020b9cc:	6a85                	lui	s5,0x1
    8020b9ce:	a02d                	j	8020b9f8 <zero_out+0x5c>
      return ret;
    8020b9d0:	000a051b          	sext.w	a0,s4
    8020b9d4:	a0a9                	j	8020ba1e <zero_out+0x82>
    if(n > len)
      n = len;
    memset((void *)(pa0 + (dstva - va0)), 0, n);
    8020b9d6:	9562                	add	a0,a0,s8
    8020b9d8:	0004861b          	sext.w	a2,s1
    8020b9dc:	4581                	li	a1,0
    8020b9de:	41250533          	sub	a0,a0,s2
    8020b9e2:	ffff5097          	auipc	ra,0xffff5
    8020b9e6:	392080e7          	jalr	914(ra) # 80200d74 <memset>

    len -= n;
    8020b9ea:	409989b3          	sub	s3,s3,s1
    ret += n;
    8020b9ee:	9a26                	add	s4,s4,s1
    dstva = va0 + PGSIZE;
    8020b9f0:	01590c33          	add	s8,s2,s5
  while(len > 0){
    8020b9f4:	02098363          	beqz	s3,8020ba1a <zero_out+0x7e>
    va0 = PGROUNDDOWN(dstva);
    8020b9f8:	017c7933          	and	s2,s8,s7
    pa0 = walkaddr(pagetable, va0);
    8020b9fc:	85ca                	mv	a1,s2
    8020b9fe:	855a                	mv	a0,s6
    8020ba00:	fffff097          	auipc	ra,0xfffff
    8020ba04:	c80080e7          	jalr	-896(ra) # 8020a680 <walkaddr>
    if(pa0 == NULL){
    8020ba08:	d561                	beqz	a0,8020b9d0 <zero_out+0x34>
    n = PGSIZE - (dstva - va0);
    8020ba0a:	418904b3          	sub	s1,s2,s8
    8020ba0e:	94d6                	add	s1,s1,s5
    if(n > len)
    8020ba10:	fc99f3e3          	bgeu	s3,s1,8020b9d6 <zero_out+0x3a>
    8020ba14:	84ce                	mv	s1,s3
    8020ba16:	b7c1                	j	8020b9d6 <zero_out+0x3a>
  uint64 ret = 0;
    8020ba18:	8a4e                	mv	s4,s3
  }

  return ret;
    8020ba1a:	000a051b          	sext.w	a0,s4
}
    8020ba1e:	60a6                	ld	ra,72(sp)
    8020ba20:	6406                	ld	s0,64(sp)
    8020ba22:	74e2                	ld	s1,56(sp)
    8020ba24:	7942                	ld	s2,48(sp)
    8020ba26:	79a2                	ld	s3,40(sp)
    8020ba28:	7a02                	ld	s4,32(sp)
    8020ba2a:	6ae2                	ld	s5,24(sp)
    8020ba2c:	6b42                	ld	s6,16(sp)
    8020ba2e:	6ba2                	ld	s7,8(sp)
    8020ba30:	6c02                	ld	s8,0(sp)
    8020ba32:	6161                	addi	sp,sp,80
    8020ba34:	8082                	ret

000000008020ba36 <either_copyout>:
// Copy to either a user address, or kernel address,
// depending on usr_dst.
// Returns 0 on success, -1 on error.
int
either_copyout(int user_dst, uint64 dst, void *src, uint64 len)
{
    8020ba36:	7179                	addi	sp,sp,-48
    8020ba38:	f406                	sd	ra,40(sp)
    8020ba3a:	f022                	sd	s0,32(sp)
    8020ba3c:	ec26                	sd	s1,24(sp)
    8020ba3e:	e84a                	sd	s2,16(sp)
    8020ba40:	e44e                	sd	s3,8(sp)
    8020ba42:	e052                	sd	s4,0(sp)
    8020ba44:	1800                	addi	s0,sp,48
    8020ba46:	84aa                	mv	s1,a0
    8020ba48:	892e                	mv	s2,a1
    8020ba4a:	89b2                	mv	s3,a2
    8020ba4c:	8a36                	mv	s4,a3
  struct proc *p = myproc();
    8020ba4e:	00001097          	auipc	ra,0x1
    8020ba52:	964080e7          	jalr	-1692(ra) # 8020c3b2 <myproc>
  if(user_dst){
    8020ba56:	c08d                	beqz	s1,8020ba78 <either_copyout+0x42>
    return copyout(p->pagetable, dst, src, len);
    8020ba58:	86d2                	mv	a3,s4
    8020ba5a:	864e                	mv	a2,s3
    8020ba5c:	85ca                	mv	a1,s2
    8020ba5e:	7128                	ld	a0,96(a0)
    8020ba60:	00000097          	auipc	ra,0x0
    8020ba64:	c5c080e7          	jalr	-932(ra) # 8020b6bc <copyout>
  } else {
    memmove((char *)dst, src, len);
    return 0;
  }
}
    8020ba68:	70a2                	ld	ra,40(sp)
    8020ba6a:	7402                	ld	s0,32(sp)
    8020ba6c:	64e2                	ld	s1,24(sp)
    8020ba6e:	6942                	ld	s2,16(sp)
    8020ba70:	69a2                	ld	s3,8(sp)
    8020ba72:	6a02                	ld	s4,0(sp)
    8020ba74:	6145                	addi	sp,sp,48
    8020ba76:	8082                	ret
    memmove((char *)dst, src, len);
    8020ba78:	000a061b          	sext.w	a2,s4
    8020ba7c:	85ce                	mv	a1,s3
    8020ba7e:	854a                	mv	a0,s2
    8020ba80:	ffff5097          	auipc	ra,0xffff5
    8020ba84:	354080e7          	jalr	852(ra) # 80200dd4 <memmove>
    return 0;
    8020ba88:	8526                	mv	a0,s1
    8020ba8a:	bff9                	j	8020ba68 <either_copyout+0x32>

000000008020ba8c <either_copyin>:
// Copy from either a user address, or kernel address,
// depending on usr_src.
// Returns 0 on success, -1 on error.
int
either_copyin( int user_src,void *dst, uint64 src, uint64 len)
{
    8020ba8c:	7179                	addi	sp,sp,-48
    8020ba8e:	f406                	sd	ra,40(sp)
    8020ba90:	f022                	sd	s0,32(sp)
    8020ba92:	ec26                	sd	s1,24(sp)
    8020ba94:	e84a                	sd	s2,16(sp)
    8020ba96:	e44e                	sd	s3,8(sp)
    8020ba98:	e052                	sd	s4,0(sp)
    8020ba9a:	1800                	addi	s0,sp,48
    8020ba9c:	84aa                	mv	s1,a0
    8020ba9e:	892e                	mv	s2,a1
    8020baa0:	89b2                	mv	s3,a2
    8020baa2:	8a36                	mv	s4,a3
  struct proc *p = myproc();
    8020baa4:	00001097          	auipc	ra,0x1
    8020baa8:	90e080e7          	jalr	-1778(ra) # 8020c3b2 <myproc>
  if(user_src){
    8020baac:	c08d                	beqz	s1,8020bace <either_copyin+0x42>
    return copyin(p->pagetable, dst, src, len);
    8020baae:	86d2                	mv	a3,s4
    8020bab0:	864e                	mv	a2,s3
    8020bab2:	85ca                	mv	a1,s2
    8020bab4:	7128                	ld	a0,96(a0)
    8020bab6:	00000097          	auipc	ra,0x0
    8020baba:	ce4080e7          	jalr	-796(ra) # 8020b79a <copyin>
  } else {
    memmove(dst, (char*)src, len);
    return 0;
  }
}
    8020babe:	70a2                	ld	ra,40(sp)
    8020bac0:	7402                	ld	s0,32(sp)
    8020bac2:	64e2                	ld	s1,24(sp)
    8020bac4:	6942                	ld	s2,16(sp)
    8020bac6:	69a2                	ld	s3,8(sp)
    8020bac8:	6a02                	ld	s4,0(sp)
    8020baca:	6145                	addi	sp,sp,48
    8020bacc:	8082                	ret
    memmove(dst, (char*)src, len);
    8020bace:	000a061b          	sext.w	a2,s4
    8020bad2:	85ce                	mv	a1,s3
    8020bad4:	854a                	mv	a0,s2
    8020bad6:	ffff5097          	auipc	ra,0xffff5
    8020bada:	2fe080e7          	jalr	766(ra) # 80200dd4 <memmove>
    return 0;
    8020bade:	8526                	mv	a0,s1
    8020bae0:	bff9                	j	8020babe <either_copyin+0x32>

000000008020bae2 <__poll_func>:

void __poll_func(struct file *f, struct wait_queue *wq, struct poll_table *pt)
{
	struct poll_wait_queue *pwq = container_of(pt, struct poll_wait_queue, pt);
	struct poll_wait_node *pwn;
	if (pwq->index >= ON_STACK_PWN_NUM)	// we can allocate pages
    8020bae2:	4e1c                	lw	a5,24(a2)
    8020bae4:	475d                	li	a4,23
    8020bae6:	00f75363          	bge	a4,a5,8020baec <__poll_func+0xa>
    8020baea:	8082                	ret
{
    8020baec:	7179                	addi	sp,sp,-48
    8020baee:	f406                	sd	ra,40(sp)
    8020baf0:	f022                	sd	s0,32(sp)
    8020baf2:	ec26                	sd	s1,24(sp)
    8020baf4:	e84a                	sd	s2,16(sp)
    8020baf6:	e44e                	sd	s3,8(sp)
    8020baf8:	e052                	sd	s4,0(sp)
    8020bafa:	1800                	addi	s0,sp,48
    8020bafc:	89ae                	mv	s3,a1
    8020bafe:	84b2                	mv	s1,a2
		return;

	pwn = &pwq->nodes[pwq->index++];
    8020bb00:	0017871b          	addiw	a4,a5,1
    8020bb04:	ce18                	sw	a4,24(a2)
	pwn->node.chan = pwq;
    8020bb06:	00579713          	slli	a4,a5,0x5
    8020bb0a:	9732                	add	a4,a4,a2
    8020bb0c:	f710                	sd	a2,40(a4)
	pwn->queue = wq;
    8020bb0e:	f30c                	sd	a1,32(a4)
	wait_queue_add_locked(wq, &pwn->node);
    8020bb10:	0785                	addi	a5,a5,1
    8020bb12:	00579913          	slli	s2,a5,0x5
    8020bb16:	00890a13          	addi	s4,s2,8
    8020bb1a:	9a32                	add	s4,s4,a2
	list_del(&node->list);
}

static inline void wait_queue_add_locked(struct wait_queue *wq, struct wait_node *node)
{
	acquire(&wq->lock);
    8020bb1c:	852e                	mv	a0,a1
    8020bb1e:	ffffd097          	auipc	ra,0xffffd
    8020bb22:	3bc080e7          	jalr	956(ra) # 80208eda <acquire>
	list_add_before(&wq->head, &node->list);
    8020bb26:	0941                	addi	s2,s2,16
    8020bb28:	9926                	add	s2,s2,s1
	__list_insert(node, beforeme->prev, beforeme);
    8020bb2a:	0189b783          	ld	a5,24(s3) # 1018 <_entry-0x801fefe8>
	prev->next = next->prev = node;
    8020bb2e:	0129bc23          	sd	s2,24(s3)
    8020bb32:	0127b423          	sd	s2,8(a5)
    8020bb36:	01898713          	addi	a4,s3,24
	node->next = next;
    8020bb3a:	00ea3823          	sd	a4,16(s4)
	node->prev = prev;
    8020bb3e:	00fa3423          	sd	a5,8(s4)
	release(&wq->lock);
    8020bb42:	854e                	mv	a0,s3
    8020bb44:	ffffd097          	auipc	ra,0xffffd
    8020bb48:	3ea080e7          	jalr	1002(ra) # 80208f2e <release>
}
    8020bb4c:	70a2                	ld	ra,40(sp)
    8020bb4e:	7402                	ld	s0,32(sp)
    8020bb50:	64e2                	ld	s1,24(sp)
    8020bb52:	6942                	ld	s2,16(sp)
    8020bb54:	69a2                	ld	s3,8(sp)
    8020bb56:	6a02                	ld	s4,0(sp)
    8020bb58:	6145                	addi	sp,sp,48
    8020bb5a:	8082                	ret

000000008020bb5c <poll_init>:


void poll_init(struct poll_wait_queue *pwq)
{
    8020bb5c:	1141                	addi	sp,sp,-16
    8020bb5e:	e422                	sd	s0,8(sp)
    8020bb60:	0800                	addi	s0,sp,16
	pwq->pt.func = __poll_func;
    8020bb62:	00000797          	auipc	a5,0x0
    8020bb66:	f8078793          	addi	a5,a5,-128 # 8020bae2 <__poll_func>
    8020bb6a:	e11c                	sd	a5,0(a0)
	pwq->pt.key = 0;
    8020bb6c:	00052423          	sw	zero,8(a0)
	pwq->error = 0;
    8020bb70:	00053823          	sd	zero,16(a0)
	pwq->index = 0;
    8020bb74:	00052c23          	sw	zero,24(a0)
}
    8020bb78:	6422                	ld	s0,8(sp)
    8020bb7a:	0141                	addi	sp,sp,16
    8020bb7c:	8082                	ret

000000008020bb7e <poll_end>:


void poll_end(struct poll_wait_queue *pwq)
{
	for (int i = 0; i < pwq->index; i++) {
    8020bb7e:	4d1c                	lw	a5,24(a0)
    8020bb80:	06f05b63          	blez	a5,8020bbf6 <poll_end+0x78>
{
    8020bb84:	7179                	addi	sp,sp,-48
    8020bb86:	f406                	sd	ra,40(sp)
    8020bb88:	f022                	sd	s0,32(sp)
    8020bb8a:	ec26                	sd	s1,24(sp)
    8020bb8c:	e84a                	sd	s2,16(sp)
    8020bb8e:	e44e                	sd	s3,8(sp)
    8020bb90:	e052                	sd	s4,0(sp)
    8020bb92:	1800                	addi	s0,sp,48
    8020bb94:	8a2a                	mv	s4,a0
    8020bb96:	02050493          	addi	s1,a0,32
	for (int i = 0; i < pwq->index; i++) {
    8020bb9a:	4981                	li	s3,0
    8020bb9c:	a829                	j	8020bbb6 <poll_end+0x38>
		wait_queue_del(&pwn->node);
		if (!wait_queue_empty(wq)) {
			struct wait_node *node = wait_queue_next(wq);
			wakeup(node->chan);
		}
		release(&wq->lock);
    8020bb9e:	854a                	mv	a0,s2
    8020bba0:	ffffd097          	auipc	ra,0xffffd
    8020bba4:	38e080e7          	jalr	910(ra) # 80208f2e <release>
	for (int i = 0; i < pwq->index; i++) {
    8020bba8:	2985                	addiw	s3,s3,1
    8020bbaa:	02048493          	addi	s1,s1,32
    8020bbae:	018a2783          	lw	a5,24(s4)
    8020bbb2:	02f9da63          	bge	s3,a5,8020bbe6 <poll_end+0x68>
		struct wait_queue *wq = pwn->queue;
    8020bbb6:	0004b903          	ld	s2,0(s1)
		acquire(&wq->lock);
    8020bbba:	854a                	mv	a0,s2
    8020bbbc:	ffffd097          	auipc	ra,0xffffd
    8020bbc0:	31e080e7          	jalr	798(ra) # 80208eda <acquire>
	__list_link(node->prev, node->next);
    8020bbc4:	6898                	ld	a4,16(s1)
    8020bbc6:	6c9c                	ld	a5,24(s1)
	prev->next = next;
    8020bbc8:	e71c                	sd	a5,8(a4)
	next->prev = prev;
    8020bbca:	e398                	sd	a4,0(a5)
	return head->next == head;
    8020bbcc:	02093783          	ld	a5,32(s2)
	return list_empty(&wq->head);
    8020bbd0:	01890713          	addi	a4,s2,24
		if (!wait_queue_empty(wq)) {
    8020bbd4:	fce785e3          	beq	a5,a4,8020bb9e <poll_end+0x20>
			wakeup(node->chan);
    8020bbd8:	ff87b503          	ld	a0,-8(a5)
    8020bbdc:	ffff6097          	auipc	ra,0xffff6
    8020bbe0:	26c080e7          	jalr	620(ra) # 80201e48 <wakeup>
    8020bbe4:	bf6d                	j	8020bb9e <poll_end+0x20>
	}
}
    8020bbe6:	70a2                	ld	ra,40(sp)
    8020bbe8:	7402                	ld	s0,32(sp)
    8020bbea:	64e2                	ld	s1,24(sp)
    8020bbec:	6942                	ld	s2,16(sp)
    8020bbee:	69a2                	ld	s3,8(sp)
    8020bbf0:	6a02                	ld	s4,0(sp)
    8020bbf2:	6145                	addi	sp,sp,48
    8020bbf4:	8082                	ret
    8020bbf6:	8082                	ret

000000008020bbf8 <file_poll>:


uint32 file_poll(struct file *fp, struct poll_table *pt)
{
	if (!fp->poll)
    8020bbf8:	6d3c                	ld	a5,88(a0)
    8020bbfa:	cb99                	beqz	a5,8020bc10 <file_poll+0x18>
{
    8020bbfc:	1141                	addi	sp,sp,-16
    8020bbfe:	e406                	sd	ra,8(sp)
    8020bc00:	e022                	sd	s0,0(sp)
    8020bc02:	0800                	addi	s0,sp,16
		return POLLIN|POLLOUT;
	return fp->poll(fp, pt);
    8020bc04:	9782                	jalr	a5
    8020bc06:	2501                	sext.w	a0,a0
}
    8020bc08:	60a2                	ld	ra,8(sp)
    8020bc0a:	6402                	ld	s0,0(sp)
    8020bc0c:	0141                	addi	sp,sp,16
    8020bc0e:	8082                	ret
		return POLLIN|POLLOUT;
    8020bc10:	4515                	li	a0,5
}
    8020bc12:	8082                	ret

000000008020bc14 <poll_sched_timeout>:


int poll_sched_timeout(struct poll_wait_queue *pwq, uint64 expire)
{
    8020bc14:	7139                	addi	sp,sp,-64
    8020bc16:	fc06                	sd	ra,56(sp)
    8020bc18:	f822                	sd	s0,48(sp)
    8020bc1a:	f426                	sd	s1,40(sp)
    8020bc1c:	f04a                	sd	s2,32(sp)
    8020bc1e:	ec4e                	sd	s3,24(sp)
    8020bc20:	e852                	sd	s4,16(sp)
    8020bc22:	0080                	addi	s0,sp,64
    8020bc24:	89aa                	mv	s3,a0
    8020bc26:	8a2e                	mv	s4,a1
	struct proc *p = myproc();
    8020bc28:	00000097          	auipc	ra,0x0
    8020bc2c:	78a080e7          	jalr	1930(ra) # 8020c3b2 <myproc>
    8020bc30:	84aa                	mv	s1,a0
	struct proc *volatile vp = p;
    8020bc32:	fca43423          	sd	a0,-56(s0)
	int ret = 0;

	acquire(&p->lock);	// Hold this for sleep().
    8020bc36:	00850913          	addi	s2,a0,8
    8020bc3a:	854a                	mv	a0,s2
    8020bc3c:	ffffd097          	auipc	ra,0xffffd
    8020bc40:	29e080e7          	jalr	670(ra) # 80208eda <acquire>
	
	p->sleep_expire = expire;
    8020bc44:	1144bc23          	sd	s4,280(s1)
	sleep(pwq, &p->lock);
    8020bc48:	85ca                	mv	a1,s2
    8020bc4a:	854e                	mv	a0,s3
    8020bc4c:	ffff6097          	auipc	ra,0xffff6
    8020bc50:	0f2080e7          	jalr	242(ra) # 80201d3e <sleep>
	
	// Check whether we are waken up by timeout.
	// If so, this field will be set to zero.
	if (vp->sleep_expire == 0)
    8020bc54:	fc843783          	ld	a5,-56(s0)
    8020bc58:	1187b783          	ld	a5,280(a5)
    8020bc5c:	c395                	beqz	a5,8020bc80 <poll_sched_timeout+0x6c>
		ret = 1;
	else
		p->sleep_expire = 0;
    8020bc5e:	1004bc23          	sd	zero,280(s1)
	int ret = 0;
    8020bc62:	4481                	li	s1,0
	release(&p->lock);
    8020bc64:	854a                	mv	a0,s2
    8020bc66:	ffffd097          	auipc	ra,0xffffd
    8020bc6a:	2c8080e7          	jalr	712(ra) # 80208f2e <release>

	//__debug_info("poll_sched_timeout", "pwq=%p, ret=%d\n", pwq, ret);

	return ret;
}
    8020bc6e:	8526                	mv	a0,s1
    8020bc70:	70e2                	ld	ra,56(sp)
    8020bc72:	7442                	ld	s0,48(sp)
    8020bc74:	74a2                	ld	s1,40(sp)
    8020bc76:	7902                	ld	s2,32(sp)
    8020bc78:	69e2                	ld	s3,24(sp)
    8020bc7a:	6a42                	ld	s4,16(sp)
    8020bc7c:	6121                	addi	sp,sp,64
    8020bc7e:	8082                	ret
		ret = 1;
    8020bc80:	4485                	li	s1,1
    8020bc82:	b7cd                	j	8020bc64 <poll_sched_timeout+0x50>

000000008020bc84 <ppoll>:


int ppoll(struct pollfd *pfds, int nfds, struct timespec *timeout, __sigset_t *sigmask)
{
    8020bc84:	1141                	addi	sp,sp,-16
    8020bc86:	e422                	sd	s0,8(sp)
    8020bc88:	0800                	addi	s0,sp,16
    8020bc8a:	86aa                	mv	a3,a0
    8020bc8c:	852e                	mv	a0,a1
	// uint64 expire;
	
	// if (timeout)
	// 	expire	= now + convert_from_timespec(timeout);

	for (int i = 0; i < nfds; i++) {
    8020bc8e:	02b05163          	blez	a1,8020bcb0 <ppoll+0x2c>
    8020bc92:	00668793          	addi	a5,a3,6
    8020bc96:	fff5871b          	addiw	a4,a1,-1
    8020bc9a:	1702                	slli	a4,a4,0x20
    8020bc9c:	9301                	srli	a4,a4,0x20
    8020bc9e:	070e                	slli	a4,a4,0x3
    8020bca0:	06b9                	addi	a3,a3,14
    8020bca2:	9736                	add	a4,a4,a3
		pfds[i].revents = POLLIN|POLLOUT;
    8020bca4:	4695                	li	a3,5
    8020bca6:	00d79023          	sh	a3,0(a5)
	for (int i = 0; i < nfds; i++) {
    8020bcaa:	07a1                	addi	a5,a5,8
    8020bcac:	fee79de3          	bne	a5,a4,8020bca6 <ppoll+0x22>
	}
	return nfds;
}
    8020bcb0:	6422                	ld	s0,8(sp)
    8020bcb2:	0141                	addi	sp,sp,16
    8020bcb4:	8082                	ret

000000008020bcb6 <pselect>:
}


int pselect(int nfds, struct fdset *readfds, struct fdset *writefds, struct fdset *exceptfds,
			struct timespec *timeout, __sigset_t *sigmask)
{
    8020bcb6:	a6010113          	addi	sp,sp,-1440 # 36372a60 <_entry-0x49e8d5a0>
    8020bcba:	58113c23          	sd	ra,1432(sp)
    8020bcbe:	58813823          	sd	s0,1424(sp)
    8020bcc2:	58913423          	sd	s1,1416(sp)
    8020bcc6:	59213023          	sd	s2,1408(sp)
    8020bcca:	57313c23          	sd	s3,1400(sp)
    8020bcce:	57413823          	sd	s4,1392(sp)
    8020bcd2:	57513423          	sd	s5,1384(sp)
    8020bcd6:	57613023          	sd	s6,1376(sp)
    8020bcda:	55713c23          	sd	s7,1368(sp)
    8020bcde:	55813823          	sd	s8,1360(sp)
    8020bce2:	55913423          	sd	s9,1352(sp)
    8020bce6:	55a13023          	sd	s10,1344(sp)
    8020bcea:	53b13c23          	sd	s11,1336(sp)
    8020bcee:	5a010413          	addi	s0,sp,1440
    8020bcf2:	a8a43423          	sd	a0,-1400(s0)
    8020bcf6:	a8b43023          	sd	a1,-1408(s0)
    8020bcfa:	a6c43c23          	sd	a2,-1416(s0)
    8020bcfe:	a6d43823          	sd	a3,-1424(s0)
    8020bd02:	84ba                	mv	s1,a4
	struct fdset rfds, wfds, exfds;
	uint64 expire;
	struct poll_wait_queue wait;
	struct proc* p = myproc();
    8020bd04:	00000097          	auipc	ra,0x0
    8020bd08:	6ae080e7          	jalr	1710(ra) # 8020c3b2 <myproc>
    8020bd0c:	8d2a                	mv	s10,a0
	
	/*
	__debug_info("pselect timeout={%ds, %dns}\n", 
				timeout ? timeout->tv_sec : -1, timeout ? timeout->tv_nsec : -1);
*/
	if (timeout) {
    8020bd0e:	c0f1                	beqz	s1,8020bdd2 <pselect+0x11c>
	tv->usec = (time % TICK_FREQ) * 1000 / (TICK_FREQ / 1000);
}

static inline uint64 convert_from_timespec(const struct timespec *ts)
{
	uint64 time = ts->tv_sec * TICK_FREQ
    8020bd10:	6098                	ld	a4,0(s1)
    8020bd12:	000f47b7          	lui	a5,0xf4
    8020bd16:	24078793          	addi	a5,a5,576 # f4240 <_entry-0x8010bdc0>
    8020bd1a:	02f70733          	mul	a4,a4,a5
					+ ts->tv_nsec * (TICK_FREQ / 1000 / 100) / 10 / 1000;
    8020bd1e:	649c                	ld	a5,8(s1)
    8020bd20:	3e800693          	li	a3,1000
    8020bd24:	02d7c7b3          	div	a5,a5,a3
    8020bd28:	973e                	add	a4,a4,a5
    8020bd2a:	a6e43023          	sd	a4,-1440(s0)
		expire = convert_from_timespec(timeout);
		if (expire == 0)
			immediate = 1;			// don't sleep
    8020bd2e:	4785                	li	a5,1
    8020bd30:	a6f43423          	sd	a5,-1432(s0)
		if (expire == 0)
    8020bd34:	cb01                	beqz	a4,8020bd44 <pselect+0x8e>
  asm volatile("rdtime %0" : "=r" (x) );
    8020bd36:	c01027f3          	rdtime	a5
		else 
			//expire += readtime();	// overflow?
			expire += r_time();	// overflow?
    8020bd3a:	97ba                	add	a5,a5,a4
    8020bd3c:	a6f43023          	sd	a5,-1440(s0)
	int immediate = 0;
    8020bd40:	a6043423          	sd	zero,-1432(s0)
	if (rarg)
    8020bd44:	a8043583          	ld	a1,-1408(s0)
    8020bd48:	c9d1                	beqz	a1,8020bddc <pselect+0x126>
		memmove(rfds, rarg, sizeof(struct fdset));
    8020bd4a:	08000613          	li	a2,128
    8020bd4e:	f1040513          	addi	a0,s0,-240
    8020bd52:	ffff5097          	auipc	ra,0xffff5
    8020bd56:	082080e7          	jalr	130(ra) # 80200dd4 <memmove>
	if (warg)
    8020bd5a:	a7843583          	ld	a1,-1416(s0)
    8020bd5e:	c9c9                	beqz	a1,8020bdf0 <pselect+0x13a>
		memmove(wfds, warg, sizeof(struct fdset));
    8020bd60:	08000613          	li	a2,128
    8020bd64:	e9040513          	addi	a0,s0,-368
    8020bd68:	ffff5097          	auipc	ra,0xffff5
    8020bd6c:	06c080e7          	jalr	108(ra) # 80200dd4 <memmove>
	if (exarg)
    8020bd70:	a7043583          	ld	a1,-1424(s0)
    8020bd74:	c9c1                	beqz	a1,8020be04 <pselect+0x14e>
		memmove(exfds, exarg, sizeof(struct fdset));
    8020bd76:	08000613          	li	a2,128
    8020bd7a:	e1040513          	addi	a0,s0,-496
    8020bd7e:	ffff5097          	auipc	ra,0xffff5
    8020bd82:	056080e7          	jalr	86(ra) # 80200dd4 <memmove>
	pwq->pt.func = __poll_func;
    8020bd86:	00000797          	auipc	a5,0x0
    8020bd8a:	d5c78793          	addi	a5,a5,-676 # 8020bae2 <__poll_func>
    8020bd8e:	aef43823          	sd	a5,-1296(s0)
	pwq->pt.key = 0;
    8020bd92:	ae042c23          	sw	zero,-1288(s0)
	pwq->error = 0;
    8020bd96:	b0043023          	sd	zero,-1280(s0)
	pwq->index = 0;
    8020bd9a:	b0042423          	sw	zero,-1272(s0)

	// Since the node is on stack, if we want other process to get us, we should use pa.
	// pwait = (struct poll_wait_queue *)kwalkaddr(myproc()->pagetable, (uint64)&wait);
	// pwait = &wait;
	poll_init(&wait);
	if (immediate)
    8020bd9e:	a6843783          	ld	a5,-1432(s0)
    8020bda2:	c399                	beqz	a5,8020bda8 <pselect+0xf2>
		wait.pt.func = NULL;		// we won't be inserted into any queue in later poll()s
    8020bda4:	ae043823          	sd	zero,-1296(s0)

	int ret = 0;
	for (;;)
	{
		int i = 0;	// fd iterator
		for (int idx = 0; idx <= (nfds - 1) / NFDBIT; idx++)
    8020bda8:	a8843783          	ld	a5,-1400(s0)
    8020bdac:	37fd                	addiw	a5,a5,-1
    8020bdae:	8399                	srli	a5,a5,0x6
    8020bdb0:	0785                	addi	a5,a5,1
    8020bdb2:	078e                	slli	a5,a5,0x3
    8020bdb4:	a8f43823          	sd	a5,-1392(s0)
    8020bdb8:	ac043c23          	sd	zero,-1320(s0)
			if (all == 0) {				// no fd in this part
				i += NFDBIT;
				continue;
			}

			for (int b = 0; b < NFDBIT; b++, i++) {
    8020bdbc:	ac043023          	sd	zero,-1344(s0)
				uint64 bit = 1L << b;
				if (!(bit & all))		// no fd in this bit
					continue;
	
				struct file *fp = p->ofile[i];
				if (i<0||i>=NOFILEMAX(p)||!fp)				// bad fd
    8020bdc0:	0c800793          	li	a5,200
    8020bdc4:	a8f43c23          	sd	a5,-1384(s0)
				if (r & bit)
					wait.pt.key |= POLLIN_SET;
				if (w & bit)
					wait.pt.key |= POLLOUT_SET;

				uint32 mask = file_poll(fp, &wait.pt);
    8020bdc8:	af040793          	addi	a5,s0,-1296
    8020bdcc:	aaf43c23          	sd	a5,-1352(s0)
    8020bdd0:	ac05                	j	8020c000 <pselect+0x34a>
	int immediate = 0;
    8020bdd2:	a6043423          	sd	zero,-1432(s0)
		expire = 0;					// infinity
    8020bdd6:	a6043023          	sd	zero,-1440(s0)
    8020bdda:	b7ad                	j	8020bd44 <pselect+0x8e>
		memset(rfds, 0, sizeof(struct fdset));
    8020bddc:	08000613          	li	a2,128
    8020bde0:	4581                	li	a1,0
    8020bde2:	f1040513          	addi	a0,s0,-240
    8020bde6:	ffff5097          	auipc	ra,0xffff5
    8020bdea:	f8e080e7          	jalr	-114(ra) # 80200d74 <memset>
    8020bdee:	b7b5                	j	8020bd5a <pselect+0xa4>
		memset(wfds, 0, sizeof(struct fdset));
    8020bdf0:	08000613          	li	a2,128
    8020bdf4:	4581                	li	a1,0
    8020bdf6:	e9040513          	addi	a0,s0,-368
    8020bdfa:	ffff5097          	auipc	ra,0xffff5
    8020bdfe:	f7a080e7          	jalr	-134(ra) # 80200d74 <memset>
    8020be02:	b7bd                	j	8020bd70 <pselect+0xba>
		memset(exfds, 0, sizeof(struct fdset));
    8020be04:	08000613          	li	a2,128
    8020be08:	4581                	li	a1,0
    8020be0a:	e1040513          	addi	a0,s0,-496
    8020be0e:	ffff5097          	auipc	ra,0xffff5
    8020be12:	f66080e7          	jalr	-154(ra) # 80200d74 <memset>
    8020be16:	bf85                	j	8020bd86 <pselect+0xd0>
				i += NFDBIT;
    8020be18:	0409091b          	addiw	s2,s2,64
		for (int idx = 0; idx <= (nfds - 1) / NFDBIT; idx++)
    8020be1c:	0b21                	addi	s6,s6,8
    8020be1e:	a9043783          	ld	a5,-1392(s0)
    8020be22:	18fb0a63          	beq	s6,a5,8020bfb6 <pselect+0x300>
			r = rfds.fd_bits[idx];		// extract fd bits
    8020be26:	f1040793          	addi	a5,s0,-240
    8020be2a:	97da                	add	a5,a5,s6
    8020be2c:	6398                	ld	a4,0(a5)
    8020be2e:	aee43423          	sd	a4,-1304(s0)
			w = wfds.fd_bits[idx];
    8020be32:	e9040793          	addi	a5,s0,-368
    8020be36:	97da                	add	a5,a5,s6
    8020be38:	6394                	ld	a3,0(a5)
    8020be3a:	aed43023          	sd	a3,-1312(s0)
			ex = exfds.fd_bits[idx];
    8020be3e:	e1040793          	addi	a5,s0,-496
    8020be42:	97da                	add	a5,a5,s6
    8020be44:	639c                	ld	a5,0(a5)
    8020be46:	acf43423          	sd	a5,-1336(s0)
			all = r | w | ex;
    8020be4a:	00d76ab3          	or	s5,a4,a3
    8020be4e:	00faeab3          	or	s5,s5,a5
			if (all == 0) {				// no fd in this part
    8020be52:	fc0a83e3          	beqz	s5,8020be18 <pselect+0x162>
				if (i >= nfds)			// reach end
    8020be56:	a8843783          	ld	a5,-1400(s0)
    8020be5a:	12f95163          	bge	s2,a5,8020bf7c <pselect+0x2c6>
    8020be5e:	8a4a                	mv	s4,s2
    8020be60:	41278cbb          	subw	s9,a5,s2
			for (int b = 0; b < NFDBIT; b++, i++) {
    8020be64:	ac043483          	ld	s1,-1344(s0)
			uint64 rres = 0, wres = 0, exres = 0;
    8020be68:	aa043023          	sd	zero,-1376(s0)
    8020be6c:	aa043423          	sd	zero,-1368(s0)
    8020be70:	aa043823          	sd	zero,-1360(s0)
				uint64 bit = 1L << b;
    8020be74:	4c05                	li	s8,1
			for (int b = 0; b < NFDBIT; b++, i++) {
    8020be76:	04000b93          	li	s7,64
    8020be7a:	a821                	j	8020be92 <pselect+0x1dc>
					wait.pt.key |= POLLIN_SET;
    8020be7c:	47ed                	li	a5,27
    8020be7e:	aef42c23          	sw	a5,-1288(s0)
    8020be82:	a889                	j	8020bed4 <pselect+0x21e>
			for (int b = 0; b < NFDBIT; b++, i++) {
    8020be84:	2485                	addiw	s1,s1,1
    8020be86:	2905                	addiw	s2,s2,1
    8020be88:	11748063          	beq	s1,s7,8020bf88 <pselect+0x2d2>
				if (i >= nfds)			// reach end
    8020be8c:	0a05                	addi	s4,s4,1
    8020be8e:	0f948d63          	beq	s1,s9,8020bf88 <pselect+0x2d2>
				uint64 bit = 1L << b;
    8020be92:	009c19b3          	sll	s3,s8,s1
				if (!(bit & all))		// no fd in this bit
    8020be96:	013af7b3          	and	a5,s5,s3
    8020be9a:	d7ed                	beqz	a5,8020be84 <pselect+0x1ce>
				if (i<0||i>=NOFILEMAX(p)||!fp)				// bad fd
    8020be9c:	fe0944e3          	bltz	s2,8020be84 <pselect+0x1ce>
    8020bea0:	0e0d3783          	ld	a5,224(s10) # 1a0e0 <_entry-0x801e5f20>
    8020bea4:	0c800713          	li	a4,200
    8020bea8:	00f75463          	bge	a4,a5,8020beb0 <pselect+0x1fa>
    8020beac:	a9843783          	ld	a5,-1384(s0)
    8020beb0:	fcfa5ae3          	bge	s4,a5,8020be84 <pselect+0x1ce>
				struct file *fp = p->ofile[i];
    8020beb4:	0e8d3783          	ld	a5,232(s10)
    8020beb8:	003a1713          	slli	a4,s4,0x3
    8020bebc:	97ba                	add	a5,a5,a4
    8020bebe:	6388                	ld	a0,0(a5)
				if (i<0||i>=NOFILEMAX(p)||!fp)				// bad fd
    8020bec0:	d171                	beqz	a0,8020be84 <pselect+0x1ce>
				if (r & bit)
    8020bec2:	ae843783          	ld	a5,-1304(s0)
    8020bec6:	0137fdb3          	and	s11,a5,s3
    8020beca:	fa0d99e3          	bnez	s11,8020be7c <pselect+0x1c6>
				wait.pt.key = POLLEX_SET;
    8020bece:	4789                	li	a5,2
    8020bed0:	aef42c23          	sw	a5,-1288(s0)
				if (w & bit)
    8020bed4:	ae043783          	ld	a5,-1312(s0)
    8020bed8:	0137f7b3          	and	a5,a5,s3
    8020bedc:	acf43823          	sd	a5,-1328(s0)
    8020bee0:	c799                	beqz	a5,8020beee <pselect+0x238>
					wait.pt.key |= POLLOUT_SET;
    8020bee2:	af842783          	lw	a5,-1288(s0)
    8020bee6:	00c7e793          	ori	a5,a5,12
    8020beea:	aef42c23          	sw	a5,-1288(s0)
				uint32 mask = file_poll(fp, &wait.pt);
    8020beee:	ab843583          	ld	a1,-1352(s0)
    8020bef2:	00000097          	auipc	ra,0x0
    8020bef6:	d06080e7          	jalr	-762(ra) # 8020bbf8 <file_poll>
    8020befa:	0005079b          	sext.w	a5,a0
				//__debug_info("pselect", "mask=%d\n", mask);

				if ((mask & POLLIN_SET) && (r & bit)) {
    8020befe:	8965                	andi	a0,a0,25
    8020bf00:	c115                	beqz	a0,8020bf24 <pselect+0x26e>
    8020bf02:	020d8163          	beqz	s11,8020bf24 <pselect+0x26e>
					rres |= bit;
    8020bf06:	ab043703          	ld	a4,-1360(s0)
    8020bf0a:	01376733          	or	a4,a4,s3
    8020bf0e:	aae43823          	sd	a4,-1360(s0)
					ret++;
    8020bf12:	ad843703          	ld	a4,-1320(s0)
    8020bf16:	2705                	addiw	a4,a4,1
    8020bf18:	ace43c23          	sd	a4,-1320(s0)
					wait.pt.func = NULL;
    8020bf1c:	ac043703          	ld	a4,-1344(s0)
    8020bf20:	aee43823          	sd	a4,-1296(s0)
				}
				if ((mask & POLLOUT_SET) && (w & bit)) {
    8020bf24:	00c7f713          	andi	a4,a5,12
    8020bf28:	c31d                	beqz	a4,8020bf4e <pselect+0x298>
    8020bf2a:	ad043703          	ld	a4,-1328(s0)
    8020bf2e:	c305                	beqz	a4,8020bf4e <pselect+0x298>
					wres |= bit;
    8020bf30:	aa843703          	ld	a4,-1368(s0)
    8020bf34:	01376733          	or	a4,a4,s3
    8020bf38:	aae43423          	sd	a4,-1368(s0)
					ret++;
    8020bf3c:	ad843703          	ld	a4,-1320(s0)
    8020bf40:	2705                	addiw	a4,a4,1
    8020bf42:	ace43c23          	sd	a4,-1320(s0)
					wait.pt.func = NULL;
    8020bf46:	ac043703          	ld	a4,-1344(s0)
    8020bf4a:	aee43823          	sd	a4,-1296(s0)
				}
				if ((mask & POLLEX_SET) && (ex & bit)) {
    8020bf4e:	8b89                	andi	a5,a5,2
    8020bf50:	db95                	beqz	a5,8020be84 <pselect+0x1ce>
    8020bf52:	ac843783          	ld	a5,-1336(s0)
    8020bf56:	0137f7b3          	and	a5,a5,s3
    8020bf5a:	d78d                	beqz	a5,8020be84 <pselect+0x1ce>
					exres |= bit;
    8020bf5c:	aa043783          	ld	a5,-1376(s0)
    8020bf60:	0137e7b3          	or	a5,a5,s3
    8020bf64:	aaf43023          	sd	a5,-1376(s0)
					ret++;
    8020bf68:	ad843783          	ld	a5,-1320(s0)
    8020bf6c:	2785                	addiw	a5,a5,1
    8020bf6e:	acf43c23          	sd	a5,-1320(s0)
					wait.pt.func = NULL;
    8020bf72:	ac043783          	ld	a5,-1344(s0)
    8020bf76:	aef43823          	sd	a5,-1296(s0)
    8020bf7a:	b729                	j	8020be84 <pselect+0x1ce>
			uint64 rres = 0, wres = 0, exres = 0;
    8020bf7c:	aa043023          	sd	zero,-1376(s0)
    8020bf80:	aa043423          	sd	zero,-1368(s0)
    8020bf84:	aa043823          	sd	zero,-1360(s0)
				}
			}
			if (readfds)
    8020bf88:	a8043783          	ld	a5,-1408(s0)
    8020bf8c:	c789                	beqz	a5,8020bf96 <pselect+0x2e0>
				readfds->fd_bits[idx] = rres;
    8020bf8e:	97da                	add	a5,a5,s6
    8020bf90:	ab043703          	ld	a4,-1360(s0)
    8020bf94:	e398                	sd	a4,0(a5)
			if (writefds)
    8020bf96:	a7843783          	ld	a5,-1416(s0)
    8020bf9a:	c789                	beqz	a5,8020bfa4 <pselect+0x2ee>
				writefds->fd_bits[idx] = wres;
    8020bf9c:	97da                	add	a5,a5,s6
    8020bf9e:	aa843703          	ld	a4,-1368(s0)
    8020bfa2:	e398                	sd	a4,0(a5)
			if (exceptfds)
    8020bfa4:	a7043783          	ld	a5,-1424(s0)
    8020bfa8:	e6078ae3          	beqz	a5,8020be1c <pselect+0x166>
				exceptfds->fd_bits[idx] = exres;
    8020bfac:	97da                	add	a5,a5,s6
    8020bfae:	aa043703          	ld	a4,-1376(s0)
    8020bfb2:	e398                	sd	a4,0(a5)
    8020bfb4:	b5a5                	j	8020be1c <pselect+0x166>
		}
		wait.pt.func = NULL;		// only need to be called once for each file
    8020bfb6:	ae043823          	sd	zero,-1296(s0)

		if (ret > 0 || immediate)	// got results or don't sleep-wait
    8020bfba:	ad843783          	ld	a5,-1320(s0)
    8020bfbe:	04f04763          	bgtz	a5,8020c00c <pselect+0x356>
    8020bfc2:	a6843783          	ld	a5,-1432(s0)
    8020bfc6:	e3b9                	bnez	a5,8020c00c <pselect+0x356>
			break;
		if (wait.error) {
    8020bfc8:	b0043783          	ld	a5,-1280(s0)
    8020bfcc:	ef8d                	bnez	a5,8020c006 <pselect+0x350>
			ret = wait.error;
			break;
		}

		// at this point, maybe we are already waken up by some
		if (poll_sched_timeout(&wait, expire))
    8020bfce:	a6043583          	ld	a1,-1440(s0)
    8020bfd2:	af040513          	addi	a0,s0,-1296
    8020bfd6:	00000097          	auipc	ra,0x0
    8020bfda:	c3e080e7          	jalr	-962(ra) # 8020bc14 <poll_sched_timeout>
    8020bfde:	84aa                	mv	s1,a0
			immediate = 1;
		if (myproc()->killed) {
    8020bfe0:	00000097          	auipc	ra,0x0
    8020bfe4:	3d2080e7          	jalr	978(ra) # 8020c3b2 <myproc>
    8020bfe8:	5d1c                	lw	a5,56(a0)
			immediate = 1;
    8020bfea:	00903733          	snez	a4,s1
    8020bfee:	a6e43423          	sd	a4,-1432(s0)
		if (myproc()->killed) {
    8020bff2:	c799                	beqz	a5,8020c000 <pselect+0x34a>
			immediate = 1;
			wait.error = -EINTR;
    8020bff4:	57f1                	li	a5,-4
    8020bff6:	b0f43023          	sd	a5,-1280(s0)
			immediate = 1;
    8020bffa:	4785                	li	a5,1
    8020bffc:	a6f43423          	sd	a5,-1432(s0)
		for (int idx = 0; idx <= (nfds - 1) / NFDBIT; idx++)
    8020c000:	4b01                	li	s6,0
		int i = 0;	// fd iterator
    8020c002:	4901                	li	s2,0
    8020c004:	b50d                	j	8020be26 <pselect+0x170>
			ret = wait.error;
    8020c006:	2781                	sext.w	a5,a5
    8020c008:	acf43c23          	sd	a5,-1320(s0)
		}
	}

	poll_end(&wait);
    8020c00c:	af040513          	addi	a0,s0,-1296
    8020c010:	00000097          	auipc	ra,0x0
    8020c014:	b6e080e7          	jalr	-1170(ra) # 8020bb7e <poll_end>

	//__debug_info("pselect", "return %d\n", ret);
	return ret;
}
    8020c018:	ad843503          	ld	a0,-1320(s0)
    8020c01c:	59813083          	ld	ra,1432(sp)
    8020c020:	59013403          	ld	s0,1424(sp)
    8020c024:	58813483          	ld	s1,1416(sp)
    8020c028:	58013903          	ld	s2,1408(sp)
    8020c02c:	57813983          	ld	s3,1400(sp)
    8020c030:	57013a03          	ld	s4,1392(sp)
    8020c034:	56813a83          	ld	s5,1384(sp)
    8020c038:	56013b03          	ld	s6,1376(sp)
    8020c03c:	55813b83          	ld	s7,1368(sp)
    8020c040:	55013c03          	ld	s8,1360(sp)
    8020c044:	54813c83          	ld	s9,1352(sp)
    8020c048:	54013d03          	ld	s10,1344(sp)
    8020c04c:	53813d83          	ld	s11,1336(sp)
    8020c050:	5a010113          	addi	sp,sp,1440
    8020c054:	8082                	ret

000000008020c056 <epollalloc>:
#include "include/kalloc.h"
#include "include/utils/waitqueue.h"

struct epoll*
epollalloc()
{
    8020c056:	1101                	addi	sp,sp,-32
    8020c058:	ec06                	sd	ra,24(sp)
    8020c05a:	e822                	sd	s0,16(sp)
    8020c05c:	e426                	sd	s1,8(sp)
    8020c05e:	1000                	addi	s0,sp,32
  struct epoll* epoll = kmalloc(sizeof(struct epoll));
    8020c060:	6485                	lui	s1,0x1
    8020c062:	96048513          	addi	a0,s1,-1696 # 960 <_entry-0x801ff6a0>
    8020c066:	ffffe097          	auipc	ra,0xffffe
    8020c06a:	f56080e7          	jalr	-170(ra) # 80209fbc <kmalloc>
  for(int i = 0;i<EPOLLSIZE;i++){
    8020c06e:	87aa                	mv	a5,a0
    8020c070:	96048713          	addi	a4,s1,-1696
    8020c074:	972a                	add	a4,a4,a0
    epoll->pool[i].fd = -1;
    8020c076:	56fd                	li	a3,-1
    8020c078:	c394                	sw	a3,0(a5)
  for(int i = 0;i<EPOLLSIZE;i++){
    8020c07a:	07e1                	addi	a5,a5,24
    8020c07c:	fee79ee3          	bne	a5,a4,8020c078 <epollalloc+0x22>
  }
  return epoll;
}
    8020c080:	60e2                	ld	ra,24(sp)
    8020c082:	6442                	ld	s0,16(sp)
    8020c084:	64a2                	ld	s1,8(sp)
    8020c086:	6105                	addi	sp,sp,32
    8020c088:	8082                	ret

000000008020c08a <epolladd>:

int
epolladd(struct epoll* epoll, int fd,struct epoll_event* events)
{
    8020c08a:	1141                	addi	sp,sp,-16
    8020c08c:	e422                	sd	s0,8(sp)
    8020c08e:	0800                	addi	s0,sp,16
  for(int i=0;i<EPOLLSIZE;i++){
    8020c090:	872a                	mv	a4,a0
    8020c092:	4781                	li	a5,0
    if(epoll->pool[i].fd == -1){
    8020c094:	587d                	li	a6,-1
  for(int i=0;i<EPOLLSIZE;i++){
    8020c096:	06400893          	li	a7,100
    if(epoll->pool[i].fd == -1){
    8020c09a:	4314                	lw	a3,0(a4)
    8020c09c:	01068863          	beq	a3,a6,8020c0ac <epolladd+0x22>
  for(int i=0;i<EPOLLSIZE;i++){
    8020c0a0:	2785                	addiw	a5,a5,1
    8020c0a2:	0761                	addi	a4,a4,24
    8020c0a4:	ff179be3          	bne	a5,a7,8020c09a <epolladd+0x10>
      epoll->pool[i].fd = fd;
      epoll->pool[i].events = *events;
      return 0;
    }
  }
  return -1;
    8020c0a8:	557d                	li	a0,-1
    8020c0aa:	a821                	j	8020c0c2 <epolladd+0x38>
      epoll->pool[i].fd = fd;
    8020c0ac:	00179713          	slli	a4,a5,0x1
    8020c0b0:	97ba                	add	a5,a5,a4
    8020c0b2:	078e                	slli	a5,a5,0x3
    8020c0b4:	97aa                	add	a5,a5,a0
    8020c0b6:	c38c                	sw	a1,0(a5)
      epoll->pool[i].events = *events;
    8020c0b8:	6218                	ld	a4,0(a2)
    8020c0ba:	e798                	sd	a4,8(a5)
    8020c0bc:	6618                	ld	a4,8(a2)
    8020c0be:	eb98                	sd	a4,16(a5)
      return 0;
    8020c0c0:	4501                	li	a0,0
}
    8020c0c2:	6422                	ld	s0,8(sp)
    8020c0c4:	0141                	addi	sp,sp,16
    8020c0c6:	8082                	ret

000000008020c0c8 <epolldel>:

int
epolldel(struct epoll* epoll, int fd)
{
    8020c0c8:	1141                	addi	sp,sp,-16
    8020c0ca:	e422                	sd	s0,8(sp)
    8020c0cc:	0800                	addi	s0,sp,16
  for(int i=0;i<EPOLLSIZE;i++){
    8020c0ce:	872a                	mv	a4,a0
    8020c0d0:	4781                	li	a5,0
    8020c0d2:	06400613          	li	a2,100
    if(epoll->pool[i].fd == fd){
    8020c0d6:	4314                	lw	a3,0(a4)
    8020c0d8:	00b68863          	beq	a3,a1,8020c0e8 <epolldel+0x20>
  for(int i=0;i<EPOLLSIZE;i++){
    8020c0dc:	2785                	addiw	a5,a5,1
    8020c0de:	0761                	addi	a4,a4,24
    8020c0e0:	fec79be3          	bne	a5,a2,8020c0d6 <epolldel+0xe>
      epoll->pool[i].fd = -1;
      return 0;
    }
  }
  return -1;
    8020c0e4:	557d                	li	a0,-1
    8020c0e6:	a809                	j	8020c0f8 <epolldel+0x30>
      epoll->pool[i].fd = -1;
    8020c0e8:	00179713          	slli	a4,a5,0x1
    8020c0ec:	97ba                	add	a5,a5,a4
    8020c0ee:	078e                	slli	a5,a5,0x3
    8020c0f0:	953e                	add	a0,a0,a5
    8020c0f2:	57fd                	li	a5,-1
    8020c0f4:	c11c                	sw	a5,0(a0)
      return 0;
    8020c0f6:	4501                	li	a0,0
}
    8020c0f8:	6422                	ld	s0,8(sp)
    8020c0fa:	0141                	addi	sp,sp,16
    8020c0fc:	8082                	ret

000000008020c0fe <epollprint>:

void
epollprint(struct epoll* epoll)
{
    8020c0fe:	7139                	addi	sp,sp,-64
    8020c100:	fc06                	sd	ra,56(sp)
    8020c102:	f822                	sd	s0,48(sp)
    8020c104:	f426                	sd	s1,40(sp)
    8020c106:	f04a                	sd	s2,32(sp)
    8020c108:	ec4e                	sd	s3,24(sp)
    8020c10a:	e852                	sd	s4,16(sp)
    8020c10c:	e456                	sd	s5,8(sp)
    8020c10e:	0080                	addi	s0,sp,64
    8020c110:	84aa                	mv	s1,a0
  for(int i=0;i<EPOLLSIZE;i++){
    8020c112:	4901                	li	s2,0
    struct epoll_fd* fd = epoll->pool+i;
    if(fd->fd == -1)continue;
    8020c114:	5a7d                	li	s4,-1
    printf("[EPOLL]i:%d fd:%d events:%p",i,fd->fd,fd->events.events);
    8020c116:	00009a97          	auipc	s5,0x9
    8020c11a:	09aa8a93          	addi	s5,s5,154 # 802151b0 <digits+0x688>
  for(int i=0;i<EPOLLSIZE;i++){
    8020c11e:	06400993          	li	s3,100
    8020c122:	a80d                	j	8020c154 <epollprint+0x56>
    printf("[EPOLL]i:%d fd:%d events:%p",i,fd->fd,fd->events.events);
    8020c124:	4494                	lw	a3,8(s1)
    8020c126:	85ca                	mv	a1,s2
    8020c128:	8556                	mv	a0,s5
    8020c12a:	ffffd097          	auipc	ra,0xffffd
    8020c12e:	16a080e7          	jalr	362(ra) # 80209294 <printf>
    print_f_info(myproc()->ofile[fd->fd]);
    8020c132:	00000097          	auipc	ra,0x0
    8020c136:	280080e7          	jalr	640(ra) # 8020c3b2 <myproc>
    8020c13a:	4098                	lw	a4,0(s1)
    8020c13c:	757c                	ld	a5,232(a0)
    8020c13e:	070e                	slli	a4,a4,0x3
    8020c140:	97ba                	add	a5,a5,a4
    8020c142:	6388                	ld	a0,0(a5)
    8020c144:	ffffa097          	auipc	ra,0xffffa
    8020c148:	2aa080e7          	jalr	682(ra) # 802063ee <print_f_info>
  for(int i=0;i<EPOLLSIZE;i++){
    8020c14c:	2905                	addiw	s2,s2,1
    8020c14e:	04e1                	addi	s1,s1,24
    8020c150:	01390663          	beq	s2,s3,8020c15c <epollprint+0x5e>
    if(fd->fd == -1)continue;
    8020c154:	4090                	lw	a2,0(s1)
    8020c156:	fd4617e3          	bne	a2,s4,8020c124 <epollprint+0x26>
    8020c15a:	bfcd                	j	8020c14c <epollprint+0x4e>
  }
}
    8020c15c:	70e2                	ld	ra,56(sp)
    8020c15e:	7442                	ld	s0,48(sp)
    8020c160:	74a2                	ld	s1,40(sp)
    8020c162:	7902                	ld	s2,32(sp)
    8020c164:	69e2                	ld	s3,24(sp)
    8020c166:	6a42                	ld	s4,16(sp)
    8020c168:	6aa2                	ld	s5,8(sp)
    8020c16a:	6121                	addi	sp,sp,64
    8020c16c:	8082                	ret

000000008020c16e <epollclose>:

void
epollclose(struct epoll* epoll)
{
    8020c16e:	1141                	addi	sp,sp,-16
    8020c170:	e406                	sd	ra,8(sp)
    8020c172:	e022                	sd	s0,0(sp)
    8020c174:	0800                	addi	s0,sp,16
  kfree(epoll);
    8020c176:	ffffe097          	auipc	ra,0xffffe
    8020c17a:	090080e7          	jalr	144(ra) # 8020a206 <kfree>
}
    8020c17e:	60a2                	ld	ra,8(sp)
    8020c180:	6402                	ld	s0,0(sp)
    8020c182:	0141                	addi	sp,sp,16
    8020c184:	8082                	ret

000000008020c186 <epoll_pwait>:
	return fp->epollv(fp,pt);
}

int
epoll_pwait(struct epoll* epoll,uint64 events_addr,int maxevents,__sigset_t* sigmask, int timeout)
{
    8020c186:	c5010113          	addi	sp,sp,-944
    8020c18a:	3a113423          	sd	ra,936(sp)
    8020c18e:	3a813023          	sd	s0,928(sp)
    8020c192:	38913c23          	sd	s1,920(sp)
    8020c196:	39213823          	sd	s2,912(sp)
    8020c19a:	39313423          	sd	s3,904(sp)
    8020c19e:	39413023          	sd	s4,896(sp)
    8020c1a2:	37513c23          	sd	s5,888(sp)
    8020c1a6:	37613823          	sd	s6,880(sp)
    8020c1aa:	37713423          	sd	s7,872(sp)
    8020c1ae:	37813023          	sd	s8,864(sp)
    8020c1b2:	35913c23          	sd	s9,856(sp)
    8020c1b6:	35a13823          	sd	s10,848(sp)
    8020c1ba:	35b13423          	sd	s11,840(sp)
    8020c1be:	1f00                	addi	s0,sp,944
    8020c1c0:	c4a43c23          	sd	a0,-936(s0)
    8020c1c4:	8c2e                	mv	s8,a1
    8020c1c6:	84ba                	mv	s1,a4
    8020c1c8:	c4e43823          	sd	a4,-944(s0)
  epollprint(epoll);
    8020c1cc:	00000097          	auipc	ra,0x0
    8020c1d0:	f32080e7          	jalr	-206(ra) # 8020c0fe <epollprint>
  struct poll_wait_queue wait;
  struct proc* p = myproc();
    8020c1d4:	00000097          	auipc	ra,0x0
    8020c1d8:	1de080e7          	jalr	478(ra) # 8020c3b2 <myproc>
    8020c1dc:	89aa                	mv	s3,a0
  // struct poll_wait_queue *pwait;
  int immediate = 0;
  if (timeout == 0)
    8020c1de:	16048763          	beqz	s1,8020c34c <epoll_pwait+0x1c6>
    8020c1e2:	c01027f3          	rdtime	a5
    immediate = 1;
  else 
  //expire += readtime();	// overflow?
    timeout += r_time();	// overflow?
    8020c1e6:	9fa5                	addw	a5,a5,s1
    8020c1e8:	c4f43823          	sd	a5,-944(s0)
  
  poll_init(&wait);
    8020c1ec:	c7040513          	addi	a0,s0,-912
    8020c1f0:	00000097          	auipc	ra,0x0
    8020c1f4:	96c080e7          	jalr	-1684(ra) # 8020bb5c <poll_init>
    8020c1f8:	4d01                	li	s10,0
    }
    // at this point, maybe we are already waken up by some
    if (poll_sched_timeout(&wait, timeout))
      immediate = 1;
    if (myproc()->killed) {
      immediate = 1;
    8020c1fa:	4b81                	li	s7,0
    8020c1fc:	6a05                	lui	s4,0x1
    8020c1fe:	960a0a13          	addi	s4,s4,-1696 # 960 <_entry-0x801ff6a0>
    8020c202:	c5843783          	ld	a5,-936(s0)
    8020c206:	9a3e                	add	s4,s4,a5
      if(fd->fd<0||fd->fd>=NOFILEMAX(p)||!p->ofile[fd->fd])continue;
    8020c208:	0c800a93          	li	s5,200
        printf("fd %d ok with events:%p\n", fd->fd, events);
    8020c20c:	00009c97          	auipc	s9,0x9
    8020c210:	fdcc8c93          	addi	s9,s9,-36 # 802151e8 <digits+0x6c0>
      if(fd->fd<0||fd->fd>=NOFILEMAX(p)||!p->ofile[fd->fd])continue;
    8020c214:	8b56                	mv	s6,s5
    printf("wait loop enter\n");
    8020c216:	00009517          	auipc	a0,0x9
    8020c21a:	fba50513          	addi	a0,a0,-70 # 802151d0 <digits+0x6a8>
    8020c21e:	ffffd097          	auipc	ra,0xffffd
    8020c222:	076080e7          	jalr	118(ra) # 80209294 <printf>
    for(int i=0;i<EPOLLSIZE;i++){
    8020c226:	c5843483          	ld	s1,-936(s0)
		return EPOLLIN|EPOLLOUT;
    8020c22a:	4d95                	li	s11,5
    8020c22c:	a031                	j	8020c238 <epoll_pwait+0xb2>
    8020c22e:	866e                	mv	a2,s11
    8020c230:	a825                	j	8020c268 <epoll_pwait+0xe2>
    for(int i=0;i<EPOLLSIZE;i++){
    8020c232:	04e1                	addi	s1,s1,24
    8020c234:	07448c63          	beq	s1,s4,8020c2ac <epoll_pwait+0x126>
      if(fd->fd<0||fd->fd>=NOFILEMAX(p)||!p->ofile[fd->fd])continue;
    8020c238:	8926                	mv	s2,s1
    8020c23a:	409c                	lw	a5,0(s1)
    8020c23c:	fe07cbe3          	bltz	a5,8020c232 <epoll_pwait+0xac>
    8020c240:	0e09b703          	ld	a4,224(s3)
    8020c244:	00ead363          	bge	s5,a4,8020c24a <epoll_pwait+0xc4>
    8020c248:	875a                	mv	a4,s6
    8020c24a:	fee7d4e3          	bge	a5,a4,8020c232 <epoll_pwait+0xac>
    8020c24e:	0e89b703          	ld	a4,232(s3)
    8020c252:	078e                	slli	a5,a5,0x3
    8020c254:	97ba                	add	a5,a5,a4
    8020c256:	6388                	ld	a0,0(a5)
    8020c258:	dd69                	beqz	a0,8020c232 <epoll_pwait+0xac>
	if (!fp->epollv)
    8020c25a:	713c                	ld	a5,96(a0)
    8020c25c:	dbe9                	beqz	a5,8020c22e <epoll_pwait+0xa8>
	return fp->epollv(fp,pt);
    8020c25e:	c7040593          	addi	a1,s0,-912
    8020c262:	9782                	jalr	a5
    8020c264:	0005061b          	sext.w	a2,a0
      events&=fd->events.events;
    8020c268:	00892503          	lw	a0,8(s2)
    8020c26c:	8e69                	and	a2,a2,a0
      if(events){
    8020c26e:	d271                	beqz	a2,8020c232 <epoll_pwait+0xac>
        wait.pt.func = NULL;
    8020c270:	c6043823          	sd	zero,-912(s0)
          .data = fd->events.data
    8020c274:	01093783          	ld	a5,16(s2)
        epoll_event = (struct epoll_event){
    8020c278:	c6c42023          	sw	a2,-928(s0)
    8020c27c:	c6f43423          	sd	a5,-920(s0)
        printf("fd %d ok with events:%p\n", fd->fd, events);
    8020c280:	00092583          	lw	a1,0(s2)
    8020c284:	8566                	mv	a0,s9
    8020c286:	ffffd097          	auipc	ra,0xffffd
    8020c28a:	00e080e7          	jalr	14(ra) # 80209294 <printf>
        		, events_addr+ret*sizeof(struct epoll_event)
    8020c28e:	004b9593          	slli	a1,s7,0x4
        if(either_copyout(1
    8020c292:	46c1                	li	a3,16
    8020c294:	c6040613          	addi	a2,s0,-928
    8020c298:	95e2                	add	a1,a1,s8
    8020c29a:	4505                	li	a0,1
    8020c29c:	fffff097          	auipc	ra,0xfffff
    8020c2a0:	79a080e7          	jalr	1946(ra) # 8020ba36 <either_copyout>
    8020c2a4:	06054563          	bltz	a0,8020c30e <epoll_pwait+0x188>
        ret++;
    8020c2a8:	2b85                	addiw	s7,s7,1
    8020c2aa:	b761                	j	8020c232 <epoll_pwait+0xac>
    wait.pt.func = NULL;		// only need to be called once for each file
    8020c2ac:	c6043823          	sd	zero,-912(s0)
    if (ret > 0 || immediate)	// got results or don't sleep-wait
    8020c2b0:	03704f63          	bgtz	s7,8020c2ee <epoll_pwait+0x168>
    8020c2b4:	020d1d63          	bnez	s10,8020c2ee <epoll_pwait+0x168>
    if (wait.error) {
    8020c2b8:	c8043783          	ld	a5,-896(s0)
    8020c2bc:	e79d                	bnez	a5,8020c2ea <epoll_pwait+0x164>
    if (poll_sched_timeout(&wait, timeout))
    8020c2be:	c5043583          	ld	a1,-944(s0)
    8020c2c2:	c7040513          	addi	a0,s0,-912
    8020c2c6:	00000097          	auipc	ra,0x0
    8020c2ca:	94e080e7          	jalr	-1714(ra) # 8020bc14 <poll_sched_timeout>
    8020c2ce:	8d2a                	mv	s10,a0
    if (myproc()->killed) {
    8020c2d0:	00000097          	auipc	ra,0x0
    8020c2d4:	0e2080e7          	jalr	226(ra) # 8020c3b2 <myproc>
    8020c2d8:	5d1c                	lw	a5,56(a0)
      immediate = 1;
    8020c2da:	01a03d33          	snez	s10,s10
    if (myproc()->killed) {
    8020c2de:	df85                	beqz	a5,8020c216 <epoll_pwait+0x90>
      wait.error = -EINTR;
    8020c2e0:	57f1                	li	a5,-4
    8020c2e2:	c8f43023          	sd	a5,-896(s0)
      immediate = 1;
    8020c2e6:	4d05                	li	s10,1
    8020c2e8:	b73d                	j	8020c216 <epoll_pwait+0x90>
      ret = wait.error;
    8020c2ea:	00078b9b          	sext.w	s7,a5
    }
  }
  poll_end(&wait);
    8020c2ee:	c7040513          	addi	a0,s0,-912
    8020c2f2:	00000097          	auipc	ra,0x0
    8020c2f6:	88c080e7          	jalr	-1908(ra) # 8020bb7e <poll_end>
  printf("epoll pwait leave:%d\n",ret);
    8020c2fa:	85de                	mv	a1,s7
    8020c2fc:	00009517          	auipc	a0,0x9
    8020c300:	f0c50513          	addi	a0,a0,-244 # 80215208 <digits+0x6e0>
    8020c304:	ffffd097          	auipc	ra,0xffffd
    8020c308:	f90080e7          	jalr	-112(ra) # 80209294 <printf>
  /*
  while(1){
  
  }
  */
  return ret;
    8020c30c:	a011                	j	8020c310 <epoll_pwait+0x18a>
           return -1;		
    8020c30e:	5bfd                	li	s7,-1
}
    8020c310:	855e                	mv	a0,s7
    8020c312:	3a813083          	ld	ra,936(sp)
    8020c316:	3a013403          	ld	s0,928(sp)
    8020c31a:	39813483          	ld	s1,920(sp)
    8020c31e:	39013903          	ld	s2,912(sp)
    8020c322:	38813983          	ld	s3,904(sp)
    8020c326:	38013a03          	ld	s4,896(sp)
    8020c32a:	37813a83          	ld	s5,888(sp)
    8020c32e:	37013b03          	ld	s6,880(sp)
    8020c332:	36813b83          	ld	s7,872(sp)
    8020c336:	36013c03          	ld	s8,864(sp)
    8020c33a:	35813c83          	ld	s9,856(sp)
    8020c33e:	35013d03          	ld	s10,848(sp)
    8020c342:	34813d83          	ld	s11,840(sp)
    8020c346:	3b010113          	addi	sp,sp,944
    8020c34a:	8082                	ret
  poll_init(&wait);
    8020c34c:	c7040513          	addi	a0,s0,-912
    8020c350:	00000097          	auipc	ra,0x0
    8020c354:	80c080e7          	jalr	-2036(ra) # 8020bb5c <poll_init>
    wait.pt.func = NULL;		// we won't be inserted into any queue in later poll()s
    8020c358:	c6043823          	sd	zero,-912(s0)
    8020c35c:	4d05                	li	s10,1
    8020c35e:	bd71                	j	8020c1fa <epoll_pwait+0x74>

000000008020c360 <cpuinit>:

// #define DEBUG1
struct cpu cpus[NCPU];

void
cpuinit(void){
    8020c360:	1141                	addi	sp,sp,-16
    8020c362:	e406                	sd	ra,8(sp)
    8020c364:	e022                	sd	s0,0(sp)
    8020c366:	0800                	addi	s0,sp,16
  memset(cpus, 0, sizeof(cpus));
    8020c368:	28000613          	li	a2,640
    8020c36c:	4581                	li	a1,0
    8020c36e:	05162517          	auipc	a0,0x5162
    8020c372:	e3a50513          	addi	a0,a0,-454 # 8536e1a8 <cpus>
    8020c376:	ffff5097          	auipc	ra,0xffff5
    8020c37a:	9fe080e7          	jalr	-1538(ra) # 80200d74 <memset>
}
    8020c37e:	60a2                	ld	ra,8(sp)
    8020c380:	6402                	ld	s0,0(sp)
    8020c382:	0141                	addi	sp,sp,16
    8020c384:	8082                	ret

000000008020c386 <cpuid>:
// Must be called with interrupts disabled,
// to prevent race with process being moved
// to a different CPU.
int
cpuid()
{
    8020c386:	1141                	addi	sp,sp,-16
    8020c388:	e422                	sd	s0,8(sp)
    8020c38a:	0800                	addi	s0,sp,16
  asm volatile("mv %0, tp" : "=r" (x) );
    8020c38c:	8512                	mv	a0,tp
  int id = r_tp();
  return id;
}
    8020c38e:	2501                	sext.w	a0,a0
    8020c390:	6422                	ld	s0,8(sp)
    8020c392:	0141                	addi	sp,sp,16
    8020c394:	8082                	ret

000000008020c396 <mycpu>:

// Return this CPU's cpu struct.
// Interrupts must be disabled.
struct cpu*
mycpu(void) {
    8020c396:	1141                	addi	sp,sp,-16
    8020c398:	e422                	sd	s0,8(sp)
    8020c39a:	0800                	addi	s0,sp,16
    8020c39c:	8792                	mv	a5,tp
  int id = cpuid();
  struct cpu *c = &cpus[id];
    8020c39e:	2781                	sext.w	a5,a5
    8020c3a0:	079e                	slli	a5,a5,0x7
  
  return c;
}
    8020c3a2:	05162517          	auipc	a0,0x5162
    8020c3a6:	e0650513          	addi	a0,a0,-506 # 8536e1a8 <cpus>
    8020c3aa:	953e                	add	a0,a0,a5
    8020c3ac:	6422                	ld	s0,8(sp)
    8020c3ae:	0141                	addi	sp,sp,16
    8020c3b0:	8082                	ret

000000008020c3b2 <myproc>:

// Return the current struct proc *, or zero if none.
struct proc*
myproc(void) {
    8020c3b2:	1101                	addi	sp,sp,-32
    8020c3b4:	ec06                	sd	ra,24(sp)
    8020c3b6:	e822                	sd	s0,16(sp)
    8020c3b8:	e426                	sd	s1,8(sp)
    8020c3ba:	1000                	addi	s0,sp,32
  push_off();
    8020c3bc:	ffff5097          	auipc	ra,0xffff5
    8020c3c0:	c46080e7          	jalr	-954(ra) # 80201002 <push_off>
    8020c3c4:	8792                	mv	a5,tp
  struct cpu *c = mycpu();
  struct proc *p = c->proc;
    8020c3c6:	2781                	sext.w	a5,a5
    8020c3c8:	079e                	slli	a5,a5,0x7
    8020c3ca:	05162717          	auipc	a4,0x5162
    8020c3ce:	dde70713          	addi	a4,a4,-546 # 8536e1a8 <cpus>
    8020c3d2:	97ba                	add	a5,a5,a4
    8020c3d4:	6384                	ld	s1,0(a5)
  pop_off();
    8020c3d6:	ffff5097          	auipc	ra,0xffff5
    8020c3da:	c78080e7          	jalr	-904(ra) # 8020104e <pop_off>
  return p;
}
    8020c3de:	8526                	mv	a0,s1
    8020c3e0:	60e2                	ld	ra,24(sp)
    8020c3e2:	6442                	ld	s0,16(sp)
    8020c3e4:	64a2                	ld	s1,8(sp)
    8020c3e6:	6105                	addi	sp,sp,32
    8020c3e8:	8082                	ret

000000008020c3ea <alloc_vma>:
  uint64 sz,
  int perm,
  int alloc,
  uint64 pa
)
{
    8020c3ea:	711d                	addi	sp,sp,-96
    8020c3ec:	ec86                	sd	ra,88(sp)
    8020c3ee:	e8a2                	sd	s0,80(sp)
    8020c3f0:	e4a6                	sd	s1,72(sp)
    8020c3f2:	e0ca                	sd	s2,64(sp)
    8020c3f4:	fc4e                	sd	s3,56(sp)
    8020c3f6:	f852                	sd	s4,48(sp)
    8020c3f8:	f456                	sd	s5,40(sp)
    8020c3fa:	f05a                	sd	s6,32(sp)
    8020c3fc:	ec5e                	sd	s7,24(sp)
    8020c3fe:	e862                	sd	s8,16(sp)
    8020c400:	e466                	sd	s9,8(sp)
    8020c402:	e06a                	sd	s10,0(sp)
    8020c404:	1080                	addi	s0,sp,96
    8020c406:	8aaa                	mv	s5,a0
  if(p == NULL)
    8020c408:	c945                	beqz	a0,8020c4b8 <alloc_vma+0xce>
    8020c40a:	8bae                	mv	s7,a1
    8020c40c:	8a36                	mv	s4,a3
    8020c40e:	8b3a                	mv	s6,a4
    8020c410:	8cbe                	mv	s9,a5
    8020c412:	8c42                	mv	s8,a6
  {
    __debug_warn("[alloc_vma] proc is null\n");
    return NULL;
  }

  uint64 start = PGROUNDDOWN(addr);
    8020c414:	77fd                	lui	a5,0xfffff
    8020c416:	00f679b3          	and	s3,a2,a5
  uint64 end = addr + sz;
  end = PGROUNDUP(end);
    8020c41a:	6905                	lui	s2,0x1
    8020c41c:	197d                	addi	s2,s2,-1
    8020c41e:	9936                	add	s2,s2,a3
    8020c420:	9932                	add	s2,s2,a2
    8020c422:	00f97933          	and	s2,s2,a5

  struct vma *vma_head = p->vma;
    8020c426:	17053783          	ld	a5,368(a0)
  struct vma *nvma = vma_head->next;
    8020c42a:	63a4                	ld	s1,64(a5)

  while(nvma != vma_head)
    8020c42c:	00978b63          	beq	a5,s1,8020c442 <alloc_vma+0x58>
  {
    if(end <= nvma->addr)
    8020c430:	6490                	ld	a2,8(s1)
    8020c432:	01267863          	bgeu	a2,s2,8020c442 <alloc_vma+0x58>
    {
      break;
    }
    else if (start >= nvma->end)
    8020c436:	6c90                	ld	a2,24(s1)
    8020c438:	08c9ea63          	bltu	s3,a2,8020c4cc <alloc_vma+0xe2>
    {
      nvma = nvma->next;
    8020c43c:	60a4                	ld	s1,64(s1)
  while(nvma != vma_head)
    8020c43e:	fe9799e3          	bne	a5,s1,8020c430 <alloc_vma+0x46>
    {
      __debug_warn("[alloc_vma] vma address overflow\n");
      return NULL;
    }
  }
  struct vma *vma = (struct vma*)kmalloc(sizeof(struct vma));
    8020c442:	04800513          	li	a0,72
    8020c446:	ffffe097          	auipc	ra,0xffffe
    8020c44a:	b76080e7          	jalr	-1162(ra) # 80209fbc <kmalloc>
    8020c44e:	8d2a                	mv	s10,a0
  if(vma == NULL)
    8020c450:	c941                	beqz	a0,8020c4e0 <alloc_vma+0xf6>
  {
    __debug_warn("[alloc_vma] vma kmalloc failed\n");
    return NULL;
  }
  
  if(sz != 0)
    8020c452:	000a0763          	beqz	s4,8020c460 <alloc_vma+0x76>
  {
    if(alloc == 1)
    8020c456:	4785                	li	a5,1
    8020c458:	08fc8d63          	beq	s9,a5,8020c4f2 <alloc_vma+0x108>
      {
        __debug_warn("[alloc_vma] uvmalloc start = %p, end = %p fail\n", start, end);
        goto bad;
      }
    }
    else if(pa != 0)
    8020c45c:	0c0c1063          	bnez	s8,8020c51c <alloc_vma+0x132>
        goto bad;
      }
    }
  }
  
  vma->addr = start;
    8020c460:	013d3423          	sd	s3,8(s10)
  vma->sz = sz;
    8020c464:	014d3823          	sd	s4,16(s10)
  vma->end = end;
    8020c468:	012d3c23          	sd	s2,24(s10)
  vma->perm = perm;
    8020c46c:	016d2223          	sw	s6,4(s10)
  vma->fd = -1;
    8020c470:	57fd                	li	a5,-1
    8020c472:	02fd2623          	sw	a5,44(s10)
  vma->f_off = 0;
    8020c476:	020d3823          	sd	zero,48(s10)
  vma->flags = 0;
    8020c47a:	020d2423          	sw	zero,40(s10)
  vma->mmap = 0;
    8020c47e:	020d3023          	sd	zero,32(s10)
  vma->type = type;
    8020c482:	017d2023          	sw	s7,0(s10)

  vma->prev = nvma->prev;
    8020c486:	7c9c                	ld	a5,56(s1)
    8020c488:	02fd3c23          	sd	a5,56(s10)
  vma->next = nvma;
    8020c48c:	049d3023          	sd	s1,64(s10)
  nvma->prev->next = vma;
    8020c490:	7c9c                	ld	a5,56(s1)
    8020c492:	05a7b023          	sd	s10,64(a5) # fffffffffffff040 <kernel_end+0xffffffff7ac90040>
  nvma->prev = vma;
    8020c496:	03a4bc23          	sd	s10,56(s1)
  return vma;

bad:
  kfree(vma);
  return NULL;
}
    8020c49a:	856a                	mv	a0,s10
    8020c49c:	60e6                	ld	ra,88(sp)
    8020c49e:	6446                	ld	s0,80(sp)
    8020c4a0:	64a6                	ld	s1,72(sp)
    8020c4a2:	6906                	ld	s2,64(sp)
    8020c4a4:	79e2                	ld	s3,56(sp)
    8020c4a6:	7a42                	ld	s4,48(sp)
    8020c4a8:	7aa2                	ld	s5,40(sp)
    8020c4aa:	7b02                	ld	s6,32(sp)
    8020c4ac:	6be2                	ld	s7,24(sp)
    8020c4ae:	6c42                	ld	s8,16(sp)
    8020c4b0:	6ca2                	ld	s9,8(sp)
    8020c4b2:	6d02                	ld	s10,0(sp)
    8020c4b4:	6125                	addi	sp,sp,96
    8020c4b6:	8082                	ret
    __debug_warn("[alloc_vma] proc is null\n");
    8020c4b8:	00009517          	auipc	a0,0x9
    8020c4bc:	d6850513          	addi	a0,a0,-664 # 80215220 <digits+0x6f8>
    8020c4c0:	ffffd097          	auipc	ra,0xffffd
    8020c4c4:	1b0080e7          	jalr	432(ra) # 80209670 <__debug_warn>
    return NULL;
    8020c4c8:	8d56                	mv	s10,s5
    8020c4ca:	bfc1                	j	8020c49a <alloc_vma+0xb0>
      __debug_warn("[alloc_vma] vma address overflow\n");
    8020c4cc:	00009517          	auipc	a0,0x9
    8020c4d0:	d7450513          	addi	a0,a0,-652 # 80215240 <digits+0x718>
    8020c4d4:	ffffd097          	auipc	ra,0xffffd
    8020c4d8:	19c080e7          	jalr	412(ra) # 80209670 <__debug_warn>
      return NULL;
    8020c4dc:	4d01                	li	s10,0
    8020c4de:	bf75                	j	8020c49a <alloc_vma+0xb0>
    __debug_warn("[alloc_vma] vma kmalloc failed\n");
    8020c4e0:	00009517          	auipc	a0,0x9
    8020c4e4:	d8850513          	addi	a0,a0,-632 # 80215268 <digits+0x740>
    8020c4e8:	ffffd097          	auipc	ra,0xffffd
    8020c4ec:	188080e7          	jalr	392(ra) # 80209670 <__debug_warn>
    return NULL;
    8020c4f0:	b76d                	j	8020c49a <alloc_vma+0xb0>
      if(uvmalloc(p->pagetable, start, end, perm) != 0)
    8020c4f2:	86da                	mv	a3,s6
    8020c4f4:	864a                	mv	a2,s2
    8020c4f6:	85ce                	mv	a1,s3
    8020c4f8:	060ab503          	ld	a0,96(s5)
    8020c4fc:	ffffe097          	auipc	ra,0xffffe
    8020c500:	30c080e7          	jalr	780(ra) # 8020a808 <uvmalloc>
    8020c504:	dd31                	beqz	a0,8020c460 <alloc_vma+0x76>
        __debug_warn("[alloc_vma] uvmalloc start = %p, end = %p fail\n", start, end);
    8020c506:	864a                	mv	a2,s2
    8020c508:	85ce                	mv	a1,s3
    8020c50a:	00009517          	auipc	a0,0x9
    8020c50e:	d7e50513          	addi	a0,a0,-642 # 80215288 <digits+0x760>
    8020c512:	ffffd097          	auipc	ra,0xffffd
    8020c516:	15e080e7          	jalr	350(ra) # 80209670 <__debug_warn>
        goto bad;
    8020c51a:	a025                	j	8020c542 <alloc_vma+0x158>
      if(mappages(p->pagetable, start, sz, pa, perm) != 0)
    8020c51c:	875a                	mv	a4,s6
    8020c51e:	86e2                	mv	a3,s8
    8020c520:	8652                	mv	a2,s4
    8020c522:	85ce                	mv	a1,s3
    8020c524:	060ab503          	ld	a0,96(s5)
    8020c528:	ffffe097          	auipc	ra,0xffffe
    8020c52c:	eae080e7          	jalr	-338(ra) # 8020a3d6 <mappages>
    8020c530:	d905                	beqz	a0,8020c460 <alloc_vma+0x76>
        __debug_warn("[alloc_vma] mappages failed\n");
    8020c532:	00009517          	auipc	a0,0x9
    8020c536:	d8650513          	addi	a0,a0,-634 # 802152b8 <digits+0x790>
    8020c53a:	ffffd097          	auipc	ra,0xffffd
    8020c53e:	136080e7          	jalr	310(ra) # 80209670 <__debug_warn>
  kfree(vma);
    8020c542:	856a                	mv	a0,s10
    8020c544:	ffffe097          	auipc	ra,0xffffe
    8020c548:	cc2080e7          	jalr	-830(ra) # 8020a206 <kfree>
  return NULL;
    8020c54c:	4d01                	li	s10,0
    8020c54e:	b7b1                	j	8020c49a <alloc_vma+0xb0>

000000008020c550 <type_locate_vma>:


struct vma* type_locate_vma(struct vma *head, enum segtype type)
{
    8020c550:	1141                	addi	sp,sp,-16
    8020c552:	e422                	sd	s0,8(sp)
    8020c554:	0800                	addi	s0,sp,16
    8020c556:	87aa                	mv	a5,a0
  struct vma *vma = NULL;

  if(type == LOAD)
    8020c558:	4705                	li	a4,1
    8020c55a:	00e58f63          	beq	a1,a4,8020c578 <type_locate_vma+0x28>
      vma = vma->prev;
    }
  }
  else
  {
    vma = head->next;
    8020c55e:	6128                	ld	a0,64(a0)
    while(vma != head)
    8020c560:	02a78a63          	beq	a5,a0,8020c594 <type_locate_vma+0x44>
    {
      if(vma->type == type)
    8020c564:	4118                	lw	a4,0(a0)
    8020c566:	00b70663          	beq	a4,a1,8020c572 <type_locate_vma+0x22>
      {
        return vma;
      }
      vma = vma->next;
    8020c56a:	6128                	ld	a0,64(a0)
    while(vma != head)
    8020c56c:	fea79ce3          	bne	a5,a0,8020c564 <type_locate_vma+0x14>
    }
  }
 
  return NULL;
    8020c570:	4501                	li	a0,0
}
    8020c572:	6422                	ld	s0,8(sp)
    8020c574:	0141                	addi	sp,sp,16
    8020c576:	8082                	ret
    vma = head->prev;
    8020c578:	7d08                	ld	a0,56(a0)
    while(vma != head)
    8020c57a:	00a78b63          	beq	a5,a0,8020c590 <type_locate_vma+0x40>
      if(vma->type == type)
    8020c57e:	4685                	li	a3,1
    8020c580:	4118                	lw	a4,0(a0)
    8020c582:	fed708e3          	beq	a4,a3,8020c572 <type_locate_vma+0x22>
      vma = vma->prev;
    8020c586:	7d08                	ld	a0,56(a0)
    while(vma != head)
    8020c588:	fea79ce3          	bne	a5,a0,8020c580 <type_locate_vma+0x30>
  return NULL;
    8020c58c:	4501                	li	a0,0
    8020c58e:	b7d5                	j	8020c572 <type_locate_vma+0x22>
    8020c590:	4501                	li	a0,0
    8020c592:	b7c5                	j	8020c572 <type_locate_vma+0x22>
    8020c594:	4501                	li	a0,0
    8020c596:	bff1                	j	8020c572 <type_locate_vma+0x22>

000000008020c598 <addr_locate_vma>:

struct vma *addr_locate_vma(struct vma*head, uint64 addr)
{
    8020c598:	1141                	addi	sp,sp,-16
    8020c59a:	e422                	sd	s0,8(sp)
    8020c59c:	0800                	addi	s0,sp,16
    8020c59e:	872a                	mv	a4,a0
  struct vma *vma = head->next;
    8020c5a0:	6128                	ld	a0,64(a0)
  while(vma != head)
    8020c5a2:	00a71763          	bne	a4,a0,8020c5b0 <addr_locate_vma+0x18>
    {
      return vma;
    }
    vma = vma->next;
  }
  return NULL;
    8020c5a6:	4501                	li	a0,0
    8020c5a8:	a821                	j	8020c5c0 <addr_locate_vma+0x28>
    vma = vma->next;
    8020c5aa:	6128                	ld	a0,64(a0)
  while(vma != head)
    8020c5ac:	00a70963          	beq	a4,a0,8020c5be <addr_locate_vma+0x26>
    if(vma->addr <= addr && addr < vma->end)
    8020c5b0:	651c                	ld	a5,8(a0)
    8020c5b2:	fef5ece3          	bltu	a1,a5,8020c5aa <addr_locate_vma+0x12>
    8020c5b6:	6d1c                	ld	a5,24(a0)
    8020c5b8:	fef5f9e3          	bgeu	a1,a5,8020c5aa <addr_locate_vma+0x12>
    8020c5bc:	a011                	j	8020c5c0 <addr_locate_vma+0x28>
  return NULL;
    8020c5be:	4501                	li	a0,0
}
    8020c5c0:	6422                	ld	s0,8(sp)
    8020c5c2:	0141                	addi	sp,sp,16
    8020c5c4:	8082                	ret

000000008020c5c6 <part_locate_vma>:

struct vma *part_locate_vma(struct vma *head, uint64 start, uint64 end)
{
    8020c5c6:	7179                	addi	sp,sp,-48
    8020c5c8:	f406                	sd	ra,40(sp)
    8020c5ca:	f022                	sd	s0,32(sp)
    8020c5cc:	ec26                	sd	s1,24(sp)
    8020c5ce:	e84a                	sd	s2,16(sp)
    8020c5d0:	e44e                	sd	s3,8(sp)
    8020c5d2:	e052                	sd	s4,0(sp)
    8020c5d4:	1800                	addi	s0,sp,48
    8020c5d6:	89aa                	mv	s3,a0
    8020c5d8:	8a2e                	mv	s4,a1
    8020c5da:	8932                	mv	s2,a2
  struct vma *a = addr_locate_vma(head, start);
    8020c5dc:	00000097          	auipc	ra,0x0
    8020c5e0:	fbc080e7          	jalr	-68(ra) # 8020c598 <addr_locate_vma>
    8020c5e4:	84aa                	mv	s1,a0
  struct vma *b = addr_locate_vma(head, end-1);
    8020c5e6:	fff90593          	addi	a1,s2,-1 # fff <_entry-0x801ff001>
    8020c5ea:	854e                	mv	a0,s3
    8020c5ec:	00000097          	auipc	ra,0x0
    8020c5f0:	fac080e7          	jalr	-84(ra) # 8020c598 <addr_locate_vma>
  if(!a || !b || a != b)
    8020c5f4:	cc81                	beqz	s1,8020c60c <part_locate_vma+0x46>
    8020c5f6:	c919                	beqz	a0,8020c60c <part_locate_vma+0x46>
    8020c5f8:	00a49a63          	bne	s1,a0,8020c60c <part_locate_vma+0x46>
  {
    __debug_warn("[part_locate_vma] start = %p, end = %p, not found\n", start, end);
    return NULL;
  }
  return a;
}
    8020c5fc:	70a2                	ld	ra,40(sp)
    8020c5fe:	7402                	ld	s0,32(sp)
    8020c600:	64e2                	ld	s1,24(sp)
    8020c602:	6942                	ld	s2,16(sp)
    8020c604:	69a2                	ld	s3,8(sp)
    8020c606:	6a02                	ld	s4,0(sp)
    8020c608:	6145                	addi	sp,sp,48
    8020c60a:	8082                	ret
    __debug_warn("[part_locate_vma] start = %p, end = %p, not found\n", start, end);
    8020c60c:	864a                	mv	a2,s2
    8020c60e:	85d2                	mv	a1,s4
    8020c610:	00009517          	auipc	a0,0x9
    8020c614:	cc850513          	addi	a0,a0,-824 # 802152d8 <digits+0x7b0>
    8020c618:	ffffd097          	auipc	ra,0xffffd
    8020c61c:	058080e7          	jalr	88(ra) # 80209670 <__debug_warn>
    return NULL;
    8020c620:	4501                	li	a0,0
    8020c622:	bfe9                	j	8020c5fc <part_locate_vma+0x36>

000000008020c624 <alloc_mmap_vma>:

struct vma* alloc_mmap_vma(struct proc *p, int flags, uint64 addr, uint64 sz, int perm, int fd ,uint64 f_off)
{
    8020c624:	715d                	addi	sp,sp,-80
    8020c626:	e486                	sd	ra,72(sp)
    8020c628:	e0a2                	sd	s0,64(sp)
    8020c62a:	fc26                	sd	s1,56(sp)
    8020c62c:	f84a                	sd	s2,48(sp)
    8020c62e:	f44e                	sd	s3,40(sp)
    8020c630:	f052                	sd	s4,32(sp)
    8020c632:	ec56                	sd	s5,24(sp)
    8020c634:	e85a                	sd	s6,16(sp)
    8020c636:	e45e                	sd	s7,8(sp)
    8020c638:	0880                	addi	s0,sp,80
    8020c63a:	892a                	mv	s2,a0
    8020c63c:	89ae                	mv	s3,a1
    8020c63e:	84b2                	mv	s1,a2
    8020c640:	8b36                	mv	s6,a3
    8020c642:	8bba                	mv	s7,a4
    8020c644:	8abe                	mv	s5,a5
    8020c646:	8a42                	mv	s4,a6
  struct vma *vma = NULL;

  struct vma *mvma = type_locate_vma(p->vma, MMAP);
    8020c648:	4599                	li	a1,6
    8020c64a:	17053503          	ld	a0,368(a0)
    8020c64e:	00000097          	auipc	ra,0x0
    8020c652:	f02080e7          	jalr	-254(ra) # 8020c550 <type_locate_vma>
  if(addr == 0)
    8020c656:	e491                	bnez	s1,8020c662 <alloc_mmap_vma+0x3e>
  {
    addr = PGROUNDDOWN(mvma->addr - sz);
    8020c658:	6504                	ld	s1,8(a0)
    8020c65a:	416484b3          	sub	s1,s1,s6
    8020c65e:	767d                	lui	a2,0xfffff
    8020c660:	8cf1                	and	s1,s1,a2
    // __debug_info("[alloc_mmap_vma] addr = %p\n", addr);
  }

  vma = alloc_vma(p, MMAP, addr, sz, perm, 1, NULL);
    8020c662:	4801                	li	a6,0
    8020c664:	4785                	li	a5,1
    8020c666:	875e                	mv	a4,s7
    8020c668:	86da                	mv	a3,s6
    8020c66a:	8626                	mv	a2,s1
    8020c66c:	4599                	li	a1,6
    8020c66e:	854a                	mv	a0,s2
    8020c670:	00000097          	auipc	ra,0x0
    8020c674:	d7a080e7          	jalr	-646(ra) # 8020c3ea <alloc_vma>
    8020c678:	84aa                	mv	s1,a0
  if(vma == NULL)
    8020c67a:	c11d                	beqz	a0,8020c6a0 <alloc_mmap_vma+0x7c>
  {
    __debug_warn("[alloc_mmap_vma] alloc failed\n");
    return NULL;
  }

  vma->fd = fd;
    8020c67c:	03552623          	sw	s5,44(a0)
  vma->f_off = f_off;
    8020c680:	03453823          	sd	s4,48(a0)
  vma->flags = flags;
    8020c684:	03352423          	sw	s3,40(a0)
  return vma;
}
    8020c688:	8526                	mv	a0,s1
    8020c68a:	60a6                	ld	ra,72(sp)
    8020c68c:	6406                	ld	s0,64(sp)
    8020c68e:	74e2                	ld	s1,56(sp)
    8020c690:	7942                	ld	s2,48(sp)
    8020c692:	79a2                	ld	s3,40(sp)
    8020c694:	7a02                	ld	s4,32(sp)
    8020c696:	6ae2                	ld	s5,24(sp)
    8020c698:	6b42                	ld	s6,16(sp)
    8020c69a:	6ba2                	ld	s7,8(sp)
    8020c69c:	6161                	addi	sp,sp,80
    8020c69e:	8082                	ret
    __debug_warn("[alloc_mmap_vma] alloc failed\n");
    8020c6a0:	00009517          	auipc	a0,0x9
    8020c6a4:	c7050513          	addi	a0,a0,-912 # 80215310 <digits+0x7e8>
    8020c6a8:	ffffd097          	auipc	ra,0xffffd
    8020c6ac:	fc8080e7          	jalr	-56(ra) # 80209670 <__debug_warn>
    return NULL;
    8020c6b0:	bfe1                	j	8020c688 <alloc_mmap_vma+0x64>

000000008020c6b2 <alloc_stack_vma>:

struct vma *alloc_stack_vma(struct proc *p, uint64 addr, int perm)
{
    8020c6b2:	7179                	addi	sp,sp,-48
    8020c6b4:	f406                	sd	ra,40(sp)
    8020c6b6:	f022                	sd	s0,32(sp)
    8020c6b8:	ec26                	sd	s1,24(sp)
    8020c6ba:	e84a                	sd	s2,16(sp)
    8020c6bc:	e44e                	sd	s3,8(sp)
    8020c6be:	e052                	sd	s4,0(sp)
    8020c6c0:	1800                	addi	s0,sp,48
    8020c6c2:	89aa                	mv	s3,a0
    8020c6c4:	84ae                	mv	s1,a1
    8020c6c6:	8a32                	mv	s4,a2
  struct vma *vma = type_locate_vma(p->vma, STACK);
    8020c6c8:	459d                	li	a1,7
    8020c6ca:	17053503          	ld	a0,368(a0)
    8020c6ce:	00000097          	auipc	ra,0x0
    8020c6d2:	e82080e7          	jalr	-382(ra) # 8020c550 <type_locate_vma>
  uint64 start = PGROUNDDOWN(addr);
    8020c6d6:	75fd                	lui	a1,0xfffff
    8020c6d8:	8de5                	and	a1,a1,s1
  uint64 end = vma->addr;
    8020c6da:	6510                	ld	a2,8(a0)
  vma->addr = start;
    8020c6dc:	e50c                	sd	a1,8(a0)
  if(start < USER_STACK_TOP)
    8020c6de:	6ffff7b7          	lui	a5,0x6ffff
    8020c6e2:	02f5e863          	bltu	a1,a5,8020c712 <alloc_stack_vma+0x60>
    8020c6e6:	892a                	mv	s2,a0
  {
    __debug_warn("[alloc_stack_vma] stack address illegal\n");
    return NULL;
  }
  vma->sz += (end - start);
    8020c6e8:	691c                	ld	a5,16(a0)
    8020c6ea:	97b2                	add	a5,a5,a2
    8020c6ec:	8f8d                	sub	a5,a5,a1
    8020c6ee:	e91c                	sd	a5,16(a0)
  if(uvmalloc(p->pagetable, start, end, perm) != 0)
    8020c6f0:	86d2                	mv	a3,s4
    8020c6f2:	0609b503          	ld	a0,96(s3)
    8020c6f6:	ffffe097          	auipc	ra,0xffffe
    8020c6fa:	112080e7          	jalr	274(ra) # 8020a808 <uvmalloc>
    8020c6fe:	e505                	bnez	a0,8020c726 <alloc_stack_vma+0x74>
  {
    __debug_warn("[alloc_stack_vma] stack vma alloc fail\n");
    return NULL;
  }
  return vma;
}
    8020c700:	854a                	mv	a0,s2
    8020c702:	70a2                	ld	ra,40(sp)
    8020c704:	7402                	ld	s0,32(sp)
    8020c706:	64e2                	ld	s1,24(sp)
    8020c708:	6942                	ld	s2,16(sp)
    8020c70a:	69a2                	ld	s3,8(sp)
    8020c70c:	6a02                	ld	s4,0(sp)
    8020c70e:	6145                	addi	sp,sp,48
    8020c710:	8082                	ret
    __debug_warn("[alloc_stack_vma] stack address illegal\n");
    8020c712:	00009517          	auipc	a0,0x9
    8020c716:	c1e50513          	addi	a0,a0,-994 # 80215330 <digits+0x808>
    8020c71a:	ffffd097          	auipc	ra,0xffffd
    8020c71e:	f56080e7          	jalr	-170(ra) # 80209670 <__debug_warn>
    return NULL;
    8020c722:	4901                	li	s2,0
    8020c724:	bff1                	j	8020c700 <alloc_stack_vma+0x4e>
    __debug_warn("[alloc_stack_vma] stack vma alloc fail\n");
    8020c726:	00009517          	auipc	a0,0x9
    8020c72a:	c3a50513          	addi	a0,a0,-966 # 80215360 <digits+0x838>
    8020c72e:	ffffd097          	auipc	ra,0xffffd
    8020c732:	f42080e7          	jalr	-190(ra) # 80209670 <__debug_warn>
    return NULL;
    8020c736:	4901                	li	s2,0
    8020c738:	b7e1                	j	8020c700 <alloc_stack_vma+0x4e>

000000008020c73a <alloc_addr_heap_vma>:
 
struct vma *alloc_addr_heap_vma(struct proc *p, uint64 addr, int perm)
{
    8020c73a:	7139                	addi	sp,sp,-64
    8020c73c:	fc06                	sd	ra,56(sp)
    8020c73e:	f822                	sd	s0,48(sp)
    8020c740:	f426                	sd	s1,40(sp)
    8020c742:	f04a                	sd	s2,32(sp)
    8020c744:	ec4e                	sd	s3,24(sp)
    8020c746:	e852                	sd	s4,16(sp)
    8020c748:	e456                	sd	s5,8(sp)
    8020c74a:	0080                	addi	s0,sp,64
    8020c74c:	89aa                	mv	s3,a0
    8020c74e:	84ae                	mv	s1,a1
    8020c750:	8a32                	mv	s4,a2
  struct vma *vma = type_locate_vma(p->vma, HEAP);
    8020c752:	17053a83          	ld	s5,368(a0)
    8020c756:	4595                	li	a1,5
    8020c758:	8556                	mv	a0,s5
    8020c75a:	00000097          	auipc	ra,0x0
    8020c75e:	df6080e7          	jalr	-522(ra) # 8020c550 <type_locate_vma>
    8020c762:	892a                	mv	s2,a0
  struct vma *lvma = type_locate_vma(p->vma, LOAD);
    8020c764:	4585                	li	a1,1
    8020c766:	8556                	mv	a0,s5
    8020c768:	00000097          	auipc	ra,0x0
    8020c76c:	de8080e7          	jalr	-536(ra) # 8020c550 <type_locate_vma>
  addr = PGROUNDUP(addr);
    8020c770:	6585                	lui	a1,0x1
    8020c772:	15fd                	addi	a1,a1,-1
    8020c774:	94ae                	add	s1,s1,a1
    8020c776:	75fd                	lui	a1,0xfffff
    8020c778:	8ced                	and	s1,s1,a1
  if(vma == NULL)
    8020c77a:	04090363          	beqz	s2,8020c7c0 <alloc_addr_heap_vma+0x86>
    vma = alloc_vma(p, HEAP, start, sz, perm, 1, NULL);
    return vma;
  }
  else
  {
    if(lvma->end > addr)
    8020c77e:	6d1c                	ld	a5,24(a0)
    8020c780:	06f4e163          	bltu	s1,a5,8020c7e2 <alloc_addr_heap_vma+0xa8>
    {
      __debug_warn("[alloc_addr_heap_vma] addr %p illegal\n", addr);
      return vma;
    }
    if(vma->end > addr)
    8020c784:	01893583          	ld	a1,24(s2)
    8020c788:	08b4f063          	bgeu	s1,a1,8020c808 <alloc_addr_heap_vma+0xce>
    {
      if(uvmdealloc(p->pagetable, addr, vma->end) != 0)
    8020c78c:	862e                	mv	a2,a1
    8020c78e:	85a6                	mv	a1,s1
    8020c790:	0609b503          	ld	a0,96(s3)
    8020c794:	ffffe097          	auipc	ra,0xffffe
    8020c798:	030080e7          	jalr	48(ra) # 8020a7c4 <uvmdealloc>
    8020c79c:	ed29                	bnez	a0,8020c7f6 <alloc_addr_heap_vma+0xbc>
      {
        __debug_warn("[alloc_addr_heap_vma] uvmdealloc fail\n");
        return vma;
      }
      vma->end = addr;
    8020c79e:	00993c23          	sd	s1,24(s2)
      vma->sz = (vma->end - vma->addr);
    8020c7a2:	00893783          	ld	a5,8(s2)
    8020c7a6:	8c9d                	sub	s1,s1,a5
    8020c7a8:	00993823          	sd	s1,16(s2)
    }
    vma->end = addr;
    vma->sz = (vma->end - vma->addr);
    return vma;
  }
}
    8020c7ac:	854a                	mv	a0,s2
    8020c7ae:	70e2                	ld	ra,56(sp)
    8020c7b0:	7442                	ld	s0,48(sp)
    8020c7b2:	74a2                	ld	s1,40(sp)
    8020c7b4:	7902                	ld	s2,32(sp)
    8020c7b6:	69e2                	ld	s3,24(sp)
    8020c7b8:	6a42                	ld	s4,16(sp)
    8020c7ba:	6aa2                	ld	s5,8(sp)
    8020c7bc:	6121                	addi	sp,sp,64
    8020c7be:	8082                	ret
    uint64 start = lvma->end;
    8020c7c0:	6d10                	ld	a2,24(a0)
    uint64 sz = 0;
    8020c7c2:	4681                	li	a3,0
    if(start < addr)sz = addr - start ;
    8020c7c4:	00967463          	bgeu	a2,s1,8020c7cc <alloc_addr_heap_vma+0x92>
    8020c7c8:	40c486b3          	sub	a3,s1,a2
    vma = alloc_vma(p, HEAP, start, sz, perm, 1, NULL);
    8020c7cc:	4801                	li	a6,0
    8020c7ce:	4785                	li	a5,1
    8020c7d0:	8752                	mv	a4,s4
    8020c7d2:	4595                	li	a1,5
    8020c7d4:	854e                	mv	a0,s3
    8020c7d6:	00000097          	auipc	ra,0x0
    8020c7da:	c14080e7          	jalr	-1004(ra) # 8020c3ea <alloc_vma>
    8020c7de:	892a                	mv	s2,a0
    return vma;
    8020c7e0:	b7f1                	j	8020c7ac <alloc_addr_heap_vma+0x72>
      __debug_warn("[alloc_addr_heap_vma] addr %p illegal\n", addr);
    8020c7e2:	85a6                	mv	a1,s1
    8020c7e4:	00009517          	auipc	a0,0x9
    8020c7e8:	ba450513          	addi	a0,a0,-1116 # 80215388 <digits+0x860>
    8020c7ec:	ffffd097          	auipc	ra,0xffffd
    8020c7f0:	e84080e7          	jalr	-380(ra) # 80209670 <__debug_warn>
      return vma;
    8020c7f4:	bf65                	j	8020c7ac <alloc_addr_heap_vma+0x72>
        __debug_warn("[alloc_addr_heap_vma] uvmdealloc fail\n");
    8020c7f6:	00009517          	auipc	a0,0x9
    8020c7fa:	bba50513          	addi	a0,a0,-1094 # 802153b0 <digits+0x888>
    8020c7fe:	ffffd097          	auipc	ra,0xffffd
    8020c802:	e72080e7          	jalr	-398(ra) # 80209670 <__debug_warn>
        return vma;
    8020c806:	b75d                	j	8020c7ac <alloc_addr_heap_vma+0x72>
    if(uvmalloc(p->pagetable, vma->end, addr, perm) != 0)
    8020c808:	86d2                	mv	a3,s4
    8020c80a:	8626                	mv	a2,s1
    8020c80c:	0609b503          	ld	a0,96(s3)
    8020c810:	ffffe097          	auipc	ra,0xffffe
    8020c814:	ff8080e7          	jalr	-8(ra) # 8020a808 <uvmalloc>
    8020c818:	e909                	bnez	a0,8020c82a <alloc_addr_heap_vma+0xf0>
    vma->end = addr;
    8020c81a:	00993c23          	sd	s1,24(s2)
    vma->sz = (vma->end - vma->addr);
    8020c81e:	00893783          	ld	a5,8(s2)
    8020c822:	8c9d                	sub	s1,s1,a5
    8020c824:	00993823          	sd	s1,16(s2)
    return vma;
    8020c828:	b751                	j	8020c7ac <alloc_addr_heap_vma+0x72>
      __debug_warn("[alloc_addr_heap_vma] uvmalloc fail\n");
    8020c82a:	00009517          	auipc	a0,0x9
    8020c82e:	bae50513          	addi	a0,a0,-1106 # 802153d8 <digits+0x8b0>
    8020c832:	ffffd097          	auipc	ra,0xffffd
    8020c836:	e3e080e7          	jalr	-450(ra) # 80209670 <__debug_warn>
      return vma;
    8020c83a:	bf8d                	j	8020c7ac <alloc_addr_heap_vma+0x72>

000000008020c83c <alloc_sz_heap_vma>:

struct vma *alloc_sz_heap_vma(struct proc *p, uint64 sz, int perm)
{
    8020c83c:	7139                	addi	sp,sp,-64
    8020c83e:	fc06                	sd	ra,56(sp)
    8020c840:	f822                	sd	s0,48(sp)
    8020c842:	f426                	sd	s1,40(sp)
    8020c844:	f04a                	sd	s2,32(sp)
    8020c846:	ec4e                	sd	s3,24(sp)
    8020c848:	e852                	sd	s4,16(sp)
    8020c84a:	e456                	sd	s5,8(sp)
    8020c84c:	0080                	addi	s0,sp,64
    8020c84e:	8aaa                	mv	s5,a0
    8020c850:	84ae                	mv	s1,a1
    8020c852:	89b2                	mv	s3,a2
  struct vma *vma = type_locate_vma(p->vma, HEAP);
    8020c854:	17053903          	ld	s2,368(a0)
    8020c858:	4595                	li	a1,5
    8020c85a:	854a                	mv	a0,s2
    8020c85c:	00000097          	auipc	ra,0x0
    8020c860:	cf4080e7          	jalr	-780(ra) # 8020c550 <type_locate_vma>
    8020c864:	8a2a                	mv	s4,a0
  struct vma *lvma = type_locate_vma(p->vma, LOAD);
    8020c866:	4585                	li	a1,1
    8020c868:	854a                	mv	a0,s2
    8020c86a:	00000097          	auipc	ra,0x0
    8020c86e:	ce6080e7          	jalr	-794(ra) # 8020c550 <type_locate_vma>
  if(vma == NULL)
    8020c872:	060a0263          	beqz	s4,8020c8d6 <alloc_sz_heap_vma+0x9a>
    }
    vma = alloc_vma(p, HEAP, start, sz, perm, 1, NULL);
    return vma;
  }
  
  if(sz != 0)
    8020c876:	c4b1                	beqz	s1,8020c8c2 <alloc_sz_heap_vma+0x86>
  {
    if(vma->end + sz < lvma->end)
    8020c878:	018a3583          	ld	a1,24(s4)
    8020c87c:	009587b3          	add	a5,a1,s1
    8020c880:	6d18                	ld	a4,24(a0)
    8020c882:	08e7e463          	bltu	a5,a4,8020c90a <alloc_sz_heap_vma+0xce>
    {
      __debug_warn("[alloc_sz_heap_vma] addr illegal\n");
      return NULL;
    }
    
    if(vma->end + sz > vma->end)
    8020c886:	0af5f663          	bgeu	a1,a5,8020c932 <alloc_sz_heap_vma+0xf6>
    {
      if(uvmalloc(p->pagetable, vma->end, PGROUNDUP(vma->end + sz), perm) != 0)
    8020c88a:	6605                	lui	a2,0x1
    8020c88c:	167d                	addi	a2,a2,-1
    8020c88e:	97b2                	add	a5,a5,a2
    8020c890:	86ce                	mv	a3,s3
    8020c892:	767d                	lui	a2,0xfffff
    8020c894:	8e7d                	and	a2,a2,a5
    8020c896:	060ab503          	ld	a0,96(s5)
    8020c89a:	ffffe097          	auipc	ra,0xffffe
    8020c89e:	f6e080e7          	jalr	-146(ra) # 8020a808 <uvmalloc>
    8020c8a2:	ed35                	bnez	a0,8020c91e <alloc_sz_heap_vma+0xe2>
      {
        __debug_warn("[alloc_addr_heap_vma] uvmdealloc fail\n");
        return NULL;
      }
    }
    vma->end = PGROUNDUP(vma->end + sz);
    8020c8a4:	6585                	lui	a1,0x1
    8020c8a6:	15fd                	addi	a1,a1,-1
    8020c8a8:	94ae                	add	s1,s1,a1
    8020c8aa:	018a3583          	ld	a1,24(s4)
    8020c8ae:	94ae                	add	s1,s1,a1
    8020c8b0:	77fd                	lui	a5,0xfffff
    8020c8b2:	8cfd                	and	s1,s1,a5
    8020c8b4:	009a3c23          	sd	s1,24(s4)
    vma->sz = vma->end - vma->addr;
    8020c8b8:	008a3783          	ld	a5,8(s4)
    8020c8bc:	8c9d                	sub	s1,s1,a5
    8020c8be:	009a3823          	sd	s1,16(s4)
  }
  return vma;
}
    8020c8c2:	8552                	mv	a0,s4
    8020c8c4:	70e2                	ld	ra,56(sp)
    8020c8c6:	7442                	ld	s0,48(sp)
    8020c8c8:	74a2                	ld	s1,40(sp)
    8020c8ca:	7902                	ld	s2,32(sp)
    8020c8cc:	69e2                	ld	s3,24(sp)
    8020c8ce:	6a42                	ld	s4,16(sp)
    8020c8d0:	6aa2                	ld	s5,8(sp)
    8020c8d2:	6121                	addi	sp,sp,64
    8020c8d4:	8082                	ret
    uint64 start = lvma->end;
    8020c8d6:	6d10                	ld	a2,24(a0)
    if(start + sz < start)
    8020c8d8:	00c487b3          	add	a5,s1,a2
    8020c8dc:	00c7ee63          	bltu	a5,a2,8020c8f8 <alloc_sz_heap_vma+0xbc>
    vma = alloc_vma(p, HEAP, start, sz, perm, 1, NULL);
    8020c8e0:	4801                	li	a6,0
    8020c8e2:	4785                	li	a5,1
    8020c8e4:	874e                	mv	a4,s3
    8020c8e6:	86a6                	mv	a3,s1
    8020c8e8:	4595                	li	a1,5
    8020c8ea:	8556                	mv	a0,s5
    8020c8ec:	00000097          	auipc	ra,0x0
    8020c8f0:	afe080e7          	jalr	-1282(ra) # 8020c3ea <alloc_vma>
    8020c8f4:	8a2a                	mv	s4,a0
    return vma;
    8020c8f6:	b7f1                	j	8020c8c2 <alloc_sz_heap_vma+0x86>
      __debug_warn("[alloc_sz_heap_vma] addr illegal\n");
    8020c8f8:	00009517          	auipc	a0,0x9
    8020c8fc:	b0850513          	addi	a0,a0,-1272 # 80215400 <digits+0x8d8>
    8020c900:	ffffd097          	auipc	ra,0xffffd
    8020c904:	d70080e7          	jalr	-656(ra) # 80209670 <__debug_warn>
      return NULL;
    8020c908:	bf6d                	j	8020c8c2 <alloc_sz_heap_vma+0x86>
      __debug_warn("[alloc_sz_heap_vma] addr illegal\n");
    8020c90a:	00009517          	auipc	a0,0x9
    8020c90e:	af650513          	addi	a0,a0,-1290 # 80215400 <digits+0x8d8>
    8020c912:	ffffd097          	auipc	ra,0xffffd
    8020c916:	d5e080e7          	jalr	-674(ra) # 80209670 <__debug_warn>
      return NULL;
    8020c91a:	4a01                	li	s4,0
    8020c91c:	b75d                	j	8020c8c2 <alloc_sz_heap_vma+0x86>
        __debug_warn("[alloc_addr_heap_vma] uvmalloc fail\n");
    8020c91e:	00009517          	auipc	a0,0x9
    8020c922:	aba50513          	addi	a0,a0,-1350 # 802153d8 <digits+0x8b0>
    8020c926:	ffffd097          	auipc	ra,0xffffd
    8020c92a:	d4a080e7          	jalr	-694(ra) # 80209670 <__debug_warn>
        return NULL;
    8020c92e:	4a01                	li	s4,0
    8020c930:	bf49                	j	8020c8c2 <alloc_sz_heap_vma+0x86>
      if(uvmdealloc(p->pagetable, PGROUNDDOWN(vma->end + sz), vma->end) != 0)
    8020c932:	862e                	mv	a2,a1
    8020c934:	75fd                	lui	a1,0xfffff
    8020c936:	8dfd                	and	a1,a1,a5
    8020c938:	060ab503          	ld	a0,96(s5)
    8020c93c:	ffffe097          	auipc	ra,0xffffe
    8020c940:	e88080e7          	jalr	-376(ra) # 8020a7c4 <uvmdealloc>
    8020c944:	d125                	beqz	a0,8020c8a4 <alloc_sz_heap_vma+0x68>
        __debug_warn("[alloc_addr_heap_vma] uvmdealloc fail\n");
    8020c946:	00009517          	auipc	a0,0x9
    8020c94a:	a6a50513          	addi	a0,a0,-1430 # 802153b0 <digits+0x888>
    8020c94e:	ffffd097          	auipc	ra,0xffffd
    8020c952:	d22080e7          	jalr	-734(ra) # 80209670 <__debug_warn>
        return NULL;
    8020c956:	4a01                	li	s4,0
    8020c958:	b7ad                	j	8020c8c2 <alloc_sz_heap_vma+0x86>

000000008020c95a <alloc_load_vma>:

struct vma *alloc_load_vma(struct proc *p, uint64 addr, uint64 sz, int perm)
{
    8020c95a:	1141                	addi	sp,sp,-16
    8020c95c:	e406                	sd	ra,8(sp)
    8020c95e:	e022                	sd	s0,0(sp)
    8020c960:	0800                	addi	s0,sp,16
    8020c962:	8736                	mv	a4,a3
  return alloc_vma(p, LOAD, addr, sz, perm, 1, NULL);
    8020c964:	4801                	li	a6,0
    8020c966:	4785                	li	a5,1
    8020c968:	86b2                	mv	a3,a2
    8020c96a:	862e                	mv	a2,a1
    8020c96c:	4585                	li	a1,1
    8020c96e:	00000097          	auipc	ra,0x0
    8020c972:	a7c080e7          	jalr	-1412(ra) # 8020c3ea <alloc_vma>
}
    8020c976:	60a2                	ld	ra,8(sp)
    8020c978:	6402                	ld	s0,0(sp)
    8020c97a:	0141                	addi	sp,sp,16
    8020c97c:	8082                	ret

000000008020c97e <free_vma_list>:

int free_vma_list(struct proc *p)
{
    8020c97e:	715d                	addi	sp,sp,-80
    8020c980:	e486                	sd	ra,72(sp)
    8020c982:	e0a2                	sd	s0,64(sp)
    8020c984:	fc26                	sd	s1,56(sp)
    8020c986:	f84a                	sd	s2,48(sp)
    8020c988:	f44e                	sd	s3,40(sp)
    8020c98a:	f052                	sd	s4,32(sp)
    8020c98c:	ec56                	sd	s5,24(sp)
    8020c98e:	e85a                	sd	s6,16(sp)
    8020c990:	e45e                	sd	s7,8(sp)
    8020c992:	0880                	addi	s0,sp,80
  struct vma *vma_head = p->vma;
    8020c994:	17053b83          	ld	s7,368(a0)
  if(vma_head == NULL)
    8020c998:	080b8263          	beqz	s7,8020ca1c <free_vma_list+0x9e>
    8020c99c:	8a2a                	mv	s4,a0
  {
    return 1;
  }
  struct vma *vma = vma_head->next;
    8020c99e:	040bb983          	ld	s3,64(s7) # fffffffffffff040 <kernel_end+0xffffffff7ac90040>
  
  while(vma != vma_head)
    8020c9a2:	073b8663          	beq	s7,s3,8020ca0e <free_vma_list+0x90>
    for(a = vma->addr; a < vma->end; a += PGSIZE){
      if((pte = walk(p->pagetable, a, 0)) == 0)
        continue;
      if((*pte & PTE_V) == 0)
        continue;
      if(PTE_FLAGS(*pte) == PTE_V)
    8020c9a6:	4b05                	li	s6,1
    for(a = vma->addr; a < vma->end; a += PGSIZE){
    8020c9a8:	6a85                	lui	s5,0x1
    8020c9aa:	a899                	j	8020ca00 <free_vma_list+0x82>
        continue;
      uint64 pa = PTE2PA(*pte);
    8020c9ac:	8129                	srli	a0,a0,0xa
      //__debug_warn("[free single vma]free:%p\n",pa);
      freepage((void*)pa);
    8020c9ae:	0532                	slli	a0,a0,0xc
    8020c9b0:	ffffd097          	auipc	ra,0xffffd
    8020c9b4:	424080e7          	jalr	1060(ra) # 80209dd4 <_freepage>
      //__debug_warn("[free vma list]free end\n");
      *pte = 0;
    8020c9b8:	0004b023          	sd	zero,0(s1)
    for(a = vma->addr; a < vma->end; a += PGSIZE){
    8020c9bc:	9956                	add	s2,s2,s5
    8020c9be:	0189b783          	ld	a5,24(s3)
    8020c9c2:	02f97563          	bgeu	s2,a5,8020c9ec <free_vma_list+0x6e>
      if((pte = walk(p->pagetable, a, 0)) == 0)
    8020c9c6:	4601                	li	a2,0
    8020c9c8:	85ca                	mv	a1,s2
    8020c9ca:	060a3503          	ld	a0,96(s4)
    8020c9ce:	ffffe097          	auipc	ra,0xffffe
    8020c9d2:	958080e7          	jalr	-1704(ra) # 8020a326 <walk>
    8020c9d6:	84aa                	mv	s1,a0
    8020c9d8:	d175                	beqz	a0,8020c9bc <free_vma_list+0x3e>
      if((*pte & PTE_V) == 0)
    8020c9da:	6108                	ld	a0,0(a0)
    8020c9dc:	00157793          	andi	a5,a0,1
    8020c9e0:	dff1                	beqz	a5,8020c9bc <free_vma_list+0x3e>
      if(PTE_FLAGS(*pte) == PTE_V)
    8020c9e2:	3ff57793          	andi	a5,a0,1023
    8020c9e6:	fd6793e3          	bne	a5,s6,8020c9ac <free_vma_list+0x2e>
    8020c9ea:	bfc9                	j	8020c9bc <free_vma_list+0x3e>
    }
    vma = vma->next;
    8020c9ec:	0409b983          	ld	s3,64(s3)
    kfree(vma->prev);
    8020c9f0:	0389b503          	ld	a0,56(s3)
    8020c9f4:	ffffe097          	auipc	ra,0xffffe
    8020c9f8:	812080e7          	jalr	-2030(ra) # 8020a206 <kfree>
  while(vma != vma_head)
    8020c9fc:	013b8963          	beq	s7,s3,8020ca0e <free_vma_list+0x90>
    for(a = vma->addr; a < vma->end; a += PGSIZE){
    8020ca00:	0089b903          	ld	s2,8(s3)
    8020ca04:	0189b783          	ld	a5,24(s3)
    8020ca08:	faf96fe3          	bltu	s2,a5,8020c9c6 <free_vma_list+0x48>
    8020ca0c:	b7c5                	j	8020c9ec <free_vma_list+0x6e>
  }
  kfree(vma);
    8020ca0e:	854e                	mv	a0,s3
    8020ca10:	ffffd097          	auipc	ra,0xffffd
    8020ca14:	7f6080e7          	jalr	2038(ra) # 8020a206 <kfree>
  p->vma = NULL;
    8020ca18:	160a3823          	sd	zero,368(s4)
  return 1;
}
    8020ca1c:	4505                	li	a0,1
    8020ca1e:	60a6                	ld	ra,72(sp)
    8020ca20:	6406                	ld	s0,64(sp)
    8020ca22:	74e2                	ld	s1,56(sp)
    8020ca24:	7942                	ld	s2,48(sp)
    8020ca26:	79a2                	ld	s3,40(sp)
    8020ca28:	7a02                	ld	s4,32(sp)
    8020ca2a:	6ae2                	ld	s5,24(sp)
    8020ca2c:	6b42                	ld	s6,16(sp)
    8020ca2e:	6ba2                	ld	s7,8(sp)
    8020ca30:	6161                	addi	sp,sp,80
    8020ca32:	8082                	ret

000000008020ca34 <vma_list_init>:
{
    8020ca34:	1101                	addi	sp,sp,-32
    8020ca36:	ec06                	sd	ra,24(sp)
    8020ca38:	e822                	sd	s0,16(sp)
    8020ca3a:	e426                	sd	s1,8(sp)
    8020ca3c:	e04a                	sd	s2,0(sp)
    8020ca3e:	1000                	addi	s0,sp,32
    8020ca40:	892a                	mv	s2,a0
  if(p == NULL)
    8020ca42:	cd35                	beqz	a0,8020cabe <vma_list_init+0x8a>
  struct vma *vma = (struct vma*)kmalloc(sizeof(struct vma));
    8020ca44:	04800513          	li	a0,72
    8020ca48:	ffffd097          	auipc	ra,0xffffd
    8020ca4c:	574080e7          	jalr	1396(ra) # 80209fbc <kmalloc>
    8020ca50:	84aa                	mv	s1,a0
  if(vma == NULL)
    8020ca52:	c141                	beqz	a0,8020cad2 <vma_list_init+0x9e>
  vma->next = vma->prev = vma;
    8020ca54:	fd08                	sd	a0,56(a0)
    8020ca56:	e128                	sd	a0,64(a0)
  vma->type = NONE;
    8020ca58:	00052023          	sw	zero,0(a0)
  p->vma = vma;
    8020ca5c:	16a93823          	sd	a0,368(s2)
  if(alloc_vma(p, TRAP, TRAPFRAME, PGSIZE, PTE_R | PTE_W , 0, (uint64)p->trapframe) == NULL)
    8020ca60:	06893803          	ld	a6,104(s2)
    8020ca64:	4781                	li	a5,0
    8020ca66:	4719                	li	a4,6
    8020ca68:	6685                	lui	a3,0x1
    8020ca6a:	7ffff637          	lui	a2,0x7ffff
    8020ca6e:	45a1                	li	a1,8
    8020ca70:	854a                	mv	a0,s2
    8020ca72:	00000097          	auipc	ra,0x0
    8020ca76:	978080e7          	jalr	-1672(ra) # 8020c3ea <alloc_vma>
    8020ca7a:	c52d                	beqz	a0,8020cae4 <vma_list_init+0xb0>
  if(alloc_vma(p, STACK, PGROUNDDOWN(USER_STACK_BOTTOM - 10 * PGSIZE), 10 * PGSIZE, PTE_R|PTE_W|PTE_U, 1, NULL) == NULL)
    8020ca7c:	4801                	li	a6,0
    8020ca7e:	4785                	li	a5,1
    8020ca80:	4759                	li	a4,22
    8020ca82:	66a9                	lui	a3,0xa
    8020ca84:	7fff4637          	lui	a2,0x7fff4
    8020ca88:	459d                	li	a1,7
    8020ca8a:	854a                	mv	a0,s2
    8020ca8c:	00000097          	auipc	ra,0x0
    8020ca90:	95e080e7          	jalr	-1698(ra) # 8020c3ea <alloc_vma>
    8020ca94:	c53d                	beqz	a0,8020cb02 <vma_list_init+0xce>
  if(alloc_mmap_vma(p, 0, USER_MMAP_START, 0, 0, 0, 0) == NULL)
    8020ca96:	4801                	li	a6,0
    8020ca98:	4781                	li	a5,0
    8020ca9a:	4701                	li	a4,0
    8020ca9c:	4681                	li	a3,0
    8020ca9e:	6fffe637          	lui	a2,0x6fffe
    8020caa2:	4581                	li	a1,0
    8020caa4:	854a                	mv	a0,s2
    8020caa6:	00000097          	auipc	ra,0x0
    8020caaa:	b7e080e7          	jalr	-1154(ra) # 8020c624 <alloc_mmap_vma>
    8020caae:	c13d                	beqz	a0,8020cb14 <vma_list_init+0xe0>
}
    8020cab0:	8526                	mv	a0,s1
    8020cab2:	60e2                	ld	ra,24(sp)
    8020cab4:	6442                	ld	s0,16(sp)
    8020cab6:	64a2                	ld	s1,8(sp)
    8020cab8:	6902                	ld	s2,0(sp)
    8020caba:	6105                	addi	sp,sp,32
    8020cabc:	8082                	ret
    __debug_warn("[vma_list_init] proc is NULL\n");
    8020cabe:	00009517          	auipc	a0,0x9
    8020cac2:	96a50513          	addi	a0,a0,-1686 # 80215428 <digits+0x900>
    8020cac6:	ffffd097          	auipc	ra,0xffffd
    8020caca:	baa080e7          	jalr	-1110(ra) # 80209670 <__debug_warn>
    return NULL;
    8020cace:	84ca                	mv	s1,s2
    8020cad0:	b7c5                	j	8020cab0 <vma_list_init+0x7c>
    __debug_warn("[vma_list_init] vma kmalloc failed\n");
    8020cad2:	00009517          	auipc	a0,0x9
    8020cad6:	97650513          	addi	a0,a0,-1674 # 80215448 <digits+0x920>
    8020cada:	ffffd097          	auipc	ra,0xffffd
    8020cade:	b96080e7          	jalr	-1130(ra) # 80209670 <__debug_warn>
    return NULL;
    8020cae2:	b7f9                	j	8020cab0 <vma_list_init+0x7c>
    __debug_warn("[vma_list_init] TRAPFRAME vma init fail\n");
    8020cae4:	00009517          	auipc	a0,0x9
    8020cae8:	98c50513          	addi	a0,a0,-1652 # 80215470 <digits+0x948>
    8020caec:	ffffd097          	auipc	ra,0xffffd
    8020caf0:	b84080e7          	jalr	-1148(ra) # 80209670 <__debug_warn>
  free_vma_list(p);
    8020caf4:	854a                	mv	a0,s2
    8020caf6:	00000097          	auipc	ra,0x0
    8020cafa:	e88080e7          	jalr	-376(ra) # 8020c97e <free_vma_list>
  return NULL;
    8020cafe:	4481                	li	s1,0
    8020cb00:	bf45                	j	8020cab0 <vma_list_init+0x7c>
    __debug_warn("[vma_list_init] stack vma init fail\n");
    8020cb02:	00009517          	auipc	a0,0x9
    8020cb06:	99e50513          	addi	a0,a0,-1634 # 802154a0 <digits+0x978>
    8020cb0a:	ffffd097          	auipc	ra,0xffffd
    8020cb0e:	b66080e7          	jalr	-1178(ra) # 80209670 <__debug_warn>
    goto bad;
    8020cb12:	b7cd                	j	8020caf4 <vma_list_init+0xc0>
    __debug_warn("[vma_list_init] mmap vma init fail\n");
    8020cb14:	00009517          	auipc	a0,0x9
    8020cb18:	9b450513          	addi	a0,a0,-1612 # 802154c8 <digits+0x9a0>
    8020cb1c:	ffffd097          	auipc	ra,0xffffd
    8020cb20:	b54080e7          	jalr	-1196(ra) # 80209670 <__debug_warn>
    goto bad;
    8020cb24:	bfc1                	j	8020caf4 <vma_list_init+0xc0>

000000008020cb26 <addr_sz_locate_vma>:

struct vma *addr_sz_locate_vma(struct vma*head, uint64 addr, uint64 sz)
{
    8020cb26:	1101                	addi	sp,sp,-32
    8020cb28:	ec06                	sd	ra,24(sp)
    8020cb2a:	e822                	sd	s0,16(sp)
    8020cb2c:	e426                	sd	s1,8(sp)
    8020cb2e:	1000                	addi	s0,sp,32
    8020cb30:	84aa                	mv	s1,a0
  if(head == NULL)
    8020cb32:	c511                	beqz	a0,8020cb3e <addr_sz_locate_vma+0x18>
  {
    __debug_warn("[addr_sz_locate_vma] head is nil\n");
    return NULL;
  }
  struct vma *vma = head->next;
    8020cb34:	6128                	ld	a0,64(a0)
  while(vma != head)
    8020cb36:	02a49163          	bne	s1,a0,8020cb58 <addr_sz_locate_vma+0x32>
    {
      return vma;
    }
    vma = vma->next;
  }
  return NULL;
    8020cb3a:	4501                	li	a0,0
    8020cb3c:	a035                	j	8020cb68 <addr_sz_locate_vma+0x42>
    __debug_warn("[addr_sz_locate_vma] head is nil\n");
    8020cb3e:	00009517          	auipc	a0,0x9
    8020cb42:	9b250513          	addi	a0,a0,-1614 # 802154f0 <digits+0x9c8>
    8020cb46:	ffffd097          	auipc	ra,0xffffd
    8020cb4a:	b2a080e7          	jalr	-1238(ra) # 80209670 <__debug_warn>
    return NULL;
    8020cb4e:	8526                	mv	a0,s1
    8020cb50:	a821                	j	8020cb68 <addr_sz_locate_vma+0x42>
    vma = vma->next;
    8020cb52:	6128                	ld	a0,64(a0)
  while(vma != head)
    8020cb54:	00a48963          	beq	s1,a0,8020cb66 <addr_sz_locate_vma+0x40>
    if(vma->addr == addr && vma->sz == sz)
    8020cb58:	651c                	ld	a5,8(a0)
    8020cb5a:	feb79ce3          	bne	a5,a1,8020cb52 <addr_sz_locate_vma+0x2c>
    8020cb5e:	691c                	ld	a5,16(a0)
    8020cb60:	fec799e3          	bne	a5,a2,8020cb52 <addr_sz_locate_vma+0x2c>
    8020cb64:	a011                	j	8020cb68 <addr_sz_locate_vma+0x42>
  return NULL;
    8020cb66:	4501                	li	a0,0
}
    8020cb68:	60e2                	ld	ra,24(sp)
    8020cb6a:	6442                	ld	s0,16(sp)
    8020cb6c:	64a2                	ld	s1,8(sp)
    8020cb6e:	6105                	addi	sp,sp,32
    8020cb70:	8082                	ret

000000008020cb72 <free_vma>:

int free_vma(struct proc *p, struct vma *del)
{
    8020cb72:	1101                	addi	sp,sp,-32
    8020cb74:	ec06                	sd	ra,24(sp)
    8020cb76:	e822                	sd	s0,16(sp)
    8020cb78:	e426                	sd	s1,8(sp)
    8020cb7a:	1000                	addi	s0,sp,32
  if(del == NULL)
    8020cb7c:	cd9d                	beqz	a1,8020cbba <free_vma+0x48>
    8020cb7e:	84ae                	mv	s1,a1
  {
    __debug_warn("[free_vma] del is nil\n");
    return 0;
  }
  if(del->prev == NULL || del->next == NULL)
    8020cb80:	7d9c                	ld	a5,56(a1)
    8020cb82:	c7b1                	beqz	a5,8020cbce <free_vma+0x5c>
    8020cb84:	61b8                	ld	a4,64(a1)
    8020cb86:	c721                	beqz	a4,8020cbce <free_vma+0x5c>
    return 0;
  }
  
  struct vma *prev = del->prev;
  struct vma *next = del->next;
  prev->next = next;
    8020cb88:	e3b8                	sd	a4,64(a5)
  next->prev = prev;
    8020cb8a:	ff1c                	sd	a5,56(a4)
  del->next = del->prev = NULL;
    8020cb8c:	0205bc23          	sd	zero,56(a1) # fffffffffffff038 <kernel_end+0xffffffff7ac90038>
    8020cb90:	0405b023          	sd	zero,64(a1)
  if(uvmdealloc(p->pagetable, del->addr, del->end) != 0)
    8020cb94:	6d90                	ld	a2,24(a1)
    8020cb96:	658c                	ld	a1,8(a1)
    8020cb98:	7128                	ld	a0,96(a0)
    8020cb9a:	ffffe097          	auipc	ra,0xffffe
    8020cb9e:	c2a080e7          	jalr	-982(ra) # 8020a7c4 <uvmdealloc>
    8020cba2:	e121                	bnez	a0,8020cbe2 <free_vma+0x70>
  {
    __debug_warn("[free_vma] uvmdealloc fail\n");
    return 0;
  }
  kfree(del);
    8020cba4:	8526                	mv	a0,s1
    8020cba6:	ffffd097          	auipc	ra,0xffffd
    8020cbaa:	660080e7          	jalr	1632(ra) # 8020a206 <kfree>
  return 1;
    8020cbae:	4505                	li	a0,1
}
    8020cbb0:	60e2                	ld	ra,24(sp)
    8020cbb2:	6442                	ld	s0,16(sp)
    8020cbb4:	64a2                	ld	s1,8(sp)
    8020cbb6:	6105                	addi	sp,sp,32
    8020cbb8:	8082                	ret
    __debug_warn("[free_vma] del is nil\n");
    8020cbba:	00009517          	auipc	a0,0x9
    8020cbbe:	95e50513          	addi	a0,a0,-1698 # 80215518 <digits+0x9f0>
    8020cbc2:	ffffd097          	auipc	ra,0xffffd
    8020cbc6:	aae080e7          	jalr	-1362(ra) # 80209670 <__debug_warn>
    return 0;
    8020cbca:	4501                	li	a0,0
    8020cbcc:	b7d5                	j	8020cbb0 <free_vma+0x3e>
    __debug_warn("[free_vma] del is illegal\n");
    8020cbce:	00009517          	auipc	a0,0x9
    8020cbd2:	96250513          	addi	a0,a0,-1694 # 80215530 <digits+0xa08>
    8020cbd6:	ffffd097          	auipc	ra,0xffffd
    8020cbda:	a9a080e7          	jalr	-1382(ra) # 80209670 <__debug_warn>
    return 0;
    8020cbde:	4501                	li	a0,0
    8020cbe0:	bfc1                	j	8020cbb0 <free_vma+0x3e>
    __debug_warn("[free_vma] uvmdealloc fail\n");
    8020cbe2:	00009517          	auipc	a0,0x9
    8020cbe6:	96e50513          	addi	a0,a0,-1682 # 80215550 <digits+0xa28>
    8020cbea:	ffffd097          	auipc	ra,0xffffd
    8020cbee:	a86080e7          	jalr	-1402(ra) # 80209670 <__debug_warn>
    return 0;
    8020cbf2:	4501                	li	a0,0
    8020cbf4:	bf75                	j	8020cbb0 <free_vma+0x3e>

000000008020cbf6 <vma_copy>:

struct vma* vma_copy(struct proc *np, struct vma *head)
{
    8020cbf6:	7139                	addi	sp,sp,-64
    8020cbf8:	fc06                	sd	ra,56(sp)
    8020cbfa:	f822                	sd	s0,48(sp)
    8020cbfc:	f426                	sd	s1,40(sp)
    8020cbfe:	f04a                	sd	s2,32(sp)
    8020cc00:	ec4e                	sd	s3,24(sp)
    8020cc02:	e852                	sd	s4,16(sp)
    8020cc04:	e456                	sd	s5,8(sp)
    8020cc06:	e05a                	sd	s6,0(sp)
    8020cc08:	0080                	addi	s0,sp,64
    8020cc0a:	8b2a                	mv	s6,a0
    8020cc0c:	8aae                	mv	s5,a1
  struct vma *nvma_head = (struct vma *)kmalloc(sizeof(struct vma));
    8020cc0e:	04800513          	li	a0,72
    8020cc12:	ffffd097          	auipc	ra,0xffffd
    8020cc16:	3aa080e7          	jalr	938(ra) # 80209fbc <kmalloc>
  if(nvma_head == NULL)
    8020cc1a:	cd11                	beqz	a0,8020cc36 <vma_copy+0x40>
    8020cc1c:	89aa                	mv	s3,a0
  {
    __debug_warn("[vma_copy] nvma_head kmalloc failed\n");
    goto err;
  }
  nvma_head->next = nvma_head->prev = nvma_head;
    8020cc1e:	fd08                	sd	a0,56(a0)
    8020cc20:	e128                	sd	a0,64(a0)
  nvma_head->type = NONE;
    8020cc22:	00052023          	sw	zero,0(a0)
  np->vma = nvma_head;
    8020cc26:	16ab3823          	sd	a0,368(s6) # 1170 <_entry-0x801fee90>
  struct vma *pvma = head->next;
    8020cc2a:	040ab903          	ld	s2,64(s5) # 1040 <_entry-0x801fefc0>
  while(pvma != head)
    8020cc2e:	0d2a8163          	beq	s5,s2,8020ccf0 <vma_copy+0xfa>
  {
    struct vma *nvma = NULL;
    if(pvma->type == TRAP)
    8020cc32:	4a21                	li	s4,8
    8020cc34:	a895                	j	8020cca8 <vma_copy+0xb2>
    __debug_warn("[vma_copy] nvma_head kmalloc failed\n");
    8020cc36:	00009517          	auipc	a0,0x9
    8020cc3a:	93a50513          	addi	a0,a0,-1734 # 80215570 <digits+0xa48>
    8020cc3e:	ffffd097          	auipc	ra,0xffffd
    8020cc42:	a32080e7          	jalr	-1486(ra) # 80209670 <__debug_warn>
    goto err;
    8020cc46:	a069                	j	8020ccd0 <vma_copy+0xda>
    {
      if((nvma = alloc_vma(np, TRAP, TRAPFRAME, PGSIZE, PTE_R | PTE_W , 0, (uint64)np->trapframe)) == NULL)
    8020cc48:	068b3803          	ld	a6,104(s6)
    8020cc4c:	4781                	li	a5,0
    8020cc4e:	4719                	li	a4,6
    8020cc50:	6685                	lui	a3,0x1
    8020cc52:	7ffff637          	lui	a2,0x7ffff
    8020cc56:	85d2                	mv	a1,s4
    8020cc58:	855a                	mv	a0,s6
    8020cc5a:	fffff097          	auipc	ra,0xfffff
    8020cc5e:	790080e7          	jalr	1936(ra) # 8020c3ea <alloc_vma>
    8020cc62:	ed1d                	bnez	a0,8020cca0 <vma_copy+0xaa>
      {
        __debug_warn("[vma_list_init] TRAPFRAME vma init fail\n");
    8020cc64:	00009517          	auipc	a0,0x9
    8020cc68:	80c50513          	addi	a0,a0,-2036 # 80215470 <digits+0x948>
    8020cc6c:	ffffd097          	auipc	ra,0xffffd
    8020cc70:	a04080e7          	jalr	-1532(ra) # 80209670 <__debug_warn>
        goto err;
    8020cc74:	a8b1                	j	8020ccd0 <vma_copy+0xda>
      if(nvma == NULL)
      {
        __debug_warn("[vma_copy] nvma kmalloc failed\n");
        goto err;
      }
      memmove(nvma, pvma, sizeof(struct vma));
    8020cc76:	04800613          	li	a2,72
    8020cc7a:	85ca                	mv	a1,s2
    8020cc7c:	ffff4097          	auipc	ra,0xffff4
    8020cc80:	158080e7          	jalr	344(ra) # 80200dd4 <memmove>
      nvma->next = nvma->prev = NULL;
    8020cc84:	0204bc23          	sd	zero,56(s1)
    8020cc88:	0404b023          	sd	zero,64(s1)
      nvma->prev = nvma_head->prev;
    8020cc8c:	0389b783          	ld	a5,56(s3)
    8020cc90:	fc9c                	sd	a5,56(s1)
      nvma->next = nvma_head;
    8020cc92:	0534b023          	sd	s3,64(s1)
      nvma_head->prev->next = nvma;
    8020cc96:	0389b783          	ld	a5,56(s3)
    8020cc9a:	e3a4                	sd	s1,64(a5)
      nvma_head->prev = nvma;
    8020cc9c:	0299bc23          	sd	s1,56(s3)
    }
    pvma = pvma->next;
    8020cca0:	04093903          	ld	s2,64(s2)
  while(pvma != head)
    8020cca4:	052a8663          	beq	s5,s2,8020ccf0 <vma_copy+0xfa>
    if(pvma->type == TRAP)
    8020cca8:	00092783          	lw	a5,0(s2)
    8020ccac:	f9478ee3          	beq	a5,s4,8020cc48 <vma_copy+0x52>
      nvma = (struct vma *)kmalloc(sizeof(struct vma));
    8020ccb0:	04800513          	li	a0,72
    8020ccb4:	ffffd097          	auipc	ra,0xffffd
    8020ccb8:	308080e7          	jalr	776(ra) # 80209fbc <kmalloc>
    8020ccbc:	84aa                	mv	s1,a0
      if(nvma == NULL)
    8020ccbe:	fd45                	bnez	a0,8020cc76 <vma_copy+0x80>
        __debug_warn("[vma_copy] nvma kmalloc failed\n");
    8020ccc0:	00009517          	auipc	a0,0x9
    8020ccc4:	8d850513          	addi	a0,a0,-1832 # 80215598 <digits+0xa70>
    8020ccc8:	ffffd097          	auipc	ra,0xffffd
    8020cccc:	9a8080e7          	jalr	-1624(ra) # 80209670 <__debug_warn>
  }
  
  return nvma_head;
  
err:
  np->vma = NULL;
    8020ccd0:	160b3823          	sd	zero,368(s6)
  __debug_warn("[vm_copy] failed\n");
    8020ccd4:	00009517          	auipc	a0,0x9
    8020ccd8:	8e450513          	addi	a0,a0,-1820 # 802155b8 <digits+0xa90>
    8020ccdc:	ffffd097          	auipc	ra,0xffffd
    8020cce0:	994080e7          	jalr	-1644(ra) # 80209670 <__debug_warn>
  free_vma_list(np);
    8020cce4:	855a                	mv	a0,s6
    8020cce6:	00000097          	auipc	ra,0x0
    8020ccea:	c98080e7          	jalr	-872(ra) # 8020c97e <free_vma_list>
  return NULL;
    8020ccee:	4981                	li	s3,0
}
    8020ccf0:	854e                	mv	a0,s3
    8020ccf2:	70e2                	ld	ra,56(sp)
    8020ccf4:	7442                	ld	s0,48(sp)
    8020ccf6:	74a2                	ld	s1,40(sp)
    8020ccf8:	7902                	ld	s2,32(sp)
    8020ccfa:	69e2                	ld	s3,24(sp)
    8020ccfc:	6a42                	ld	s4,16(sp)
    8020ccfe:	6aa2                	ld	s5,8(sp)
    8020cd00:	6b02                	ld	s6,0(sp)
    8020cd02:	6121                	addi	sp,sp,64
    8020cd04:	8082                	ret

000000008020cd06 <vma_deep_mapping>:

int vma_deep_mapping(pagetable_t old, pagetable_t new, const struct vma *vma)
{
    8020cd06:	715d                	addi	sp,sp,-80
    8020cd08:	e486                	sd	ra,72(sp)
    8020cd0a:	e0a2                	sd	s0,64(sp)
    8020cd0c:	fc26                	sd	s1,56(sp)
    8020cd0e:	f84a                	sd	s2,48(sp)
    8020cd10:	f44e                	sd	s3,40(sp)
    8020cd12:	f052                	sd	s4,32(sp)
    8020cd14:	ec56                	sd	s5,24(sp)
    8020cd16:	e85a                	sd	s6,16(sp)
    8020cd18:	e45e                	sd	s7,8(sp)
    8020cd1a:	0880                	addi	s0,sp,80
    8020cd1c:	8b2a                	mv	s6,a0
    8020cd1e:	8aae                	mv	s5,a1
    8020cd20:	8a32                	mv	s4,a2
  uint64 start = vma->addr;
    8020cd22:	00863983          	ld	s3,8(a2) # 7ffff008 <_entry-0x200ff8>
  pte_t *pte;
  uint64 pa;
  char *mem;
  long flags;
  
  while(start < vma->end)
    8020cd26:	6e1c                	ld	a5,24(a2)
    8020cd28:	0ef9f263          	bgeu	s3,a5,8020ce0c <vma_deep_mapping+0x106>
  {
    if((pte = walk(old, start, 0)) == NULL)
    8020cd2c:	4601                	li	a2,0
    8020cd2e:	85ce                	mv	a1,s3
    8020cd30:	855a                	mv	a0,s6
    8020cd32:	ffffd097          	auipc	ra,0xffffd
    8020cd36:	5f4080e7          	jalr	1524(ra) # 8020a326 <walk>
    8020cd3a:	c921                	beqz	a0,8020cd8a <vma_deep_mapping+0x84>
    {
      panic("uvmcopy: pte should exist");
    }
    if((*pte & PTE_V) == 0)
    8020cd3c:	6118                	ld	a4,0(a0)
    8020cd3e:	00177793          	andi	a5,a4,1
    8020cd42:	cfa1                	beqz	a5,8020cd9a <vma_deep_mapping+0x94>
    {
      panic("uvmcopy: page not present");
    }
    pa = PTE2PA(*pte);
    8020cd44:	00a75593          	srli	a1,a4,0xa
    8020cd48:	00c59b93          	slli	s7,a1,0xc
    flags = PTE_FLAGS(*pte);
    8020cd4c:	3ff77493          	andi	s1,a4,1023

    mem = (char *)allocpage();
    8020cd50:	ffffd097          	auipc	ra,0xffffd
    8020cd54:	fe4080e7          	jalr	-28(ra) # 80209d34 <_allocpage>
    8020cd58:	892a                	mv	s2,a0

    if(mem == NULL)
    8020cd5a:	c921                	beqz	a0,8020cdaa <vma_deep_mapping+0xa4>
    {
      __debug_warn("[vma deep mapping] alloc page fail\n");
      goto err;
    }

    memmove(mem, (char *)pa, PGSIZE);
    8020cd5c:	6605                	lui	a2,0x1
    8020cd5e:	85de                	mv	a1,s7
    8020cd60:	ffff4097          	auipc	ra,0xffff4
    8020cd64:	074080e7          	jalr	116(ra) # 80200dd4 <memmove>

    if(mappages(new, start, PGSIZE, (uint64)mem, flags) != 0)
    8020cd68:	8726                	mv	a4,s1
    8020cd6a:	86ca                	mv	a3,s2
    8020cd6c:	6605                	lui	a2,0x1
    8020cd6e:	85ce                	mv	a1,s3
    8020cd70:	8556                	mv	a0,s5
    8020cd72:	ffffd097          	auipc	ra,0xffffd
    8020cd76:	664080e7          	jalr	1636(ra) # 8020a3d6 <mappages>
    8020cd7a:	e53d                	bnez	a0,8020cde8 <vma_deep_mapping+0xe2>
      __debug_warn("[vma_deep_mapping] start = %p, end = %p\n", vma->addr, vma->end);
      freepage(mem);
      goto err;
    }

    start += PGSIZE;
    8020cd7c:	6785                	lui	a5,0x1
    8020cd7e:	99be                	add	s3,s3,a5
  while(start < vma->end)
    8020cd80:	018a3783          	ld	a5,24(s4)
    8020cd84:	faf9e4e3          	bltu	s3,a5,8020cd2c <vma_deep_mapping+0x26>
    8020cd88:	a0a9                	j	8020cdd2 <vma_deep_mapping+0xcc>
      panic("uvmcopy: pte should exist");
    8020cd8a:	00009517          	auipc	a0,0x9
    8020cd8e:	84650513          	addi	a0,a0,-1978 # 802155d0 <digits+0xaa8>
    8020cd92:	ffffc097          	auipc	ra,0xffffc
    8020cd96:	4b8080e7          	jalr	1208(ra) # 8020924a <panic>
      panic("uvmcopy: page not present");
    8020cd9a:	00009517          	auipc	a0,0x9
    8020cd9e:	85650513          	addi	a0,a0,-1962 # 802155f0 <digits+0xac8>
    8020cda2:	ffffc097          	auipc	ra,0xffffc
    8020cda6:	4a8080e7          	jalr	1192(ra) # 8020924a <panic>
      __debug_warn("[vma deep mapping] alloc page fail\n");
    8020cdaa:	00009517          	auipc	a0,0x9
    8020cdae:	86650513          	addi	a0,a0,-1946 # 80215610 <digits+0xae8>
    8020cdb2:	ffffd097          	auipc	ra,0xffffd
    8020cdb6:	8be080e7          	jalr	-1858(ra) # 80209670 <__debug_warn>
  }
  return 0;
  
err:
  vmunmap(new, vma->addr, (start - vma->addr) / PGSIZE, 1);
    8020cdba:	008a3583          	ld	a1,8(s4)
    8020cdbe:	40b98633          	sub	a2,s3,a1
    8020cdc2:	4685                	li	a3,1
    8020cdc4:	8231                	srli	a2,a2,0xc
    8020cdc6:	8556                	mv	a0,s5
    8020cdc8:	ffffd097          	auipc	ra,0xffffd
    8020cdcc:	7d0080e7          	jalr	2000(ra) # 8020a598 <vmunmap>
  return -1;
    8020cdd0:	557d                	li	a0,-1
}
    8020cdd2:	60a6                	ld	ra,72(sp)
    8020cdd4:	6406                	ld	s0,64(sp)
    8020cdd6:	74e2                	ld	s1,56(sp)
    8020cdd8:	7942                	ld	s2,48(sp)
    8020cdda:	79a2                	ld	s3,40(sp)
    8020cddc:	7a02                	ld	s4,32(sp)
    8020cdde:	6ae2                	ld	s5,24(sp)
    8020cde0:	6b42                	ld	s6,16(sp)
    8020cde2:	6ba2                	ld	s7,8(sp)
    8020cde4:	6161                	addi	sp,sp,80
    8020cde6:	8082                	ret
      __debug_warn("[vma_deep_mapping] start = %p, end = %p\n", vma->addr, vma->end);
    8020cde8:	018a3603          	ld	a2,24(s4)
    8020cdec:	008a3583          	ld	a1,8(s4)
    8020cdf0:	00009517          	auipc	a0,0x9
    8020cdf4:	84850513          	addi	a0,a0,-1976 # 80215638 <digits+0xb10>
    8020cdf8:	ffffd097          	auipc	ra,0xffffd
    8020cdfc:	878080e7          	jalr	-1928(ra) # 80209670 <__debug_warn>
      freepage(mem);
    8020ce00:	854a                	mv	a0,s2
    8020ce02:	ffffd097          	auipc	ra,0xffffd
    8020ce06:	fd2080e7          	jalr	-46(ra) # 80209dd4 <_freepage>
      goto err;
    8020ce0a:	bf45                	j	8020cdba <vma_deep_mapping+0xb4>
  return 0;
    8020ce0c:	4501                	li	a0,0
    8020ce0e:	b7d1                	j	8020cdd2 <vma_deep_mapping+0xcc>

000000008020ce10 <vma_shallow_mapping>:

int vma_shallow_mapping(pagetable_t old, pagetable_t new, const struct vma *vma)
{
    8020ce10:	7179                	addi	sp,sp,-48
    8020ce12:	f406                	sd	ra,40(sp)
    8020ce14:	f022                	sd	s0,32(sp)
    8020ce16:	ec26                	sd	s1,24(sp)
    8020ce18:	e84a                	sd	s2,16(sp)
    8020ce1a:	e44e                	sd	s3,8(sp)
    8020ce1c:	e052                	sd	s4,0(sp)
    8020ce1e:	1800                	addi	s0,sp,48
    8020ce20:	8a2a                	mv	s4,a0
    8020ce22:	89ae                	mv	s3,a1
    8020ce24:	8932                	mv	s2,a2
  uint64 start = vma->addr;
    8020ce26:	6604                	ld	s1,8(a2)
  uint64 pa;
  pte_t *pte;
  long flags;

  while(start < vma->end)
    8020ce28:	6e1c                	ld	a5,24(a2)
    8020ce2a:	0af4f263          	bgeu	s1,a5,8020cece <vma_shallow_mapping+0xbe>
  {
    if((pte = walk(old, start, 0)) == NULL)
    8020ce2e:	4601                	li	a2,0
    8020ce30:	85a6                	mv	a1,s1
    8020ce32:	8552                	mv	a0,s4
    8020ce34:	ffffd097          	auipc	ra,0xffffd
    8020ce38:	4f2080e7          	jalr	1266(ra) # 8020a326 <walk>
    8020ce3c:	c90d                	beqz	a0,8020ce6e <vma_shallow_mapping+0x5e>
    {
      panic("uvmcopy: pte should exist");
    }
    if((*pte & PTE_V) == 0)
    8020ce3e:	6118                	ld	a4,0(a0)
    8020ce40:	00177793          	andi	a5,a4,1
    8020ce44:	cf8d                	beqz	a5,8020ce7e <vma_shallow_mapping+0x6e>
    {
      panic("uvmcopy: page not present");
    }
    pa = PTE2PA(*pte);
    8020ce46:	00a75693          	srli	a3,a4,0xa
    flags = PTE_FLAGS(*pte);

    if(mappages(new, start, PGSIZE, pa, flags) != 0)
    8020ce4a:	3ff77713          	andi	a4,a4,1023
    8020ce4e:	06b2                	slli	a3,a3,0xc
    8020ce50:	6605                	lui	a2,0x1
    8020ce52:	85a6                	mv	a1,s1
    8020ce54:	854e                	mv	a0,s3
    8020ce56:	ffffd097          	auipc	ra,0xffffd
    8020ce5a:	580080e7          	jalr	1408(ra) # 8020a3d6 <mappages>
    8020ce5e:	e905                	bnez	a0,8020ce8e <vma_shallow_mapping+0x7e>
    {
      __debug_warn("[vma_shallow_mapping] start = %p, end = %p\n", vma->addr, vma->end);
      goto err;
    }
    start +=PGSIZE;
    8020ce60:	6785                	lui	a5,0x1
    8020ce62:	94be                	add	s1,s1,a5
  while(start < vma->end)
    8020ce64:	01893783          	ld	a5,24(s2)
    8020ce68:	fcf4e3e3          	bltu	s1,a5,8020ce2e <vma_shallow_mapping+0x1e>
    8020ce6c:	a889                	j	8020cebe <vma_shallow_mapping+0xae>
      panic("uvmcopy: pte should exist");
    8020ce6e:	00008517          	auipc	a0,0x8
    8020ce72:	76250513          	addi	a0,a0,1890 # 802155d0 <digits+0xaa8>
    8020ce76:	ffffc097          	auipc	ra,0xffffc
    8020ce7a:	3d4080e7          	jalr	980(ra) # 8020924a <panic>
      panic("uvmcopy: page not present");
    8020ce7e:	00008517          	auipc	a0,0x8
    8020ce82:	77250513          	addi	a0,a0,1906 # 802155f0 <digits+0xac8>
    8020ce86:	ffffc097          	auipc	ra,0xffffc
    8020ce8a:	3c4080e7          	jalr	964(ra) # 8020924a <panic>
      __debug_warn("[vma_shallow_mapping] start = %p, end = %p\n", vma->addr, vma->end);
    8020ce8e:	01893603          	ld	a2,24(s2)
    8020ce92:	00893583          	ld	a1,8(s2)
    8020ce96:	00008517          	auipc	a0,0x8
    8020ce9a:	7d250513          	addi	a0,a0,2002 # 80215668 <digits+0xb40>
    8020ce9e:	ffffc097          	auipc	ra,0xffffc
    8020cea2:	7d2080e7          	jalr	2002(ra) # 80209670 <__debug_warn>
  }
  return 0;

err:
  vmunmap(new, vma->addr, (start - vma->addr) / PGSIZE, 1);
    8020cea6:	00893583          	ld	a1,8(s2)
    8020ceaa:	40b48633          	sub	a2,s1,a1
    8020ceae:	4685                	li	a3,1
    8020ceb0:	8231                	srli	a2,a2,0xc
    8020ceb2:	854e                	mv	a0,s3
    8020ceb4:	ffffd097          	auipc	ra,0xffffd
    8020ceb8:	6e4080e7          	jalr	1764(ra) # 8020a598 <vmunmap>
  return -1;
    8020cebc:	557d                	li	a0,-1
}
    8020cebe:	70a2                	ld	ra,40(sp)
    8020cec0:	7402                	ld	s0,32(sp)
    8020cec2:	64e2                	ld	s1,24(sp)
    8020cec4:	6942                	ld	s2,16(sp)
    8020cec6:	69a2                	ld	s3,8(sp)
    8020cec8:	6a02                	ld	s4,0(sp)
    8020ceca:	6145                	addi	sp,sp,48
    8020cecc:	8082                	ret
  return 0;
    8020cece:	4501                	li	a0,0
    8020ced0:	b7fd                	j	8020cebe <vma_shallow_mapping+0xae>

000000008020ced2 <growproc>:

// Grow or shrink user memory by n bytes.
// Return 0 on success, -1 on failure.
uint64
growproc(int n)
{
    8020ced2:	1101                	addi	sp,sp,-32
    8020ced4:	ec06                	sd	ra,24(sp)
    8020ced6:	e822                	sd	s0,16(sp)
    8020ced8:	e426                	sd	s1,8(sp)
    8020ceda:	1000                	addi	s0,sp,32
    8020cedc:	84aa                	mv	s1,a0
  struct proc *p = myproc();
    8020cede:	fffff097          	auipc	ra,0xfffff
    8020cee2:	4d4080e7          	jalr	1236(ra) # 8020c3b2 <myproc>
  //printf("[growproc]proc name:%s\n",p->name);
  //printf("[growproc]want grow to %p\n",n);
  struct vma* vma = alloc_addr_heap_vma(p, n, PTE_R|PTE_W|PTE_U);
    8020cee6:	4659                	li	a2,22
    8020cee8:	85a6                	mv	a1,s1
    8020ceea:	00000097          	auipc	ra,0x0
    8020ceee:	850080e7          	jalr	-1968(ra) # 8020c73a <alloc_addr_heap_vma>
  if(vma == NULL){
    8020cef2:	c519                	beqz	a0,8020cf00 <growproc+0x2e>
    __debug_warn("[growproc]alloc heap not found\n");
    return 0;
  }
  //printf("[growproc]actually grow to %p\n",vma->end);
  return vma->end;
    8020cef4:	6d08                	ld	a0,24(a0)
}
    8020cef6:	60e2                	ld	ra,24(sp)
    8020cef8:	6442                	ld	s0,16(sp)
    8020cefa:	64a2                	ld	s1,8(sp)
    8020cefc:	6105                	addi	sp,sp,32
    8020cefe:	8082                	ret
    __debug_warn("[growproc]alloc heap not found\n");
    8020cf00:	00008517          	auipc	a0,0x8
    8020cf04:	79850513          	addi	a0,a0,1944 # 80215698 <digits+0xb70>
    8020cf08:	ffffc097          	auipc	ra,0xffffc
    8020cf0c:	768080e7          	jalr	1896(ra) # 80209670 <__debug_warn>
    return 0;
    8020cf10:	4501                	li	a0,0
    8020cf12:	b7d5                	j	8020cef6 <growproc+0x24>

000000008020cf14 <growprocsize>:

uint64 growprocsize(uint64 sz)
{
    8020cf14:	1101                	addi	sp,sp,-32
    8020cf16:	ec06                	sd	ra,24(sp)
    8020cf18:	e822                	sd	s0,16(sp)
    8020cf1a:	e426                	sd	s1,8(sp)
    8020cf1c:	1000                	addi	s0,sp,32
    8020cf1e:	84aa                	mv	s1,a0
  struct proc *p = myproc();
    8020cf20:	fffff097          	auipc	ra,0xfffff
    8020cf24:	492080e7          	jalr	1170(ra) # 8020c3b2 <myproc>
  struct vma *vma = alloc_sz_heap_vma(p, sz, PTE_R|PTE_W|PTE_U);
    8020cf28:	4659                	li	a2,22
    8020cf2a:	85a6                	mv	a1,s1
    8020cf2c:	00000097          	auipc	ra,0x0
    8020cf30:	910080e7          	jalr	-1776(ra) # 8020c83c <alloc_sz_heap_vma>
  if(vma == NULL)
    8020cf34:	cd09                	beqz	a0,8020cf4e <growprocsize+0x3a>
  {
    __debug_warn("[growproc] alloc heap failed\n");
    return 0;
  }
  return vma->end - PGROUNDUP(sz);
    8020cf36:	6785                	lui	a5,0x1
    8020cf38:	17fd                	addi	a5,a5,-1
    8020cf3a:	94be                	add	s1,s1,a5
    8020cf3c:	77fd                	lui	a5,0xfffff
    8020cf3e:	8cfd                	and	s1,s1,a5
    8020cf40:	6d08                	ld	a0,24(a0)
    8020cf42:	8d05                	sub	a0,a0,s1
}
    8020cf44:	60e2                	ld	ra,24(sp)
    8020cf46:	6442                	ld	s0,16(sp)
    8020cf48:	64a2                	ld	s1,8(sp)
    8020cf4a:	6105                	addi	sp,sp,32
    8020cf4c:	8082                	ret
    __debug_warn("[growproc] alloc heap failed\n");
    8020cf4e:	00008517          	auipc	a0,0x8
    8020cf52:	76a50513          	addi	a0,a0,1898 # 802156b8 <digits+0xb90>
    8020cf56:	ffffc097          	auipc	ra,0xffffc
    8020cf5a:	71a080e7          	jalr	1818(ra) # 80209670 <__debug_warn>
    return 0;
    8020cf5e:	4501                	li	a0,0
    8020cf60:	b7d5                	j	8020cf44 <growprocsize+0x30>

000000008020cf62 <print_vma_info>:
  [MMAP]  "MMAP",
};


void print_vma_info(struct proc* p)
{
    8020cf62:	7139                	addi	sp,sp,-64
    8020cf64:	fc06                	sd	ra,56(sp)
    8020cf66:	f822                	sd	s0,48(sp)
    8020cf68:	f426                	sd	s1,40(sp)
    8020cf6a:	f04a                	sd	s2,32(sp)
    8020cf6c:	ec4e                	sd	s3,24(sp)
    8020cf6e:	e852                	sd	s4,16(sp)
    8020cf70:	e456                	sd	s5,8(sp)
    8020cf72:	e05a                	sd	s6,0(sp)
    8020cf74:	0080                	addi	s0,sp,64
    8020cf76:	89aa                	mv	s3,a0
  struct vma * head = p->vma;
    8020cf78:	17053a03          	ld	s4,368(a0)
  struct vma * pvma = head->next;
    8020cf7c:	040a3483          	ld	s1,64(s4)
  __debug_info("\t\tva\t\t\tpa\t\t\tsz\t\t\tend\t\ttype\n");
    8020cf80:	00008517          	auipc	a0,0x8
    8020cf84:	75850513          	addi	a0,a0,1880 # 802156d8 <digits+0xbb0>
    8020cf88:	ffffc097          	auipc	ra,0xffffc
    8020cf8c:	522080e7          	jalr	1314(ra) # 802094aa <__debug_info>
  while(pvma != head){
    8020cf90:	049a0463          	beq	s4,s1,8020cfd8 <print_vma_info+0x76>
    __debug_info("[vma_info]%p\t%p\t%p\t%p\t%s\n", 
    8020cf94:	00008b17          	auipc	s6,0x8
    8020cf98:	7f4b0b13          	addi	s6,s6,2036 # 80215788 <vma_type>
    8020cf9c:	00008a97          	auipc	s5,0x8
    8020cfa0:	75ca8a93          	addi	s5,s5,1884 # 802156f8 <digits+0xbd0>
    8020cfa4:	0084b903          	ld	s2,8(s1)
    8020cfa8:	85ca                	mv	a1,s2
    8020cfaa:	0609b503          	ld	a0,96(s3)
    8020cfae:	ffffd097          	auipc	ra,0xffffd
    8020cfb2:	7da080e7          	jalr	2010(ra) # 8020a788 <kwalkaddr1>
    8020cfb6:	862a                	mv	a2,a0
    8020cfb8:	0004e783          	lwu	a5,0(s1)
    8020cfbc:	078e                	slli	a5,a5,0x3
    8020cfbe:	97da                	add	a5,a5,s6
    8020cfc0:	639c                	ld	a5,0(a5)
    8020cfc2:	6c98                	ld	a4,24(s1)
    8020cfc4:	6894                	ld	a3,16(s1)
    8020cfc6:	85ca                	mv	a1,s2
    8020cfc8:	8556                	mv	a0,s5
    8020cfca:	ffffc097          	auipc	ra,0xffffc
    8020cfce:	4e0080e7          	jalr	1248(ra) # 802094aa <__debug_info>
                pvma->addr, kwalkaddr1(p->pagetable,pvma->addr),pvma->sz, pvma->end, vma_type[pvma->type]);
    pvma = pvma->next;
    8020cfd2:	60a4                	ld	s1,64(s1)
  while(pvma != head){
    8020cfd4:	fc9a18e3          	bne	s4,s1,8020cfa4 <print_vma_info+0x42>
  }
}
    8020cfd8:	70e2                	ld	ra,56(sp)
    8020cfda:	7442                	ld	s0,48(sp)
    8020cfdc:	74a2                	ld	s1,40(sp)
    8020cfde:	7902                	ld	s2,32(sp)
    8020cfe0:	69e2                	ld	s3,24(sp)
    8020cfe2:	6a42                	ld	s4,16(sp)
    8020cfe4:	6aa2                	ld	s5,8(sp)
    8020cfe6:	6b02                	ld	s6,0(sp)
    8020cfe8:	6121                	addi	sp,sp,64
    8020cfea:	8082                	ret

000000008020cfec <print_single_vma>:

void print_single_vma(pagetable_t pagetable,struct vma* v)
{
    8020cfec:	1141                	addi	sp,sp,-16
    8020cfee:	e406                	sd	ra,8(sp)
    8020cff0:	e022                	sd	s0,0(sp)
    8020cff2:	0800                	addi	s0,sp,16
  __debug_info("[vma_info]va %p\tsz %p\tend %p\tname %s\n", 
    8020cff4:	0005e783          	lwu	a5,0(a1)
    8020cff8:	00379713          	slli	a4,a5,0x3
    8020cffc:	00008797          	auipc	a5,0x8
    8020d000:	78c78793          	addi	a5,a5,1932 # 80215788 <vma_type>
    8020d004:	97ba                	add	a5,a5,a4
    8020d006:	6398                	ld	a4,0(a5)
    8020d008:	6d94                	ld	a3,24(a1)
    8020d00a:	6990                	ld	a2,16(a1)
    8020d00c:	658c                	ld	a1,8(a1)
    8020d00e:	00008517          	auipc	a0,0x8
    8020d012:	70a50513          	addi	a0,a0,1802 # 80215718 <digits+0xbf0>
    8020d016:	ffffc097          	auipc	ra,0xffffc
    8020d01a:	494080e7          	jalr	1172(ra) # 802094aa <__debug_info>
                v->addr,v->sz, v->end, vma_type[v->type]);

}
    8020d01e:	60a2                	ld	ra,8(sp)
    8020d020:	6402                	ld	s0,0(sp)
    8020d022:	0141                	addi	sp,sp,16
    8020d024:	8082                	ret

000000008020d026 <do_mmap_fix>:
#include "include/kalloc.h"
#include "include/string.h"
#include "include/errno.h"

map_fix* do_mmap_fix(uint64 start, uint64 len, int flags, int fd, off_t offset)
{
    8020d026:	715d                	addi	sp,sp,-80
    8020d028:	e486                	sd	ra,72(sp)
    8020d02a:	e0a2                	sd	s0,64(sp)
    8020d02c:	fc26                	sd	s1,56(sp)
    8020d02e:	f84a                	sd	s2,48(sp)
    8020d030:	f44e                	sd	s3,40(sp)
    8020d032:	f052                	sd	s4,32(sp)
    8020d034:	ec56                	sd	s5,24(sp)
    8020d036:	e85a                	sd	s6,16(sp)
    8020d038:	e45e                	sd	s7,8(sp)
    8020d03a:	0880                	addi	s0,sp,80
    8020d03c:	8b2a                	mv	s6,a0
    8020d03e:	8aae                	mv	s5,a1
    8020d040:	8a32                	mv	s4,a2
    8020d042:	8936                	mv	s2,a3
    8020d044:	89ba                	mv	s3,a4
    struct proc* p = myproc();
    8020d046:	fffff097          	auipc	ra,0xfffff
    8020d04a:	36c080e7          	jalr	876(ra) # 8020c3b2 <myproc>
    8020d04e:	84aa                	mv	s1,a0
    struct file* f = fd < 0 ? NULL : p->ofile[fd];
    8020d050:	4b81                	li	s7,0
    8020d052:	00094863          	bltz	s2,8020d062 <do_mmap_fix+0x3c>
    8020d056:	757c                	ld	a5,232(a0)
    8020d058:	00391713          	slli	a4,s2,0x3
    8020d05c:	97ba                	add	a5,a5,a4
    8020d05e:	0007bb83          	ld	s7,0(a5)
    map_fix* mf = kmalloc(sizeof(map_fix));
    8020d062:	04800513          	li	a0,72
    8020d066:	ffffd097          	auipc	ra,0xffffd
    8020d06a:	f56080e7          	jalr	-170(ra) # 80209fbc <kmalloc>
        .sz = len,
        .mmap = (uint64)f,
        .fd = fd,
        .flags = flags,
        .f_off = offset,
        .next = p->mf,
    8020d06e:	1804b703          	ld	a4,384(s1)
    *mf = (map_fix){
    8020d072:	00053023          	sd	zero,0(a0)
    8020d076:	00053c23          	sd	zero,24(a0)
    8020d07a:	02053c23          	sd	zero,56(a0)
    8020d07e:	4699                	li	a3,6
    8020d080:	c114                	sw	a3,0(a0)
    8020d082:	01653423          	sd	s6,8(a0)
    8020d086:	01553823          	sd	s5,16(a0)
    8020d08a:	03753023          	sd	s7,32(a0)
    8020d08e:	03452423          	sw	s4,40(a0)
    8020d092:	03252623          	sw	s2,44(a0)
    8020d096:	03353823          	sd	s3,48(a0)
    8020d09a:	e138                	sd	a4,64(a0)
        .type = MMAP
    };
    p->mf = mf;
    8020d09c:	18a4b023          	sd	a0,384(s1)
    return mf;
}
    8020d0a0:	60a6                	ld	ra,72(sp)
    8020d0a2:	6406                	ld	s0,64(sp)
    8020d0a4:	74e2                	ld	s1,56(sp)
    8020d0a6:	7942                	ld	s2,48(sp)
    8020d0a8:	79a2                	ld	s3,40(sp)
    8020d0aa:	7a02                	ld	s4,32(sp)
    8020d0ac:	6ae2                	ld	s5,24(sp)
    8020d0ae:	6b42                	ld	s6,16(sp)
    8020d0b0:	6ba2                	ld	s7,8(sp)
    8020d0b2:	6161                	addi	sp,sp,80
    8020d0b4:	8082                	ret

000000008020d0b6 <do_mmap>:

uint64 do_mmap(uint64 start, uint64 len, int prot, int flags, int fd, off_t offset)
{
    8020d0b6:	7119                	addi	sp,sp,-128
    8020d0b8:	fc86                	sd	ra,120(sp)
    8020d0ba:	f8a2                	sd	s0,112(sp)
    8020d0bc:	f4a6                	sd	s1,104(sp)
    8020d0be:	f0ca                	sd	s2,96(sp)
    8020d0c0:	ecce                	sd	s3,88(sp)
    8020d0c2:	e8d2                	sd	s4,80(sp)
    8020d0c4:	e4d6                	sd	s5,72(sp)
    8020d0c6:	e0da                	sd	s6,64(sp)
    8020d0c8:	fc5e                	sd	s7,56(sp)
    8020d0ca:	f862                	sd	s8,48(sp)
    8020d0cc:	f466                	sd	s9,40(sp)
    8020d0ce:	f06a                	sd	s10,32(sp)
    8020d0d0:	ec6e                	sd	s11,24(sp)
    8020d0d2:	0100                	addi	s0,sp,128
    8020d0d4:	8aaa                	mv	s5,a0
    8020d0d6:	8a2e                	mv	s4,a1
    8020d0d8:	8932                	mv	s2,a2
    8020d0da:	84b6                	mv	s1,a3
    8020d0dc:	8cba                	mv	s9,a4
    8020d0de:	89be                	mv	s3,a5
    struct proc *p = myproc();
    8020d0e0:	fffff097          	auipc	ra,0xfffff
    8020d0e4:	2d2080e7          	jalr	722(ra) # 8020c3b2 <myproc>
    8020d0e8:	8b2a                	mv	s6,a0
    struct vma *vma = NULL;

    if(flags & MAP_ANONYMOUS)
    8020d0ea:	0204f793          	andi	a5,s1,32
    8020d0ee:	10079c63          	bnez	a5,8020d206 <do_mmap+0x150>
    {
        fd = -1;
        goto ignore_fd;
    }

    if(fd < 0)
    8020d0f2:	0e0cc463          	bltz	s9,8020d1da <do_mmap+0x124>
    {
        __debug_warn("[do_mmap] fd illegal, fd = %d\n", fd);
        return -1;
    }

    if(fd > NOFILEMAX(p))
    8020d0f6:	7170                	ld	a2,224(a0)
    8020d0f8:	0c800793          	li	a5,200
    8020d0fc:	00c7d463          	bge	a5,a2,8020d104 <do_mmap+0x4e>
    8020d100:	0c800613          	li	a2,200
    8020d104:	0f964663          	blt	a2,s9,8020d1f0 <do_mmap+0x13a>
        __debug_warn("[do_mmap] fd illegal, fd(%d) > NOFILEMAX(%d)\n", fd, NOFILEMAX(p));
        return -1;
    }

ignore_fd:
    if(offset < 0)
    8020d108:	1009c163          	bltz	s3,8020d20a <do_mmap+0x154>
    {
        __debug_warn("[do_mmap] offset illegal, offset = %d\n", offset);
        return -1;
    }
    if(start % PGSIZE != 0)
    8020d10c:	034a9793          	slli	a5,s5,0x34
    8020d110:	10079863          	bnez	a5,8020d220 <do_mmap+0x16a>
        return -1;
    }
    // print_vma_info(p);
    // __debug_info("[dp_mmap] start = %p, len = %p, flags = %p, fd = %d, offset = %d\n", start, len, flags, fd, offset);
    int perm = PTE_U;
    if(prot & PROT_READ) 
    8020d114:	00197793          	andi	a5,s2,1
    int perm = PTE_U;
    8020d118:	4bc1                	li	s7,16
    if(prot & PROT_READ) 
    8020d11a:	c399                	beqz	a5,8020d120 <do_mmap+0x6a>
        perm  |= (PTE_R | PTE_A);
    8020d11c:	05200b93          	li	s7,82
    if(prot & PROT_WRITE)
    8020d120:	00297793          	andi	a5,s2,2
    8020d124:	c399                	beqz	a5,8020d12a <do_mmap+0x74>
        perm  |= (PTE_W | PTE_D);
    8020d126:	084beb93          	ori	s7,s7,132
    if(prot & PROT_EXEC)
    8020d12a:	00497913          	andi	s2,s2,4
    8020d12e:	00090463          	beqz	s2,8020d136 <do_mmap+0x80>
        perm  |= (PTE_X | PTE_A);
    8020d132:	048beb93          	ori	s7,s7,72

    struct file *f = fd == -1 ? NULL : p->ofile[fd];
    8020d136:	57fd                	li	a5,-1
    8020d138:	10fc8863          	beq	s9,a5,8020d248 <do_mmap+0x192>
    8020d13c:	0e8b3783          	ld	a5,232(s6)
    8020d140:	003c9713          	slli	a4,s9,0x3
    8020d144:	97ba                	add	a5,a5,a4
    8020d146:	0007bc03          	ld	s8,0(a5)
    if(fd != -1 && f == NULL)
    8020d14a:	0e0c0563          	beqz	s8,8020d234 <do_mmap+0x17e>
    {
        __debug_warn("[do_mmap] mmap file illegal\n");
        return -1;
    }

    if((flags & MAP_FIXED) && start != 0)
    8020d14e:	0104f793          	andi	a5,s1,16
    8020d152:	c399                	beqz	a5,8020d158 <do_mmap+0xa2>
    8020d154:	0e0a9c63          	bnez	s5,8020d24c <do_mmap+0x196>
    {
        vma = (struct vma *)do_mmap_fix(start, len, flags, fd, offset);
        goto skip_vma;
    }

    vma = alloc_mmap_vma(p, flags, start, len, perm, fd, offset);
    8020d158:	884e                	mv	a6,s3
    8020d15a:	87e6                	mv	a5,s9
    8020d15c:	875e                	mv	a4,s7
    8020d15e:	86d2                	mv	a3,s4
    8020d160:	8656                	mv	a2,s5
    8020d162:	85a6                	mv	a1,s1
    8020d164:	855a                	mv	a0,s6
    8020d166:	fffff097          	auipc	ra,0xfffff
    8020d16a:	4be080e7          	jalr	1214(ra) # 8020c624 <alloc_mmap_vma>
    8020d16e:	892a                	mv	s2,a0
    start = vma->addr;
    8020d170:	00853a83          	ld	s5,8(a0)
    }

    uint64 mmap_sz ;
skip_vma:
    mmap_sz = 0;
    if(fd != -1)
    8020d174:	57fd                	li	a5,-1
    8020d176:	0efc8663          	beq	s9,a5,8020d262 <do_mmap+0x1ac>
    {
        mmap_sz = f->ep->file_size - offset;
    8020d17a:	028c3783          	ld	a5,40(s8)
    8020d17e:	1087ac83          	lw	s9,264(a5)
        if(len < mmap_sz)
            mmap_sz = len;
        f->off = offset;
    8020d182:	053c3423          	sd	s3,72(s8)
        vma->mmap |= MMAP_ANONY_FLAG;
        vma->f_off = 0;
        return start;
    }

    vma->mmap = (uint64)filedup(f);
    8020d186:	8562                	mv	a0,s8
    8020d188:	ffff9097          	auipc	ra,0xffff9
    8020d18c:	0c6080e7          	jalr	198(ra) # 8020624e <filedup>
    if(!(flags & MAP_SHARED))
    8020d190:	8885                	andi	s1,s1,1
    8020d192:	16048c63          	beqz	s1,8020d30a <do_mmap+0x254>
        mmap_sz = f->ep->file_size - offset;
    8020d196:	1c82                	slli	s9,s9,0x20
    8020d198:	020cdc93          	srli	s9,s9,0x20
    8020d19c:	413c89b3          	sub	s3,s9,s3
    8020d1a0:	0149f363          	bgeu	s3,s4,8020d1a6 <do_mmap+0xf0>
    8020d1a4:	8a4e                	mv	s4,s3
    {
        return start;
    }
    vma->mmap |= MMAP_SHARE_FLAG;
    8020d1a6:	00156513          	ori	a0,a0,1
    8020d1aa:	02a93023          	sd	a0,32(s2)
    
    // read and copy file to memory
    uint64 end_pagespace = mmap_sz % PGSIZE;
    8020d1ae:	6785                	lui	a5,0x1
    8020d1b0:	17fd                	addi	a5,a5,-1
    8020d1b2:	00fa7d33          	and	s10,s4,a5
    int page_n = PGROUNDUP(mmap_sz) >> PGSHIFT;
    8020d1b6:	9a3e                	add	s4,s4,a5
    8020d1b8:	00ca5a13          	srli	s4,s4,0xc
    8020d1bc:	2a01                	sext.w	s4,s4
    uint64 va = start;

    for(int i = 0; i < page_n; ++i)
    8020d1be:	0b405e63          	blez	s4,8020d27a <do_mmap+0x1c4>
    uint64 va = start;
    8020d1c2:	8956                	mv	s2,s5
    for(int i = 0; i < page_n; ++i)
    8020d1c4:	4981                	li	s3,0
        if(pa == NULL)
        {
            __debug_warn("[do_mmap] va = %p, pa not found\n", va);
            return -1;
        }
        if(i != page_n - 1)
    8020d1c6:	fffa0c9b          	addiw	s9,s4,-1
        {
            fileread(f, va, PGSIZE);
        }
        else 
        {
            fileread(f, va, end_pagespace);
    8020d1ca:	000d0d9b          	sext.w	s11,s10
            memset((void *)(pa + end_pagespace), 0, PGSIZE - end_pagespace);
    8020d1ce:	6785                	lui	a5,0x1
    8020d1d0:	41a787bb          	subw	a5,a5,s10
    8020d1d4:	f8f43423          	sd	a5,-120(s0)
    8020d1d8:	a229                	j	8020d2e2 <do_mmap+0x22c>
        __debug_warn("[do_mmap] fd illegal, fd = %d\n", fd);
    8020d1da:	85e6                	mv	a1,s9
    8020d1dc:	00008517          	auipc	a0,0x8
    8020d1e0:	5f450513          	addi	a0,a0,1524 # 802157d0 <vma_type+0x48>
    8020d1e4:	ffffc097          	auipc	ra,0xffffc
    8020d1e8:	48c080e7          	jalr	1164(ra) # 80209670 <__debug_warn>
        return -1;
    8020d1ec:	5afd                	li	s5,-1
    8020d1ee:	a071                	j	8020d27a <do_mmap+0x1c4>
        __debug_warn("[do_mmap] fd illegal, fd(%d) > NOFILEMAX(%d)\n", fd, NOFILEMAX(p));
    8020d1f0:	85e6                	mv	a1,s9
    8020d1f2:	00008517          	auipc	a0,0x8
    8020d1f6:	5fe50513          	addi	a0,a0,1534 # 802157f0 <vma_type+0x68>
    8020d1fa:	ffffc097          	auipc	ra,0xffffc
    8020d1fe:	476080e7          	jalr	1142(ra) # 80209670 <__debug_warn>
        return -1;
    8020d202:	5afd                	li	s5,-1
    8020d204:	a89d                	j	8020d27a <do_mmap+0x1c4>
        fd = -1;
    8020d206:	5cfd                	li	s9,-1
    8020d208:	b701                	j	8020d108 <do_mmap+0x52>
        __debug_warn("[do_mmap] offset illegal, offset = %d\n", offset);
    8020d20a:	85ce                	mv	a1,s3
    8020d20c:	00008517          	auipc	a0,0x8
    8020d210:	61450513          	addi	a0,a0,1556 # 80215820 <vma_type+0x98>
    8020d214:	ffffc097          	auipc	ra,0xffffc
    8020d218:	45c080e7          	jalr	1116(ra) # 80209670 <__debug_warn>
        return -1;
    8020d21c:	5afd                	li	s5,-1
    8020d21e:	a8b1                	j	8020d27a <do_mmap+0x1c4>
        __debug_warn("[do_mmap] mmap start address not aligned\n");
    8020d220:	00008517          	auipc	a0,0x8
    8020d224:	62850513          	addi	a0,a0,1576 # 80215848 <vma_type+0xc0>
    8020d228:	ffffc097          	auipc	ra,0xffffc
    8020d22c:	448080e7          	jalr	1096(ra) # 80209670 <__debug_warn>
        return -1;
    8020d230:	5afd                	li	s5,-1
    8020d232:	a0a1                	j	8020d27a <do_mmap+0x1c4>
        __debug_warn("[do_mmap] mmap file illegal\n");
    8020d234:	00008517          	auipc	a0,0x8
    8020d238:	64450513          	addi	a0,a0,1604 # 80215878 <vma_type+0xf0>
    8020d23c:	ffffc097          	auipc	ra,0xffffc
    8020d240:	434080e7          	jalr	1076(ra) # 80209670 <__debug_warn>
        return -1;
    8020d244:	5afd                	li	s5,-1
    8020d246:	a815                	j	8020d27a <do_mmap+0x1c4>
    struct file *f = fd == -1 ? NULL : p->ofile[fd];
    8020d248:	4c01                	li	s8,0
    8020d24a:	b711                	j	8020d14e <do_mmap+0x98>
        vma = (struct vma *)do_mmap_fix(start, len, flags, fd, offset);
    8020d24c:	874e                	mv	a4,s3
    8020d24e:	86e6                	mv	a3,s9
    8020d250:	8626                	mv	a2,s1
    8020d252:	85d2                	mv	a1,s4
    8020d254:	8556                	mv	a0,s5
    8020d256:	00000097          	auipc	ra,0x0
    8020d25a:	dd0080e7          	jalr	-560(ra) # 8020d026 <do_mmap_fix>
    8020d25e:	892a                	mv	s2,a0
        goto skip_vma;
    8020d260:	bf11                	j	8020d174 <do_mmap+0xbe>
        if (flags & MAP_SHARED) {
    8020d262:	8885                	andi	s1,s1,1
    8020d264:	e89d                	bnez	s1,8020d29a <do_mmap+0x1e4>
        vma->mmap = NULL;
    8020d266:	02093023          	sd	zero,32(s2)
        vma->mmap |= MMAP_ANONY_FLAG;
    8020d26a:	02093783          	ld	a5,32(s2)
    8020d26e:	0027e793          	ori	a5,a5,2
    8020d272:	02f93023          	sd	a5,32(s2)
        vma->f_off = 0;
    8020d276:	02093823          	sd	zero,48(s2)
        }
        va += PGSIZE;
    }

    return start;
}
    8020d27a:	8556                	mv	a0,s5
    8020d27c:	70e6                	ld	ra,120(sp)
    8020d27e:	7446                	ld	s0,112(sp)
    8020d280:	74a6                	ld	s1,104(sp)
    8020d282:	7906                	ld	s2,96(sp)
    8020d284:	69e6                	ld	s3,88(sp)
    8020d286:	6a46                	ld	s4,80(sp)
    8020d288:	6aa6                	ld	s5,72(sp)
    8020d28a:	6b06                	ld	s6,64(sp)
    8020d28c:	7be2                	ld	s7,56(sp)
    8020d28e:	7c42                	ld	s8,48(sp)
    8020d290:	7ca2                	ld	s9,40(sp)
    8020d292:	7d02                	ld	s10,32(sp)
    8020d294:	6de2                	ld	s11,24(sp)
    8020d296:	6109                	addi	sp,sp,128
    8020d298:	8082                	ret
            vma->mmap |= MMAP_SHARE_FLAG;
    8020d29a:	4785                	li	a5,1
    8020d29c:	02f93023          	sd	a5,32(s2)
    8020d2a0:	b7e9                	j	8020d26a <do_mmap+0x1b4>
            __debug_warn("[do_mmap] va = %p, pa not found\n", va);
    8020d2a2:	85ca                	mv	a1,s2
    8020d2a4:	00008517          	auipc	a0,0x8
    8020d2a8:	5f450513          	addi	a0,a0,1524 # 80215898 <vma_type+0x110>
    8020d2ac:	ffffc097          	auipc	ra,0xffffc
    8020d2b0:	3c4080e7          	jalr	964(ra) # 80209670 <__debug_warn>
            return -1;
    8020d2b4:	5afd                	li	s5,-1
    8020d2b6:	b7d1                	j	8020d27a <do_mmap+0x1c4>
            fileread(f, va, end_pagespace);
    8020d2b8:	866e                	mv	a2,s11
    8020d2ba:	85ca                	mv	a1,s2
    8020d2bc:	8562                	mv	a0,s8
    8020d2be:	ffff9097          	auipc	ra,0xffff9
    8020d2c2:	528080e7          	jalr	1320(ra) # 802067e6 <fileread>
            memset((void *)(pa + end_pagespace), 0, PGSIZE - end_pagespace);
    8020d2c6:	f8843603          	ld	a2,-120(s0)
    8020d2ca:	4581                	li	a1,0
    8020d2cc:	009d0533          	add	a0,s10,s1
    8020d2d0:	ffff4097          	auipc	ra,0xffff4
    8020d2d4:	aa4080e7          	jalr	-1372(ra) # 80200d74 <memset>
        va += PGSIZE;
    8020d2d8:	6785                	lui	a5,0x1
    8020d2da:	993e                	add	s2,s2,a5
    for(int i = 0; i < page_n; ++i)
    8020d2dc:	2985                	addiw	s3,s3,1
    8020d2de:	f93a0ee3          	beq	s4,s3,8020d27a <do_mmap+0x1c4>
        uint64 pa = experm(p->pagetable, va, perm);
    8020d2e2:	865e                	mv	a2,s7
    8020d2e4:	85ca                	mv	a1,s2
    8020d2e6:	060b3503          	ld	a0,96(s6)
    8020d2ea:	ffffd097          	auipc	ra,0xffffd
    8020d2ee:	3d8080e7          	jalr	984(ra) # 8020a6c2 <experm>
    8020d2f2:	84aa                	mv	s1,a0
        if(pa == NULL)
    8020d2f4:	d55d                	beqz	a0,8020d2a2 <do_mmap+0x1ec>
        if(i != page_n - 1)
    8020d2f6:	fd3c81e3          	beq	s9,s3,8020d2b8 <do_mmap+0x202>
            fileread(f, va, PGSIZE);
    8020d2fa:	6605                	lui	a2,0x1
    8020d2fc:	85ca                	mv	a1,s2
    8020d2fe:	8562                	mv	a0,s8
    8020d300:	ffff9097          	auipc	ra,0xffff9
    8020d304:	4e6080e7          	jalr	1254(ra) # 802067e6 <fileread>
    8020d308:	bfc1                	j	8020d2d8 <do_mmap+0x222>
    vma->mmap = (uint64)filedup(f);
    8020d30a:	02a93023          	sd	a0,32(s2)
    8020d30e:	b7b5                	j	8020d27a <do_mmap+0x1c4>

000000008020d310 <do_munmap_fix>:

map_fix* do_munmap_fix(struct proc* p,uint64 start, uint64 len){
    8020d310:	1141                	addi	sp,sp,-16
    8020d312:	e422                	sd	s0,8(sp)
    8020d314:	0800                	addi	s0,sp,16
    map_fix* i = p->mf;
    8020d316:	18053783          	ld	a5,384(a0)
    map_fix* last = NULL;
    while(i){
    8020d31a:	cb95                	beqz	a5,8020d34e <do_munmap_fix+0x3e>
    8020d31c:	882a                	mv	a6,a0
    map_fix* last = NULL;
    8020d31e:	4681                	li	a3,0
    8020d320:	a029                	j	8020d32a <do_munmap_fix+0x1a>
        if(i->addr==start&&i->sz == len){
            goto success;
        }
        last = i;
        i = i->next;
    8020d322:	63a8                	ld	a0,64(a5)
    while(i){
    8020d324:	86be                	mv	a3,a5
    8020d326:	cd01                	beqz	a0,8020d33e <do_munmap_fix+0x2e>
        i = i->next;
    8020d328:	87aa                	mv	a5,a0
        if(i->addr==start&&i->sz == len){
    8020d32a:	6798                	ld	a4,8(a5)
    8020d32c:	feb71be3          	bne	a4,a1,8020d322 <do_munmap_fix+0x12>
    8020d330:	6b98                	ld	a4,16(a5)
    8020d332:	fec718e3          	bne	a4,a2,8020d322 <do_munmap_fix+0x12>
    }
    return NULL;
success:
    if(last)last->next = i->next;
    8020d336:	c699                	beqz	a3,8020d344 <do_munmap_fix+0x34>
    8020d338:	63b8                	ld	a4,64(a5)
    8020d33a:	e2b8                	sd	a4,64(a3)
    8020d33c:	853e                	mv	a0,a5
    else p->mf = i->next;
    return i;
}
    8020d33e:	6422                	ld	s0,8(sp)
    8020d340:	0141                	addi	sp,sp,16
    8020d342:	8082                	ret
    else p->mf = i->next;
    8020d344:	63b8                	ld	a4,64(a5)
    8020d346:	18e83023          	sd	a4,384(a6)
    8020d34a:	853e                	mv	a0,a5
    8020d34c:	bfcd                	j	8020d33e <do_munmap_fix+0x2e>
    return NULL;
    8020d34e:	853e                	mv	a0,a5
    8020d350:	b7fd                	j	8020d33e <do_munmap_fix+0x2e>

000000008020d352 <find_map_fix>:

map_fix * find_map_fix(struct proc *p, uint64 start, uint64 len)
{
    8020d352:	1141                	addi	sp,sp,-16
    8020d354:	e422                	sd	s0,8(sp)
    8020d356:	0800                	addi	s0,sp,16
  map_fix *i = p->mf;
    8020d358:	18053503          	ld	a0,384(a0)
  while(i)
    8020d35c:	e501                	bnez	a0,8020d364 <find_map_fix+0x12>
    8020d35e:	a809                	j	8020d370 <find_map_fix+0x1e>
  {
    if(i->addr == start && len <= i->sz)
    {
      return i;
    }
    i = i->next;
    8020d360:	6128                	ld	a0,64(a0)
  while(i)
    8020d362:	c519                	beqz	a0,8020d370 <find_map_fix+0x1e>
    if(i->addr == start && len <= i->sz)
    8020d364:	651c                	ld	a5,8(a0)
    8020d366:	feb79de3          	bne	a5,a1,8020d360 <find_map_fix+0xe>
    8020d36a:	691c                	ld	a5,16(a0)
    8020d36c:	fec7eae3          	bltu	a5,a2,8020d360 <find_map_fix+0xe>
  }
  return NULL;
}
    8020d370:	6422                	ld	s0,8(sp)
    8020d372:	0141                	addi	sp,sp,16
    8020d374:	8082                	ret

000000008020d376 <do_munmap>:

uint64 do_munmap(struct proc* np,uint64 start, uint64 len)
{
    8020d376:	7159                	addi	sp,sp,-112
    8020d378:	f486                	sd	ra,104(sp)
    8020d37a:	f0a2                	sd	s0,96(sp)
    8020d37c:	eca6                	sd	s1,88(sp)
    8020d37e:	e8ca                	sd	s2,80(sp)
    8020d380:	e4ce                	sd	s3,72(sp)
    8020d382:	e0d2                	sd	s4,64(sp)
    8020d384:	fc56                	sd	s5,56(sp)
    8020d386:	f85a                	sd	s6,48(sp)
    8020d388:	f45e                	sd	s7,40(sp)
    8020d38a:	f062                	sd	s8,32(sp)
    8020d38c:	ec66                	sd	s9,24(sp)
    8020d38e:	e86a                	sd	s10,16(sp)
    8020d390:	e46e                	sd	s11,8(sp)
    8020d392:	1880                	addi	s0,sp,112
    8020d394:	8a2a                	mv	s4,a0
    8020d396:	84ae                	mv	s1,a1
    8020d398:	8932                	mv	s2,a2
    struct proc *p = np?np:myproc();
    8020d39a:	cd25                	beqz	a0,8020d412 <do_munmap+0x9c>
    map_fix* mf = do_munmap_fix(p,start,len);
    8020d39c:	864a                	mv	a2,s2
    8020d39e:	85a6                	mv	a1,s1
    8020d3a0:	8552                	mv	a0,s4
    8020d3a2:	00000097          	auipc	ra,0x0
    8020d3a6:	f6e080e7          	jalr	-146(ra) # 8020d310 <do_munmap_fix>
    8020d3aa:	8baa                	mv	s7,a0
    struct vma *vma = mf ? mf : addr_sz_locate_vma(p->vma, start, len);
    8020d3ac:	8caa                	mv	s9,a0
    8020d3ae:	c925                	beqz	a0,8020d41e <do_munmap+0xa8>

    if(vma == NULL || vma->type != MMAP)
    8020d3b0:	000ca703          	lw	a4,0(s9)
    8020d3b4:	4799                	li	a5,6
    8020d3b6:	06f71e63          	bne	a4,a5,8020d432 <do_munmap+0xbc>
    {
        __debug_warn("[do_munmap] munmap address/sz illegal\n");
        return -1;
    }

    if(vma->fd == -1||(vma->mmap & MAP_PRIVATE))
    8020d3ba:	02cca703          	lw	a4,44(s9)
    8020d3be:	57fd                	li	a5,-1
    8020d3c0:	12f70463          	beq	a4,a5,8020d4e8 <do_munmap+0x172>
    8020d3c4:	020cb783          	ld	a5,32(s9)
    8020d3c8:	0027f713          	andi	a4,a5,2
    8020d3cc:	10071e63          	bnez	a4,8020d4e8 <do_munmap+0x172>
    {
        goto ignore_wb;
    }

    struct file *f = (struct file *)MMAP_FILE(vma->mmap);
    8020d3d0:	ffc7f713          	andi	a4,a5,-4
    if(f == NULL)
    8020d3d4:	10070a63          	beqz	a4,8020d4e8 <do_munmap+0x172>
    struct file *f = (struct file *)MMAP_FILE(vma->mmap);
    8020d3d8:	8d3a                	mv	s10,a4
        goto ignore_wb;
    }

    uint64 pa, size, total_size = len;
    uint64 va = start;
    int page_n = (vma->end - vma->addr) >> PGSHIFT;
    8020d3da:	018cb783          	ld	a5,24(s9)
    8020d3de:	008cb683          	ld	a3,8(s9)
    8020d3e2:	8f95                	sub	a5,a5,a3
    8020d3e4:	83b1                	srli	a5,a5,0xc

    f->off = vma->f_off;
    8020d3e6:	030cb683          	ld	a3,48(s9)
    8020d3ea:	e734                	sd	a3,72(a4)

    for(int i = 0; i < page_n; ++i)
    8020d3ec:	0007871b          	sext.w	a4,a5
    8020d3f0:	0ee05c63          	blez	a4,8020d4e8 <do_munmap+0x172>
    8020d3f4:	fff78c1b          	addiw	s8,a5,-1
    8020d3f8:	1c02                	slli	s8,s8,0x20
    8020d3fa:	020c5c13          	srli	s8,s8,0x20
    8020d3fe:	0c32                	slli	s8,s8,0xc
    8020d400:	6785                	lui	a5,0x1
    8020d402:	97a6                	add	a5,a5,s1
    8020d404:	9c3e                	add	s8,s8,a5
    {
        size = total_size >= PGSIZE ? PGSIZE : total_size;
    8020d406:	6b05                	lui	s6,0x1
            __debug_warn("[do_munmap] page not valid\n");
            return -1;
        }
        if((*pte & PTE_U) == 0)
        {
            __debug_warn("[do_munmap] page is not user mode\n");
    8020d408:	00008d97          	auipc	s11,0x8
    8020d40c:	500d8d93          	addi	s11,s11,1280 # 80215908 <vma_type+0x180>
    8020d410:	a841                	j	8020d4a0 <do_munmap+0x12a>
    struct proc *p = np?np:myproc();
    8020d412:	fffff097          	auipc	ra,0xfffff
    8020d416:	fa0080e7          	jalr	-96(ra) # 8020c3b2 <myproc>
    8020d41a:	8a2a                	mv	s4,a0
    8020d41c:	b741                	j	8020d39c <do_munmap+0x26>
    struct vma *vma = mf ? mf : addr_sz_locate_vma(p->vma, start, len);
    8020d41e:	864a                	mv	a2,s2
    8020d420:	85a6                	mv	a1,s1
    8020d422:	170a3503          	ld	a0,368(s4)
    8020d426:	fffff097          	auipc	ra,0xfffff
    8020d42a:	700080e7          	jalr	1792(ra) # 8020cb26 <addr_sz_locate_vma>
    8020d42e:	8caa                	mv	s9,a0
    if(vma == NULL || vma->type != MMAP)
    8020d430:	f141                	bnez	a0,8020d3b0 <do_munmap+0x3a>
        __debug_warn("[do_munmap] munmap address/sz illegal\n");
    8020d432:	00008517          	auipc	a0,0x8
    8020d436:	48e50513          	addi	a0,a0,1166 # 802158c0 <vma_type+0x138>
    8020d43a:	ffffc097          	auipc	ra,0xffffc
    8020d43e:	236080e7          	jalr	566(ra) # 80209670 <__debug_warn>
        return -1;
    8020d442:	557d                	li	a0,-1
        kfree(mf);
    }

    return 0;

}
    8020d444:	70a6                	ld	ra,104(sp)
    8020d446:	7406                	ld	s0,96(sp)
    8020d448:	64e6                	ld	s1,88(sp)
    8020d44a:	6946                	ld	s2,80(sp)
    8020d44c:	69a6                	ld	s3,72(sp)
    8020d44e:	6a06                	ld	s4,64(sp)
    8020d450:	7ae2                	ld	s5,56(sp)
    8020d452:	7b42                	ld	s6,48(sp)
    8020d454:	7ba2                	ld	s7,40(sp)
    8020d456:	7c02                	ld	s8,32(sp)
    8020d458:	6ce2                	ld	s9,24(sp)
    8020d45a:	6d42                	ld	s10,16(sp)
    8020d45c:	6da2                	ld	s11,8(sp)
    8020d45e:	6165                	addi	sp,sp,112
    8020d460:	8082                	ret
            __debug_warn("[do_munmap] page not valid\n");
    8020d462:	00008517          	auipc	a0,0x8
    8020d466:	48650513          	addi	a0,a0,1158 # 802158e8 <vma_type+0x160>
    8020d46a:	ffffc097          	auipc	ra,0xffffc
    8020d46e:	206080e7          	jalr	518(ra) # 80209670 <__debug_warn>
            return -1;
    8020d472:	557d                	li	a0,-1
    8020d474:	bfc1                	j	8020d444 <do_munmap+0xce>
            __debug_warn("[do_munmap] page is not user mode\n");
    8020d476:	856e                	mv	a0,s11
    8020d478:	ffffc097          	auipc	ra,0xffffc
    8020d47c:	1f8080e7          	jalr	504(ra) # 80209670 <__debug_warn>
    8020d480:	a099                	j	8020d4c6 <do_munmap+0x150>
                __debug_warn("[do_munmap] page' pa is 0\n");
    8020d482:	00008517          	auipc	a0,0x8
    8020d486:	4ae50513          	addi	a0,a0,1198 # 80215930 <vma_type+0x1a8>
    8020d48a:	ffffc097          	auipc	ra,0xffffc
    8020d48e:	1e6080e7          	jalr	486(ra) # 80209670 <__debug_warn>
                return -1;
    8020d492:	557d                	li	a0,-1
    8020d494:	bf45                	j	8020d444 <do_munmap+0xce>
        va += PGSIZE;
    8020d496:	94da                	add	s1,s1,s6
        total_size -= size;
    8020d498:	41590933          	sub	s2,s2,s5
    for(int i = 0; i < page_n; ++i)
    8020d49c:	049c0663          	beq	s8,s1,8020d4e8 <do_munmap+0x172>
        size = total_size >= PGSIZE ? PGSIZE : total_size;
    8020d4a0:	8aca                	mv	s5,s2
    8020d4a2:	012b7363          	bgeu	s6,s2,8020d4a8 <do_munmap+0x132>
    8020d4a6:	8ada                	mv	s5,s6
        pte_t * pte = walk(p->pagetable, va, 0);
    8020d4a8:	4601                	li	a2,0
    8020d4aa:	85a6                	mv	a1,s1
    8020d4ac:	060a3503          	ld	a0,96(s4)
    8020d4b0:	ffffd097          	auipc	ra,0xffffd
    8020d4b4:	e76080e7          	jalr	-394(ra) # 8020a326 <walk>
    8020d4b8:	89aa                	mv	s3,a0
        if((*pte & PTE_V) == 0)
    8020d4ba:	611c                	ld	a5,0(a0)
    8020d4bc:	0017f713          	andi	a4,a5,1
    8020d4c0:	d34d                	beqz	a4,8020d462 <do_munmap+0xec>
        if((*pte & PTE_U) == 0)
    8020d4c2:	8bc1                	andi	a5,a5,16
    8020d4c4:	dbcd                	beqz	a5,8020d476 <do_munmap+0x100>
        if(*pte & PTE_D){       // write back when PTE_D bit is 1
    8020d4c6:	0009b783          	ld	a5,0(s3)
    8020d4ca:	0807f713          	andi	a4,a5,128
    8020d4ce:	d761                	beqz	a4,8020d496 <do_munmap+0x120>
            pa = PTE2PA(*pte);
    8020d4d0:	83a9                	srli	a5,a5,0xa
    8020d4d2:	07b2                	slli	a5,a5,0xc
            if(!pa){
    8020d4d4:	d7dd                	beqz	a5,8020d482 <do_munmap+0x10c>
            filewrite(f, va, size);
    8020d4d6:	000a861b          	sext.w	a2,s5
    8020d4da:	85a6                	mv	a1,s1
    8020d4dc:	856a                	mv	a0,s10
    8020d4de:	ffff9097          	auipc	ra,0xffff9
    8020d4e2:	45a080e7          	jalr	1114(ra) # 80206938 <filewrite>
    8020d4e6:	bf45                	j	8020d496 <do_munmap+0x120>
    if(!mf && free_vma(p, vma) == 0)
    8020d4e8:	000b8963          	beqz	s7,8020d4fa <do_munmap+0x184>
        kfree(mf);
    8020d4ec:	855e                	mv	a0,s7
    8020d4ee:	ffffd097          	auipc	ra,0xffffd
    8020d4f2:	d18080e7          	jalr	-744(ra) # 8020a206 <kfree>
    return 0;
    8020d4f6:	4501                	li	a0,0
    8020d4f8:	b7b1                	j	8020d444 <do_munmap+0xce>
    if(!mf && free_vma(p, vma) == 0)
    8020d4fa:	85e6                	mv	a1,s9
    8020d4fc:	8552                	mv	a0,s4
    8020d4fe:	fffff097          	auipc	ra,0xfffff
    8020d502:	674080e7          	jalr	1652(ra) # 8020cb72 <free_vma>
    8020d506:	87aa                	mv	a5,a0
    return 0;
    8020d508:	4501                	li	a0,0
    if(!mf && free_vma(p, vma) == 0)
    8020d50a:	ff8d                	bnez	a5,8020d444 <do_munmap+0xce>
        __debug_warn("[do_munmap] free vma failed\n");
    8020d50c:	00008517          	auipc	a0,0x8
    8020d510:	44450513          	addi	a0,a0,1092 # 80215950 <vma_type+0x1c8>
    8020d514:	ffffc097          	auipc	ra,0xffffc
    8020d518:	15c080e7          	jalr	348(ra) # 80209670 <__debug_warn>
        return -1;
    8020d51c:	557d                	li	a0,-1
    8020d51e:	b71d                	j	8020d444 <do_munmap+0xce>

000000008020d520 <free_map_fix>:

void
free_map_fix(struct proc* p){
    8020d520:	1101                	addi	sp,sp,-32
    8020d522:	ec06                	sd	ra,24(sp)
    8020d524:	e822                	sd	s0,16(sp)
    8020d526:	e426                	sd	s1,8(sp)
    8020d528:	e04a                	sd	s2,0(sp)
    8020d52a:	1000                	addi	s0,sp,32
    8020d52c:	892a                	mv	s2,a0
    map_fix* mf = p->mf;
    8020d52e:	18053483          	ld	s1,384(a0)
	map_fix* i = mf;
    map_fix* next;
    while(i){
    8020d532:	c899                	beqz	s1,8020d548 <free_map_fix+0x28>
        next = i->next;
    8020d534:	87a6                	mv	a5,s1
    8020d536:	60a4                	ld	s1,64(s1)
        do_munmap(p,i->addr,i->sz);
    8020d538:	6b90                	ld	a2,16(a5)
    8020d53a:	678c                	ld	a1,8(a5)
    8020d53c:	854a                	mv	a0,s2
    8020d53e:	00000097          	auipc	ra,0x0
    8020d542:	e38080e7          	jalr	-456(ra) # 8020d376 <do_munmap>
    while(i){
    8020d546:	f4fd                	bnez	s1,8020d534 <free_map_fix+0x14>
        i = next;
    }
}
    8020d548:	60e2                	ld	ra,24(sp)
    8020d54a:	6442                	ld	s0,16(sp)
    8020d54c:	64a2                	ld	s1,8(sp)
    8020d54e:	6902                	ld	s2,0(sp)
    8020d550:	6105                	addi	sp,sp,32
    8020d552:	8082                	ret

000000008020d554 <do_msync>:


int do_msync(uint64 addr, uint64 len, int flags)
{
    8020d554:	711d                	addi	sp,sp,-96
    8020d556:	ec86                	sd	ra,88(sp)
    8020d558:	e8a2                	sd	s0,80(sp)
    8020d55a:	e4a6                	sd	s1,72(sp)
    8020d55c:	e0ca                	sd	s2,64(sp)
    8020d55e:	fc4e                	sd	s3,56(sp)
    8020d560:	f852                	sd	s4,48(sp)
    8020d562:	f456                	sd	s5,40(sp)
    8020d564:	f05a                	sd	s6,32(sp)
    8020d566:	ec5e                	sd	s7,24(sp)
    8020d568:	e862                	sd	s8,16(sp)
    8020d56a:	e466                	sd	s9,8(sp)
    8020d56c:	1080                	addi	s0,sp,96
    8020d56e:	84aa                	mv	s1,a0
    8020d570:	892e                	mv	s2,a1
    struct proc *p = myproc();
    8020d572:	fffff097          	auipc	ra,0xfffff
    8020d576:	e40080e7          	jalr	-448(ra) # 8020c3b2 <myproc>
    8020d57a:	8b2a                	mv	s6,a0
    struct vma *s = part_locate_vma(p->vma, addr, addr + len);
    8020d57c:	01248633          	add	a2,s1,s2
    8020d580:	85a6                	mv	a1,s1
    8020d582:	17053503          	ld	a0,368(a0)
    8020d586:	fffff097          	auipc	ra,0xfffff
    8020d58a:	040080e7          	jalr	64(ra) # 8020c5c6 <part_locate_vma>
    
    if(s == NULL)
    8020d58e:	c97d                	beqz	a0,8020d684 <do_msync+0x130>
    8020d590:	87aa                	mv	a5,a0
    {
        return -EFAULT;
    }

    // private mapping and anonymous mapping can not be synchronized
    if(s->type != MMAP || MMAP_ANONY(s->mmap) || !MMAP_SHARE(s->mmap))
    8020d592:	4114                	lw	a3,0(a0)
    8020d594:	4719                	li	a4,6
    {
        return 0;
    8020d596:	4501                	li	a0,0
    if(s->type != MMAP || MMAP_ANONY(s->mmap) || !MMAP_SHARE(s->mmap))
    8020d598:	04e69e63          	bne	a3,a4,8020d5f4 <do_msync+0xa0>
    8020d59c:	0207bc03          	ld	s8,32(a5) # 1020 <_entry-0x801fefe0>
    8020d5a0:	003c7693          	andi	a3,s8,3
    8020d5a4:	4705                	li	a4,1
    8020d5a6:	04e69763          	bne	a3,a4,8020d5f4 <do_msync+0xa0>
	// 	return -1;
	// }

    // print_vma_info(p);

    struct file *f = MMAP_FILE(s->mmap);
    8020d5aa:	ffcc7c13          	andi	s8,s8,-4
    uint64 pa, size, total_size = len;
    uint64 va = addr;
    int page_n = (s->end - s->addr) >> PGSHIFT;
    8020d5ae:	6f98                	ld	a4,24(a5)
    8020d5b0:	6794                	ld	a3,8(a5)
    8020d5b2:	8f15                	sub	a4,a4,a3
    8020d5b4:	8331                	srli	a4,a4,0xc

    f->off = s->f_off;
    8020d5b6:	7b9c                	ld	a5,48(a5)
    8020d5b8:	04fc3423          	sd	a5,72(s8)


    for(int i = 0; i < page_n; ++i)
    8020d5bc:	0007079b          	sext.w	a5,a4
    8020d5c0:	0cf05463          	blez	a5,8020d688 <do_msync+0x134>
    8020d5c4:	fff70b9b          	addiw	s7,a4,-1
    8020d5c8:	1b82                	slli	s7,s7,0x20
    8020d5ca:	020bdb93          	srli	s7,s7,0x20
    8020d5ce:	0bb2                	slli	s7,s7,0xc
    8020d5d0:	6785                	lui	a5,0x1
    8020d5d2:	97a6                	add	a5,a5,s1
    8020d5d4:	9bbe                	add	s7,s7,a5
    {
        size = total_size >= PGSIZE ? PGSIZE : total_size;
    8020d5d6:	6a85                	lui	s5,0x1
            __debug_warn("[do_msync] page not valid\n");
            return -1;
        }
        if((*pte & PTE_U) == 0)
        {
            __debug_warn("[do_msync] page is not user mode\n");
    8020d5d8:	00008c97          	auipc	s9,0x8
    8020d5dc:	3b8c8c93          	addi	s9,s9,952 # 80215990 <vma_type+0x208>
    8020d5e0:	a8a1                	j	8020d638 <do_msync+0xe4>
            __debug_warn("[do_msync] page not valid\n");
    8020d5e2:	00008517          	auipc	a0,0x8
    8020d5e6:	38e50513          	addi	a0,a0,910 # 80215970 <vma_type+0x1e8>
    8020d5ea:	ffffc097          	auipc	ra,0xffffc
    8020d5ee:	086080e7          	jalr	134(ra) # 80209670 <__debug_warn>
            return -1;
    8020d5f2:	557d                	li	a0,-1
        va += PGSIZE;
        total_size -= size;
    }

    return 0;
}
    8020d5f4:	60e6                	ld	ra,88(sp)
    8020d5f6:	6446                	ld	s0,80(sp)
    8020d5f8:	64a6                	ld	s1,72(sp)
    8020d5fa:	6906                	ld	s2,64(sp)
    8020d5fc:	79e2                	ld	s3,56(sp)
    8020d5fe:	7a42                	ld	s4,48(sp)
    8020d600:	7aa2                	ld	s5,40(sp)
    8020d602:	7b02                	ld	s6,32(sp)
    8020d604:	6be2                	ld	s7,24(sp)
    8020d606:	6c42                	ld	s8,16(sp)
    8020d608:	6ca2                	ld	s9,8(sp)
    8020d60a:	6125                	addi	sp,sp,96
    8020d60c:	8082                	ret
            __debug_warn("[do_msync] page is not user mode\n");
    8020d60e:	8566                	mv	a0,s9
    8020d610:	ffffc097          	auipc	ra,0xffffc
    8020d614:	060080e7          	jalr	96(ra) # 80209670 <__debug_warn>
    8020d618:	a099                	j	8020d65e <do_msync+0x10a>
                __debug_warn("[do_msync] page' pa is 0\n");
    8020d61a:	00008517          	auipc	a0,0x8
    8020d61e:	39e50513          	addi	a0,a0,926 # 802159b8 <vma_type+0x230>
    8020d622:	ffffc097          	auipc	ra,0xffffc
    8020d626:	04e080e7          	jalr	78(ra) # 80209670 <__debug_warn>
                return -1;
    8020d62a:	557d                	li	a0,-1
    8020d62c:	b7e1                	j	8020d5f4 <do_msync+0xa0>
        va += PGSIZE;
    8020d62e:	94d6                	add	s1,s1,s5
        total_size -= size;
    8020d630:	41490933          	sub	s2,s2,s4
    for(int i = 0; i < page_n; ++i)
    8020d634:	05748663          	beq	s1,s7,8020d680 <do_msync+0x12c>
        size = total_size >= PGSIZE ? PGSIZE : total_size;
    8020d638:	8a4a                	mv	s4,s2
    8020d63a:	012af363          	bgeu	s5,s2,8020d640 <do_msync+0xec>
    8020d63e:	8a56                	mv	s4,s5
        pte_t * pte = walk(p->pagetable, va, 0);
    8020d640:	4601                	li	a2,0
    8020d642:	85a6                	mv	a1,s1
    8020d644:	060b3503          	ld	a0,96(s6) # 1060 <_entry-0x801fefa0>
    8020d648:	ffffd097          	auipc	ra,0xffffd
    8020d64c:	cde080e7          	jalr	-802(ra) # 8020a326 <walk>
    8020d650:	89aa                	mv	s3,a0
        if((*pte & PTE_V) == 0)
    8020d652:	611c                	ld	a5,0(a0)
    8020d654:	0017f713          	andi	a4,a5,1
    8020d658:	d749                	beqz	a4,8020d5e2 <do_msync+0x8e>
        if((*pte & PTE_U) == 0)
    8020d65a:	8bc1                	andi	a5,a5,16
    8020d65c:	dbcd                	beqz	a5,8020d60e <do_msync+0xba>
        if(*pte & PTE_D){       // write back when PTE_D bit is 1
    8020d65e:	0009b783          	ld	a5,0(s3)
    8020d662:	0807f713          	andi	a4,a5,128
    8020d666:	d761                	beqz	a4,8020d62e <do_msync+0xda>
            pa = PTE2PA(*pte);
    8020d668:	83a9                	srli	a5,a5,0xa
    8020d66a:	07b2                	slli	a5,a5,0xc
            if(!pa){
    8020d66c:	d7dd                	beqz	a5,8020d61a <do_msync+0xc6>
            filewrite(f, va, size);
    8020d66e:	000a061b          	sext.w	a2,s4
    8020d672:	85a6                	mv	a1,s1
    8020d674:	8562                	mv	a0,s8
    8020d676:	ffff9097          	auipc	ra,0xffff9
    8020d67a:	2c2080e7          	jalr	706(ra) # 80206938 <filewrite>
    8020d67e:	bf45                	j	8020d62e <do_msync+0xda>
    return 0;
    8020d680:	4501                	li	a0,0
    8020d682:	bf8d                	j	8020d5f4 <do_msync+0xa0>
        return -EFAULT;
    8020d684:	5549                	li	a0,-14
    8020d686:	b7bd                	j	8020d5f4 <do_msync+0xa0>
    return 0;
    8020d688:	4501                	li	a0,0
    8020d68a:	b7ad                	j	8020d5f4 <do_msync+0xa0>

000000008020d68c <argraw>:
  return strlen(buf);
}

static uint64
argraw(int n)
{
    8020d68c:	1101                	addi	sp,sp,-32
    8020d68e:	ec06                	sd	ra,24(sp)
    8020d690:	e822                	sd	s0,16(sp)
    8020d692:	e426                	sd	s1,8(sp)
    8020d694:	1000                	addi	s0,sp,32
    8020d696:	84aa                	mv	s1,a0
  struct proc *p = myproc();
    8020d698:	fffff097          	auipc	ra,0xfffff
    8020d69c:	d1a080e7          	jalr	-742(ra) # 8020c3b2 <myproc>
  switch (n) {
    8020d6a0:	4795                	li	a5,5
    8020d6a2:	0497e163          	bltu	a5,s1,8020d6e4 <argraw+0x58>
    8020d6a6:	048a                	slli	s1,s1,0x2
    8020d6a8:	00008717          	auipc	a4,0x8
    8020d6ac:	3e870713          	addi	a4,a4,1000 # 80215a90 <vma_type+0x308>
    8020d6b0:	94ba                	add	s1,s1,a4
    8020d6b2:	409c                	lw	a5,0(s1)
    8020d6b4:	97ba                	add	a5,a5,a4
    8020d6b6:	8782                	jr	a5
  case 0:
    return p->trapframe->a0;
    8020d6b8:	753c                	ld	a5,104(a0)
    8020d6ba:	7ba8                	ld	a0,112(a5)
  case 5:
    return p->trapframe->a5;
  }
  panic("argraw");
  return -1;
}
    8020d6bc:	60e2                	ld	ra,24(sp)
    8020d6be:	6442                	ld	s0,16(sp)
    8020d6c0:	64a2                	ld	s1,8(sp)
    8020d6c2:	6105                	addi	sp,sp,32
    8020d6c4:	8082                	ret
    return p->trapframe->a1;
    8020d6c6:	753c                	ld	a5,104(a0)
    8020d6c8:	7fa8                	ld	a0,120(a5)
    8020d6ca:	bfcd                	j	8020d6bc <argraw+0x30>
    return p->trapframe->a2;
    8020d6cc:	753c                	ld	a5,104(a0)
    8020d6ce:	63c8                	ld	a0,128(a5)
    8020d6d0:	b7f5                	j	8020d6bc <argraw+0x30>
    return p->trapframe->a3;
    8020d6d2:	753c                	ld	a5,104(a0)
    8020d6d4:	67c8                	ld	a0,136(a5)
    8020d6d6:	b7dd                	j	8020d6bc <argraw+0x30>
    return p->trapframe->a4;
    8020d6d8:	753c                	ld	a5,104(a0)
    8020d6da:	6bc8                	ld	a0,144(a5)
    8020d6dc:	b7c5                	j	8020d6bc <argraw+0x30>
    return p->trapframe->a5;
    8020d6de:	753c                	ld	a5,104(a0)
    8020d6e0:	6fc8                	ld	a0,152(a5)
    8020d6e2:	bfe9                	j	8020d6bc <argraw+0x30>
  panic("argraw");
    8020d6e4:	00008517          	auipc	a0,0x8
    8020d6e8:	2f450513          	addi	a0,a0,756 # 802159d8 <vma_type+0x250>
    8020d6ec:	ffffc097          	auipc	ra,0xffffc
    8020d6f0:	b5e080e7          	jalr	-1186(ra) # 8020924a <panic>

000000008020d6f4 <fetchaddr>:
{
    8020d6f4:	1141                	addi	sp,sp,-16
    8020d6f6:	e406                	sd	ra,8(sp)
    8020d6f8:	e022                	sd	s0,0(sp)
    8020d6fa:	0800                	addi	s0,sp,16
    8020d6fc:	862a                	mv	a2,a0
  if(either_copyin(1,(char*)ip, addr, sizeof(*ip)))
    8020d6fe:	46a1                	li	a3,8
    8020d700:	4505                	li	a0,1
    8020d702:	ffffe097          	auipc	ra,0xffffe
    8020d706:	38a080e7          	jalr	906(ra) # 8020ba8c <either_copyin>
    8020d70a:	00a03533          	snez	a0,a0
}
    8020d70e:	40a00533          	neg	a0,a0
    8020d712:	60a2                	ld	ra,8(sp)
    8020d714:	6402                	ld	s0,0(sp)
    8020d716:	0141                	addi	sp,sp,16
    8020d718:	8082                	ret

000000008020d71a <fetchstr>:
{
    8020d71a:	7179                	addi	sp,sp,-48
    8020d71c:	f406                	sd	ra,40(sp)
    8020d71e:	f022                	sd	s0,32(sp)
    8020d720:	ec26                	sd	s1,24(sp)
    8020d722:	e84a                	sd	s2,16(sp)
    8020d724:	e44e                	sd	s3,8(sp)
    8020d726:	1800                	addi	s0,sp,48
    8020d728:	892a                	mv	s2,a0
    8020d72a:	84ae                	mv	s1,a1
    8020d72c:	89b2                	mv	s3,a2
  struct proc *p = myproc();
    8020d72e:	fffff097          	auipc	ra,0xfffff
    8020d732:	c84080e7          	jalr	-892(ra) # 8020c3b2 <myproc>
  int err = copyinstr(p->pagetable, buf, addr, max);
    8020d736:	86ce                	mv	a3,s3
    8020d738:	864a                	mv	a2,s2
    8020d73a:	85a6                	mv	a1,s1
    8020d73c:	7128                	ld	a0,96(a0)
    8020d73e:	ffffe097          	auipc	ra,0xffffe
    8020d742:	13a080e7          	jalr	314(ra) # 8020b878 <copyinstr>
  if(err < 0)
    8020d746:	00054763          	bltz	a0,8020d754 <fetchstr+0x3a>
  return strlen(buf);
    8020d74a:	8526                	mv	a0,s1
    8020d74c:	ffff3097          	auipc	ra,0xffff3
    8020d750:	7b0080e7          	jalr	1968(ra) # 80200efc <strlen>
}
    8020d754:	70a2                	ld	ra,40(sp)
    8020d756:	7402                	ld	s0,32(sp)
    8020d758:	64e2                	ld	s1,24(sp)
    8020d75a:	6942                	ld	s2,16(sp)
    8020d75c:	69a2                	ld	s3,8(sp)
    8020d75e:	6145                	addi	sp,sp,48
    8020d760:	8082                	ret

000000008020d762 <argint>:

// Fetch the nth 32-bit system call argument.
int
argint(int n, int *ip)
{
    8020d762:	1101                	addi	sp,sp,-32
    8020d764:	ec06                	sd	ra,24(sp)
    8020d766:	e822                	sd	s0,16(sp)
    8020d768:	e426                	sd	s1,8(sp)
    8020d76a:	1000                	addi	s0,sp,32
    8020d76c:	84ae                	mv	s1,a1
  *ip = argraw(n);
    8020d76e:	00000097          	auipc	ra,0x0
    8020d772:	f1e080e7          	jalr	-226(ra) # 8020d68c <argraw>
    8020d776:	c088                	sw	a0,0(s1)
  return 0;
}
    8020d778:	4501                	li	a0,0
    8020d77a:	60e2                	ld	ra,24(sp)
    8020d77c:	6442                	ld	s0,16(sp)
    8020d77e:	64a2                	ld	s1,8(sp)
    8020d780:	6105                	addi	sp,sp,32
    8020d782:	8082                	ret

000000008020d784 <argaddr>:
// Retrieve an argument as a pointer.
// Doesn't check for legality, since
// copyin/copyout will do that.
int
argaddr(int n, uint64 *ip)
{
    8020d784:	1101                	addi	sp,sp,-32
    8020d786:	ec06                	sd	ra,24(sp)
    8020d788:	e822                	sd	s0,16(sp)
    8020d78a:	e426                	sd	s1,8(sp)
    8020d78c:	1000                	addi	s0,sp,32
    8020d78e:	84ae                	mv	s1,a1
  *ip = argraw(n);
    8020d790:	00000097          	auipc	ra,0x0
    8020d794:	efc080e7          	jalr	-260(ra) # 8020d68c <argraw>
    8020d798:	e088                	sd	a0,0(s1)
  return 0;
}
    8020d79a:	4501                	li	a0,0
    8020d79c:	60e2                	ld	ra,24(sp)
    8020d79e:	6442                	ld	s0,16(sp)
    8020d7a0:	64a2                	ld	s1,8(sp)
    8020d7a2:	6105                	addi	sp,sp,32
    8020d7a4:	8082                	ret

000000008020d7a6 <argstr>:
// Fetch the nth word-sized system call argument as a null-terminated string.
// Copies into buf, at most max.
// Returns string length if OK (including nul), -1 if error.
int
argstr(int n, char *buf, int max)
{
    8020d7a6:	1101                	addi	sp,sp,-32
    8020d7a8:	ec06                	sd	ra,24(sp)
    8020d7aa:	e822                	sd	s0,16(sp)
    8020d7ac:	e426                	sd	s1,8(sp)
    8020d7ae:	e04a                	sd	s2,0(sp)
    8020d7b0:	1000                	addi	s0,sp,32
    8020d7b2:	84ae                	mv	s1,a1
    8020d7b4:	8932                	mv	s2,a2
  *ip = argraw(n);
    8020d7b6:	00000097          	auipc	ra,0x0
    8020d7ba:	ed6080e7          	jalr	-298(ra) # 8020d68c <argraw>
  uint64 addr;
  if(argaddr(n, &addr) < 0)
    return -1;
  //printf("[argstr] str addr:%p\n");
  return fetchstr(addr, buf, max);
    8020d7be:	864a                	mv	a2,s2
    8020d7c0:	85a6                	mv	a1,s1
    8020d7c2:	00000097          	auipc	ra,0x0
    8020d7c6:	f58080e7          	jalr	-168(ra) # 8020d71a <fetchstr>
}
    8020d7ca:	60e2                	ld	ra,24(sp)
    8020d7cc:	6442                	ld	s0,16(sp)
    8020d7ce:	64a2                	ld	s1,8(sp)
    8020d7d0:	6902                	ld	s2,0(sp)
    8020d7d2:	6105                	addi	sp,sp,32
    8020d7d4:	8082                	ret

000000008020d7d6 <argfd>:

int
argfd(int n, int *pfd, struct file **pf)
{
    8020d7d6:	7179                	addi	sp,sp,-48
    8020d7d8:	f406                	sd	ra,40(sp)
    8020d7da:	f022                	sd	s0,32(sp)
    8020d7dc:	ec26                	sd	s1,24(sp)
    8020d7de:	e84a                	sd	s2,16(sp)
    8020d7e0:	e44e                	sd	s3,8(sp)
    8020d7e2:	e052                	sd	s4,0(sp)
    8020d7e4:	1800                	addi	s0,sp,48
    8020d7e6:	8a2a                	mv	s4,a0
    8020d7e8:	84b2                	mv	s1,a2
  int fd = -1;
  struct file *f = NULL;
  if(pfd)*pfd = -1;
    8020d7ea:	c1dd                	beqz	a1,8020d890 <argfd+0xba>
    8020d7ec:	892e                	mv	s2,a1
    8020d7ee:	57fd                	li	a5,-1
    8020d7f0:	c19c                	sw	a5,0(a1)
  if(pf)*pf = NULL;
    8020d7f2:	c62d                	beqz	a2,8020d85c <argfd+0x86>
    8020d7f4:	00063023          	sd	zero,0(a2) # 1000 <_entry-0x801ff000>
  struct proc* p = myproc();
    8020d7f8:	fffff097          	auipc	ra,0xfffff
    8020d7fc:	bba080e7          	jalr	-1094(ra) # 8020c3b2 <myproc>
    8020d800:	89aa                	mv	s3,a0
  *ip = argraw(n);
    8020d802:	8552                	mv	a0,s4
    8020d804:	00000097          	auipc	ra,0x0
    8020d808:	e88080e7          	jalr	-376(ra) # 8020d68c <argraw>
    8020d80c:	0005079b          	sext.w	a5,a0
  if(argint(n, &fd) < 0)
    return -1;
  if(pfd)
    *pfd = fd;
    8020d810:	00f92023          	sw	a5,0(s2)
  if(fd < 0 || fd >= NOFILEMAX(p) || (f=p->ofile[fd]) == NULL)
    8020d814:	0207ce63          	bltz	a5,8020d850 <argfd+0x7a>
    8020d818:	0e09b703          	ld	a4,224(s3)
    8020d81c:	0c800693          	li	a3,200
    8020d820:	00e6d463          	bge	a3,a4,8020d828 <argfd+0x52>
    8020d824:	0c800713          	li	a4,200
    8020d828:	02e7d663          	bge	a5,a4,8020d854 <argfd+0x7e>
    8020d82c:	0e89b703          	ld	a4,232(s3)
    8020d830:	00379513          	slli	a0,a5,0x3
    8020d834:	953a                	add	a0,a0,a4
    8020d836:	611c                	ld	a5,0(a0)
    8020d838:	c385                	beqz	a5,8020d858 <argfd+0x82>
    return -1;
  if(pf)
    *pf = f;
  return 0;
    8020d83a:	4501                	li	a0,0
  if(pf)
    8020d83c:	c091                	beqz	s1,8020d840 <argfd+0x6a>
    *pf = f;
    8020d83e:	e09c                	sd	a5,0(s1)
}
    8020d840:	70a2                	ld	ra,40(sp)
    8020d842:	7402                	ld	s0,32(sp)
    8020d844:	64e2                	ld	s1,24(sp)
    8020d846:	6942                	ld	s2,16(sp)
    8020d848:	69a2                	ld	s3,8(sp)
    8020d84a:	6a02                	ld	s4,0(sp)
    8020d84c:	6145                	addi	sp,sp,48
    8020d84e:	8082                	ret
    return -1;
    8020d850:	557d                	li	a0,-1
    8020d852:	b7fd                	j	8020d840 <argfd+0x6a>
    8020d854:	557d                	li	a0,-1
    8020d856:	b7ed                	j	8020d840 <argfd+0x6a>
    8020d858:	557d                	li	a0,-1
    8020d85a:	b7dd                	j	8020d840 <argfd+0x6a>
  struct proc* p = myproc();
    8020d85c:	fffff097          	auipc	ra,0xfffff
    8020d860:	b56080e7          	jalr	-1194(ra) # 8020c3b2 <myproc>
    8020d864:	89aa                	mv	s3,a0
  *ip = argraw(n);
    8020d866:	8552                	mv	a0,s4
    8020d868:	00000097          	auipc	ra,0x0
    8020d86c:	e24080e7          	jalr	-476(ra) # 8020d68c <argraw>
    8020d870:	0005079b          	sext.w	a5,a0
  if(pfd)
    8020d874:	bf71                	j	8020d810 <argfd+0x3a>
  struct proc* p = myproc();
    8020d876:	fffff097          	auipc	ra,0xfffff
    8020d87a:	b3c080e7          	jalr	-1220(ra) # 8020c3b2 <myproc>
    8020d87e:	89aa                	mv	s3,a0
  *ip = argraw(n);
    8020d880:	8552                	mv	a0,s4
    8020d882:	00000097          	auipc	ra,0x0
    8020d886:	e0a080e7          	jalr	-502(ra) # 8020d68c <argraw>
    8020d88a:	0005079b          	sext.w	a5,a0
  if(pfd)
    8020d88e:	b759                	j	8020d814 <argfd+0x3e>
  if(pf)*pf = NULL;
    8020d890:	d27d                	beqz	a2,8020d876 <argfd+0xa0>
    8020d892:	00063023          	sd	zero,0(a2)
  struct proc* p = myproc();
    8020d896:	fffff097          	auipc	ra,0xfffff
    8020d89a:	b1c080e7          	jalr	-1252(ra) # 8020c3b2 <myproc>
    8020d89e:	89aa                	mv	s3,a0
  *ip = argraw(n);
    8020d8a0:	8552                	mv	a0,s4
    8020d8a2:	00000097          	auipc	ra,0x0
    8020d8a6:	dea080e7          	jalr	-534(ra) # 8020d68c <argraw>
    8020d8aa:	0005079b          	sext.w	a5,a0
  if(pfd)
    8020d8ae:	b79d                	j	8020d814 <argfd+0x3e>

000000008020d8b0 <argsock>:

int
argsock(int n, int *pfd, struct file **pf, struct socket** psk)
{
    8020d8b0:	7139                	addi	sp,sp,-64
    8020d8b2:	fc06                	sd	ra,56(sp)
    8020d8b4:	f822                	sd	s0,48(sp)
    8020d8b6:	f426                	sd	s1,40(sp)
    8020d8b8:	f04a                	sd	s2,32(sp)
    8020d8ba:	0080                	addi	s0,sp,64
    8020d8bc:	84b2                	mv	s1,a2
    8020d8be:	8936                	mv	s2,a3
  struct file* f;
  struct socket* sk;
  int fd;
  pf = pf?pf:&f;
    8020d8c0:	ce0d                	beqz	a2,8020d8fa <argsock+0x4a>
  pfd = pfd?pfd:&fd;
    8020d8c2:	cd9d                	beqz	a1,8020d900 <argsock+0x50>
  psk = psk?psk:&sk;
    8020d8c4:	04090163          	beqz	s2,8020d906 <argsock+0x56>
  if(argfd(n,pfd,pf)<0||(*pf)->type!=FD_SOCKET){
    8020d8c8:	8626                	mv	a2,s1
    8020d8ca:	00000097          	auipc	ra,0x0
    8020d8ce:	f0c080e7          	jalr	-244(ra) # 8020d7d6 <argfd>
    8020d8d2:	02054d63          	bltz	a0,8020d90c <argsock+0x5c>
    8020d8d6:	609c                	ld	a5,0(s1)
    8020d8d8:	4394                	lw	a3,0(a5)
    8020d8da:	4715                	li	a4,5
    8020d8dc:	02e69a63          	bne	a3,a4,8020d910 <argsock+0x60>
    return -1;
  }
  *psk = (*pf)->sk;
    8020d8e0:	6b88                	ld	a0,16(a5)
    8020d8e2:	00a93023          	sd	a0,0(s2)
  if(!*psk)return -1;
    8020d8e6:	00153513          	seqz	a0,a0
    8020d8ea:	40a00533          	neg	a0,a0
  return 0;
}
    8020d8ee:	70e2                	ld	ra,56(sp)
    8020d8f0:	7442                	ld	s0,48(sp)
    8020d8f2:	74a2                	ld	s1,40(sp)
    8020d8f4:	7902                	ld	s2,32(sp)
    8020d8f6:	6121                	addi	sp,sp,64
    8020d8f8:	8082                	ret
  pf = pf?pf:&f;
    8020d8fa:	fd840493          	addi	s1,s0,-40
    8020d8fe:	b7d1                	j	8020d8c2 <argsock+0x12>
  pfd = pfd?pfd:&fd;
    8020d900:	fcc40593          	addi	a1,s0,-52
    8020d904:	b7c1                	j	8020d8c4 <argsock+0x14>
  psk = psk?psk:&sk;
    8020d906:	fd040913          	addi	s2,s0,-48
    8020d90a:	bf7d                	j	8020d8c8 <argsock+0x18>
    return -1;
    8020d90c:	557d                	li	a0,-1
    8020d90e:	b7c5                	j	8020d8ee <argsock+0x3e>
    8020d910:	557d                	li	a0,-1
    8020d912:	bff1                	j	8020d8ee <argsock+0x3e>

000000008020d914 <argepoll>:

int
argepoll(int n, int *pfd, struct file **pf, struct epoll** pepoll)
{
    8020d914:	7139                	addi	sp,sp,-64
    8020d916:	fc06                	sd	ra,56(sp)
    8020d918:	f822                	sd	s0,48(sp)
    8020d91a:	f426                	sd	s1,40(sp)
    8020d91c:	f04a                	sd	s2,32(sp)
    8020d91e:	0080                	addi	s0,sp,64
    8020d920:	84b2                	mv	s1,a2
    8020d922:	8936                	mv	s2,a3
  struct file* f;
  struct epoll* epoll;
  int fd;
  pf = pf?pf:&f;
    8020d924:	ce0d                	beqz	a2,8020d95e <argepoll+0x4a>
  pfd = pfd?pfd:&fd;
    8020d926:	cd9d                	beqz	a1,8020d964 <argepoll+0x50>
  pepoll = pepoll?pepoll:&epoll;
    8020d928:	04090163          	beqz	s2,8020d96a <argepoll+0x56>
  if(argfd(n,pfd,pf)<0||(*pf)->type!=FD_EPOLL){
    8020d92c:	8626                	mv	a2,s1
    8020d92e:	00000097          	auipc	ra,0x0
    8020d932:	ea8080e7          	jalr	-344(ra) # 8020d7d6 <argfd>
    8020d936:	02054d63          	bltz	a0,8020d970 <argepoll+0x5c>
    8020d93a:	609c                	ld	a5,0(s1)
    8020d93c:	4394                	lw	a3,0(a5)
    8020d93e:	4711                	li	a4,4
    8020d940:	02e69a63          	bne	a3,a4,8020d974 <argepoll+0x60>
    return -1;
  }
  *pepoll = (*pf)->epoll;
    8020d944:	6f88                	ld	a0,24(a5)
    8020d946:	00a93023          	sd	a0,0(s2)
  if(!*pepoll)return -1;
    8020d94a:	00153513          	seqz	a0,a0
    8020d94e:	40a00533          	neg	a0,a0
  return 0;
}
    8020d952:	70e2                	ld	ra,56(sp)
    8020d954:	7442                	ld	s0,48(sp)
    8020d956:	74a2                	ld	s1,40(sp)
    8020d958:	7902                	ld	s2,32(sp)
    8020d95a:	6121                	addi	sp,sp,64
    8020d95c:	8082                	ret
  pf = pf?pf:&f;
    8020d95e:	fd840493          	addi	s1,s0,-40
    8020d962:	b7d1                	j	8020d926 <argepoll+0x12>
  pfd = pfd?pfd:&fd;
    8020d964:	fcc40593          	addi	a1,s0,-52
    8020d968:	b7c1                	j	8020d928 <argepoll+0x14>
  pepoll = pepoll?pepoll:&epoll;
    8020d96a:	fd040913          	addi	s2,s0,-48
    8020d96e:	bf7d                	j	8020d92c <argepoll+0x18>
    return -1;
    8020d970:	557d                	li	a0,-1
    8020d972:	b7c5                	j	8020d952 <argepoll+0x3e>
    8020d974:	557d                	li	a0,-1
    8020d976:	bff1                	j	8020d952 <argepoll+0x3e>

000000008020d978 <argstruct>:

int
argstruct(int n,void* st,int len){
    8020d978:	7179                	addi	sp,sp,-48
    8020d97a:	f406                	sd	ra,40(sp)
    8020d97c:	f022                	sd	s0,32(sp)
    8020d97e:	ec26                	sd	s1,24(sp)
    8020d980:	e84a                	sd	s2,16(sp)
    8020d982:	e44e                	sd	s3,8(sp)
    8020d984:	1800                	addi	s0,sp,48
    8020d986:	892e                	mv	s2,a1
    8020d988:	89b2                	mv	s3,a2
  *ip = argraw(n);
    8020d98a:	00000097          	auipc	ra,0x0
    8020d98e:	d02080e7          	jalr	-766(ra) # 8020d68c <argraw>
    8020d992:	84aa                	mv	s1,a0
  uint64 addr;
  if(argaddr(n,&addr)<0)return -1;
  if(addr&&copyin(myproc()->pagetable,st,addr,len)<0){
    8020d994:	e911                	bnez	a0,8020d9a8 <argstruct+0x30>
    return 0;
  }
  return addr;
    8020d996:	0004851b          	sext.w	a0,s1
}
    8020d99a:	70a2                	ld	ra,40(sp)
    8020d99c:	7402                	ld	s0,32(sp)
    8020d99e:	64e2                	ld	s1,24(sp)
    8020d9a0:	6942                	ld	s2,16(sp)
    8020d9a2:	69a2                	ld	s3,8(sp)
    8020d9a4:	6145                	addi	sp,sp,48
    8020d9a6:	8082                	ret
  if(addr&&copyin(myproc()->pagetable,st,addr,len)<0){
    8020d9a8:	fffff097          	auipc	ra,0xfffff
    8020d9ac:	a0a080e7          	jalr	-1526(ra) # 8020c3b2 <myproc>
    8020d9b0:	86ce                	mv	a3,s3
    8020d9b2:	8626                	mv	a2,s1
    8020d9b4:	85ca                	mv	a1,s2
    8020d9b6:	7128                	ld	a0,96(a0)
    8020d9b8:	ffffe097          	auipc	ra,0xffffe
    8020d9bc:	de2080e7          	jalr	-542(ra) # 8020b79a <copyin>
    8020d9c0:	87aa                	mv	a5,a0
    return 0;
    8020d9c2:	4501                	li	a0,0
  if(addr&&copyin(myproc()->pagetable,st,addr,len)<0){
    8020d9c4:	fc07d9e3          	bgez	a5,8020d996 <argstruct+0x1e>
    8020d9c8:	bfc9                	j	8020d99a <argstruct+0x22>

000000008020d9ca <freevec>:

int
freevec(char** argv,int len){
  for(int i = 0; i < len && argv[i] != 0; i++){
    8020d9ca:	04b05163          	blez	a1,8020da0c <freevec+0x42>
freevec(char** argv,int len){
    8020d9ce:	1101                	addi	sp,sp,-32
    8020d9d0:	ec06                	sd	ra,24(sp)
    8020d9d2:	e822                	sd	s0,16(sp)
    8020d9d4:	e426                	sd	s1,8(sp)
    8020d9d6:	e04a                	sd	s2,0(sp)
    8020d9d8:	1000                	addi	s0,sp,32
    8020d9da:	84aa                	mv	s1,a0
    8020d9dc:	fff5891b          	addiw	s2,a1,-1
    8020d9e0:	1902                	slli	s2,s2,0x20
    8020d9e2:	02095913          	srli	s2,s2,0x20
    8020d9e6:	090e                	slli	s2,s2,0x3
    8020d9e8:	0521                	addi	a0,a0,8
    8020d9ea:	992a                	add	s2,s2,a0
  for(int i = 0; i < len && argv[i] != 0; i++){
    8020d9ec:	6088                	ld	a0,0(s1)
    8020d9ee:	c901                	beqz	a0,8020d9fe <freevec+0x34>
    //printf("[freevec] argv[%d]=%p\n",i,argv[i]);
    kfree(argv[i]);
    8020d9f0:	ffffd097          	auipc	ra,0xffffd
    8020d9f4:	816080e7          	jalr	-2026(ra) # 8020a206 <kfree>
  for(int i = 0; i < len && argv[i] != 0; i++){
    8020d9f8:	04a1                	addi	s1,s1,8
    8020d9fa:	ff2499e3          	bne	s1,s2,8020d9ec <freevec+0x22>
  }
  return 0;
}
    8020d9fe:	4501                	li	a0,0
    8020da00:	60e2                	ld	ra,24(sp)
    8020da02:	6442                	ld	s0,16(sp)
    8020da04:	64a2                	ld	s1,8(sp)
    8020da06:	6902                	ld	s2,0(sp)
    8020da08:	6105                	addi	sp,sp,32
    8020da0a:	8082                	ret
    8020da0c:	4501                	li	a0,0
    8020da0e:	8082                	ret

000000008020da10 <argstrvec>:

int
argstrvec(int n,char** argv,int max){
    8020da10:	715d                	addi	sp,sp,-80
    8020da12:	e486                	sd	ra,72(sp)
    8020da14:	e0a2                	sd	s0,64(sp)
    8020da16:	fc26                	sd	s1,56(sp)
    8020da18:	f84a                	sd	s2,48(sp)
    8020da1a:	f44e                	sd	s3,40(sp)
    8020da1c:	f052                	sd	s4,32(sp)
    8020da1e:	ec56                	sd	s5,24(sp)
    8020da20:	0880                	addi	s0,sp,80
    8020da22:	892a                	mv	s2,a0
    8020da24:	89ae                	mv	s3,a1
    8020da26:	8a32                	mv	s4,a2
  int i = 0;
  uint64 uarg,uargv;
  memset(argv, 0, max*sizeof(uint64));
    8020da28:	0036161b          	slliw	a2,a2,0x3
    8020da2c:	4581                	li	a1,0
    8020da2e:	854e                	mv	a0,s3
    8020da30:	ffff3097          	auipc	ra,0xffff3
    8020da34:	344080e7          	jalr	836(ra) # 80200d74 <memset>
  *ip = argraw(n);
    8020da38:	854a                	mv	a0,s2
    8020da3a:	00000097          	auipc	ra,0x0
    8020da3e:	c52080e7          	jalr	-942(ra) # 8020d68c <argraw>
  if(argaddr(n, &uargv) < 0||uargv == 0){
    8020da42:	c16d                	beqz	a0,8020db24 <argstrvec+0x114>
    8020da44:	8aaa                	mv	s5,a0
    //__debug_warn("[argstrvec] uargv null\n");
    goto bad;
  }
  for(;;i++){
    if(i >= max){
    8020da46:	4481                	li	s1,0
  int i = 0;
    8020da48:	4901                	li	s2,0
    if(i >= max){
    8020da4a:	05405863          	blez	s4,8020da9a <argstrvec+0x8a>
      __debug_warn("[argstrvec] max is too small\n");
      goto bad;
    }
    if(fetchaddr(uargv+sizeof(uint64)*i, (uint64*)&uarg) < 0){
    8020da4e:	fb840593          	addi	a1,s0,-72
    8020da52:	01548533          	add	a0,s1,s5
    8020da56:	00000097          	auipc	ra,0x0
    8020da5a:	c9e080e7          	jalr	-866(ra) # 8020d6f4 <fetchaddr>
    8020da5e:	06054863          	bltz	a0,8020dace <argstrvec+0xbe>
      __debug_warn("[argstrvec] uargv:%p\n",uargv);
      __debug_warn("[argstrvec] fetch argv[%d] address bad\n",i);
      goto bad;
    }
    if(uarg == 0){
    8020da62:	fb843783          	ld	a5,-72(s0)
    8020da66:	c7d9                	beqz	a5,8020daf4 <argstrvec+0xe4>
      argv[i] = 0;
      break;
    }
    argv[i] = kmalloc(0x100);
    8020da68:	10000513          	li	a0,256
    8020da6c:	ffffc097          	auipc	ra,0xffffc
    8020da70:	550080e7          	jalr	1360(ra) # 80209fbc <kmalloc>
    8020da74:	85aa                	mv	a1,a0
    8020da76:	009987b3          	add	a5,s3,s1
    8020da7a:	e388                	sd	a0,0(a5)
    if(argv[i] == 0){
    8020da7c:	c141                	beqz	a0,8020dafc <argstrvec+0xec>
      __debug_warn("[argstrvec] no more space for argv[%d]\n",i);
      goto bad;
    }
    if(fetchstr(uarg, argv[i], 0x100) < 0){
    8020da7e:	10000613          	li	a2,256
    8020da82:	fb843503          	ld	a0,-72(s0)
    8020da86:	00000097          	auipc	ra,0x0
    8020da8a:	c94080e7          	jalr	-876(ra) # 8020d71a <fetchstr>
    8020da8e:	08054163          	bltz	a0,8020db10 <argstrvec+0x100>
  for(;;i++){
    8020da92:	2905                	addiw	s2,s2,1
    if(i >= max){
    8020da94:	04a1                	addi	s1,s1,8
    8020da96:	fb2a1ce3          	bne	s4,s2,8020da4e <argstrvec+0x3e>
      __debug_warn("[argstrvec] max is too small\n");
    8020da9a:	00008517          	auipc	a0,0x8
    8020da9e:	f4650513          	addi	a0,a0,-186 # 802159e0 <vma_type+0x258>
    8020daa2:	ffffc097          	auipc	ra,0xffffc
    8020daa6:	bce080e7          	jalr	-1074(ra) # 80209670 <__debug_warn>
      goto bad;
    }
  }
  return i;
bad:
  freevec(argv,i+1);
    8020daaa:	0019059b          	addiw	a1,s2,1
    8020daae:	854e                	mv	a0,s3
    8020dab0:	00000097          	auipc	ra,0x0
    8020dab4:	f1a080e7          	jalr	-230(ra) # 8020d9ca <freevec>
  return -1;
    8020dab8:	597d                	li	s2,-1
}
    8020daba:	854a                	mv	a0,s2
    8020dabc:	60a6                	ld	ra,72(sp)
    8020dabe:	6406                	ld	s0,64(sp)
    8020dac0:	74e2                	ld	s1,56(sp)
    8020dac2:	7942                	ld	s2,48(sp)
    8020dac4:	79a2                	ld	s3,40(sp)
    8020dac6:	7a02                	ld	s4,32(sp)
    8020dac8:	6ae2                	ld	s5,24(sp)
    8020daca:	6161                	addi	sp,sp,80
    8020dacc:	8082                	ret
      __debug_warn("[argstrvec] uargv:%p\n",uargv);
    8020dace:	85d6                	mv	a1,s5
    8020dad0:	00008517          	auipc	a0,0x8
    8020dad4:	f3050513          	addi	a0,a0,-208 # 80215a00 <vma_type+0x278>
    8020dad8:	ffffc097          	auipc	ra,0xffffc
    8020dadc:	b98080e7          	jalr	-1128(ra) # 80209670 <__debug_warn>
      __debug_warn("[argstrvec] fetch argv[%d] address bad\n",i);
    8020dae0:	85ca                	mv	a1,s2
    8020dae2:	00008517          	auipc	a0,0x8
    8020dae6:	f3650513          	addi	a0,a0,-202 # 80215a18 <vma_type+0x290>
    8020daea:	ffffc097          	auipc	ra,0xffffc
    8020daee:	b86080e7          	jalr	-1146(ra) # 80209670 <__debug_warn>
      goto bad;
    8020daf2:	bf65                	j	8020daaa <argstrvec+0x9a>
      argv[i] = 0;
    8020daf4:	94ce                	add	s1,s1,s3
    8020daf6:	0004b023          	sd	zero,0(s1)
  return i;
    8020dafa:	b7c1                	j	8020daba <argstrvec+0xaa>
      __debug_warn("[argstrvec] no more space for argv[%d]\n",i);
    8020dafc:	85ca                	mv	a1,s2
    8020dafe:	00008517          	auipc	a0,0x8
    8020db02:	f4250513          	addi	a0,a0,-190 # 80215a40 <vma_type+0x2b8>
    8020db06:	ffffc097          	auipc	ra,0xffffc
    8020db0a:	b6a080e7          	jalr	-1174(ra) # 80209670 <__debug_warn>
      goto bad;
    8020db0e:	bf71                	j	8020daaa <argstrvec+0x9a>
      __debug_warn("[argstrvec] fetch argv[%d] string bad\n",i);
    8020db10:	85ca                	mv	a1,s2
    8020db12:	00008517          	auipc	a0,0x8
    8020db16:	f5650513          	addi	a0,a0,-170 # 80215a68 <vma_type+0x2e0>
    8020db1a:	ffffc097          	auipc	ra,0xffffc
    8020db1e:	b56080e7          	jalr	-1194(ra) # 80209670 <__debug_warn>
      goto bad;
    8020db22:	b761                	j	8020daaa <argstrvec+0x9a>
  int i = 0;
    8020db24:	4901                	li	s2,0
    8020db26:	b751                	j	8020daaa <argstrvec+0x9a>

000000008020db28 <swap>:
    }
  }
  return elf->entry;
}

void swap(void* a,void* b,int len){
    8020db28:	1141                	addi	sp,sp,-16
    8020db2a:	e422                	sd	s0,8(sp)
    8020db2c:	0800                	addi	s0,sp,16
  char c;
  char *sa = a,*sb = b;
  for(int i = 0;i<len;i++){
    8020db2e:	02c05463          	blez	a2,8020db56 <swap+0x2e>
    8020db32:	87aa                	mv	a5,a0
    8020db34:	367d                	addiw	a2,a2,-1
    8020db36:	1602                	slli	a2,a2,0x20
    8020db38:	9201                	srli	a2,a2,0x20
    8020db3a:	0605                	addi	a2,a2,1
    8020db3c:	9532                	add	a0,a0,a2
    c = sa[i];
    8020db3e:	0007c703          	lbu	a4,0(a5) # 1000 <_entry-0x801ff000>
    sa[i] = sb[i];
    8020db42:	0005c683          	lbu	a3,0(a1)
    8020db46:	00d78023          	sb	a3,0(a5)
    sb[i] = c;
    8020db4a:	00e58023          	sb	a4,0(a1)
  for(int i = 0;i<len;i++){
    8020db4e:	0785                	addi	a5,a5,1
    8020db50:	0585                	addi	a1,a1,1
    8020db52:	fea796e3          	bne	a5,a0,8020db3e <swap+0x16>
  }
}
    8020db56:	6422                	ld	s0,8(sp)
    8020db58:	0141                	addi	sp,sp,16
    8020db5a:	8082                	ret

000000008020db5c <auxalloc>:

void
auxalloc(uint64* aux,uint64 atid,uint64 value)
{
    8020db5c:	1141                	addi	sp,sp,-16
    8020db5e:	e422                	sd	s0,8(sp)
    8020db60:	0800                	addi	s0,sp,16
  //printf("aux[%d] = %p\n",atid,value);
  uint64 argc = aux[0];
  aux[argc*2+1] = atid;
    8020db62:	611c                	ld	a5,0(a0)
    8020db64:	0792                	slli	a5,a5,0x4
    8020db66:	97aa                	add	a5,a5,a0
    8020db68:	e78c                	sd	a1,8(a5)
  aux[argc*2+2] = value;
    8020db6a:	eb90                	sd	a2,16(a5)
  aux[argc*2+3] = 0;
    8020db6c:	0007bc23          	sd	zero,24(a5)
  aux[argc*2+4] = 0;
    8020db70:	0207b023          	sd	zero,32(a5)
  aux[0]++;
    8020db74:	611c                	ld	a5,0(a0)
    8020db76:	0785                	addi	a5,a5,1
    8020db78:	e11c                	sd	a5,0(a0)
}
    8020db7a:	6422                	ld	s0,8(sp)
    8020db7c:	0141                	addi	sp,sp,16
    8020db7e:	8082                	ret

000000008020db80 <loadaux>:

uint64
loadaux(pagetable_t pagetable,uint64 sp,uint64 stackbase,uint64* aux){
    8020db80:	1101                	addi	sp,sp,-32
    8020db82:	ec06                	sd	ra,24(sp)
    8020db84:	e822                	sd	s0,16(sp)
    8020db86:	e426                	sd	s1,8(sp)
    8020db88:	1000                	addi	s0,sp,32
  int argc = aux[0];
    8020db8a:	429c                	lw	a5,0(a3)
  if(!argc)return sp;
    8020db8c:	84ae                	mv	s1,a1
    8020db8e:	c795                	beqz	a5,8020dbba <loadaux+0x3a>
    8020db90:	8736                	mv	a4,a3
  printf("aux argc:%d\n",argc);
  for(int i=1;i<=2*argc+2;i++){
    printf("final raw aux[%d] = %p\n",i,aux[i]);
  }
  */
  sp -= (2*argc+2) * sizeof(uint64);
    8020db92:	2785                	addiw	a5,a5,1
    8020db94:	0017979b          	slliw	a5,a5,0x1
    8020db98:	00379693          	slli	a3,a5,0x3
    8020db9c:	40d584b3          	sub	s1,a1,a3
  if(sp < stackbase){
    8020dba0:	02c4e563          	bltu	s1,a2,8020dbca <loadaux+0x4a>
    return -1;
  }
  aux[0] = 0;
    8020dba4:	00073023          	sd	zero,0(a4)
  if(copyout(pagetable, sp, (char *)(aux+1), (2*argc+2)*sizeof(uint64)) < 0){
    8020dba8:	00870613          	addi	a2,a4,8
    8020dbac:	85a6                	mv	a1,s1
    8020dbae:	ffffe097          	auipc	ra,0xffffe
    8020dbb2:	b0e080e7          	jalr	-1266(ra) # 8020b6bc <copyout>
    8020dbb6:	00054863          	bltz	a0,8020dbc6 <loadaux+0x46>
    return -1;
  }
  return sp;
}
    8020dbba:	8526                	mv	a0,s1
    8020dbbc:	60e2                	ld	ra,24(sp)
    8020dbbe:	6442                	ld	s0,16(sp)
    8020dbc0:	64a2                	ld	s1,8(sp)
    8020dbc2:	6105                	addi	sp,sp,32
    8020dbc4:	8082                	ret
    return -1;
    8020dbc6:	54fd                	li	s1,-1
    8020dbc8:	bfcd                	j	8020dbba <loadaux+0x3a>
    return -1;
    8020dbca:	54fd                	li	s1,-1
    8020dbcc:	b7fd                	j	8020dbba <loadaux+0x3a>

000000008020dbce <ustackpushstr>:

uint64 
ustackpushstr(pagetable_t pagetable,uint64* ustack,char* str,uint64 sp,uint64 stackbase)
{
    8020dbce:	7139                	addi	sp,sp,-64
    8020dbd0:	fc06                	sd	ra,56(sp)
    8020dbd2:	f822                	sd	s0,48(sp)
    8020dbd4:	f426                	sd	s1,40(sp)
    8020dbd6:	f04a                	sd	s2,32(sp)
    8020dbd8:	ec4e                	sd	s3,24(sp)
    8020dbda:	e852                	sd	s4,16(sp)
    8020dbdc:	e456                	sd	s5,8(sp)
    8020dbde:	e05a                	sd	s6,0(sp)
    8020dbe0:	0080                	addi	s0,sp,64
  uint64 argc = ++ustack[0];
    8020dbe2:	0005b983          	ld	s3,0(a1)
    8020dbe6:	0985                	addi	s3,s3,1
    8020dbe8:	0135b023          	sd	s3,0(a1)
  if(argc>MAXARG+1)return -1;
    8020dbec:	02100793          	li	a5,33
    8020dbf0:	54fd                	li	s1,-1
    8020dbf2:	0537e863          	bltu	a5,s3,8020dc42 <ustackpushstr+0x74>
    8020dbf6:	8b2a                	mv	s6,a0
    8020dbf8:	892e                	mv	s2,a1
    8020dbfa:	8a32                	mv	s4,a2
    8020dbfc:	84b6                	mv	s1,a3
    8020dbfe:	8aba                	mv	s5,a4
  //printf("[exec]push %s\n",str);
  sp -= strlen(str) + 1;
    8020dc00:	8532                	mv	a0,a2
    8020dc02:	ffff3097          	auipc	ra,0xffff3
    8020dc06:	2fa080e7          	jalr	762(ra) # 80200efc <strlen>
    8020dc0a:	0015069b          	addiw	a3,a0,1
    8020dc0e:	8c95                	sub	s1,s1,a3
  sp -= sp % 16; // riscv sp must be 16-byte aligned
    8020dc10:	98c1                	andi	s1,s1,-16
  if(sp < stackbase)
    8020dc12:	0554e363          	bltu	s1,s5,8020dc58 <ustackpushstr+0x8a>
      return -1;
  if(copyout(pagetable, sp, str, strlen(str) + 1) < 0)
    8020dc16:	8552                	mv	a0,s4
    8020dc18:	ffff3097          	auipc	ra,0xffff3
    8020dc1c:	2e4080e7          	jalr	740(ra) # 80200efc <strlen>
    8020dc20:	0015069b          	addiw	a3,a0,1
    8020dc24:	8652                	mv	a2,s4
    8020dc26:	85a6                	mv	a1,s1
    8020dc28:	855a                	mv	a0,s6
    8020dc2a:	ffffe097          	auipc	ra,0xffffe
    8020dc2e:	a92080e7          	jalr	-1390(ra) # 8020b6bc <copyout>
    8020dc32:	02054563          	bltz	a0,8020dc5c <ustackpushstr+0x8e>
      return -1;
  ustack[argc] = sp;
    8020dc36:	098e                	slli	s3,s3,0x3
    8020dc38:	994e                	add	s2,s2,s3
    8020dc3a:	00993023          	sd	s1,0(s2)
  ustack[argc+1] = 0;
    8020dc3e:	00093423          	sd	zero,8(s2)
  return sp;
}
    8020dc42:	8526                	mv	a0,s1
    8020dc44:	70e2                	ld	ra,56(sp)
    8020dc46:	7442                	ld	s0,48(sp)
    8020dc48:	74a2                	ld	s1,40(sp)
    8020dc4a:	7902                	ld	s2,32(sp)
    8020dc4c:	69e2                	ld	s3,24(sp)
    8020dc4e:	6a42                	ld	s4,16(sp)
    8020dc50:	6aa2                	ld	s5,8(sp)
    8020dc52:	6b02                	ld	s6,0(sp)
    8020dc54:	6121                	addi	sp,sp,64
    8020dc56:	8082                	ret
      return -1;
    8020dc58:	54fd                	li	s1,-1
    8020dc5a:	b7e5                	j	8020dc42 <ustackpushstr+0x74>
      return -1;
    8020dc5c:	54fd                	li	s1,-1
    8020dc5e:	b7d5                	j	8020dc42 <ustackpushstr+0x74>

000000008020dc60 <stackdisplay>:

void
stackdisplay(pagetable_t pagetable,uint64 sp,uint64 sz)
{
  for(uint64 i = sp;i<sz;i+=8){
    8020dc60:	06c5f863          	bgeu	a1,a2,8020dcd0 <stackdisplay+0x70>
{
    8020dc64:	7139                	addi	sp,sp,-64
    8020dc66:	fc06                	sd	ra,56(sp)
    8020dc68:	f822                	sd	s0,48(sp)
    8020dc6a:	f426                	sd	s1,40(sp)
    8020dc6c:	f04a                	sd	s2,32(sp)
    8020dc6e:	ec4e                	sd	s3,24(sp)
    8020dc70:	e852                	sd	s4,16(sp)
    8020dc72:	e456                	sd	s5,8(sp)
    8020dc74:	0080                	addi	s0,sp,64
    8020dc76:	89aa                	mv	s3,a0
    8020dc78:	84ae                	mv	s1,a1
    8020dc7a:	8932                	mv	s2,a2
    uint64 *pa = (void*)kwalkaddr1(pagetable,i);
    if(pa)printf("addr %p value %p\n",i,*pa);
    else printf("addr %p value (nil)\n",i);
    8020dc7c:	00008a97          	auipc	s5,0x8
    8020dc80:	e44a8a93          	addi	s5,s5,-444 # 80215ac0 <vma_type+0x338>
    if(pa)printf("addr %p value %p\n",i,*pa);
    8020dc84:	00008a17          	auipc	s4,0x8
    8020dc88:	e24a0a13          	addi	s4,s4,-476 # 80215aa8 <vma_type+0x320>
    8020dc8c:	a811                	j	8020dca0 <stackdisplay+0x40>
    else printf("addr %p value (nil)\n",i);
    8020dc8e:	85a6                	mv	a1,s1
    8020dc90:	8556                	mv	a0,s5
    8020dc92:	ffffb097          	auipc	ra,0xffffb
    8020dc96:	602080e7          	jalr	1538(ra) # 80209294 <printf>
  for(uint64 i = sp;i<sz;i+=8){
    8020dc9a:	04a1                	addi	s1,s1,8
    8020dc9c:	0324f163          	bgeu	s1,s2,8020dcbe <stackdisplay+0x5e>
    uint64 *pa = (void*)kwalkaddr1(pagetable,i);
    8020dca0:	85a6                	mv	a1,s1
    8020dca2:	854e                	mv	a0,s3
    8020dca4:	ffffd097          	auipc	ra,0xffffd
    8020dca8:	ae4080e7          	jalr	-1308(ra) # 8020a788 <kwalkaddr1>
    if(pa)printf("addr %p value %p\n",i,*pa);
    8020dcac:	d16d                	beqz	a0,8020dc8e <stackdisplay+0x2e>
    8020dcae:	6110                	ld	a2,0(a0)
    8020dcb0:	85a6                	mv	a1,s1
    8020dcb2:	8552                	mv	a0,s4
    8020dcb4:	ffffb097          	auipc	ra,0xffffb
    8020dcb8:	5e0080e7          	jalr	1504(ra) # 80209294 <printf>
    8020dcbc:	bff9                	j	8020dc9a <stackdisplay+0x3a>
  }
}
    8020dcbe:	70e2                	ld	ra,56(sp)
    8020dcc0:	7442                	ld	s0,48(sp)
    8020dcc2:	74a2                	ld	s1,40(sp)
    8020dcc4:	7902                	ld	s2,32(sp)
    8020dcc6:	69e2                	ld	s3,24(sp)
    8020dcc8:	6a42                	ld	s4,16(sp)
    8020dcca:	6aa2                	ld	s5,8(sp)
    8020dccc:	6121                	addi	sp,sp,64
    8020dcce:	8082                	ret
    8020dcd0:	8082                	ret

000000008020dcd2 <zerocheck>:

void zerocheck(pagetable_t pagetable, uint64 va,int len){
    8020dcd2:	7179                	addi	sp,sp,-48
    8020dcd4:	f406                	sd	ra,40(sp)
    8020dcd6:	f022                	sd	s0,32(sp)
    8020dcd8:	ec26                	sd	s1,24(sp)
    8020dcda:	e84a                	sd	s2,16(sp)
    8020dcdc:	e44e                	sd	s3,8(sp)
    8020dcde:	1800                	addi	s0,sp,48
    8020dce0:	84aa                	mv	s1,a0
    8020dce2:	89ae                	mv	s3,a1
    8020dce4:	8932                	mv	s2,a2
  printf("[exec] check %p\n",va);
    8020dce6:	00008517          	auipc	a0,0x8
    8020dcea:	df250513          	addi	a0,a0,-526 # 80215ad8 <vma_type+0x350>
    8020dcee:	ffffb097          	auipc	ra,0xffffb
    8020dcf2:	5a6080e7          	jalr	1446(ra) # 80209294 <printf>
  char* pa = (void*)kwalkaddr1(pagetable,va);
    8020dcf6:	85ce                	mv	a1,s3
    8020dcf8:	8526                	mv	a0,s1
    8020dcfa:	ffffd097          	auipc	ra,0xffffd
    8020dcfe:	a8e080e7          	jalr	-1394(ra) # 8020a788 <kwalkaddr1>
  if(pa){
    8020dd02:	e901                	bnez	a0,8020dd12 <zerocheck+0x40>
    for(int i = 0;i*8<len;i++){
      *(pa+i) = 0;
    }
  }
  
}
    8020dd04:	70a2                	ld	ra,40(sp)
    8020dd06:	7402                	ld	s0,32(sp)
    8020dd08:	64e2                	ld	s1,24(sp)
    8020dd0a:	6942                	ld	s2,16(sp)
    8020dd0c:	69a2                	ld	s3,8(sp)
    8020dd0e:	6145                	addi	sp,sp,48
    8020dd10:	8082                	ret
    8020dd12:	84aa                	mv	s1,a0
    printf("[exec] set zero at va:%p pa:%p\n",va,pa);
    8020dd14:	862a                	mv	a2,a0
    8020dd16:	85ce                	mv	a1,s3
    8020dd18:	00008517          	auipc	a0,0x8
    8020dd1c:	dd850513          	addi	a0,a0,-552 # 80215af0 <vma_type+0x368>
    8020dd20:	ffffb097          	auipc	ra,0xffffb
    8020dd24:	574080e7          	jalr	1396(ra) # 80209294 <printf>
    for(int i = 0;i*8<len;i++){
    8020dd28:	fd205ee3          	blez	s2,8020dd04 <zerocheck+0x32>
    8020dd2c:	fff9079b          	addiw	a5,s2,-1
    8020dd30:	0037d79b          	srliw	a5,a5,0x3
    8020dd34:	0785                	addi	a5,a5,1
    8020dd36:	97a6                	add	a5,a5,s1
      *(pa+i) = 0;
    8020dd38:	00048023          	sb	zero,0(s1)
    for(int i = 0;i*8<len;i++){
    8020dd3c:	0485                	addi	s1,s1,1
    8020dd3e:	fef49de3          	bne	s1,a5,8020dd38 <zerocheck+0x66>
    8020dd42:	b7c9                	j	8020dd04 <zerocheck+0x32>

000000008020dd44 <exec>:
  

int
exec(char *path, char **argv, char **env)
{
    8020dd44:	b4010113          	addi	sp,sp,-1216
    8020dd48:	4a113c23          	sd	ra,1208(sp)
    8020dd4c:	4a813823          	sd	s0,1200(sp)
    8020dd50:	4a913423          	sd	s1,1192(sp)
    8020dd54:	4b213023          	sd	s2,1184(sp)
    8020dd58:	49313c23          	sd	s3,1176(sp)
    8020dd5c:	49413823          	sd	s4,1168(sp)
    8020dd60:	49513423          	sd	s5,1160(sp)
    8020dd64:	49613023          	sd	s6,1152(sp)
    8020dd68:	47713c23          	sd	s7,1144(sp)
    8020dd6c:	47813823          	sd	s8,1136(sp)
    8020dd70:	47913423          	sd	s9,1128(sp)
    8020dd74:	47a13023          	sd	s10,1120(sp)
    8020dd78:	45b13c23          	sd	s11,1112(sp)
    8020dd7c:	4c010413          	addi	s0,sp,1216
    8020dd80:	89aa                	mv	s3,a0
    8020dd82:	b4a43c23          	sd	a0,-1192(s0)
    8020dd86:	892e                	mv	s2,a1
    8020dd88:	b4b43423          	sd	a1,-1208(s0)
    8020dd8c:	b4c43023          	sd	a2,-1216(s0)
  int shflag = 0;
  uint64 sp,stackbase,entry;
  uint64 argc,envnum;
  uint64 aux[AUX_CNT*2+3] = {0,0,0};
    8020dd90:	21800613          	li	a2,536
    8020dd94:	4581                	li	a1,0
    8020dd96:	d7840513          	addi	a0,s0,-648
    8020dd9a:	ffff3097          	auipc	ra,0xffff3
    8020dd9e:	fda080e7          	jalr	-38(ra) # 80200d74 <memset>
  uint64 environ[10]={0};
    8020dda2:	d2043423          	sd	zero,-728(s0)
    8020dda6:	d2043823          	sd	zero,-720(s0)
    8020ddaa:	d2043c23          	sd	zero,-712(s0)
    8020ddae:	d4043023          	sd	zero,-704(s0)
    8020ddb2:	d4043423          	sd	zero,-696(s0)
    8020ddb6:	d4043823          	sd	zero,-688(s0)
    8020ddba:	d4043c23          	sd	zero,-680(s0)
    8020ddbe:	d6043023          	sd	zero,-672(s0)
    8020ddc2:	d6043423          	sd	zero,-664(s0)
    8020ddc6:	d6043823          	sd	zero,-656(s0)
  uint64 ustack[MAXARG+2];
  char *last,*s;
  struct proc* p = myproc();
    8020ddca:	ffffe097          	auipc	ra,0xffffe
    8020ddce:	5e8080e7          	jalr	1512(ra) # 8020c3b2 <myproc>
    8020ddd2:	84aa                	mv	s1,a0
    8020ddd4:	b6a43823          	sd	a0,-1168(s0)
  struct proc* np = kmalloc(sizeof(struct proc));
    8020ddd8:	1d000513          	li	a0,464
    8020dddc:	ffffc097          	auipc	ra,0xffffc
    8020dde0:	1e0080e7          	jalr	480(ra) # 80209fbc <kmalloc>
    8020dde4:	8baa                	mv	s7,a0
  struct elfhdr elf;
  struct dirent *ep;
  np->trapframe = allocpage();
    8020dde6:	ffffc097          	auipc	ra,0xffffc
    8020ddea:	f4e080e7          	jalr	-178(ra) # 80209d34 <_allocpage>
    8020ddee:	06abb423          	sd	a0,104(s7)
  memcpy(np->trapframe,p->trapframe,sizeof(struct trapframe));
    8020ddf2:	12000613          	li	a2,288
    8020ddf6:	74ac                	ld	a1,104(s1)
    8020ddf8:	ffff3097          	auipc	ra,0xffff3
    8020ddfc:	040080e7          	jalr	64(ra) # 80200e38 <memcpy>
    strncpy(path,"/busybox",10);
  }
  */
  
  
  if(strncmp(path,argv[0],0x100)!=0){
    8020de00:	10000613          	li	a2,256
    8020de04:	00093583          	ld	a1,0(s2)
    8020de08:	854e                	mv	a0,s3
    8020de0a:	ffff3097          	auipc	ra,0xffff3
    8020de0e:	046080e7          	jalr	70(ra) # 80200e50 <strncmp>
    8020de12:	e175                	bnez	a0,8020def6 <exec+0x1b2>
    strncpy(argv[0],path,0x100);
  }
  
  if ((proc_pagetable(np, 0, 0)) == NULL) {
    8020de14:	4601                	li	a2,0
    8020de16:	4581                	li	a1,0
    8020de18:	855e                	mv	a0,s7
    8020de1a:	ffff4097          	auipc	ra,0xffff4
    8020de1e:	a1a080e7          	jalr	-1510(ra) # 80201834 <proc_pagetable>
    8020de22:	c575                	beqz	a0,8020df0e <exec+0x1ca>
    __debug_warn("[exec]vma init bad\n");
    goto bad;
  }

  if((ep = ename(NULL,path,0)) == NULL) {
    8020de24:	4601                	li	a2,0
    8020de26:	b5843583          	ld	a1,-1192(s0)
    8020de2a:	4501                	li	a0,0
    8020de2c:	ffff6097          	auipc	ra,0xffff6
    8020de30:	680080e7          	jalr	1664(ra) # 802044ac <ename>
    8020de34:	89aa                	mv	s3,a0
    8020de36:	c56d                	beqz	a0,8020df20 <exec+0x1dc>
    __debug_warn("[exec] %s not found\n", path);
    goto bad;
  }
  
  elock(ep);
    8020de38:	ffff6097          	auipc	ra,0xffff6
    8020de3c:	c32080e7          	jalr	-974(ra) # 80203a6a <elock>
  int inreload = 0;
    8020de40:	b6043023          	sd	zero,-1184(s0)
  int shflag = 0;
    8020de44:	4a01                	li	s4,0
reload:
  // Check ELF header
  if(readelfhdr(ep,&elf)<0){    
    8020de46:	464c44b7          	lui	s1,0x464c4
    8020de4a:	57f48493          	addi	s1,s1,1407 # 464c457f <_entry-0x39d3ba81>
    shflag = 1;
    eunlock(ep);
    eput(ep);
    if((ep = ename(NULL,"/busybox",0))==NULL){
    8020de4e:	00008a97          	auipc	s5,0x8
    8020de52:	cf2a8a93          	addi	s5,s5,-782 # 80215b40 <vma_type+0x3b8>
    shflag = 1;
    8020de56:	4905                	li	s2,1
  if(eread(ep, 0, (uint64)elf, 0, sizeof(struct elfhdr)) != sizeof(struct elfhdr))
    8020de58:	04000713          	li	a4,64
    8020de5c:	4681                	li	a3,0
    8020de5e:	bd840613          	addi	a2,s0,-1064
    8020de62:	4581                	li	a1,0
    8020de64:	854e                	mv	a0,s3
    8020de66:	ffff5097          	auipc	ra,0xffff5
    8020de6a:	224080e7          	jalr	548(ra) # 8020308a <eread>
    8020de6e:	04000793          	li	a5,64
    8020de72:	00f51663          	bne	a0,a5,8020de7e <exec+0x13a>
  if(readelfhdr(ep,&elf)<0){    
    8020de76:	bd842783          	lw	a5,-1064(s0)
    8020de7a:	0c978c63          	beq	a5,s1,8020df52 <exec+0x20e>
    eunlock(ep);
    8020de7e:	854e                	mv	a0,s3
    8020de80:	ffff6097          	auipc	ra,0xffff6
    8020de84:	c20080e7          	jalr	-992(ra) # 80203aa0 <eunlock>
    eput(ep);
    8020de88:	854e                	mv	a0,s3
    8020de8a:	ffff6097          	auipc	ra,0xffff6
    8020de8e:	c64080e7          	jalr	-924(ra) # 80203aee <eput>
    if((ep = ename(NULL,"/busybox",0))==NULL){
    8020de92:	4601                	li	a2,0
    8020de94:	85d6                	mv	a1,s5
    8020de96:	4501                	li	a0,0
    8020de98:	ffff6097          	auipc	ra,0xffff6
    8020de9c:	614080e7          	jalr	1556(ra) # 802044ac <ename>
    8020dea0:	89aa                	mv	s3,a0
    8020dea2:	cd49                	beqz	a0,8020df3c <exec+0x1f8>
      __debug_warn("[exec] %s not found\n", path);
      goto bad;
    }
    elock(ep);
    8020dea4:	ffff6097          	auipc	ra,0xffff6
    8020dea8:	bc6080e7          	jalr	-1082(ra) # 80203a6a <elock>
    shflag = 1;
    8020deac:	8a4a                	mv	s4,s2
    inreload++;
    if(inreload==1)goto reload;
    8020deae:	b6043783          	ld	a5,-1184(s0)
    8020deb2:	c3d1                	beqz	a5,8020df36 <exec+0x1f2>
    else{
      __debug_warn("[exec] reload many times\n");
    8020deb4:	00008517          	auipc	a0,0x8
    8020deb8:	c9c50513          	addi	a0,a0,-868 # 80215b50 <vma_type+0x3c8>
    8020debc:	ffffb097          	auipc	ra,0xffffb
    8020dec0:	7b4080e7          	jalr	1972(ra) # 80209670 <__debug_warn>
  pagetable_t pagetable = p->pagetable;
    8020dec4:	060bb783          	ld	a5,96(s7)
    8020dec8:	b8f43423          	sd	a5,-1144(s0)
  for(int i=0, off=elf->phoff; i<elf->phnum; i++, off+=sizeof(ph)){
    8020decc:	bf842903          	lw	s2,-1032(s0)
    8020ded0:	c1045783          	lhu	a5,-1008(s0)
    8020ded4:	24078b63          	beqz	a5,8020e12a <exec+0x3e6>
    }
  }
  
  
  struct proghdr phdr = {0};
    8020ded8:	b6043c23          	sd	zero,-1160(s0)
  for(int i=0, off=elf->phoff; i<elf->phnum; i++, off+=sizeof(ph)){
    8020dedc:	4c01                	li	s8,0
  int getphdr = 0;
    8020dede:	b8043023          	sd	zero,-1152(s0)
  if((va % PGSIZE) != 0){
    8020dee2:	6d05                	lui	s10,0x1
    8020dee4:	fffd0793          	addi	a5,s10,-1 # fff <_entry-0x801ff001>
    8020dee8:	b6f43423          	sd	a5,-1176(s0)
    if(sz - i < rest)
    8020deec:	57fd                	li	a5,-1
    8020deee:	9381                	srli	a5,a5,0x20
    8020def0:	b4f43823          	sd	a5,-1200(s0)
    8020def4:	a2fd                	j	8020e0e2 <exec+0x39e>
    strncpy(argv[0],path,0x100);
    8020def6:	10000613          	li	a2,256
    8020defa:	b5843583          	ld	a1,-1192(s0)
    8020defe:	b4843783          	ld	a5,-1208(s0)
    8020df02:	6388                	ld	a0,0(a5)
    8020df04:	ffff3097          	auipc	ra,0xffff3
    8020df08:	f88080e7          	jalr	-120(ra) # 80200e8c <strncpy>
    8020df0c:	b721                	j	8020de14 <exec+0xd0>
    __debug_warn("[exec]vma init bad\n");
    8020df0e:	00008517          	auipc	a0,0x8
    8020df12:	c0250513          	addi	a0,a0,-1022 # 80215b10 <vma_type+0x388>
    8020df16:	ffffb097          	auipc	ra,0xffffb
    8020df1a:	75a080e7          	jalr	1882(ra) # 80209670 <__debug_warn>
    goto bad;
    8020df1e:	a1e5                	j	8020e406 <exec+0x6c2>
    __debug_warn("[exec] %s not found\n", path);
    8020df20:	b5843583          	ld	a1,-1192(s0)
    8020df24:	00008517          	auipc	a0,0x8
    8020df28:	c0450513          	addi	a0,a0,-1020 # 80215b28 <vma_type+0x3a0>
    8020df2c:	ffffb097          	auipc	ra,0xffffb
    8020df30:	744080e7          	jalr	1860(ra) # 80209670 <__debug_warn>
    goto bad;
    8020df34:	a9c9                	j	8020e406 <exec+0x6c2>
    inreload++;
    8020df36:	b7243023          	sd	s2,-1184(s0)
    8020df3a:	bf39                	j	8020de58 <exec+0x114>
      __debug_warn("[exec] %s not found\n", path);
    8020df3c:	b5843583          	ld	a1,-1192(s0)
    8020df40:	00008517          	auipc	a0,0x8
    8020df44:	be850513          	addi	a0,a0,-1048 # 80215b28 <vma_type+0x3a0>
    8020df48:	ffffb097          	auipc	ra,0xffffb
    8020df4c:	728080e7          	jalr	1832(ra) # 80209670 <__debug_warn>
      goto bad;
    8020df50:	a95d                	j	8020e406 <exec+0x6c2>
    8020df52:	b7443023          	sd	s4,-1184(s0)
    8020df56:	b7bd                	j	8020dec4 <exec+0x180>
      if(ph.memsz < ph.filesz){
    8020df58:	bb843603          	ld	a2,-1096(s0)
    8020df5c:	bb043783          	ld	a5,-1104(s0)
    8020df60:	04f66d63          	bltu	a2,a5,8020dfba <exec+0x276>
      if(ph.vaddr + ph.memsz < ph.vaddr){
    8020df64:	ba043b03          	ld	s6,-1120(s0)
    8020df68:	016607b3          	add	a5,a2,s6
    8020df6c:	0767ed63          	bltu	a5,s6,8020dfe6 <exec+0x2a2>
      if(!getphdr&&phdr&&ph.off == 0){ 
    8020df70:	b8043783          	ld	a5,-1152(s0)
    8020df74:	eb89                	bnez	a5,8020df86 <exec+0x242>
    8020df76:	b9843783          	ld	a5,-1128(s0)
    8020df7a:	e791                	bnez	a5,8020df86 <exec+0x242>
        phdr->vaddr = elf->phoff + ph.vaddr;
    8020df7c:	bf843783          	ld	a5,-1032(s0)
    8020df80:	97da                	add	a5,a5,s6
    8020df82:	b6f43c23          	sd	a5,-1160(s0)
      if(alloc_load_vma(p, load_start, ph.memsz, PTE_R|PTE_W|PTE_X|PTE_U)== NULL){
    8020df86:	46f9                	li	a3,30
    8020df88:	85da                	mv	a1,s6
    8020df8a:	855e                	mv	a0,s7
    8020df8c:	fffff097          	auipc	ra,0xfffff
    8020df90:	9ce080e7          	jalr	-1586(ra) # 8020c95a <alloc_load_vma>
    8020df94:	c135                	beqz	a0,8020dff8 <exec+0x2b4>
      if(loadseg(pagetable, load_start, ep, ph.off, ph.filesz) < 0){
    8020df96:	b9842d83          	lw	s11,-1128(s0)
    8020df9a:	bb043a83          	ld	s5,-1104(s0)
    8020df9e:	000a8c9b          	sext.w	s9,s5
  if((va % PGSIZE) != 0){
    8020dfa2:	b6843783          	ld	a5,-1176(s0)
    8020dfa6:	00fb7a33          	and	s4,s6,a5
  i = 0;
    8020dfaa:	4481                	li	s1,0
  if((va % PGSIZE) != 0){
    8020dfac:	040a1f63          	bnez	s4,8020e00a <exec+0x2c6>
  for(; i < sz; i += PGSIZE){
    8020dfb0:	409c8a3b          	subw	s4,s9,s1
    8020dfb4:	0f94e863          	bltu	s1,s9,8020e0a4 <exec+0x360>
    8020dfb8:	aa31                	j	8020e0d4 <exec+0x390>
        __debug_warn("[exec]load memsz>filesz\n");
    8020dfba:	00008517          	auipc	a0,0x8
    8020dfbe:	bb650513          	addi	a0,a0,-1098 # 80215b70 <vma_type+0x3e8>
    8020dfc2:	ffffb097          	auipc	ra,0xffffb
    8020dfc6:	6ae080e7          	jalr	1710(ra) # 80209670 <__debug_warn>
  entry = loadelf(np,ep,&elf,&phdr,0);
  if(entry==-1){
    eunlock(ep);
    8020dfca:	854e                	mv	a0,s3
    8020dfcc:	ffff6097          	auipc	ra,0xffff6
    8020dfd0:	ad4080e7          	jalr	-1324(ra) # 80203aa0 <eunlock>
    __debug_warn("[exec]load elf bad\n");
    8020dfd4:	00008517          	auipc	a0,0x8
    8020dfd8:	c3c50513          	addi	a0,a0,-964 # 80215c10 <vma_type+0x488>
    8020dfdc:	ffffb097          	auipc	ra,0xffffb
    8020dfe0:	694080e7          	jalr	1684(ra) # 80209670 <__debug_warn>
    goto bad;
    8020dfe4:	a10d                	j	8020e406 <exec+0x6c2>
        __debug_warn("[exec]memsz not positive\n");
    8020dfe6:	00008517          	auipc	a0,0x8
    8020dfea:	baa50513          	addi	a0,a0,-1110 # 80215b90 <vma_type+0x408>
    8020dfee:	ffffb097          	auipc	ra,0xffffb
    8020dff2:	682080e7          	jalr	1666(ra) # 80209670 <__debug_warn>
        return -1;
    8020dff6:	bfd1                	j	8020dfca <exec+0x286>
        __debug_warn("[exec]grow space failed\n");
    8020dff8:	00008517          	auipc	a0,0x8
    8020dffc:	bb850513          	addi	a0,a0,-1096 # 80215bb0 <vma_type+0x428>
    8020e000:	ffffb097          	auipc	ra,0xffffb
    8020e004:	670080e7          	jalr	1648(ra) # 80209670 <__debug_warn>
        return -1;
    8020e008:	b7c9                	j	8020dfca <exec+0x286>
    uint64 rest = PGSIZE -off;
    8020e00a:	414d04b3          	sub	s1,s10,s4
    pa = walkaddr(pagetable, va)+off;
    8020e00e:	85da                	mv	a1,s6
    8020e010:	b8843503          	ld	a0,-1144(s0)
    8020e014:	ffffc097          	auipc	ra,0xffffc
    8020e018:	66c080e7          	jalr	1644(ra) # 8020a680 <walkaddr>
    8020e01c:	00aa0633          	add	a2,s4,a0
    if(pa == NULL)
    8020e020:	ce1d                	beqz	a2,8020e05e <exec+0x31a>
    if(sz - i < rest)
    8020e022:	b5043783          	ld	a5,-1200(s0)
    8020e026:	00fafab3          	and	s5,s5,a5
      n = sz - i;
    8020e02a:	8a66                	mv	s4,s9
    if(sz - i < rest)
    8020e02c:	009ae463          	bltu	s5,s1,8020e034 <exec+0x2f0>
      n = rest;
    8020e030:	00048a1b          	sext.w	s4,s1
    if(eread(ep, 0, (uint64)pa, offset+i, n) != n)
    8020e034:	8752                	mv	a4,s4
    8020e036:	86ee                	mv	a3,s11
    8020e038:	4581                	li	a1,0
    8020e03a:	854e                	mv	a0,s3
    8020e03c:	ffff5097          	auipc	ra,0xffff5
    8020e040:	04e080e7          	jalr	78(ra) # 8020308a <eread>
    8020e044:	0005049b          	sext.w	s1,a0
    8020e048:	f69a04e3          	beq	s4,s1,8020dfb0 <exec+0x26c>
        printf("[exec]load segment failed\n");
    8020e04c:	00008517          	auipc	a0,0x8
    8020e050:	cec50513          	addi	a0,a0,-788 # 80215d38 <vma_type+0x5b0>
    8020e054:	ffffb097          	auipc	ra,0xffffb
    8020e058:	240080e7          	jalr	576(ra) # 80209294 <printf>
        return -1;
    8020e05c:	b7bd                	j	8020dfca <exec+0x286>
      panic("loadseg: address should exist");
    8020e05e:	00008517          	auipc	a0,0x8
    8020e062:	b7250513          	addi	a0,a0,-1166 # 80215bd0 <vma_type+0x448>
    8020e066:	ffffb097          	auipc	ra,0xffffb
    8020e06a:	1e4080e7          	jalr	484(ra) # 8020924a <panic>
      panic("loadseg: address should exist");
    8020e06e:	00008517          	auipc	a0,0x8
    8020e072:	b6250513          	addi	a0,a0,-1182 # 80215bd0 <vma_type+0x448>
    8020e076:	ffffb097          	auipc	ra,0xffffb
    8020e07a:	1d4080e7          	jalr	468(ra) # 8020924a <panic>
    if(eread(ep, 0, (uint64)pa, offset+i, n) != n)
    8020e07e:	8756                	mv	a4,s5
    8020e080:	009d86bb          	addw	a3,s11,s1
    8020e084:	4581                	li	a1,0
    8020e086:	854e                	mv	a0,s3
    8020e088:	ffff5097          	auipc	ra,0xffff5
    8020e08c:	002080e7          	jalr	2(ra) # 8020308a <eread>
    8020e090:	2501                	sext.w	a0,a0
    8020e092:	faaa9de3          	bne	s5,a0,8020e04c <exec+0x308>
  for(; i < sz; i += PGSIZE){
    8020e096:	6785                	lui	a5,0x1
    8020e098:	9cbd                	addw	s1,s1,a5
    8020e09a:	77fd                	lui	a5,0xfffff
    8020e09c:	01478a3b          	addw	s4,a5,s4
    8020e0a0:	0394fa63          	bgeu	s1,s9,8020e0d4 <exec+0x390>
    pa = walkaddr(pagetable, va + i);
    8020e0a4:	02049593          	slli	a1,s1,0x20
    8020e0a8:	9181                	srli	a1,a1,0x20
    8020e0aa:	95da                	add	a1,a1,s6
    8020e0ac:	b8843503          	ld	a0,-1144(s0)
    8020e0b0:	ffffc097          	auipc	ra,0xffffc
    8020e0b4:	5d0080e7          	jalr	1488(ra) # 8020a680 <walkaddr>
    8020e0b8:	862a                	mv	a2,a0
    if(pa == NULL)
    8020e0ba:	d955                	beqz	a0,8020e06e <exec+0x32a>
      n = PGSIZE;
    8020e0bc:	8aea                	mv	s5,s10
    if(sz - i < PGSIZE)
    8020e0be:	fdaa70e3          	bgeu	s4,s10,8020e07e <exec+0x33a>
      n = sz - i;
    8020e0c2:	8ad2                	mv	s5,s4
    8020e0c4:	bf6d                	j	8020e07e <exec+0x33a>
        *phdr = ph;
    8020e0c6:	ba043783          	ld	a5,-1120(s0)
    8020e0ca:	b6f43c23          	sd	a5,-1160(s0)
        getphdr = 1;
    8020e0ce:	4785                	li	a5,1
    8020e0d0:	b8f43023          	sd	a5,-1152(s0)
  for(int i=0, off=elf->phoff; i<elf->phnum; i++, off+=sizeof(ph)){
    8020e0d4:	2c05                	addiw	s8,s8,1
    8020e0d6:	0389091b          	addiw	s2,s2,56
    8020e0da:	c1045783          	lhu	a5,-1008(s0)
    8020e0de:	04fc5863          	bge	s8,a5,8020e12e <exec+0x3ea>
    if(eread(ep, 0, (uint64)&ph, off, sizeof(ph)) != sizeof(ph))
    8020e0e2:	2901                	sext.w	s2,s2
    8020e0e4:	03800713          	li	a4,56
    8020e0e8:	86ca                	mv	a3,s2
    8020e0ea:	b9040613          	addi	a2,s0,-1136
    8020e0ee:	4581                	li	a1,0
    8020e0f0:	854e                	mv	a0,s3
    8020e0f2:	ffff5097          	auipc	ra,0xffff5
    8020e0f6:	f98080e7          	jalr	-104(ra) # 8020308a <eread>
    8020e0fa:	03800793          	li	a5,56
    8020e0fe:	ecf516e3          	bne	a0,a5,8020dfca <exec+0x286>
    if(ph.type == ELF_PROG_LOAD){
    8020e102:	b9042783          	lw	a5,-1136(s0)
    8020e106:	4705                	li	a4,1
    8020e108:	e4e788e3          	beq	a5,a4,8020df58 <exec+0x214>
    }else if(ph.type==ELF_PROG_PHDR){
    8020e10c:	4719                	li	a4,6
    8020e10e:	fae78ce3          	beq	a5,a4,8020e0c6 <exec+0x382>
    }else if(ph.type==ELF_PROG_INTERP){
    8020e112:	470d                	li	a4,3
    8020e114:	fce790e3          	bne	a5,a4,8020e0d4 <exec+0x390>
      __debug_warn("[exec]dynamic load not success\n");
    8020e118:	00008517          	auipc	a0,0x8
    8020e11c:	ad850513          	addi	a0,a0,-1320 # 80215bf0 <vma_type+0x468>
    8020e120:	ffffb097          	auipc	ra,0xffffb
    8020e124:	550080e7          	jalr	1360(ra) # 80209670 <__debug_warn>
    8020e128:	b775                	j	8020e0d4 <exec+0x390>
  struct proghdr phdr = {0};
    8020e12a:	b6043c23          	sd	zero,-1160(s0)
  return elf->entry;
    8020e12e:	bf043a03          	ld	s4,-1040(s0)
  if(entry==-1){
    8020e132:	57fd                	li	a5,-1
    8020e134:	e8fa0be3          	beq	s4,a5,8020dfca <exec+0x286>
  }
  eunlock(ep);
    8020e138:	854e                	mv	a0,s3
    8020e13a:	ffff6097          	auipc	ra,0xffff6
    8020e13e:	966080e7          	jalr	-1690(ra) # 80203aa0 <eunlock>
  eput(ep);
    8020e142:	854e                	mv	a0,s3
    8020e144:	ffff6097          	auipc	ra,0xffff6
    8020e148:	9aa080e7          	jalr	-1622(ra) # 80203aee <eput>
  //print_vma_info(p);
  //print_vma_info(np);
  struct vma* stack_vma = type_locate_vma(np->vma,STACK);
    8020e14c:	459d                	li	a1,7
    8020e14e:	170bb503          	ld	a0,368(s7)
    8020e152:	ffffe097          	auipc	ra,0xffffe
    8020e156:	3fe080e7          	jalr	1022(ra) # 8020c550 <type_locate_vma>
  sp = stack_vma->end;
    8020e15a:	6d14                	ld	a3,24(a0)
  stackbase = stack_vma->addr;
    8020e15c:	00853983          	ld	s3,8(a0)
  ustack[0] = environ[0] =0;
    8020e160:	d2043423          	sd	zero,-728(s0)
    8020e164:	c0043c23          	sd	zero,-1000(s0)
  if((sp = ustackpushstr(np->pagetable,environ,"LD_LIBRARY_PATH=/",sp,stackbase))==-1){
    8020e168:	874e                	mv	a4,s3
    8020e16a:	00008617          	auipc	a2,0x8
    8020e16e:	abe60613          	addi	a2,a2,-1346 # 80215c28 <vma_type+0x4a0>
    8020e172:	d2840593          	addi	a1,s0,-728
    8020e176:	060bb503          	ld	a0,96(s7)
    8020e17a:	00000097          	auipc	ra,0x0
    8020e17e:	a54080e7          	jalr	-1452(ra) # 8020dbce <ustackpushstr>
    8020e182:	57fd                	li	a5,-1
    8020e184:	28f50163          	beq	a0,a5,8020e406 <exec+0x6c2>
    if((sp = ustackpushstr(np->pagetable,ustack,path,sp,stackbase))==-1){
      goto bad;
    }
#endif
  }
  uint64 random[2] = { 0xcde142a16cb93072, 0x128a39c127d8bbf2 };
    8020e188:	00009797          	auipc	a5,0x9
    8020e18c:	6787b783          	ld	a5,1656(a5) # 80217800 <erodata+0x10>
    8020e190:	bcf43423          	sd	a5,-1080(s0)
    8020e194:	00009797          	auipc	a5,0x9
    8020e198:	6747b783          	ld	a5,1652(a5) # 80217808 <erodata+0x18>
    8020e19c:	bcf43823          	sd	a5,-1072(s0)
  sp -= 16;
    8020e1a0:	ff050493          	addi	s1,a0,-16
  if (sp < stackbase || copyout(np->pagetable, sp, (char *)random, 16) < 0) {
    8020e1a4:	1d34eb63          	bltu	s1,s3,8020e37a <exec+0x636>
    8020e1a8:	46c1                	li	a3,16
    8020e1aa:	bc840613          	addi	a2,s0,-1080
    8020e1ae:	85a6                	mv	a1,s1
    8020e1b0:	060bb503          	ld	a0,96(s7)
    8020e1b4:	ffffd097          	auipc	ra,0xffffd
    8020e1b8:	508080e7          	jalr	1288(ra) # 8020b6bc <copyout>
    8020e1bc:	1a054f63          	bltz	a0,8020e37a <exec+0x636>
    goto bad;
  }


  //auxalloc(aux,AT_HWCAP, 0x112d);
  auxalloc(aux,AT_PAGESZ,PGSIZE);
    8020e1c0:	6605                	lui	a2,0x1
    8020e1c2:	4599                	li	a1,6
    8020e1c4:	d7840513          	addi	a0,s0,-648
    8020e1c8:	00000097          	auipc	ra,0x0
    8020e1cc:	994080e7          	jalr	-1644(ra) # 8020db5c <auxalloc>
  auxalloc(aux,AT_PHDR, phdr.vaddr);
    8020e1d0:	b7843603          	ld	a2,-1160(s0)
    8020e1d4:	458d                	li	a1,3
    8020e1d6:	d7840513          	addi	a0,s0,-648
    8020e1da:	00000097          	auipc	ra,0x0
    8020e1de:	982080e7          	jalr	-1662(ra) # 8020db5c <auxalloc>
  auxalloc(aux,AT_PHENT, elf.phentsize);
    8020e1e2:	c0e45603          	lhu	a2,-1010(s0)
    8020e1e6:	4591                	li	a1,4
    8020e1e8:	d7840513          	addi	a0,s0,-648
    8020e1ec:	00000097          	auipc	ra,0x0
    8020e1f0:	970080e7          	jalr	-1680(ra) # 8020db5c <auxalloc>
  auxalloc(aux,AT_PHNUM, elf.phnum);
    8020e1f4:	c1045603          	lhu	a2,-1008(s0)
    8020e1f8:	4595                	li	a1,5
    8020e1fa:	d7840513          	addi	a0,s0,-648
    8020e1fe:	00000097          	auipc	ra,0x0
    8020e202:	95e080e7          	jalr	-1698(ra) # 8020db5c <auxalloc>
  auxalloc(aux,AT_UID, 0);
    8020e206:	4601                	li	a2,0
    8020e208:	45ad                	li	a1,11
    8020e20a:	d7840513          	addi	a0,s0,-648
    8020e20e:	00000097          	auipc	ra,0x0
    8020e212:	94e080e7          	jalr	-1714(ra) # 8020db5c <auxalloc>
  auxalloc(aux,AT_EUID, 0);
    8020e216:	4601                	li	a2,0
    8020e218:	45b1                	li	a1,12
    8020e21a:	d7840513          	addi	a0,s0,-648
    8020e21e:	00000097          	auipc	ra,0x0
    8020e222:	93e080e7          	jalr	-1730(ra) # 8020db5c <auxalloc>
  auxalloc(aux,AT_GID, 0);
    8020e226:	4601                	li	a2,0
    8020e228:	45b5                	li	a1,13
    8020e22a:	d7840513          	addi	a0,s0,-648
    8020e22e:	00000097          	auipc	ra,0x0
    8020e232:	92e080e7          	jalr	-1746(ra) # 8020db5c <auxalloc>
  auxalloc(aux,AT_EGID, 0);
    8020e236:	4601                	li	a2,0
    8020e238:	45b9                	li	a1,14
    8020e23a:	d7840513          	addi	a0,s0,-648
    8020e23e:	00000097          	auipc	ra,0x0
    8020e242:	91e080e7          	jalr	-1762(ra) # 8020db5c <auxalloc>
  auxalloc(aux,AT_SECURE, 0);
    8020e246:	4601                	li	a2,0
    8020e248:	45dd                	li	a1,23
    8020e24a:	d7840513          	addi	a0,s0,-648
    8020e24e:	00000097          	auipc	ra,0x0
    8020e252:	90e080e7          	jalr	-1778(ra) # 8020db5c <auxalloc>
  auxalloc(aux,AT_EGID, 0);		
    8020e256:	4601                	li	a2,0
    8020e258:	45b9                	li	a1,14
    8020e25a:	d7840513          	addi	a0,s0,-648
    8020e25e:	00000097          	auipc	ra,0x0
    8020e262:	8fe080e7          	jalr	-1794(ra) # 8020db5c <auxalloc>
  auxalloc(aux,AT_RANDOM, sp);
    8020e266:	8626                	mv	a2,s1
    8020e268:	45e5                	li	a1,25
    8020e26a:	d7840513          	addi	a0,s0,-648
    8020e26e:	00000097          	auipc	ra,0x0
    8020e272:	8ee080e7          	jalr	-1810(ra) # 8020db5c <auxalloc>

  //printf("[exec]push argv\n");
  // Push argument strings, prepare rest of stack in ustack.
  
  if(shflag){
    8020e276:	b6043783          	ld	a5,-1184(s0)
    8020e27a:	10079963          	bnez	a5,8020e38c <exec+0x648>
    if((sp = ustackpushstr(np->pagetable,environ,"PATH=/",sp,stackbase))==-1){
      __debug_warn("[exec]push env string bad\n");
      goto bad;
    }
  }
  for(argc = 0; argv[argc]; argc++) {
    8020e27e:	b4843783          	ld	a5,-1208(s0)
    8020e282:	6390                	ld	a2,0(a5)
    8020e284:	00878913          	addi	s2,a5,8
    if((sp = ustackpushstr(np->pagetable,ustack,argv[argc],sp,stackbase))==-1){
    8020e288:	5afd                	li	s5,-1
  for(argc = 0; argv[argc]; argc++) {
    8020e28a:	c215                	beqz	a2,8020e2ae <exec+0x56a>
    if((sp = ustackpushstr(np->pagetable,ustack,argv[argc],sp,stackbase))==-1){
    8020e28c:	874e                	mv	a4,s3
    8020e28e:	86a6                	mv	a3,s1
    8020e290:	c1840593          	addi	a1,s0,-1000
    8020e294:	060bb503          	ld	a0,96(s7)
    8020e298:	00000097          	auipc	ra,0x0
    8020e29c:	936080e7          	jalr	-1738(ra) # 8020dbce <ustackpushstr>
    8020e2a0:	84aa                	mv	s1,a0
    8020e2a2:	15550a63          	beq	a0,s5,8020e3f6 <exec+0x6b2>
  for(argc = 0; argv[argc]; argc++) {
    8020e2a6:	0921                	addi	s2,s2,8
    8020e2a8:	ff893603          	ld	a2,-8(s2)
    8020e2ac:	f265                	bnez	a2,8020e28c <exec+0x548>
      __debug_warn("[exec]push argv string bad\n");
      goto bad;
    }
  }
  //printf("[exec]push env\n");
  for(envnum = 0; env[envnum]; envnum++) {
    8020e2ae:	b4043783          	ld	a5,-1216(s0)
    8020e2b2:	6390                	ld	a2,0(a5)
    8020e2b4:	c60d                	beqz	a2,8020e2de <exec+0x59a>
    8020e2b6:	00878913          	addi	s2,a5,8
    if((sp = ustackpushstr(np->pagetable,environ,env[envnum],sp,stackbase))==-1){
    8020e2ba:	5afd                	li	s5,-1
    8020e2bc:	874e                	mv	a4,s3
    8020e2be:	86a6                	mv	a3,s1
    8020e2c0:	d2840593          	addi	a1,s0,-728
    8020e2c4:	060bb503          	ld	a0,96(s7)
    8020e2c8:	00000097          	auipc	ra,0x0
    8020e2cc:	906080e7          	jalr	-1786(ra) # 8020dbce <ustackpushstr>
    8020e2d0:	84aa                	mv	s1,a0
    8020e2d2:	19550563          	beq	a0,s5,8020e45c <exec+0x718>
  for(envnum = 0; env[envnum]; envnum++) {
    8020e2d6:	0921                	addi	s2,s2,8
    8020e2d8:	ff893603          	ld	a2,-8(s2)
    8020e2dc:	f265                	bnez	a2,8020e2bc <exec+0x578>
      __debug_warn("[exec]push env string bad\n");
      goto bad;
    }
  }
  //printf("[exec]push end\n");
  if((environ[0]+ustack[0]+1)%2){sp -= 8;}//16 aligned
    8020e2de:	d2843783          	ld	a5,-728(s0)
    8020e2e2:	c1843703          	ld	a4,-1000(s0)
    8020e2e6:	97ba                	add	a5,a5,a4
    8020e2e8:	8b85                	andi	a5,a5,1
    8020e2ea:	e391                	bnez	a5,8020e2ee <exec+0x5aa>
    8020e2ec:	14e1                	addi	s1,s1,-8
  //load aux
  if((sp = loadaux(np->pagetable,sp,stackbase,aux))<0){
    8020e2ee:	d7840693          	addi	a3,s0,-648
    8020e2f2:	864e                	mv	a2,s3
    8020e2f4:	85a6                	mv	a1,s1
    8020e2f6:	060bb503          	ld	a0,96(s7)
    8020e2fa:	00000097          	auipc	ra,0x0
    8020e2fe:	886080e7          	jalr	-1914(ra) # 8020db80 <loadaux>
    8020e302:	84aa                	mv	s1,a0
    __debug_warn("[exec]pass aux too many\n");
    goto bad;
  }
  
  argc = environ[0];
    8020e304:	d2843783          	ld	a5,-728(s0)
  if(argc){
    8020e308:	c39d                	beqz	a5,8020e32e <exec+0x5ea>
    // push the array of argv[] pointers.
    sp -= (argc+1) * sizeof(uint64);
    8020e30a:	0785                	addi	a5,a5,1
    8020e30c:	00379693          	slli	a3,a5,0x3
    8020e310:	40d504b3          	sub	s1,a0,a3
    if(sp < stackbase){
    8020e314:	1534ed63          	bltu	s1,s3,8020e46e <exec+0x72a>
      __debug_warn("[exec]env address vec too long\n");
      goto bad;
    }
    if(copyout(np->pagetable, sp, (char *)(environ+1), (argc+1)*sizeof(uint64)) < 0){
    8020e318:	d3040613          	addi	a2,s0,-720
    8020e31c:	85a6                	mv	a1,s1
    8020e31e:	060bb503          	ld	a0,96(s7)
    8020e322:	ffffd097          	auipc	ra,0xffffd
    8020e326:	39a080e7          	jalr	922(ra) # 8020b6bc <copyout>
    8020e32a:	14054b63          	bltz	a0,8020e480 <exec+0x73c>
      __debug_warn("[exec]env address copy bad\n");
      goto bad;
    }
  }
  
  argc = ustack[0];
    8020e32e:	c1843903          	ld	s2,-1000(s0)
  //printf("[exec]argc:%d\n",argc);
  // push the array of argv[] pointers.
  sp -= (argc+2) * sizeof(uint64);
    8020e332:	00290693          	addi	a3,s2,2
    8020e336:	068e                	slli	a3,a3,0x3
    8020e338:	8c95                	sub	s1,s1,a3
  if(sp < stackbase){
    8020e33a:	1534ec63          	bltu	s1,s3,8020e492 <exec+0x74e>
    __debug_warn("[exec]ustack address vec too long\n");
    goto bad;
  }

  if(copyout(np->pagetable, sp, (char *)ustack, (argc+2)*sizeof(uint64)) < 0){
    8020e33e:	c1840613          	addi	a2,s0,-1000
    8020e342:	85a6                	mv	a1,s1
    8020e344:	060bb503          	ld	a0,96(s7)
    8020e348:	ffffd097          	auipc	ra,0xffffd
    8020e34c:	374080e7          	jalr	884(ra) # 8020b6bc <copyout>
    8020e350:	14054a63          	bltz	a0,8020e4a4 <exec+0x760>
  //stackdisplay(pagetable,sp,sz);
  // arguments to user main(argc, argv)
  // argc is returned via the system call return
  // value, which goes in a0.
  //np->trapframe->a0 = argc;
  np->trapframe->a0 = 0;
    8020e354:	068bb783          	ld	a5,104(s7)
    8020e358:	0607b823          	sd	zero,112(a5)
  np->trapframe->a1 = sp+8;
    8020e35c:	068bb783          	ld	a5,104(s7)
    8020e360:	00848713          	addi	a4,s1,8
    8020e364:	ffb8                	sd	a4,120(a5)
  
  for(last=s=path; *s; s++)
    8020e366:	b5843783          	ld	a5,-1192(s0)
    8020e36a:	0007c703          	lbu	a4,0(a5)
    8020e36e:	14070d63          	beqz	a4,8020e4c8 <exec+0x784>
    8020e372:	0785                	addi	a5,a5,1
    if(*s == '/')
    8020e374:	02f00693          	li	a3,47
    8020e378:	a299                	j	8020e4be <exec+0x77a>
    __debug_warn("[exec] random copy bad\n");
    8020e37a:	00008517          	auipc	a0,0x8
    8020e37e:	8c650513          	addi	a0,a0,-1850 # 80215c40 <vma_type+0x4b8>
    8020e382:	ffffb097          	auipc	ra,0xffffb
    8020e386:	2ee080e7          	jalr	750(ra) # 80209670 <__debug_warn>
    goto bad;
    8020e38a:	a8b5                	j	8020e406 <exec+0x6c2>
    if((sp = ustackpushstr(np->pagetable,ustack,"sh",sp,stackbase))==-1){
    8020e38c:	874e                	mv	a4,s3
    8020e38e:	86a6                	mv	a3,s1
    8020e390:	00006617          	auipc	a2,0x6
    8020e394:	50860613          	addi	a2,a2,1288 # 80214898 <rodata_start+0x898>
    8020e398:	c1840593          	addi	a1,s0,-1000
    8020e39c:	060bb503          	ld	a0,96(s7)
    8020e3a0:	00000097          	auipc	ra,0x0
    8020e3a4:	82e080e7          	jalr	-2002(ra) # 8020dbce <ustackpushstr>
    8020e3a8:	86aa                	mv	a3,a0
    8020e3aa:	57fd                	li	a5,-1
    8020e3ac:	02f50c63          	beq	a0,a5,8020e3e4 <exec+0x6a0>
    if((sp = ustackpushstr(np->pagetable,environ,"PATH=/",sp,stackbase))==-1){
    8020e3b0:	874e                	mv	a4,s3
    8020e3b2:	00008617          	auipc	a2,0x8
    8020e3b6:	8c660613          	addi	a2,a2,-1850 # 80215c78 <vma_type+0x4f0>
    8020e3ba:	d2840593          	addi	a1,s0,-728
    8020e3be:	060bb503          	ld	a0,96(s7)
    8020e3c2:	00000097          	auipc	ra,0x0
    8020e3c6:	80c080e7          	jalr	-2036(ra) # 8020dbce <ustackpushstr>
    8020e3ca:	84aa                	mv	s1,a0
    8020e3cc:	57fd                	li	a5,-1
    8020e3ce:	eaf518e3          	bne	a0,a5,8020e27e <exec+0x53a>
      __debug_warn("[exec]push env string bad\n");
    8020e3d2:	00008517          	auipc	a0,0x8
    8020e3d6:	8ae50513          	addi	a0,a0,-1874 # 80215c80 <vma_type+0x4f8>
    8020e3da:	ffffb097          	auipc	ra,0xffffb
    8020e3de:	296080e7          	jalr	662(ra) # 80209670 <__debug_warn>
      goto bad;
    8020e3e2:	a015                	j	8020e406 <exec+0x6c2>
      __debug_warn("[exec]push argv string bad\n");
    8020e3e4:	00008517          	auipc	a0,0x8
    8020e3e8:	87450513          	addi	a0,a0,-1932 # 80215c58 <vma_type+0x4d0>
    8020e3ec:	ffffb097          	auipc	ra,0xffffb
    8020e3f0:	284080e7          	jalr	644(ra) # 80209670 <__debug_warn>
      goto bad;
    8020e3f4:	a809                	j	8020e406 <exec+0x6c2>
      __debug_warn("[exec]push argv string bad\n");
    8020e3f6:	00008517          	auipc	a0,0x8
    8020e3fa:	86250513          	addi	a0,a0,-1950 # 80215c58 <vma_type+0x4d0>
    8020e3fe:	ffffb097          	auipc	ra,0xffffb
    8020e402:	272080e7          	jalr	626(ra) # 80209670 <__debug_warn>
  sfence_vma();
  //printf("[exec]argc:%d a0:%p\n",argc,p->trapframe->a0);
  uvmfree(np);
  return argc;
bad:
  uvmfree(np);
    8020e406:	855e                	mv	a0,s7
    8020e408:	ffffc097          	auipc	ra,0xffffc
    8020e40c:	5aa080e7          	jalr	1450(ra) # 8020a9b2 <uvmfree>
  __debug_warn("[exec]exec bad\n");
    8020e410:	00008517          	auipc	a0,0x8
    8020e414:	91850513          	addi	a0,a0,-1768 # 80215d28 <vma_type+0x5a0>
    8020e418:	ffffb097          	auipc	ra,0xffffb
    8020e41c:	258080e7          	jalr	600(ra) # 80209670 <__debug_warn>
  return -1;
    8020e420:	557d                	li	a0,-1
}
    8020e422:	4b813083          	ld	ra,1208(sp)
    8020e426:	4b013403          	ld	s0,1200(sp)
    8020e42a:	4a813483          	ld	s1,1192(sp)
    8020e42e:	4a013903          	ld	s2,1184(sp)
    8020e432:	49813983          	ld	s3,1176(sp)
    8020e436:	49013a03          	ld	s4,1168(sp)
    8020e43a:	48813a83          	ld	s5,1160(sp)
    8020e43e:	48013b03          	ld	s6,1152(sp)
    8020e442:	47813b83          	ld	s7,1144(sp)
    8020e446:	47013c03          	ld	s8,1136(sp)
    8020e44a:	46813c83          	ld	s9,1128(sp)
    8020e44e:	46013d03          	ld	s10,1120(sp)
    8020e452:	45813d83          	ld	s11,1112(sp)
    8020e456:	4c010113          	addi	sp,sp,1216
    8020e45a:	8082                	ret
      __debug_warn("[exec]push env string bad\n");
    8020e45c:	00008517          	auipc	a0,0x8
    8020e460:	82450513          	addi	a0,a0,-2012 # 80215c80 <vma_type+0x4f8>
    8020e464:	ffffb097          	auipc	ra,0xffffb
    8020e468:	20c080e7          	jalr	524(ra) # 80209670 <__debug_warn>
      goto bad;
    8020e46c:	bf69                	j	8020e406 <exec+0x6c2>
      __debug_warn("[exec]env address vec too long\n");
    8020e46e:	00008517          	auipc	a0,0x8
    8020e472:	83250513          	addi	a0,a0,-1998 # 80215ca0 <vma_type+0x518>
    8020e476:	ffffb097          	auipc	ra,0xffffb
    8020e47a:	1fa080e7          	jalr	506(ra) # 80209670 <__debug_warn>
      goto bad;
    8020e47e:	b761                	j	8020e406 <exec+0x6c2>
      __debug_warn("[exec]env address copy bad\n");
    8020e480:	00008517          	auipc	a0,0x8
    8020e484:	84050513          	addi	a0,a0,-1984 # 80215cc0 <vma_type+0x538>
    8020e488:	ffffb097          	auipc	ra,0xffffb
    8020e48c:	1e8080e7          	jalr	488(ra) # 80209670 <__debug_warn>
      goto bad;
    8020e490:	bf9d                	j	8020e406 <exec+0x6c2>
    __debug_warn("[exec]ustack address vec too long\n");
    8020e492:	00008517          	auipc	a0,0x8
    8020e496:	84e50513          	addi	a0,a0,-1970 # 80215ce0 <vma_type+0x558>
    8020e49a:	ffffb097          	auipc	ra,0xffffb
    8020e49e:	1d6080e7          	jalr	470(ra) # 80209670 <__debug_warn>
    goto bad;
    8020e4a2:	b795                	j	8020e406 <exec+0x6c2>
    __debug_warn("[exec]ustack address copy bad\n");
    8020e4a4:	00008517          	auipc	a0,0x8
    8020e4a8:	86450513          	addi	a0,a0,-1948 # 80215d08 <vma_type+0x580>
    8020e4ac:	ffffb097          	auipc	ra,0xffffb
    8020e4b0:	1c4080e7          	jalr	452(ra) # 80209670 <__debug_warn>
    goto bad;
    8020e4b4:	bf89                	j	8020e406 <exec+0x6c2>
  for(last=s=path; *s; s++)
    8020e4b6:	0785                	addi	a5,a5,1
    8020e4b8:	fff7c703          	lbu	a4,-1(a5)
    8020e4bc:	c711                	beqz	a4,8020e4c8 <exec+0x784>
    if(*s == '/')
    8020e4be:	fed71ce3          	bne	a4,a3,8020e4b6 <exec+0x772>
      last = s+1;
    8020e4c2:	b4f43c23          	sd	a5,-1192(s0)
    8020e4c6:	bfc5                	j	8020e4b6 <exec+0x772>
  strncpy(p->name, last, sizeof(p->name));
    8020e4c8:	4651                	li	a2,20
    8020e4ca:	b5843583          	ld	a1,-1192(s0)
    8020e4ce:	b7043983          	ld	s3,-1168(s0)
    8020e4d2:	10098513          	addi	a0,s3,256
    8020e4d6:	ffff3097          	auipc	ra,0xffff3
    8020e4da:	9b6080e7          	jalr	-1610(ra) # 80200e8c <strncpy>
  np->trapframe->sp = sp;
    8020e4de:	068bb783          	ld	a5,104(s7)
    8020e4e2:	fb84                	sd	s1,48(a5)
  np->trapframe->epc = entry;
    8020e4e4:	068bb783          	ld	a5,104(s7)
    8020e4e8:	0147bc23          	sd	s4,24(a5)
  swap(&(p->pagetable),&(np->pagetable),sizeof(p->pagetable));
    8020e4ec:	4621                	li	a2,8
    8020e4ee:	060b8593          	addi	a1,s7,96
    8020e4f2:	06098513          	addi	a0,s3,96
    8020e4f6:	fffff097          	auipc	ra,0xfffff
    8020e4fa:	632080e7          	jalr	1586(ra) # 8020db28 <swap>
  swap(&(p->vma),&(np->vma),sizeof(p->vma));
    8020e4fe:	4621                	li	a2,8
    8020e500:	170b8593          	addi	a1,s7,368
    8020e504:	17098513          	addi	a0,s3,368
    8020e508:	fffff097          	auipc	ra,0xfffff
    8020e50c:	620080e7          	jalr	1568(ra) # 8020db28 <swap>
  swap(&(p->trapframe),&(np->trapframe),sizeof(p->trapframe));
    8020e510:	4621                	li	a2,8
    8020e512:	068b8593          	addi	a1,s7,104
    8020e516:	06898513          	addi	a0,s3,104
    8020e51a:	fffff097          	auipc	ra,0xfffff
    8020e51e:	60e080e7          	jalr	1550(ra) # 8020db28 <swap>
  for(int fd = 0; fd < NOFILEMAX(p); fd++){
    8020e522:	0e09b783          	ld	a5,224(s3)
    8020e526:	04f05c63          	blez	a5,8020e57e <exec+0x83a>
    8020e52a:	4481                	li	s1,0
    8020e52c:	0c800a13          	li	s4,200
    8020e530:	a811                	j	8020e544 <exec+0x800>
    8020e532:	0485                	addi	s1,s1,1
    8020e534:	b7043783          	ld	a5,-1168(s0)
    8020e538:	73fc                	ld	a5,224(a5)
    8020e53a:	00fa5363          	bge	s4,a5,8020e540 <exec+0x7fc>
    8020e53e:	87d2                	mv	a5,s4
    8020e540:	02f4df63          	bge	s1,a5,8020e57e <exec+0x83a>
    struct file* f = p->ofile[fd];
    8020e544:	00349993          	slli	s3,s1,0x3
    8020e548:	b7043703          	ld	a4,-1168(s0)
    8020e54c:	777c                	ld	a5,232(a4)
    8020e54e:	97ce                	add	a5,a5,s3
    8020e550:	6388                	ld	a0,0(a5)
    if(f&&p->exec_close[fd]){
    8020e552:	d165                	beqz	a0,8020e532 <exec+0x7ee>
    8020e554:	00249a93          	slli	s5,s1,0x2
    8020e558:	7b7c                	ld	a5,240(a4)
    8020e55a:	97d6                	add	a5,a5,s5
    8020e55c:	439c                	lw	a5,0(a5)
    8020e55e:	dbf1                	beqz	a5,8020e532 <exec+0x7ee>
      fileclose(f);
    8020e560:	ffff8097          	auipc	ra,0xffff8
    8020e564:	d3c080e7          	jalr	-708(ra) # 8020629c <fileclose>
      p->ofile[fd] = 0;
    8020e568:	b7043703          	ld	a4,-1168(s0)
    8020e56c:	777c                	ld	a5,232(a4)
    8020e56e:	99be                	add	s3,s3,a5
    8020e570:	0009b023          	sd	zero,0(s3)
      p->exec_close[fd]=0;
    8020e574:	7b7c                	ld	a5,240(a4)
    8020e576:	9abe                	add	s5,s5,a5
    8020e578:	000aa023          	sw	zero,0(s5)
    8020e57c:	bf5d                	j	8020e532 <exec+0x7ee>
  w_satp(MAKE_SATP(p->pagetable));
    8020e57e:	b7043783          	ld	a5,-1168(s0)
    8020e582:	73bc                	ld	a5,96(a5)
    8020e584:	83b1                	srli	a5,a5,0xc
    8020e586:	577d                	li	a4,-1
    8020e588:	177e                	slli	a4,a4,0x3f
    8020e58a:	8fd9                	or	a5,a5,a4
  asm volatile("csrw satp, %0" : : "r" (x));
    8020e58c:	18079073          	csrw	satp,a5
  asm volatile("sfence.vma");
    8020e590:	12000073          	sfence.vma
  uvmfree(np);
    8020e594:	855e                	mv	a0,s7
    8020e596:	ffffc097          	auipc	ra,0xffffc
    8020e59a:	41c080e7          	jalr	1052(ra) # 8020a9b2 <uvmfree>
  return argc;
    8020e59e:	0009051b          	sext.w	a0,s2
    8020e5a2:	b541                	j	8020e422 <exec+0x6de>

000000008020e5a4 <uname_copyout>:
#else 
char const UNAME_MACHINE[] = "QEMU";
#endif 
char const UNAME_DOMAINNAME[] = "none";

int uname_copyout(uint64 addr) {
    8020e5a4:	1101                	addi	sp,sp,-32
    8020e5a6:	ec06                	sd	ra,24(sp)
    8020e5a8:	e822                	sd	s0,16(sp)
    8020e5aa:	e426                	sd	s1,8(sp)
    8020e5ac:	1000                	addi	s0,sp,32
    8020e5ae:	84aa                	mv	s1,a0
	struct utsname *user_uts = (struct utsname*)addr;

	if (either_copyout(1, (uint64)user_uts->sysname, 
    8020e5b0:	4691                	li	a3,4
    8020e5b2:	00009617          	auipc	a2,0x9
    8020e5b6:	27e60613          	addi	a2,a2,638 # 80217830 <UNAME_SYSNAME>
    8020e5ba:	85aa                	mv	a1,a0
    8020e5bc:	4505                	li	a0,1
    8020e5be:	ffffd097          	auipc	ra,0xffffd
    8020e5c2:	478080e7          	jalr	1144(ra) # 8020ba36 <either_copyout>
    8020e5c6:	08054e63          	bltz	a0,8020e662 <uname_copyout+0xbe>
			(void*)UNAME_SYSNAME, sizeof(UNAME_SYSNAME)) < 0) 
	{
		panic("uname_copyout: fail to copy sysname\n");
		return -1;
	}
	if (either_copyout(1, (uint64)user_uts->nodename, 
    8020e5ca:	4695                	li	a3,5
    8020e5cc:	00009617          	auipc	a2,0x9
    8020e5d0:	25c60613          	addi	a2,a2,604 # 80217828 <UNAME_NODENAME>
    8020e5d4:	04148593          	addi	a1,s1,65
    8020e5d8:	4505                	li	a0,1
    8020e5da:	ffffd097          	auipc	ra,0xffffd
    8020e5de:	45c080e7          	jalr	1116(ra) # 8020ba36 <either_copyout>
    8020e5e2:	08054863          	bltz	a0,8020e672 <uname_copyout+0xce>
			(void*)UNAME_NODENAME, sizeof(UNAME_NODENAME)) < 0) 
	{
		panic("uname_copyout: fail to copy nodename\n");
		return -1;
	}
	if (either_copyout(1, (uint64)user_uts->release, 
    8020e5e6:	4691                	li	a3,4
    8020e5e8:	00009617          	auipc	a2,0x9
    8020e5ec:	23860613          	addi	a2,a2,568 # 80217820 <UNAME_RELEASE>
    8020e5f0:	08248593          	addi	a1,s1,130
    8020e5f4:	4505                	li	a0,1
    8020e5f6:	ffffd097          	auipc	ra,0xffffd
    8020e5fa:	440080e7          	jalr	1088(ra) # 8020ba36 <either_copyout>
    8020e5fe:	08054263          	bltz	a0,8020e682 <uname_copyout+0xde>
			(void*)UNAME_RELEASE, sizeof(UNAME_RELEASE)) < 0) 
	{
		panic("uname_copyout: fail to copy release\n");
		return -1;
	}
	if (either_copyout(1, (uint64)user_uts->version, 
    8020e602:	46d5                	li	a3,21
    8020e604:	00008617          	auipc	a2,0x8
    8020e608:	84460613          	addi	a2,a2,-1980 # 80215e48 <UNAME_VERSION>
    8020e60c:	0c348593          	addi	a1,s1,195
    8020e610:	4505                	li	a0,1
    8020e612:	ffffd097          	auipc	ra,0xffffd
    8020e616:	424080e7          	jalr	1060(ra) # 8020ba36 <either_copyout>
    8020e61a:	06054c63          	bltz	a0,8020e692 <uname_copyout+0xee>
			(void*)UNAME_VERSION, sizeof(UNAME_VERSION)) < 0) 
	{
		panic("uname_copyout: fail to copy version\n");
		return -1;
	}
	if (either_copyout(1, (uint64)user_uts->machine, 
    8020e61e:	4695                	li	a3,5
    8020e620:	00009617          	auipc	a2,0x9
    8020e624:	1f860613          	addi	a2,a2,504 # 80217818 <UNAME_MACHINE>
    8020e628:	10448593          	addi	a1,s1,260
    8020e62c:	4505                	li	a0,1
    8020e62e:	ffffd097          	auipc	ra,0xffffd
    8020e632:	408080e7          	jalr	1032(ra) # 8020ba36 <either_copyout>
    8020e636:	06054663          	bltz	a0,8020e6a2 <uname_copyout+0xfe>
			(void*)UNAME_MACHINE, sizeof(UNAME_MACHINE)) < 0) 
	{
		panic("uname_copyout: fail to copy machine\n");
		return -1;
	}
	if (either_copyout(1, (uint64)user_uts->domainname, 
    8020e63a:	4695                	li	a3,5
    8020e63c:	00009617          	auipc	a2,0x9
    8020e640:	1d460613          	addi	a2,a2,468 # 80217810 <UNAME_DOMAINNAME>
    8020e644:	14548593          	addi	a1,s1,325
    8020e648:	4505                	li	a0,1
    8020e64a:	ffffd097          	auipc	ra,0xffffd
    8020e64e:	3ec080e7          	jalr	1004(ra) # 8020ba36 <either_copyout>
    8020e652:	06054063          	bltz	a0,8020e6b2 <uname_copyout+0x10e>
		panic("uname_copyout: fail to copy domainname\n");
		return -1;
	}

	return 0;
}
    8020e656:	4501                	li	a0,0
    8020e658:	60e2                	ld	ra,24(sp)
    8020e65a:	6442                	ld	s0,16(sp)
    8020e65c:	64a2                	ld	s1,8(sp)
    8020e65e:	6105                	addi	sp,sp,32
    8020e660:	8082                	ret
		panic("uname_copyout: fail to copy sysname\n");
    8020e662:	00007517          	auipc	a0,0x7
    8020e666:	6f650513          	addi	a0,a0,1782 # 80215d58 <vma_type+0x5d0>
    8020e66a:	ffffb097          	auipc	ra,0xffffb
    8020e66e:	be0080e7          	jalr	-1056(ra) # 8020924a <panic>
		panic("uname_copyout: fail to copy nodename\n");
    8020e672:	00007517          	auipc	a0,0x7
    8020e676:	70e50513          	addi	a0,a0,1806 # 80215d80 <vma_type+0x5f8>
    8020e67a:	ffffb097          	auipc	ra,0xffffb
    8020e67e:	bd0080e7          	jalr	-1072(ra) # 8020924a <panic>
		panic("uname_copyout: fail to copy release\n");
    8020e682:	00007517          	auipc	a0,0x7
    8020e686:	72650513          	addi	a0,a0,1830 # 80215da8 <vma_type+0x620>
    8020e68a:	ffffb097          	auipc	ra,0xffffb
    8020e68e:	bc0080e7          	jalr	-1088(ra) # 8020924a <panic>
		panic("uname_copyout: fail to copy version\n");
    8020e692:	00007517          	auipc	a0,0x7
    8020e696:	73e50513          	addi	a0,a0,1854 # 80215dd0 <vma_type+0x648>
    8020e69a:	ffffb097          	auipc	ra,0xffffb
    8020e69e:	bb0080e7          	jalr	-1104(ra) # 8020924a <panic>
		panic("uname_copyout: fail to copy machine\n");
    8020e6a2:	00007517          	auipc	a0,0x7
    8020e6a6:	75650513          	addi	a0,a0,1878 # 80215df8 <vma_type+0x670>
    8020e6aa:	ffffb097          	auipc	ra,0xffffb
    8020e6ae:	ba0080e7          	jalr	-1120(ra) # 8020924a <panic>
		panic("uname_copyout: fail to copy domainname\n");
    8020e6b2:	00007517          	auipc	a0,0x7
    8020e6b6:	76e50513          	addi	a0,a0,1902 # 80215e20 <vma_type+0x698>
    8020e6ba:	ffffb097          	auipc	ra,0xffffb
    8020e6be:	b90080e7          	jalr	-1136(ra) # 8020924a <panic>

000000008020e6c2 <fdallocfrom>:
extern struct dirent *selfexe;
// Allocate a file descriptor for the given file.
// Takes over file reference from caller on success.
int
fdallocfrom(struct file *f,int start)
{
    8020e6c2:	1101                	addi	sp,sp,-32
    8020e6c4:	ec06                	sd	ra,24(sp)
    8020e6c6:	e822                	sd	s0,16(sp)
    8020e6c8:	e426                	sd	s1,8(sp)
    8020e6ca:	e04a                	sd	s2,0(sp)
    8020e6cc:	1000                	addi	s0,sp,32
    8020e6ce:	892a                	mv	s2,a0
    8020e6d0:	84ae                	mv	s1,a1
  int fd;
  struct proc *p = myproc();
    8020e6d2:	ffffe097          	auipc	ra,0xffffe
    8020e6d6:	ce0080e7          	jalr	-800(ra) # 8020c3b2 <myproc>
  //printf("[fdalloc]filelimit:%p\n",NOFILEMAX(p));
  for(fd = start; fd < NOFILEMAX(p); fd++){
    8020e6da:	7170                	ld	a2,224(a0)
    8020e6dc:	0c800793          	li	a5,200
    8020e6e0:	00c7d463          	bge	a5,a2,8020e6e8 <fdallocfrom+0x26>
    8020e6e4:	0c800613          	li	a2,200
    8020e6e8:	02c4d863          	bge	s1,a2,8020e718 <fdallocfrom+0x56>
    8020e6ec:	8726                	mv	a4,s1
    8020e6ee:	048e                	slli	s1,s1,0x3
    8020e6f0:	757c                	ld	a5,232(a0)
    8020e6f2:	97a6                	add	a5,a5,s1
    8020e6f4:	0007051b          	sext.w	a0,a4
    if(p->ofile[fd] == 0){
    8020e6f8:	6394                	ld	a3,0(a5)
    8020e6fa:	c699                	beqz	a3,8020e708 <fdallocfrom+0x46>
  for(fd = start; fd < NOFILEMAX(p); fd++){
    8020e6fc:	0705                	addi	a4,a4,1
    8020e6fe:	07a1                	addi	a5,a5,8
    8020e700:	fec71ae3          	bne	a4,a2,8020e6f4 <fdallocfrom+0x32>
      p->ofile[fd] = f;
      return fd;
    }
  }
  return -EMFILE;
    8020e704:	5521                	li	a0,-24
    8020e706:	a019                	j	8020e70c <fdallocfrom+0x4a>
      p->ofile[fd] = f;
    8020e708:	0127b023          	sd	s2,0(a5)
}
    8020e70c:	60e2                	ld	ra,24(sp)
    8020e70e:	6442                	ld	s0,16(sp)
    8020e710:	64a2                	ld	s1,8(sp)
    8020e712:	6902                	ld	s2,0(sp)
    8020e714:	6105                	addi	sp,sp,32
    8020e716:	8082                	ret
  return -EMFILE;
    8020e718:	5521                	li	a0,-24
    8020e71a:	bfcd                	j	8020e70c <fdallocfrom+0x4a>

000000008020e71c <fdalloc>:

// Allocate a file descriptor for the given file.
// Takes over file reference from caller on success.
int
fdalloc(struct file *f)
{
    8020e71c:	1141                	addi	sp,sp,-16
    8020e71e:	e406                	sd	ra,8(sp)
    8020e720:	e022                	sd	s0,0(sp)
    8020e722:	0800                	addi	s0,sp,16
  return fdallocfrom(f,0);
    8020e724:	4581                	li	a1,0
    8020e726:	00000097          	auipc	ra,0x0
    8020e72a:	f9c080e7          	jalr	-100(ra) # 8020e6c2 <fdallocfrom>
}
    8020e72e:	60a2                	ld	ra,8(sp)
    8020e730:	6402                	ld	s0,0(sp)
    8020e732:	0141                	addi	sp,sp,16
    8020e734:	8082                	ret

000000008020e736 <sys_openat>:


uint64
sys_openat()
{
    8020e736:	7149                	addi	sp,sp,-368
    8020e738:	f686                	sd	ra,360(sp)
    8020e73a:	f2a2                	sd	s0,352(sp)
    8020e73c:	eea6                	sd	s1,344(sp)
    8020e73e:	eaca                	sd	s2,336(sp)
    8020e740:	e6ce                	sd	s3,328(sp)
    8020e742:	e2d2                	sd	s4,320(sp)
    8020e744:	fe56                	sd	s5,312(sp)
    8020e746:	1a80                	addi	s0,sp,368
  char path[FAT32_MAX_PATH];
  int dirfd, flags,mode;
  int fd ,devno = -1;
    8020e748:	57fd                	li	a5,-1
    8020e74a:	eaf42423          	sw	a5,-344(s0)
  struct file *f;
  struct file *dirf;
  struct dirent *dp = NULL;
  struct dirent *ep;
  struct proc* p = myproc();
    8020e74e:	ffffe097          	auipc	ra,0xffffe
    8020e752:	c64080e7          	jalr	-924(ra) # 8020c3b2 <myproc>
    8020e756:	89aa                	mv	s3,a0
  int err = 0;
    8020e758:	e8042e23          	sw	zero,-356(s0)
  
  argfd(0,&dirfd,&dirf);
    8020e75c:	ea040613          	addi	a2,s0,-352
    8020e760:	eb440593          	addi	a1,s0,-332
    8020e764:	4501                	li	a0,0
    8020e766:	fffff097          	auipc	ra,0xfffff
    8020e76a:	070080e7          	jalr	112(ra) # 8020d7d6 <argfd>
  if(argstr(1, path, FAT32_MAX_PATH) < 0){
    8020e76e:	10400613          	li	a2,260
    8020e772:	eb840593          	addi	a1,s0,-328
    8020e776:	4505                	li	a0,1
    8020e778:	fffff097          	auipc	ra,0xfffff
    8020e77c:	02e080e7          	jalr	46(ra) # 8020d7a6 <argstr>
    8020e780:	0e054963          	bltz	a0,8020e872 <sys_openat+0x13c>
    __debug_warn("[sys openat] open not valid path\n");
    return -1;
  }
  if(argint(2, &flags) < 0
    8020e784:	eb040593          	addi	a1,s0,-336
    8020e788:	4509                	li	a0,2
    8020e78a:	fffff097          	auipc	ra,0xfffff
    8020e78e:	fd8080e7          	jalr	-40(ra) # 8020d762 <argint>
   ||argint(3, &mode) <0 )
    return -1;
    8020e792:	57fd                	li	a5,-1
  if(argint(2, &flags) < 0
    8020e794:	22054363          	bltz	a0,8020e9ba <sys_openat+0x284>
   ||argint(3, &mode) <0 )
    8020e798:	eac40593          	addi	a1,s0,-340
    8020e79c:	450d                	li	a0,3
    8020e79e:	fffff097          	auipc	ra,0xfffff
    8020e7a2:	fc4080e7          	jalr	-60(ra) # 8020d762 <argint>
    8020e7a6:	2a054563          	bltz	a0,8020ea50 <sys_openat+0x31a>
  // __debug_warn("[sys openat]1flags:%p mode:%p path:%s\n",flags,mode,path);
  // print_vma_info(p);
  if(mode == 0){
    8020e7aa:	eac42783          	lw	a5,-340(s0)
    8020e7ae:	ef89                	bnez	a5,8020e7c8 <sys_openat+0x92>
    mode = flags&O_DIRECTORY?0777:0666;
    8020e7b0:	eb042703          	lw	a4,-336(s0)
    8020e7b4:	1ff00793          	li	a5,511
    8020e7b8:	02f71693          	slli	a3,a4,0x2f
    8020e7bc:	0006c463          	bltz	a3,8020e7c4 <sys_openat+0x8e>
    8020e7c0:	1b600793          	li	a5,438
    8020e7c4:	eaf42623          	sw	a5,-340(s0)
  }
  mode = mode & (~p->umask);
    8020e7c8:	1c09a783          	lw	a5,448(s3)
    8020e7cc:	fff7c793          	not	a5,a5
    8020e7d0:	eac42703          	lw	a4,-340(s0)
    8020e7d4:	8ff9                	and	a5,a5,a4
    8020e7d6:	eaf42623          	sw	a5,-340(s0)
  //__debug_warn("[sys openat]2flags:%p mode:%p\n",flags,mode);
  if(mode | O_RDWR){
  	flags |= O_RDWR;
    8020e7da:	eb042783          	lw	a5,-336(s0)
    8020e7de:	0027e793          	ori	a5,a5,2
    8020e7e2:	eaf42823          	sw	a5,-336(s0)
  if(flags&0x8000){
    flags|=O_CREATE;
  }
  */
  
  if(dirf&&dirf->type==FD_ENTRY){
    8020e7e6:	ea043a03          	ld	s4,-352(s0)
    8020e7ea:	000a0863          	beqz	s4,8020e7fa <sys_openat+0xc4>
    8020e7ee:	000a2703          	lw	a4,0(s4)
    8020e7f2:	4789                	li	a5,2
    8020e7f4:	08f70963          	beq	a4,a5,8020e886 <sys_openat+0x150>
  struct dirent *dp = NULL;
    8020e7f8:	4a01                	li	s4,0
    if(!(dp->attribute & ATTR_DIRECTORY)){
      eunlock(dp);
      dp = NULL;
    }
  }    
  if((ep = ename(dp,path,&devno)) == NULL){  
    8020e7fa:	ea840613          	addi	a2,s0,-344
    8020e7fe:	eb840593          	addi	a1,s0,-328
    8020e802:	8552                	mv	a0,s4
    8020e804:	ffff6097          	auipc	ra,0xffff6
    8020e808:	ca8080e7          	jalr	-856(ra) # 802044ac <ename>
    8020e80c:	84aa                	mv	s1,a0
    8020e80e:	cd51                	beqz	a0,8020e8aa <sys_openat+0x174>
      if(dp)printf("[sys openat] at directory %s\n",dp->filename);
      __debug_warn("[sys openat]dirfd:%d env path %s not found\n",dirfd,path);
      return -1;
    }
  }else{
     elock(ep);
    8020e810:	ffff5097          	auipc	ra,0xffff5
    8020e814:	25a080e7          	jalr	602(ra) # 80203a6a <elock>
  }
  int pathlen = strlen(path);
    8020e818:	eb840513          	addi	a0,s0,-328
    8020e81c:	ffff2097          	auipc	ra,0xffff2
    8020e820:	6e0080e7          	jalr	1760(ra) # 80200efc <strlen>
  if(ep==dev&&devno==-1&&strncmp(path+pathlen-3,"dev",4)){
    8020e824:	0515f797          	auipc	a5,0x515f
    8020e828:	79c7b783          	ld	a5,1948(a5) # 8536dfc0 <dev>
    8020e82c:	0e978563          	beq	a5,s1,8020e916 <sys_openat+0x1e0>
    eunlock(ep);
    __debug_warn("[sys openat] device %s don't exist\n",path);
    return -1;
  }
  if(devno==-1&&(ep->attribute & ATTR_DIRECTORY) && ( !(flags&O_WRONLY) && !(flags&O_RDWR) )){
    8020e830:	ea842703          	lw	a4,-344(s0)
    8020e834:	57fd                	li	a5,-1
    8020e836:	0ef71563          	bne	a4,a5,8020e920 <sys_openat+0x1ea>
    8020e83a:	1004c783          	lbu	a5,256(s1)
    8020e83e:	8bc1                	andi	a5,a5,16
    8020e840:	c3e5                	beqz	a5,8020e920 <sys_openat+0x1ea>
    8020e842:	eb042783          	lw	a5,-336(s0)
    8020e846:	8b8d                	andi	a5,a5,3
    8020e848:	efe1                	bnez	a5,8020e920 <sys_openat+0x1ea>
    __debug_warn("[sys openat] diretory only can be read\n");
    8020e84a:	00007517          	auipc	a0,0x7
    8020e84e:	6e650513          	addi	a0,a0,1766 # 80215f30 <UNAME_VERSION+0xe8>
    8020e852:	ffffb097          	auipc	ra,0xffffb
    8020e856:	e1e080e7          	jalr	-482(ra) # 80209670 <__debug_warn>
    eunlock(ep);
    8020e85a:	8526                	mv	a0,s1
    8020e85c:	ffff5097          	auipc	ra,0xffff5
    8020e860:	244080e7          	jalr	580(ra) # 80203aa0 <eunlock>
    eput(ep);
    8020e864:	8526                	mv	a0,s1
    8020e866:	ffff5097          	auipc	ra,0xffff5
    8020e86a:	288080e7          	jalr	648(ra) # 80203aee <eput>
    return -1;
    8020e86e:	57fd                	li	a5,-1
    8020e870:	a2a9                	j	8020e9ba <sys_openat+0x284>
    __debug_warn("[sys openat] open not valid path\n");
    8020e872:	00007517          	auipc	a0,0x7
    8020e876:	5ee50513          	addi	a0,a0,1518 # 80215e60 <UNAME_VERSION+0x18>
    8020e87a:	ffffb097          	auipc	ra,0xffffb
    8020e87e:	df6080e7          	jalr	-522(ra) # 80209670 <__debug_warn>
    return -1;
    8020e882:	57fd                	li	a5,-1
    8020e884:	aa1d                	j	8020e9ba <sys_openat+0x284>
    dp = dirf->ep;
    8020e886:	028a3a03          	ld	s4,40(s4)
    elock(dp);
    8020e88a:	8552                	mv	a0,s4
    8020e88c:	ffff5097          	auipc	ra,0xffff5
    8020e890:	1de080e7          	jalr	478(ra) # 80203a6a <elock>
    if(!(dp->attribute & ATTR_DIRECTORY)){
    8020e894:	100a4783          	lbu	a5,256(s4)
    8020e898:	8bc1                	andi	a5,a5,16
    8020e89a:	f3a5                	bnez	a5,8020e7fa <sys_openat+0xc4>
      eunlock(dp);
    8020e89c:	8552                	mv	a0,s4
    8020e89e:	ffff5097          	auipc	ra,0xffff5
    8020e8a2:	202080e7          	jalr	514(ra) # 80203aa0 <eunlock>
      dp = NULL;
    8020e8a6:	4a01                	li	s4,0
    8020e8a8:	bf89                	j	8020e7fa <sys_openat+0xc4>
    if(flags & O_CREATE){
    8020e8aa:	eb042683          	lw	a3,-336(s0)
    8020e8ae:	0406f793          	andi	a5,a3,64
    8020e8b2:	eb95                	bnez	a5,8020e8e6 <sys_openat+0x1b0>
      if(dp)printf("[sys openat] at directory %s\n",dp->filename);
    8020e8b4:	000a0b63          	beqz	s4,8020e8ca <sys_openat+0x194>
    8020e8b8:	85d2                	mv	a1,s4
    8020e8ba:	00007517          	auipc	a0,0x7
    8020e8be:	5f650513          	addi	a0,a0,1526 # 80215eb0 <UNAME_VERSION+0x68>
    8020e8c2:	ffffb097          	auipc	ra,0xffffb
    8020e8c6:	9d2080e7          	jalr	-1582(ra) # 80209294 <printf>
      __debug_warn("[sys openat]dirfd:%d env path %s not found\n",dirfd,path);
    8020e8ca:	eb840613          	addi	a2,s0,-328
    8020e8ce:	eb442583          	lw	a1,-332(s0)
    8020e8d2:	00007517          	auipc	a0,0x7
    8020e8d6:	5fe50513          	addi	a0,a0,1534 # 80215ed0 <UNAME_VERSION+0x88>
    8020e8da:	ffffb097          	auipc	ra,0xffffb
    8020e8de:	d96080e7          	jalr	-618(ra) # 80209670 <__debug_warn>
      return -1;
    8020e8e2:	57fd                	li	a5,-1
    8020e8e4:	a8d9                	j	8020e9ba <sys_openat+0x284>
      ep = create(dp,path, T_FILE, flags, &err);
    8020e8e6:	e9c40713          	addi	a4,s0,-356
    8020e8ea:	4609                	li	a2,2
    8020e8ec:	eb840593          	addi	a1,s0,-328
    8020e8f0:	8552                	mv	a0,s4
    8020e8f2:	ffff6097          	auipc	ra,0xffff6
    8020e8f6:	cbc080e7          	jalr	-836(ra) # 802045ae <create>
    8020e8fa:	84aa                	mv	s1,a0
      if(ep == NULL){
    8020e8fc:	fd11                	bnez	a0,8020e818 <sys_openat+0xe2>
        __debug_warn("[sys openat] create file %s failed\n",path);
    8020e8fe:	eb840593          	addi	a1,s0,-328
    8020e902:	00007517          	auipc	a0,0x7
    8020e906:	58650513          	addi	a0,a0,1414 # 80215e88 <UNAME_VERSION+0x40>
    8020e90a:	ffffb097          	auipc	ra,0xffffb
    8020e90e:	d66080e7          	jalr	-666(ra) # 80209670 <__debug_warn>
        return -1;
    8020e912:	57fd                	li	a5,-1
    8020e914:	a05d                	j	8020e9ba <sys_openat+0x284>
  if(ep==dev&&devno==-1&&strncmp(path+pathlen-3,"dev",4)){
    8020e916:	ea842703          	lw	a4,-344(s0)
    8020e91a:	57fd                	li	a5,-1
    8020e91c:	0af70963          	beq	a4,a5,8020e9ce <sys_openat+0x298>
  }


  if((f = filealloc()) == NULL || (fd = fdalloc(f)) < 0){
    8020e920:	ffff8097          	auipc	ra,0xffff8
    8020e924:	8e4080e7          	jalr	-1820(ra) # 80206204 <filealloc>
    8020e928:	892a                	mv	s2,a0
    8020e92a:	12050a63          	beqz	a0,8020ea5e <sys_openat+0x328>
    8020e92e:	00000097          	auipc	ra,0x0
    8020e932:	dee080e7          	jalr	-530(ra) # 8020e71c <fdalloc>
    8020e936:	8aaa                	mv	s5,a0
    8020e938:	10054e63          	bltz	a0,8020ea54 <sys_openat+0x31e>
    eunlock(ep);
    eput(ep);
    return -EMFILE;
  }

  if(ep!=dev && !(ep->attribute & ATTR_DIRECTORY) && (flags & O_TRUNC)){
    8020e93c:	0515f797          	auipc	a5,0x515f
    8020e940:	6847b783          	ld	a5,1668(a5) # 8536dfc0 <dev>
    8020e944:	00978b63          	beq	a5,s1,8020e95a <sys_openat+0x224>
    8020e948:	1004c783          	lbu	a5,256(s1)
    8020e94c:	8bc1                	andi	a5,a5,16
    8020e94e:	e791                	bnez	a5,8020e95a <sys_openat+0x224>
    8020e950:	eb042783          	lw	a5,-336(s0)
    8020e954:	2007f793          	andi	a5,a5,512
    8020e958:	efc5                	bnez	a5,8020ea10 <sys_openat+0x2da>
    etrunc(ep);
  }
  if(devno ==-1){
    8020e95a:	ea842703          	lw	a4,-344(s0)
    8020e95e:	57fd                	li	a5,-1
    8020e960:	0af70e63          	beq	a4,a5,8020ea1c <sys_openat+0x2e6>
    f->off = (flags & O_APPEND) ? ep->file_size : 0;
    f->ep = ep;
    f->readable = !(flags & O_WRONLY);
    f->writable = (flags & O_WRONLY) || (flags & O_RDWR);
  }else{
    f->type = FD_DEVICE;
    8020e964:	478d                	li	a5,3
    8020e966:	00f92023          	sw	a5,0(s2)
    f->off = 0;
    8020e96a:	04093423          	sd	zero,72(s2)
    f->ep = NULL;  
    8020e96e:	02093423          	sd	zero,40(s2)
    f->major = devno;
    8020e972:	ea842783          	lw	a5,-344(s0)
    8020e976:	04f91823          	sh	a5,80(s2)
    f->readable = !(flags & O_WRONLY);
    8020e97a:	eb042783          	lw	a5,-336(s0)
    8020e97e:	0017c713          	xori	a4,a5,1
    8020e982:	8b05                	andi	a4,a4,1
    8020e984:	00e90423          	sb	a4,8(s2)
    f->writable = (flags & O_WRONLY) || (flags & O_RDWR);
    8020e988:	8b8d                	andi	a5,a5,3
    8020e98a:	00f037b3          	snez	a5,a5
    8020e98e:	00f904a3          	sb	a5,9(s2)
  }
  eunlock(ep);
    8020e992:	8526                	mv	a0,s1
    8020e994:	ffff5097          	auipc	ra,0xffff5
    8020e998:	10c080e7          	jalr	268(ra) # 80203aa0 <eunlock>
  if(dp){
    8020e99c:	000a0763          	beqz	s4,8020e9aa <sys_openat+0x274>
    elock(dp);  
    8020e9a0:	8552                	mv	a0,s4
    8020e9a2:	ffff5097          	auipc	ra,0xffff5
    8020e9a6:	0c8080e7          	jalr	200(ra) # 80203a6a <elock>
  }
  p->exec_close[fd] = 0;
    8020e9aa:	87d6                	mv	a5,s5
    8020e9ac:	0f09b703          	ld	a4,240(s3)
    8020e9b0:	002a9513          	slli	a0,s5,0x2
    8020e9b4:	953a                	add	a0,a0,a4
    8020e9b6:	00052023          	sw	zero,0(a0)
  // __debug_warn("[sys openat] fd:%d openat:%s\n",fd,path);
  return fd;
}
    8020e9ba:	853e                	mv	a0,a5
    8020e9bc:	70b6                	ld	ra,360(sp)
    8020e9be:	7416                	ld	s0,352(sp)
    8020e9c0:	64f6                	ld	s1,344(sp)
    8020e9c2:	6956                	ld	s2,336(sp)
    8020e9c4:	69b6                	ld	s3,328(sp)
    8020e9c6:	6a16                	ld	s4,320(sp)
    8020e9c8:	7af2                	ld	s5,312(sp)
    8020e9ca:	6175                	addi	sp,sp,368
    8020e9cc:	8082                	ret
  if(ep==dev&&devno==-1&&strncmp(path+pathlen-3,"dev",4)){
    8020e9ce:	fc040793          	addi	a5,s0,-64
    8020e9d2:	953e                	add	a0,a0,a5
    8020e9d4:	4611                	li	a2,4
    8020e9d6:	00007597          	auipc	a1,0x7
    8020e9da:	52a58593          	addi	a1,a1,1322 # 80215f00 <UNAME_VERSION+0xb8>
    8020e9de:	ef550513          	addi	a0,a0,-267
    8020e9e2:	ffff2097          	auipc	ra,0xffff2
    8020e9e6:	46e080e7          	jalr	1134(ra) # 80200e50 <strncmp>
    8020e9ea:	e40503e3          	beqz	a0,8020e830 <sys_openat+0xfa>
    eunlock(ep);
    8020e9ee:	8526                	mv	a0,s1
    8020e9f0:	ffff5097          	auipc	ra,0xffff5
    8020e9f4:	0b0080e7          	jalr	176(ra) # 80203aa0 <eunlock>
    __debug_warn("[sys openat] device %s don't exist\n",path);
    8020e9f8:	eb840593          	addi	a1,s0,-328
    8020e9fc:	00007517          	auipc	a0,0x7
    8020ea00:	50c50513          	addi	a0,a0,1292 # 80215f08 <UNAME_VERSION+0xc0>
    8020ea04:	ffffb097          	auipc	ra,0xffffb
    8020ea08:	c6c080e7          	jalr	-916(ra) # 80209670 <__debug_warn>
    return -1;
    8020ea0c:	57fd                	li	a5,-1
    8020ea0e:	b775                	j	8020e9ba <sys_openat+0x284>
    etrunc(ep);
    8020ea10:	8526                	mv	a0,s1
    8020ea12:	ffff5097          	auipc	ra,0xffff5
    8020ea16:	fce080e7          	jalr	-50(ra) # 802039e0 <etrunc>
    8020ea1a:	b781                	j	8020e95a <sys_openat+0x224>
    f->type = FD_ENTRY;
    8020ea1c:	4789                	li	a5,2
    8020ea1e:	00f92023          	sw	a5,0(s2)
    f->off = (flags & O_APPEND) ? ep->file_size : 0;
    8020ea22:	eb042783          	lw	a5,-336(s0)
    8020ea26:	4007f693          	andi	a3,a5,1024
    8020ea2a:	4701                	li	a4,0
    8020ea2c:	c299                	beqz	a3,8020ea32 <sys_openat+0x2fc>
    8020ea2e:	1084e703          	lwu	a4,264(s1)
    8020ea32:	04e93423          	sd	a4,72(s2)
    f->ep = ep;
    8020ea36:	02993423          	sd	s1,40(s2)
    f->readable = !(flags & O_WRONLY);
    8020ea3a:	0017c713          	xori	a4,a5,1
    8020ea3e:	8b05                	andi	a4,a4,1
    8020ea40:	00e90423          	sb	a4,8(s2)
    f->writable = (flags & O_WRONLY) || (flags & O_RDWR);
    8020ea44:	8b8d                	andi	a5,a5,3
    8020ea46:	00f037b3          	snez	a5,a5
    8020ea4a:	00f904a3          	sb	a5,9(s2)
    8020ea4e:	b791                	j	8020e992 <sys_openat+0x25c>
    return -1;
    8020ea50:	57fd                	li	a5,-1
    8020ea52:	b7a5                	j	8020e9ba <sys_openat+0x284>
      fileclose(f);
    8020ea54:	854a                	mv	a0,s2
    8020ea56:	ffff8097          	auipc	ra,0xffff8
    8020ea5a:	846080e7          	jalr	-1978(ra) # 8020629c <fileclose>
    __debug_warn("file alloc failed\n");
    8020ea5e:	00007517          	auipc	a0,0x7
    8020ea62:	4fa50513          	addi	a0,a0,1274 # 80215f58 <UNAME_VERSION+0x110>
    8020ea66:	ffffb097          	auipc	ra,0xffffb
    8020ea6a:	c0a080e7          	jalr	-1014(ra) # 80209670 <__debug_warn>
    eunlock(ep);
    8020ea6e:	8526                	mv	a0,s1
    8020ea70:	ffff5097          	auipc	ra,0xffff5
    8020ea74:	030080e7          	jalr	48(ra) # 80203aa0 <eunlock>
    eput(ep);
    8020ea78:	8526                	mv	a0,s1
    8020ea7a:	ffff5097          	auipc	ra,0xffff5
    8020ea7e:	074080e7          	jalr	116(ra) # 80203aee <eput>
    return -EMFILE;
    8020ea82:	57a1                	li	a5,-24
    8020ea84:	bf1d                	j	8020e9ba <sys_openat+0x284>

000000008020ea86 <sys_mkdirat>:

uint64
sys_mkdirat(void)
{
    8020ea86:	7129                	addi	sp,sp,-320
    8020ea88:	fe06                	sd	ra,312(sp)
    8020ea8a:	fa22                	sd	s0,304(sp)
    8020ea8c:	f626                	sd	s1,296(sp)
    8020ea8e:	f24a                	sd	s2,288(sp)
    8020ea90:	0280                	addi	s0,sp,320
  char path[FAT32_MAX_PATH];
  struct dirent *ep, *dp = NULL;
  struct file *fp;
  int dirfd;
  int mode;
  int err = 0;
    8020ea92:	ec042223          	sw	zero,-316(s0)
  struct proc* p = myproc();
    8020ea96:	ffffe097          	auipc	ra,0xffffe
    8020ea9a:	91c080e7          	jalr	-1764(ra) # 8020c3b2 <myproc>
    8020ea9e:	84aa                	mv	s1,a0
  if((argfd(0, &dirfd, &fp) < 0)){
    8020eaa0:	ed040613          	addi	a2,s0,-304
    8020eaa4:	ecc40593          	addi	a1,s0,-308
    8020eaa8:	4501                	li	a0,0
    8020eaaa:	fffff097          	auipc	ra,0xfffff
    8020eaae:	d2c080e7          	jalr	-724(ra) # 8020d7d6 <argfd>
    8020eab2:	0a054063          	bltz	a0,8020eb52 <sys_mkdirat+0xcc>
    }
    dp = p->cwd;
  }
  else
  {
    dp = fp->ep;
    8020eab6:	ed043783          	ld	a5,-304(s0)
    8020eaba:	0287b903          	ld	s2,40(a5)
  }
  
  if(argstr(1, path, FAT32_MAX_PATH) < 0)
    8020eabe:	10400613          	li	a2,260
    8020eac2:	ed840593          	addi	a1,s0,-296
    8020eac6:	4505                	li	a0,1
    8020eac8:	fffff097          	auipc	ra,0xfffff
    8020eacc:	cde080e7          	jalr	-802(ra) # 8020d7a6 <argstr>
    8020ead0:	87aa                	mv	a5,a0
  {
    return -ENAMETOOLONG;
    8020ead2:	fdc00513          	li	a0,-36
  if(argstr(1, path, FAT32_MAX_PATH) < 0)
    8020ead6:	0607c863          	bltz	a5,8020eb46 <sys_mkdirat+0xc0>
  }
  
  if(argint(2, &mode) < 0)
    8020eada:	ec840593          	addi	a1,s0,-312
    8020eade:	4509                	li	a0,2
    8020eae0:	fffff097          	auipc	ra,0xfffff
    8020eae4:	c82080e7          	jalr	-894(ra) # 8020d762 <argint>
    8020eae8:	0a054a63          	bltz	a0,8020eb9c <sys_mkdirat+0x116>
  {
    return -ENAMETOOLONG;
  }
  if(p->umask == 0){
    8020eaec:	1c04a783          	lw	a5,448(s1)
    8020eaf0:	cf81                	beqz	a5,8020eb08 <sys_mkdirat+0x82>

  }
  else if((mode&p->umask)==p->umask){
    8020eaf2:	ec842703          	lw	a4,-312(s0)
    8020eaf6:	00e7f6b3          	and	a3,a5,a4
    mode = mode - p->umask;
  }
  else{
    return -1;
    8020eafa:	557d                	li	a0,-1
  else if((mode&p->umask)==p->umask){
    8020eafc:	04d79563          	bne	a5,a3,8020eb46 <sys_mkdirat+0xc0>
    mode = mode - p->umask;
    8020eb00:	40f707bb          	subw	a5,a4,a5
    8020eb04:	ecf42423          	sw	a5,-312(s0)
  }
  //__debug_info("[sys_mkdirat] create %s, dirfd = %d, mode = %p\n", path, dirfd, mode);
  
  if((ep = create(dp, path, T_DIR, (mode & ~S_IFMT) | S_IFDIR, &err)) == NULL)
    8020eb08:	ec842683          	lw	a3,-312(s0)
    8020eb0c:	77c5                	lui	a5,0xffff1
    8020eb0e:	17fd                	addi	a5,a5,-1
    8020eb10:	8efd                	and	a3,a3,a5
    8020eb12:	6791                	lui	a5,0x4
    8020eb14:	8edd                	or	a3,a3,a5
    8020eb16:	ec440713          	addi	a4,s0,-316
    8020eb1a:	2681                	sext.w	a3,a3
    8020eb1c:	4605                	li	a2,1
    8020eb1e:	ed840593          	addi	a1,s0,-296
    8020eb22:	854a                	mv	a0,s2
    8020eb24:	ffff6097          	auipc	ra,0xffff6
    8020eb28:	a8a080e7          	jalr	-1398(ra) # 802045ae <create>
    8020eb2c:	84aa                	mv	s1,a0
    8020eb2e:	c939                	beqz	a0,8020eb84 <sys_mkdirat+0xfe>
    __debug_warn("[sys_mkdirat] create %s failed\n", path);
    return -EINVAL;
  }
  
  //__debug_info("[sys_mkdirat] create %s ing......\n", path);
  eunlock(ep);
    8020eb30:	ffff5097          	auipc	ra,0xffff5
    8020eb34:	f70080e7          	jalr	-144(ra) # 80203aa0 <eunlock>
  eput(ep);
    8020eb38:	8526                	mv	a0,s1
    8020eb3a:	ffff5097          	auipc	ra,0xffff5
    8020eb3e:	fb4080e7          	jalr	-76(ra) # 80203aee <eput>
  return err;
    8020eb42:	ec442503          	lw	a0,-316(s0)
}
    8020eb46:	70f2                	ld	ra,312(sp)
    8020eb48:	7452                	ld	s0,304(sp)
    8020eb4a:	74b2                	ld	s1,296(sp)
    8020eb4c:	7912                	ld	s2,288(sp)
    8020eb4e:	6131                	addi	sp,sp,320
    8020eb50:	8082                	ret
    if(path[0] != '/' && dirfd != AT_FDCWD)
    8020eb52:	ed844703          	lbu	a4,-296(s0)
    8020eb56:	02f00793          	li	a5,47
    8020eb5a:	00f70863          	beq	a4,a5,8020eb6a <sys_mkdirat+0xe4>
    8020eb5e:	ecc42703          	lw	a4,-308(s0)
    8020eb62:	f9c00793          	li	a5,-100
    8020eb66:	00f71563          	bne	a4,a5,8020eb70 <sys_mkdirat+0xea>
    dp = p->cwd;
    8020eb6a:	0f84b903          	ld	s2,248(s1)
    8020eb6e:	bf81                	j	8020eabe <sys_mkdirat+0x38>
      __debug_warn("[sys_mkdirat] wrong dirfd\n");
    8020eb70:	00007517          	auipc	a0,0x7
    8020eb74:	40050513          	addi	a0,a0,1024 # 80215f70 <UNAME_VERSION+0x128>
    8020eb78:	ffffb097          	auipc	ra,0xffffb
    8020eb7c:	af8080e7          	jalr	-1288(ra) # 80209670 <__debug_warn>
      return -EBADF;
    8020eb80:	555d                	li	a0,-9
    8020eb82:	b7d1                	j	8020eb46 <sys_mkdirat+0xc0>
    __debug_warn("[sys_mkdirat] create %s failed\n", path);
    8020eb84:	ed840593          	addi	a1,s0,-296
    8020eb88:	00007517          	auipc	a0,0x7
    8020eb8c:	40850513          	addi	a0,a0,1032 # 80215f90 <UNAME_VERSION+0x148>
    8020eb90:	ffffb097          	auipc	ra,0xffffb
    8020eb94:	ae0080e7          	jalr	-1312(ra) # 80209670 <__debug_warn>
    return -EINVAL;
    8020eb98:	5529                	li	a0,-22
    8020eb9a:	b775                	j	8020eb46 <sys_mkdirat+0xc0>
    return -ENAMETOOLONG;
    8020eb9c:	fdc00513          	li	a0,-36
    8020eba0:	b75d                	j	8020eb46 <sys_mkdirat+0xc0>

000000008020eba2 <sys_dup>:



uint64
sys_dup()
{
    8020eba2:	7179                	addi	sp,sp,-48
    8020eba4:	f406                	sd	ra,40(sp)
    8020eba6:	f022                	sd	s0,32(sp)
    8020eba8:	ec26                	sd	s1,24(sp)
    8020ebaa:	1800                	addi	s0,sp,48
  
  struct file *f;
  int fd;
  if(argfd(0, 0, &f) < 0){
    8020ebac:	fd840613          	addi	a2,s0,-40
    8020ebb0:	4581                	li	a1,0
    8020ebb2:	4501                	li	a0,0
    8020ebb4:	fffff097          	auipc	ra,0xfffff
    8020ebb8:	c22080e7          	jalr	-990(ra) # 8020d7d6 <argfd>
    8020ebbc:	87aa                	mv	a5,a0
    return -1;
    8020ebbe:	557d                	li	a0,-1
  if(argfd(0, 0, &f) < 0){
    8020ebc0:	0207c263          	bltz	a5,8020ebe4 <sys_dup+0x42>
  }
  if((fd=fdalloc(f)) < 0){
    8020ebc4:	fd843503          	ld	a0,-40(s0)
    8020ebc8:	00000097          	auipc	ra,0x0
    8020ebcc:	b54080e7          	jalr	-1196(ra) # 8020e71c <fdalloc>
    8020ebd0:	84aa                	mv	s1,a0
    8020ebd2:	00054963          	bltz	a0,8020ebe4 <sys_dup+0x42>
    return fd;
  }
  filedup(f);
    8020ebd6:	fd843503          	ld	a0,-40(s0)
    8020ebda:	ffff7097          	auipc	ra,0xffff7
    8020ebde:	674080e7          	jalr	1652(ra) # 8020624e <filedup>
  //printf("[dup]ret %d\n",fd);
  return fd;
    8020ebe2:	8526                	mv	a0,s1
}
    8020ebe4:	70a2                	ld	ra,40(sp)
    8020ebe6:	7402                	ld	s0,32(sp)
    8020ebe8:	64e2                	ld	s1,24(sp)
    8020ebea:	6145                	addi	sp,sp,48
    8020ebec:	8082                	ret

000000008020ebee <sys_dup3>:


uint64
sys_dup3(void)
{
    8020ebee:	7179                	addi	sp,sp,-48
    8020ebf0:	f406                	sd	ra,40(sp)
    8020ebf2:	f022                	sd	s0,32(sp)
    8020ebf4:	ec26                	sd	s1,24(sp)
    8020ebf6:	1800                	addi	s0,sp,48
  struct file *f;
  int newfd;
  struct proc* p = myproc();
    8020ebf8:	ffffd097          	auipc	ra,0xffffd
    8020ebfc:	7ba080e7          	jalr	1978(ra) # 8020c3b2 <myproc>
    8020ec00:	84aa                	mv	s1,a0
  if(argfd(0, 0, &f) < 0) 
    8020ec02:	fd840613          	addi	a2,s0,-40
    8020ec06:	4581                	li	a1,0
    8020ec08:	4501                	li	a0,0
    8020ec0a:	fffff097          	auipc	ra,0xfffff
    8020ec0e:	bcc080e7          	jalr	-1076(ra) # 8020d7d6 <argfd>
    return -1;
    8020ec12:	57fd                	li	a5,-1
  if(argfd(0, 0, &f) < 0) 
    8020ec14:	04054863          	bltz	a0,8020ec64 <sys_dup3+0x76>
  if(argint(1, &newfd) < 0 || newfd < 0)
    8020ec18:	fd440593          	addi	a1,s0,-44
    8020ec1c:	4505                	li	a0,1
    8020ec1e:	fffff097          	auipc	ra,0xfffff
    8020ec22:	b44080e7          	jalr	-1212(ra) # 8020d762 <argint>
    8020ec26:	04054563          	bltz	a0,8020ec70 <sys_dup3+0x82>
    8020ec2a:	fd442703          	lw	a4,-44(s0)
    8020ec2e:	04074363          	bltz	a4,8020ec74 <sys_dup3+0x86>
    return -1;
  if(newfd >= NOFILEMAX(p)){
    8020ec32:	70f4                	ld	a3,224(s1)
    8020ec34:	0c800793          	li	a5,200
    8020ec38:	00d7d463          	bge	a5,a3,8020ec40 <sys_dup3+0x52>
    8020ec3c:	0c800693          	li	a3,200
    return -EMFILE;
    8020ec40:	57a1                	li	a5,-24
  if(newfd >= NOFILEMAX(p)){
    8020ec42:	02d75163          	bge	a4,a3,8020ec64 <sys_dup3+0x76>
  }
  if(p->ofile[newfd] != f) 
    8020ec46:	070e                	slli	a4,a4,0x3
    8020ec48:	74e4                	ld	s1,232(s1)
    8020ec4a:	94ba                	add	s1,s1,a4
    8020ec4c:	fd843503          	ld	a0,-40(s0)
    8020ec50:	609c                	ld	a5,0(s1)
    8020ec52:	00a78763          	beq	a5,a0,8020ec60 <sys_dup3+0x72>
  {
    p->ofile[newfd] = filedup(f);
    8020ec56:	ffff7097          	auipc	ra,0xffff7
    8020ec5a:	5f8080e7          	jalr	1528(ra) # 8020624e <filedup>
    8020ec5e:	e088                	sd	a0,0(s1)
  }
  return newfd;
    8020ec60:	fd442783          	lw	a5,-44(s0)
}
    8020ec64:	853e                	mv	a0,a5
    8020ec66:	70a2                	ld	ra,40(sp)
    8020ec68:	7402                	ld	s0,32(sp)
    8020ec6a:	64e2                	ld	s1,24(sp)
    8020ec6c:	6145                	addi	sp,sp,48
    8020ec6e:	8082                	ret
    return -1;
    8020ec70:	57fd                	li	a5,-1
    8020ec72:	bfcd                	j	8020ec64 <sys_dup3+0x76>
    8020ec74:	57fd                	li	a5,-1
    8020ec76:	b7fd                	j	8020ec64 <sys_dup3+0x76>

000000008020ec78 <sys_read>:

uint64
sys_read(void)
{
    8020ec78:	7179                	addi	sp,sp,-48
    8020ec7a:	f406                	sd	ra,40(sp)
    8020ec7c:	f022                	sd	s0,32(sp)
    8020ec7e:	1800                	addi	s0,sp,48
  struct file *f;
  int n,fd;
  uint64 p;
  if(argfd(0, &fd, &f) < 0 || argint(2, &n) < 0 || argaddr(1, &p) < 0)
    8020ec80:	fe840613          	addi	a2,s0,-24
    8020ec84:	fe040593          	addi	a1,s0,-32
    8020ec88:	4501                	li	a0,0
    8020ec8a:	fffff097          	auipc	ra,0xfffff
    8020ec8e:	b4c080e7          	jalr	-1204(ra) # 8020d7d6 <argfd>
    return -1;
    8020ec92:	57fd                	li	a5,-1
  if(argfd(0, &fd, &f) < 0 || argint(2, &n) < 0 || argaddr(1, &p) < 0)
    8020ec94:	04054163          	bltz	a0,8020ecd6 <sys_read+0x5e>
    8020ec98:	fe440593          	addi	a1,s0,-28
    8020ec9c:	4509                	li	a0,2
    8020ec9e:	fffff097          	auipc	ra,0xfffff
    8020eca2:	ac4080e7          	jalr	-1340(ra) # 8020d762 <argint>
    return -1;
    8020eca6:	57fd                	li	a5,-1
  if(argfd(0, &fd, &f) < 0 || argint(2, &n) < 0 || argaddr(1, &p) < 0)
    8020eca8:	02054763          	bltz	a0,8020ecd6 <sys_read+0x5e>
    8020ecac:	fd840593          	addi	a1,s0,-40
    8020ecb0:	4505                	li	a0,1
    8020ecb2:	fffff097          	auipc	ra,0xfffff
    8020ecb6:	ad2080e7          	jalr	-1326(ra) # 8020d784 <argaddr>
    return -1;
    8020ecba:	57fd                	li	a5,-1
  if(argfd(0, &fd, &f) < 0 || argint(2, &n) < 0 || argaddr(1, &p) < 0)
    8020ecbc:	00054d63          	bltz	a0,8020ecd6 <sys_read+0x5e>
  
  //printf("[sys read]fd:%d n:%d addr:%p\n",fd,n,p);
  
  return fileread(f, p, n);
    8020ecc0:	fe442603          	lw	a2,-28(s0)
    8020ecc4:	fd843583          	ld	a1,-40(s0)
    8020ecc8:	fe843503          	ld	a0,-24(s0)
    8020eccc:	ffff8097          	auipc	ra,0xffff8
    8020ecd0:	b1a080e7          	jalr	-1254(ra) # 802067e6 <fileread>
    8020ecd4:	87aa                	mv	a5,a0
}
    8020ecd6:	853e                	mv	a0,a5
    8020ecd8:	70a2                	ld	ra,40(sp)
    8020ecda:	7402                	ld	s0,32(sp)
    8020ecdc:	6145                	addi	sp,sp,48
    8020ecde:	8082                	ret

000000008020ece0 <sys_write>:



uint64
sys_write(void)
{
    8020ece0:	7179                	addi	sp,sp,-48
    8020ece2:	f406                	sd	ra,40(sp)
    8020ece4:	f022                	sd	s0,32(sp)
    8020ece6:	1800                	addi	s0,sp,48
  int fd;
  struct file *f;
  int n;
  uint64 p;
  if(argfd(0, &fd, &f) < 0 || argint(2, &n) < 0 || argaddr(1, &p) < 0){
    8020ece8:	fe040613          	addi	a2,s0,-32
    8020ecec:	fec40593          	addi	a1,s0,-20
    8020ecf0:	4501                	li	a0,0
    8020ecf2:	fffff097          	auipc	ra,0xfffff
    8020ecf6:	ae4080e7          	jalr	-1308(ra) # 8020d7d6 <argfd>
    return -1;
    8020ecfa:	57fd                	li	a5,-1
  if(argfd(0, &fd, &f) < 0 || argint(2, &n) < 0 || argaddr(1, &p) < 0){
    8020ecfc:	04054163          	bltz	a0,8020ed3e <sys_write+0x5e>
    8020ed00:	fdc40593          	addi	a1,s0,-36
    8020ed04:	4509                	li	a0,2
    8020ed06:	fffff097          	auipc	ra,0xfffff
    8020ed0a:	a5c080e7          	jalr	-1444(ra) # 8020d762 <argint>
    return -1;
    8020ed0e:	57fd                	li	a5,-1
  if(argfd(0, &fd, &f) < 0 || argint(2, &n) < 0 || argaddr(1, &p) < 0){
    8020ed10:	02054763          	bltz	a0,8020ed3e <sys_write+0x5e>
    8020ed14:	fd040593          	addi	a1,s0,-48
    8020ed18:	4505                	li	a0,1
    8020ed1a:	fffff097          	auipc	ra,0xfffff
    8020ed1e:	a6a080e7          	jalr	-1430(ra) # 8020d784 <argaddr>
    return -1;
    8020ed22:	57fd                	li	a5,-1
  if(argfd(0, &fd, &f) < 0 || argint(2, &n) < 0 || argaddr(1, &p) < 0){
    8020ed24:	00054d63          	bltz	a0,8020ed3e <sys_write+0x5e>
  }

  //__debug_info("[sys_write] fd=%d, n=%p, p=%p\n", fd, n, p);
  return filewrite(f, p, n);
    8020ed28:	fdc42603          	lw	a2,-36(s0)
    8020ed2c:	fd043583          	ld	a1,-48(s0)
    8020ed30:	fe043503          	ld	a0,-32(s0)
    8020ed34:	ffff8097          	auipc	ra,0xffff8
    8020ed38:	c04080e7          	jalr	-1020(ra) # 80206938 <filewrite>
    8020ed3c:	87aa                	mv	a5,a0
}
    8020ed3e:	853e                	mv	a0,a5
    8020ed40:	70a2                	ld	ra,40(sp)
    8020ed42:	7402                	ld	s0,32(sp)
    8020ed44:	6145                	addi	sp,sp,48
    8020ed46:	8082                	ret

000000008020ed48 <sys_readv>:


uint64 
sys_readv(void){
    8020ed48:	711d                	addi	sp,sp,-96
    8020ed4a:	ec86                	sd	ra,88(sp)
    8020ed4c:	e8a2                	sd	s0,80(sp)
    8020ed4e:	e4a6                	sd	s1,72(sp)
    8020ed50:	e0ca                	sd	s2,64(sp)
    8020ed52:	fc4e                	sd	s3,56(sp)
    8020ed54:	1080                	addi	s0,sp,96
  int fd;
  struct file* f;
  uint64 iov;
  int iovcnt;
  int totlen = 0;
  if(argfd(0, &fd, &f) < 0)
    8020ed56:	fc040613          	addi	a2,s0,-64
    8020ed5a:	fcc40593          	addi	a1,s0,-52
    8020ed5e:	4501                	li	a0,0
    8020ed60:	fffff097          	auipc	ra,0xfffff
    8020ed64:	a76080e7          	jalr	-1418(ra) # 8020d7d6 <argfd>
  {
    return -1;
    8020ed68:	597d                	li	s2,-1
  if(argfd(0, &fd, &f) < 0)
    8020ed6a:	08054463          	bltz	a0,8020edf2 <sys_readv+0xaa>
  }
  if(argaddr(1, &iov) < 0)
    8020ed6e:	fb840593          	addi	a1,s0,-72
    8020ed72:	4505                	li	a0,1
    8020ed74:	fffff097          	auipc	ra,0xfffff
    8020ed78:	a10080e7          	jalr	-1520(ra) # 8020d784 <argaddr>
    8020ed7c:	06054b63          	bltz	a0,8020edf2 <sys_readv+0xaa>
  {
    return -1;
  }
  if(argint(2, &iovcnt) < 0)
    8020ed80:	fb440593          	addi	a1,s0,-76
    8020ed84:	4509                	li	a0,2
    8020ed86:	fffff097          	auipc	ra,0xfffff
    8020ed8a:	9dc080e7          	jalr	-1572(ra) # 8020d762 <argint>
    8020ed8e:	06054263          	bltz	a0,8020edf2 <sys_readv+0xaa>
  {
    return -1;
  }
  struct proc* p = myproc();
    8020ed92:	ffffd097          	auipc	ra,0xffffd
    8020ed96:	620080e7          	jalr	1568(ra) # 8020c3b2 <myproc>
    8020ed9a:	89aa                	mv	s3,a0
  struct iovec v;
  //printf("[readv]fd:%d iov:%p iovcnt:%d\n",fd,iov,iovcnt);
  for(int i = 0;i<iovcnt;i++){
    8020ed9c:	fb442783          	lw	a5,-76(s0)
    8020eda0:	04f05863          	blez	a5,8020edf0 <sys_readv+0xa8>
    8020eda4:	4481                	li	s1,0
  int totlen = 0;
    8020eda6:	4901                	li	s2,0
    8020eda8:	a801                	j	8020edb8 <sys_readv+0x70>
  for(int i = 0;i<iovcnt;i++){
    8020edaa:	0485                	addi	s1,s1,1
    8020edac:	fb442703          	lw	a4,-76(s0)
    8020edb0:	0004879b          	sext.w	a5,s1
    8020edb4:	02e7df63          	bge	a5,a4,8020edf2 <sys_readv+0xaa>
    uint64 vec = iov+i*sizeof(v);
    8020edb8:	00449613          	slli	a2,s1,0x4
    copyin(p->pagetable,(char*)&v,vec,sizeof(v));
    8020edbc:	46c1                	li	a3,16
    8020edbe:	fb843783          	ld	a5,-72(s0)
    8020edc2:	963e                	add	a2,a2,a5
    8020edc4:	fa040593          	addi	a1,s0,-96
    8020edc8:	0609b503          	ld	a0,96(s3)
    8020edcc:	ffffd097          	auipc	ra,0xffffd
    8020edd0:	9ce080e7          	jalr	-1586(ra) # 8020b79a <copyin>
    //printf("%d iov base:%p len:%p\n",i,v.iov_base,v.iov_len);
    if(!v.iov_len)continue;
    8020edd4:	fa842603          	lw	a2,-88(s0)
    8020edd8:	da69                	beqz	a2,8020edaa <sys_readv+0x62>
    totlen += fileread(f,(uint64)v.iov_base,v.iov_len);
    8020edda:	fa043583          	ld	a1,-96(s0)
    8020edde:	fc043503          	ld	a0,-64(s0)
    8020ede2:	ffff8097          	auipc	ra,0xffff8
    8020ede6:	a04080e7          	jalr	-1532(ra) # 802067e6 <fileread>
    8020edea:	0125093b          	addw	s2,a0,s2
    8020edee:	bf75                	j	8020edaa <sys_readv+0x62>
  int totlen = 0;
    8020edf0:	4901                	li	s2,0
  }
  return totlen;
}
    8020edf2:	854a                	mv	a0,s2
    8020edf4:	60e6                	ld	ra,88(sp)
    8020edf6:	6446                	ld	s0,80(sp)
    8020edf8:	64a6                	ld	s1,72(sp)
    8020edfa:	6906                	ld	s2,64(sp)
    8020edfc:	79e2                	ld	s3,56(sp)
    8020edfe:	6125                	addi	sp,sp,96
    8020ee00:	8082                	ret

000000008020ee02 <sys_writev>:

uint64 
sys_writev(void){
    8020ee02:	711d                	addi	sp,sp,-96
    8020ee04:	ec86                	sd	ra,88(sp)
    8020ee06:	e8a2                	sd	s0,80(sp)
    8020ee08:	e4a6                	sd	s1,72(sp)
    8020ee0a:	e0ca                	sd	s2,64(sp)
    8020ee0c:	fc4e                	sd	s3,56(sp)
    8020ee0e:	1080                	addi	s0,sp,96
  int fd;
  struct file* f;
  uint64 iov;
  int iovcnt;
  int totlen = 0;
  if(argfd(0, &fd, &f) < 0)
    8020ee10:	fc040613          	addi	a2,s0,-64
    8020ee14:	fcc40593          	addi	a1,s0,-52
    8020ee18:	4501                	li	a0,0
    8020ee1a:	fffff097          	auipc	ra,0xfffff
    8020ee1e:	9bc080e7          	jalr	-1604(ra) # 8020d7d6 <argfd>
  {
    return -1;
    8020ee22:	597d                	li	s2,-1
  if(argfd(0, &fd, &f) < 0)
    8020ee24:	08054463          	bltz	a0,8020eeac <sys_writev+0xaa>
  }
  if(argaddr(1, &iov) < 0)
    8020ee28:	fb840593          	addi	a1,s0,-72
    8020ee2c:	4505                	li	a0,1
    8020ee2e:	fffff097          	auipc	ra,0xfffff
    8020ee32:	956080e7          	jalr	-1706(ra) # 8020d784 <argaddr>
    8020ee36:	06054b63          	bltz	a0,8020eeac <sys_writev+0xaa>
  {
    return -1;
  }
  if(argint(2, &iovcnt) < 0)
    8020ee3a:	fb440593          	addi	a1,s0,-76
    8020ee3e:	4509                	li	a0,2
    8020ee40:	fffff097          	auipc	ra,0xfffff
    8020ee44:	922080e7          	jalr	-1758(ra) # 8020d762 <argint>
    8020ee48:	06054263          	bltz	a0,8020eeac <sys_writev+0xaa>
  {
    return -1;
  }
  struct proc* p = myproc();
    8020ee4c:	ffffd097          	auipc	ra,0xffffd
    8020ee50:	566080e7          	jalr	1382(ra) # 8020c3b2 <myproc>
    8020ee54:	89aa                	mv	s3,a0
  struct iovec v;
  //printf("[writev]fd:%d name:%s iov:%p iovcnt:%d\n",fd,f->ep->filename,iov,iovcnt);
  for(int i = 0;i<iovcnt;i++){
    8020ee56:	fb442783          	lw	a5,-76(s0)
    8020ee5a:	04f05863          	blez	a5,8020eeaa <sys_writev+0xa8>
    8020ee5e:	4481                	li	s1,0
  int totlen = 0;
    8020ee60:	4901                	li	s2,0
    8020ee62:	a801                	j	8020ee72 <sys_writev+0x70>
  for(int i = 0;i<iovcnt;i++){
    8020ee64:	0485                	addi	s1,s1,1
    8020ee66:	fb442703          	lw	a4,-76(s0)
    8020ee6a:	0004879b          	sext.w	a5,s1
    8020ee6e:	02e7df63          	bge	a5,a4,8020eeac <sys_writev+0xaa>
    uint64 vec = iov+i*sizeof(v);
    8020ee72:	00449613          	slli	a2,s1,0x4
    copyin(p->pagetable,(char*)&v,vec,sizeof(v));
    8020ee76:	46c1                	li	a3,16
    8020ee78:	fb843783          	ld	a5,-72(s0)
    8020ee7c:	963e                	add	a2,a2,a5
    8020ee7e:	fa040593          	addi	a1,s0,-96
    8020ee82:	0609b503          	ld	a0,96(s3)
    8020ee86:	ffffd097          	auipc	ra,0xffffd
    8020ee8a:	914080e7          	jalr	-1772(ra) # 8020b79a <copyin>
    //printf("%d iov base:%p len:%p\n",i,v.iov_base,v.iov_len);
    if(!v.iov_len)continue;
    8020ee8e:	fa842603          	lw	a2,-88(s0)
    8020ee92:	da69                	beqz	a2,8020ee64 <sys_writev+0x62>
    totlen += filewrite(f,(uint64)v.iov_base,v.iov_len);
    8020ee94:	fa043583          	ld	a1,-96(s0)
    8020ee98:	fc043503          	ld	a0,-64(s0)
    8020ee9c:	ffff8097          	auipc	ra,0xffff8
    8020eea0:	a9c080e7          	jalr	-1380(ra) # 80206938 <filewrite>
    8020eea4:	0125093b          	addw	s2,a0,s2
    8020eea8:	bf75                	j	8020ee64 <sys_writev+0x62>
  int totlen = 0;
    8020eeaa:	4901                	li	s2,0
    //printf("[writev]next\n");
  }
  return totlen;
}
    8020eeac:	854a                	mv	a0,s2
    8020eeae:	60e6                	ld	ra,88(sp)
    8020eeb0:	6446                	ld	s0,80(sp)
    8020eeb2:	64a6                	ld	s1,72(sp)
    8020eeb4:	6906                	ld	s2,64(sp)
    8020eeb6:	79e2                	ld	s3,56(sp)
    8020eeb8:	6125                	addi	sp,sp,96
    8020eeba:	8082                	ret

000000008020eebc <sys_close>:

uint64
sys_close(void)
{
    8020eebc:	1101                	addi	sp,sp,-32
    8020eebe:	ec06                	sd	ra,24(sp)
    8020eec0:	e822                	sd	s0,16(sp)
    8020eec2:	1000                	addi	s0,sp,32
  int fd;
  struct file *f;

  if(argfd(0, &fd, &f) < 0)
    8020eec4:	fe040613          	addi	a2,s0,-32
    8020eec8:	fec40593          	addi	a1,s0,-20
    8020eecc:	4501                	li	a0,0
    8020eece:	fffff097          	auipc	ra,0xfffff
    8020eed2:	908080e7          	jalr	-1784(ra) # 8020d7d6 <argfd>
    return -1;
    8020eed6:	57fd                	li	a5,-1
  if(argfd(0, &fd, &f) < 0)
    8020eed8:	02054463          	bltz	a0,8020ef00 <sys_close+0x44>
  myproc()->ofile[fd] = 0;
    8020eedc:	ffffd097          	auipc	ra,0xffffd
    8020eee0:	4d6080e7          	jalr	1238(ra) # 8020c3b2 <myproc>
    8020eee4:	fec42703          	lw	a4,-20(s0)
    8020eee8:	757c                	ld	a5,232(a0)
    8020eeea:	070e                	slli	a4,a4,0x3
    8020eeec:	97ba                	add	a5,a5,a4
    8020eeee:	0007b023          	sd	zero,0(a5) # 4000 <_entry-0x801fc000>
  fileclose(f);
    8020eef2:	fe043503          	ld	a0,-32(s0)
    8020eef6:	ffff7097          	auipc	ra,0xffff7
    8020eefa:	3a6080e7          	jalr	934(ra) # 8020629c <fileclose>
  return 0;
    8020eefe:	4781                	li	a5,0
}
    8020ef00:	853e                	mv	a0,a5
    8020ef02:	60e2                	ld	ra,24(sp)
    8020ef04:	6442                	ld	s0,16(sp)
    8020ef06:	6105                	addi	sp,sp,32
    8020ef08:	8082                	ret

000000008020ef0a <sys_unlinkat>:

uint64
sys_unlinkat(void)
{
    8020ef0a:	7129                	addi	sp,sp,-320
    8020ef0c:	fe06                	sd	ra,312(sp)
    8020ef0e:	fa22                	sd	s0,304(sp)
    8020ef10:	f626                	sd	s1,296(sp)
    8020ef12:	0280                	addi	s0,sp,320
  int dirfd,flags,len;
  struct dirent *dp;
  struct dirent* ep;
  char path[FAT32_MAX_PATH];
  
  if(argfd(0,&dirfd,&fp)<0){
    8020ef14:	fd840613          	addi	a2,s0,-40
    8020ef18:	fd440593          	addi	a1,s0,-44
    8020ef1c:	4501                	li	a0,0
    8020ef1e:	fffff097          	auipc	ra,0xfffff
    8020ef22:	8b8080e7          	jalr	-1864(ra) # 8020d7d6 <argfd>
  
  }
  if((len = argstr(1,path,FAT32_MAX_PATH))<0||
    8020ef26:	10400613          	li	a2,260
    8020ef2a:	ec840593          	addi	a1,s0,-312
    8020ef2e:	4505                	li	a0,1
    8020ef30:	fffff097          	auipc	ra,0xfffff
    8020ef34:	876080e7          	jalr	-1930(ra) # 8020d7a6 <argstr>
     argint(2,&flags)<0){
    return -1;   
    8020ef38:	57fd                	li	a5,-1
  if((len = argstr(1,path,FAT32_MAX_PATH))<0||
    8020ef3a:	08054863          	bltz	a0,8020efca <sys_unlinkat+0xc0>
     argint(2,&flags)<0){
    8020ef3e:	fd040593          	addi	a1,s0,-48
    8020ef42:	4509                	li	a0,2
    8020ef44:	fffff097          	auipc	ra,0xfffff
    8020ef48:	81e080e7          	jalr	-2018(ra) # 8020d762 <argint>
  if((len = argstr(1,path,FAT32_MAX_PATH))<0||
    8020ef4c:	0a054363          	bltz	a0,8020eff2 <sys_unlinkat+0xe8>
  }
  
  if(dirfd != AT_FDCWD){
    8020ef50:	fd442703          	lw	a4,-44(s0)
    8020ef54:	f9c00793          	li	a5,-100
    8020ef58:	06f70f63          	beq	a4,a5,8020efd6 <sys_unlinkat+0xcc>
    if(fp == NULL)return -1;
    8020ef5c:	fd843783          	ld	a5,-40(s0)
    8020ef60:	cbd9                	beqz	a5,8020eff6 <sys_unlinkat+0xec>
    dp = fp->ep;
    8020ef62:	7788                	ld	a0,40(a5)
  }else
    dp = NULL;
 
  if((ep = ename(dp,path,0)) == NULL){
    8020ef64:	4601                	li	a2,0
    8020ef66:	ec840593          	addi	a1,s0,-312
    8020ef6a:	ffff5097          	auipc	ra,0xffff5
    8020ef6e:	542080e7          	jalr	1346(ra) # 802044ac <ename>
    8020ef72:	84aa                	mv	s1,a0
    8020ef74:	c159                	beqz	a0,8020effa <sys_unlinkat+0xf0>
    return -1;
  }
  elock(ep);
    8020ef76:	ffff5097          	auipc	ra,0xffff5
    8020ef7a:	af4080e7          	jalr	-1292(ra) # 80203a6a <elock>
  if((ep->attribute & ATTR_DIRECTORY) && !isdirempty(ep)){
    8020ef7e:	1004c783          	lbu	a5,256(s1)
    8020ef82:	8bc1                	andi	a5,a5,16
    8020ef84:	c799                	beqz	a5,8020ef92 <sys_unlinkat+0x88>
    8020ef86:	8526                	mv	a0,s1
    8020ef88:	ffff5097          	auipc	ra,0xffff5
    8020ef8c:	3b8080e7          	jalr	952(ra) # 80204340 <isdirempty>
    8020ef90:	c529                	beqz	a0,8020efda <sys_unlinkat+0xd0>
      eunlock(ep);
      eput(ep);
      return -1;
  }
  elock(ep->parent);      // Will this lead to deadlock?
    8020ef92:	1284b503          	ld	a0,296(s1)
    8020ef96:	ffff5097          	auipc	ra,0xffff5
    8020ef9a:	ad4080e7          	jalr	-1324(ra) # 80203a6a <elock>
  eremove(ep);
    8020ef9e:	8526                	mv	a0,s1
    8020efa0:	ffff5097          	auipc	ra,0xffff5
    8020efa4:	958080e7          	jalr	-1704(ra) # 802038f8 <eremove>
  eunlock(ep->parent);
    8020efa8:	1284b503          	ld	a0,296(s1)
    8020efac:	ffff5097          	auipc	ra,0xffff5
    8020efb0:	af4080e7          	jalr	-1292(ra) # 80203aa0 <eunlock>
  eunlock(ep);
    8020efb4:	8526                	mv	a0,s1
    8020efb6:	ffff5097          	auipc	ra,0xffff5
    8020efba:	aea080e7          	jalr	-1302(ra) # 80203aa0 <eunlock>
  eput(ep);
    8020efbe:	8526                	mv	a0,s1
    8020efc0:	ffff5097          	auipc	ra,0xffff5
    8020efc4:	b2e080e7          	jalr	-1234(ra) # 80203aee <eput>
  return 0;
    8020efc8:	4781                	li	a5,0

}
    8020efca:	853e                	mv	a0,a5
    8020efcc:	70f2                	ld	ra,312(sp)
    8020efce:	7452                	ld	s0,304(sp)
    8020efd0:	74b2                	ld	s1,296(sp)
    8020efd2:	6131                	addi	sp,sp,320
    8020efd4:	8082                	ret
    dp = NULL;
    8020efd6:	4501                	li	a0,0
    8020efd8:	b771                	j	8020ef64 <sys_unlinkat+0x5a>
      eunlock(ep);
    8020efda:	8526                	mv	a0,s1
    8020efdc:	ffff5097          	auipc	ra,0xffff5
    8020efe0:	ac4080e7          	jalr	-1340(ra) # 80203aa0 <eunlock>
      eput(ep);
    8020efe4:	8526                	mv	a0,s1
    8020efe6:	ffff5097          	auipc	ra,0xffff5
    8020efea:	b08080e7          	jalr	-1272(ra) # 80203aee <eput>
      return -1;
    8020efee:	57fd                	li	a5,-1
    8020eff0:	bfe9                	j	8020efca <sys_unlinkat+0xc0>
    return -1;   
    8020eff2:	57fd                	li	a5,-1
    8020eff4:	bfd9                	j	8020efca <sys_unlinkat+0xc0>
    if(fp == NULL)return -1;
    8020eff6:	57fd                	li	a5,-1
    8020eff8:	bfc9                	j	8020efca <sys_unlinkat+0xc0>
    return -1;
    8020effa:	57fd                	li	a5,-1
    8020effc:	b7f9                	j	8020efca <sys_unlinkat+0xc0>

000000008020effe <sys_getcwd>:

// get absolute cwd string
uint64
sys_getcwd(void)
{
    8020effe:	714d                	addi	sp,sp,-336
    8020f000:	e686                	sd	ra,328(sp)
    8020f002:	e2a2                	sd	s0,320(sp)
    8020f004:	fe26                	sd	s1,312(sp)
    8020f006:	fa4a                	sd	s2,304(sp)
    8020f008:	f64e                	sd	s3,296(sp)
    8020f00a:	f252                	sd	s4,288(sp)
    8020f00c:	ee56                	sd	s5,280(sp)
    8020f00e:	0a80                	addi	s0,sp,336
  uint64 addr;
  if (argaddr(0, &addr) < 0)
    8020f010:	fb840593          	addi	a1,s0,-72
    8020f014:	4501                	li	a0,0
    8020f016:	ffffe097          	auipc	ra,0xffffe
    8020f01a:	76e080e7          	jalr	1902(ra) # 8020d784 <argaddr>
    return -1;
    8020f01e:	57fd                	li	a5,-1
  if (argaddr(0, &addr) < 0)
    8020f020:	08054b63          	bltz	a0,8020f0b6 <sys_getcwd+0xb8>

  struct dirent *de = myproc()->cwd;
    8020f024:	ffffd097          	auipc	ra,0xffffd
    8020f028:	38e080e7          	jalr	910(ra) # 8020c3b2 <myproc>
    8020f02c:	7d64                	ld	s1,248(a0)
  char path[FAT32_MAX_PATH];
  char *s;
  int len;

  if (de->parent == NULL) {
    8020f02e:	1284b783          	ld	a5,296(s1)
    8020f032:	cfc1                	beqz	a5,8020f0ca <sys_getcwd+0xcc>
    s = "/";
  } else {
    s = path + FAT32_MAX_PATH - 1;
    *s = '\0';
    8020f034:	fa0409a3          	sb	zero,-77(s0)
    s = path + FAT32_MAX_PATH - 1;
    8020f038:	fb340993          	addi	s3,s0,-77
    while (de->parent) {
      len = strlen(de->filename);
      s -= len;
      if (s <= path)          // can't reach root "/"
    8020f03c:	eb040a13          	addi	s4,s0,-336
        return -1;
      strncpy(s, de->filename, len);
      *--s = '/';
    8020f040:	02f00a93          	li	s5,47
      len = strlen(de->filename);
    8020f044:	8526                	mv	a0,s1
    8020f046:	ffff2097          	auipc	ra,0xffff2
    8020f04a:	eb6080e7          	jalr	-330(ra) # 80200efc <strlen>
    8020f04e:	862a                	mv	a2,a0
      s -= len;
    8020f050:	40a98933          	sub	s2,s3,a0
      if (s <= path)          // can't reach root "/"
    8020f054:	092a7a63          	bgeu	s4,s2,8020f0e8 <sys_getcwd+0xea>
      strncpy(s, de->filename, len);
    8020f058:	85a6                	mv	a1,s1
    8020f05a:	854a                	mv	a0,s2
    8020f05c:	ffff2097          	auipc	ra,0xffff2
    8020f060:	e30080e7          	jalr	-464(ra) # 80200e8c <strncpy>
      *--s = '/';
    8020f064:	fff90993          	addi	s3,s2,-1
    8020f068:	ff590fa3          	sb	s5,-1(s2)
      de = de->parent;
    8020f06c:	1284b483          	ld	s1,296(s1)
    while (de->parent) {
    8020f070:	1284b783          	ld	a5,296(s1)
    8020f074:	fbe1                	bnez	a5,8020f044 <sys_getcwd+0x46>
    }
  }
  if(addr == 0){
    8020f076:	fb843783          	ld	a5,-72(s0)
    8020f07a:	eb91                	bnez	a5,8020f08e <sys_getcwd+0x90>
    addr = growprocsize(FAT32_MAX_PATH);
    8020f07c:	10400513          	li	a0,260
    8020f080:	ffffe097          	auipc	ra,0xffffe
    8020f084:	e94080e7          	jalr	-364(ra) # 8020cf14 <growprocsize>
    8020f088:	faa43c23          	sd	a0,-72(s0)
    if(addr == 0)
    8020f08c:	c521                	beqz	a0,8020f0d4 <sys_getcwd+0xd6>
      __debug_warn("[sys_getcwd] alloc address failed\n");
      return -1;
    }
  }

  if (either_copyout(1, addr, s, strlen(s) + 1) < 0)
    8020f08e:	fb843483          	ld	s1,-72(s0)
    8020f092:	854e                	mv	a0,s3
    8020f094:	ffff2097          	auipc	ra,0xffff2
    8020f098:	e68080e7          	jalr	-408(ra) # 80200efc <strlen>
    8020f09c:	0015069b          	addiw	a3,a0,1
    8020f0a0:	864e                	mv	a2,s3
    8020f0a2:	85a6                	mv	a1,s1
    8020f0a4:	4505                	li	a0,1
    8020f0a6:	ffffd097          	auipc	ra,0xffffd
    8020f0aa:	990080e7          	jalr	-1648(ra) # 8020ba36 <either_copyout>
    8020f0ae:	02054f63          	bltz	a0,8020f0ec <sys_getcwd+0xee>
    return -1;
  return addr;
    8020f0b2:	fb843783          	ld	a5,-72(s0)
}
    8020f0b6:	853e                	mv	a0,a5
    8020f0b8:	60b6                	ld	ra,328(sp)
    8020f0ba:	6416                	ld	s0,320(sp)
    8020f0bc:	74f2                	ld	s1,312(sp)
    8020f0be:	7952                	ld	s2,304(sp)
    8020f0c0:	79b2                	ld	s3,296(sp)
    8020f0c2:	7a12                	ld	s4,288(sp)
    8020f0c4:	6af2                	ld	s5,280(sp)
    8020f0c6:	6171                	addi	sp,sp,336
    8020f0c8:	8082                	ret
    s = "/";
    8020f0ca:	00007997          	auipc	s3,0x7
    8020f0ce:	b6e98993          	addi	s3,s3,-1170 # 80215c38 <vma_type+0x4b0>
    8020f0d2:	b755                	j	8020f076 <sys_getcwd+0x78>
      __debug_warn("[sys_getcwd] alloc address failed\n");
    8020f0d4:	00007517          	auipc	a0,0x7
    8020f0d8:	edc50513          	addi	a0,a0,-292 # 80215fb0 <UNAME_VERSION+0x168>
    8020f0dc:	ffffa097          	auipc	ra,0xffffa
    8020f0e0:	594080e7          	jalr	1428(ra) # 80209670 <__debug_warn>
      return -1;
    8020f0e4:	57fd                	li	a5,-1
    8020f0e6:	bfc1                	j	8020f0b6 <sys_getcwd+0xb8>
        return -1;
    8020f0e8:	57fd                	li	a5,-1
    8020f0ea:	b7f1                	j	8020f0b6 <sys_getcwd+0xb8>
    return -1;
    8020f0ec:	57fd                	li	a5,-1
    8020f0ee:	b7e1                	j	8020f0b6 <sys_getcwd+0xb8>

000000008020f0f0 <sys_fstat>:


uint64
sys_fstat(void)
{
    8020f0f0:	7179                	addi	sp,sp,-48
    8020f0f2:	f406                	sd	ra,40(sp)
    8020f0f4:	f022                	sd	s0,32(sp)
    8020f0f6:	1800                	addi	s0,sp,48
  struct file *f;
  int fd;
  uint64 st; // user pointer to struct stat

  if(argfd(0, &fd, &f) < 0 || argaddr(1, &st) < 0)
    8020f0f8:	fe840613          	addi	a2,s0,-24
    8020f0fc:	fe440593          	addi	a1,s0,-28
    8020f100:	4501                	li	a0,0
    8020f102:	ffffe097          	auipc	ra,0xffffe
    8020f106:	6d4080e7          	jalr	1748(ra) # 8020d7d6 <argfd>
    return -1;
    8020f10a:	57fd                	li	a5,-1
  if(argfd(0, &fd, &f) < 0 || argaddr(1, &st) < 0)
    8020f10c:	02054563          	bltz	a0,8020f136 <sys_fstat+0x46>
    8020f110:	fd840593          	addi	a1,s0,-40
    8020f114:	4505                	li	a0,1
    8020f116:	ffffe097          	auipc	ra,0xffffe
    8020f11a:	66e080e7          	jalr	1646(ra) # 8020d784 <argaddr>
    return -1;
    8020f11e:	57fd                	li	a5,-1
  if(argfd(0, &fd, &f) < 0 || argaddr(1, &st) < 0)
    8020f120:	00054b63          	bltz	a0,8020f136 <sys_fstat+0x46>
  //return filestat(f, st);
  //print_f_info(f);
  return filekstat(f, st);
    8020f124:	fd843583          	ld	a1,-40(s0)
    8020f128:	fe843503          	ld	a0,-24(s0)
    8020f12c:	ffff7097          	auipc	ra,0xffff7
    8020f130:	554080e7          	jalr	1364(ra) # 80206680 <filekstat>
    8020f134:	87aa                	mv	a5,a0
}
    8020f136:	853e                	mv	a0,a5
    8020f138:	70a2                	ld	ra,40(sp)
    8020f13a:	7402                	ld	s0,32(sp)
    8020f13c:	6145                	addi	sp,sp,48
    8020f13e:	8082                	ret

000000008020f140 <sys_fstatat>:

uint64
sys_fstatat(void)
{
    8020f140:	7105                	addi	sp,sp,-480
    8020f142:	ef86                	sd	ra,472(sp)
    8020f144:	eba2                	sd	s0,464(sp)
    8020f146:	e7a6                	sd	s1,456(sp)
    8020f148:	e3ca                	sd	s2,448(sp)
    8020f14a:	ff4e                	sd	s3,440(sp)
    8020f14c:	fb52                	sd	s4,432(sp)
    8020f14e:	1380                	addi	s0,sp,480
  uint64 st; // user pointer to struct stat
  int flags;
  char pathname[FAT32_MAX_FILENAME];
  struct file* fp;

  if(argfd(0, &fd, &fp) < 0&&fd!=AT_FDCWD)
    8020f150:	eb040613          	addi	a2,s0,-336
    8020f154:	fcc40593          	addi	a1,s0,-52
    8020f158:	4501                	li	a0,0
    8020f15a:	ffffe097          	auipc	ra,0xffffe
    8020f15e:	67c080e7          	jalr	1660(ra) # 8020d7d6 <argfd>
    8020f162:	00055963          	bgez	a0,8020f174 <sys_fstatat+0x34>
    8020f166:	fcc42683          	lw	a3,-52(s0)
    8020f16a:	f9c00713          	li	a4,-100
    return -EMFILE;  
    8020f16e:	57a1                	li	a5,-24
  if(argfd(0, &fd, &fp) < 0&&fd!=AT_FDCWD)
    8020f170:	10e69663          	bne	a3,a4,8020f27c <sys_fstatat+0x13c>
  if(argstr(1, pathname, FAT32_MAX_FILENAME + 1) < 0)
    8020f174:	10000613          	li	a2,256
    8020f178:	eb840593          	addi	a1,s0,-328
    8020f17c:	4505                	li	a0,1
    8020f17e:	ffffe097          	auipc	ra,0xffffe
    8020f182:	628080e7          	jalr	1576(ra) # 8020d7a6 <argstr>
    return -ENAMETOOLONG;
    8020f186:	fdc00793          	li	a5,-36
  if(argstr(1, pathname, FAT32_MAX_FILENAME + 1) < 0)
    8020f18a:	0e054963          	bltz	a0,8020f27c <sys_fstatat+0x13c>
  if(argaddr(2, &st) < 0)
    8020f18e:	fc040593          	addi	a1,s0,-64
    8020f192:	4509                	li	a0,2
    8020f194:	ffffe097          	auipc	ra,0xffffe
    8020f198:	5f0080e7          	jalr	1520(ra) # 8020d784 <argaddr>
    return -1;  
    8020f19c:	57fd                	li	a5,-1
  if(argaddr(2, &st) < 0)
    8020f19e:	0c054f63          	bltz	a0,8020f27c <sys_fstatat+0x13c>
  if(argint(3, &flags) < 0)
    8020f1a2:	fbc40593          	addi	a1,s0,-68
    8020f1a6:	450d                	li	a0,3
    8020f1a8:	ffffe097          	auipc	ra,0xffffe
    8020f1ac:	5ba080e7          	jalr	1466(ra) # 8020d762 <argint>
    return -1;
    8020f1b0:	57fd                	li	a5,-1
  if(argint(3, &flags) < 0)
    8020f1b2:	0c054563          	bltz	a0,8020f27c <sys_fstatat+0x13c>
  //return filestat(f, st);
  //printf("[sys fstatat]fd:%d pathname:%s flags:%p\n",fd,pathname,flags);
  struct dirent* ep;
  struct dirent* dp;
  struct proc* p = myproc();
    8020f1b6:	ffffd097          	auipc	ra,0xffffd
    8020f1ba:	1fc080e7          	jalr	508(ra) # 8020c3b2 <myproc>
    8020f1be:	892a                	mv	s2,a0
  int devno = -1;
    8020f1c0:	57fd                	li	a5,-1
    8020f1c2:	eaf42623          	sw	a5,-340(s0)
  if(fd==AT_FDCWD){
    8020f1c6:	fcc42703          	lw	a4,-52(s0)
    8020f1ca:	f9c00793          	li	a5,-100
    8020f1ce:	0cf70e63          	beq	a4,a5,8020f2aa <sys_fstatat+0x16a>
    dp = NULL;
  } else { 
    if(pathname[0] != '/' && fp == NULL)
    8020f1d2:	eb844703          	lbu	a4,-328(s0)
    8020f1d6:	02f00793          	li	a5,47
    8020f1da:	0af70a63          	beq	a4,a5,8020f28e <sys_fstatat+0x14e>
    8020f1de:	eb043503          	ld	a0,-336(s0)
    8020f1e2:	cd65                	beqz	a0,8020f2da <sys_fstatat+0x19a>
    {
      return -EMFILE;
    }
    dp = fp ? fp->ep : NULL;
    8020f1e4:	7508                	ld	a0,40(a0)
    
    if(dp && !(dp->attribute & ATTR_DIRECTORY)){
    8020f1e6:	c509                	beqz	a0,8020f1f0 <sys_fstatat+0xb0>
    8020f1e8:	10054783          	lbu	a5,256(a0)
    8020f1ec:	8bc1                	andi	a5,a5,16
    8020f1ee:	c7c5                	beqz	a5,8020f296 <sys_fstatat+0x156>
        return -1;
    }
  }

  // elock dp may cause deadlock
  ep = ename(dp, pathname, &devno);
    8020f1f0:	eac40613          	addi	a2,s0,-340
    8020f1f4:	eb840593          	addi	a1,s0,-328
    8020f1f8:	ffff5097          	auipc	ra,0xffff5
    8020f1fc:	2b4080e7          	jalr	692(ra) # 802044ac <ename>
    8020f200:	84aa                	mv	s1,a0
  if(ep == NULL){
    8020f202:	cd71                	beqz	a0,8020f2de <sys_fstatat+0x19e>
    //printf("[fstatat]path %s not found\n",pathname);
    return -ENOENT;  
  }

  struct kstat kst;
  if(devno == -1)
    8020f204:	eac42703          	lw	a4,-340(s0)
    8020f208:	57fd                	li	a5,-1
    8020f20a:	0af70263          	beq	a4,a5,8020f2ae <sys_fstatat+0x16e>
  }
  else
  {
    if(devno < 0 || devno >= getdevnum())
    {
      return -1;
    8020f20e:	57fd                	li	a5,-1
    if(devno < 0 || devno >= getdevnum())
    8020f210:	06074663          	bltz	a4,8020f27c <sys_fstatat+0x13c>
    8020f214:	ffff9097          	auipc	ra,0xffff9
    8020f218:	216080e7          	jalr	534(ra) # 8020842a <getdevnum>
    8020f21c:	eac42703          	lw	a4,-340(s0)
      return -1;
    8020f220:	57fd                	li	a5,-1
    if(devno < 0 || devno >= getdevnum())
    8020f222:	04a75d63          	bge	a4,a0,8020f27c <sys_fstatat+0x13c>
    }
    struct devsw *mydev = &devsw[devno];
    8020f226:	00371493          	slli	s1,a4,0x3
    8020f22a:	8c99                	sub	s1,s1,a4
    8020f22c:	048e                	slli	s1,s1,0x3
    acquire(&mydev->lk);
    8020f22e:	01048993          	addi	s3,s1,16
    8020f232:	0515fa17          	auipc	s4,0x515f
    8020f236:	b46a0a13          	addi	s4,s4,-1210 # 8536dd78 <devsw>
    8020f23a:	99d2                	add	s3,s3,s4
    8020f23c:	854e                	mv	a0,s3
    8020f23e:	ffffa097          	auipc	ra,0xffffa
    8020f242:	c9c080e7          	jalr	-868(ra) # 80208eda <acquire>
    devkstat(mydev, &kst);
    8020f246:	e2840593          	addi	a1,s0,-472
    8020f24a:	009a0533          	add	a0,s4,s1
    8020f24e:	ffff9097          	auipc	ra,0xffff9
    8020f252:	62a080e7          	jalr	1578(ra) # 80208878 <devkstat>
    release(&mydev->lk);
    8020f256:	854e                	mv	a0,s3
    8020f258:	ffffa097          	auipc	ra,0xffffa
    8020f25c:	cd6080e7          	jalr	-810(ra) # 80208f2e <release>
  }
  
  //printf("kst.mode:%p ATTR_DIRECTORY:%p\n",kst.st_mode,ATTR_DIRECTORY);
  if(copyout(p->pagetable, st, (char *)&kst, sizeof(kst)) < 0)
    8020f260:	08000693          	li	a3,128
    8020f264:	e2840613          	addi	a2,s0,-472
    8020f268:	fc043583          	ld	a1,-64(s0)
    8020f26c:	06093503          	ld	a0,96(s2)
    8020f270:	ffffc097          	auipc	ra,0xffffc
    8020f274:	44c080e7          	jalr	1100(ra) # 8020b6bc <copyout>
    8020f278:	43f55793          	srai	a5,a0,0x3f
    return -1;
  return 0;
}
    8020f27c:	853e                	mv	a0,a5
    8020f27e:	60fe                	ld	ra,472(sp)
    8020f280:	645e                	ld	s0,464(sp)
    8020f282:	64be                	ld	s1,456(sp)
    8020f284:	691e                	ld	s2,448(sp)
    8020f286:	79fa                	ld	s3,440(sp)
    8020f288:	7a5a                	ld	s4,432(sp)
    8020f28a:	613d                	addi	sp,sp,480
    8020f28c:	8082                	ret
    dp = fp ? fp->ep : NULL;
    8020f28e:	eb043503          	ld	a0,-336(s0)
    8020f292:	dd39                	beqz	a0,8020f1f0 <sys_fstatat+0xb0>
    8020f294:	bf81                	j	8020f1e4 <sys_fstatat+0xa4>
        printf("fd point to a non directory\n");
    8020f296:	00007517          	auipc	a0,0x7
    8020f29a:	d4250513          	addi	a0,a0,-702 # 80215fd8 <UNAME_VERSION+0x190>
    8020f29e:	ffffa097          	auipc	ra,0xffffa
    8020f2a2:	ff6080e7          	jalr	-10(ra) # 80209294 <printf>
        return -1;
    8020f2a6:	57fd                	li	a5,-1
    8020f2a8:	bfd1                	j	8020f27c <sys_fstatat+0x13c>
    dp = NULL;
    8020f2aa:	4501                	li	a0,0
    8020f2ac:	b791                	j	8020f1f0 <sys_fstatat+0xb0>
    elock(ep);
    8020f2ae:	ffff4097          	auipc	ra,0xffff4
    8020f2b2:	7bc080e7          	jalr	1980(ra) # 80203a6a <elock>
    ekstat(ep,&kst);
    8020f2b6:	e2840593          	addi	a1,s0,-472
    8020f2ba:	8526                	mv	a0,s1
    8020f2bc:	ffff5097          	auipc	ra,0xffff5
    8020f2c0:	0fc080e7          	jalr	252(ra) # 802043b8 <ekstat>
    eunlock(ep);
    8020f2c4:	8526                	mv	a0,s1
    8020f2c6:	ffff4097          	auipc	ra,0xffff4
    8020f2ca:	7da080e7          	jalr	2010(ra) # 80203aa0 <eunlock>
    eput(ep);
    8020f2ce:	8526                	mv	a0,s1
    8020f2d0:	ffff5097          	auipc	ra,0xffff5
    8020f2d4:	81e080e7          	jalr	-2018(ra) # 80203aee <eput>
    8020f2d8:	b761                	j	8020f260 <sys_fstatat+0x120>
      return -EMFILE;
    8020f2da:	57a1                	li	a5,-24
    8020f2dc:	b745                	j	8020f27c <sys_fstatat+0x13c>
    return -ENOENT;  
    8020f2de:	57f9                	li	a5,-2
    8020f2e0:	bf71                	j	8020f27c <sys_fstatat+0x13c>

000000008020f2e2 <sys_faccessat>:

uint64
sys_faccessat(void)
{
    8020f2e2:	7129                	addi	sp,sp,-320
    8020f2e4:	fe06                	sd	ra,312(sp)
    8020f2e6:	fa22                	sd	s0,304(sp)
    8020f2e8:	f626                	sd	s1,296(sp)
    8020f2ea:	0280                	addi	s0,sp,320
  struct file *fp;
  char path[FAT32_MAX_FILENAME];
  int mode;
  int flags;
  struct dirent *dp, *ep;
  struct proc *p = myproc();
    8020f2ec:	ffffd097          	auipc	ra,0xffffd
    8020f2f0:	0c6080e7          	jalr	198(ra) # 8020c3b2 <myproc>
    8020f2f4:	84aa                	mv	s1,a0
  int devno = -1;
    8020f2f6:	57fd                	li	a5,-1
    8020f2f8:	ecf42223          	sw	a5,-316(s0)
  int emode = R_OK | W_OK | X_OK;

  if(argfd(0, &dirfd, &fp) < 0 && dirfd != AT_FDCWD)
    8020f2fc:	fd040613          	addi	a2,s0,-48
    8020f300:	fdc40593          	addi	a1,s0,-36
    8020f304:	4501                	li	a0,0
    8020f306:	ffffe097          	auipc	ra,0xffffe
    8020f30a:	4d0080e7          	jalr	1232(ra) # 8020d7d6 <argfd>
    8020f30e:	00055963          	bgez	a0,8020f320 <sys_faccessat+0x3e>
    8020f312:	fdc42683          	lw	a3,-36(s0)
    8020f316:	f9c00713          	li	a4,-100
  {
    return -EMFILE;
    8020f31a:	57a1                	li	a5,-24
  if(argfd(0, &dirfd, &fp) < 0 && dirfd != AT_FDCWD)
    8020f31c:	08e69463          	bne	a3,a4,8020f3a4 <sys_faccessat+0xc2>
  }
  if(argstr(1, path, FAT32_MAX_FILENAME + 1) < 0)
    8020f320:	10000613          	li	a2,256
    8020f324:	ed040593          	addi	a1,s0,-304
    8020f328:	4505                	li	a0,1
    8020f32a:	ffffe097          	auipc	ra,0xffffe
    8020f32e:	47c080e7          	jalr	1148(ra) # 8020d7a6 <argstr>
  {
    return -1;
    8020f332:	57fd                	li	a5,-1
  if(argstr(1, path, FAT32_MAX_FILENAME + 1) < 0)
    8020f334:	06054863          	bltz	a0,8020f3a4 <sys_faccessat+0xc2>
  }
  if(argint(2, &mode) < 0)
    8020f338:	ecc40593          	addi	a1,s0,-308
    8020f33c:	4509                	li	a0,2
    8020f33e:	ffffe097          	auipc	ra,0xffffe
    8020f342:	424080e7          	jalr	1060(ra) # 8020d762 <argint>
  {
    return -1;
    8020f346:	57fd                	li	a5,-1
  if(argint(2, &mode) < 0)
    8020f348:	04054e63          	bltz	a0,8020f3a4 <sys_faccessat+0xc2>
  }
  if(argint(3, &flags) < 0)
    8020f34c:	ec840593          	addi	a1,s0,-312
    8020f350:	450d                	li	a0,3
    8020f352:	ffffe097          	auipc	ra,0xffffe
    8020f356:	410080e7          	jalr	1040(ra) # 8020d762 <argint>
    8020f35a:	08054563          	bltz	a0,8020f3e4 <sys_faccessat+0x102>
  {
    return -1;
  }

  if(path[0] == '/')
    8020f35e:	ed044703          	lbu	a4,-304(s0)
    8020f362:	02f00793          	li	a5,47
    8020f366:	06f70163          	beq	a4,a5,8020f3c8 <sys_faccessat+0xe6>
  {
    dp = NULL;
  }
  else if (AT_FDCWD == dirfd)
    8020f36a:	fdc42703          	lw	a4,-36(s0)
    8020f36e:	f9c00793          	li	a5,-100
    8020f372:	02f70f63          	beq	a4,a5,8020f3b0 <sys_faccessat+0xce>
  {
    dp = p->cwd;
  }
  else
  {
    if(NULL == fp)
    8020f376:	fd043783          	ld	a5,-48(s0)
    8020f37a:	cf8d                	beqz	a5,8020f3b4 <sys_faccessat+0xd2>
    {
      __debug_warn("[sys_faccessat] dirfd illegal\n");
      return -EMFILE;
    }
    dp = fp->ep;
    8020f37c:	7788                	ld	a0,40(a5)
  }

  ep = ename(dp, path, &devno);
    8020f37e:	ec440613          	addi	a2,s0,-316
    8020f382:	ed040593          	addi	a1,s0,-304
    8020f386:	ffff5097          	auipc	ra,0xffff5
    8020f38a:	126080e7          	jalr	294(ra) # 802044ac <ename>
  if(ep == NULL){
    8020f38e:	cd1d                	beqz	a0,8020f3cc <sys_faccessat+0xea>
    printf("[faccessat] path %s not found\n",path);
    return -1;  
  }

  // check file whether exist or not
  if(mode == F_OK)
    8020f390:	ecc42703          	lw	a4,-308(s0)
  {
    return 0;
    8020f394:	4781                	li	a5,0
  if(mode == F_OK)
    8020f396:	c719                	beqz	a4,8020f3a4 <sys_faccessat+0xc2>
  else
  {

  }

  if((emode & mode) != mode)
    8020f398:	ff877793          	andi	a5,a4,-8
    8020f39c:	00f037b3          	snez	a5,a5
    8020f3a0:	40f007b3          	neg	a5,a5
  {
    return -1;
  }

  return 0;
}
    8020f3a4:	853e                	mv	a0,a5
    8020f3a6:	70f2                	ld	ra,312(sp)
    8020f3a8:	7452                	ld	s0,304(sp)
    8020f3aa:	74b2                	ld	s1,296(sp)
    8020f3ac:	6131                	addi	sp,sp,320
    8020f3ae:	8082                	ret
    dp = p->cwd;
    8020f3b0:	7ce8                	ld	a0,248(s1)
    8020f3b2:	b7f1                	j	8020f37e <sys_faccessat+0x9c>
      __debug_warn("[sys_faccessat] dirfd illegal\n");
    8020f3b4:	00007517          	auipc	a0,0x7
    8020f3b8:	c4450513          	addi	a0,a0,-956 # 80215ff8 <UNAME_VERSION+0x1b0>
    8020f3bc:	ffffa097          	auipc	ra,0xffffa
    8020f3c0:	2b4080e7          	jalr	692(ra) # 80209670 <__debug_warn>
      return -EMFILE;
    8020f3c4:	57a1                	li	a5,-24
    8020f3c6:	bff9                	j	8020f3a4 <sys_faccessat+0xc2>
    dp = NULL;
    8020f3c8:	4501                	li	a0,0
    8020f3ca:	bf55                	j	8020f37e <sys_faccessat+0x9c>
    printf("[faccessat] path %s not found\n",path);
    8020f3cc:	ed040593          	addi	a1,s0,-304
    8020f3d0:	00007517          	auipc	a0,0x7
    8020f3d4:	c4850513          	addi	a0,a0,-952 # 80216018 <UNAME_VERSION+0x1d0>
    8020f3d8:	ffffa097          	auipc	ra,0xffffa
    8020f3dc:	ebc080e7          	jalr	-324(ra) # 80209294 <printf>
    return -1;  
    8020f3e0:	57fd                	li	a5,-1
    8020f3e2:	b7c9                	j	8020f3a4 <sys_faccessat+0xc2>
    return -1;
    8020f3e4:	57fd                	li	a5,-1
    8020f3e6:	bf7d                	j	8020f3a4 <sys_faccessat+0xc2>

000000008020f3e8 <sys_lseek>:


uint64 
sys_lseek(void)
{
    8020f3e8:	7179                	addi	sp,sp,-48
    8020f3ea:	f406                	sd	ra,40(sp)
    8020f3ec:	f022                	sd	s0,32(sp)
    8020f3ee:	1800                	addi	s0,sp,48
  uint64 offset;
  int fd;
  int whence;
  uint64 ret = -1;

  if(argfd(0, &fd, &f) < 0 || argaddr(1, &offset) < 0 || argint(2, &whence) < 0)
    8020f3f0:	fe840613          	addi	a2,s0,-24
    8020f3f4:	fdc40593          	addi	a1,s0,-36
    8020f3f8:	4501                	li	a0,0
    8020f3fa:	ffffe097          	auipc	ra,0xffffe
    8020f3fe:	3dc080e7          	jalr	988(ra) # 8020d7d6 <argfd>
  {
    return -1;
    8020f402:	57fd                	li	a5,-1
  if(argfd(0, &fd, &f) < 0 || argaddr(1, &offset) < 0 || argint(2, &whence) < 0)
    8020f404:	02054c63          	bltz	a0,8020f43c <sys_lseek+0x54>
    8020f408:	fe040593          	addi	a1,s0,-32
    8020f40c:	4505                	li	a0,1
    8020f40e:	ffffe097          	auipc	ra,0xffffe
    8020f412:	376080e7          	jalr	886(ra) # 8020d784 <argaddr>
    return -1;
    8020f416:	57fd                	li	a5,-1
  if(argfd(0, &fd, &f) < 0 || argaddr(1, &offset) < 0 || argint(2, &whence) < 0)
    8020f418:	02054263          	bltz	a0,8020f43c <sys_lseek+0x54>
    8020f41c:	fd840593          	addi	a1,s0,-40
    8020f420:	4509                	li	a0,2
    8020f422:	ffffe097          	auipc	ra,0xffffe
    8020f426:	340080e7          	jalr	832(ra) # 8020d762 <argint>
    8020f42a:	02054863          	bltz	a0,8020f45a <sys_lseek+0x72>
  }

  if(f->type != FD_ENTRY)
    8020f42e:	fe843503          	ld	a0,-24(s0)
    8020f432:	4114                	lw	a3,0(a0)
    8020f434:	4709                	li	a4,2
  {
    return -ESPIPE;
    8020f436:	578d                	li	a5,-29
  if(f->type != FD_ENTRY)
    8020f438:	00e68763          	beq	a3,a4,8020f446 <sys_lseek+0x5e>
  }

  ret = filelseek(f, offset, whence);
  return ret;
}
    8020f43c:	853e                	mv	a0,a5
    8020f43e:	70a2                	ld	ra,40(sp)
    8020f440:	7402                	ld	s0,32(sp)
    8020f442:	6145                	addi	sp,sp,48
    8020f444:	8082                	ret
  ret = filelseek(f, offset, whence);
    8020f446:	fd842603          	lw	a2,-40(s0)
    8020f44a:	fe043583          	ld	a1,-32(s0)
    8020f44e:	ffff8097          	auipc	ra,0xffff8
    8020f452:	a3a080e7          	jalr	-1478(ra) # 80206e88 <filelseek>
    8020f456:	87aa                	mv	a5,a0
  return ret;
    8020f458:	b7d5                	j	8020f43c <sys_lseek+0x54>
    return -1;
    8020f45a:	57fd                	li	a5,-1
    8020f45c:	b7c5                	j	8020f43c <sys_lseek+0x54>

000000008020f45e <sys_renameat2>:


uint64
sys_renameat2(void)
{
    8020f45e:	d9010113          	addi	sp,sp,-624
    8020f462:	26113423          	sd	ra,616(sp)
    8020f466:	26813023          	sd	s0,608(sp)
    8020f46a:	24913c23          	sd	s1,600(sp)
    8020f46e:	25213823          	sd	s2,592(sp)
    8020f472:	25313423          	sd	s3,584(sp)
    8020f476:	25413023          	sd	s4,576(sp)
    8020f47a:	1c80                	addi	s0,sp,624
  char old[FAT32_MAX_PATH], new[FAT32_MAX_PATH];
  int olddirfd, newdirfd;
  struct file *oldfp;
  struct file *newfp;
  struct dirent *olddp = NULL, *newdp = NULL;
  struct proc *p = myproc();
    8020f47c:	ffffd097          	auipc	ra,0xffffd
    8020f480:	f36080e7          	jalr	-202(ra) # 8020c3b2 <myproc>
    8020f484:	892a                	mv	s2,a0
  // int flags;
  int olddevno = -1, newdevno = -1;
    8020f486:	57fd                	li	a5,-1
    8020f488:	daf42223          	sw	a5,-604(s0)
    8020f48c:	daf42023          	sw	a5,-608(s0)
  struct dirent *src = NULL, *dst = NULL, *pdst = NULL;
  int srclock = 0;
  char *name;

  if (argstr(1, old, FAT32_MAX_PATH) < 0 || argstr(3, new, FAT32_MAX_PATH) < 0) {
    8020f490:	10400613          	li	a2,260
    8020f494:	ec840593          	addi	a1,s0,-312
    8020f498:	4505                	li	a0,1
    8020f49a:	ffffe097          	auipc	ra,0xffffe
    8020f49e:	30c080e7          	jalr	780(ra) # 8020d7a6 <argstr>
      return -ENAMETOOLONG;
    8020f4a2:	fdc00793          	li	a5,-36
  if (argstr(1, old, FAT32_MAX_PATH) < 0 || argstr(3, new, FAT32_MAX_PATH) < 0) {
    8020f4a6:	14054c63          	bltz	a0,8020f5fe <sys_renameat2+0x1a0>
    8020f4aa:	10400613          	li	a2,260
    8020f4ae:	dc040593          	addi	a1,s0,-576
    8020f4b2:	450d                	li	a0,3
    8020f4b4:	ffffe097          	auipc	ra,0xffffe
    8020f4b8:	2f2080e7          	jalr	754(ra) # 8020d7a6 <argstr>
      return -ENAMETOOLONG;
    8020f4bc:	fdc00793          	li	a5,-36
  if (argstr(1, old, FAT32_MAX_PATH) < 0 || argstr(3, new, FAT32_MAX_PATH) < 0) {
    8020f4c0:	12054f63          	bltz	a0,8020f5fe <sys_renameat2+0x1a0>
  }

  if(argfd(0, &olddirfd, &oldfp) < 0)
    8020f4c4:	db040613          	addi	a2,s0,-592
    8020f4c8:	dbc40593          	addi	a1,s0,-580
    8020f4cc:	4501                	li	a0,0
    8020f4ce:	ffffe097          	auipc	ra,0xffffe
    8020f4d2:	308080e7          	jalr	776(ra) # 8020d7d6 <argfd>
    8020f4d6:	0a055563          	bgez	a0,8020f580 <sys_renameat2+0x122>
  {
    if(old[0] != '/' && olddirfd != AT_FDCWD)
    8020f4da:	ec844703          	lbu	a4,-312(s0)
    8020f4de:	02f00793          	li	a5,47
    8020f4e2:	00f70963          	beq	a4,a5,8020f4f4 <sys_renameat2+0x96>
    8020f4e6:	dbc42683          	lw	a3,-580(s0)
    8020f4ea:	f9c00713          	li	a4,-100
    {
      return -EBADF;
    8020f4ee:	57dd                	li	a5,-9
    if(old[0] != '/' && olddirfd != AT_FDCWD)
    8020f4f0:	10e69763          	bne	a3,a4,8020f5fe <sys_renameat2+0x1a0>
    }
    olddp = p->cwd;
    8020f4f4:	0f893483          	ld	s1,248(s2)
  }

  if(argfd(2, &newdirfd, &newfp) < 0)
    8020f4f8:	da840613          	addi	a2,s0,-600
    8020f4fc:	db840593          	addi	a1,s0,-584
    8020f500:	4509                	li	a0,2
    8020f502:	ffffe097          	auipc	ra,0xffffe
    8020f506:	2d4080e7          	jalr	724(ra) # 8020d7d6 <argfd>
    8020f50a:	06055d63          	bgez	a0,8020f584 <sys_renameat2+0x126>
  {
    if(new[0] != '/' && newdirfd != AT_FDCWD)
    8020f50e:	dc044703          	lbu	a4,-576(s0)
    8020f512:	02f00793          	li	a5,47
    8020f516:	00f70963          	beq	a4,a5,8020f528 <sys_renameat2+0xca>
    8020f51a:	db842683          	lw	a3,-584(s0)
    8020f51e:	f9c00713          	li	a4,-100
    {
      return -EBADF;
    8020f522:	57dd                	li	a5,-9
    if(new[0] != '/' && newdirfd != AT_FDCWD)
    8020f524:	0ce69d63          	bne	a3,a4,8020f5fe <sys_renameat2+0x1a0>
    }
    newdp = p->cwd;
    8020f528:	0f893903          	ld	s2,248(s2)
  // if(argint(4, &flags) < 0)
  // {
  //   return -ENAMETOOLONG;
  // }
 
  if ((src = ename(olddp, old, &olddevno)) == NULL || (pdst = enameparent(newdp, new, old, &newdevno)) == NULL
    8020f52c:	da440613          	addi	a2,s0,-604
    8020f530:	ec840593          	addi	a1,s0,-312
    8020f534:	8526                	mv	a0,s1
    8020f536:	ffff5097          	auipc	ra,0xffff5
    8020f53a:	f76080e7          	jalr	-138(ra) # 802044ac <ename>
    8020f53e:	84aa                	mv	s1,a0
    8020f540:	1c050663          	beqz	a0,8020f70c <sys_renameat2+0x2ae>
    8020f544:	da040693          	addi	a3,s0,-608
    8020f548:	ec840613          	addi	a2,s0,-312
    8020f54c:	dc040593          	addi	a1,s0,-576
    8020f550:	854a                	mv	a0,s2
    8020f552:	ffff5097          	auipc	ra,0xffff5
    8020f556:	f7a080e7          	jalr	-134(ra) # 802044cc <enameparent>
    8020f55a:	892a                	mv	s2,a0
    8020f55c:	c151                	beqz	a0,8020f5e0 <sys_renameat2+0x182>
      || (name = formatname(old)) == NULL) {
    8020f55e:	ec840513          	addi	a0,s0,-312
    8020f562:	ffff4097          	auipc	ra,0xffff4
    8020f566:	d9a080e7          	jalr	-614(ra) # 802032fc <formatname>
    8020f56a:	89aa                	mv	s3,a0
    8020f56c:	c935                	beqz	a0,8020f5e0 <sys_renameat2+0x182>
    goto fail;          // src doesn't exist || dst parent doesn't exist || illegal new name
  }
  for (struct dirent *ep = pdst; ep != NULL; ep = ep->parent) {
    if (ep == src) {    // In what universe can we move a directory into its child?
    8020f56e:	07248963          	beq	s1,s2,8020f5e0 <sys_renameat2+0x182>
  for (struct dirent *ep = pdst; ep != NULL; ep = ep->parent) {
    8020f572:	87ca                	mv	a5,s2
    8020f574:	1287b783          	ld	a5,296(a5)
    8020f578:	cb81                	beqz	a5,8020f588 <sys_renameat2+0x12a>
    if (ep == src) {    // In what universe can we move a directory into its child?
    8020f57a:	fef49de3          	bne	s1,a5,8020f574 <sys_renameat2+0x116>
    8020f57e:	a08d                	j	8020f5e0 <sys_renameat2+0x182>
  struct dirent *olddp = NULL, *newdp = NULL;
    8020f580:	4481                	li	s1,0
    8020f582:	bf9d                	j	8020f4f8 <sys_renameat2+0x9a>
    8020f584:	4901                	li	s2,0
    8020f586:	b75d                	j	8020f52c <sys_renameat2+0xce>
      goto fail;
    }
  }

  uint off;
  elock(src);     // must hold child's lock before acquiring parent's, because we do so in other similar cases
    8020f588:	8526                	mv	a0,s1
    8020f58a:	ffff4097          	auipc	ra,0xffff4
    8020f58e:	4e0080e7          	jalr	1248(ra) # 80203a6a <elock>
  srclock = 1;
  elock(pdst);
    8020f592:	854a                	mv	a0,s2
    8020f594:	ffff4097          	auipc	ra,0xffff4
    8020f598:	4d6080e7          	jalr	1238(ra) # 80203a6a <elock>
  dst = dirlookup(pdst, name, &off);
    8020f59c:	d9c40613          	addi	a2,s0,-612
    8020f5a0:	85ce                	mv	a1,s3
    8020f5a2:	854a                	mv	a0,s2
    8020f5a4:	ffff5097          	auipc	ra,0xffff5
    8020f5a8:	8ac080e7          	jalr	-1876(ra) # 80203e50 <dirlookup>
    8020f5ac:	8a2a                	mv	s4,a0
  if (dst != NULL) {
    8020f5ae:	c155                	beqz	a0,8020f652 <sys_renameat2+0x1f4>
    eunlock(pdst);
    8020f5b0:	854a                	mv	a0,s2
    8020f5b2:	ffff4097          	auipc	ra,0xffff4
    8020f5b6:	4ee080e7          	jalr	1262(ra) # 80203aa0 <eunlock>
    if (src == dst) {
    8020f5ba:	01448963          	beq	s1,s4,8020f5cc <sys_renameat2+0x16e>
      goto fail;
    } else if (src->attribute & dst->attribute & ATTR_DIRECTORY) {
    8020f5be:	1004c783          	lbu	a5,256(s1)
    8020f5c2:	100a4703          	lbu	a4,256(s4)
    8020f5c6:	8ff9                	and	a5,a5,a4
    8020f5c8:	8bc1                	andi	a5,a5,16
    8020f5ca:	ebb1                	bnez	a5,8020f61e <sys_renameat2+0x1c0>

  return 0;

fail:
  if (srclock)
    eunlock(src);
    8020f5cc:	8526                	mv	a0,s1
    8020f5ce:	ffff4097          	auipc	ra,0xffff4
    8020f5d2:	4d2080e7          	jalr	1234(ra) # 80203aa0 <eunlock>
  if (dst)
    eput(dst);
    8020f5d6:	8552                	mv	a0,s4
    8020f5d8:	ffff4097          	auipc	ra,0xffff4
    8020f5dc:	516080e7          	jalr	1302(ra) # 80203aee <eput>
  if (pdst)
    8020f5e0:	00090763          	beqz	s2,8020f5ee <sys_renameat2+0x190>
    eput(pdst);
    8020f5e4:	854a                	mv	a0,s2
    8020f5e6:	ffff4097          	auipc	ra,0xffff4
    8020f5ea:	508080e7          	jalr	1288(ra) # 80203aee <eput>
  if (src)
    eput(src);
  return -1;
    8020f5ee:	57fd                	li	a5,-1
  if (src)
    8020f5f0:	c499                	beqz	s1,8020f5fe <sys_renameat2+0x1a0>
    eput(src);
    8020f5f2:	8526                	mv	a0,s1
    8020f5f4:	ffff4097          	auipc	ra,0xffff4
    8020f5f8:	4fa080e7          	jalr	1274(ra) # 80203aee <eput>
  return -1;
    8020f5fc:	57fd                	li	a5,-1

}
    8020f5fe:	853e                	mv	a0,a5
    8020f600:	26813083          	ld	ra,616(sp)
    8020f604:	26013403          	ld	s0,608(sp)
    8020f608:	25813483          	ld	s1,600(sp)
    8020f60c:	25013903          	ld	s2,592(sp)
    8020f610:	24813983          	ld	s3,584(sp)
    8020f614:	24013a03          	ld	s4,576(sp)
    8020f618:	27010113          	addi	sp,sp,624
    8020f61c:	8082                	ret
      elock(dst);
    8020f61e:	8552                	mv	a0,s4
    8020f620:	ffff4097          	auipc	ra,0xffff4
    8020f624:	44a080e7          	jalr	1098(ra) # 80203a6a <elock>
      if (!isdirempty(dst)) {    // it's ok to overwrite an empty dir
    8020f628:	8552                	mv	a0,s4
    8020f62a:	ffff5097          	auipc	ra,0xffff5
    8020f62e:	d16080e7          	jalr	-746(ra) # 80204340 <isdirempty>
    8020f632:	c579                	beqz	a0,8020f700 <sys_renameat2+0x2a2>
      elock(pdst);
    8020f634:	854a                	mv	a0,s2
    8020f636:	ffff4097          	auipc	ra,0xffff4
    8020f63a:	434080e7          	jalr	1076(ra) # 80203a6a <elock>
    eremove(dst);
    8020f63e:	8552                	mv	a0,s4
    8020f640:	ffff4097          	auipc	ra,0xffff4
    8020f644:	2b8080e7          	jalr	696(ra) # 802038f8 <eremove>
    eunlock(dst);
    8020f648:	8552                	mv	a0,s4
    8020f64a:	ffff4097          	auipc	ra,0xffff4
    8020f64e:	456080e7          	jalr	1110(ra) # 80203aa0 <eunlock>
  memmove(src->filename, name, FAT32_MAX_FILENAME);
    8020f652:	0ff00613          	li	a2,255
    8020f656:	85ce                	mv	a1,s3
    8020f658:	8526                	mv	a0,s1
    8020f65a:	ffff1097          	auipc	ra,0xffff1
    8020f65e:	77a080e7          	jalr	1914(ra) # 80200dd4 <memmove>
  emake(pdst, src, off);
    8020f662:	d9c42603          	lw	a2,-612(s0)
    8020f666:	85a6                	mv	a1,s1
    8020f668:	854a                	mv	a0,s2
    8020f66a:	ffff4097          	auipc	ra,0xffff4
    8020f66e:	d4a080e7          	jalr	-694(ra) # 802033b4 <emake>
  if (src->parent != pdst) {
    8020f672:	1284b783          	ld	a5,296(s1)
    8020f676:	01278d63          	beq	a5,s2,8020f690 <sys_renameat2+0x232>
    eunlock(pdst);
    8020f67a:	854a                	mv	a0,s2
    8020f67c:	ffff4097          	auipc	ra,0xffff4
    8020f680:	424080e7          	jalr	1060(ra) # 80203aa0 <eunlock>
    elock(src->parent);
    8020f684:	1284b503          	ld	a0,296(s1)
    8020f688:	ffff4097          	auipc	ra,0xffff4
    8020f68c:	3e2080e7          	jalr	994(ra) # 80203a6a <elock>
  eremove(src);
    8020f690:	8526                	mv	a0,s1
    8020f692:	ffff4097          	auipc	ra,0xffff4
    8020f696:	266080e7          	jalr	614(ra) # 802038f8 <eremove>
  eunlock(src->parent);
    8020f69a:	1284b503          	ld	a0,296(s1)
    8020f69e:	ffff4097          	auipc	ra,0xffff4
    8020f6a2:	402080e7          	jalr	1026(ra) # 80203aa0 <eunlock>
  struct dirent *psrc = src->parent;  // src must not be root, or it won't pass the for-loop test
    8020f6a6:	1284b983          	ld	s3,296(s1)
  src->parent = edup(pdst);
    8020f6aa:	854a                	mv	a0,s2
    8020f6ac:	ffff4097          	auipc	ra,0xffff4
    8020f6b0:	0f0080e7          	jalr	240(ra) # 8020379c <edup>
    8020f6b4:	12a4b423          	sd	a0,296(s1)
  src->off = off;
    8020f6b8:	d9c42783          	lw	a5,-612(s0)
    8020f6bc:	12f4a023          	sw	a5,288(s1)
  src->valid = 1;
    8020f6c0:	4785                	li	a5,1
    8020f6c2:	10f49b23          	sh	a5,278(s1)
  eunlock(src);
    8020f6c6:	8526                	mv	a0,s1
    8020f6c8:	ffff4097          	auipc	ra,0xffff4
    8020f6cc:	3d8080e7          	jalr	984(ra) # 80203aa0 <eunlock>
  eput(psrc);
    8020f6d0:	854e                	mv	a0,s3
    8020f6d2:	ffff4097          	auipc	ra,0xffff4
    8020f6d6:	41c080e7          	jalr	1052(ra) # 80203aee <eput>
  if (dst) {
    8020f6da:	000a0763          	beqz	s4,8020f6e8 <sys_renameat2+0x28a>
    eput(dst);
    8020f6de:	8552                	mv	a0,s4
    8020f6e0:	ffff4097          	auipc	ra,0xffff4
    8020f6e4:	40e080e7          	jalr	1038(ra) # 80203aee <eput>
  eput(pdst);
    8020f6e8:	854a                	mv	a0,s2
    8020f6ea:	ffff4097          	auipc	ra,0xffff4
    8020f6ee:	404080e7          	jalr	1028(ra) # 80203aee <eput>
  eput(src);
    8020f6f2:	8526                	mv	a0,s1
    8020f6f4:	ffff4097          	auipc	ra,0xffff4
    8020f6f8:	3fa080e7          	jalr	1018(ra) # 80203aee <eput>
  return 0;
    8020f6fc:	4781                	li	a5,0
    8020f6fe:	b701                	j	8020f5fe <sys_renameat2+0x1a0>
        eunlock(dst);
    8020f700:	8552                	mv	a0,s4
    8020f702:	ffff4097          	auipc	ra,0xffff4
    8020f706:	39e080e7          	jalr	926(ra) # 80203aa0 <eunlock>
        goto fail;
    8020f70a:	b5c9                	j	8020f5cc <sys_renameat2+0x16e>
  struct dirent *src = NULL, *dst = NULL, *pdst = NULL;
    8020f70c:	892a                	mv	s2,a0
  if (dst)
    8020f70e:	bdc9                	j	8020f5e0 <sys_renameat2+0x182>

000000008020f710 <sys_ioctl>:


uint64
sys_ioctl(void)
{
    8020f710:	715d                	addi	sp,sp,-80
    8020f712:	e486                	sd	ra,72(sp)
    8020f714:	e0a2                	sd	s0,64(sp)
    8020f716:	0880                	addi	s0,sp,80
	int fd;
	struct file *f;
	uint64 request;
	uint64 argp;

	if (argfd(0, &fd, &f) < 0 || argaddr(1, &request) < 0 || argaddr(2, &argp) < 0)
    8020f718:	fe040613          	addi	a2,s0,-32
    8020f71c:	fec40593          	addi	a1,s0,-20
    8020f720:	4501                	li	a0,0
    8020f722:	ffffe097          	auipc	ra,0xffffe
    8020f726:	0b4080e7          	jalr	180(ra) # 8020d7d6 <argfd>
		return -EBADF;
    8020f72a:	57dd                	li	a5,-9
	if (argfd(0, &fd, &f) < 0 || argaddr(1, &request) < 0 || argaddr(2, &argp) < 0)
    8020f72c:	08054063          	bltz	a0,8020f7ac <sys_ioctl+0x9c>
    8020f730:	fd840593          	addi	a1,s0,-40
    8020f734:	4505                	li	a0,1
    8020f736:	ffffe097          	auipc	ra,0xffffe
    8020f73a:	04e080e7          	jalr	78(ra) # 8020d784 <argaddr>
		return -EBADF;
    8020f73e:	57dd                	li	a5,-9
	if (argfd(0, &fd, &f) < 0 || argaddr(1, &request) < 0 || argaddr(2, &argp) < 0)
    8020f740:	06054663          	bltz	a0,8020f7ac <sys_ioctl+0x9c>
    8020f744:	fd040593          	addi	a1,s0,-48
    8020f748:	4509                	li	a0,2
    8020f74a:	ffffe097          	auipc	ra,0xffffe
    8020f74e:	03a080e7          	jalr	58(ra) # 8020d784 <argaddr>
    8020f752:	0c054163          	bltz	a0,8020f814 <sys_ioctl+0x104>

	if (f->type != FD_DEVICE&&f->type != FD_PIPE){
    8020f756:	fe043783          	ld	a5,-32(s0)
    8020f75a:	4398                	lw	a4,0(a5)
    8020f75c:	9b75                	andi	a4,a4,-3
    8020f75e:	4685                	li	a3,1
               //__debug_info("[sys_ioctl] fd:%d f->type not device or pipe\n",fd);
		return -EPERM;
    8020f760:	57fd                	li	a5,-1
	if (f->type != FD_DEVICE&&f->type != FD_PIPE){
    8020f762:	04d71563          	bne	a4,a3,8020f7ac <sys_ioctl+0x9c>
        }

  // __debug_info("[sys_ioctl] request = %p\n", request);
	switch (request) {
    8020f766:	fd843683          	ld	a3,-40(s0)
    8020f76a:	6795                	lui	a5,0x5
    8020f76c:	40178793          	addi	a5,a5,1025 # 5401 <_entry-0x801fabff>
    8020f770:	04f68d63          	beq	a3,a5,8020f7ca <sys_ioctl+0xba>
    8020f774:	6715                	lui	a4,0x5
    8020f776:	41370713          	addi	a4,a4,1043 # 5413 <_entry-0x801fabed>
    8020f77a:	4781                	li	a5,0
    8020f77c:	02e69863          	bne	a3,a4,8020f7ac <sys_ioctl+0x9c>
	case TIOCGWINSZ: {
		struct winsize win = {
    8020f780:	fa042e23          	sw	zero,-68(s0)
    8020f784:	47e1                	li	a5,24
    8020f786:	faf41c23          	sh	a5,-72(s0)
    8020f78a:	05000793          	li	a5,80
    8020f78e:	faf41d23          	sh	a5,-70(s0)
			.ws_row = 24,
			.ws_col = 80,
		};
		if (either_copyout(1, argp, (char*)&win, sizeof(win)) < 0){
    8020f792:	46a1                	li	a3,8
    8020f794:	fb840613          	addi	a2,s0,-72
    8020f798:	fd043583          	ld	a1,-48(s0)
    8020f79c:	4505                	li	a0,1
    8020f79e:	ffffc097          	auipc	ra,0xffffc
    8020f7a2:	298080e7          	jalr	664(ra) # 8020ba36 <either_copyout>
	}
	default:
		return 0;
	}

	return 0;
    8020f7a6:	4781                	li	a5,0
		if (either_copyout(1, argp, (char*)&win, sizeof(win)) < 0){
    8020f7a8:	00054763          	bltz	a0,8020f7b6 <sys_ioctl+0xa6>
}
    8020f7ac:	853e                	mv	a0,a5
    8020f7ae:	60a6                	ld	ra,72(sp)
    8020f7b0:	6406                	ld	s0,64(sp)
    8020f7b2:	6161                	addi	sp,sp,80
    8020f7b4:	8082                	ret
      __debug_info("[sys_ioctl] copyout1\n");
    8020f7b6:	00007517          	auipc	a0,0x7
    8020f7ba:	88250513          	addi	a0,a0,-1918 # 80216038 <UNAME_VERSION+0x1f0>
    8020f7be:	ffffa097          	auipc	ra,0xffffa
    8020f7c2:	cec080e7          	jalr	-788(ra) # 802094aa <__debug_info>
			return -EFAULT;
    8020f7c6:	57c9                	li	a5,-14
    8020f7c8:	b7d5                	j	8020f7ac <sys_ioctl+0x9c>
		struct termios terminfo = {
    8020f7ca:	00007797          	auipc	a5,0x7
    8020f7ce:	91678793          	addi	a5,a5,-1770 # 802160e0 <UNAME_VERSION+0x298>
    8020f7d2:	6398                	ld	a4,0(a5)
    8020f7d4:	fae43c23          	sd	a4,-72(s0)
    8020f7d8:	6798                	ld	a4,8(a5)
    8020f7da:	fce43023          	sd	a4,-64(s0)
    8020f7de:	0107d783          	lhu	a5,16(a5)
    8020f7e2:	fcf41423          	sh	a5,-56(s0)
		if (either_copyout(1, argp, (char*)&terminfo, sizeof(terminfo)) < 0){
    8020f7e6:	46c9                	li	a3,18
    8020f7e8:	fb840613          	addi	a2,s0,-72
    8020f7ec:	fd043583          	ld	a1,-48(s0)
    8020f7f0:	4505                	li	a0,1
    8020f7f2:	ffffc097          	auipc	ra,0xffffc
    8020f7f6:	244080e7          	jalr	580(ra) # 8020ba36 <either_copyout>
	return 0;
    8020f7fa:	4781                	li	a5,0
		if (either_copyout(1, argp, (char*)&terminfo, sizeof(terminfo)) < 0){
    8020f7fc:	fa0558e3          	bgez	a0,8020f7ac <sys_ioctl+0x9c>
      __debug_info("[sys_ioctl] copyout2\n");
    8020f800:	00007517          	auipc	a0,0x7
    8020f804:	85050513          	addi	a0,a0,-1968 # 80216050 <UNAME_VERSION+0x208>
    8020f808:	ffffa097          	auipc	ra,0xffffa
    8020f80c:	ca2080e7          	jalr	-862(ra) # 802094aa <__debug_info>
			return -EFAULT;
    8020f810:	57c9                	li	a5,-14
    8020f812:	bf69                	j	8020f7ac <sys_ioctl+0x9c>
		return -EBADF;
    8020f814:	57dd                	li	a5,-9
    8020f816:	bf59                	j	8020f7ac <sys_ioctl+0x9c>

000000008020f818 <sys_fcntl>:


uint64
sys_fcntl(void)
{
    8020f818:	7139                	addi	sp,sp,-64
    8020f81a:	fc06                	sd	ra,56(sp)
    8020f81c:	f822                	sd	s0,48(sp)
    8020f81e:	f426                	sd	s1,40(sp)
    8020f820:	0080                	addi	s0,sp,64
  int fd;
  int cmd;
  uint64 arg;
  struct file* f;
  struct proc* p = myproc();
    8020f822:	ffffd097          	auipc	ra,0xffffd
    8020f826:	b90080e7          	jalr	-1136(ra) # 8020c3b2 <myproc>
    8020f82a:	84aa                	mv	s1,a0
  if(argfd(0, &fd, &f) < 0)
    8020f82c:	fc840613          	addi	a2,s0,-56
    8020f830:	fdc40593          	addi	a1,s0,-36
    8020f834:	4501                	li	a0,0
    8020f836:	ffffe097          	auipc	ra,0xffffe
    8020f83a:	fa0080e7          	jalr	-96(ra) # 8020d7d6 <argfd>
    return -1;
    8020f83e:	57fd                	li	a5,-1
  if(argfd(0, &fd, &f) < 0)
    8020f840:	04054363          	bltz	a0,8020f886 <sys_fcntl+0x6e>
  if(argint(1, &cmd) < 0)
    8020f844:	fd840593          	addi	a1,s0,-40
    8020f848:	4505                	li	a0,1
    8020f84a:	ffffe097          	auipc	ra,0xffffe
    8020f84e:	f18080e7          	jalr	-232(ra) # 8020d762 <argint>
    return -1;
    8020f852:	57fd                	li	a5,-1
  if(argint(1, &cmd) < 0)
    8020f854:	02054963          	bltz	a0,8020f886 <sys_fcntl+0x6e>
  if(argaddr(2, &arg) < 0)
    8020f858:	fd040593          	addi	a1,s0,-48
    8020f85c:	4509                	li	a0,2
    8020f85e:	ffffe097          	auipc	ra,0xffffe
    8020f862:	f26080e7          	jalr	-218(ra) # 8020d784 <argaddr>
    8020f866:	0a054a63          	bltz	a0,8020f91a <sys_fcntl+0x102>
    return -1;
   //printf("[sys fcntl]fd:%d cmd:%d arg:%p\n",fd,cmd,arg);
  if(cmd == F_GETFD){
    8020f86a:	fd842703          	lw	a4,-40(s0)
    8020f86e:	4785                	li	a5,1
    8020f870:	02f70163          	beq	a4,a5,8020f892 <sys_fcntl+0x7a>
    return p->exec_close[fd];
  }else if(cmd == F_SETFD){
    8020f874:	4789                	li	a5,2
    8020f876:	02f70563          	beq	a4,a5,8020f8a0 <sys_fcntl+0x88>
    p->exec_close[fd] = arg;
  }else if(cmd == F_DUPFD){
    8020f87a:	cf0d                	beqz	a4,8020f8b4 <sys_fcntl+0x9c>
      return fd;
    }
    filedup(f);
    //__debug_warn("[sys fcntl]return fd:%d\n",fd);
    return fd;
  }else if(cmd == F_DUPFD_CLOEXEC){
    8020f87c:	40600693          	li	a3,1030
    filedup(f);
    p->exec_close[fd] = 1;
    //__debug_warn("[sys fcntl]return fd:%d\n",fd);
    return fd;
  }
  return 0;
    8020f880:	4781                	li	a5,0
  }else if(cmd == F_DUPFD_CLOEXEC){
    8020f882:	04d70f63          	beq	a4,a3,8020f8e0 <sys_fcntl+0xc8>
}
    8020f886:	853e                	mv	a0,a5
    8020f888:	70e2                	ld	ra,56(sp)
    8020f88a:	7442                	ld	s0,48(sp)
    8020f88c:	74a2                	ld	s1,40(sp)
    8020f88e:	6121                	addi	sp,sp,64
    8020f890:	8082                	ret
    return p->exec_close[fd];
    8020f892:	fdc42703          	lw	a4,-36(s0)
    8020f896:	78fc                	ld	a5,240(s1)
    8020f898:	070a                	slli	a4,a4,0x2
    8020f89a:	97ba                	add	a5,a5,a4
    8020f89c:	439c                	lw	a5,0(a5)
    8020f89e:	b7e5                	j	8020f886 <sys_fcntl+0x6e>
    p->exec_close[fd] = arg;
    8020f8a0:	fdc42703          	lw	a4,-36(s0)
    8020f8a4:	78fc                	ld	a5,240(s1)
    8020f8a6:	070a                	slli	a4,a4,0x2
    8020f8a8:	97ba                	add	a5,a5,a4
    8020f8aa:	fd043703          	ld	a4,-48(s0)
    8020f8ae:	c398                	sw	a4,0(a5)
  return 0;
    8020f8b0:	4781                	li	a5,0
    8020f8b2:	bfd1                	j	8020f886 <sys_fcntl+0x6e>
    if((fd=fdallocfrom(f,arg)) < 0){
    8020f8b4:	fd042583          	lw	a1,-48(s0)
    8020f8b8:	fc843503          	ld	a0,-56(s0)
    8020f8bc:	fffff097          	auipc	ra,0xfffff
    8020f8c0:	e06080e7          	jalr	-506(ra) # 8020e6c2 <fdallocfrom>
    8020f8c4:	fca42e23          	sw	a0,-36(s0)
      return fd;
    8020f8c8:	87aa                	mv	a5,a0
    if((fd=fdallocfrom(f,arg)) < 0){
    8020f8ca:	fa054ee3          	bltz	a0,8020f886 <sys_fcntl+0x6e>
    filedup(f);
    8020f8ce:	fc843503          	ld	a0,-56(s0)
    8020f8d2:	ffff7097          	auipc	ra,0xffff7
    8020f8d6:	97c080e7          	jalr	-1668(ra) # 8020624e <filedup>
    return fd;
    8020f8da:	fdc42783          	lw	a5,-36(s0)
    8020f8de:	b765                	j	8020f886 <sys_fcntl+0x6e>
    if((fd=fdallocfrom(f,arg)) < 0){
    8020f8e0:	fd042583          	lw	a1,-48(s0)
    8020f8e4:	fc843503          	ld	a0,-56(s0)
    8020f8e8:	fffff097          	auipc	ra,0xfffff
    8020f8ec:	dda080e7          	jalr	-550(ra) # 8020e6c2 <fdallocfrom>
    8020f8f0:	87aa                	mv	a5,a0
    8020f8f2:	fca42e23          	sw	a0,-36(s0)
    8020f8f6:	f80548e3          	bltz	a0,8020f886 <sys_fcntl+0x6e>
    filedup(f);
    8020f8fa:	fc843503          	ld	a0,-56(s0)
    8020f8fe:	ffff7097          	auipc	ra,0xffff7
    8020f902:	950080e7          	jalr	-1712(ra) # 8020624e <filedup>
    p->exec_close[fd] = 1;
    8020f906:	fdc42703          	lw	a4,-36(s0)
    8020f90a:	78fc                	ld	a5,240(s1)
    8020f90c:	070a                	slli	a4,a4,0x2
    8020f90e:	97ba                	add	a5,a5,a4
    8020f910:	4705                	li	a4,1
    8020f912:	c398                	sw	a4,0(a5)
    return fd;
    8020f914:	fdc42783          	lw	a5,-36(s0)
    8020f918:	b7bd                	j	8020f886 <sys_fcntl+0x6e>
    return -1;
    8020f91a:	57fd                	li	a5,-1
    8020f91c:	b7ad                	j	8020f886 <sys_fcntl+0x6e>

000000008020f91e <sys_getdents64>:


uint64
sys_getdents64(void) 
{
    8020f91e:	7179                	addi	sp,sp,-48
    8020f920:	f406                	sd	ra,40(sp)
    8020f922:	f022                	sd	s0,32(sp)
    8020f924:	1800                	addi	s0,sp,48
  struct file* fp;
  int fd;
  uint64 buf;
  uint64 len;

  if(argfd(0, &fd, &fp) < 0 || argaddr(1, &buf) < 0 || argaddr(2, &len) < 0) {
    8020f926:	fe840613          	addi	a2,s0,-24
    8020f92a:	fe440593          	addi	a1,s0,-28
    8020f92e:	4501                	li	a0,0
    8020f930:	ffffe097          	auipc	ra,0xffffe
    8020f934:	ea6080e7          	jalr	-346(ra) # 8020d7d6 <argfd>
    return -1;
    8020f938:	57fd                	li	a5,-1
  if(argfd(0, &fd, &fp) < 0 || argaddr(1, &buf) < 0 || argaddr(2, &len) < 0) {
    8020f93a:	04054163          	bltz	a0,8020f97c <sys_getdents64+0x5e>
    8020f93e:	fd840593          	addi	a1,s0,-40
    8020f942:	4505                	li	a0,1
    8020f944:	ffffe097          	auipc	ra,0xffffe
    8020f948:	e40080e7          	jalr	-448(ra) # 8020d784 <argaddr>
    return -1;
    8020f94c:	57fd                	li	a5,-1
  if(argfd(0, &fd, &fp) < 0 || argaddr(1, &buf) < 0 || argaddr(2, &len) < 0) {
    8020f94e:	02054763          	bltz	a0,8020f97c <sys_getdents64+0x5e>
    8020f952:	fd040593          	addi	a1,s0,-48
    8020f956:	4509                	li	a0,2
    8020f958:	ffffe097          	auipc	ra,0xffffe
    8020f95c:	e2c080e7          	jalr	-468(ra) # 8020d784 <argaddr>
    return -1;
    8020f960:	57fd                	li	a5,-1
  if(argfd(0, &fd, &fp) < 0 || argaddr(1, &buf) < 0 || argaddr(2, &len) < 0) {
    8020f962:	00054d63          	bltz	a0,8020f97c <sys_getdents64+0x5e>
  }

  return dirent_next(fp, buf, len);
    8020f966:	fd042603          	lw	a2,-48(s0)
    8020f96a:	fd843583          	ld	a1,-40(s0)
    8020f96e:	fe843503          	ld	a0,-24(s0)
    8020f972:	ffff7097          	auipc	ra,0xffff7
    8020f976:	390080e7          	jalr	912(ra) # 80206d02 <dirent_next>
    8020f97a:	87aa                	mv	a5,a0
}
    8020f97c:	853e                	mv	a0,a5
    8020f97e:	70a2                	ld	ra,40(sp)
    8020f980:	7402                	ld	s0,32(sp)
    8020f982:	6145                	addi	sp,sp,48
    8020f984:	8082                	ret

000000008020f986 <sys_pipe2>:

uint64
sys_pipe2(void)
{
    8020f986:	7139                	addi	sp,sp,-64
    8020f988:	fc06                	sd	ra,56(sp)
    8020f98a:	f822                	sd	s0,48(sp)
    8020f98c:	f426                	sd	s1,40(sp)
    8020f98e:	0080                	addi	s0,sp,64
  uint64 fdarray; // user pointer to array of two integers
  struct file *rf, *wf;
  int fd0, fd1;
  struct proc *p = myproc();
    8020f990:	ffffd097          	auipc	ra,0xffffd
    8020f994:	a22080e7          	jalr	-1502(ra) # 8020c3b2 <myproc>
    8020f998:	84aa                	mv	s1,a0

  if(argaddr(0, &fdarray) < 0)
    8020f99a:	fd840593          	addi	a1,s0,-40
    8020f99e:	4501                	li	a0,0
    8020f9a0:	ffffe097          	auipc	ra,0xffffe
    8020f9a4:	de4080e7          	jalr	-540(ra) # 8020d784 <argaddr>
    return -1;
    8020f9a8:	57fd                	li	a5,-1
  if(argaddr(0, &fdarray) < 0)
    8020f9aa:	10054963          	bltz	a0,8020fabc <sys_pipe2+0x136>
  if(pipealloc(&rf, &wf) < 0){
    8020f9ae:	fc840593          	addi	a1,s0,-56
    8020f9b2:	fd040513          	addi	a0,s0,-48
    8020f9b6:	ffff5097          	auipc	ra,0xffff5
    8020f9ba:	22c080e7          	jalr	556(ra) # 80204be2 <pipealloc>
    8020f9be:	0a054763          	bltz	a0,8020fa6c <sys_pipe2+0xe6>
    __debug_warn("[pipe2] pipe alloc failed\n");
    return -1;
  }
  fd0 = -1;
    8020f9c2:	57fd                	li	a5,-1
    8020f9c4:	fcf42223          	sw	a5,-60(s0)
  if((fd0 = fdalloc(rf)) < 0 || (fd1 = fdalloc(wf)) < 0){
    8020f9c8:	fd043503          	ld	a0,-48(s0)
    8020f9cc:	fffff097          	auipc	ra,0xfffff
    8020f9d0:	d50080e7          	jalr	-688(ra) # 8020e71c <fdalloc>
    8020f9d4:	fca42223          	sw	a0,-60(s0)
    8020f9d8:	0a054d63          	bltz	a0,8020fa92 <sys_pipe2+0x10c>
    8020f9dc:	fc843503          	ld	a0,-56(s0)
    8020f9e0:	fffff097          	auipc	ra,0xfffff
    8020f9e4:	d3c080e7          	jalr	-708(ra) # 8020e71c <fdalloc>
    8020f9e8:	fca42023          	sw	a0,-64(s0)
    8020f9ec:	08054a63          	bltz	a0,8020fa80 <sys_pipe2+0xfa>
    __debug_warn("[pipe2] fd alloc failed\n");
    return -1;
  }
  // if(copyout(p->pagetable, fdarray, (char*)&fd0, sizeof(fd0)) < 0 ||
  //    copyout(p->pagetable, fdarray+sizeof(fd0), (char *)&fd1, sizeof(fd1)) < 0){
  if(either_copyout(1, fdarray, (char*)&fd0, sizeof(fd0)) < 0 ||
    8020f9f0:	4691                	li	a3,4
    8020f9f2:	fc440613          	addi	a2,s0,-60
    8020f9f6:	fd843583          	ld	a1,-40(s0)
    8020f9fa:	4505                	li	a0,1
    8020f9fc:	ffffc097          	auipc	ra,0xffffc
    8020fa00:	03a080e7          	jalr	58(ra) # 8020ba36 <either_copyout>
    8020fa04:	02054063          	bltz	a0,8020fa24 <sys_pipe2+0x9e>
     either_copyout(1, fdarray+sizeof(fd0), (char *)&fd1, sizeof(fd1)) < 0){
    8020fa08:	4691                	li	a3,4
    8020fa0a:	fc040613          	addi	a2,s0,-64
    8020fa0e:	fd843583          	ld	a1,-40(s0)
    8020fa12:	0591                	addi	a1,a1,4
    8020fa14:	4505                	li	a0,1
    8020fa16:	ffffc097          	auipc	ra,0xffffc
    8020fa1a:	020080e7          	jalr	32(ra) # 8020ba36 <either_copyout>
    fileclose(wf);
    __debug_warn("[pipe2] copy failed\n");
    return -1;
  }
  //printf("[pipe] fd0:%d fd1:%d\n",fd0,fd1);
  return 0;
    8020fa1e:	4781                	li	a5,0
  if(either_copyout(1, fdarray, (char*)&fd0, sizeof(fd0)) < 0 ||
    8020fa20:	08055e63          	bgez	a0,8020fabc <sys_pipe2+0x136>
    p->ofile[fd0] = 0;
    8020fa24:	fc442703          	lw	a4,-60(s0)
    8020fa28:	74fc                	ld	a5,232(s1)
    8020fa2a:	070e                	slli	a4,a4,0x3
    8020fa2c:	97ba                	add	a5,a5,a4
    8020fa2e:	0007b023          	sd	zero,0(a5)
    p->ofile[fd1] = 0;
    8020fa32:	fc042703          	lw	a4,-64(s0)
    8020fa36:	74fc                	ld	a5,232(s1)
    8020fa38:	070e                	slli	a4,a4,0x3
    8020fa3a:	97ba                	add	a5,a5,a4
    8020fa3c:	0007b023          	sd	zero,0(a5)
    fileclose(rf);
    8020fa40:	fd043503          	ld	a0,-48(s0)
    8020fa44:	ffff7097          	auipc	ra,0xffff7
    8020fa48:	858080e7          	jalr	-1960(ra) # 8020629c <fileclose>
    fileclose(wf);
    8020fa4c:	fc843503          	ld	a0,-56(s0)
    8020fa50:	ffff7097          	auipc	ra,0xffff7
    8020fa54:	84c080e7          	jalr	-1972(ra) # 8020629c <fileclose>
    __debug_warn("[pipe2] copy failed\n");
    8020fa58:	00006517          	auipc	a0,0x6
    8020fa5c:	65050513          	addi	a0,a0,1616 # 802160a8 <UNAME_VERSION+0x260>
    8020fa60:	ffffa097          	auipc	ra,0xffffa
    8020fa64:	c10080e7          	jalr	-1008(ra) # 80209670 <__debug_warn>
    return -1;
    8020fa68:	57fd                	li	a5,-1
    8020fa6a:	a889                	j	8020fabc <sys_pipe2+0x136>
    __debug_warn("[pipe2] pipe alloc failed\n");
    8020fa6c:	00006517          	auipc	a0,0x6
    8020fa70:	5fc50513          	addi	a0,a0,1532 # 80216068 <UNAME_VERSION+0x220>
    8020fa74:	ffffa097          	auipc	ra,0xffffa
    8020fa78:	bfc080e7          	jalr	-1028(ra) # 80209670 <__debug_warn>
    return -1;
    8020fa7c:	57fd                	li	a5,-1
    8020fa7e:	a83d                	j	8020fabc <sys_pipe2+0x136>
    if(fd0 >= 0)
    8020fa80:	fc442783          	lw	a5,-60(s0)
    8020fa84:	0007c763          	bltz	a5,8020fa92 <sys_pipe2+0x10c>
      p->ofile[fd0] = 0;
    8020fa88:	74f8                	ld	a4,232(s1)
    8020fa8a:	078e                	slli	a5,a5,0x3
    8020fa8c:	97ba                	add	a5,a5,a4
    8020fa8e:	0007b023          	sd	zero,0(a5)
    fileclose(rf);
    8020fa92:	fd043503          	ld	a0,-48(s0)
    8020fa96:	ffff7097          	auipc	ra,0xffff7
    8020fa9a:	806080e7          	jalr	-2042(ra) # 8020629c <fileclose>
    fileclose(wf);
    8020fa9e:	fc843503          	ld	a0,-56(s0)
    8020faa2:	ffff6097          	auipc	ra,0xffff6
    8020faa6:	7fa080e7          	jalr	2042(ra) # 8020629c <fileclose>
    __debug_warn("[pipe2] fd alloc failed\n");
    8020faaa:	00006517          	auipc	a0,0x6
    8020faae:	5de50513          	addi	a0,a0,1502 # 80216088 <UNAME_VERSION+0x240>
    8020fab2:	ffffa097          	auipc	ra,0xffffa
    8020fab6:	bbe080e7          	jalr	-1090(ra) # 80209670 <__debug_warn>
    return -1;
    8020faba:	57fd                	li	a5,-1
}
    8020fabc:	853e                	mv	a0,a5
    8020fabe:	70e2                	ld	ra,56(sp)
    8020fac0:	7442                	ld	s0,48(sp)
    8020fac2:	74a2                	ld	s1,40(sp)
    8020fac4:	6121                	addi	sp,sp,64
    8020fac6:	8082                	ret

000000008020fac8 <sys_readlinkat>:

uint64
sys_readlinkat(void)
{
    8020fac8:	714d                	addi	sp,sp,-336
    8020faca:	e686                	sd	ra,328(sp)
    8020facc:	e2a2                	sd	s0,320(sp)
    8020face:	fe26                	sd	s1,312(sp)
    8020fad0:	0a80                	addi	s0,sp,336
  struct file* df;
  struct dirent *dp = NULL;
  char pathname[FAT32_MAX_PATH+1];
  uint64 buf;
  int bufsz;
  struct proc *p = myproc();
    8020fad2:	ffffd097          	auipc	ra,0xffffd
    8020fad6:	8e0080e7          	jalr	-1824(ra) # 8020c3b2 <myproc>
    8020fada:	84aa                	mv	s1,a0
  int devno = -1;
    8020fadc:	57fd                	li	a5,-1
    8020fade:	eaf42c23          	sw	a5,-328(s0)

  if(argint(3,&bufsz)<0){
    8020fae2:	ebc40593          	addi	a1,s0,-324
    8020fae6:	450d                	li	a0,3
    8020fae8:	ffffe097          	auipc	ra,0xffffe
    8020faec:	c7a080e7          	jalr	-902(ra) # 8020d762 <argint>
    return -1;
    8020faf0:	57fd                	li	a5,-1
  if(argint(3,&bufsz)<0){
    8020faf2:	06054563          	bltz	a0,8020fb5c <sys_readlinkat+0x94>
  }
  if(argaddr(2,&buf)<0){
    8020faf6:	ec040593          	addi	a1,s0,-320
    8020fafa:	4509                	li	a0,2
    8020fafc:	ffffe097          	auipc	ra,0xffffe
    8020fb00:	c88080e7          	jalr	-888(ra) # 8020d784 <argaddr>
    return -1;
    8020fb04:	57fd                	li	a5,-1
  if(argaddr(2,&buf)<0){
    8020fb06:	04054b63          	bltz	a0,8020fb5c <sys_readlinkat+0x94>
  }
  if(argstr(1,pathname,FAT32_MAX_PATH+1)<0){
    8020fb0a:	10500613          	li	a2,261
    8020fb0e:	ec840593          	addi	a1,s0,-312
    8020fb12:	4505                	li	a0,1
    8020fb14:	ffffe097          	auipc	ra,0xffffe
    8020fb18:	c92080e7          	jalr	-878(ra) # 8020d7a6 <argstr>
    return -1;
    8020fb1c:	57fd                	li	a5,-1
  if(argstr(1,pathname,FAT32_MAX_PATH+1)<0){
    8020fb1e:	02054f63          	bltz	a0,8020fb5c <sys_readlinkat+0x94>
  }
  if(argfd(0,&dirfd,&df)<0){
    8020fb22:	fd040613          	addi	a2,s0,-48
    8020fb26:	fdc40593          	addi	a1,s0,-36
    8020fb2a:	4501                	li	a0,0
    8020fb2c:	ffffe097          	auipc	ra,0xffffe
    8020fb30:	caa080e7          	jalr	-854(ra) # 8020d7d6 <argfd>
    8020fb34:	02054a63          	bltz	a0,8020fb68 <sys_readlinkat+0xa0>
    if(dirfd!=AT_FDCWD&&pathname[0]!='/'){
      return -1;
    }
    dp = p->cwd;
  }else{
    dp = df->ep;
    8020fb38:	fd043783          	ld	a5,-48(s0)
    8020fb3c:	7788                	ld	a0,40(a5)
  }

  //if(dirfd>=0)print_f_info(df);
  //printf("[readlinkat] pathname:%s\n",pathname);
  //printf("[readlinkat] buf:%p bufsz:%p\n",buf,bufsz);
  struct dirent* ep = ename(dp, pathname, &devno);
    8020fb3e:	eb840613          	addi	a2,s0,-328
    8020fb42:	ec840593          	addi	a1,s0,-312
    8020fb46:	ffff5097          	auipc	ra,0xffff5
    8020fb4a:	966080e7          	jalr	-1690(ra) # 802044ac <ename>

  if(ep == selfexe){
    8020fb4e:	0515e717          	auipc	a4,0x515e
    8020fb52:	46273703          	ld	a4,1122(a4) # 8536dfb0 <selfexe>
      return -1;
    }
    return 0;
  }
  //__debug_info("[sys_readlinkat] pathname not matched\n");
  return -1;
    8020fb56:	57fd                	li	a5,-1
  if(ep == selfexe){
    8020fb58:	02a70763          	beq	a4,a0,8020fb86 <sys_readlinkat+0xbe>
}
    8020fb5c:	853e                	mv	a0,a5
    8020fb5e:	60b6                	ld	ra,328(sp)
    8020fb60:	6416                	ld	s0,320(sp)
    8020fb62:	74f2                	ld	s1,312(sp)
    8020fb64:	6171                	addi	sp,sp,336
    8020fb66:	8082                	ret
    if(dirfd!=AT_FDCWD&&pathname[0]!='/'){
    8020fb68:	fdc42703          	lw	a4,-36(s0)
    8020fb6c:	f9c00793          	li	a5,-100
    8020fb70:	00f70963          	beq	a4,a5,8020fb82 <sys_readlinkat+0xba>
    8020fb74:	ec844683          	lbu	a3,-312(s0)
    8020fb78:	02f00713          	li	a4,47
      return -1;
    8020fb7c:	57fd                	li	a5,-1
    if(dirfd!=AT_FDCWD&&pathname[0]!='/'){
    8020fb7e:	fce69fe3          	bne	a3,a4,8020fb5c <sys_readlinkat+0x94>
    dp = p->cwd;
    8020fb82:	7ce8                	ld	a0,248(s1)
    8020fb84:	bf6d                	j	8020fb3e <sys_readlinkat+0x76>
    if(either_copyout(1,buf,myproc()->name,bufsz)<0){
    8020fb86:	ec043483          	ld	s1,-320(s0)
    8020fb8a:	ffffd097          	auipc	ra,0xffffd
    8020fb8e:	828080e7          	jalr	-2008(ra) # 8020c3b2 <myproc>
    8020fb92:	ebc42683          	lw	a3,-324(s0)
    8020fb96:	10050613          	addi	a2,a0,256
    8020fb9a:	85a6                	mv	a1,s1
    8020fb9c:	4505                	li	a0,1
    8020fb9e:	ffffc097          	auipc	ra,0xffffc
    8020fba2:	e98080e7          	jalr	-360(ra) # 8020ba36 <either_copyout>
    return 0;
    8020fba6:	4781                	li	a5,0
    if(either_copyout(1,buf,myproc()->name,bufsz)<0){
    8020fba8:	fa055ae3          	bgez	a0,8020fb5c <sys_readlinkat+0x94>
      __debug_info("[sys_readlinkat] copyout error\n");
    8020fbac:	00006517          	auipc	a0,0x6
    8020fbb0:	51450513          	addi	a0,a0,1300 # 802160c0 <UNAME_VERSION+0x278>
    8020fbb4:	ffffa097          	auipc	ra,0xffffa
    8020fbb8:	8f6080e7          	jalr	-1802(ra) # 802094aa <__debug_info>
      return -1;
    8020fbbc:	57fd                	li	a5,-1
    8020fbbe:	bf79                	j	8020fb5c <sys_readlinkat+0x94>

000000008020fbc0 <sys_fsync>:


uint64
sys_fsync(void)
{
    8020fbc0:	1141                	addi	sp,sp,-16
    8020fbc2:	e422                	sd	s0,8(sp)
    8020fbc4:	0800                	addi	s0,sp,16
  return 0;
}
    8020fbc6:	4501                	li	a0,0
    8020fbc8:	6422                	ld	s0,8(sp)
    8020fbca:	0141                	addi	sp,sp,16
    8020fbcc:	8082                	ret

000000008020fbce <sys_sendfile>:

uint64 
sys_sendfile(void)
{
    8020fbce:	7139                	addi	sp,sp,-64
    8020fbd0:	fc06                	sd	ra,56(sp)
    8020fbd2:	f822                	sd	s0,48(sp)
    8020fbd4:	0080                	addi	s0,sp,64
  int in_fd;
  struct file *fout;
  struct file *fin;
  uint64 offset;
  uint64 count;
  if(argfd(0, &out_fd, &fout) < 0)
    8020fbd6:	fe040613          	addi	a2,s0,-32
    8020fbda:	fec40593          	addi	a1,s0,-20
    8020fbde:	4501                	li	a0,0
    8020fbe0:	ffffe097          	auipc	ra,0xffffe
    8020fbe4:	bf6080e7          	jalr	-1034(ra) # 8020d7d6 <argfd>
  {
    return -1;
    8020fbe8:	57fd                	li	a5,-1
  if(argfd(0, &out_fd, &fout) < 0)
    8020fbea:	04054f63          	bltz	a0,8020fc48 <sys_sendfile+0x7a>
  }
  if(argfd(1, &in_fd, &fin) < 0)
    8020fbee:	fd840613          	addi	a2,s0,-40
    8020fbf2:	fe840593          	addi	a1,s0,-24
    8020fbf6:	4505                	li	a0,1
    8020fbf8:	ffffe097          	auipc	ra,0xffffe
    8020fbfc:	bde080e7          	jalr	-1058(ra) # 8020d7d6 <argfd>
  {
    return -1;
    8020fc00:	57fd                	li	a5,-1
  if(argfd(1, &in_fd, &fin) < 0)
    8020fc02:	04054363          	bltz	a0,8020fc48 <sys_sendfile+0x7a>
  }
  if(argaddr(2, &offset) < 0)
    8020fc06:	fd040593          	addi	a1,s0,-48
    8020fc0a:	4509                	li	a0,2
    8020fc0c:	ffffe097          	auipc	ra,0xffffe
    8020fc10:	b78080e7          	jalr	-1160(ra) # 8020d784 <argaddr>
  {
    return -1;
    8020fc14:	57fd                	li	a5,-1
  if(argaddr(2, &offset) < 0)
    8020fc16:	02054963          	bltz	a0,8020fc48 <sys_sendfile+0x7a>
  }
  if(argaddr(3, &count) < 0)
    8020fc1a:	fc840593          	addi	a1,s0,-56
    8020fc1e:	450d                	li	a0,3
    8020fc20:	ffffe097          	auipc	ra,0xffffe
    8020fc24:	b64080e7          	jalr	-1180(ra) # 8020d784 <argaddr>
  {
    return -1;
    8020fc28:	57fd                	li	a5,-1
  if(argaddr(3, &count) < 0)
    8020fc2a:	00054f63          	bltz	a0,8020fc48 <sys_sendfile+0x7a>
  }
  //__debug_info("out_fd: %d, in_fd: %d, offset: %p, count: %p\n", out_fd, in_fd, offset, count);
  
  return filesend(fin,fout,offset,count);
    8020fc2e:	fc843683          	ld	a3,-56(s0)
    8020fc32:	fd043603          	ld	a2,-48(s0)
    8020fc36:	fe043583          	ld	a1,-32(s0)
    8020fc3a:	fd843503          	ld	a0,-40(s0)
    8020fc3e:	ffff7097          	auipc	ra,0xffff7
    8020fc42:	e46080e7          	jalr	-442(ra) # 80206a84 <filesend>
    8020fc46:	87aa                	mv	a5,a0
}
    8020fc48:	853e                	mv	a0,a5
    8020fc4a:	70e2                	ld	ra,56(sp)
    8020fc4c:	7442                	ld	s0,48(sp)
    8020fc4e:	6121                	addi	sp,sp,64
    8020fc50:	8082                	ret

000000008020fc52 <sys_clock_gettime>:
#include "include/file.h"
#include "include/errno.h"
#include "include/timer.h"

uint64
sys_clock_gettime(void){
    8020fc52:	7179                	addi	sp,sp,-48
    8020fc54:	f406                	sd	ra,40(sp)
    8020fc56:	f022                	sd	s0,32(sp)
    8020fc58:	1800                	addi	s0,sp,48
	clockid_t tid;
	uint64 addr;

	if(argaddr(0, &tid) < 0 || argaddr(1, &addr) < 0)
    8020fc5a:	fe840593          	addi	a1,s0,-24
    8020fc5e:	4501                	li	a0,0
    8020fc60:	ffffe097          	auipc	ra,0xffffe
    8020fc64:	b24080e7          	jalr	-1244(ra) # 8020d784 <argaddr>
    8020fc68:	87aa                	mv	a5,a0
	{
		return -1;
    8020fc6a:	557d                	li	a0,-1
	if(argaddr(0, &tid) < 0 || argaddr(1, &addr) < 0)
    8020fc6c:	0607c963          	bltz	a5,8020fcde <sys_clock_gettime+0x8c>
    8020fc70:	fe040593          	addi	a1,s0,-32
    8020fc74:	4505                	li	a0,1
    8020fc76:	ffffe097          	auipc	ra,0xffffe
    8020fc7a:	b0e080e7          	jalr	-1266(ra) # 8020d784 <argaddr>
    8020fc7e:	08054b63          	bltz	a0,8020fd14 <sys_clock_gettime+0xc2>
  asm volatile("rdtime %0" : "=r" (x) );
    8020fc82:	c01027f3          	rdtime	a5
	}

	uint64 tmp_ticks = r_time();
	struct timespec tsp;

	switch (tid)
    8020fc86:	fe843703          	ld	a4,-24(s0)
    8020fc8a:	cf09                	beqz	a4,8020fca4 <sys_clock_gettime+0x52>
    8020fc8c:	4785                	li	a5,1
    8020fc8e:	04f70c63          	beq	a4,a5,8020fce6 <sys_clock_gettime+0x94>
	case CLOCK_MONOTONIC:
		convert_to_timespec(get_ticks(), &tsp);
		break;
	
	default:
		__debug_warn("[clock gettime]no such support\n");
    8020fc92:	00006517          	auipc	a0,0x6
    8020fc96:	46650513          	addi	a0,a0,1126 # 802160f8 <UNAME_VERSION+0x2b0>
    8020fc9a:	ffffa097          	auipc	ra,0xffffa
    8020fc9e:	9d6080e7          	jalr	-1578(ra) # 80209670 <__debug_warn>
		break;
    8020fca2:	a01d                	j	8020fcc8 <sys_clock_gettime+0x76>
	ts->tv_sec = time / TICK_FREQ;
    8020fca4:	000f4737          	lui	a4,0xf4
    8020fca8:	24070713          	addi	a4,a4,576 # f4240 <_entry-0x8010bdc0>
    8020fcac:	02e7d6b3          	divu	a3,a5,a4
    8020fcb0:	fcd43823          	sd	a3,-48(s0)
	ts->tv_nsec = (time % TICK_FREQ)
    8020fcb4:	02e7f7b3          	remu	a5,a5,a4
				* 1000 * 1000 / (TICK_FREQ / 1000);
    8020fcb8:	02e787b3          	mul	a5,a5,a4
    8020fcbc:	3e800713          	li	a4,1000
    8020fcc0:	02e7d7b3          	divu	a5,a5,a4
	ts->tv_nsec = (time % TICK_FREQ)
    8020fcc4:	fcf43c23          	sd	a5,-40(s0)
	}
	//printf("[clock gettime] tsp sec:%p nsec:%p\n",tsp.tv_sec,tsp.tv_sec);
	if(either_copyout(1,addr,(char*)&tsp,sizeof(struct timespec))<0){
    8020fcc8:	46c1                	li	a3,16
    8020fcca:	fd040613          	addi	a2,s0,-48
    8020fcce:	fe043583          	ld	a1,-32(s0)
    8020fcd2:	4505                	li	a0,1
    8020fcd4:	ffffc097          	auipc	ra,0xffffc
    8020fcd8:	d62080e7          	jalr	-670(ra) # 8020ba36 <either_copyout>
    8020fcdc:	957d                	srai	a0,a0,0x3f
	  return -1;
	}
	//__debug_info("[sys_clock_gettime] return 0\n");
	return 0;

}
    8020fcde:	70a2                	ld	ra,40(sp)
    8020fce0:	7402                	ld	s0,32(sp)
    8020fce2:	6145                	addi	sp,sp,48
    8020fce4:	8082                	ret
		convert_to_timespec(get_ticks(), &tsp);
    8020fce6:	ffffb097          	auipc	ra,0xffffb
    8020fcea:	04c080e7          	jalr	76(ra) # 8020ad32 <get_ticks>
	ts->tv_sec = time / TICK_FREQ;
    8020fcee:	000f47b7          	lui	a5,0xf4
    8020fcf2:	24078793          	addi	a5,a5,576 # f4240 <_entry-0x8010bdc0>
    8020fcf6:	02f55733          	divu	a4,a0,a5
    8020fcfa:	fce43823          	sd	a4,-48(s0)
	ts->tv_nsec = (time % TICK_FREQ)
    8020fcfe:	02f57533          	remu	a0,a0,a5
				* 1000 * 1000 / (TICK_FREQ / 1000);
    8020fd02:	02f50533          	mul	a0,a0,a5
    8020fd06:	3e800793          	li	a5,1000
    8020fd0a:	02f55533          	divu	a0,a0,a5
	ts->tv_nsec = (time % TICK_FREQ)
    8020fd0e:	fca43c23          	sd	a0,-40(s0)
}
    8020fd12:	bf5d                	j	8020fcc8 <sys_clock_gettime+0x76>
		return -1;
    8020fd14:	557d                	li	a0,-1
    8020fd16:	b7e1                	j	8020fcde <sys_clock_gettime+0x8c>

000000008020fd18 <sys_utimensat>:

uint64 sys_utimensat(void){
    8020fd18:	7109                	addi	sp,sp,-384
    8020fd1a:	fe86                	sd	ra,376(sp)
    8020fd1c:	faa2                	sd	s0,368(sp)
    8020fd1e:	f6a6                	sd	s1,360(sp)
    8020fd20:	f2ca                	sd	s2,352(sp)
    8020fd22:	0300                	addi	s0,sp,384
	uint64 pathaddr;
	char pathname[FAT32_MAX_FILENAME];
	uint64 buf;
	int flags;
	struct timespec ts[2];
	struct proc* p = myproc();
    8020fd24:	ffffc097          	auipc	ra,0xffffc
    8020fd28:	68e080e7          	jalr	1678(ra) # 8020c3b2 <myproc>
    8020fd2c:	892a                	mv	s2,a0
	struct file *f;
	struct file *fp = NULL;
    8020fd2e:	e8043823          	sd	zero,-368(s0)
	struct dirent *ep, *dp;
	int devno = -1;
    8020fd32:	57fd                	li	a5,-1
    8020fd34:	e8f42623          	sw	a5,-372(s0)
	if(argfd(0,&fd,&fp)<0 && fd!=AT_FDCWD && fd!=-1){
    8020fd38:	e9040613          	addi	a2,s0,-368
    8020fd3c:	fdc40593          	addi	a1,s0,-36
    8020fd40:	4501                	li	a0,0
    8020fd42:	ffffe097          	auipc	ra,0xffffe
    8020fd46:	a94080e7          	jalr	-1388(ra) # 8020d7d6 <argfd>
    8020fd4a:	00055c63          	bgez	a0,8020fd62 <sys_utimensat+0x4a>
    8020fd4e:	fdc42783          	lw	a5,-36(s0)
    8020fd52:	f9c00713          	li	a4,-100
    8020fd56:	00e78663          	beq	a5,a4,8020fd62 <sys_utimensat+0x4a>
    8020fd5a:	577d                	li	a4,-1
	  return -1;
    8020fd5c:	54fd                	li	s1,-1
	if(argfd(0,&fd,&fp)<0 && fd!=AT_FDCWD && fd!=-1){
    8020fd5e:	16e79863          	bne	a5,a4,8020fece <sys_utimensat+0x1b6>
	}
	if(argaddr(1,&pathaddr)==0){
    8020fd62:	fd040593          	addi	a1,s0,-48
    8020fd66:	4505                	li	a0,1
    8020fd68:	ffffe097          	auipc	ra,0xffffe
    8020fd6c:	a1c080e7          	jalr	-1508(ra) # 8020d784 <argaddr>
	  if(pathaddr&&argstr(1,pathname,FAT32_MAX_FILENAME+1)<0){
	    return -1;
	  }
	}else{
	  return -1;
    8020fd70:	54fd                	li	s1,-1
	if(argaddr(1,&pathaddr)==0){
    8020fd72:	14051e63          	bnez	a0,8020fece <sys_utimensat+0x1b6>
	  if(pathaddr&&argstr(1,pathname,FAT32_MAX_FILENAME+1)<0){
    8020fd76:	fd043783          	ld	a5,-48(s0)
    8020fd7a:	cf81                	beqz	a5,8020fd92 <sys_utimensat+0x7a>
    8020fd7c:	10000613          	li	a2,256
    8020fd80:	ed040593          	addi	a1,s0,-304
    8020fd84:	4505                	li	a0,1
    8020fd86:	ffffe097          	auipc	ra,0xffffe
    8020fd8a:	a20080e7          	jalr	-1504(ra) # 8020d7a6 <argstr>
    8020fd8e:	14054763          	bltz	a0,8020fedc <sys_utimensat+0x1c4>
	}
	if(argaddr(2,&buf)<0){
    8020fd92:	ec840593          	addi	a1,s0,-312
    8020fd96:	4509                	li	a0,2
    8020fd98:	ffffe097          	auipc	ra,0xffffe
    8020fd9c:	9ec080e7          	jalr	-1556(ra) # 8020d784 <argaddr>
	  return -1;
    8020fda0:	54fd                	li	s1,-1
	if(argaddr(2,&buf)<0){
    8020fda2:	12054663          	bltz	a0,8020fece <sys_utimensat+0x1b6>
	}
	if(argint(3,&flags)<0){
    8020fda6:	ec440593          	addi	a1,s0,-316
    8020fdaa:	450d                	li	a0,3
    8020fdac:	ffffe097          	auipc	ra,0xffffe
    8020fdb0:	9b6080e7          	jalr	-1610(ra) # 8020d762 <argint>
    8020fdb4:	12054663          	bltz	a0,8020fee0 <sys_utimensat+0x1c8>
	  return -1;
	}


	if(buf != NULL){
    8020fdb8:	ec843603          	ld	a2,-312(s0)
    8020fdbc:	ea55                	bnez	a2,8020fe70 <sys_utimensat+0x158>
	    return -1;
	  }
	}
	else
	{
		ts[0].tv_sec = TICK_TO_US(p->proc_tms.utime);
    8020fdbe:	12093783          	ld	a5,288(s2)
    8020fdc2:	eaf43023          	sd	a5,-352(s0)
		ts[0].tv_nsec = TICK_TO_US(p->proc_tms.utime);
    8020fdc6:	eaf43423          	sd	a5,-344(s0)
		ts[1].tv_sec = TICK_TO_US(p->proc_tms.utime);
    8020fdca:	eaf43823          	sd	a5,-336(s0)
		ts[1].tv_nsec = TICK_TO_US(p->proc_tms.utime);
    8020fdce:	eaf43c23          	sd	a5,-328(s0)
	}

	if(pathname[0] == '/')
    8020fdd2:	ed044703          	lbu	a4,-304(s0)
    8020fdd6:	02f00793          	li	a5,47
    8020fdda:	0cf70363          	beq	a4,a5,8020fea0 <sys_utimensat+0x188>
	{
		dp = NULL;
	}
	else if(fd == AT_FDCWD)
    8020fdde:	fdc42703          	lw	a4,-36(s0)
    8020fde2:	f9c00793          	li	a5,-100
    8020fde6:	0af70f63          	beq	a4,a5,8020fea4 <sys_utimensat+0x18c>
	{
		dp = NULL;
	}
	else
	{
		if(fp == NULL)
    8020fdea:	e9043783          	ld	a5,-368(s0)
    8020fdee:	cfd9                	beqz	a5,8020fe8c <sys_utimensat+0x174>
		{
			__debug_warn("[sys_utimensat] DIRFD error\n");
			return -EMFILE;
		}
		dp = fp->ep;
    8020fdf0:	7788                	ld	a0,40(a5)
	}

	ep = ename(dp, pathname, &devno);
    8020fdf2:	e8c40613          	addi	a2,s0,-372
    8020fdf6:	ed040593          	addi	a1,s0,-304
    8020fdfa:	ffff4097          	auipc	ra,0xffff4
    8020fdfe:	6b2080e7          	jalr	1714(ra) # 802044ac <ename>
	if(ep == NULL)
    8020fe02:	c16d                	beqz	a0,8020fee4 <sys_utimensat+0x1cc>
		// __debug_warn("[sys_utimensat] file not found\n");
		return -ENOENT;
	}


	if(pathaddr){
    8020fe04:	fd043483          	ld	s1,-48(s0)
    8020fe08:	e0c5                	bnez	s1,8020fea8 <sys_utimensat+0x190>
		f->t0_sec = ts[0].tv_sec;
		f->t0_nsec = ts[0].tv_nsec;
		f->t1_sec = ts[1].tv_sec;
		f->t1_nsec = ts[1].tv_nsec;
	}
	else if(fd >= 0 && ts[0].tv_sec != 1){
    8020fe0a:	fdc42783          	lw	a5,-36(s0)
    8020fe0e:	0c07c063          	bltz	a5,8020fece <sys_utimensat+0x1b6>
    8020fe12:	ea043703          	ld	a4,-352(s0)
    8020fe16:	4785                	li	a5,1
    8020fe18:	0af70b63          	beq	a4,a5,8020fece <sys_utimensat+0x1b6>
		if(argfd(0,&fd,&f)<0) return -1;
    8020fe1c:	e9840613          	addi	a2,s0,-360
    8020fe20:	fdc40593          	addi	a1,s0,-36
    8020fe24:	4501                	li	a0,0
    8020fe26:	ffffe097          	auipc	ra,0xffffe
    8020fe2a:	9b0080e7          	jalr	-1616(ra) # 8020d7d6 <argfd>
    8020fe2e:	0a054d63          	bltz	a0,8020fee8 <sys_utimensat+0x1d0>
		if(ts[0].tv_sec > f->t0_sec || ts[0].tv_sec == 0) f->t0_sec = ts[0].tv_sec;
    8020fe32:	ea043703          	ld	a4,-352(s0)
    8020fe36:	e9843783          	ld	a5,-360(s0)
    8020fe3a:	77b4                	ld	a3,104(a5)
    8020fe3c:	00e6e363          	bltu	a3,a4,8020fe42 <sys_utimensat+0x12a>
    8020fe40:	e311                	bnez	a4,8020fe44 <sys_utimensat+0x12c>
    8020fe42:	f7b8                	sd	a4,104(a5)
		if(ts[0].tv_nsec > f->t0_nsec || ts[0].tv_nsec == 0) f->t0_nsec = ts[0].tv_nsec;
    8020fe44:	ea843703          	ld	a4,-344(s0)
    8020fe48:	7bb4                	ld	a3,112(a5)
    8020fe4a:	00e6e363          	bltu	a3,a4,8020fe50 <sys_utimensat+0x138>
    8020fe4e:	e311                	bnez	a4,8020fe52 <sys_utimensat+0x13a>
    8020fe50:	fbb8                	sd	a4,112(a5)
		if(ts[1].tv_sec > f->t1_sec || ts[1].tv_sec == 0) f->t1_sec = ts[1].tv_sec;
    8020fe52:	eb043703          	ld	a4,-336(s0)
    8020fe56:	7fb4                	ld	a3,120(a5)
    8020fe58:	00e6e363          	bltu	a3,a4,8020fe5e <sys_utimensat+0x146>
    8020fe5c:	e311                	bnez	a4,8020fe60 <sys_utimensat+0x148>
    8020fe5e:	ffb8                	sd	a4,120(a5)
		if(ts[1].tv_nsec > f->t1_nsec || ts[1].tv_nsec == 0) f->t1_nsec = ts[1].tv_nsec;
    8020fe60:	eb843703          	ld	a4,-328(s0)
    8020fe64:	63d4                	ld	a3,128(a5)
    8020fe66:	00e6e363          	bltu	a3,a4,8020fe6c <sys_utimensat+0x154>
    8020fe6a:	e335                	bnez	a4,8020fece <sys_utimensat+0x1b6>
    8020fe6c:	e3d8                	sd	a4,128(a5)
    8020fe6e:	a085                	j	8020fece <sys_utimensat+0x1b6>
	  if(copyin(p->pagetable,(char*)ts,buf,2*sizeof(struct timespec))<0){
    8020fe70:	02000693          	li	a3,32
    8020fe74:	ea040593          	addi	a1,s0,-352
    8020fe78:	06093503          	ld	a0,96(s2)
    8020fe7c:	ffffc097          	auipc	ra,0xffffc
    8020fe80:	91e080e7          	jalr	-1762(ra) # 8020b79a <copyin>
    8020fe84:	f40557e3          	bgez	a0,8020fdd2 <sys_utimensat+0xba>
	    return -1;
    8020fe88:	54fd                	li	s1,-1
    8020fe8a:	a091                	j	8020fece <sys_utimensat+0x1b6>
			__debug_warn("[sys_utimensat] DIRFD error\n");
    8020fe8c:	00006517          	auipc	a0,0x6
    8020fe90:	28c50513          	addi	a0,a0,652 # 80216118 <UNAME_VERSION+0x2d0>
    8020fe94:	ffff9097          	auipc	ra,0xffff9
    8020fe98:	7dc080e7          	jalr	2012(ra) # 80209670 <__debug_warn>
			return -EMFILE;
    8020fe9c:	54a1                	li	s1,-24
    8020fe9e:	a805                	j	8020fece <sys_utimensat+0x1b6>
		dp = NULL;
    8020fea0:	4501                	li	a0,0
    8020fea2:	bf81                	j	8020fdf2 <sys_utimensat+0xda>
		dp = NULL;
    8020fea4:	4501                	li	a0,0
    8020fea6:	b7b1                	j	8020fdf2 <sys_utimensat+0xda>
		f = findfile(pathname);
    8020fea8:	ed040513          	addi	a0,s0,-304
    8020feac:	ffff7097          	auipc	ra,0xffff7
    8020feb0:	d9c080e7          	jalr	-612(ra) # 80206c48 <findfile>
		f->t0_sec = ts[0].tv_sec;
    8020feb4:	ea043783          	ld	a5,-352(s0)
    8020feb8:	f53c                	sd	a5,104(a0)
		f->t0_nsec = ts[0].tv_nsec;
    8020feba:	ea843783          	ld	a5,-344(s0)
    8020febe:	f93c                	sd	a5,112(a0)
		f->t1_sec = ts[1].tv_sec;
    8020fec0:	eb043783          	ld	a5,-336(s0)
    8020fec4:	fd3c                	sd	a5,120(a0)
		f->t1_nsec = ts[1].tv_nsec;
    8020fec6:	eb843783          	ld	a5,-328(s0)
    8020feca:	e15c                	sd	a5,128(a0)
	// printf("[sys utimesat]fd:%d\tpathname:%s\n",fd,pathaddr?pathname:"(nil)");
	// printf("[sys utimesat]buf:%p\n",buf);
	// printf("[sys utimesat]timespec[0] tv_sec:%p\ttv_nsec:%p\n",ts[0].tv_sec,ts[0].tv_nsec);
	// printf("[sys utimesat]timespec[1] tv_sec:%p\ttv_nsec:%p\n",ts[1].tv_sec,ts[1].tv_nsec);
	// printf("[sys utimesat]flags:%p\n",flags);
	return 0;
    8020fecc:	4481                	li	s1,0
}
    8020fece:	8526                	mv	a0,s1
    8020fed0:	70f6                	ld	ra,376(sp)
    8020fed2:	7456                	ld	s0,368(sp)
    8020fed4:	74b6                	ld	s1,360(sp)
    8020fed6:	7916                	ld	s2,352(sp)
    8020fed8:	6119                	addi	sp,sp,384
    8020feda:	8082                	ret
	    return -1;
    8020fedc:	54fd                	li	s1,-1
    8020fede:	bfc5                	j	8020fece <sys_utimensat+0x1b6>
	  return -1;
    8020fee0:	54fd                	li	s1,-1
    8020fee2:	b7f5                	j	8020fece <sys_utimensat+0x1b6>
		return -ENOENT;
    8020fee4:	54f9                	li	s1,-2
    8020fee6:	b7e5                	j	8020fece <sys_utimensat+0x1b6>
		if(argfd(0,&fd,&f)<0) return -1;
    8020fee8:	54fd                	li	s1,-1
    8020feea:	b7d5                	j	8020fece <sys_utimensat+0x1b6>

000000008020feec <sys_setitimer>:

uint64 sys_setitimer(void)
{
    8020feec:	715d                	addi	sp,sp,-80
    8020feee:	e486                	sd	ra,72(sp)
    8020fef0:	e0a2                	sd	s0,64(sp)
    8020fef2:	0880                	addi	s0,sp,80
	int which;
	uint64 newptr;
	uint64 oldptr;
	struct itimerval newval;

	argint(0, &which);
    8020fef4:	fec40593          	addi	a1,s0,-20
    8020fef8:	4501                	li	a0,0
    8020fefa:	ffffe097          	auipc	ra,0xffffe
    8020fefe:	868080e7          	jalr	-1944(ra) # 8020d762 <argint>
	argaddr(1, &newptr);
    8020ff02:	fe040593          	addi	a1,s0,-32
    8020ff06:	4505                	li	a0,1
    8020ff08:	ffffe097          	auipc	ra,0xffffe
    8020ff0c:	87c080e7          	jalr	-1924(ra) # 8020d784 <argaddr>
	argaddr(2, &oldptr);
    8020ff10:	fd840593          	addi	a1,s0,-40
    8020ff14:	4509                	li	a0,2
    8020ff16:	ffffe097          	auipc	ra,0xffffe
    8020ff1a:	86e080e7          	jalr	-1938(ra) # 8020d784 <argaddr>

	if (which != CLOCK_REALTIME)
    8020ff1e:	fec42783          	lw	a5,-20(s0)
		return -EINVAL;
    8020ff22:	5529                	li	a0,-22
	if (which != CLOCK_REALTIME)
    8020ff24:	e385                	bnez	a5,8020ff44 <sys_setitimer+0x58>

	if (either_copyin(1, (char*)&newval, newptr, sizeof(struct itimerval)) < 0)
    8020ff26:	02000693          	li	a3,32
    8020ff2a:	fe043603          	ld	a2,-32(s0)
    8020ff2e:	fb840593          	addi	a1,s0,-72
    8020ff32:	4505                	li	a0,1
    8020ff34:	ffffc097          	auipc	ra,0xffffc
    8020ff38:	b58080e7          	jalr	-1192(ra) # 8020ba8c <either_copyin>
    8020ff3c:	87aa                	mv	a5,a0
/*
	__debug_info("sys_setitimer", "new={%ds|%dus, %ds|%dus}\n",
				newval.it_interval.sec, newval.it_interval.usec, newval.it_value.sec, newval.it_value.usec);
*/
	//__debug_info("[sys_setitimer] return 0\n");
	return 0;
    8020ff3e:	4501                	li	a0,0
	if (either_copyin(1, (char*)&newval, newptr, sizeof(struct itimerval)) < 0)
    8020ff40:	0007c663          	bltz	a5,8020ff4c <sys_setitimer+0x60>
}
    8020ff44:	60a6                	ld	ra,72(sp)
    8020ff46:	6406                	ld	s0,64(sp)
    8020ff48:	6161                	addi	sp,sp,80
    8020ff4a:	8082                	ret
		return -EFAULT;	
    8020ff4c:	5549                	li	a0,-14
    8020ff4e:	bfdd                	j	8020ff44 <sys_setitimer+0x58>

000000008020ff50 <sys_execve>:
#include"include/copy.h"
#include"include/rusage.h"

uint64
sys_execve()
{
    8020ff50:	cc010113          	addi	sp,sp,-832
    8020ff54:	32113c23          	sd	ra,824(sp)
    8020ff58:	32813823          	sd	s0,816(sp)
    8020ff5c:	32913423          	sd	s1,808(sp)
    8020ff60:	33213023          	sd	s2,800(sp)
    8020ff64:	31313c23          	sd	s3,792(sp)
    8020ff68:	0680                	addi	s0,sp,832
  char path[FAT32_MAX_PATH], *argv[MAXARG] ,*env[MAXARG];
  int argvlen , envlen;
  if(argstr(0, path, FAT32_MAX_PATH) < 0){
    8020ff6a:	10400613          	li	a2,260
    8020ff6e:	ec840593          	addi	a1,s0,-312
    8020ff72:	4501                	li	a0,0
    8020ff74:	ffffe097          	auipc	ra,0xffffe
    8020ff78:	832080e7          	jalr	-1998(ra) # 8020d7a6 <argstr>
    8020ff7c:	08054163          	bltz	a0,8020fffe <sys_execve+0xae>
    __debug_warn("[sys execve] invalid path\n");
    return -1;
  }
  if((argvlen = argstrvec(1,argv, MAXARG)) < 0){
    8020ff80:	02000613          	li	a2,32
    8020ff84:	dc840593          	addi	a1,s0,-568
    8020ff88:	4505                	li	a0,1
    8020ff8a:	ffffe097          	auipc	ra,0xffffe
    8020ff8e:	a86080e7          	jalr	-1402(ra) # 8020da10 <argstrvec>
    8020ff92:	892a                	mv	s2,a0
    8020ff94:	06054f63          	bltz	a0,80210012 <sys_execve+0xc2>
    __debug_warn("[sys execve] invalid argv\n");
    return -1;
  }
  if((envlen = argstrvec(2,env,MAXARG)) <0){
    8020ff98:	02000613          	li	a2,32
    8020ff9c:	cc840593          	addi	a1,s0,-824
    8020ffa0:	4509                	li	a0,2
    8020ffa2:	ffffe097          	auipc	ra,0xffffe
    8020ffa6:	a6e080e7          	jalr	-1426(ra) # 8020da10 <argstrvec>
    8020ffaa:	89aa                	mv	s3,a0
    8020ffac:	06054d63          	bltz	a0,80210026 <sys_execve+0xd6>
    env[0] = 0;
  }

 int ret = exec(path, argv, env);
    8020ffb0:	cc840613          	addi	a2,s0,-824
    8020ffb4:	dc840593          	addi	a1,s0,-568
    8020ffb8:	ec840513          	addi	a0,s0,-312
    8020ffbc:	ffffe097          	auipc	ra,0xffffe
    8020ffc0:	d88080e7          	jalr	-632(ra) # 8020dd44 <exec>
    8020ffc4:	84aa                	mv	s1,a0

 freevec(argv,argvlen);
    8020ffc6:	85ca                	mv	a1,s2
    8020ffc8:	dc840513          	addi	a0,s0,-568
    8020ffcc:	ffffe097          	auipc	ra,0xffffe
    8020ffd0:	9fe080e7          	jalr	-1538(ra) # 8020d9ca <freevec>
 freevec(env,envlen);
    8020ffd4:	85ce                	mv	a1,s3
    8020ffd6:	cc840513          	addi	a0,s0,-824
    8020ffda:	ffffe097          	auipc	ra,0xffffe
    8020ffde:	9f0080e7          	jalr	-1552(ra) # 8020d9ca <freevec>

 return ret;
    8020ffe2:	8526                	mv	a0,s1
}
    8020ffe4:	33813083          	ld	ra,824(sp)
    8020ffe8:	33013403          	ld	s0,816(sp)
    8020ffec:	32813483          	ld	s1,808(sp)
    8020fff0:	32013903          	ld	s2,800(sp)
    8020fff4:	31813983          	ld	s3,792(sp)
    8020fff8:	34010113          	addi	sp,sp,832
    8020fffc:	8082                	ret
    __debug_warn("[sys execve] invalid path\n");
    8020fffe:	00006517          	auipc	a0,0x6
    80210002:	13a50513          	addi	a0,a0,314 # 80216138 <UNAME_VERSION+0x2f0>
    80210006:	ffff9097          	auipc	ra,0xffff9
    8021000a:	66a080e7          	jalr	1642(ra) # 80209670 <__debug_warn>
    return -1;
    8021000e:	557d                	li	a0,-1
    80210010:	bfd1                	j	8020ffe4 <sys_execve+0x94>
    __debug_warn("[sys execve] invalid argv\n");
    80210012:	00006517          	auipc	a0,0x6
    80210016:	14650513          	addi	a0,a0,326 # 80216158 <UNAME_VERSION+0x310>
    8021001a:	ffff9097          	auipc	ra,0xffff9
    8021001e:	656080e7          	jalr	1622(ra) # 80209670 <__debug_warn>
    return -1;
    80210022:	557d                	li	a0,-1
    80210024:	b7c1                	j	8020ffe4 <sys_execve+0x94>
    env[0] = 0;
    80210026:	cc043423          	sd	zero,-824(s0)
    8021002a:	b759                	j	8020ffb0 <sys_execve+0x60>

000000008021002c <sys_getpid>:

uint64
sys_getpid(void)
{
    8021002c:	1141                	addi	sp,sp,-16
    8021002e:	e406                	sd	ra,8(sp)
    80210030:	e022                	sd	s0,0(sp)
    80210032:	0800                	addi	s0,sp,16
  return myproc()->pid;
    80210034:	ffffc097          	auipc	ra,0xffffc
    80210038:	37e080e7          	jalr	894(ra) # 8020c3b2 <myproc>
}
    8021003c:	4128                	lw	a0,64(a0)
    8021003e:	60a2                	ld	ra,8(sp)
    80210040:	6402                	ld	s0,0(sp)
    80210042:	0141                	addi	sp,sp,16
    80210044:	8082                	ret

0000000080210046 <sys_getppid>:

uint64
sys_getppid(void){
    80210046:	1141                	addi	sp,sp,-16
    80210048:	e406                	sd	ra,8(sp)
    8021004a:	e022                	sd	s0,0(sp)
    8021004c:	0800                	addi	s0,sp,16
  struct proc* p =myproc();
    8021004e:	ffffc097          	auipc	ra,0xffffc
    80210052:	364080e7          	jalr	868(ra) # 8020c3b2 <myproc>
  if(p->parent)return p->parent->pid;
    80210056:	751c                	ld	a5,40(a0)
  else return 0;
    80210058:	4501                	li	a0,0
  if(p->parent)return p->parent->pid;
    8021005a:	c391                	beqz	a5,8021005e <sys_getppid+0x18>
    8021005c:	43a8                	lw	a0,64(a5)
}
    8021005e:	60a2                	ld	ra,8(sp)
    80210060:	6402                	ld	s0,0(sp)
    80210062:	0141                	addi	sp,sp,16
    80210064:	8082                	ret

0000000080210066 <sys_getuid>:

uint64
sys_getuid(void)
{
    80210066:	1141                	addi	sp,sp,-16
    80210068:	e406                	sd	ra,8(sp)
    8021006a:	e022                	sd	s0,0(sp)
    8021006c:	0800                	addi	s0,sp,16
  return myproc()->uid;
    8021006e:	ffffc097          	auipc	ra,0xffffc
    80210072:	344080e7          	jalr	836(ra) # 8020c3b2 <myproc>
}
    80210076:	4168                	lw	a0,68(a0)
    80210078:	60a2                	ld	ra,8(sp)
    8021007a:	6402                	ld	s0,0(sp)
    8021007c:	0141                	addi	sp,sp,16
    8021007e:	8082                	ret

0000000080210080 <sys_geteuid>:

uint64
sys_geteuid(void)
{
    80210080:	1141                	addi	sp,sp,-16
    80210082:	e406                	sd	ra,8(sp)
    80210084:	e022                	sd	s0,0(sp)
    80210086:	0800                	addi	s0,sp,16
  return myproc()->uid;
    80210088:	ffffc097          	auipc	ra,0xffffc
    8021008c:	32a080e7          	jalr	810(ra) # 8020c3b2 <myproc>
}
    80210090:	4168                	lw	a0,68(a0)
    80210092:	60a2                	ld	ra,8(sp)
    80210094:	6402                	ld	s0,0(sp)
    80210096:	0141                	addi	sp,sp,16
    80210098:	8082                	ret

000000008021009a <sys_getgid>:

uint64
sys_getgid(void)
{
    8021009a:	1141                	addi	sp,sp,-16
    8021009c:	e406                	sd	ra,8(sp)
    8021009e:	e022                	sd	s0,0(sp)
    802100a0:	0800                	addi	s0,sp,16
  return myproc()->gid;
    802100a2:	ffffc097          	auipc	ra,0xffffc
    802100a6:	310080e7          	jalr	784(ra) # 8020c3b2 <myproc>
}
    802100aa:	4528                	lw	a0,72(a0)
    802100ac:	60a2                	ld	ra,8(sp)
    802100ae:	6402                	ld	s0,0(sp)
    802100b0:	0141                	addi	sp,sp,16
    802100b2:	8082                	ret

00000000802100b4 <sys_getegid>:

uint64
sys_getegid(void)
{
    802100b4:	1141                	addi	sp,sp,-16
    802100b6:	e406                	sd	ra,8(sp)
    802100b8:	e022                	sd	s0,0(sp)
    802100ba:	0800                	addi	s0,sp,16
  return myproc()->gid;
    802100bc:	ffffc097          	auipc	ra,0xffffc
    802100c0:	2f6080e7          	jalr	758(ra) # 8020c3b2 <myproc>
}
    802100c4:	4528                	lw	a0,72(a0)
    802100c6:	60a2                	ld	ra,8(sp)
    802100c8:	6402                	ld	s0,0(sp)
    802100ca:	0141                	addi	sp,sp,16
    802100cc:	8082                	ret

00000000802100ce <sys_setuid>:

uint64 
sys_setuid(void)
{
    802100ce:	1101                	addi	sp,sp,-32
    802100d0:	ec06                	sd	ra,24(sp)
    802100d2:	e822                	sd	s0,16(sp)
    802100d4:	1000                	addi	s0,sp,32
  int uid;
  if(argint(0, &uid) < 0)
    802100d6:	fec40593          	addi	a1,s0,-20
    802100da:	4501                	li	a0,0
    802100dc:	ffffd097          	auipc	ra,0xffffd
    802100e0:	686080e7          	jalr	1670(ra) # 8020d762 <argint>
  {
    return -1;
    802100e4:	57fd                	li	a5,-1
  if(argint(0, &uid) < 0)
    802100e6:	00054a63          	bltz	a0,802100fa <sys_setuid+0x2c>
  }
  myproc()->uid = uid;
    802100ea:	ffffc097          	auipc	ra,0xffffc
    802100ee:	2c8080e7          	jalr	712(ra) # 8020c3b2 <myproc>
    802100f2:	fec42783          	lw	a5,-20(s0)
    802100f6:	c17c                	sw	a5,68(a0)
  return 0;
    802100f8:	4781                	li	a5,0
}
    802100fa:	853e                	mv	a0,a5
    802100fc:	60e2                	ld	ra,24(sp)
    802100fe:	6442                	ld	s0,16(sp)
    80210100:	6105                	addi	sp,sp,32
    80210102:	8082                	ret

0000000080210104 <sys_setgid>:

uint64
sys_setgid(void)
{
    80210104:	1101                	addi	sp,sp,-32
    80210106:	ec06                	sd	ra,24(sp)
    80210108:	e822                	sd	s0,16(sp)
    8021010a:	1000                	addi	s0,sp,32
  int gid;
  if(argint(0, &gid) < 0)
    8021010c:	fec40593          	addi	a1,s0,-20
    80210110:	4501                	li	a0,0
    80210112:	ffffd097          	auipc	ra,0xffffd
    80210116:	650080e7          	jalr	1616(ra) # 8020d762 <argint>
  {
    return -1;
    8021011a:	57fd                	li	a5,-1
  if(argint(0, &gid) < 0)
    8021011c:	00054a63          	bltz	a0,80210130 <sys_setgid+0x2c>
  }
  myproc()->gid = gid;
    80210120:	ffffc097          	auipc	ra,0xffffc
    80210124:	292080e7          	jalr	658(ra) # 8020c3b2 <myproc>
    80210128:	fec42783          	lw	a5,-20(s0)
    8021012c:	c53c                	sw	a5,72(a0)
  return 0;
    8021012e:	4781                	li	a5,0
}
    80210130:	853e                	mv	a0,a5
    80210132:	60e2                	ld	ra,24(sp)
    80210134:	6442                	ld	s0,16(sp)
    80210136:	6105                	addi	sp,sp,32
    80210138:	8082                	ret

000000008021013a <sys_uname>:

uint64 
sys_uname(void) {
    8021013a:	1101                	addi	sp,sp,-32
    8021013c:	ec06                	sd	ra,24(sp)
    8021013e:	e822                	sd	s0,16(sp)
    80210140:	1000                	addi	s0,sp,32
	uint64 addr;

	if (argaddr(0, &addr) < 0) {
    80210142:	fe840593          	addi	a1,s0,-24
    80210146:	4501                	li	a0,0
    80210148:	ffffd097          	auipc	ra,0xffffd
    8021014c:	63c080e7          	jalr	1596(ra) # 8020d784 <argaddr>
    80210150:	87aa                	mv	a5,a0
		return -1;
    80210152:	557d                	li	a0,-1
	if (argaddr(0, &addr) < 0) {
    80210154:	0007c863          	bltz	a5,80210164 <sys_uname+0x2a>
	}

	return uname_copyout(addr);
    80210158:	fe843503          	ld	a0,-24(s0)
    8021015c:	ffffe097          	auipc	ra,0xffffe
    80210160:	448080e7          	jalr	1096(ra) # 8020e5a4 <uname_copyout>
}
    80210164:	60e2                	ld	ra,24(sp)
    80210166:	6442                	ld	s0,16(sp)
    80210168:	6105                	addi	sp,sp,32
    8021016a:	8082                	ret

000000008021016c <sys_clone>:


uint64
sys_clone(void)
{
    8021016c:	7139                	addi	sp,sp,-64
    8021016e:	fc06                	sd	ra,56(sp)
    80210170:	f822                	sd	s0,48(sp)
    80210172:	0080                	addi	s0,sp,64
  uint64 flag, stack, ptid, ctid, tls;
  if (argaddr(0, &flag) < 0) 
    80210174:	fe840593          	addi	a1,s0,-24
    80210178:	4501                	li	a0,0
    8021017a:	ffffd097          	auipc	ra,0xffffd
    8021017e:	60a080e7          	jalr	1546(ra) # 8020d784 <argaddr>
  	return -1;
    80210182:	57fd                	li	a5,-1
  if (argaddr(0, &flag) < 0) 
    80210184:	06054963          	bltz	a0,802101f6 <sys_clone+0x8a>
  if (argaddr(1, &stack) < 0) 
    80210188:	fe040593          	addi	a1,s0,-32
    8021018c:	4505                	li	a0,1
    8021018e:	ffffd097          	auipc	ra,0xffffd
    80210192:	5f6080e7          	jalr	1526(ra) # 8020d784 <argaddr>
	return -1;
    80210196:	57fd                	li	a5,-1
  if (argaddr(1, &stack) < 0) 
    80210198:	04054f63          	bltz	a0,802101f6 <sys_clone+0x8a>
  if(argaddr(2, &ptid) < 0)
    8021019c:	fd840593          	addi	a1,s0,-40
    802101a0:	4509                	li	a0,2
    802101a2:	ffffd097          	auipc	ra,0xffffd
    802101a6:	5e2080e7          	jalr	1506(ra) # 8020d784 <argaddr>
  	return -1;
    802101aa:	57fd                	li	a5,-1
  if(argaddr(2, &ptid) < 0)
    802101ac:	04054563          	bltz	a0,802101f6 <sys_clone+0x8a>
  if(argaddr(3, &tls) < 0)
    802101b0:	fc840593          	addi	a1,s0,-56
    802101b4:	450d                	li	a0,3
    802101b6:	ffffd097          	auipc	ra,0xffffd
    802101ba:	5ce080e7          	jalr	1486(ra) # 8020d784 <argaddr>
    return -1;
    802101be:	57fd                	li	a5,-1
  if(argaddr(3, &tls) < 0)
    802101c0:	02054b63          	bltz	a0,802101f6 <sys_clone+0x8a>
  if(argaddr(4, &ctid) < 0)
    802101c4:	fd040593          	addi	a1,s0,-48
    802101c8:	4511                	li	a0,4
    802101ca:	ffffd097          	auipc	ra,0xffffd
    802101ce:	5ba080e7          	jalr	1466(ra) # 8020d784 <argaddr>
    return -1;
    802101d2:	57fd                	li	a5,-1
  if(argaddr(4, &ctid) < 0)
    802101d4:	02054163          	bltz	a0,802101f6 <sys_clone+0x8a>
  return clone(flag, stack, ptid, tls, ctid);
    802101d8:	fd043703          	ld	a4,-48(s0)
    802101dc:	fc843683          	ld	a3,-56(s0)
    802101e0:	fd843603          	ld	a2,-40(s0)
    802101e4:	fe043583          	ld	a1,-32(s0)
    802101e8:	fe843503          	ld	a0,-24(s0)
    802101ec:	ffff2097          	auipc	ra,0xffff2
    802101f0:	cd2080e7          	jalr	-814(ra) # 80201ebe <clone>
    802101f4:	87aa                	mv	a5,a0
}
    802101f6:	853e                	mv	a0,a5
    802101f8:	70e2                	ld	ra,56(sp)
    802101fa:	7442                	ld	s0,48(sp)
    802101fc:	6121                	addi	sp,sp,64
    802101fe:	8082                	ret

0000000080210200 <sys_wait4>:

uint64
sys_wait4()
{
    80210200:	1101                	addi	sp,sp,-32
    80210202:	ec06                	sd	ra,24(sp)
    80210204:	e822                	sd	s0,16(sp)
    80210206:	1000                	addi	s0,sp,32
  uint64 addr;
  int pid;
  if(argint(0, &pid) < 0)
    80210208:	fe440593          	addi	a1,s0,-28
    8021020c:	4501                	li	a0,0
    8021020e:	ffffd097          	auipc	ra,0xffffd
    80210212:	554080e7          	jalr	1364(ra) # 8020d762 <argint>
    return -1;
    80210216:	57fd                	li	a5,-1
  if(argint(0, &pid) < 0)
    80210218:	02054563          	bltz	a0,80210242 <sys_wait4+0x42>
  if(argaddr(1, &addr) < 0)
    8021021c:	fe840593          	addi	a1,s0,-24
    80210220:	4505                	li	a0,1
    80210222:	ffffd097          	auipc	ra,0xffffd
    80210226:	562080e7          	jalr	1378(ra) # 8020d784 <argaddr>
    return -1;
    8021022a:	57fd                	li	a5,-1
  if(argaddr(1, &addr) < 0)
    8021022c:	00054b63          	bltz	a0,80210242 <sys_wait4+0x42>
    
  //printf("[sys_wait4]pid %d:%s enter\n",myproc()->pid,myproc()->name);
  return wait4pid(pid,addr);
    80210230:	fe843583          	ld	a1,-24(s0)
    80210234:	fe442503          	lw	a0,-28(s0)
    80210238:	ffff2097          	auipc	ra,0xffff2
    8021023c:	fd6080e7          	jalr	-42(ra) # 8020220e <wait4pid>
    80210240:	87aa                	mv	a5,a0
}
    80210242:	853e                	mv	a0,a5
    80210244:	60e2                	ld	ra,24(sp)
    80210246:	6442                	ld	s0,16(sp)
    80210248:	6105                	addi	sp,sp,32
    8021024a:	8082                	ret

000000008021024c <sys_set_tid_address>:

uint64
sys_set_tid_address(void){
    8021024c:	1101                	addi	sp,sp,-32
    8021024e:	ec06                	sd	ra,24(sp)
    80210250:	e822                	sd	s0,16(sp)
    80210252:	1000                	addi	s0,sp,32
  uint64 address;
  argaddr(0, &address);
    80210254:	fe840593          	addi	a1,s0,-24
    80210258:	4501                	li	a0,0
    8021025a:	ffffd097          	auipc	ra,0xffffd
    8021025e:	52a080e7          	jalr	1322(ra) # 8020d784 <argaddr>
  myproc()->clear_child_tid = address;
    80210262:	ffffc097          	auipc	ra,0xffffc
    80210266:	150080e7          	jalr	336(ra) # 8020c3b2 <myproc>
    8021026a:	fe843783          	ld	a5,-24(s0)
    8021026e:	1af53823          	sd	a5,432(a0)
  return myproc()->pid;
    80210272:	ffffc097          	auipc	ra,0xffffc
    80210276:	140080e7          	jalr	320(ra) # 8020c3b2 <myproc>
}
    8021027a:	4128                	lw	a0,64(a0)
    8021027c:	60e2                	ld	ra,24(sp)
    8021027e:	6442                	ld	s0,16(sp)
    80210280:	6105                	addi	sp,sp,32
    80210282:	8082                	ret

0000000080210284 <sys_gettid>:

uint64
sys_gettid(void){
    80210284:	1101                	addi	sp,sp,-32
    80210286:	ec06                	sd	ra,24(sp)
    80210288:	e822                	sd	s0,16(sp)
    8021028a:	1000                	addi	s0,sp,32
  struct proc* p = myproc();
    8021028c:	ffffc097          	auipc	ra,0xffffc
    80210290:	126080e7          	jalr	294(ra) # 8020c3b2 <myproc>
  uint64 address = p->clear_child_tid;
    80210294:	1b053603          	ld	a2,432(a0)
  int tid;
  if(address){
    80210298:	e611                	bnez	a2,802102a4 <sys_gettid+0x20>
    if(either_copyin(1,&tid,address,sizeof(tid))<0){
      return -1;
    }
    return tid;
  }else{
    return p->pid;
    8021029a:	4128                	lw	a0,64(a0)
  }
}
    8021029c:	60e2                	ld	ra,24(sp)
    8021029e:	6442                	ld	s0,16(sp)
    802102a0:	6105                	addi	sp,sp,32
    802102a2:	8082                	ret
    if(either_copyin(1,&tid,address,sizeof(tid))<0){
    802102a4:	4691                	li	a3,4
    802102a6:	fec40593          	addi	a1,s0,-20
    802102aa:	4505                	li	a0,1
    802102ac:	ffffb097          	auipc	ra,0xffffb
    802102b0:	7e0080e7          	jalr	2016(ra) # 8020ba8c <either_copyin>
    802102b4:	87aa                	mv	a5,a0
      return -1;
    802102b6:	557d                	li	a0,-1
    if(either_copyin(1,&tid,address,sizeof(tid))<0){
    802102b8:	fe07c2e3          	bltz	a5,8021029c <sys_gettid+0x18>
    return tid;
    802102bc:	fec42503          	lw	a0,-20(s0)
    802102c0:	bff1                	j	8021029c <sys_gettid+0x18>

00000000802102c2 <sys_exit>:

uint64
sys_exit()
{
    802102c2:	1101                	addi	sp,sp,-32
    802102c4:	ec06                	sd	ra,24(sp)
    802102c6:	e822                	sd	s0,16(sp)
    802102c8:	1000                	addi	s0,sp,32
  int n;
  if(argint(0,&n)<0){
    802102ca:	fec40593          	addi	a1,s0,-20
    802102ce:	4501                	li	a0,0
    802102d0:	ffffd097          	auipc	ra,0xffffd
    802102d4:	492080e7          	jalr	1170(ra) # 8020d762 <argint>
    return -1;
    802102d8:	57fd                	li	a5,-1
  if(argint(0,&n)<0){
    802102da:	00054963          	bltz	a0,802102ec <sys_exit+0x2a>
  }
  exit(n);
    802102de:	fec42503          	lw	a0,-20(s0)
    802102e2:	ffff2097          	auipc	ra,0xffff2
    802102e6:	06e080e7          	jalr	110(ra) # 80202350 <exit>
  return 0;
    802102ea:	4781                	li	a5,0
}
    802102ec:	853e                	mv	a0,a5
    802102ee:	60e2                	ld	ra,24(sp)
    802102f0:	6442                	ld	s0,16(sp)
    802102f2:	6105                	addi	sp,sp,32
    802102f4:	8082                	ret

00000000802102f6 <sys_getrusage>:

uint64
sys_getrusage(void)
{
    802102f6:	7115                	addi	sp,sp,-224
    802102f8:	ed86                	sd	ra,216(sp)
    802102fa:	e9a2                	sd	s0,208(sp)
    802102fc:	e5a6                	sd	s1,200(sp)
    802102fe:	1180                	addi	s0,sp,224
  int who;
  struct proc* p = myproc();
    80210300:	ffffc097          	auipc	ra,0xffffc
    80210304:	0b2080e7          	jalr	178(ra) # 8020c3b2 <myproc>
    80210308:	84aa                	mv	s1,a0
  uint64 rusage;
  struct rusage rs;
  if(argint(0,&who)<0){
    8021030a:	fbc40593          	addi	a1,s0,-68
    8021030e:	4501                	li	a0,0
    80210310:	ffffd097          	auipc	ra,0xffffd
    80210314:	452080e7          	jalr	1106(ra) # 8020d762 <argint>
    return -1;
    80210318:	57fd                	li	a5,-1
  if(argint(0,&who)<0){
    8021031a:	0a054663          	bltz	a0,802103c6 <sys_getrusage+0xd0>
  }
  if(argaddr(1,&rusage)<0){
    8021031e:	fb040593          	addi	a1,s0,-80
    80210322:	4505                	li	a0,1
    80210324:	ffffd097          	auipc	ra,0xffffd
    80210328:	460080e7          	jalr	1120(ra) # 8020d784 <argaddr>
    return -1;
    8021032c:	57fd                	li	a5,-1
  if(argaddr(1,&rusage)<0){
    8021032e:	08054c63          	bltz	a0,802103c6 <sys_getrusage+0xd0>
  }
  rs = (struct rusage){
    .ru_utime = get_timeval(),
    80210332:	ffffb097          	auipc	ra,0xffffb
    80210336:	a76080e7          	jalr	-1418(ra) # 8020ada8 <get_timeval>
    8021033a:	fca43023          	sd	a0,-64(s0)
    8021033e:	fcb43423          	sd	a1,-56(s0)
    .ru_stime = get_timeval(),
    80210342:	ffffb097          	auipc	ra,0xffffb
    80210346:	a66080e7          	jalr	-1434(ra) # 8020ada8 <get_timeval>
    8021034a:	fca43823          	sd	a0,-48(s0)
    8021034e:	fcb43c23          	sd	a1,-40(s0)
  rs = (struct rusage){
    80210352:	f4043023          	sd	zero,-192(s0)
    80210356:	f4043423          	sd	zero,-184(s0)
    8021035a:	f4043823          	sd	zero,-176(s0)
    8021035e:	f4043c23          	sd	zero,-168(s0)
    80210362:	f6043023          	sd	zero,-160(s0)
    80210366:	f6043423          	sd	zero,-152(s0)
    8021036a:	f6043823          	sd	zero,-144(s0)
    8021036e:	f6043c23          	sd	zero,-136(s0)
    80210372:	f8043023          	sd	zero,-128(s0)
    80210376:	f8043423          	sd	zero,-120(s0)
    8021037a:	f8043823          	sd	zero,-112(s0)
    8021037e:	f8043c23          	sd	zero,-104(s0)
    80210382:	fa043023          	sd	zero,-96(s0)
    80210386:	fa043423          	sd	zero,-88(s0)
    8021038a:	fc043783          	ld	a5,-64(s0)
    8021038e:	f2f43023          	sd	a5,-224(s0)
    80210392:	fc843783          	ld	a5,-56(s0)
    80210396:	f2f43423          	sd	a5,-216(s0)
    8021039a:	f2a43823          	sd	a0,-208(s0)
    8021039e:	f2b43c23          	sd	a1,-200(s0)
  };
  switch(who){
    802103a2:	fbc42703          	lw	a4,-68(s0)
    802103a6:	4785                	li	a5,1
    802103a8:	02e7f563          	bgeu	a5,a4,802103d2 <sys_getrusage+0xdc>
			rs.ru_nivcsw = p->ivswtch;
      break;
    default:
      break;
  }
  if(either_copyout(1,rusage,&rs,sizeof(rs))<0){
    802103ac:	09000693          	li	a3,144
    802103b0:	f2040613          	addi	a2,s0,-224
    802103b4:	fb043583          	ld	a1,-80(s0)
    802103b8:	4505                	li	a0,1
    802103ba:	ffffb097          	auipc	ra,0xffffb
    802103be:	67c080e7          	jalr	1660(ra) # 8020ba36 <either_copyout>
    802103c2:	43f55793          	srai	a5,a0,0x3f
    return -1;
  }
  //__debug_info("[sys_getrusage] return 0\n");
  return 0;
}
    802103c6:	853e                	mv	a0,a5
    802103c8:	60ee                	ld	ra,216(sp)
    802103ca:	644e                	ld	s0,208(sp)
    802103cc:	64ae                	ld	s1,200(sp)
    802103ce:	612d                	addi	sp,sp,224
    802103d0:	8082                	ret
			rs.ru_nvcsw = p->vswtch;
    802103d2:	1c44a783          	lw	a5,452(s1)
    802103d6:	faf43023          	sd	a5,-96(s0)
			rs.ru_nivcsw = p->ivswtch;
    802103da:	1c84a783          	lw	a5,456(s1)
    802103de:	faf43423          	sd	a5,-88(s0)
      break;
    802103e2:	b7e9                	j	802103ac <sys_getrusage+0xb6>

00000000802103e4 <sys_umask>:

uint64
sys_umask(void)
{
    802103e4:	1101                	addi	sp,sp,-32
    802103e6:	ec06                	sd	ra,24(sp)
    802103e8:	e822                	sd	s0,16(sp)
    802103ea:	1000                	addi	s0,sp,32
  int n;
  argint(0, &n);
    802103ec:	fec40593          	addi	a1,s0,-20
    802103f0:	4501                	li	a0,0
    802103f2:	ffffd097          	auipc	ra,0xffffd
    802103f6:	370080e7          	jalr	880(ra) # 8020d762 <argint>
  n = n & 0777;
    802103fa:	fec42783          	lw	a5,-20(s0)
    802103fe:	1ff7f793          	andi	a5,a5,511
    80210402:	fef42623          	sw	a5,-20(s0)
  myproc()->umask = n;
    80210406:	ffffc097          	auipc	ra,0xffffc
    8021040a:	fac080e7          	jalr	-84(ra) # 8020c3b2 <myproc>
    8021040e:	fec42783          	lw	a5,-20(s0)
    80210412:	1cf52023          	sw	a5,448(a0)
  return 0;
}
    80210416:	4501                	li	a0,0
    80210418:	60e2                	ld	ra,24(sp)
    8021041a:	6442                	ld	s0,16(sp)
    8021041c:	6105                	addi	sp,sp,32
    8021041e:	8082                	ret

0000000080210420 <sys_nanosleep>:

uint64 
sys_nanosleep(void) {
    80210420:	711d                	addi	sp,sp,-96
    80210422:	ec86                	sd	ra,88(sp)
    80210424:	e8a2                	sd	s0,80(sp)
    80210426:	e4a6                	sd	s1,72(sp)
    80210428:	e0ca                	sd	s2,64(sp)
    8021042a:	fc4e                	sd	s3,56(sp)
    8021042c:	f852                	sd	s4,48(sp)
    8021042e:	f456                	sd	s5,40(sp)
    80210430:	1080                	addi	s0,sp,96
	uint64 addr_sec, addr_usec;

	if (argaddr(0, &addr_sec) < 0) 
    80210432:	fb840593          	addi	a1,s0,-72
    80210436:	4501                	li	a0,0
    80210438:	ffffd097          	auipc	ra,0xffffd
    8021043c:	34c080e7          	jalr	844(ra) # 8020d784 <argaddr>
		return -1;
    80210440:	57fd                	li	a5,-1
	if (argaddr(0, &addr_sec) < 0) 
    80210442:	0c054563          	bltz	a0,8021050c <sys_nanosleep+0xec>
	if (argaddr(1, &addr_usec) < 0) 
    80210446:	fb040593          	addi	a1,s0,-80
    8021044a:	4505                	li	a0,1
    8021044c:	ffffd097          	auipc	ra,0xffffd
    80210450:	338080e7          	jalr	824(ra) # 8020d784 <argaddr>
		return -1;
    80210454:	57fd                	li	a5,-1
	if (argaddr(1, &addr_usec) < 0) 
    80210456:	0a054b63          	bltz	a0,8021050c <sys_nanosleep+0xec>

	struct proc *p = myproc();
    8021045a:	ffffc097          	auipc	ra,0xffffc
    8021045e:	f58080e7          	jalr	-168(ra) # 8020c3b2 <myproc>
    80210462:	89aa                	mv	s3,a0
	uint64 sec, usec;
	if (either_copyin(1, (char*)&sec, addr_sec, sizeof(sec)) < 0) 
    80210464:	46a1                	li	a3,8
    80210466:	fb843603          	ld	a2,-72(s0)
    8021046a:	fa840593          	addi	a1,s0,-88
    8021046e:	4505                	li	a0,1
    80210470:	ffffb097          	auipc	ra,0xffffb
    80210474:	61c080e7          	jalr	1564(ra) # 8020ba8c <either_copyin>
		return -1;
    80210478:	57fd                	li	a5,-1
	if (either_copyin(1, (char*)&sec, addr_sec, sizeof(sec)) < 0) 
    8021047a:	08054963          	bltz	a0,8021050c <sys_nanosleep+0xec>
	if (either_copyin(1, (char*)&usec, addr_usec, sizeof(usec)) < 0) 
    8021047e:	46a1                	li	a3,8
    80210480:	fb043603          	ld	a2,-80(s0)
    80210484:	fa040593          	addi	a1,s0,-96
    80210488:	4505                	li	a0,1
    8021048a:	ffffb097          	auipc	ra,0xffffb
    8021048e:	602080e7          	jalr	1538(ra) # 8020ba8c <either_copyin>
    80210492:	0a054063          	bltz	a0,80210532 <sys_nanosleep+0x112>
		return -1;
	int n = sec * 20 + usec / 50000000;
    80210496:	fa843783          	ld	a5,-88(s0)
    8021049a:	0027949b          	slliw	s1,a5,0x2
    8021049e:	9cbd                	addw	s1,s1,a5
    802104a0:	0024949b          	slliw	s1,s1,0x2
    802104a4:	fa043783          	ld	a5,-96(s0)
    802104a8:	02faf737          	lui	a4,0x2faf
    802104ac:	08070713          	addi	a4,a4,128 # 2faf080 <_entry-0x7d250f80>
    802104b0:	02e7d7b3          	divu	a5,a5,a4
    802104b4:	9cbd                	addw	s1,s1,a5

	int mask = p->tmask;
	if (mask) {
    802104b6:	1149a783          	lw	a5,276(s3)
    802104ba:	e3bd                	bnez	a5,80210520 <sys_nanosleep+0x100>
		printf(") ...\n");
	}
	acquire(&p->lock);
    802104bc:	00898a13          	addi	s4,s3,8
    802104c0:	8552                	mv	a0,s4
    802104c2:	ffff9097          	auipc	ra,0xffff9
    802104c6:	a18080e7          	jalr	-1512(ra) # 80208eda <acquire>
	uint64 tick0 = ticks;
    802104ca:	0515ea97          	auipc	s5,0x515e
    802104ce:	c66aea83          	lwu	s5,-922(s5) # 8536e130 <ticks>
	while (ticks - tick0 < n / 10) {
    802104d2:	47a9                	li	a5,10
    802104d4:	02f4c4bb          	divw	s1,s1,a5
    802104d8:	c485                	beqz	s1,80210500 <sys_nanosleep+0xe0>
		if (p->killed) {
			return -1;
		}
		sleep(&ticks, &p->lock);
    802104da:	0515e917          	auipc	s2,0x515e
    802104de:	c5690913          	addi	s2,s2,-938 # 8536e130 <ticks>
		if (p->killed) {
    802104e2:	0389a783          	lw	a5,56(s3)
    802104e6:	eba1                	bnez	a5,80210536 <sys_nanosleep+0x116>
		sleep(&ticks, &p->lock);
    802104e8:	85d2                	mv	a1,s4
    802104ea:	854a                	mv	a0,s2
    802104ec:	ffff2097          	auipc	ra,0xffff2
    802104f0:	852080e7          	jalr	-1966(ra) # 80201d3e <sleep>
	while (ticks - tick0 < n / 10) {
    802104f4:	00096783          	lwu	a5,0(s2)
    802104f8:	415787b3          	sub	a5,a5,s5
    802104fc:	fe97e3e3          	bltu	a5,s1,802104e2 <sys_nanosleep+0xc2>
	}
	release(&p->lock);
    80210500:	8552                	mv	a0,s4
    80210502:	ffff9097          	auipc	ra,0xffff9
    80210506:	a2c080e7          	jalr	-1492(ra) # 80208f2e <release>

	return 0;
    8021050a:	4781                	li	a5,0
}
    8021050c:	853e                	mv	a0,a5
    8021050e:	60e6                	ld	ra,88(sp)
    80210510:	6446                	ld	s0,80(sp)
    80210512:	64a6                	ld	s1,72(sp)
    80210514:	6906                	ld	s2,64(sp)
    80210516:	79e2                	ld	s3,56(sp)
    80210518:	7a42                	ld	s4,48(sp)
    8021051a:	7aa2                	ld	s5,40(sp)
    8021051c:	6125                	addi	sp,sp,96
    8021051e:	8082                	ret
		printf(") ...\n");
    80210520:	00006517          	auipc	a0,0x6
    80210524:	c5850513          	addi	a0,a0,-936 # 80216178 <UNAME_VERSION+0x330>
    80210528:	ffff9097          	auipc	ra,0xffff9
    8021052c:	d6c080e7          	jalr	-660(ra) # 80209294 <printf>
    80210530:	b771                	j	802104bc <sys_nanosleep+0x9c>
		return -1;
    80210532:	57fd                	li	a5,-1
    80210534:	bfe1                	j	8021050c <sys_nanosleep+0xec>
			return -1;
    80210536:	57fd                	li	a5,-1
    80210538:	bfd1                	j	8021050c <sys_nanosleep+0xec>

000000008021053a <sys_futex>:


uint64
sys_futex(void)
{
    8021053a:	711d                	addi	sp,sp,-96
    8021053c:	ec86                	sd	ra,88(sp)
    8021053e:	e8a2                	sd	s0,80(sp)
    80210540:	e4a6                	sd	s1,72(sp)
    80210542:	1080                	addi	s0,sp,96
  struct timespec ut;
  ktime_t kt;
  uint64 uaddr2;
  int val2 = 0;
  int val3;
  if (argaddr(0, &uaddr) < 0) {
    80210544:	fd840593          	addi	a1,s0,-40
    80210548:	4501                	li	a0,0
    8021054a:	ffffd097          	auipc	ra,0xffffd
    8021054e:	23a080e7          	jalr	570(ra) # 8020d784 <argaddr>
		return -1;
    80210552:	57fd                	li	a5,-1
  if (argaddr(0, &uaddr) < 0) {
    80210554:	0a054163          	bltz	a0,802105f6 <sys_futex+0xbc>
	}
  if (argint(1, &op) < 0) {
    80210558:	fd440593          	addi	a1,s0,-44
    8021055c:	4505                	li	a0,1
    8021055e:	ffffd097          	auipc	ra,0xffffd
    80210562:	204080e7          	jalr	516(ra) # 8020d762 <argint>
		return -1;
    80210566:	57fd                	li	a5,-1
  if (argint(1, &op) < 0) {
    80210568:	08054763          	bltz	a0,802105f6 <sys_futex+0xbc>
	}
  if (argint(2, &val) < 0) {
    8021056c:	fd040593          	addi	a1,s0,-48
    80210570:	4509                	li	a0,2
    80210572:	ffffd097          	auipc	ra,0xffffd
    80210576:	1f0080e7          	jalr	496(ra) # 8020d762 <argint>
		return -1;
    8021057a:	57fd                	li	a5,-1
  if (argint(2, &val) < 0) {
    8021057c:	06054d63          	bltz	a0,802105f6 <sys_futex+0xbc>
	}
  if (argaddr(3, &utime) < 0)
    80210580:	fc840593          	addi	a1,s0,-56
    80210584:	450d                	li	a0,3
    80210586:	ffffd097          	auipc	ra,0xffffd
    8021058a:	1fe080e7          	jalr	510(ra) # 8020d784 <argaddr>
  {
    return -1;
    8021058e:	57fd                	li	a5,-1
  if (argaddr(3, &utime) < 0)
    80210590:	06054363          	bltz	a0,802105f6 <sys_futex+0xbc>
  }
  if (argaddr(4, &uaddr2) < 0)
    80210594:	fa840593          	addi	a1,s0,-88
    80210598:	4511                	li	a0,4
    8021059a:	ffffd097          	auipc	ra,0xffffd
    8021059e:	1ea080e7          	jalr	490(ra) # 8020d784 <argaddr>
  {
    return -1;
    802105a2:	57fd                	li	a5,-1
  if (argaddr(4, &uaddr2) < 0)
    802105a4:	04054963          	bltz	a0,802105f6 <sys_futex+0xbc>
  }
  if (argint(5, &val3) < 0)
    802105a8:	fa440593          	addi	a1,s0,-92
    802105ac:	4515                	li	a0,5
    802105ae:	ffffd097          	auipc	ra,0xffffd
    802105b2:	1b4080e7          	jalr	436(ra) # 8020d762 <argint>
    802105b6:	08054763          	bltz	a0,80210644 <sys_futex+0x10a>
  {
    return -1;
  }

  int cmd = op & FUTEX_CMD_MASK;
    802105ba:	fd442483          	lw	s1,-44(s0)
    802105be:	e7f4f493          	andi	s1,s1,-385
  if(utime == 0)
  {
    // printf("no timeout\n");
  }

  if(cmd == FUTEX_WAIT)
    802105c2:	c0a1                	beqz	s1,80210602 <sys_futex+0xc8>
  {
    either_copyout(1, utime, (char*)&ut, sizeof(struct timespec));
    kt = ktime_set(ut.tv_sec, ut.tv_nsec);
  }

  if (cmd == FUTEX_REQUEUE || cmd == FUTEX_CMP_REQUEUE ||
    802105c4:	ffd4879b          	addiw	a5,s1,-3
    802105c8:	4709                	li	a4,2
    802105ca:	06f76863          	bltu	a4,a5,8021063a <sys_futex+0x100>
	    cmd == FUTEX_CMP_REQUEUE_PI || cmd == FUTEX_WAKE_OP)
		val2 = (uint32) (unsigned long) utime;
    802105ce:	fc842483          	lw	s1,-56(s0)

  do_futex((int*)uaddr, op, val, &kt, (int *)uaddr2, val2, val3);
    802105d2:	fa442803          	lw	a6,-92(s0)
    802105d6:	87a6                	mv	a5,s1
    802105d8:	fa843703          	ld	a4,-88(s0)
    802105dc:	fb040693          	addi	a3,s0,-80
    802105e0:	fd042603          	lw	a2,-48(s0)
    802105e4:	fd442583          	lw	a1,-44(s0)
    802105e8:	fd843503          	ld	a0,-40(s0)
    802105ec:	ffff2097          	auipc	ra,0xffff2
    802105f0:	e2a080e7          	jalr	-470(ra) # 80202416 <do_futex>
  return 0;
    802105f4:	4781                	li	a5,0
}
    802105f6:	853e                	mv	a0,a5
    802105f8:	60e6                	ld	ra,88(sp)
    802105fa:	6446                	ld	s0,80(sp)
    802105fc:	64a6                	ld	s1,72(sp)
    802105fe:	6125                	addi	sp,sp,96
    80210600:	8082                	ret
    either_copyout(1, utime, (char*)&ut, sizeof(struct timespec));
    80210602:	46c1                	li	a3,16
    80210604:	fb840613          	addi	a2,s0,-72
    80210608:	fc843583          	ld	a1,-56(s0)
    8021060c:	4505                	li	a0,1
    8021060e:	ffffb097          	auipc	ra,0xffffb
    80210612:	428080e7          	jalr	1064(ra) # 8020ba36 <either_copyout>
    kt = ktime_set(ut.tv_sec, ut.tv_nsec);
    80210616:	fb843783          	ld	a5,-72(s0)
    8021061a:	fc043683          	ld	a3,-64(s0)
    if (secs >= KTIME_SEC_MAX)
    8021061e:	577d                	li	a4,-1
    80210620:	8305                	srli	a4,a4,0x1
    80210622:	00e78963          	beq	a5,a4,80210634 <sys_futex+0xfa>
    return secs * NSEC_PER_SEC + (int64)nsecs;
    80210626:	3b9ad737          	lui	a4,0x3b9ad
    8021062a:	a0070713          	addi	a4,a4,-1536 # 3b9aca00 <_entry-0x44853600>
    8021062e:	02e787b3          	mul	a5,a5,a4
    80210632:	97b6                	add	a5,a5,a3
    80210634:	faf43823          	sd	a5,-80(s0)
  if (cmd == FUTEX_REQUEUE || cmd == FUTEX_CMP_REQUEUE ||
    80210638:	bf69                	j	802105d2 <sys_futex+0x98>
    8021063a:	47b1                	li	a5,12
    8021063c:	f8f489e3          	beq	s1,a5,802105ce <sys_futex+0x94>
  int val2 = 0;
    80210640:	4481                	li	s1,0
    80210642:	bf41                	j	802105d2 <sys_futex+0x98>
    return -1;
    80210644:	57fd                	li	a5,-1
    80210646:	bf45                	j	802105f6 <sys_futex+0xbc>

0000000080210648 <logbufinit>:

char syslogbuf[1024];
int logbuflen = 0;

void
logbufinit(){
    80210648:	1101                	addi	sp,sp,-32
    8021064a:	ec06                	sd	ra,24(sp)
    8021064c:	e822                	sd	s0,16(sp)
    8021064e:	e426                	sd	s1,8(sp)
    80210650:	e04a                	sd	s2,0(sp)
    80210652:	1000                	addi	s0,sp,32
  logbuflen = 0;
    80210654:	0515e497          	auipc	s1,0x515e
    80210658:	1d448493          	addi	s1,s1,468 # 8536e828 <logbuflen>
    8021065c:	0004a023          	sw	zero,0(s1)
  strncpy(syslogbuf,
    80210660:	0515e917          	auipc	s2,0x515e
    80210664:	dc890913          	addi	s2,s2,-568 # 8536e428 <syslogbuf>
    80210668:	40000613          	li	a2,1024
    8021066c:	00006597          	auipc	a1,0x6
    80210670:	b1458593          	addi	a1,a1,-1260 # 80216180 <UNAME_VERSION+0x338>
    80210674:	854a                	mv	a0,s2
    80210676:	ffff1097          	auipc	ra,0xffff1
    8021067a:	816080e7          	jalr	-2026(ra) # 80200e8c <strncpy>
  	"[log]init done\n",
  	1024);
  logbuflen+=strlen(syslogbuf);
    8021067e:	854a                	mv	a0,s2
    80210680:	ffff1097          	auipc	ra,0xffff1
    80210684:	87c080e7          	jalr	-1924(ra) # 80200efc <strlen>
    80210688:	409c                	lw	a5,0(s1)
    8021068a:	9fa9                	addw	a5,a5,a0
    8021068c:	c09c                	sw	a5,0(s1)
}
    8021068e:	60e2                	ld	ra,24(sp)
    80210690:	6442                	ld	s0,16(sp)
    80210692:	64a2                	ld	s1,8(sp)
    80210694:	6902                	ld	s2,0(sp)
    80210696:	6105                	addi	sp,sp,32
    80210698:	8082                	ret

000000008021069a <sys_syslog>:

uint64
sys_syslog(){
    8021069a:	7179                	addi	sp,sp,-48
    8021069c:	f406                	sd	ra,40(sp)
    8021069e:	f022                	sd	s0,32(sp)
    802106a0:	1800                	addi	s0,sp,48
  int type;
  uint64 bufp;
  int len;
  if(argint(0,&type)<0){
    802106a2:	fec40593          	addi	a1,s0,-20
    802106a6:	4501                	li	a0,0
    802106a8:	ffffd097          	auipc	ra,0xffffd
    802106ac:	0ba080e7          	jalr	186(ra) # 8020d762 <argint>
    return -1;
    802106b0:	57fd                	li	a5,-1
  if(argint(0,&type)<0){
    802106b2:	02054e63          	bltz	a0,802106ee <sys_syslog+0x54>
  }
  if(argaddr(1,&bufp)<0){
    802106b6:	fe040593          	addi	a1,s0,-32
    802106ba:	4505                	li	a0,1
    802106bc:	ffffd097          	auipc	ra,0xffffd
    802106c0:	0c8080e7          	jalr	200(ra) # 8020d784 <argaddr>
    return -1;
    802106c4:	57fd                	li	a5,-1
  if(argaddr(1,&bufp)<0){
    802106c6:	02054463          	bltz	a0,802106ee <sys_syslog+0x54>
  }
  if(argint(2,&len)<0){
    802106ca:	fdc40593          	addi	a1,s0,-36
    802106ce:	4509                	li	a0,2
    802106d0:	ffffd097          	auipc	ra,0xffffd
    802106d4:	092080e7          	jalr	146(ra) # 8020d762 <argint>
    802106d8:	04054663          	bltz	a0,80210724 <sys_syslog+0x8a>
    return -1;
  }
  switch(type){
    802106dc:	fec42783          	lw	a5,-20(s0)
    802106e0:	470d                	li	a4,3
    802106e2:	00e78b63          	beq	a5,a4,802106f8 <sys_syslog+0x5e>
      if(either_copyout(1,bufp,syslogbuf,logbuflen)<0){
        return -1;
      }
      return logbuflen;
    }
    case SYSLOG_ACTION_SIZE_BUFFER: return sizeof(syslogbuf);
    802106e6:	17d9                	addi	a5,a5,-10
    802106e8:	0017b793          	seqz	a5,a5
    802106ec:	07aa                	slli	a5,a5,0xa
  }
  //printf("[syslog] type:%d bufp:%p len:%p\n",type,bufp,len);
  return 0;
}
    802106ee:	853e                	mv	a0,a5
    802106f0:	70a2                	ld	ra,40(sp)
    802106f2:	7402                	ld	s0,32(sp)
    802106f4:	6145                	addi	sp,sp,48
    802106f6:	8082                	ret
      if(either_copyout(1,bufp,syslogbuf,logbuflen)<0){
    802106f8:	0515e697          	auipc	a3,0x515e
    802106fc:	1306a683          	lw	a3,304(a3) # 8536e828 <logbuflen>
    80210700:	0515e617          	auipc	a2,0x515e
    80210704:	d2860613          	addi	a2,a2,-728 # 8536e428 <syslogbuf>
    80210708:	fe043583          	ld	a1,-32(s0)
    8021070c:	4505                	li	a0,1
    8021070e:	ffffb097          	auipc	ra,0xffffb
    80210712:	328080e7          	jalr	808(ra) # 8020ba36 <either_copyout>
    80210716:	00054963          	bltz	a0,80210728 <sys_syslog+0x8e>
      return logbuflen;
    8021071a:	0515e797          	auipc	a5,0x515e
    8021071e:	10e7a783          	lw	a5,270(a5) # 8536e828 <logbuflen>
    80210722:	b7f1                	j	802106ee <sys_syslog+0x54>
    return -1;
    80210724:	57fd                	li	a5,-1
    80210726:	b7e1                	j	802106ee <sys_syslog+0x54>
        return -1;
    80210728:	57fd                	li	a5,-1
    8021072a:	b7d1                	j	802106ee <sys_syslog+0x54>

000000008021072c <sys_sysinfo>:

uint64
sys_sysinfo(void)
{
    8021072c:	7175                	addi	sp,sp,-144
    8021072e:	e506                	sd	ra,136(sp)
    80210730:	e122                	sd	s0,128(sp)
    80210732:	0900                	addi	s0,sp,144
	uint64 addr;
	// struct proc *p = myproc();

	if (argaddr(0, &addr) < 0) {
    80210734:	fe840593          	addi	a1,s0,-24
    80210738:	4501                	li	a0,0
    8021073a:	ffffd097          	auipc	ra,0xffffd
    8021073e:	04a080e7          	jalr	74(ra) # 8020d784 <argaddr>
    80210742:	87aa                	mv	a5,a0
		return -1;
    80210744:	557d                	li	a0,-1
	if (argaddr(0, &addr) < 0) {
    80210746:	0607c963          	bltz	a5,802107b8 <sys_sysinfo+0x8c>
	}

	struct sysinfo info;
	memset(&info, 0, sizeof(info));
    8021074a:	07000613          	li	a2,112
    8021074e:	4581                	li	a1,0
    80210750:	f7840513          	addi	a0,s0,-136
    80210754:	ffff0097          	auipc	ra,0xffff0
    80210758:	620080e7          	jalr	1568(ra) # 80200d74 <memset>
    8021075c:	c01027f3          	rdtime	a5

	info.uptime = r_time() / CLK_FREQ;
    80210760:	00bec737          	lui	a4,0xbec
    80210764:	c2070713          	addi	a4,a4,-992 # bebc20 <_entry-0x7f6143e0>
    80210768:	02e7d7b3          	divu	a5,a5,a4
    8021076c:	f6f43c23          	sd	a5,-136(s0)
	info.totalram = PHYSTOP - RUSTSBI_BASE;
    80210770:	080007b7          	lui	a5,0x8000
    80210774:	f8f43c23          	sd	a5,-104(s0)
	info.freeram = idlepages() << PGSHIFT;
    80210778:	ffff9097          	auipc	ra,0xffff9
    8021077c:	6e8080e7          	jalr	1768(ra) # 80209e60 <idlepages>
    80210780:	0532                	slli	a0,a0,0xc
    80210782:	faa43023          	sd	a0,-96(s0)
	info.bufferram = BSIZE * BNUM;
    80210786:	001397b7          	lui	a5,0x139
    8021078a:	80078793          	addi	a5,a5,-2048 # 138800 <_entry-0x800c7800>
    8021078e:	faf43823          	sd	a5,-80(s0)
	info.procs = NPROC;
    80210792:	06400793          	li	a5,100
    80210796:	fcf41423          	sh	a5,-56(s0)
	info.mem_unit = PGSIZE;
    8021079a:	6785                	lui	a5,0x1
    8021079c:	fef42023          	sw	a5,-32(s0)

	// if (copyout(p->pagetable, addr, (char *)&info, sizeof(info)) < 0) {
	if (either_copyout(1,addr, (char *)&info, sizeof(info)) < 0) {
    802107a0:	07000693          	li	a3,112
    802107a4:	f7840613          	addi	a2,s0,-136
    802107a8:	fe843583          	ld	a1,-24(s0)
    802107ac:	4505                	li	a0,1
    802107ae:	ffffb097          	auipc	ra,0xffffb
    802107b2:	288080e7          	jalr	648(ra) # 8020ba36 <either_copyout>
    802107b6:	957d                	srai	a0,a0,0x3f
		return -1;
	}

	return 0;
}
    802107b8:	60aa                	ld	ra,136(sp)
    802107ba:	640a                	ld	s0,128(sp)
    802107bc:	6149                	addi	sp,sp,144
    802107be:	8082                	ret

00000000802107c0 <sys_ppoll>:
#include "include/poll.h"
#include "include/epoll.h"
#include "include/signal.h"

uint64
sys_ppoll(void){
    802107c0:	715d                	addi	sp,sp,-80
    802107c2:	e486                	sd	ra,72(sp)
    802107c4:	e0a2                	sd	s0,64(sp)
    802107c6:	fc26                	sd	s1,56(sp)
    802107c8:	f84a                	sd	s2,48(sp)
    802107ca:	f44e                	sd	s3,40(sp)
    802107cc:	0880                	addi	s0,sp,80
  uint64 tm_addr;
  struct timespec tmo_p;
  uint64 sm_addr;
  __sigset_t sigmask;
  
  if(argint(1,&nfds) < 0)
    802107ce:	fcc40593          	addi	a1,s0,-52
    802107d2:	4505                	li	a0,1
    802107d4:	ffffd097          	auipc	ra,0xffffd
    802107d8:	f8e080e7          	jalr	-114(ra) # 8020d762 <argint>
  {
    return -1;
    802107dc:	54fd                	li	s1,-1
  if(argint(1,&nfds) < 0)
    802107de:	08054a63          	bltz	a0,80210872 <sys_ppoll+0xb2>
  }
  
  fds = (struct pollfd *)kmalloc(sizeof(struct pollfd) * nfds);
    802107e2:	fcc42503          	lw	a0,-52(s0)
    802107e6:	0035151b          	slliw	a0,a0,0x3
    802107ea:	ffff9097          	auipc	ra,0xffff9
    802107ee:	7d2080e7          	jalr	2002(ra) # 80209fbc <kmalloc>
    802107f2:	892a                	mv	s2,a0
  
  if((fds_addr = argstruct(0, fds, nfds * sizeof(struct pollfd))) == NULL)
    802107f4:	fcc42603          	lw	a2,-52(s0)
    802107f8:	0036161b          	slliw	a2,a2,0x3
    802107fc:	85aa                	mv	a1,a0
    802107fe:	4501                	li	a0,0
    80210800:	ffffd097          	auipc	ra,0xffffd
    80210804:	178080e7          	jalr	376(ra) # 8020d978 <argstruct>
    80210808:	89aa                	mv	s3,a0
    8021080a:	c525                	beqz	a0,80210872 <sys_ppoll+0xb2>
  {
    return -1;
  }
  
  tm_addr = argstruct(2, &tmo_p, sizeof(struct timespec));
    8021080c:	4641                	li	a2,16
    8021080e:	fb840593          	addi	a1,s0,-72
    80210812:	4509                	li	a0,2
    80210814:	ffffd097          	auipc	ra,0xffffd
    80210818:	164080e7          	jalr	356(ra) # 8020d978 <argstruct>
    8021081c:	84aa                	mv	s1,a0
  sm_addr = argstruct(3, &sigmask, sizeof(__sigset_t));
    8021081e:	4621                	li	a2,8
    80210820:	fb040593          	addi	a1,s0,-80
    80210824:	450d                	li	a0,3
    80210826:	ffffd097          	auipc	ra,0xffffd
    8021082a:	152080e7          	jalr	338(ra) # 8020d978 <argstruct>
  
  uint64 ret = ppoll(fds, nfds,
    8021082e:	009034b3          	snez	s1,s1
    80210832:	409004b3          	neg	s1,s1
    80210836:	00a03533          	snez	a0,a0
    8021083a:	40a00533          	neg	a0,a0
    8021083e:	fb040693          	addi	a3,s0,-80
    80210842:	8ee9                	and	a3,a3,a0
    80210844:	fb840613          	addi	a2,s0,-72
    80210848:	8e65                	and	a2,a2,s1
    8021084a:	fcc42583          	lw	a1,-52(s0)
    8021084e:	854a                	mv	a0,s2
    80210850:	ffffb097          	auipc	ra,0xffffb
    80210854:	434080e7          	jalr	1076(ra) # 8020bc84 <ppoll>
    80210858:	84aa                	mv	s1,a0
  			tm_addr?&tmo_p:NULL, 
  			sm_addr?&sigmask:NULL);
  
  if(either_copyout(1, fds_addr, fds, sizeof(struct pollfd) * nfds) < 0)
    8021085a:	fcc42683          	lw	a3,-52(s0)
    8021085e:	068e                	slli	a3,a3,0x3
    80210860:	864a                	mv	a2,s2
    80210862:	85ce                	mv	a1,s3
    80210864:	4505                	li	a0,1
    80210866:	ffffb097          	auipc	ra,0xffffb
    8021086a:	1d0080e7          	jalr	464(ra) # 8020ba36 <either_copyout>
    8021086e:	00054a63          	bltz	a0,80210882 <sys_ppoll+0xc2>
  {
    return -1;
  }
  
  return ret;
}
    80210872:	8526                	mv	a0,s1
    80210874:	60a6                	ld	ra,72(sp)
    80210876:	6406                	ld	s0,64(sp)
    80210878:	74e2                	ld	s1,56(sp)
    8021087a:	7942                	ld	s2,48(sp)
    8021087c:	79a2                	ld	s3,40(sp)
    8021087e:	6161                	addi	sp,sp,80
    80210880:	8082                	ret
    return -1;
    80210882:	54fd                	li	s1,-1
    80210884:	b7fd                	j	80210872 <sys_ppoll+0xb2>

0000000080210886 <sys_pselect6>:

uint64
sys_pselect6()
{
    80210886:	7141                	addi	sp,sp,-496
    80210888:	f786                	sd	ra,488(sp)
    8021088a:	f3a2                	sd	s0,480(sp)
    8021088c:	efa6                	sd	s1,472(sp)
    8021088e:	ebca                	sd	s2,464(sp)
    80210890:	1b80                	addi	s0,sp,496
  	int nfds;
	uint64 urfds, uwfds, uexfds;
	uint64 utoaddr, usmaddr;
	
	argint(0, &nfds);
    80210892:	fdc40593          	addi	a1,s0,-36
    80210896:	4501                	li	a0,0
    80210898:	ffffd097          	auipc	ra,0xffffd
    8021089c:	eca080e7          	jalr	-310(ra) # 8020d762 <argint>
	argaddr(1, &urfds);
    802108a0:	fd040593          	addi	a1,s0,-48
    802108a4:	4505                	li	a0,1
    802108a6:	ffffd097          	auipc	ra,0xffffd
    802108aa:	ede080e7          	jalr	-290(ra) # 8020d784 <argaddr>
	argaddr(2, &uwfds);
    802108ae:	fc840593          	addi	a1,s0,-56
    802108b2:	4509                	li	a0,2
    802108b4:	ffffd097          	auipc	ra,0xffffd
    802108b8:	ed0080e7          	jalr	-304(ra) # 8020d784 <argaddr>
	argaddr(3, &uexfds);
    802108bc:	fc040593          	addi	a1,s0,-64
    802108c0:	450d                	li	a0,3
    802108c2:	ffffd097          	auipc	ra,0xffffd
    802108c6:	ec2080e7          	jalr	-318(ra) # 8020d784 <argaddr>
	argaddr(4, &utoaddr);
    802108ca:	fb840593          	addi	a1,s0,-72
    802108ce:	4511                	li	a0,4
    802108d0:	ffffd097          	auipc	ra,0xffffd
    802108d4:	eb4080e7          	jalr	-332(ra) # 8020d784 <argaddr>
	argaddr(5, &usmaddr);
    802108d8:	fb040593          	addi	a1,s0,-80
    802108dc:	4515                	li	a0,5
    802108de:	ffffd097          	auipc	ra,0xffffd
    802108e2:	ea6080e7          	jalr	-346(ra) # 8020d784 <argaddr>
	
	if (nfds <= 0 || nfds > FDSET_SIZE)
    802108e6:	fdc42783          	lw	a5,-36(s0)
    802108ea:	37fd                	addiw	a5,a5,-1
    802108ec:	3ff00713          	li	a4,1023
		return -EINVAL;
    802108f0:	5529                	li	a0,-22
	if (nfds <= 0 || nfds > FDSET_SIZE)
    802108f2:	0cf76b63          	bltu	a4,a5,802109c8 <sys_pselect6+0x142>
	if (!(urfds || uwfds || uexfds))
    802108f6:	fd043603          	ld	a2,-48(s0)
    802108fa:	ee69                	bnez	a2,802109d4 <sys_pselect6+0x14e>
    802108fc:	fc843783          	ld	a5,-56(s0)
    80210900:	fc043703          	ld	a4,-64(s0)
    80210904:	8fd9                	or	a5,a5,a4
    80210906:	c3e9                	beqz	a5,802109c8 <sys_pselect6+0x142>
	struct timespec timeout;
	__sigset_t sigmask;

	if (urfds && either_copyin(1, (char *)&rfds, urfds, sizeof(struct fdset)) < 0)
		return -EFAULT;
	if (uwfds && either_copyin(1, (char *)&wfds, uwfds, sizeof(struct fdset)) < 0)
    80210908:	fc843603          	ld	a2,-56(s0)
    8021090c:	e26d                	bnez	a2,802109ee <sys_pselect6+0x168>
		return -EFAULT;
	if (uexfds && either_copyin(1, (char *)&exfds, uexfds, sizeof(struct fdset)) < 0)
    8021090e:	fc043603          	ld	a2,-64(s0)
    80210912:	ea7d                	bnez	a2,80210a08 <sys_pselect6+0x182>
		return -EFAULT;
	if (utoaddr && either_copyin(1, (char *)&timeout, utoaddr, sizeof(timeout)) < 0)
    80210914:	fb843603          	ld	a2,-72(s0)
    80210918:	10061563          	bnez	a2,80210a22 <sys_pselect6+0x19c>
		return -EFAULT;
	if (usmaddr && either_copyin(1, (char *)&sigmask, usmaddr, sizeof(sigmask)) < 0)
    8021091c:	fb043603          	ld	a2,-80(s0)
    80210920:	ca19                	beqz	a2,80210936 <sys_pselect6+0xb0>
    80210922:	46a1                	li	a3,8
    80210924:	e1840593          	addi	a1,s0,-488
    80210928:	4505                	li	a0,1
    8021092a:	ffffb097          	auipc	ra,0xffffb
    8021092e:	162080e7          	jalr	354(ra) # 8020ba8c <either_copyin>
    80210932:	16054663          	bltz	a0,80210a9e <sys_pselect6+0x218>
		return -EFAULT;

	struct proc *p = myproc();
    80210936:	ffffc097          	auipc	ra,0xffffc
    8021093a:	a7c080e7          	jalr	-1412(ra) # 8020c3b2 <myproc>
    8021093e:	892a                	mv	s2,a0
	if (p->tmask) {
    80210940:	11452783          	lw	a5,276(a0)
    80210944:	ebfd                	bnez	a5,80210a3a <sys_pselect6+0x1b4>
		printf(") ...\n");
	}

	int ret = pselect(nfds,
    80210946:	fd043583          	ld	a1,-48(s0)
    8021094a:	00b035b3          	snez	a1,a1
    8021094e:	40b005b3          	neg	a1,a1
    80210952:	fc843603          	ld	a2,-56(s0)
    80210956:	00c03633          	snez	a2,a2
    8021095a:	40c00633          	neg	a2,a2
    8021095e:	fc043683          	ld	a3,-64(s0)
    80210962:	00d036b3          	snez	a3,a3
    80210966:	40d006b3          	neg	a3,a3
    8021096a:	fb843703          	ld	a4,-72(s0)
    8021096e:	00e03733          	snez	a4,a4
    80210972:	40e00733          	neg	a4,a4
    80210976:	fb043783          	ld	a5,-80(s0)
    8021097a:	00f037b3          	snez	a5,a5
    8021097e:	40f007b3          	neg	a5,a5
    80210982:	e1840513          	addi	a0,s0,-488
    80210986:	8fe9                	and	a5,a5,a0
    80210988:	e2040513          	addi	a0,s0,-480
    8021098c:	8f69                	and	a4,a4,a0
    8021098e:	e3040513          	addi	a0,s0,-464
    80210992:	8ee9                	and	a3,a3,a0
    80210994:	eb040513          	addi	a0,s0,-336
    80210998:	8e69                	and	a2,a2,a0
    8021099a:	f3040513          	addi	a0,s0,-208
    8021099e:	8de9                	and	a1,a1,a0
    802109a0:	fdc42503          	lw	a0,-36(s0)
    802109a4:	ffffb097          	auipc	ra,0xffffb
    802109a8:	312080e7          	jalr	786(ra) # 8020bcb6 <pselect>
    802109ac:	84aa                	mv	s1,a0
				uexfds ? &exfds: NULL,
				utoaddr ? &timeout : NULL,
				usmaddr ? &sigmask : NULL
			);

	if (urfds)
    802109ae:	fd043583          	ld	a1,-48(s0)
    802109b2:	edc9                	bnez	a1,80210a4c <sys_pselect6+0x1c6>
		either_copyout(1, urfds, (char *)&rfds, sizeof(struct fdset));
	if (uwfds)
    802109b4:	fc843583          	ld	a1,-56(s0)
    802109b8:	e5c5                	bnez	a1,80210a60 <sys_pselect6+0x1da>
		either_copyout(1, uwfds, (char *)&wfds, sizeof(struct fdset));
	if (uexfds)
    802109ba:	fc043583          	ld	a1,-64(s0)
    802109be:	e9dd                	bnez	a1,80210a74 <sys_pselect6+0x1ee>
		either_copyout(1, uexfds, (char *)&exfds, sizeof(struct fdset));

	if (p->tmask) {
    802109c0:	11492783          	lw	a5,276(s2)
    802109c4:	e3f1                	bnez	a5,80210a88 <sys_pselect6+0x202>
		printf("pid %d: return from pselect(", p->pid);
	}

	//__debug_info("[sys_pselect6] ret = %d\n", ret);
	return ret;
    802109c6:	8526                	mv	a0,s1
}
    802109c8:	70be                	ld	ra,488(sp)
    802109ca:	741e                	ld	s0,480(sp)
    802109cc:	64fe                	ld	s1,472(sp)
    802109ce:	695e                	ld	s2,464(sp)
    802109d0:	617d                	addi	sp,sp,496
    802109d2:	8082                	ret
	if (urfds && either_copyin(1, (char *)&rfds, urfds, sizeof(struct fdset)) < 0)
    802109d4:	08000693          	li	a3,128
    802109d8:	f3040593          	addi	a1,s0,-208
    802109dc:	4505                	li	a0,1
    802109de:	ffffb097          	auipc	ra,0xffffb
    802109e2:	0ae080e7          	jalr	174(ra) # 8020ba8c <either_copyin>
    802109e6:	f20551e3          	bgez	a0,80210908 <sys_pselect6+0x82>
		return -EFAULT;
    802109ea:	5549                	li	a0,-14
    802109ec:	bff1                	j	802109c8 <sys_pselect6+0x142>
	if (uwfds && either_copyin(1, (char *)&wfds, uwfds, sizeof(struct fdset)) < 0)
    802109ee:	08000693          	li	a3,128
    802109f2:	eb040593          	addi	a1,s0,-336
    802109f6:	4505                	li	a0,1
    802109f8:	ffffb097          	auipc	ra,0xffffb
    802109fc:	094080e7          	jalr	148(ra) # 8020ba8c <either_copyin>
    80210a00:	f00557e3          	bgez	a0,8021090e <sys_pselect6+0x88>
		return -EFAULT;
    80210a04:	5549                	li	a0,-14
    80210a06:	b7c9                	j	802109c8 <sys_pselect6+0x142>
	if (uexfds && either_copyin(1, (char *)&exfds, uexfds, sizeof(struct fdset)) < 0)
    80210a08:	08000693          	li	a3,128
    80210a0c:	e3040593          	addi	a1,s0,-464
    80210a10:	4505                	li	a0,1
    80210a12:	ffffb097          	auipc	ra,0xffffb
    80210a16:	07a080e7          	jalr	122(ra) # 8020ba8c <either_copyin>
    80210a1a:	ee055de3          	bgez	a0,80210914 <sys_pselect6+0x8e>
		return -EFAULT;
    80210a1e:	5549                	li	a0,-14
    80210a20:	b765                	j	802109c8 <sys_pselect6+0x142>
	if (utoaddr && either_copyin(1, (char *)&timeout, utoaddr, sizeof(timeout)) < 0)
    80210a22:	46c1                	li	a3,16
    80210a24:	e2040593          	addi	a1,s0,-480
    80210a28:	4505                	li	a0,1
    80210a2a:	ffffb097          	auipc	ra,0xffffb
    80210a2e:	062080e7          	jalr	98(ra) # 8020ba8c <either_copyin>
    80210a32:	ee0555e3          	bgez	a0,8021091c <sys_pselect6+0x96>
		return -EFAULT;
    80210a36:	5549                	li	a0,-14
    80210a38:	bf41                	j	802109c8 <sys_pselect6+0x142>
		printf(") ...\n");
    80210a3a:	00005517          	auipc	a0,0x5
    80210a3e:	73e50513          	addi	a0,a0,1854 # 80216178 <UNAME_VERSION+0x330>
    80210a42:	ffff9097          	auipc	ra,0xffff9
    80210a46:	852080e7          	jalr	-1966(ra) # 80209294 <printf>
    80210a4a:	bdf5                	j	80210946 <sys_pselect6+0xc0>
		either_copyout(1, urfds, (char *)&rfds, sizeof(struct fdset));
    80210a4c:	08000693          	li	a3,128
    80210a50:	f3040613          	addi	a2,s0,-208
    80210a54:	4505                	li	a0,1
    80210a56:	ffffb097          	auipc	ra,0xffffb
    80210a5a:	fe0080e7          	jalr	-32(ra) # 8020ba36 <either_copyout>
    80210a5e:	bf99                	j	802109b4 <sys_pselect6+0x12e>
		either_copyout(1, uwfds, (char *)&wfds, sizeof(struct fdset));
    80210a60:	08000693          	li	a3,128
    80210a64:	eb040613          	addi	a2,s0,-336
    80210a68:	4505                	li	a0,1
    80210a6a:	ffffb097          	auipc	ra,0xffffb
    80210a6e:	fcc080e7          	jalr	-52(ra) # 8020ba36 <either_copyout>
    80210a72:	b7a1                	j	802109ba <sys_pselect6+0x134>
		either_copyout(1, uexfds, (char *)&exfds, sizeof(struct fdset));
    80210a74:	08000693          	li	a3,128
    80210a78:	e3040613          	addi	a2,s0,-464
    80210a7c:	4505                	li	a0,1
    80210a7e:	ffffb097          	auipc	ra,0xffffb
    80210a82:	fb8080e7          	jalr	-72(ra) # 8020ba36 <either_copyout>
    80210a86:	bf2d                	j	802109c0 <sys_pselect6+0x13a>
		printf("pid %d: return from pselect(", p->pid);
    80210a88:	04092583          	lw	a1,64(s2)
    80210a8c:	00005517          	auipc	a0,0x5
    80210a90:	70450513          	addi	a0,a0,1796 # 80216190 <UNAME_VERSION+0x348>
    80210a94:	ffff9097          	auipc	ra,0xffff9
    80210a98:	800080e7          	jalr	-2048(ra) # 80209294 <printf>
    80210a9c:	b72d                	j	802109c6 <sys_pselect6+0x140>
		return -EFAULT;
    80210a9e:	5549                	li	a0,-14
    80210aa0:	b725                	j	802109c8 <sys_pselect6+0x142>

0000000080210aa2 <sys_epoll_create1>:

uint64
sys_epoll_create1(void)
{
    80210aa2:	7179                	addi	sp,sp,-48
    80210aa4:	f406                	sd	ra,40(sp)
    80210aa6:	f022                	sd	s0,32(sp)
    80210aa8:	ec26                	sd	s1,24(sp)
    80210aaa:	e84a                	sd	s2,16(sp)
    80210aac:	1800                	addi	s0,sp,48
  int flags;
  struct proc* p=myproc();
    80210aae:	ffffc097          	auipc	ra,0xffffc
    80210ab2:	904080e7          	jalr	-1788(ra) # 8020c3b2 <myproc>
    80210ab6:	892a                	mv	s2,a0
  if(argint(0,&flags)<0){
    80210ab8:	fdc40593          	addi	a1,s0,-36
    80210abc:	4501                	li	a0,0
    80210abe:	ffffd097          	auipc	ra,0xffffd
    80210ac2:	ca4080e7          	jalr	-860(ra) # 8020d762 <argint>
    return -1;
    80210ac6:	57fd                	li	a5,-1
  if(argint(0,&flags)<0){
    80210ac8:	04054563          	bltz	a0,80210b12 <sys_epoll_create1+0x70>
  }
  
  struct file* f = filealloc();
    80210acc:	ffff5097          	auipc	ra,0xffff5
    80210ad0:	738080e7          	jalr	1848(ra) # 80206204 <filealloc>
    80210ad4:	84aa                	mv	s1,a0
  f->type = FD_EPOLL;
    80210ad6:	4791                	li	a5,4
    80210ad8:	c11c                	sw	a5,0(a0)
  f->readable = 0;
    80210ada:	00050423          	sb	zero,8(a0)
  f->writable = 0;
    80210ade:	000504a3          	sb	zero,9(a0)
  f->epoll = epollalloc();
    80210ae2:	ffffb097          	auipc	ra,0xffffb
    80210ae6:	574080e7          	jalr	1396(ra) # 8020c056 <epollalloc>
    80210aea:	ec88                	sd	a0,24(s1)
  int fd = fdalloc(f);
    80210aec:	8526                	mv	a0,s1
    80210aee:	ffffe097          	auipc	ra,0xffffe
    80210af2:	c2e080e7          	jalr	-978(ra) # 8020e71c <fdalloc>
    80210af6:	87aa                	mv	a5,a0
  if(fd>=0){
    80210af8:	00054d63          	bltz	a0,80210b12 <sys_epoll_create1+0x70>
    p->exec_close[fd] = flags&O_CLOEXEC;
    80210afc:	0f093703          	ld	a4,240(s2)
    80210b00:	00251693          	slli	a3,a0,0x2
    80210b04:	9736                	add	a4,a4,a3
    80210b06:	fdc42683          	lw	a3,-36(s0)
    80210b0a:	00080637          	lui	a2,0x80
    80210b0e:	8ef1                	and	a3,a3,a2
    80210b10:	c314                	sw	a3,0(a4)
  }
  return fd;
}
    80210b12:	853e                	mv	a0,a5
    80210b14:	70a2                	ld	ra,40(sp)
    80210b16:	7402                	ld	s0,32(sp)
    80210b18:	64e2                	ld	s1,24(sp)
    80210b1a:	6942                	ld	s2,16(sp)
    80210b1c:	6145                	addi	sp,sp,48
    80210b1e:	8082                	ret

0000000080210b20 <sys_epoll_ctl>:

uint64
sys_epoll_ctl(void)
{
    80210b20:	7139                	addi	sp,sp,-64
    80210b22:	fc06                	sd	ra,56(sp)
    80210b24:	f822                	sd	s0,48(sp)
    80210b26:	0080                	addi	s0,sp,64
  int op;
  int fd;
  int ret = -1;
  struct epoll_event event;
  struct epoll* epoll;
  if(argepoll(0, &epfd,0,&epoll)<0){
    80210b28:	fc840693          	addi	a3,s0,-56
    80210b2c:	4601                	li	a2,0
    80210b2e:	fec40593          	addi	a1,s0,-20
    80210b32:	4501                	li	a0,0
    80210b34:	ffffd097          	auipc	ra,0xffffd
    80210b38:	de0080e7          	jalr	-544(ra) # 8020d914 <argepoll>
    return -1;
    80210b3c:	57fd                	li	a5,-1
  if(argepoll(0, &epfd,0,&epoll)<0){
    80210b3e:	06054163          	bltz	a0,80210ba0 <sys_epoll_ctl+0x80>
  }
  argint(1, &op);
    80210b42:	fe840593          	addi	a1,s0,-24
    80210b46:	4505                	li	a0,1
    80210b48:	ffffd097          	auipc	ra,0xffffd
    80210b4c:	c1a080e7          	jalr	-998(ra) # 8020d762 <argint>
  argint(2, &fd);
    80210b50:	fe440593          	addi	a1,s0,-28
    80210b54:	4509                	li	a0,2
    80210b56:	ffffd097          	auipc	ra,0xffffd
    80210b5a:	c0c080e7          	jalr	-1012(ra) # 8020d762 <argint>
  if(argstruct(3, &event, sizeof(struct epoll_event))==NULL){
    80210b5e:	4641                	li	a2,16
    80210b60:	fd040593          	addi	a1,s0,-48
    80210b64:	450d                	li	a0,3
    80210b66:	ffffd097          	auipc	ra,0xffffd
    80210b6a:	e12080e7          	jalr	-494(ra) # 8020d978 <argstruct>
    return -1;
    80210b6e:	57fd                	li	a5,-1
  if(argstruct(3, &event, sizeof(struct epoll_event))==NULL){
    80210b70:	c905                	beqz	a0,80210ba0 <sys_epoll_ctl+0x80>
  }
  printf("[epoll ctl]op:%d fd:%d event->mask:%p\n",op,fd,event.events);
    80210b72:	fd042683          	lw	a3,-48(s0)
    80210b76:	fe442603          	lw	a2,-28(s0)
    80210b7a:	fe842583          	lw	a1,-24(s0)
    80210b7e:	00005517          	auipc	a0,0x5
    80210b82:	63250513          	addi	a0,a0,1586 # 802161b0 <UNAME_VERSION+0x368>
    80210b86:	ffff8097          	auipc	ra,0xffff8
    80210b8a:	70e080e7          	jalr	1806(ra) # 80209294 <printf>
  //print_f_info(p->ofile[fd]);
  switch(op){
    80210b8e:	fe842783          	lw	a5,-24(s0)
    80210b92:	4705                	li	a4,1
    80210b94:	00e78b63          	beq	a5,a4,80210baa <sys_epoll_ctl+0x8a>
    80210b98:	4709                	li	a4,2
    80210b9a:	02e78463          	beq	a5,a4,80210bc2 <sys_epoll_ctl+0xa2>
    80210b9e:	57fd                	li	a5,-1
    case EPOLL_CTL_ADD:ret = epolladd(epoll,fd,&event);break;
    case EPOLL_CTL_DEL:ret = epolldel(epoll,fd);break;
    case EPOLL_CTL_MOD:ret = -1;break;
  }
  return ret;
}
    80210ba0:	853e                	mv	a0,a5
    80210ba2:	70e2                	ld	ra,56(sp)
    80210ba4:	7442                	ld	s0,48(sp)
    80210ba6:	6121                	addi	sp,sp,64
    80210ba8:	8082                	ret
    case EPOLL_CTL_ADD:ret = epolladd(epoll,fd,&event);break;
    80210baa:	fd040613          	addi	a2,s0,-48
    80210bae:	fe442583          	lw	a1,-28(s0)
    80210bb2:	fc843503          	ld	a0,-56(s0)
    80210bb6:	ffffb097          	auipc	ra,0xffffb
    80210bba:	4d4080e7          	jalr	1236(ra) # 8020c08a <epolladd>
    80210bbe:	87aa                	mv	a5,a0
    80210bc0:	b7c5                	j	80210ba0 <sys_epoll_ctl+0x80>
    case EPOLL_CTL_DEL:ret = epolldel(epoll,fd);break;
    80210bc2:	fe442583          	lw	a1,-28(s0)
    80210bc6:	fc843503          	ld	a0,-56(s0)
    80210bca:	ffffb097          	auipc	ra,0xffffb
    80210bce:	4fe080e7          	jalr	1278(ra) # 8020c0c8 <epolldel>
    80210bd2:	87aa                	mv	a5,a0
  return ret;
    80210bd4:	b7f1                	j	80210ba0 <sys_epoll_ctl+0x80>

0000000080210bd6 <sys_epoll_pwait>:

uint64
sys_epoll_pwait(void)
{
    80210bd6:	715d                	addi	sp,sp,-80
    80210bd8:	e486                	sd	ra,72(sp)
    80210bda:	e0a2                	sd	s0,64(sp)
    80210bdc:	fc26                	sd	s1,56(sp)
    80210bde:	0880                	addi	s0,sp,80
  //printf("[epoll wait]enter\n");
  extern int firstwait;
  if(firstwait){
    80210be0:	01046797          	auipc	a5,0x1046
    80210be4:	fd07a783          	lw	a5,-48(a5) # 81256bb0 <firstwait>
    80210be8:	e7c5                	bnez	a5,80210c90 <sys_epoll_pwait+0xba>
  int timeout;
  uint64 events_addr;
  uint64 sigmaskaddr;
  __sigset_t sigmask;
  struct epoll* epoll;
  if(argepoll(0, &epfd,0,&epoll)<0){
    80210bea:	fb840693          	addi	a3,s0,-72
    80210bee:	4601                	li	a2,0
    80210bf0:	fdc40593          	addi	a1,s0,-36
    80210bf4:	4501                	li	a0,0
    80210bf6:	ffffd097          	auipc	ra,0xffffd
    80210bfa:	d1e080e7          	jalr	-738(ra) # 8020d914 <argepoll>
    80210bfe:	87aa                	mv	a5,a0
    return -1;
    80210c00:	557d                	li	a0,-1
  if(argepoll(0, &epfd,0,&epoll)<0){
    80210c02:	0807c263          	bltz	a5,80210c86 <sys_epoll_pwait+0xb0>
  }
  argaddr(1,&events_addr);
    80210c06:	fc840593          	addi	a1,s0,-56
    80210c0a:	4505                	li	a0,1
    80210c0c:	ffffd097          	auipc	ra,0xffffd
    80210c10:	b78080e7          	jalr	-1160(ra) # 8020d784 <argaddr>
  argint(2,&maxevents);
    80210c14:	fd840593          	addi	a1,s0,-40
    80210c18:	4509                	li	a0,2
    80210c1a:	ffffd097          	auipc	ra,0xffffd
    80210c1e:	b48080e7          	jalr	-1208(ra) # 8020d762 <argint>
  argint(3,&timeout);
    80210c22:	fd440593          	addi	a1,s0,-44
    80210c26:	450d                	li	a0,3
    80210c28:	ffffd097          	auipc	ra,0xffffd
    80210c2c:	b3a080e7          	jalr	-1222(ra) # 8020d762 <argint>
  sigmaskaddr = argstruct(4,&sigmask,sizeof(__sigset_t));
    80210c30:	4621                	li	a2,8
    80210c32:	fc040593          	addi	a1,s0,-64
    80210c36:	4511                	li	a0,4
    80210c38:	ffffd097          	auipc	ra,0xffffd
    80210c3c:	d40080e7          	jalr	-704(ra) # 8020d978 <argstruct>
    80210c40:	84aa                	mv	s1,a0
  printf("epfd:%d maxevents:%d timeout:%d sigmaskaddr:%p\n",epfd,maxevents,timeout,sigmaskaddr);
    80210c42:	872a                	mv	a4,a0
    80210c44:	fd442683          	lw	a3,-44(s0)
    80210c48:	fd842603          	lw	a2,-40(s0)
    80210c4c:	fdc42583          	lw	a1,-36(s0)
    80210c50:	00005517          	auipc	a0,0x5
    80210c54:	58850513          	addi	a0,a0,1416 # 802161d8 <UNAME_VERSION+0x390>
    80210c58:	ffff8097          	auipc	ra,0xffff8
    80210c5c:	63c080e7          	jalr	1596(ra) # 80209294 <printf>
  int ret = epoll_pwait(epoll, events_addr, maxevents 
    80210c60:	009034b3          	snez	s1,s1
    80210c64:	409004b3          	neg	s1,s1
    80210c68:	fd442703          	lw	a4,-44(s0)
    80210c6c:	fc040693          	addi	a3,s0,-64
    80210c70:	8ee5                	and	a3,a3,s1
    80210c72:	fd842603          	lw	a2,-40(s0)
    80210c76:	fc843583          	ld	a1,-56(s0)
    80210c7a:	fb843503          	ld	a0,-72(s0)
    80210c7e:	ffffb097          	auipc	ra,0xffffb
    80210c82:	508080e7          	jalr	1288(ra) # 8020c186 <epoll_pwait>
  			, sigmaskaddr?&sigmask:NULL
  			, timeout);
  return ret;
}
    80210c86:	60a6                	ld	ra,72(sp)
    80210c88:	6406                	ld	s0,64(sp)
    80210c8a:	74e2                	ld	s1,56(sp)
    80210c8c:	6161                	addi	sp,sp,80
    80210c8e:	8082                	ret
    firstwait = 0;
    80210c90:	01046797          	auipc	a5,0x1046
    80210c94:	f207a023          	sw	zero,-224(a5) # 81256bb0 <firstwait>
    readyq_push(clientproc);
    80210c98:	01046517          	auipc	a0,0x1046
    80210c9c:	f2053503          	ld	a0,-224(a0) # 81256bb8 <clientproc>
    80210ca0:	ffff1097          	auipc	ra,0xffff1
    80210ca4:	8c0080e7          	jalr	-1856(ra) # 80201560 <readyq_push>
    80210ca8:	b789                	j	80210bea <sys_epoll_pwait+0x14>

0000000080210caa <sys_prctl>:

uint64
sys_prctl(void)
{
    80210caa:	1141                	addi	sp,sp,-16
    80210cac:	e422                	sd	s0,8(sp)
    80210cae:	0800                	addi	s0,sp,16
  return 0;
}
    80210cb0:	4501                	li	a0,0
    80210cb2:	6422                	ld	s0,8(sp)
    80210cb4:	0141                	addi	sp,sp,16
    80210cb6:	8082                	ret

0000000080210cb8 <sys_socket>:
#include "include/pipe.h"
#include "include/errno.h"

uint64
sys_socket(void)
{
    80210cb8:	7179                	addi	sp,sp,-48
    80210cba:	f406                	sd	ra,40(sp)
    80210cbc:	f022                	sd	s0,32(sp)
    80210cbe:	ec26                	sd	s1,24(sp)
    80210cc0:	e84a                	sd	s2,16(sp)
    80210cc2:	1800                	addi	s0,sp,48
  int fd;
  int domain;
  int type;
  int protocol;
  argint(0, &domain);
    80210cc4:	fdc40593          	addi	a1,s0,-36
    80210cc8:	4501                	li	a0,0
    80210cca:	ffffd097          	auipc	ra,0xffffd
    80210cce:	a98080e7          	jalr	-1384(ra) # 8020d762 <argint>
  argint(1, &type);
    80210cd2:	fd840593          	addi	a1,s0,-40
    80210cd6:	4505                	li	a0,1
    80210cd8:	ffffd097          	auipc	ra,0xffffd
    80210cdc:	a8a080e7          	jalr	-1398(ra) # 8020d762 <argint>
  argint(2, &protocol);
    80210ce0:	fd440593          	addi	a1,s0,-44
    80210ce4:	4509                	li	a0,2
    80210ce6:	ffffd097          	auipc	ra,0xffffd
    80210cea:	a7c080e7          	jalr	-1412(ra) # 8020d762 <argint>
  //printf("SOCKET domain:%p type:%p protocol:%p\n", domain, type, protocol);
  struct file* f = NULL;
  struct socket* sk = NULL;
  if((f=filealloc())==NULL||(fd=fdalloc(f))<0){
    80210cee:	ffff5097          	auipc	ra,0xffff5
    80210cf2:	516080e7          	jalr	1302(ra) # 80206204 <filealloc>
    80210cf6:	cd39                	beqz	a0,80210d54 <sys_socket+0x9c>
    80210cf8:	84aa                	mv	s1,a0
    80210cfa:	ffffe097          	auipc	ra,0xffffe
    80210cfe:	a22080e7          	jalr	-1502(ra) # 8020e71c <fdalloc>
    80210d02:	892a                	mv	s2,a0
    80210d04:	04054d63          	bltz	a0,80210d5e <sys_socket+0xa6>
    goto bad;
  }
  f->type = FD_SOCKET;
    80210d08:	4795                	li	a5,5
    80210d0a:	c09c                	sw	a5,0(s1)
  sk = socketalloc();
    80210d0c:	ffff5097          	auipc	ra,0xffff5
    80210d10:	b46080e7          	jalr	-1210(ra) # 80205852 <socketalloc>
  f->sk = sk;
    80210d14:	e888                	sd	a0,16(s1)
  f->readable = 1;
    80210d16:	4785                	li	a5,1
    80210d18:	00f48423          	sb	a5,8(s1)
  f->writable = 1;
    80210d1c:	00f484a3          	sb	a5,9(s1)
  sk->domain = domain;
    80210d20:	fdc42783          	lw	a5,-36(s0)
    80210d24:	c15c                	sw	a5,4(a0)
  sk->type = type;
    80210d26:	fd842783          	lw	a5,-40(s0)
    80210d2a:	c51c                	sw	a5,8(a0)
  sk->protocol = protocol;
    80210d2c:	fd442783          	lw	a5,-44(s0)
    80210d30:	c55c                	sw	a5,12(a0)
  printf("create socket fd:%d id:%d\n",fd,sk->id);
    80210d32:	4110                	lw	a2,0(a0)
    80210d34:	85ca                	mv	a1,s2
    80210d36:	00005517          	auipc	a0,0x5
    80210d3a:	4d250513          	addi	a0,a0,1234 # 80216208 <UNAME_VERSION+0x3c0>
    80210d3e:	ffff8097          	auipc	ra,0xffff8
    80210d42:	556080e7          	jalr	1366(ra) # 80209294 <printf>
  return fd;
    80210d46:	854a                	mv	a0,s2
bad:
  if(!f)fileclose(f); 
  if(!sk)socketclose(sk); 
  return -1;
}
    80210d48:	70a2                	ld	ra,40(sp)
    80210d4a:	7402                	ld	s0,32(sp)
    80210d4c:	64e2                	ld	s1,24(sp)
    80210d4e:	6942                	ld	s2,16(sp)
    80210d50:	6145                	addi	sp,sp,48
    80210d52:	8082                	ret
  if(!f)fileclose(f); 
    80210d54:	4501                	li	a0,0
    80210d56:	ffff5097          	auipc	ra,0xffff5
    80210d5a:	546080e7          	jalr	1350(ra) # 8020629c <fileclose>
  if(!sk)socketclose(sk); 
    80210d5e:	4501                	li	a0,0
    80210d60:	ffff5097          	auipc	ra,0xffff5
    80210d64:	b64080e7          	jalr	-1180(ra) # 802058c4 <socketclose>
  return -1;
    80210d68:	557d                	li	a0,-1
    80210d6a:	bff9                	j	80210d48 <sys_socket+0x90>

0000000080210d6c <sys_setsockopt>:

uint64
sys_setsockopt(void)
{
    80210d6c:	7139                	addi	sp,sp,-64
    80210d6e:	fc06                	sd	ra,56(sp)
    80210d70:	f822                	sd	s0,48(sp)
    80210d72:	0080                	addi	s0,sp,64
  int sockfd;
  int level;
  int optname;
  uint64 optvaladdr;
  socklen_t optlen;
  struct file* f = NULL;
    80210d74:	fc043423          	sd	zero,-56(s0)
  struct socket* sk;
  if(argsock(0, &sockfd, &f, &sk)<0){
    80210d78:	fc040693          	addi	a3,s0,-64
    80210d7c:	fc840613          	addi	a2,s0,-56
    80210d80:	fec40593          	addi	a1,s0,-20
    80210d84:	4501                	li	a0,0
    80210d86:	ffffd097          	auipc	ra,0xffffd
    80210d8a:	b2a080e7          	jalr	-1238(ra) # 8020d8b0 <argsock>
    return -1;
    80210d8e:	57fd                	li	a5,-1
  if(argsock(0, &sockfd, &f, &sk)<0){
    80210d90:	02054f63          	bltz	a0,80210dce <sys_setsockopt+0x62>
  }
  argint(1, &level);
    80210d94:	fe840593          	addi	a1,s0,-24
    80210d98:	4505                	li	a0,1
    80210d9a:	ffffd097          	auipc	ra,0xffffd
    80210d9e:	9c8080e7          	jalr	-1592(ra) # 8020d762 <argint>
  argint(2, &optname);
    80210da2:	fe440593          	addi	a1,s0,-28
    80210da6:	4509                	li	a0,2
    80210da8:	ffffd097          	auipc	ra,0xffffd
    80210dac:	9ba080e7          	jalr	-1606(ra) # 8020d762 <argint>
  argaddr(3, &optvaladdr);
    80210db0:	fd840593          	addi	a1,s0,-40
    80210db4:	450d                	li	a0,3
    80210db6:	ffffd097          	auipc	ra,0xffffd
    80210dba:	9ce080e7          	jalr	-1586(ra) # 8020d784 <argaddr>
  argint(4, &optlen);
    80210dbe:	fd440593          	addi	a1,s0,-44
    80210dc2:	4511                	li	a0,4
    80210dc4:	ffffd097          	auipc	ra,0xffffd
    80210dc8:	99e080e7          	jalr	-1634(ra) # 8020d762 <argint>
  //printf("[setsockopt]sockfd:%d level:%d optname:%d optaddr:%p optlen:%p\n",sockfd, level,optname, optvaladdr,optlen);
  return 0;
    80210dcc:	4781                	li	a5,0
}
    80210dce:	853e                	mv	a0,a5
    80210dd0:	70e2                	ld	ra,56(sp)
    80210dd2:	7442                	ld	s0,48(sp)
    80210dd4:	6121                	addi	sp,sp,64
    80210dd6:	8082                	ret

0000000080210dd8 <sys_bind>:

uint64
sys_bind(void)
{
    80210dd8:	715d                	addi	sp,sp,-80
    80210dda:	e486                	sd	ra,72(sp)
    80210ddc:	e0a2                	sd	s0,64(sp)
    80210dde:	0880                	addi	s0,sp,80
  int sockfd;
  struct file* f;
  socklen_t addrlen;
  struct socket* sk;
  sockaddr addr;
  if(argsock(0, &sockfd, &f, &sk)<0){
    80210de0:	fd040693          	addi	a3,s0,-48
    80210de4:	fe040613          	addi	a2,s0,-32
    80210de8:	fec40593          	addi	a1,s0,-20
    80210dec:	4501                	li	a0,0
    80210dee:	ffffd097          	auipc	ra,0xffffd
    80210df2:	ac2080e7          	jalr	-1342(ra) # 8020d8b0 <argsock>
    return -1;
    80210df6:	57fd                	li	a5,-1
  if(argsock(0, &sockfd, &f, &sk)<0){
    80210df8:	0c054663          	bltz	a0,80210ec4 <sys_bind+0xec>
  }
  slock(sk);
    80210dfc:	fd043503          	ld	a0,-48(s0)
    80210e00:	ffff5097          	auipc	ra,0xffff5
    80210e04:	b98080e7          	jalr	-1128(ra) # 80205998 <slock>
  if(sk->sk_type==SK_NONE){
    80210e08:	fd043783          	ld	a5,-48(s0)
    80210e0c:	43b8                	lw	a4,64(a5)
    80210e0e:	eb51                	bnez	a4,80210ea2 <sys_bind+0xca>
    sk->sk_type = SK_BIND;
    80210e10:	4705                	li	a4,1
    80210e12:	c3b8                	sw	a4,64(a5)
  }else{
    __debug_warn("socket type conflct\n");
    goto bad;
  }
  if(argint(2, &addrlen)<0){
    80210e14:	fdc40593          	addi	a1,s0,-36
    80210e18:	4509                	li	a0,2
    80210e1a:	ffffd097          	auipc	ra,0xffffd
    80210e1e:	948080e7          	jalr	-1720(ra) # 8020d762 <argint>
    80210e22:	08054863          	bltz	a0,80210eb2 <sys_bind+0xda>
    goto bad;
  }
  printf("bind sockfd:%d addrlen:%p\n", sockfd, addrlen);
    80210e26:	fdc42603          	lw	a2,-36(s0)
    80210e2a:	fec42583          	lw	a1,-20(s0)
    80210e2e:	00005517          	auipc	a0,0x5
    80210e32:	41250513          	addi	a0,a0,1042 # 80216240 <UNAME_VERSION+0x3f8>
    80210e36:	ffff8097          	auipc	ra,0xffff8
    80210e3a:	45e080e7          	jalr	1118(ra) # 80209294 <printf>
  if(argstruct(1, &addr, addrlen)==0){
    80210e3e:	fdc42603          	lw	a2,-36(s0)
    80210e42:	fb040593          	addi	a1,s0,-80
    80210e46:	4505                	li	a0,1
    80210e48:	ffffd097          	auipc	ra,0xffffd
    80210e4c:	b30080e7          	jalr	-1232(ra) # 8020d978 <argstruct>
    80210e50:	c12d                	beqz	a0,80210eb2 <sys_bind+0xda>
    goto bad;
  }
  print_sockaddr(&addr);
    80210e52:	fb040513          	addi	a0,s0,-80
    80210e56:	ffff5097          	auipc	ra,0xffff5
    80210e5a:	fe0080e7          	jalr	-32(ra) # 80205e36 <print_sockaddr>
  if(bindaddr(sk, &addr)<0){
    80210e5e:	fb040593          	addi	a1,s0,-80
    80210e62:	fd043503          	ld	a0,-48(s0)
    80210e66:	ffff5097          	auipc	ra,0xffff5
    80210e6a:	89e080e7          	jalr	-1890(ra) # 80205704 <bindaddr>
    80210e6e:	06054063          	bltz	a0,80210ece <sys_bind+0xf6>
    printf("[sys bind]bind bad\n");
    goto bad;
  }
  extern struct netIP localIP[];
  if(sk->bind_port->IP==localIP+1){
    80210e72:	fd043503          	ld	a0,-48(s0)
    80210e76:	14853783          	ld	a5,328(a0)
    80210e7a:	6798                	ld	a4,8(a5)
    80210e7c:	016dd797          	auipc	a5,0x16dd
    80210e80:	e1c78793          	addi	a5,a5,-484 # 818edc98 <localIP+0x680018>
    80210e84:	04f70e63          	beq	a4,a5,80210ee0 <sys_bind+0x108>
    f->epollv = socketnoepoll;
  }else{
    f->epollv = acceptepoll;
    80210e88:	fe043783          	ld	a5,-32(s0)
    80210e8c:	ffff5717          	auipc	a4,0xffff5
    80210e90:	f0070713          	addi	a4,a4,-256 # 80205d8c <acceptepoll>
    80210e94:	f3b8                	sd	a4,96(a5)
  }
  sunlock(sk);
    80210e96:	ffff5097          	auipc	ra,0xffff5
    80210e9a:	b1e080e7          	jalr	-1250(ra) # 802059b4 <sunlock>
  return 0;
    80210e9e:	4781                	li	a5,0
    80210ea0:	a015                	j	80210ec4 <sys_bind+0xec>
    __debug_warn("socket type conflct\n");
    80210ea2:	00005517          	auipc	a0,0x5
    80210ea6:	38650513          	addi	a0,a0,902 # 80216228 <UNAME_VERSION+0x3e0>
    80210eaa:	ffff8097          	auipc	ra,0xffff8
    80210eae:	7c6080e7          	jalr	1990(ra) # 80209670 <__debug_warn>
bad:
  sk->type =SK_NONE;
    80210eb2:	fd043503          	ld	a0,-48(s0)
    80210eb6:	00052423          	sw	zero,8(a0)
  sunlock(sk);
    80210eba:	ffff5097          	auipc	ra,0xffff5
    80210ebe:	afa080e7          	jalr	-1286(ra) # 802059b4 <sunlock>
  return -1;
    80210ec2:	57fd                	li	a5,-1
}
    80210ec4:	853e                	mv	a0,a5
    80210ec6:	60a6                	ld	ra,72(sp)
    80210ec8:	6406                	ld	s0,64(sp)
    80210eca:	6161                	addi	sp,sp,80
    80210ecc:	8082                	ret
    printf("[sys bind]bind bad\n");
    80210ece:	00005517          	auipc	a0,0x5
    80210ed2:	39250513          	addi	a0,a0,914 # 80216260 <UNAME_VERSION+0x418>
    80210ed6:	ffff8097          	auipc	ra,0xffff8
    80210eda:	3be080e7          	jalr	958(ra) # 80209294 <printf>
    goto bad;
    80210ede:	bfd1                	j	80210eb2 <sys_bind+0xda>
    f->epollv = socketnoepoll;
    80210ee0:	fe043783          	ld	a5,-32(s0)
    80210ee4:	ffff5717          	auipc	a4,0xffff5
    80210ee8:	f4470713          	addi	a4,a4,-188 # 80205e28 <socketnoepoll>
    80210eec:	f3b8                	sd	a4,96(a5)
    80210eee:	b765                	j	80210e96 <sys_bind+0xbe>

0000000080210ef0 <sys_connect>:

uint64
sys_connect(void){
    80210ef0:	715d                	addi	sp,sp,-80
    80210ef2:	e486                	sd	ra,72(sp)
    80210ef4:	e0a2                	sd	s0,64(sp)
    80210ef6:	0880                	addi	s0,sp,80
  int sockfd;
  struct file* f;
  struct socket* sk;
  sockaddr addr;
  socklen_t addrlen;
  if(argsock(0, &sockfd, &f, &sk)<0){
    80210ef8:	fd840693          	addi	a3,s0,-40
    80210efc:	fe040613          	addi	a2,s0,-32
    80210f00:	fec40593          	addi	a1,s0,-20
    80210f04:	4501                	li	a0,0
    80210f06:	ffffd097          	auipc	ra,0xffffd
    80210f0a:	9aa080e7          	jalr	-1622(ra) # 8020d8b0 <argsock>
    return -1;
    80210f0e:	57fd                	li	a5,-1
  if(argsock(0, &sockfd, &f, &sk)<0){
    80210f10:	0a054a63          	bltz	a0,80210fc4 <sys_connect+0xd4>
  }
  slock(sk);
    80210f14:	fd843503          	ld	a0,-40(s0)
    80210f18:	ffff5097          	auipc	ra,0xffff5
    80210f1c:	a80080e7          	jalr	-1408(ra) # 80205998 <slock>
  if(sk->sk_type==SK_NONE){
    80210f20:	fd843783          	ld	a5,-40(s0)
    80210f24:	43b8                	lw	a4,64(a5)
    80210f26:	ef35                	bnez	a4,80210fa2 <sys_connect+0xb2>
    sk->sk_type = SK_CONNECT;
    80210f28:	4709                	li	a4,2
    80210f2a:	c3b8                	sw	a4,64(a5)
  }else{
    __debug_warn("socket type conflct\n");
    goto bad;
  }
  if(argint(2, &addrlen)<0){
    80210f2c:	fb440593          	addi	a1,s0,-76
    80210f30:	4509                	li	a0,2
    80210f32:	ffffd097          	auipc	ra,0xffffd
    80210f36:	830080e7          	jalr	-2000(ra) # 8020d762 <argint>
    80210f3a:	06054c63          	bltz	a0,80210fb2 <sys_connect+0xc2>
    goto bad;
  }
  if(bindalloc(sk)<0){
    80210f3e:	fd843503          	ld	a0,-40(s0)
    80210f42:	ffff4097          	auipc	ra,0xffff4
    80210f46:	65a080e7          	jalr	1626(ra) # 8020559c <bindalloc>
    return -1;
    80210f4a:	57fd                	li	a5,-1
  if(bindalloc(sk)<0){
    80210f4c:	06054c63          	bltz	a0,80210fc4 <sys_connect+0xd4>
  }
  //printf("conncet sockfd:%d addrlen:%p\n", sockfd, addrlen);
  if(argstruct(1, &addr, addrlen)==0){
    80210f50:	fb442603          	lw	a2,-76(s0)
    80210f54:	fb840593          	addi	a1,s0,-72
    80210f58:	4505                	li	a0,1
    80210f5a:	ffffd097          	auipc	ra,0xffffd
    80210f5e:	a1e080e7          	jalr	-1506(ra) # 8020d978 <argstruct>
    80210f62:	c921                	beqz	a0,80210fb2 <sys_connect+0xc2>
    goto bad;
  }
  print_sockaddr(&addr);
    80210f64:	fb840513          	addi	a0,s0,-72
    80210f68:	ffff5097          	auipc	ra,0xffff5
    80210f6c:	ece080e7          	jalr	-306(ra) # 80205e36 <print_sockaddr>
  if(connect(sk,&addr)<0){
    80210f70:	fb840593          	addi	a1,s0,-72
    80210f74:	fd843503          	ld	a0,-40(s0)
    80210f78:	ffff5097          	auipc	ra,0xffff5
    80210f7c:	d06080e7          	jalr	-762(ra) # 80205c7e <connect>
    80210f80:	02054963          	bltz	a0,80210fb2 <sys_connect+0xc2>
    goto bad;
  }
  sunlock(sk);
    80210f84:	fd843503          	ld	a0,-40(s0)
    80210f88:	ffff5097          	auipc	ra,0xffff5
    80210f8c:	a2c080e7          	jalr	-1492(ra) # 802059b4 <sunlock>
  f->epollv = socketepoll;
    80210f90:	fe043783          	ld	a5,-32(s0)
    80210f94:	ffff5717          	auipc	a4,0xffff5
    80210f98:	e4270713          	addi	a4,a4,-446 # 80205dd6 <socketepoll>
    80210f9c:	f3b8                	sd	a4,96(a5)
  return 0;
    80210f9e:	4781                	li	a5,0
    80210fa0:	a015                	j	80210fc4 <sys_connect+0xd4>
    __debug_warn("socket type conflct\n");
    80210fa2:	00005517          	auipc	a0,0x5
    80210fa6:	28650513          	addi	a0,a0,646 # 80216228 <UNAME_VERSION+0x3e0>
    80210faa:	ffff8097          	auipc	ra,0xffff8
    80210fae:	6c6080e7          	jalr	1734(ra) # 80209670 <__debug_warn>
bad:
  sk->type = SK_NONE;
    80210fb2:	fd843503          	ld	a0,-40(s0)
    80210fb6:	00052423          	sw	zero,8(a0)
  sunlock(sk);
    80210fba:	ffff5097          	auipc	ra,0xffff5
    80210fbe:	9fa080e7          	jalr	-1542(ra) # 802059b4 <sunlock>
  return -1;
    80210fc2:	57fd                	li	a5,-1
}
    80210fc4:	853e                	mv	a0,a5
    80210fc6:	60a6                	ld	ra,72(sp)
    80210fc8:	6406                	ld	s0,64(sp)
    80210fca:	6161                	addi	sp,sp,80
    80210fcc:	8082                	ret

0000000080210fce <sys_sendto>:

uint64
sys_sendto(void)
{
    80210fce:	7159                	addi	sp,sp,-112
    80210fd0:	f486                	sd	ra,104(sp)
    80210fd2:	f0a2                	sd	s0,96(sp)
    80210fd4:	eca6                	sd	s1,88(sp)
    80210fd6:	e8ca                	sd	s2,80(sp)
    80210fd8:	1880                	addi	s0,sp,112
  char* buf;
  uint64 len;
  int flags;
  socklen_t addrlen;
  int addrfree = 0;
  if(argsock(0, &sockfd, &f, &sk)<0){
    80210fda:	fc840693          	addi	a3,s0,-56
    80210fde:	fd040613          	addi	a2,s0,-48
    80210fe2:	fdc40593          	addi	a1,s0,-36
    80210fe6:	4501                	li	a0,0
    80210fe8:	ffffd097          	auipc	ra,0xffffd
    80210fec:	8c8080e7          	jalr	-1848(ra) # 8020d8b0 <argsock>
    return -1;
    80210ff0:	57fd                	li	a5,-1
  if(argsock(0, &sockfd, &f, &sk)<0){
    80210ff2:	14054563          	bltz	a0,8021113c <sys_sendto+0x16e>
  }
  argaddr(1, &bufaddr);
    80210ff6:	fc040593          	addi	a1,s0,-64
    80210ffa:	4505                	li	a0,1
    80210ffc:	ffffc097          	auipc	ra,0xffffc
    80211000:	788080e7          	jalr	1928(ra) # 8020d784 <argaddr>
  argaddr(2, &len);
    80211004:	fb840593          	addi	a1,s0,-72
    80211008:	4509                	li	a0,2
    8021100a:	ffffc097          	auipc	ra,0xffffc
    8021100e:	77a080e7          	jalr	1914(ra) # 8020d784 <argaddr>
  argint(3, &flags);
    80211012:	fb440593          	addi	a1,s0,-76
    80211016:	450d                	li	a0,3
    80211018:	ffffc097          	auipc	ra,0xffffc
    8021101c:	74a080e7          	jalr	1866(ra) # 8020d762 <argint>
  buf = kmalloc(len);
    80211020:	fb842503          	lw	a0,-72(s0)
    80211024:	ffff9097          	auipc	ra,0xffff9
    80211028:	f98080e7          	jalr	-104(ra) # 80209fbc <kmalloc>
    8021102c:	84aa                	mv	s1,a0
  if(either_copyin(1, buf, bufaddr,len)<0){
    8021102e:	fb843683          	ld	a3,-72(s0)
    80211032:	fc043603          	ld	a2,-64(s0)
    80211036:	85aa                	mv	a1,a0
    80211038:	4505                	li	a0,1
    8021103a:	ffffb097          	auipc	ra,0xffffb
    8021103e:	a52080e7          	jalr	-1454(ra) # 8020ba8c <either_copyin>
    return -1;
    80211042:	57fd                	li	a5,-1
  if(either_copyin(1, buf, bufaddr,len)<0){
    80211044:	0e054c63          	bltz	a0,8021113c <sys_sendto+0x16e>
  }
  struct msg* msg = createmsg(buf, len);
    80211048:	fb843583          	ld	a1,-72(s0)
    8021104c:	8526                	mv	a0,s1
    8021104e:	ffff5097          	auipc	ra,0xffff5
    80211052:	a7e080e7          	jalr	-1410(ra) # 80205acc <createmsg>
    80211056:	84aa                	mv	s1,a0
  if(argint(5, &addrlen)<0){
    80211058:	fb040593          	addi	a1,s0,-80
    8021105c:	4515                	li	a0,5
    8021105e:	ffffc097          	auipc	ra,0xffffc
    80211062:	704080e7          	jalr	1796(ra) # 8020d762 <argint>
    return -1;
    80211066:	57fd                	li	a5,-1
  if(argint(5, &addrlen)<0){
    80211068:	0c054a63          	bltz	a0,8021113c <sys_sendto+0x16e>
  }
  slock(sk);
    8021106c:	fc843503          	ld	a0,-56(s0)
    80211070:	ffff5097          	auipc	ra,0xffff5
    80211074:	928080e7          	jalr	-1752(ra) # 80205998 <slock>
  if(sk->sk_type == SK_CONNECT){
    80211078:	fc843503          	ld	a0,-56(s0)
    8021107c:	4138                	lw	a4,64(a0)
    8021107e:	4789                	li	a5,2
    80211080:	0cf70563          	beq	a4,a5,8021114a <sys_sendto+0x17c>
    sendmsg(sk, NULL, msg);
  }else{
    addr = kmalloc(sizeof(sockaddr));
    80211084:	4571                	li	a0,28
    80211086:	ffff9097          	auipc	ra,0xffff9
    8021108a:	f36080e7          	jalr	-202(ra) # 80209fbc <kmalloc>
    8021108e:	892a                	mv	s2,a0
    addrfree = 1;
    if(argstruct(4, addr, addrlen)==0){
    80211090:	fb042603          	lw	a2,-80(s0)
    80211094:	85aa                	mv	a1,a0
    80211096:	4511                	li	a0,4
    80211098:	ffffd097          	auipc	ra,0xffffd
    8021109c:	8e0080e7          	jalr	-1824(ra) # 8020d978 <argstruct>
      return -1;
    802110a0:	57fd                	li	a5,-1
    if(argstruct(4, addr, addrlen)==0){
    802110a2:	cd49                	beqz	a0,8021113c <sys_sendto+0x16e>
    }
    sendmsg(sk, addr, msg);
    802110a4:	8626                	mv	a2,s1
    802110a6:	85ca                	mv	a1,s2
    802110a8:	fc843503          	ld	a0,-56(s0)
    802110ac:	ffff5097          	auipc	ra,0xffff5
    802110b0:	f6e080e7          	jalr	-146(ra) # 8020601a <sendmsg>
  }
  printf(" sendto sockfd:%d addrlen:%p\n", sockfd, addrlen);
    802110b4:	fb042603          	lw	a2,-80(s0)
    802110b8:	fdc42583          	lw	a1,-36(s0)
    802110bc:	00005517          	auipc	a0,0x5
    802110c0:	1bc50513          	addi	a0,a0,444 # 80216278 <UNAME_VERSION+0x430>
    802110c4:	ffff8097          	auipc	ra,0xffff8
    802110c8:	1d0080e7          	jalr	464(ra) # 80209294 <printf>
  destroymsg(msg);
    802110cc:	8526                	mv	a0,s1
    802110ce:	ffff5097          	auipc	ra,0xffff5
    802110d2:	a5a080e7          	jalr	-1446(ra) # 80205b28 <destroymsg>
  sunlock(sk);
    802110d6:	fc843503          	ld	a0,-56(s0)
    802110da:	ffff5097          	auipc	ra,0xffff5
    802110de:	8da080e7          	jalr	-1830(ra) # 802059b4 <sunlock>
  if(addrfree)kfree(addr);
    802110e2:	854a                	mv	a0,s2
    802110e4:	ffff9097          	auipc	ra,0xffff9
    802110e8:	122080e7          	jalr	290(ra) # 8020a206 <kfree>
  sockaddr tmpaddr = (sockaddr){
    802110ec:	f8043c23          	sd	zero,-104(s0)
    802110f0:	fa043023          	sd	zero,-96(s0)
    802110f4:	fa042423          	sw	zero,-88(s0)
    802110f8:	4789                	li	a5,2
    802110fa:	f8f41823          	sh	a5,-112(s0)
    802110fe:	77fd                	lui	a5,0xfffff
    80211100:	b187879b          	addiw	a5,a5,-1256
    80211104:	f8f41923          	sh	a5,-110(s0)
    80211108:	010007b7          	lui	a5,0x1000
    8021110c:	07f7879b          	addiw	a5,a5,127
    80211110:	f8f42a23          	sw	a5,-108(s0)
      .sin_family = AF_INET,
      .sin_addr = 0x100007f,
      .sin_port = 0xeb18,
    }
  };
  print_port_info(findport(&tmpaddr));
    80211114:	f9040513          	addi	a0,s0,-112
    80211118:	ffff4097          	auipc	ra,0xffff4
    8021111c:	59a080e7          	jalr	1434(ra) # 802056b2 <findport>
    80211120:	ffff5097          	auipc	ra,0xffff5
    80211124:	e74080e7          	jalr	-396(ra) # 80205f94 <print_port_info>
  printf("sendto leave\n");
    80211128:	00005517          	auipc	a0,0x5
    8021112c:	17050513          	addi	a0,a0,368 # 80216298 <UNAME_VERSION+0x450>
    80211130:	ffff8097          	auipc	ra,0xffff8
    80211134:	164080e7          	jalr	356(ra) # 80209294 <printf>
  return len;
    80211138:	fb843783          	ld	a5,-72(s0)
}
    8021113c:	853e                	mv	a0,a5
    8021113e:	70a6                	ld	ra,104(sp)
    80211140:	7406                	ld	s0,96(sp)
    80211142:	64e6                	ld	s1,88(sp)
    80211144:	6946                	ld	s2,80(sp)
    80211146:	6165                	addi	sp,sp,112
    80211148:	8082                	ret
    sendmsg(sk, NULL, msg);
    8021114a:	8626                	mv	a2,s1
    8021114c:	4581                	li	a1,0
    8021114e:	ffff5097          	auipc	ra,0xffff5
    80211152:	ecc080e7          	jalr	-308(ra) # 8020601a <sendmsg>
  printf(" sendto sockfd:%d addrlen:%p\n", sockfd, addrlen);
    80211156:	fb042603          	lw	a2,-80(s0)
    8021115a:	fdc42583          	lw	a1,-36(s0)
    8021115e:	00005517          	auipc	a0,0x5
    80211162:	11a50513          	addi	a0,a0,282 # 80216278 <UNAME_VERSION+0x430>
    80211166:	ffff8097          	auipc	ra,0xffff8
    8021116a:	12e080e7          	jalr	302(ra) # 80209294 <printf>
  destroymsg(msg);
    8021116e:	8526                	mv	a0,s1
    80211170:	ffff5097          	auipc	ra,0xffff5
    80211174:	9b8080e7          	jalr	-1608(ra) # 80205b28 <destroymsg>
  sunlock(sk);
    80211178:	fc843503          	ld	a0,-56(s0)
    8021117c:	ffff5097          	auipc	ra,0xffff5
    80211180:	838080e7          	jalr	-1992(ra) # 802059b4 <sunlock>
  if(addrfree)kfree(addr);
    80211184:	b7a5                	j	802110ec <sys_sendto+0x11e>

0000000080211186 <sys_recvfrom>:

uint64
sys_recvfrom(void)
{
    80211186:	711d                	addi	sp,sp,-96
    80211188:	ec86                	sd	ra,88(sp)
    8021118a:	e8a2                	sd	s0,80(sp)
    8021118c:	e4a6                	sd	s1,72(sp)
    8021118e:	e0ca                	sd	s2,64(sp)
    80211190:	fc4e                	sd	s3,56(sp)
    80211192:	1080                	addi	s0,sp,96
  int addrfree = 0;
  //char buf[100];
  uint64 len;
  int flags;
  socklen_t addrlen;
  if(argsock(0, &sockfd, &f, &sk)<0){
    80211194:	fb840693          	addi	a3,s0,-72
    80211198:	fc040613          	addi	a2,s0,-64
    8021119c:	fcc40593          	addi	a1,s0,-52
    802111a0:	4501                	li	a0,0
    802111a2:	ffffc097          	auipc	ra,0xffffc
    802111a6:	70e080e7          	jalr	1806(ra) # 8020d8b0 <argsock>
    802111aa:	08054563          	bltz	a0,80211234 <sys_recvfrom+0xae>
    return -1;
  }
  argaddr(1, &bufaddr);
    802111ae:	fb040593          	addi	a1,s0,-80
    802111b2:	4505                	li	a0,1
    802111b4:	ffffc097          	auipc	ra,0xffffc
    802111b8:	5d0080e7          	jalr	1488(ra) # 8020d784 <argaddr>
  argaddr(2, &len);
    802111bc:	fa840593          	addi	a1,s0,-88
    802111c0:	4509                	li	a0,2
    802111c2:	ffffc097          	auipc	ra,0xffffc
    802111c6:	5c2080e7          	jalr	1474(ra) # 8020d784 <argaddr>
  argint(3, &flags);
    802111ca:	fa440593          	addi	a1,s0,-92
    802111ce:	450d                	li	a0,3
    802111d0:	ffffc097          	auipc	ra,0xffffc
    802111d4:	592080e7          	jalr	1426(ra) # 8020d762 <argint>
  printf("recvfrom bufaddr:%p\n",bufaddr);
    802111d8:	fb043583          	ld	a1,-80(s0)
    802111dc:	00005517          	auipc	a0,0x5
    802111e0:	0cc50513          	addi	a0,a0,204 # 802162a8 <UNAME_VERSION+0x460>
    802111e4:	ffff8097          	auipc	ra,0xffff8
    802111e8:	0b0080e7          	jalr	176(ra) # 80209294 <printf>
  if(argint(5, &addrlen)<0){
    802111ec:	fa040593          	addi	a1,s0,-96
    802111f0:	4515                	li	a0,5
    802111f2:	ffffc097          	auipc	ra,0xffffc
    802111f6:	570080e7          	jalr	1392(ra) # 8020d762 <argint>
    802111fa:	02054d63          	bltz	a0,80211234 <sys_recvfrom+0xae>
    return -1;
  }
  slock(sk);
    802111fe:	fb843503          	ld	a0,-72(s0)
    80211202:	ffff4097          	auipc	ra,0xffff4
    80211206:	796080e7          	jalr	1942(ra) # 80205998 <slock>
  if(sk->sk_type == SK_CONNECT){
    8021120a:	fb843783          	ld	a5,-72(s0)
    8021120e:	43b8                	lw	a4,64(a5)
    80211210:	4789                	li	a5,2
    80211212:	04f70063          	beq	a4,a5,80211252 <sys_recvfrom+0xcc>
    
  }else{
    addr = kmalloc(sizeof(sockaddr));
    80211216:	4571                	li	a0,28
    80211218:	ffff9097          	auipc	ra,0xffff9
    8021121c:	da4080e7          	jalr	-604(ra) # 80209fbc <kmalloc>
    80211220:	84aa                	mv	s1,a0
    addrfree = 1;
    if(argstruct(4, addr, addrlen)==0){
    80211222:	fa042603          	lw	a2,-96(s0)
    80211226:	85aa                	mv	a1,a0
    80211228:	4511                	li	a0,4
    8021122a:	ffffc097          	auipc	ra,0xffffc
    8021122e:	74e080e7          	jalr	1870(ra) # 8020d978 <argstruct>
    80211232:	e909                	bnez	a0,80211244 <sys_recvfrom+0xbe>
  printf("recvfrom leave\n");
  for(;;){
  
  }
  return len;
}
    80211234:	557d                	li	a0,-1
    80211236:	60e6                	ld	ra,88(sp)
    80211238:	6446                	ld	s0,80(sp)
    8021123a:	64a6                	ld	s1,72(sp)
    8021123c:	6906                	ld	s2,64(sp)
    8021123e:	79e2                	ld	s3,56(sp)
    80211240:	6125                	addi	sp,sp,96
    80211242:	8082                	ret
    print_sockaddr(addr);
    80211244:	8526                	mv	a0,s1
    80211246:	ffff5097          	auipc	ra,0xffff5
    8021124a:	bf0080e7          	jalr	-1040(ra) # 80205e36 <print_sockaddr>
    addrfree = 1;
    8021124e:	4985                	li	s3,1
    80211250:	a019                	j	80211256 <sys_recvfrom+0xd0>
  int addrfree = 0;
    80211252:	4981                	li	s3,0
  sockaddr* addr = NULL;
    80211254:	4481                	li	s1,0
  printf(" recvfrom sockfd:%d id:%d\n", sockfd,sk->id);
    80211256:	fb843783          	ld	a5,-72(s0)
    8021125a:	4390                	lw	a2,0(a5)
    8021125c:	fcc42583          	lw	a1,-52(s0)
    80211260:	00005517          	auipc	a0,0x5
    80211264:	06050513          	addi	a0,a0,96 # 802162c0 <UNAME_VERSION+0x478>
    80211268:	ffff8097          	auipc	ra,0xffff8
    8021126c:	02c080e7          	jalr	44(ra) # 80209294 <printf>
  struct msg* msg = recvmsgfrom(sk,addr);
    80211270:	85a6                	mv	a1,s1
    80211272:	fb843503          	ld	a0,-72(s0)
    80211276:	ffff5097          	auipc	ra,0xffff5
    8021127a:	a84080e7          	jalr	-1404(ra) # 80205cfa <recvmsgfrom>
    8021127e:	892a                	mv	s2,a0
  if(!msg){
    80211280:	d955                	beqz	a0,80211234 <sys_recvfrom+0xae>
  printf("receive\n");
    80211282:	00005517          	auipc	a0,0x5
    80211286:	05e50513          	addi	a0,a0,94 # 802162e0 <UNAME_VERSION+0x498>
    8021128a:	ffff8097          	auipc	ra,0xffff8
    8021128e:	00a080e7          	jalr	10(ra) # 80209294 <printf>
  print_msg(msg);
    80211292:	854a                	mv	a0,s2
    80211294:	ffff5097          	auipc	ra,0xffff5
    80211298:	cac080e7          	jalr	-852(ra) # 80205f40 <print_msg>
  len = MIN(msg->len,len);
    8021129c:	fa843783          	ld	a5,-88(s0)
    802112a0:	01093683          	ld	a3,16(s2)
    802112a4:	00d7f363          	bgeu	a5,a3,802112aa <sys_recvfrom+0x124>
    802112a8:	86be                	mv	a3,a5
    802112aa:	fad43423          	sd	a3,-88(s0)
  if(either_copyout(1,bufaddr,msg->data,len)<0){
    802112ae:	00093603          	ld	a2,0(s2)
    802112b2:	fb043583          	ld	a1,-80(s0)
    802112b6:	4505                	li	a0,1
    802112b8:	ffffa097          	auipc	ra,0xffffa
    802112bc:	77e080e7          	jalr	1918(ra) # 8020ba36 <either_copyout>
    802112c0:	f6054ae3          	bltz	a0,80211234 <sys_recvfrom+0xae>
  destroymsg(msg);
    802112c4:	854a                	mv	a0,s2
    802112c6:	ffff5097          	auipc	ra,0xffff5
    802112ca:	862080e7          	jalr	-1950(ra) # 80205b28 <destroymsg>
  sunlock(sk);
    802112ce:	fb843503          	ld	a0,-72(s0)
    802112d2:	ffff4097          	auipc	ra,0xffff4
    802112d6:	6e2080e7          	jalr	1762(ra) # 802059b4 <sunlock>
  if(addrfree)kfree(addr);
    802112da:	00099b63          	bnez	s3,802112f0 <sys_recvfrom+0x16a>
  printf("recvfrom leave\n");
    802112de:	00005517          	auipc	a0,0x5
    802112e2:	01250513          	addi	a0,a0,18 # 802162f0 <UNAME_VERSION+0x4a8>
    802112e6:	ffff8097          	auipc	ra,0xffff8
    802112ea:	fae080e7          	jalr	-82(ra) # 80209294 <printf>
  for(;;){
    802112ee:	a001                	j	802112ee <sys_recvfrom+0x168>
  if(addrfree)kfree(addr);
    802112f0:	8526                	mv	a0,s1
    802112f2:	ffff9097          	auipc	ra,0xffff9
    802112f6:	f14080e7          	jalr	-236(ra) # 8020a206 <kfree>
    802112fa:	b7d5                	j	802112de <sys_recvfrom+0x158>

00000000802112fc <sys_listen>:

uint64
sys_listen(void)
{
    802112fc:	7179                	addi	sp,sp,-48
    802112fe:	f406                	sd	ra,40(sp)
    80211300:	f022                	sd	s0,32(sp)
    80211302:	1800                	addi	s0,sp,48
  int sockfd;
  int backlog;
  struct file* f;
  struct socket* sk;
  if(argsock(0, &sockfd, &f, &sk)<0){
    80211304:	fd840693          	addi	a3,s0,-40
    80211308:	fe040613          	addi	a2,s0,-32
    8021130c:	fec40593          	addi	a1,s0,-20
    80211310:	4501                	li	a0,0
    80211312:	ffffc097          	auipc	ra,0xffffc
    80211316:	59e080e7          	jalr	1438(ra) # 8020d8b0 <argsock>
    return -1;
    8021131a:	57fd                	li	a5,-1
  if(argsock(0, &sockfd, &f, &sk)<0){
    8021131c:	02054663          	bltz	a0,80211348 <sys_listen+0x4c>
  }
  argint(1, &backlog);
    80211320:	fe840593          	addi	a1,s0,-24
    80211324:	4505                	li	a0,1
    80211326:	ffffc097          	auipc	ra,0xffffc
    8021132a:	43c080e7          	jalr	1084(ra) # 8020d762 <argint>
  printf("listen sockfd:%d backlog:%d\n",sockfd,backlog);
    8021132e:	fe842603          	lw	a2,-24(s0)
    80211332:	fec42583          	lw	a1,-20(s0)
    80211336:	00005517          	auipc	a0,0x5
    8021133a:	fca50513          	addi	a0,a0,-54 # 80216300 <UNAME_VERSION+0x4b8>
    8021133e:	ffff8097          	auipc	ra,0xffff8
    80211342:	f56080e7          	jalr	-170(ra) # 80209294 <printf>
  return 0;
    80211346:	4781                	li	a5,0
}
    80211348:	853e                	mv	a0,a5
    8021134a:	70a2                	ld	ra,40(sp)
    8021134c:	7402                	ld	s0,32(sp)
    8021134e:	6145                	addi	sp,sp,48
    80211350:	8082                	ret

0000000080211352 <sys_accept4>:

uint64
sys_accept4(void)
{
    80211352:	7119                	addi	sp,sp,-128
    80211354:	fc86                	sd	ra,120(sp)
    80211356:	f8a2                	sd	s0,112(sp)
    80211358:	f4a6                	sd	s1,104(sp)
    8021135a:	f0ca                	sd	s2,96(sp)
    8021135c:	ecce                	sd	s3,88(sp)
    8021135e:	e8d2                	sd	s4,80(sp)
    80211360:	0100                	addi	s0,sp,128
  int fd;
  int flags;
  struct file* f;
  struct socket* sk;
  struct socket* sessionsk = NULL;
  struct proc* p = myproc();
    80211362:	ffffb097          	auipc	ra,0xffffb
    80211366:	050080e7          	jalr	80(ra) # 8020c3b2 <myproc>
    8021136a:	89aa                	mv	s3,a0
  sockaddr addr;
  uint64 addr_addr;
  socklen_t addrlen;
  uint64 addrlen_addr;
  if(argsock(0, &sockfd, &f, &sk)<0){
    8021136c:	fb840693          	addi	a3,s0,-72
    80211370:	fc040613          	addi	a2,s0,-64
    80211374:	fcc40593          	addi	a1,s0,-52
    80211378:	4501                	li	a0,0
    8021137a:	ffffc097          	auipc	ra,0xffffc
    8021137e:	536080e7          	jalr	1334(ra) # 8020d8b0 <argsock>
    80211382:	12054b63          	bltz	a0,802114b8 <sys_accept4+0x166>
    printf("[sys accept4]argsock bad\n");
    return -1;
  }
  argaddr(1,&addr_addr);
    80211386:	f9040593          	addi	a1,s0,-112
    8021138a:	4505                	li	a0,1
    8021138c:	ffffc097          	auipc	ra,0xffffc
    80211390:	3f8080e7          	jalr	1016(ra) # 8020d784 <argaddr>
  argaddr(2,&addrlen_addr);
    80211394:	f8040593          	addi	a1,s0,-128
    80211398:	4509                	li	a0,2
    8021139a:	ffffc097          	auipc	ra,0xffffc
    8021139e:	3ea080e7          	jalr	1002(ra) # 8020d784 <argaddr>
  argint(3,&flags);
    802113a2:	fc840593          	addi	a1,s0,-56
    802113a6:	450d                	li	a0,3
    802113a8:	ffffc097          	auipc	ra,0xffffc
    802113ac:	3ba080e7          	jalr	954(ra) # 8020d762 <argint>
  //printf("[sys accept4] accept fd:%d id:%d flags:%p\n",sockfd,sk->id,flags);
  slock(sk);
    802113b0:	fb843503          	ld	a0,-72(s0)
    802113b4:	ffff4097          	auipc	ra,0xffff4
    802113b8:	5e4080e7          	jalr	1508(ra) # 80205998 <slock>
  //printf("addrlen = %p addr=%p\n",addrlen_addr,addr_addr);
  struct netport* pport = getconn(sk, sk->bind_port);
    802113bc:	fb843503          	ld	a0,-72(s0)
    802113c0:	14853583          	ld	a1,328(a0)
    802113c4:	ffff4097          	auipc	ra,0xffff4
    802113c8:	790080e7          	jalr	1936(ra) # 80205b54 <getconn>
    802113cc:	84aa                	mv	s1,a0
  sunlock(sk);
    802113ce:	fb843503          	ld	a0,-72(s0)
    802113d2:	ffff4097          	auipc	ra,0xffff4
    802113d6:	5e2080e7          	jalr	1506(ra) # 802059b4 <sunlock>
  if(!pport){
    802113da:	10048163          	beqz	s1,802114dc <sys_accept4+0x18a>
    return -EAGAIN;
  }
  portaddr(pport, &addr);
    802113de:	f9840593          	addi	a1,s0,-104
    802113e2:	8526                	mv	a0,s1
    802113e4:	ffff4097          	auipc	ra,0xffff4
    802113e8:	16e080e7          	jalr	366(ra) # 80205552 <portaddr>
  //print_sockaddr(&addr);
  if(either_copyout(1, addr_addr, &addr,sizeof(sockaddr))<0){
    802113ec:	46f1                	li	a3,28
    802113ee:	f9840613          	addi	a2,s0,-104
    802113f2:	f9043583          	ld	a1,-112(s0)
    802113f6:	4505                	li	a0,1
    802113f8:	ffffa097          	auipc	ra,0xffffa
    802113fc:	63e080e7          	jalr	1598(ra) # 8020ba36 <either_copyout>
    80211400:	0e054063          	bltz	a0,802114e0 <sys_accept4+0x18e>
    return -1;
  }
  int family = ADDR_FAMILY(&addr);
    80211404:	f9845783          	lhu	a5,-104(s0)
  if(family == 0x2){
    80211408:	4709                	li	a4,2
    8021140a:	0ce78163          	beq	a5,a4,802114cc <sys_accept4+0x17a>
    addrlen = 0x10;
  }else if(family == 0xa){
    8021140e:	4729                	li	a4,10
    80211410:	0ce78263          	beq	a5,a4,802114d4 <sys_accept4+0x182>
    addrlen = 0x1c;
  }
  if(either_copyout(1, addrlen_addr, &addrlen,sizeof(socklen_t))<0){
    80211414:	4691                	li	a3,4
    80211416:	f8c40613          	addi	a2,s0,-116
    8021141a:	f8043583          	ld	a1,-128(s0)
    8021141e:	4505                	li	a0,1
    80211420:	ffffa097          	auipc	ra,0xffffa
    80211424:	616080e7          	jalr	1558(ra) # 8020ba36 <either_copyout>
    80211428:	87aa                	mv	a5,a0
    return -1;
    8021142a:	557d                	li	a0,-1
  if(either_copyout(1, addrlen_addr, &addrlen,sizeof(socklen_t))<0){
    8021142c:	0607ce63          	bltz	a5,802114a8 <sys_accept4+0x156>
  }
  
  struct file* newf = NULL;
  if((newf=filealloc())==NULL||(fd=fdalloc(newf))<0){
    80211430:	ffff5097          	auipc	ra,0xffff5
    80211434:	dd4080e7          	jalr	-556(ra) # 80206204 <filealloc>
    80211438:	892a                	mv	s2,a0
    8021143a:	c54d                	beqz	a0,802114e4 <sys_accept4+0x192>
    8021143c:	ffffd097          	auipc	ra,0xffffd
    80211440:	2e0080e7          	jalr	736(ra) # 8020e71c <fdalloc>
    80211444:	8a2a                	mv	s4,a0
    80211446:	0a054463          	bltz	a0,802114ee <sys_accept4+0x19c>
    goto bad;
  }
  
  newf->type = FD_SOCKET;
    8021144a:	4795                	li	a5,5
    8021144c:	00f92023          	sw	a5,0(s2)
  sessionsk = socketalloc();
    80211450:	ffff4097          	auipc	ra,0xffff4
    80211454:	402080e7          	jalr	1026(ra) # 80205852 <socketalloc>
  sessionsk->sk_type = SK_CONNECT;
    80211458:	4789                	li	a5,2
    8021145a:	c13c                	sw	a5,64(a0)
  sessionsk->conn_port = pport;
    8021145c:	14953823          	sd	s1,336(a0)
  sessionsk->bind_port = sk->bind_port;
    80211460:	fb843783          	ld	a5,-72(s0)
    80211464:	1487b783          	ld	a5,328(a5) # 1000148 <_entry-0x7f1ffeb8>
    80211468:	14f53423          	sd	a5,328(a0)
  newf->sk = sessionsk;
    8021146c:	00a93823          	sd	a0,16(s2)
  newf->epollv = socketepoll;
    80211470:	ffff5797          	auipc	a5,0xffff5
    80211474:	96678793          	addi	a5,a5,-1690 # 80205dd6 <socketepoll>
    80211478:	06f93023          	sd	a5,96(s2)
  newf->readable = 1;
    8021147c:	4785                	li	a5,1
    8021147e:	00f90423          	sb	a5,8(s2)
  newf->writable = 1;
    80211482:	00f904a3          	sb	a5,9(s2)
  sessionsk->nonblock =  flags&SOCK_NONBLOCK;
    80211486:	fc842703          	lw	a4,-56(s0)
    8021148a:	6785                	lui	a5,0x1
    8021148c:	80078793          	addi	a5,a5,-2048 # 800 <_entry-0x801ff800>
    80211490:	8ff9                	and	a5,a5,a4
    80211492:	c91c                	sw	a5,16(a0)
  p->exec_close[fd] = flags&SOCK_CLOEXEC;
    80211494:	8552                	mv	a0,s4
    80211496:	0f09b783          	ld	a5,240(s3)
    8021149a:	0a0a                	slli	s4,s4,0x2
    8021149c:	9a3e                	add	s4,s4,a5
    8021149e:	000807b7          	lui	a5,0x80
    802114a2:	8f7d                	and	a4,a4,a5
    802114a4:	00ea2023          	sw	a4,0(s4)
  return fd;
bad:
  if(!newf)fileclose(newf); 
  if(!sessionsk)socketclose(sessionsk); 
  return -1;
}
    802114a8:	70e6                	ld	ra,120(sp)
    802114aa:	7446                	ld	s0,112(sp)
    802114ac:	74a6                	ld	s1,104(sp)
    802114ae:	7906                	ld	s2,96(sp)
    802114b0:	69e6                	ld	s3,88(sp)
    802114b2:	6a46                	ld	s4,80(sp)
    802114b4:	6109                	addi	sp,sp,128
    802114b6:	8082                	ret
    printf("[sys accept4]argsock bad\n");
    802114b8:	00005517          	auipc	a0,0x5
    802114bc:	e6850513          	addi	a0,a0,-408 # 80216320 <UNAME_VERSION+0x4d8>
    802114c0:	ffff8097          	auipc	ra,0xffff8
    802114c4:	dd4080e7          	jalr	-556(ra) # 80209294 <printf>
    return -1;
    802114c8:	557d                	li	a0,-1
    802114ca:	bff9                	j	802114a8 <sys_accept4+0x156>
    addrlen = 0x10;
    802114cc:	47c1                	li	a5,16
    802114ce:	f8f42623          	sw	a5,-116(s0)
    802114d2:	b789                	j	80211414 <sys_accept4+0xc2>
    addrlen = 0x1c;
    802114d4:	47f1                	li	a5,28
    802114d6:	f8f42623          	sw	a5,-116(s0)
    802114da:	bf2d                	j	80211414 <sys_accept4+0xc2>
    return -EAGAIN;
    802114dc:	5555                	li	a0,-11
    802114de:	b7e9                	j	802114a8 <sys_accept4+0x156>
    return -1;
    802114e0:	557d                	li	a0,-1
    802114e2:	b7d9                	j	802114a8 <sys_accept4+0x156>
  if(!newf)fileclose(newf); 
    802114e4:	4501                	li	a0,0
    802114e6:	ffff5097          	auipc	ra,0xffff5
    802114ea:	db6080e7          	jalr	-586(ra) # 8020629c <fileclose>
  if(!sessionsk)socketclose(sessionsk); 
    802114ee:	4501                	li	a0,0
    802114f0:	ffff4097          	auipc	ra,0xffff4
    802114f4:	3d4080e7          	jalr	980(ra) # 802058c4 <socketclose>
  return -1;
    802114f8:	557d                	li	a0,-1
    802114fa:	b77d                	j	802114a8 <sys_accept4+0x156>

00000000802114fc <sys_getpeername>:

uint64
sys_getpeername(void)
{
    802114fc:	1141                	addi	sp,sp,-16
    802114fe:	e422                	sd	s0,8(sp)
    80211500:	0800                	addi	s0,sp,16
  return 0;
}
    80211502:	4501                	li	a0,0
    80211504:	6422                	ld	s0,8(sp)
    80211506:	0141                	addi	sp,sp,16
    80211508:	8082                	ret

000000008021150a <sys_exit_group>:
#include "include/vm.h"
#include "include/uname.h"
#include "include/copy.h"

uint64
sys_exit_group(void){
    8021150a:	1141                	addi	sp,sp,-16
    8021150c:	e422                	sd	s0,8(sp)
    8021150e:	0800                	addi	s0,sp,16
  //printf("exit group\n");
  return 0;
}
    80211510:	4501                	li	a0,0
    80211512:	6422                	ld	s0,8(sp)
    80211514:	0141                	addi	sp,sp,16
    80211516:	8082                	ret

0000000080211518 <sys_rt_sigreturn>:

uint64
sys_rt_sigreturn(void){
    80211518:	1141                	addi	sp,sp,-16
    8021151a:	e406                	sd	ra,8(sp)
    8021151c:	e022                	sd	s0,0(sp)
    8021151e:	0800                	addi	s0,sp,16
  sigreturn();
    80211520:	ffff8097          	auipc	ra,0xffff8
    80211524:	8f4080e7          	jalr	-1804(ra) # 80208e14 <sigreturn>
  return 0;
}
    80211528:	4501                	li	a0,0
    8021152a:	60a2                	ld	ra,8(sp)
    8021152c:	6402                	ld	s0,0(sp)
    8021152e:	0141                	addi	sp,sp,16
    80211530:	8082                	ret

0000000080211532 <sys_rt_sigprocmask>:

uint64 sys_rt_sigprocmask(void){
    80211532:	7139                	addi	sp,sp,-64
    80211534:	fc06                	sd	ra,56(sp)
    80211536:	f822                	sd	s0,48(sp)
    80211538:	0080                	addi	s0,sp,64
  int how;
	uint64 uptr_set, uptr_oldset;

	__sigset_t set, oldset;

	argint(0, &how);
    8021153a:	fec40593          	addi	a1,s0,-20
    8021153e:	4501                	li	a0,0
    80211540:	ffffc097          	auipc	ra,0xffffc
    80211544:	222080e7          	jalr	546(ra) # 8020d762 <argint>
	argaddr(1, &uptr_set);
    80211548:	fe040593          	addi	a1,s0,-32
    8021154c:	4505                	li	a0,1
    8021154e:	ffffc097          	auipc	ra,0xffffc
    80211552:	236080e7          	jalr	566(ra) # 8020d784 <argaddr>
	argaddr(2, &uptr_oldset);
    80211556:	fd840593          	addi	a1,s0,-40
    8021155a:	4509                	li	a0,2
    8021155c:	ffffc097          	auipc	ra,0xffffc
    80211560:	228080e7          	jalr	552(ra) # 8020d784 <argaddr>

	if (uptr_set && either_copyin(1, (char*)&set, uptr_set, SIGSET_LEN * 8) < 0) {
    80211564:	fe043603          	ld	a2,-32(s0)
    80211568:	ee05                	bnez	a2,802115a0 <sys_rt_sigprocmask+0x6e>
		return -1;
	}

	if (sigprocmask(how, &set, uptr_oldset ? &oldset : NULL)) {
    8021156a:	fd843783          	ld	a5,-40(s0)
    8021156e:	00f037b3          	snez	a5,a5
    80211572:	40f007b3          	neg	a5,a5
    80211576:	fc840613          	addi	a2,s0,-56
    8021157a:	8e7d                	and	a2,a2,a5
    8021157c:	fd040593          	addi	a1,s0,-48
    80211580:	fec42503          	lw	a0,-20(s0)
    80211584:	ffff7097          	auipc	ra,0xffff7
    80211588:	48c080e7          	jalr	1164(ra) # 80208a10 <sigprocmask>
		return -1;
    8021158c:	55fd                	li	a1,-1
	if (sigprocmask(how, &set, uptr_oldset ? &oldset : NULL)) {
    8021158e:	e501                	bnez	a0,80211596 <sys_rt_sigprocmask+0x64>
	}

	if (uptr_oldset && either_copyout(1, uptr_oldset, (char*)&oldset, SIGSET_LEN * 8) < 0) {
    80211590:	fd843583          	ld	a1,-40(s0)
    80211594:	e195                	bnez	a1,802115b8 <sys_rt_sigprocmask+0x86>
		return -1;
	}

	return 0;

}
    80211596:	852e                	mv	a0,a1
    80211598:	70e2                	ld	ra,56(sp)
    8021159a:	7442                	ld	s0,48(sp)
    8021159c:	6121                	addi	sp,sp,64
    8021159e:	8082                	ret
	if (uptr_set && either_copyin(1, (char*)&set, uptr_set, SIGSET_LEN * 8) < 0) {
    802115a0:	46a1                	li	a3,8
    802115a2:	fd040593          	addi	a1,s0,-48
    802115a6:	4505                	li	a0,1
    802115a8:	ffffa097          	auipc	ra,0xffffa
    802115ac:	4e4080e7          	jalr	1252(ra) # 8020ba8c <either_copyin>
    802115b0:	fa055de3          	bgez	a0,8021156a <sys_rt_sigprocmask+0x38>
		return -1;
    802115b4:	55fd                	li	a1,-1
    802115b6:	b7c5                	j	80211596 <sys_rt_sigprocmask+0x64>
	if (uptr_oldset && either_copyout(1, uptr_oldset, (char*)&oldset, SIGSET_LEN * 8) < 0) {
    802115b8:	46a1                	li	a3,8
    802115ba:	fc840613          	addi	a2,s0,-56
    802115be:	4505                	li	a0,1
    802115c0:	ffffa097          	auipc	ra,0xffffa
    802115c4:	476080e7          	jalr	1142(ra) # 8020ba36 <either_copyout>
    802115c8:	43f55593          	srai	a1,a0,0x3f
    802115cc:	b7e9                	j	80211596 <sys_rt_sigprocmask+0x64>

00000000802115ce <sys_rt_sigaction>:
uint64 sys_rt_sigaction(void) {
    802115ce:	711d                	addi	sp,sp,-96
    802115d0:	ec86                	sd	ra,88(sp)
    802115d2:	e8a2                	sd	s0,80(sp)
    802115d4:	1080                	addi	s0,sp,96
	int signum;
	uint64 uptr_act;		// struct sigaction const *act
	uint64 uptr_oldact;		// struct sigaction *oldact

	argint(0, &signum);
    802115d6:	fec40593          	addi	a1,s0,-20
    802115da:	4501                	li	a0,0
    802115dc:	ffffc097          	auipc	ra,0xffffc
    802115e0:	186080e7          	jalr	390(ra) # 8020d762 <argint>
	argaddr(1, &uptr_act);
    802115e4:	fe040593          	addi	a1,s0,-32
    802115e8:	4505                	li	a0,1
    802115ea:	ffffc097          	auipc	ra,0xffffc
    802115ee:	19a080e7          	jalr	410(ra) # 8020d784 <argaddr>
	argaddr(2, &uptr_oldact);
    802115f2:	fd840593          	addi	a1,s0,-40
    802115f6:	4509                	li	a0,2
    802115f8:	ffffc097          	auipc	ra,0xffffc
    802115fc:	18c080e7          	jalr	396(ra) # 8020d784 <argaddr>
	// copy struct sigaction from user space 
	struct sigaction act;
	struct sigaction oldact;

	//__debug_info("[sigaction]  uptr_act : %p,uptr_oldact : %p\n",uptr_act,uptr_oldact);
	if (uptr_act) {
    80211600:	fe043603          	ld	a2,-32(s0)
    80211604:	e609                	bnez	a2,8021160e <sys_rt_sigaction+0x40>
			__debug_info("[sigaction] return -1\n");
			return -1;
		}
	}

	if (set_sigaction(
    80211606:	fec42503          	lw	a0,-20(s0)
    8021160a:	4581                	li	a1,0
    8021160c:	a015                	j	80211630 <sys_rt_sigaction+0x62>
			either_copyin(1, (char*)&(act.__sigaction_handler), uptr_act, sizeof(__sighandler_t)) < 0 
    8021160e:	46a1                	li	a3,8
    80211610:	fc040593          	addi	a1,s0,-64
    80211614:	4505                	li	a0,1
    80211616:	ffffa097          	auipc	ra,0xffffa
    8021161a:	476080e7          	jalr	1142(ra) # 8020ba8c <either_copyin>
		if (
    8021161e:	02054f63          	bltz	a0,8021165c <sys_rt_sigaction+0x8e>
	if (set_sigaction(
    80211622:	fec42503          	lw	a0,-20(s0)
    80211626:	fe043783          	ld	a5,-32(s0)
    8021162a:	fc040593          	addi	a1,s0,-64
    8021162e:	c3a9                	beqz	a5,80211670 <sys_rt_sigaction+0xa2>
    80211630:	fd843783          	ld	a5,-40(s0)
    80211634:	00f037b3          	snez	a5,a5
    80211638:	40f007b3          	neg	a5,a5
    8021163c:	fa840613          	addi	a2,s0,-88
    80211640:	8e7d                	and	a2,a2,a5
    80211642:	ffff7097          	auipc	ra,0xffff7
    80211646:	348080e7          	jalr	840(ra) # 8020898a <set_sigaction>
    8021164a:	04054063          	bltz	a0,8021168a <sys_rt_sigaction+0xbc>
	) < 0) {
		//__debug_info("[sigaction] return -1\n");
		return -1;
	}

	if (uptr_oldact) {
    8021164e:	fd843503          	ld	a0,-40(s0)
    80211652:	e10d                	bnez	a0,80211674 <sys_rt_sigaction+0xa6>
			return -1;
		}
	}
	//__debug_info("[sigaction] return 0\n");
	return 0;
}
    80211654:	60e6                	ld	ra,88(sp)
    80211656:	6446                	ld	s0,80(sp)
    80211658:	6125                	addi	sp,sp,96
    8021165a:	8082                	ret
			__debug_info("[sigaction] return -1\n");
    8021165c:	00005517          	auipc	a0,0x5
    80211660:	ce450513          	addi	a0,a0,-796 # 80216340 <UNAME_VERSION+0x4f8>
    80211664:	ffff8097          	auipc	ra,0xffff8
    80211668:	e46080e7          	jalr	-442(ra) # 802094aa <__debug_info>
			return -1;
    8021166c:	557d                	li	a0,-1
    8021166e:	b7dd                	j	80211654 <sys_rt_sigaction+0x86>
	if (set_sigaction(
    80211670:	4581                	li	a1,0
    80211672:	bf7d                	j	80211630 <sys_rt_sigaction+0x62>
			either_copyout(1,uptr_oldact, (char*)&(act.__sigaction_handler), sizeof(__sighandler_t)) < 0 
    80211674:	46a1                	li	a3,8
    80211676:	fc040613          	addi	a2,s0,-64
    8021167a:	85aa                	mv	a1,a0
    8021167c:	4505                	li	a0,1
    8021167e:	ffffa097          	auipc	ra,0xffffa
    80211682:	3b8080e7          	jalr	952(ra) # 8020ba36 <either_copyout>
		if (
    80211686:	957d                	srai	a0,a0,0x3f
    80211688:	b7f1                	j	80211654 <sys_rt_sigaction+0x86>
		return -1;
    8021168a:	557d                	li	a0,-1
    8021168c:	b7e1                	j	80211654 <sys_rt_sigaction+0x86>

000000008021168e <sys_prlimit64>:

//int prlimit(pid_t pid, int resource, const struct rlimit *new_limit,struct rlimit *old_limit);
uint64
sys_prlimit64(void){
    8021168e:	711d                	addi	sp,sp,-96
    80211690:	ec86                	sd	ra,88(sp)
    80211692:	e8a2                	sd	s0,80(sp)
    80211694:	e4a6                	sd	s1,72(sp)
    80211696:	e0ca                	sd	s2,64(sp)
    80211698:	fc4e                	sd	s3,56(sp)
    8021169a:	1080                	addi	s0,sp,96
  int resource;
  uint64 newrlimitaddr;
  uint64 oldrlimitaddr;
  struct rlimit new_limit;
  struct rlimit old_limit;
  struct proc* p = myproc();
    8021169c:	ffffb097          	auipc	ra,0xffffb
    802116a0:	d16080e7          	jalr	-746(ra) # 8020c3b2 <myproc>
    802116a4:	89aa                	mv	s3,a0
  
  if(argint(0,&pid)<0){
    802116a6:	fcc40593          	addi	a1,s0,-52
    802116aa:	4501                	li	a0,0
    802116ac:	ffffc097          	auipc	ra,0xffffc
    802116b0:	0b6080e7          	jalr	182(ra) # 8020d762 <argint>
    802116b4:	0c054163          	bltz	a0,80211776 <sys_prlimit64+0xe8>
    return -1;
  }

  struct proc* limitp = pid==0?p:findproc(pid);
    802116b8:	fcc42503          	lw	a0,-52(s0)
    802116bc:	84ce                	mv	s1,s3
    802116be:	e125                	bnez	a0,8021171e <sys_prlimit64+0x90>
  if(!limitp)return -1;
    802116c0:	cccd                	beqz	s1,8021177a <sys_prlimit64+0xec>

  if(argint(1,&resource)<0){
    802116c2:	fc840593          	addi	a1,s0,-56
    802116c6:	4505                	li	a0,1
    802116c8:	ffffc097          	auipc	ra,0xffffc
    802116cc:	09a080e7          	jalr	154(ra) # 8020d762 <argint>
    802116d0:	87aa                	mv	a5,a0
    return -1;
    802116d2:	557d                	li	a0,-1
  if(argint(1,&resource)<0){
    802116d4:	0207ce63          	bltz	a5,80211710 <sys_prlimit64+0x82>
  }
  newrlimitaddr = argstruct(2,&new_limit,sizeof(new_limit));
    802116d8:	4641                	li	a2,16
    802116da:	fb840593          	addi	a1,s0,-72
    802116de:	4509                	li	a0,2
    802116e0:	ffffc097          	auipc	ra,0xffffc
    802116e4:	298080e7          	jalr	664(ra) # 8020d978 <argstruct>
    802116e8:	892a                	mv	s2,a0
  oldrlimitaddr = argstruct(3,&old_limit,sizeof(old_limit));
    802116ea:	4641                	li	a2,16
    802116ec:	fa840593          	addi	a1,s0,-88
    802116f0:	450d                	li	a0,3
    802116f2:	ffffc097          	auipc	ra,0xffffc
    802116f6:	286080e7          	jalr	646(ra) # 8020d978 <argstruct>
    802116fa:	85aa                	mv	a1,a0
  if(!newrlimitaddr && !oldrlimitaddr) return -1;
    802116fc:	00a967b3          	or	a5,s2,a0
    80211700:	2781                	sext.w	a5,a5
    80211702:	557d                	li	a0,-1
    80211704:	c791                	beqz	a5,80211710 <sys_prlimit64+0x82>
  // if(newrlimitaddr)printf("[prlimit]new limit %d %d\n",new_limit.rlim_cur,new_limit.rlim_max);
  // else printf("[prlimit]new limit (nil)\n");
  // if(oldrlimitaddr)printf("[prlimit]old limit %d %d\n",old_limit.rlim_cur,old_limit.rlim_max);
  // else printf("[prlimit]old limit (nil)\n");
  
  switch(resource){
    80211706:	fc842703          	lw	a4,-56(s0)
    8021170a:	479d                	li	a5,7
    8021170c:	00f70f63          	beq	a4,a5,8021172a <sys_prlimit64+0x9c>
      break;
    default:
    	return -1;
  }
  return 0;
}
    80211710:	60e6                	ld	ra,88(sp)
    80211712:	6446                	ld	s0,80(sp)
    80211714:	64a6                	ld	s1,72(sp)
    80211716:	6906                	ld	s2,64(sp)
    80211718:	79e2                	ld	s3,56(sp)
    8021171a:	6125                	addi	sp,sp,96
    8021171c:	8082                	ret
  struct proc* limitp = pid==0?p:findproc(pid);
    8021171e:	ffff0097          	auipc	ra,0xffff0
    80211722:	0e0080e7          	jalr	224(ra) # 802017fe <findproc>
    80211726:	84aa                	mv	s1,a0
    80211728:	bf61                	j	802116c0 <sys_prlimit64+0x32>
      if(oldrlimitaddr){
    8021172a:	ed91                	bnez	a1,80211746 <sys_prlimit64+0xb8>
  return 0;
    8021172c:	4501                	li	a0,0
      if(newrlimitaddr){
    8021172e:	fe0901e3          	beqz	s2,80211710 <sys_prlimit64+0x82>
        limitp->filelimit = MIN(new_limit.rlim_cur,new_limit.rlim_max);
    80211732:	fb843703          	ld	a4,-72(s0)
    80211736:	fc043783          	ld	a5,-64(s0)
    8021173a:	00f77363          	bgeu	a4,a5,80211740 <sys_prlimit64+0xb2>
    8021173e:	87ba                	mv	a5,a4
    80211740:	f0fc                	sd	a5,224(s1)
  return 0;
    80211742:	4501                	li	a0,0
    80211744:	b7f1                	j	80211710 <sys_prlimit64+0x82>
        old_limit.rlim_cur = old_limit.rlim_max = NOFILEMAX(limitp);
    80211746:	70fc                	ld	a5,224(s1)
    80211748:	0c800713          	li	a4,200
    8021174c:	00f75463          	bge	a4,a5,80211754 <sys_prlimit64+0xc6>
    80211750:	0c800793          	li	a5,200
    80211754:	faf43823          	sd	a5,-80(s0)
    80211758:	faf43423          	sd	a5,-88(s0)
        if(copyout(p->pagetable,oldrlimitaddr,(char*)&old_limit,sizeof(old_limit))<0){
    8021175c:	46c1                	li	a3,16
    8021175e:	fa840613          	addi	a2,s0,-88
    80211762:	0609b503          	ld	a0,96(s3)
    80211766:	ffffa097          	auipc	ra,0xffffa
    8021176a:	f56080e7          	jalr	-170(ra) # 8020b6bc <copyout>
    8021176e:	fa055fe3          	bgez	a0,8021172c <sys_prlimit64+0x9e>
          return -1;
    80211772:	557d                	li	a0,-1
    80211774:	bf71                	j	80211710 <sys_prlimit64+0x82>
    return -1;
    80211776:	557d                	li	a0,-1
    80211778:	bf61                	j	80211710 <sys_prlimit64+0x82>
  if(!limitp)return -1;
    8021177a:	557d                	li	a0,-1
    8021177c:	bf51                	j	80211710 <sys_prlimit64+0x82>

000000008021177e <sys_kill>:

uint64 sys_kill(){
    8021177e:	1101                	addi	sp,sp,-32
    80211780:	ec06                	sd	ra,24(sp)
    80211782:	e822                	sd	s0,16(sp)
    80211784:	1000                	addi	s0,sp,32
  int sig;
  int pid;
  argint(0,&pid);
    80211786:	fe840593          	addi	a1,s0,-24
    8021178a:	4501                	li	a0,0
    8021178c:	ffffc097          	auipc	ra,0xffffc
    80211790:	fd6080e7          	jalr	-42(ra) # 8020d762 <argint>
  argint(1,&sig);
    80211794:	fec40593          	addi	a1,s0,-20
    80211798:	4505                	li	a0,1
    8021179a:	ffffc097          	auipc	ra,0xffffc
    8021179e:	fc8080e7          	jalr	-56(ra) # 8020d762 <argint>
  return kill(pid,sig);
    802117a2:	fec42583          	lw	a1,-20(s0)
    802117a6:	fe842503          	lw	a0,-24(s0)
    802117aa:	ffff1097          	auipc	ra,0xffff1
    802117ae:	d48080e7          	jalr	-696(ra) # 802024f2 <kill>
}
    802117b2:	60e2                	ld	ra,24(sp)
    802117b4:	6442                	ld	s0,16(sp)
    802117b6:	6105                	addi	sp,sp,32
    802117b8:	8082                	ret

00000000802117ba <sys_tgkill>:

uint64 sys_tgkill(){
    802117ba:	1101                	addi	sp,sp,-32
    802117bc:	ec06                	sd	ra,24(sp)
    802117be:	e822                	sd	s0,16(sp)
    802117c0:	1000                	addi	s0,sp,32
  int sig;
  int tid;
  int pid;
  argint(0,&pid);
    802117c2:	fe440593          	addi	a1,s0,-28
    802117c6:	4501                	li	a0,0
    802117c8:	ffffc097          	auipc	ra,0xffffc
    802117cc:	f9a080e7          	jalr	-102(ra) # 8020d762 <argint>
  argint(1,&tid);
    802117d0:	fe840593          	addi	a1,s0,-24
    802117d4:	4505                	li	a0,1
    802117d6:	ffffc097          	auipc	ra,0xffffc
    802117da:	f8c080e7          	jalr	-116(ra) # 8020d762 <argint>
  argint(2,&sig);
    802117de:	fec40593          	addi	a1,s0,-20
    802117e2:	4509                	li	a0,2
    802117e4:	ffffc097          	auipc	ra,0xffffc
    802117e8:	f7e080e7          	jalr	-130(ra) # 8020d762 <argint>
  return tgkill(pid,tid,sig);
    802117ec:	fec42603          	lw	a2,-20(s0)
    802117f0:	fe842583          	lw	a1,-24(s0)
    802117f4:	fe442503          	lw	a0,-28(s0)
    802117f8:	ffff1097          	auipc	ra,0xffff1
    802117fc:	dd2080e7          	jalr	-558(ra) # 802025ca <tgkill>
}
    80211800:	60e2                	ld	ra,24(sp)
    80211802:	6442                	ld	s0,16(sp)
    80211804:	6105                	addi	sp,sp,32
    80211806:	8082                	ret

0000000080211808 <sys_mmap>:
#include "include/printf.h"
#include "include/errno.h"

uint64
sys_mmap(void)
{
    80211808:	7179                	addi	sp,sp,-48
    8021180a:	f406                	sd	ra,40(sp)
    8021180c:	f022                	sd	s0,32(sp)
    8021180e:	1800                	addi	s0,sp,48
  uint64 len;
  int prot;
  int flags;
  int fd;
  int off;
  if(argaddr(0, &start) < 0)
    80211810:	fe840593          	addi	a1,s0,-24
    80211814:	4501                	li	a0,0
    80211816:	ffffc097          	auipc	ra,0xffffc
    8021181a:	f6e080e7          	jalr	-146(ra) # 8020d784 <argaddr>
    return -1;
    8021181e:	57fd                	li	a5,-1
  if(argaddr(0, &start) < 0)
    80211820:	08054b63          	bltz	a0,802118b6 <sys_mmap+0xae>
  if(argaddr(1, &len) < 0)
    80211824:	fe040593          	addi	a1,s0,-32
    80211828:	4505                	li	a0,1
    8021182a:	ffffc097          	auipc	ra,0xffffc
    8021182e:	f5a080e7          	jalr	-166(ra) # 8020d784 <argaddr>
    return -1;
    80211832:	57fd                	li	a5,-1
  if(argaddr(1, &len) < 0)
    80211834:	08054163          	bltz	a0,802118b6 <sys_mmap+0xae>
  if(argint(2, &prot) < 0)
    80211838:	fdc40593          	addi	a1,s0,-36
    8021183c:	4509                	li	a0,2
    8021183e:	ffffc097          	auipc	ra,0xffffc
    80211842:	f24080e7          	jalr	-220(ra) # 8020d762 <argint>
    return -1;
    80211846:	57fd                	li	a5,-1
  if(argint(2, &prot) < 0)
    80211848:	06054763          	bltz	a0,802118b6 <sys_mmap+0xae>
  if(argint(3, &flags) < 0)
    8021184c:	fd840593          	addi	a1,s0,-40
    80211850:	450d                	li	a0,3
    80211852:	ffffc097          	auipc	ra,0xffffc
    80211856:	f10080e7          	jalr	-240(ra) # 8020d762 <argint>
    return -1;
    8021185a:	57fd                	li	a5,-1
  if(argint(3, &flags) < 0)
    8021185c:	04054d63          	bltz	a0,802118b6 <sys_mmap+0xae>
  if(argfd(4, &fd, NULL) < 0 && fd!=-1){
    80211860:	4601                	li	a2,0
    80211862:	fd440593          	addi	a1,s0,-44
    80211866:	4511                	li	a0,4
    80211868:	ffffc097          	auipc	ra,0xffffc
    8021186c:	f6e080e7          	jalr	-146(ra) # 8020d7d6 <argfd>
    80211870:	00055863          	bgez	a0,80211880 <sys_mmap+0x78>
    80211874:	fd442683          	lw	a3,-44(s0)
    80211878:	577d                	li	a4,-1
    //printf("fd:%d\n",fd);
    return -1;
    8021187a:	57fd                	li	a5,-1
  if(argfd(4, &fd, NULL) < 0 && fd!=-1){
    8021187c:	02e69d63          	bne	a3,a4,802118b6 <sys_mmap+0xae>
  }
  if(argint(5, &off) < 0)
    80211880:	fd040593          	addi	a1,s0,-48
    80211884:	4515                	li	a0,5
    80211886:	ffffc097          	auipc	ra,0xffffc
    8021188a:	edc080e7          	jalr	-292(ra) # 8020d762 <argint>
    return -1;
    8021188e:	57fd                	li	a5,-1
  if(argint(5, &off) < 0)
    80211890:	02054363          	bltz	a0,802118b6 <sys_mmap+0xae>

  uint64 ret = do_mmap(start, len, prot, flags, fd, off);
    80211894:	fd042783          	lw	a5,-48(s0)
    80211898:	fd442703          	lw	a4,-44(s0)
    8021189c:	fd842683          	lw	a3,-40(s0)
    802118a0:	fdc42603          	lw	a2,-36(s0)
    802118a4:	fe043583          	ld	a1,-32(s0)
    802118a8:	fe843503          	ld	a0,-24(s0)
    802118ac:	ffffc097          	auipc	ra,0xffffc
    802118b0:	80a080e7          	jalr	-2038(ra) # 8020d0b6 <do_mmap>
    802118b4:	87aa                	mv	a5,a0
  // printf("[sys_map] ret(start) = %p\n",ret);
  return ret;
}
    802118b6:	853e                	mv	a0,a5
    802118b8:	70a2                	ld	ra,40(sp)
    802118ba:	7402                	ld	s0,32(sp)
    802118bc:	6145                	addi	sp,sp,48
    802118be:	8082                	ret

00000000802118c0 <sys_brk>:

uint64
sys_brk(void)
{
    802118c0:	1101                	addi	sp,sp,-32
    802118c2:	ec06                	sd	ra,24(sp)
    802118c4:	e822                	sd	s0,16(sp)
    802118c6:	1000                	addi	s0,sp,32
  int n;
  if(argint(0, &n) < 0)
    802118c8:	fec40593          	addi	a1,s0,-20
    802118cc:	4501                	li	a0,0
    802118ce:	ffffc097          	auipc	ra,0xffffc
    802118d2:	e94080e7          	jalr	-364(ra) # 8020d762 <argint>
    802118d6:	87aa                	mv	a5,a0
    return -1;
    802118d8:	557d                	li	a0,-1
  if(argint(0, &n) < 0)
    802118da:	0007c863          	bltz	a5,802118ea <sys_brk+0x2a>
  return growproc(n);
    802118de:	fec42503          	lw	a0,-20(s0)
    802118e2:	ffffb097          	auipc	ra,0xffffb
    802118e6:	5f0080e7          	jalr	1520(ra) # 8020ced2 <growproc>
}
    802118ea:	60e2                	ld	ra,24(sp)
    802118ec:	6442                	ld	s0,16(sp)
    802118ee:	6105                	addi	sp,sp,32
    802118f0:	8082                	ret

00000000802118f2 <sys_munmap>:

uint64
sys_munmap(void)
{
    802118f2:	1101                	addi	sp,sp,-32
    802118f4:	ec06                	sd	ra,24(sp)
    802118f6:	e822                	sd	s0,16(sp)
    802118f8:	1000                	addi	s0,sp,32
  uint64 start;
  uint64 len;
  if(argaddr(0, &start) < 0 || argaddr(1, &len) < 0){
    802118fa:	fe840593          	addi	a1,s0,-24
    802118fe:	4501                	li	a0,0
    80211900:	ffffc097          	auipc	ra,0xffffc
    80211904:	e84080e7          	jalr	-380(ra) # 8020d784 <argaddr>
    return -1;
    80211908:	57fd                	li	a5,-1
  if(argaddr(0, &start) < 0 || argaddr(1, &len) < 0){
    8021190a:	02054663          	bltz	a0,80211936 <sys_munmap+0x44>
    8021190e:	fe040593          	addi	a1,s0,-32
    80211912:	4505                	li	a0,1
    80211914:	ffffc097          	auipc	ra,0xffffc
    80211918:	e70080e7          	jalr	-400(ra) # 8020d784 <argaddr>
    return -1;
    8021191c:	57fd                	li	a5,-1
  if(argaddr(0, &start) < 0 || argaddr(1, &len) < 0){
    8021191e:	00054c63          	bltz	a0,80211936 <sys_munmap+0x44>
  }
  return do_munmap(NULL, start, len);
    80211922:	fe043603          	ld	a2,-32(s0)
    80211926:	fe843583          	ld	a1,-24(s0)
    8021192a:	4501                	li	a0,0
    8021192c:	ffffc097          	auipc	ra,0xffffc
    80211930:	a4a080e7          	jalr	-1462(ra) # 8020d376 <do_munmap>
    80211934:	87aa                	mv	a5,a0
}
    80211936:	853e                	mv	a0,a5
    80211938:	60e2                	ld	ra,24(sp)
    8021193a:	6442                	ld	s0,16(sp)
    8021193c:	6105                	addi	sp,sp,32
    8021193e:	8082                	ret

0000000080211940 <sys_mprotect>:

uint64
sys_mprotect(void)
{
    80211940:	7179                	addi	sp,sp,-48
    80211942:	f406                	sd	ra,40(sp)
    80211944:	f022                	sd	s0,32(sp)
    80211946:	1800                	addi	s0,sp,48
  uint64 addr;
  uint64 len;
  int prot;
  if(argaddr(0, &addr) < 0)
    80211948:	fe840593          	addi	a1,s0,-24
    8021194c:	4501                	li	a0,0
    8021194e:	ffffc097          	auipc	ra,0xffffc
    80211952:	e36080e7          	jalr	-458(ra) # 8020d784 <argaddr>
  {
    return -1;
    80211956:	57fd                	li	a5,-1
  if(argaddr(0, &addr) < 0)
    80211958:	04054e63          	bltz	a0,802119b4 <sys_mprotect+0x74>
  }
  if(argaddr(1, &len) < 0)
    8021195c:	fe040593          	addi	a1,s0,-32
    80211960:	4505                	li	a0,1
    80211962:	ffffc097          	auipc	ra,0xffffc
    80211966:	e22080e7          	jalr	-478(ra) # 8020d784 <argaddr>
  {
    return -1;
    8021196a:	57fd                	li	a5,-1
  if(argaddr(1, &len) < 0)
    8021196c:	04054463          	bltz	a0,802119b4 <sys_mprotect+0x74>
  }
  if(argint(2, &prot) < 0)
    80211970:	fdc40593          	addi	a1,s0,-36
    80211974:	4509                	li	a0,2
    80211976:	ffffc097          	auipc	ra,0xffffc
    8021197a:	dec080e7          	jalr	-532(ra) # 8020d762 <argint>
    8021197e:	04054063          	bltz	a0,802119be <sys_mprotect+0x7e>
  {
    return -1;
  }
  
  int perm = 0;
  if(prot & PROT_READ) 
    80211982:	fdc42783          	lw	a5,-36(s0)
    80211986:	0017f613          	andi	a2,a5,1
    8021198a:	c219                	beqz	a2,80211990 <sys_mprotect+0x50>
    perm  |= (PTE_R | PTE_A);
    8021198c:	04200613          	li	a2,66
  if(prot & PROT_WRITE)
    80211990:	0027f713          	andi	a4,a5,2
    80211994:	c319                	beqz	a4,8021199a <sys_mprotect+0x5a>
    perm  |= (PTE_W | PTE_D);
    80211996:	08466613          	ori	a2,a2,132
  if(prot & PROT_EXEC)
    8021199a:	8b91                	andi	a5,a5,4
    8021199c:	c399                	beqz	a5,802119a2 <sys_mprotect+0x62>
    perm  |= (PTE_X | PTE_A);
    8021199e:	04866613          	ori	a2,a2,72
    
  return uvmprotect(addr, len, perm);
    802119a2:	fe043583          	ld	a1,-32(s0)
    802119a6:	fe843503          	ld	a0,-24(s0)
    802119aa:	ffff9097          	auipc	ra,0xffff9
    802119ae:	030080e7          	jalr	48(ra) # 8020a9da <uvmprotect>
    802119b2:	87aa                	mv	a5,a0
}
    802119b4:	853e                	mv	a0,a5
    802119b6:	70a2                	ld	ra,40(sp)
    802119b8:	7402                	ld	s0,32(sp)
    802119ba:	6145                	addi	sp,sp,48
    802119bc:	8082                	ret
    return -1;
    802119be:	57fd                	li	a5,-1
    802119c0:	bfd5                	j	802119b4 <sys_mprotect+0x74>

00000000802119c2 <sys_msync>:

uint64
sys_msync(void)
{
    802119c2:	7179                	addi	sp,sp,-48
    802119c4:	f406                	sd	ra,40(sp)
    802119c6:	f022                	sd	s0,32(sp)
    802119c8:	1800                	addi	s0,sp,48
	uint64 addr;
	uint64 len;
	int flags;

	argaddr(0, &addr);
    802119ca:	fe840593          	addi	a1,s0,-24
    802119ce:	4501                	li	a0,0
    802119d0:	ffffc097          	auipc	ra,0xffffc
    802119d4:	db4080e7          	jalr	-588(ra) # 8020d784 <argaddr>
	argaddr(1, &len);
    802119d8:	fe040593          	addi	a1,s0,-32
    802119dc:	4505                	li	a0,1
    802119de:	ffffc097          	auipc	ra,0xffffc
    802119e2:	da6080e7          	jalr	-602(ra) # 8020d784 <argaddr>
	argint(2, &flags);
    802119e6:	fdc40593          	addi	a1,s0,-36
    802119ea:	4509                	li	a0,2
    802119ec:	ffffc097          	auipc	ra,0xffffc
    802119f0:	d76080e7          	jalr	-650(ra) # 8020d762 <argint>

	if (!(flags & (MS_ASYNC|MS_SYNC|MS_INVALIDATE)) ||
    802119f4:	fdc42603          	lw	a2,-36(s0)
    802119f8:	00767793          	andi	a5,a2,7
		((flags & MS_ASYNC) && (flags & MS_SYNC)) ||
		(addr % PGSIZE))
	{
		return -EINVAL;
    802119fc:	5529                	li	a0,-22
	if (!(flags & (MS_ASYNC|MS_SYNC|MS_INVALIDATE)) ||
    802119fe:	c395                	beqz	a5,80211a22 <sys_msync+0x60>
    80211a00:	00567793          	andi	a5,a2,5
    80211a04:	4715                	li	a4,5
    80211a06:	02e78263          	beq	a5,a4,80211a2a <sys_msync+0x68>
		(addr % PGSIZE))
    80211a0a:	fe843783          	ld	a5,-24(s0)
    80211a0e:	03479713          	slli	a4,a5,0x34
		((flags & MS_ASYNC) && (flags & MS_SYNC)) ||
    80211a12:	eb01                	bnez	a4,80211a22 <sys_msync+0x60>
	}

	return do_msync(addr, len, flags);
    80211a14:	fe043583          	ld	a1,-32(s0)
    80211a18:	853e                	mv	a0,a5
    80211a1a:	ffffc097          	auipc	ra,0xffffc
    80211a1e:	b3a080e7          	jalr	-1222(ra) # 8020d554 <do_msync>
    80211a22:	70a2                	ld	ra,40(sp)
    80211a24:	7402                	ld	s0,32(sp)
    80211a26:	6145                	addi	sp,sp,48
    80211a28:	8082                	ret
		return -EINVAL;
    80211a2a:	5529                	li	a0,-22
    80211a2c:	bfdd                	j	80211a22 <sys_msync+0x60>

0000000080211a2e <syscall>:
	[SYS_prlimit64]	"prlimit64",
	[SYS_renameat2]	"renameat2",
};
void
syscall(void)
{
    80211a2e:	7179                	addi	sp,sp,-48
    80211a30:	f406                	sd	ra,40(sp)
    80211a32:	f022                	sd	s0,32(sp)
    80211a34:	ec26                	sd	s1,24(sp)
    80211a36:	e84a                	sd	s2,16(sp)
    80211a38:	e44e                	sd	s3,8(sp)
    80211a3a:	1800                	addi	s0,sp,48
  int num;
  struct proc *p = myproc();
    80211a3c:	ffffb097          	auipc	ra,0xffffb
    80211a40:	976080e7          	jalr	-1674(ra) # 8020c3b2 <myproc>
    80211a44:	84aa                	mv	s1,a0

  num = p->trapframe->a7;
    80211a46:	06853903          	ld	s2,104(a0)
    80211a4a:	0a893783          	ld	a5,168(s2)
    80211a4e:	0007899b          	sext.w	s3,a5
  if(num > 0 && num < NELEM(syscalls) && syscalls[num]) {
    80211a52:	37fd                	addiw	a5,a5,-1
    80211a54:	11300713          	li	a4,275
    80211a58:	04f76863          	bltu	a4,a5,80211aa8 <syscall+0x7a>
    80211a5c:	00399713          	slli	a4,s3,0x3
    80211a60:	00005797          	auipc	a5,0x5
    80211a64:	4e878793          	addi	a5,a5,1256 # 80216f48 <syscalls>
    80211a68:	97ba                	add	a5,a5,a4
    80211a6a:	639c                	ld	a5,0(a5)
    80211a6c:	cf95                	beqz	a5,80211aa8 <syscall+0x7a>
    //printf("[start]-----pid:%d syscall %d:%s-----\n",myproc()->pid,num,sysnames[num]);
    p->trapframe->a0 = syscalls[num]();
    80211a6e:	9782                	jalr	a5
    80211a70:	06a93823          	sd	a0,112(s2)
    //printf("[end]----pid:%d syscall %d:%s return %p-----\n",myproc()->pid,num,sysnames[num],p->trapframe->a0);
        // trace
    if ((p->tmask & (1 << num)) != 0) {
    80211a74:	1144a783          	lw	a5,276(s1)
    80211a78:	4137d7bb          	sraw	a5,a5,s3
    80211a7c:	8b85                	andi	a5,a5,1
    80211a7e:	c7a1                	beqz	a5,80211ac6 <syscall+0x98>
      printf("pid %d: %s -> %d\n", p->pid, sysnames[num], p->trapframe->a0);
    80211a80:	74b8                	ld	a4,104(s1)
    80211a82:	098e                	slli	s3,s3,0x3
    80211a84:	00005797          	auipc	a5,0x5
    80211a88:	c1c78793          	addi	a5,a5,-996 # 802166a0 <sysnames>
    80211a8c:	99be                	add	s3,s3,a5
    80211a8e:	7b34                	ld	a3,112(a4)
    80211a90:	0009b603          	ld	a2,0(s3)
    80211a94:	40ac                	lw	a1,64(s1)
    80211a96:	00005517          	auipc	a0,0x5
    80211a9a:	8c250513          	addi	a0,a0,-1854 # 80216358 <UNAME_VERSION+0x510>
    80211a9e:	ffff7097          	auipc	ra,0xffff7
    80211aa2:	7f6080e7          	jalr	2038(ra) # 80209294 <printf>
    80211aa6:	a005                	j	80211ac6 <syscall+0x98>
    }
  } else {
    printf("pid %d %s: unknown sys call %d\n",
    80211aa8:	86ce                	mv	a3,s3
    80211aaa:	10048613          	addi	a2,s1,256
    80211aae:	40ac                	lw	a1,64(s1)
    80211ab0:	00005517          	auipc	a0,0x5
    80211ab4:	8c050513          	addi	a0,a0,-1856 # 80216370 <UNAME_VERSION+0x528>
    80211ab8:	ffff7097          	auipc	ra,0xffff7
    80211abc:	7dc080e7          	jalr	2012(ra) # 80209294 <printf>
            p->pid, p->name, num);
    p->trapframe->a0 = -1;
    80211ac0:	74bc                	ld	a5,104(s1)
    80211ac2:	577d                	li	a4,-1
    80211ac4:	fbb8                	sd	a4,112(a5)
  }
}
    80211ac6:	70a2                	ld	ra,40(sp)
    80211ac8:	7402                	ld	s0,32(sp)
    80211aca:	64e2                	ld	s1,24(sp)
    80211acc:	6942                	ld	s2,16(sp)
    80211ace:	69a2                	ld	s3,8(sp)
    80211ad0:	6145                	addi	sp,sp,48
    80211ad2:	8082                	ret
	...

0000000080212000 <_trampoline>:
    80212000:	14051573          	csrrw	a0,sscratch,a0
    80212004:	02153423          	sd	ra,40(a0)
    80212008:	02253823          	sd	sp,48(a0)
    8021200c:	02353c23          	sd	gp,56(a0)
    80212010:	04453023          	sd	tp,64(a0)
    80212014:	04553423          	sd	t0,72(a0)
    80212018:	04653823          	sd	t1,80(a0)
    8021201c:	04753c23          	sd	t2,88(a0)
    80212020:	f120                	sd	s0,96(a0)
    80212022:	f524                	sd	s1,104(a0)
    80212024:	fd2c                	sd	a1,120(a0)
    80212026:	e150                	sd	a2,128(a0)
    80212028:	e554                	sd	a3,136(a0)
    8021202a:	e958                	sd	a4,144(a0)
    8021202c:	ed5c                	sd	a5,152(a0)
    8021202e:	0b053023          	sd	a6,160(a0)
    80212032:	0b153423          	sd	a7,168(a0)
    80212036:	0b253823          	sd	s2,176(a0)
    8021203a:	0b353c23          	sd	s3,184(a0)
    8021203e:	0d453023          	sd	s4,192(a0)
    80212042:	0d553423          	sd	s5,200(a0)
    80212046:	0d653823          	sd	s6,208(a0)
    8021204a:	0d753c23          	sd	s7,216(a0)
    8021204e:	0f853023          	sd	s8,224(a0)
    80212052:	0f953423          	sd	s9,232(a0)
    80212056:	0fa53823          	sd	s10,240(a0)
    8021205a:	0fb53c23          	sd	s11,248(a0)
    8021205e:	11c53023          	sd	t3,256(a0)
    80212062:	11d53423          	sd	t4,264(a0)
    80212066:	11e53823          	sd	t5,272(a0)
    8021206a:	11f53c23          	sd	t6,280(a0)
    8021206e:	140022f3          	csrr	t0,sscratch
    80212072:	06553823          	sd	t0,112(a0)
    80212076:	00853103          	ld	sp,8(a0)
    8021207a:	02053203          	ld	tp,32(a0)
    8021207e:	01053283          	ld	t0,16(a0)
    80212082:	00053303          	ld	t1,0(a0)
    80212086:	18031073          	csrw	satp,t1
    8021208a:	12000073          	sfence.vma
    8021208e:	8282                	jr	t0

0000000080212090 <userret>:
    80212090:	18059073          	csrw	satp,a1
    80212094:	12000073          	sfence.vma
    80212098:	07053283          	ld	t0,112(a0)
    8021209c:	14029073          	csrw	sscratch,t0
    802120a0:	02853083          	ld	ra,40(a0)
    802120a4:	03053103          	ld	sp,48(a0)
    802120a8:	03853183          	ld	gp,56(a0)
    802120ac:	04053203          	ld	tp,64(a0)
    802120b0:	04853283          	ld	t0,72(a0)
    802120b4:	05053303          	ld	t1,80(a0)
    802120b8:	05853383          	ld	t2,88(a0)
    802120bc:	7120                	ld	s0,96(a0)
    802120be:	7524                	ld	s1,104(a0)
    802120c0:	7d2c                	ld	a1,120(a0)
    802120c2:	6150                	ld	a2,128(a0)
    802120c4:	6554                	ld	a3,136(a0)
    802120c6:	6958                	ld	a4,144(a0)
    802120c8:	6d5c                	ld	a5,152(a0)
    802120ca:	0a053803          	ld	a6,160(a0)
    802120ce:	0a853883          	ld	a7,168(a0)
    802120d2:	0b053903          	ld	s2,176(a0)
    802120d6:	0b853983          	ld	s3,184(a0)
    802120da:	0c053a03          	ld	s4,192(a0)
    802120de:	0c853a83          	ld	s5,200(a0)
    802120e2:	0d053b03          	ld	s6,208(a0)
    802120e6:	0d853b83          	ld	s7,216(a0)
    802120ea:	0e053c03          	ld	s8,224(a0)
    802120ee:	0e853c83          	ld	s9,232(a0)
    802120f2:	0f053d03          	ld	s10,240(a0)
    802120f6:	0f853d83          	ld	s11,248(a0)
    802120fa:	10053e03          	ld	t3,256(a0)
    802120fe:	10853e83          	ld	t4,264(a0)
    80212102:	11053f03          	ld	t5,272(a0)
    80212106:	11853f83          	ld	t6,280(a0)
    8021210a:	14051573          	csrrw	a0,sscratch,a0
    8021210e:	10200073          	sret
	...

0000000080213000 <_sig_trampoline>:
    80213000:	9582                	jalr	a1
    80213002:	08b00893          	li	a7,139
    80213006:	00000073          	ecall

000000008021300a <default_sigaction>:
    8021300a:	557d                	li	a0,-1
    8021300c:	05d00893          	li	a7,93
    80213010:	00000073          	ecall
	...
