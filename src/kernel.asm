
src/kernel:     file format elf64-littleriscv


Disassembly of section .text:

0000000080200000 <_entry>:
    80200000:	00816297          	auipc	t0,0x816
    80200004:	05028293          	addi	t0,t0,80 # 80a16050 <__first_boot_magic>
    80200008:	0002b303          	ld	t1,0(t0)
    8020000c:	6399                	lui	t2,0x6
    8020000e:	a5a3839b          	addiw	t2,t2,-1446
    80200012:	00731863          	bne	t1,t2,80200022 <_secondary_boot>
    80200016:	0083f117          	auipc	sp,0x83f
    8020001a:	fea10113          	addi	sp,sp,-22 # 80a3f000 <bcache>
    8020001e:	3ca0a0ef          	jal	ra,8020a3e8 <__get_boot_hartid>

0000000080200022 <_secondary_boot>:
    80200022:	00000293          	li	t0,0
    80200026:	00150293          	addi	t0,a0,1
    8020002a:	02be                	slli	t0,t0,0xf
    8020002c:	00817117          	auipc	sp,0x817
    80200030:	fd410113          	addi	sp,sp,-44 # 80a17000 <boot_stack>
    80200034:	9116                	add	sp,sp,t0
    80200036:	1e20a0ef          	jal	ra,8020a218 <main>

000000008020003a <loop>:
    8020003a:	a001                	j	8020003a <loop>

000000008020003c <binit>:

extern struct fs FatFs[FSNUM];
extern int disk_init_flag;
void
binit(void)
{
    8020003c:	7139                	addi	sp,sp,-64
    8020003e:	fc06                	sd	ra,56(sp)
    80200040:	f822                	sd	s0,48(sp)
    80200042:	f426                	sd	s1,40(sp)
    80200044:	f04a                	sd	s2,32(sp)
    80200046:	ec4e                	sd	s3,24(sp)
    80200048:	e852                	sd	s4,16(sp)
    8020004a:	e456                	sd	s5,8(sp)
    8020004c:	0080                	addi	s0,sp,64
  struct buf *b;

  initlock(&bcache.lock, "bcache");
    8020004e:	00012597          	auipc	a1,0x12
    80200052:	fb258593          	addi	a1,a1,-78 # 80212000 <rodata_start>
    80200056:	0083f517          	auipc	a0,0x83f
    8020005a:	faa50513          	addi	a0,a0,-86 # 80a3f000 <bcache>
    8020005e:	00008097          	auipc	ra,0x8
    80200062:	2d4080e7          	jalr	724(ra) # 80208332 <initlock>
  disk_init_flag = 0;
    80200066:	00848797          	auipc	a5,0x848
    8020006a:	1207ad23          	sw	zero,314(a5) # 80a481a0 <disk_init_flag>
  // Create linked list of buffers
  bcache.head.prev = &bcache.head;
    8020006e:	00843797          	auipc	a5,0x843
    80200072:	f9278793          	addi	a5,a5,-110 # 80a43000 <bcache+0x4000>
    80200076:	00843717          	auipc	a4,0x843
    8020007a:	5f270713          	addi	a4,a4,1522 # 80a43668 <bcache+0x4668>
    8020007e:	6ae7b823          	sd	a4,1712(a5)
  bcache.head.next = &bcache.head;
    80200082:	6ae7bc23          	sd	a4,1720(a5)
  for(b = bcache.buf; b < bcache.buf+NBUF; b++){
    80200086:	0083f497          	auipc	s1,0x83f
    8020008a:	f9248493          	addi	s1,s1,-110 # 80a3f018 <bcache+0x18>
    b->valid= 0;
    b->refcnt = 0;
    b->sectorno = ~0;
    8020008e:	5a7d                	li	s4,-1
    b->dev = ~0;
    b->next = bcache.head.next;
    80200090:	893e                	mv	s2,a5
    b->prev = &bcache.head;
    80200092:	89ba                	mv	s3,a4
    initsleeplock(&b->lock, "buffer");
    80200094:	00012a97          	auipc	s5,0x12
    80200098:	f74a8a93          	addi	s5,s5,-140 # 80212008 <rodata_start+0x8>
    b->valid= 0;
    8020009c:	0004a023          	sw	zero,0(s1)
    b->refcnt = 0;
    802000a0:	0404a023          	sw	zero,64(s1)
    b->sectorno = ~0;
    802000a4:	0144a623          	sw	s4,12(s1)
    b->dev = ~0;
    802000a8:	0144a423          	sw	s4,8(s1)
    b->next = bcache.head.next;
    802000ac:	6b893783          	ld	a5,1720(s2)
    802000b0:	e8bc                	sd	a5,80(s1)
    b->prev = &bcache.head;
    802000b2:	0534b423          	sd	s3,72(s1)
    initsleeplock(&b->lock, "buffer");
    802000b6:	85d6                	mv	a1,s5
    802000b8:	01048513          	addi	a0,s1,16
    802000bc:	00008097          	auipc	ra,0x8
    802000c0:	356080e7          	jalr	854(ra) # 80208412 <initsleeplock>
    bcache.head.next->prev = b;
    802000c4:	6b893783          	ld	a5,1720(s2)
    802000c8:	e7a4                	sd	s1,72(a5)
    bcache.head.next = b;
    802000ca:	6a993c23          	sd	s1,1720(s2)
  for(b = bcache.buf; b < bcache.buf+NBUF; b++){
    802000ce:	25848493          	addi	s1,s1,600
    802000d2:	fd3495e3          	bne	s1,s3,8020009c <binit+0x60>
  }
  #ifdef DEBUG
  printf("binit\n");
    802000d6:	00012517          	auipc	a0,0x12
    802000da:	f3a50513          	addi	a0,a0,-198 # 80212010 <rodata_start+0x10>
    802000de:	00008097          	auipc	ra,0x8
    802000e2:	652080e7          	jalr	1618(ra) # 80208730 <printf>
  #endif
}
    802000e6:	70e2                	ld	ra,56(sp)
    802000e8:	7442                	ld	s0,48(sp)
    802000ea:	74a2                	ld	s1,40(sp)
    802000ec:	7902                	ld	s2,32(sp)
    802000ee:	69e2                	ld	s3,24(sp)
    802000f0:	6a42                	ld	s4,16(sp)
    802000f2:	6aa2                	ld	s5,8(sp)
    802000f4:	6121                	addi	sp,sp,64
    802000f6:	8082                	ret

00000000802000f8 <bread>:
  panic("bget: no buffers");
}

// Return a locked buf with the contents of the indicated block.
struct buf* 
bread(uint dev, uint sectorno) {
    802000f8:	7179                	addi	sp,sp,-48
    802000fa:	f406                	sd	ra,40(sp)
    802000fc:	f022                	sd	s0,32(sp)
    802000fe:	ec26                	sd	s1,24(sp)
    80200100:	e84a                	sd	s2,16(sp)
    80200102:	e44e                	sd	s3,8(sp)
    80200104:	1800                	addi	s0,sp,48
    80200106:	892a                	mv	s2,a0
    80200108:	89ae                	mv	s3,a1
  acquire(&bcache.lock);
    8020010a:	0083f517          	auipc	a0,0x83f
    8020010e:	ef650513          	addi	a0,a0,-266 # 80a3f000 <bcache>
    80200112:	00008097          	auipc	ra,0x8
    80200116:	264080e7          	jalr	612(ra) # 80208376 <acquire>
  for(b = bcache.head.next; b != &bcache.head; b = b->next){
    8020011a:	00843497          	auipc	s1,0x843
    8020011e:	59e4b483          	ld	s1,1438(s1) # 80a436b8 <bcache+0x46b8>
    80200122:	00843797          	auipc	a5,0x843
    80200126:	54678793          	addi	a5,a5,1350 # 80a43668 <bcache+0x4668>
    8020012a:	02f48f63          	beq	s1,a5,80200168 <bread+0x70>
    8020012e:	873e                	mv	a4,a5
    80200130:	a021                	j	80200138 <bread+0x40>
    80200132:	68a4                	ld	s1,80(s1)
    80200134:	02e48a63          	beq	s1,a4,80200168 <bread+0x70>
    if(b->dev == dev && b->sectorno == sectorno){
    80200138:	449c                	lw	a5,8(s1)
    8020013a:	ff279ce3          	bne	a5,s2,80200132 <bread+0x3a>
    8020013e:	44dc                	lw	a5,12(s1)
    80200140:	ff3799e3          	bne	a5,s3,80200132 <bread+0x3a>
      b->refcnt++;
    80200144:	40bc                	lw	a5,64(s1)
    80200146:	2785                	addiw	a5,a5,1
    80200148:	c0bc                	sw	a5,64(s1)
      release(&bcache.lock);
    8020014a:	0083f517          	auipc	a0,0x83f
    8020014e:	eb650513          	addi	a0,a0,-330 # 80a3f000 <bcache>
    80200152:	00008097          	auipc	ra,0x8
    80200156:	278080e7          	jalr	632(ra) # 802083ca <release>
      acquiresleep(&b->lock);
    8020015a:	01048513          	addi	a0,s1,16
    8020015e:	00008097          	auipc	ra,0x8
    80200162:	2ee080e7          	jalr	750(ra) # 8020844c <acquiresleep>
      return b;
    80200166:	a8b9                	j	802001c4 <bread+0xcc>
  for(b = bcache.head.prev; b != &bcache.head; b = b->prev){
    80200168:	00843497          	auipc	s1,0x843
    8020016c:	5484b483          	ld	s1,1352(s1) # 80a436b0 <bcache+0x46b0>
    80200170:	00843797          	auipc	a5,0x843
    80200174:	4f878793          	addi	a5,a5,1272 # 80a43668 <bcache+0x4668>
    80200178:	00f48863          	beq	s1,a5,80200188 <bread+0x90>
    8020017c:	873e                	mv	a4,a5
    if(b->refcnt == 0) {
    8020017e:	40bc                	lw	a5,64(s1)
    80200180:	cf81                	beqz	a5,80200198 <bread+0xa0>
  for(b = bcache.head.prev; b != &bcache.head; b = b->prev){
    80200182:	64a4                	ld	s1,72(s1)
    80200184:	fee49de3          	bne	s1,a4,8020017e <bread+0x86>
  panic("bget: no buffers");
    80200188:	00012517          	auipc	a0,0x12
    8020018c:	e9050513          	addi	a0,a0,-368 # 80212018 <rodata_start+0x18>
    80200190:	00008097          	auipc	ra,0x8
    80200194:	556080e7          	jalr	1366(ra) # 802086e6 <panic>
      b->dev = dev;
    80200198:	0124a423          	sw	s2,8(s1)
      b->sectorno = sectorno;
    8020019c:	0134a623          	sw	s3,12(s1)
      b->valid = 0;
    802001a0:	0004a023          	sw	zero,0(s1)
      b->refcnt = 1;
    802001a4:	4785                	li	a5,1
    802001a6:	c0bc                	sw	a5,64(s1)
      release(&bcache.lock);
    802001a8:	0083f517          	auipc	a0,0x83f
    802001ac:	e5850513          	addi	a0,a0,-424 # 80a3f000 <bcache>
    802001b0:	00008097          	auipc	ra,0x8
    802001b4:	21a080e7          	jalr	538(ra) # 802083ca <release>
      acquiresleep(&b->lock);
    802001b8:	01048513          	addi	a0,s1,16
    802001bc:	00008097          	auipc	ra,0x8
    802001c0:	290080e7          	jalr	656(ra) # 8020844c <acquiresleep>
  struct buf *b;
  b = bget(dev, sectorno);

  if (!b->valid) {
    802001c4:	409c                	lw	a5,0(s1)
    802001c6:	e79d                	bnez	a5,802001f4 <bread+0xfc>
    FatFs[dev].disk_read(b,FatFs[dev].image);
    802001c8:	1902                	slli	s2,s2,0x20
    802001ca:	02095913          	srli	s2,s2,0x20
    802001ce:	6715                	lui	a4,0x5
    802001d0:	9b870513          	addi	a0,a4,-1608 # 49b8 <_entry-0x801fb648>
    802001d4:	02a90933          	mul	s2,s2,a0
    802001d8:	00855797          	auipc	a5,0x855
    802001dc:	9d878793          	addi	a5,a5,-1576 # 80a54bb0 <FatFs>
    802001e0:	993e                	add	s2,s2,a5
    802001e2:	974a                	add	a4,a4,s2
    802001e4:	9a873783          	ld	a5,-1624(a4)
    802001e8:	00893583          	ld	a1,8(s2)
    802001ec:	8526                	mv	a0,s1
    802001ee:	9782                	jalr	a5
    b->valid = 1;
    802001f0:	4785                	li	a5,1
    802001f2:	c09c                	sw	a5,0(s1)
  }
  
  return b;
}
    802001f4:	8526                	mv	a0,s1
    802001f6:	70a2                	ld	ra,40(sp)
    802001f8:	7402                	ld	s0,32(sp)
    802001fa:	64e2                	ld	s1,24(sp)
    802001fc:	6942                	ld	s2,16(sp)
    802001fe:	69a2                	ld	s3,8(sp)
    80200200:	6145                	addi	sp,sp,48
    80200202:	8082                	ret

0000000080200204 <bwrite>:

// Write b's contents to disk.  Must be locked.
void 
bwrite(uint dev, struct buf *b) {
    80200204:	1101                	addi	sp,sp,-32
    80200206:	ec06                	sd	ra,24(sp)
    80200208:	e822                	sd	s0,16(sp)
    8020020a:	e426                	sd	s1,8(sp)
    8020020c:	e04a                	sd	s2,0(sp)
    8020020e:	1000                	addi	s0,sp,32
    80200210:	84aa                	mv	s1,a0
    80200212:	892e                	mv	s2,a1

  if(!holdingsleep(&b->lock))
    80200214:	01058513          	addi	a0,a1,16
    80200218:	00008097          	auipc	ra,0x8
    8020021c:	2c2080e7          	jalr	706(ra) # 802084da <holdingsleep>
    80200220:	c915                	beqz	a0,80200254 <bwrite+0x50>
    panic("bwrite");

  FatFs[dev].disk_write(b,FatFs[dev].image);
    80200222:	02049513          	slli	a0,s1,0x20
    80200226:	9101                	srli	a0,a0,0x20
    80200228:	6795                	lui	a5,0x5
    8020022a:	9b878493          	addi	s1,a5,-1608 # 49b8 <_entry-0x801fb648>
    8020022e:	02950533          	mul	a0,a0,s1
    80200232:	00855497          	auipc	s1,0x855
    80200236:	97e48493          	addi	s1,s1,-1666 # 80a54bb0 <FatFs>
    8020023a:	9526                	add	a0,a0,s1
    8020023c:	97aa                	add	a5,a5,a0
    8020023e:	9b07b783          	ld	a5,-1616(a5)
    80200242:	650c                	ld	a1,8(a0)
    80200244:	854a                	mv	a0,s2
    80200246:	9782                	jalr	a5
}
    80200248:	60e2                	ld	ra,24(sp)
    8020024a:	6442                	ld	s0,16(sp)
    8020024c:	64a2                	ld	s1,8(sp)
    8020024e:	6902                	ld	s2,0(sp)
    80200250:	6105                	addi	sp,sp,32
    80200252:	8082                	ret
    panic("bwrite");
    80200254:	00012517          	auipc	a0,0x12
    80200258:	ddc50513          	addi	a0,a0,-548 # 80212030 <rodata_start+0x30>
    8020025c:	00008097          	auipc	ra,0x8
    80200260:	48a080e7          	jalr	1162(ra) # 802086e6 <panic>

0000000080200264 <brelse>:

// Release a locked buffer.
// Move to the head of the most-recently-used list.
void
brelse(struct buf *b)
{
    80200264:	1101                	addi	sp,sp,-32
    80200266:	ec06                	sd	ra,24(sp)
    80200268:	e822                	sd	s0,16(sp)
    8020026a:	e426                	sd	s1,8(sp)
    8020026c:	e04a                	sd	s2,0(sp)
    8020026e:	1000                	addi	s0,sp,32
    80200270:	84aa                	mv	s1,a0
  
  if(!holdingsleep(&b->lock))
    80200272:	01050913          	addi	s2,a0,16
    80200276:	854a                	mv	a0,s2
    80200278:	00008097          	auipc	ra,0x8
    8020027c:	262080e7          	jalr	610(ra) # 802084da <holdingsleep>
    80200280:	c92d                	beqz	a0,802002f2 <brelse+0x8e>
    panic("brelse");
    
  releasesleep(&b->lock);//?????????
    80200282:	854a                	mv	a0,s2
    80200284:	00008097          	auipc	ra,0x8
    80200288:	212080e7          	jalr	530(ra) # 80208496 <releasesleep>
  acquire(&bcache.lock);
    8020028c:	0083f517          	auipc	a0,0x83f
    80200290:	d7450513          	addi	a0,a0,-652 # 80a3f000 <bcache>
    80200294:	00008097          	auipc	ra,0x8
    80200298:	0e2080e7          	jalr	226(ra) # 80208376 <acquire>
  b->refcnt--;
    8020029c:	40bc                	lw	a5,64(s1)
    8020029e:	37fd                	addiw	a5,a5,-1
    802002a0:	0007871b          	sext.w	a4,a5
    802002a4:	c0bc                	sw	a5,64(s1)
  if (b->refcnt == 0) {
    802002a6:	eb05                	bnez	a4,802002d6 <brelse+0x72>
    // no one is waiting for it.
    b->next->prev = b->prev;
    802002a8:	68bc                	ld	a5,80(s1)
    802002aa:	64b8                	ld	a4,72(s1)
    802002ac:	e7b8                	sd	a4,72(a5)
    b->prev->next = b->next;
    802002ae:	64bc                	ld	a5,72(s1)
    802002b0:	68b8                	ld	a4,80(s1)
    802002b2:	ebb8                	sd	a4,80(a5)
    b->next = bcache.head.next;
    802002b4:	00843797          	auipc	a5,0x843
    802002b8:	d4c78793          	addi	a5,a5,-692 # 80a43000 <bcache+0x4000>
    802002bc:	6b87b703          	ld	a4,1720(a5)
    802002c0:	e8b8                	sd	a4,80(s1)
    b->prev = &bcache.head;
    802002c2:	00843717          	auipc	a4,0x843
    802002c6:	3a670713          	addi	a4,a4,934 # 80a43668 <bcache+0x4668>
    802002ca:	e4b8                	sd	a4,72(s1)
    bcache.head.next->prev = b;
    802002cc:	6b87b703          	ld	a4,1720(a5)
    802002d0:	e724                	sd	s1,72(a4)
    bcache.head.next = b;
    802002d2:	6a97bc23          	sd	s1,1720(a5)
  }
  release(&bcache.lock);
    802002d6:	0083f517          	auipc	a0,0x83f
    802002da:	d2a50513          	addi	a0,a0,-726 # 80a3f000 <bcache>
    802002de:	00008097          	auipc	ra,0x8
    802002e2:	0ec080e7          	jalr	236(ra) # 802083ca <release>
  
}
    802002e6:	60e2                	ld	ra,24(sp)
    802002e8:	6442                	ld	s0,16(sp)
    802002ea:	64a2                	ld	s1,8(sp)
    802002ec:	6902                	ld	s2,0(sp)
    802002ee:	6105                	addi	sp,sp,32
    802002f0:	8082                	ret
    panic("brelse");
    802002f2:	00012517          	auipc	a0,0x12
    802002f6:	d4650513          	addi	a0,a0,-698 # 80212038 <rodata_start+0x38>
    802002fa:	00008097          	auipc	ra,0x8
    802002fe:	3ec080e7          	jalr	1004(ra) # 802086e6 <panic>

0000000080200302 <bpin>:

void
bpin(struct buf *b) {
    80200302:	1101                	addi	sp,sp,-32
    80200304:	ec06                	sd	ra,24(sp)
    80200306:	e822                	sd	s0,16(sp)
    80200308:	e426                	sd	s1,8(sp)
    8020030a:	1000                	addi	s0,sp,32
    8020030c:	84aa                	mv	s1,a0
  acquire(&bcache.lock);
    8020030e:	0083f517          	auipc	a0,0x83f
    80200312:	cf250513          	addi	a0,a0,-782 # 80a3f000 <bcache>
    80200316:	00008097          	auipc	ra,0x8
    8020031a:	060080e7          	jalr	96(ra) # 80208376 <acquire>
  b->refcnt++;
    8020031e:	40bc                	lw	a5,64(s1)
    80200320:	2785                	addiw	a5,a5,1
    80200322:	c0bc                	sw	a5,64(s1)
  release(&bcache.lock);
    80200324:	0083f517          	auipc	a0,0x83f
    80200328:	cdc50513          	addi	a0,a0,-804 # 80a3f000 <bcache>
    8020032c:	00008097          	auipc	ra,0x8
    80200330:	09e080e7          	jalr	158(ra) # 802083ca <release>
}
    80200334:	60e2                	ld	ra,24(sp)
    80200336:	6442                	ld	s0,16(sp)
    80200338:	64a2                	ld	s1,8(sp)
    8020033a:	6105                	addi	sp,sp,32
    8020033c:	8082                	ret

000000008020033e <bunpin>:

void
bunpin(struct buf *b) {
    8020033e:	1101                	addi	sp,sp,-32
    80200340:	ec06                	sd	ra,24(sp)
    80200342:	e822                	sd	s0,16(sp)
    80200344:	e426                	sd	s1,8(sp)
    80200346:	1000                	addi	s0,sp,32
    80200348:	84aa                	mv	s1,a0
  acquire(&bcache.lock);
    8020034a:	0083f517          	auipc	a0,0x83f
    8020034e:	cb650513          	addi	a0,a0,-842 # 80a3f000 <bcache>
    80200352:	00008097          	auipc	ra,0x8
    80200356:	024080e7          	jalr	36(ra) # 80208376 <acquire>
  b->refcnt--;
    8020035a:	40bc                	lw	a5,64(s1)
    8020035c:	37fd                	addiw	a5,a5,-1
    8020035e:	c0bc                	sw	a5,64(s1)
  release(&bcache.lock);
    80200360:	0083f517          	auipc	a0,0x83f
    80200364:	ca050513          	addi	a0,a0,-864 # 80a3f000 <bcache>
    80200368:	00008097          	auipc	ra,0x8
    8020036c:	062080e7          	jalr	98(ra) # 802083ca <release>
}
    80200370:	60e2                	ld	ra,24(sp)
    80200372:	6442                	ld	s0,16(sp)
    80200374:	64a2                	ld	s1,8(sp)
    80200376:	6105                	addi	sp,sp,32
    80200378:	8082                	ret
	...

0000000080200382 <ramdisk_init>:
extern char fs_img_end[];
char* ramdisk;

void
ramdisk_init(void)
{
    80200382:	1101                	addi	sp,sp,-32
    80200384:	ec06                	sd	ra,24(sp)
    80200386:	e822                	sd	s0,16(sp)
    80200388:	e426                	sd	s1,8(sp)
    8020038a:	1000                	addi	s0,sp,32
#ifdef QEMU
  ramdisk = fs_img_start;
    8020038c:	00848497          	auipc	s1,0x848
    80200390:	e0c48493          	addi	s1,s1,-500 # 80a48198 <ramdisk>
    80200394:	00016797          	auipc	a5,0x16
    80200398:	c6c78793          	addi	a5,a5,-916 # 80216000 <data_start>
    8020039c:	e09c                	sd	a5,0(s1)
#endif
#ifdef SIFIVE_U
  ramdisk = (char*)RAMDISK;
#endif
  initlock(&ramdisklock, "ramdisk lock");
    8020039e:	00012597          	auipc	a1,0x12
    802003a2:	ca258593          	addi	a1,a1,-862 # 80212040 <rodata_start+0x40>
    802003a6:	00848517          	auipc	a0,0x848
    802003aa:	dda50513          	addi	a0,a0,-550 # 80a48180 <ramdisklock>
    802003ae:	00008097          	auipc	ra,0x8
    802003b2:	f84080e7          	jalr	-124(ra) # 80208332 <initlock>
  __debug_info("ramdiskinit ram start:%p\n",ramdisk);
    802003b6:	608c                	ld	a1,0(s1)
    802003b8:	00012517          	auipc	a0,0x12
    802003bc:	c9850513          	addi	a0,a0,-872 # 80212050 <rodata_start+0x50>
    802003c0:	00008097          	auipc	ra,0x8
    802003c4:	536080e7          	jalr	1334(ra) # 802088f6 <__debug_info>
}
    802003c8:	60e2                	ld	ra,24(sp)
    802003ca:	6442                	ld	s0,16(sp)
    802003cc:	64a2                	ld	s1,8(sp)
    802003ce:	6105                	addi	sp,sp,32
    802003d0:	8082                	ret

00000000802003d2 <ramdisk_rw>:

void 
ramdisk_rw(struct buf *b, int write)
{
    802003d2:	1101                	addi	sp,sp,-32
    802003d4:	ec06                	sd	ra,24(sp)
    802003d6:	e822                	sd	s0,16(sp)
    802003d8:	e426                	sd	s1,8(sp)
    802003da:	e04a                	sd	s2,0(sp)
    802003dc:	1000                	addi	s0,sp,32
    802003de:	84aa                	mv	s1,a0
    802003e0:	892e                	mv	s2,a1
  acquire(&ramdisklock);
    802003e2:	00848517          	auipc	a0,0x848
    802003e6:	d9e50513          	addi	a0,a0,-610 # 80a48180 <ramdisklock>
    802003ea:	00008097          	auipc	ra,0x8
    802003ee:	f8c080e7          	jalr	-116(ra) # 80208376 <acquire>
  uint sectorno = b->sectorno;

  char *addr = ramdisk + sectorno * BSIZE;
    802003f2:	44dc                	lw	a5,12(s1)
    802003f4:	0097979b          	slliw	a5,a5,0x9
    802003f8:	1782                	slli	a5,a5,0x20
    802003fa:	9381                	srli	a5,a5,0x20
    802003fc:	00848517          	auipc	a0,0x848
    80200400:	d9c53503          	ld	a0,-612(a0) # 80a48198 <ramdisk>
    80200404:	953e                	add	a0,a0,a5
  if (write)
    80200406:	02090863          	beqz	s2,80200436 <ramdisk_rw+0x64>
  {
    memmove((void*)addr, b->data, BSIZE);
    8020040a:	20000613          	li	a2,512
    8020040e:	05848593          	addi	a1,s1,88
    80200412:	00001097          	auipc	ra,0x1
    80200416:	9c2080e7          	jalr	-1598(ra) # 80200dd4 <memmove>
  }
  else
  {
    memmove(b->data, (void*)addr, BSIZE);
  }
  release(&ramdisklock);
    8020041a:	00848517          	auipc	a0,0x848
    8020041e:	d6650513          	addi	a0,a0,-666 # 80a48180 <ramdisklock>
    80200422:	00008097          	auipc	ra,0x8
    80200426:	fa8080e7          	jalr	-88(ra) # 802083ca <release>
}
    8020042a:	60e2                	ld	ra,24(sp)
    8020042c:	6442                	ld	s0,16(sp)
    8020042e:	64a2                	ld	s1,8(sp)
    80200430:	6902                	ld	s2,0(sp)
    80200432:	6105                	addi	sp,sp,32
    80200434:	8082                	ret
    memmove(b->data, (void*)addr, BSIZE);
    80200436:	20000613          	li	a2,512
    8020043a:	85aa                	mv	a1,a0
    8020043c:	05848513          	addi	a0,s1,88
    80200440:	00001097          	auipc	ra,0x1
    80200444:	994080e7          	jalr	-1644(ra) # 80200dd4 <memmove>
    80200448:	bfc9                	j	8020041a <ramdisk_rw+0x48>

000000008020044a <ramdisk_intr>:

void
ramdisk_intr()
{
    8020044a:	1141                	addi	sp,sp,-16
    8020044c:	e422                	sd	s0,8(sp)
    8020044e:	0800                	addi	s0,sp,16
    //acquire(&ramdisklock);
    
}
    80200450:	6422                	ld	s0,8(sp)
    80200452:	0141                	addi	sp,sp,16
    80200454:	8082                	ret

0000000080200456 <spi_min_clk_divisor>:
/**
 * Get smallest clock divisor that divides input_khz to a quotient less than or
 * equal to max_target_khz;
 */
inline unsigned int spi_min_clk_divisor(unsigned int input_khz, unsigned int max_target_khz)
{
    80200456:	1141                	addi	sp,sp,-16
    80200458:	e422                	sd	s0,8(sp)
    8020045a:	0800                	addi	s0,sp,16
  // div = ceil(f_in / (2*f_sck)) - 1
  //     = floor((f_in - 1 + 2*f_sck) / (2*f_sck)) - 1
  //
  // This should not overflow as long as (f_in - 1 + 2*f_sck) does not exceed
  // 2^32 - 1, which is unlikely since we represent frequencies in kHz.
  unsigned int quotient = (input_khz + 2 * max_target_khz - 1) / (2 * max_target_khz);
    8020045c:	0015959b          	slliw	a1,a1,0x1
    80200460:	0005871b          	sext.w	a4,a1
    80200464:	357d                	addiw	a0,a0,-1
    80200466:	9d2d                	addw	a0,a0,a1
    80200468:	0005079b          	sext.w	a5,a0
  // Avoid underflow
  if (quotient == 0) {
    8020046c:	00e7e863          	bltu	a5,a4,8020047c <spi_min_clk_divisor+0x26>
  unsigned int quotient = (input_khz + 2 * max_target_khz - 1) / (2 * max_target_khz);
    80200470:	02b5553b          	divuw	a0,a0,a1
    return 0;
  } else {
    return quotient - 1;
    80200474:	357d                	addiw	a0,a0,-1
  }
}
    80200476:	6422                	ld	s0,8(sp)
    80200478:	0141                	addi	sp,sp,16
    8020047a:	8082                	ret
    return 0;
    8020047c:	4501                	li	a0,0
    8020047e:	bfe5                	j	80200476 <spi_min_clk_divisor+0x20>

0000000080200480 <spi_tx>:

/**
 * Wait until SPI is ready for transmission and transmit byte.
 */
void spi_tx(spi_ctrl* spictrl, uint8_t in)
{
    80200480:	1141                	addi	sp,sp,-16
    80200482:	e422                	sd	s0,8(sp)
    80200484:	0800                	addi	s0,sp,16
#if __riscv_atomic
  int32_t r;
  do {
    asm volatile (
    80200486:	04850793          	addi	a5,a0,72
    8020048a:	40b7a7af          	amoor.w	a5,a1,(a5)
      "amoor.w %0, %2, %1\n"
      : "=r" (r), "+A" (spictrl->txdata.raw_bits)
      : "r" (in)
    );
  } while (r < 0);
    8020048e:	02079713          	slli	a4,a5,0x20
    80200492:	fe074ae3          	bltz	a4,80200486 <spi_tx+0x6>
#else
  while ((int32_t) spictrl->txdata.raw_bits < 0);
  spictrl->txdata.data = in;
#endif
}
    80200496:	6422                	ld	s0,8(sp)
    80200498:	0141                	addi	sp,sp,16
    8020049a:	8082                	ret

000000008020049c <spi_rx>:

/**
 * Wait until SPI receive queue has data and read byte.
 */
uint8_t spi_rx(spi_ctrl* spictrl)
{
    8020049c:	1141                	addi	sp,sp,-16
    8020049e:	e422                	sd	s0,8(sp)
    802004a0:	0800                	addi	s0,sp,16
  int32_t out;
  while ((out = (int32_t) spictrl->rxdata.raw_bits) < 0);
    802004a2:	457c                	lw	a5,76(a0)
    802004a4:	02079693          	slli	a3,a5,0x20
    802004a8:	fe06cde3          	bltz	a3,802004a2 <spi_rx+0x6>
    802004ac:	0007871b          	sext.w	a4,a5
  return (uint8_t) out;
}
    802004b0:	0ff77513          	andi	a0,a4,255
    802004b4:	6422                	ld	s0,8(sp)
    802004b6:	0141                	addi	sp,sp,16
    802004b8:	8082                	ret

00000000802004ba <spi_txrx>:

/**
 * Transmit a byte and receive a byte.
 */
uint8_t spi_txrx(spi_ctrl* spictrl, uint8_t in)
{
    802004ba:	1101                	addi	sp,sp,-32
    802004bc:	ec06                	sd	ra,24(sp)
    802004be:	e822                	sd	s0,16(sp)
    802004c0:	e426                	sd	s1,8(sp)
    802004c2:	1000                	addi	s0,sp,32
    802004c4:	84aa                	mv	s1,a0
  spi_tx(spictrl, in);
    802004c6:	00000097          	auipc	ra,0x0
    802004ca:	fba080e7          	jalr	-70(ra) # 80200480 <spi_tx>
  while ((out = (int32_t) spictrl->rxdata.raw_bits) < 0);
    802004ce:	44fc                	lw	a5,76(s1)
    802004d0:	0007851b          	sext.w	a0,a5
    802004d4:	02079713          	slli	a4,a5,0x20
    802004d8:	fe074be3          	bltz	a4,802004ce <spi_txrx+0x14>
  return spi_rx(spictrl);
}
    802004dc:	0ff57513          	andi	a0,a0,255
    802004e0:	60e2                	ld	ra,24(sp)
    802004e2:	6442                	ld	s0,16(sp)
    802004e4:	64a2                	ld	s1,8(sp)
    802004e6:	6105                	addi	sp,sp,32
    802004e8:	8082                	ret

00000000802004ea <spi_copy>:

/**
 * Copy data from SPI flash without memory-mapped flash.
 */
int spi_copy(spi_ctrl* spictrl, void* buf, uint32_t addr, uint32_t size)
{
    802004ea:	7179                	addi	sp,sp,-48
    802004ec:	f406                	sd	ra,40(sp)
    802004ee:	f022                	sd	s0,32(sp)
    802004f0:	ec26                	sd	s1,24(sp)
    802004f2:	e84a                	sd	s2,16(sp)
    802004f4:	e44e                	sd	s3,8(sp)
    802004f6:	e052                	sd	s4,0(sp)
    802004f8:	1800                	addi	s0,sp,48
    802004fa:	89aa                	mv	s3,a0
    802004fc:	84ae                	mv	s1,a1
    802004fe:	8a32                	mv	s4,a2
    80200500:	8936                	mv	s2,a3
  uint8_t* buf_bytes = (uint8_t*) buf;
  spictrl->csmode.mode = SPI_CSMODE_HOLD;
    80200502:	4d1c                	lw	a5,24(a0)
    80200504:	9bf1                	andi	a5,a5,-4
    80200506:	0027e793          	ori	a5,a5,2
    8020050a:	cd1c                	sw	a5,24(a0)

  spi_txrx(spictrl, MICRON_SPI_FLASH_CMD_READ);
    8020050c:	458d                	li	a1,3
    8020050e:	00000097          	auipc	ra,0x0
    80200512:	fac080e7          	jalr	-84(ra) # 802004ba <spi_txrx>
  spi_txrx(spictrl, (addr >> 16) & 0xff);
    80200516:	010a559b          	srliw	a1,s4,0x10
    8020051a:	0ff5f593          	andi	a1,a1,255
    8020051e:	854e                	mv	a0,s3
    80200520:	00000097          	auipc	ra,0x0
    80200524:	f9a080e7          	jalr	-102(ra) # 802004ba <spi_txrx>
  spi_txrx(spictrl, (addr >> 8) & 0xff);
    80200528:	008a559b          	srliw	a1,s4,0x8
    8020052c:	0ff5f593          	andi	a1,a1,255
    80200530:	854e                	mv	a0,s3
    80200532:	00000097          	auipc	ra,0x0
    80200536:	f88080e7          	jalr	-120(ra) # 802004ba <spi_txrx>
  spi_txrx(spictrl, addr & 0xff);
    8020053a:	0ffa7593          	andi	a1,s4,255
    8020053e:	854e                	mv	a0,s3
    80200540:	00000097          	auipc	ra,0x0
    80200544:	f7a080e7          	jalr	-134(ra) # 802004ba <spi_txrx>

  for (unsigned int i = 0; i < size; i++) {
    80200548:	02090363          	beqz	s2,8020056e <spi_copy+0x84>
    8020054c:	397d                	addiw	s2,s2,-1
    8020054e:	1902                	slli	s2,s2,0x20
    80200550:	02095913          	srli	s2,s2,0x20
    80200554:	0905                	addi	s2,s2,1
    80200556:	9926                	add	s2,s2,s1
    *buf_bytes = spi_txrx(spictrl, 0);
    80200558:	4581                	li	a1,0
    8020055a:	854e                	mv	a0,s3
    8020055c:	00000097          	auipc	ra,0x0
    80200560:	f5e080e7          	jalr	-162(ra) # 802004ba <spi_txrx>
    80200564:	00a48023          	sb	a0,0(s1)
    buf_bytes++;
    80200568:	0485                	addi	s1,s1,1
  for (unsigned int i = 0; i < size; i++) {
    8020056a:	ff2497e3          	bne	s1,s2,80200558 <spi_copy+0x6e>
  }

  spictrl->csmode.mode = SPI_CSMODE_AUTO;
    8020056e:	0189a783          	lw	a5,24(s3)
    80200572:	9bf1                	andi	a5,a5,-4
    80200574:	00f9ac23          	sw	a5,24(s3)
  return 0;
}
    80200578:	4501                	li	a0,0
    8020057a:	70a2                	ld	ra,40(sp)
    8020057c:	7402                	ld	s0,32(sp)
    8020057e:	64e2                	ld	s1,24(sp)
    80200580:	6942                	ld	s2,16(sp)
    80200582:	69a2                	ld	s3,8(sp)
    80200584:	6a02                	ld	s4,0(sp)
    80200586:	6145                	addi	sp,sp,48
    80200588:	8082                	ret

000000008020058a <crc7>:
  return rc;
}


static uint8_t crc7(uint8_t prev, uint8_t in)
{
    8020058a:	1141                	addi	sp,sp,-16
    8020058c:	e422                	sd	s0,8(sp)
    8020058e:	0800                	addi	s0,sp,16
  // CRC polynomial 0x89
  uint8_t remainder = prev & in;
    80200590:	8de9                	and	a1,a1,a0
  remainder ^= (remainder >> 4) ^ (remainder >> 7);
    80200592:	0045d51b          	srliw	a0,a1,0x4
    80200596:	0075d79b          	srliw	a5,a1,0x7
    8020059a:	8d3d                	xor	a0,a0,a5
    8020059c:	0ff57513          	andi	a0,a0,255
    802005a0:	8d2d                	xor	a0,a0,a1
  remainder ^= remainder << 4;
    802005a2:	0045159b          	slliw	a1,a0,0x4
    802005a6:	8d2d                	xor	a0,a0,a1
  return remainder & 0x7f;
}
    802005a8:	07f57513          	andi	a0,a0,127
    802005ac:	6422                	ld	s0,8(sp)
    802005ae:	0141                	addi	sp,sp,16
    802005b0:	8082                	ret

00000000802005b2 <crc16>:


static uint16_t crc16(uint16_t crc, uint8_t data)
{
    802005b2:	1141                	addi	sp,sp,-16
    802005b4:	e422                	sd	s0,8(sp)
    802005b6:	0800                	addi	s0,sp,16
  // CRC polynomial 0x11021
  crc = (uint8_t)(crc >> 8) | (crc << 8);
    802005b8:	0085579b          	srliw	a5,a0,0x8
    802005bc:	0085151b          	slliw	a0,a0,0x8
    802005c0:	8d5d                	or	a0,a0,a5
    802005c2:	1542                	slli	a0,a0,0x30
    802005c4:	9141                	srli	a0,a0,0x30
  crc ^= data;
    802005c6:	8da9                	xor	a1,a1,a0
  crc ^= (uint8_t)(crc >> 4) & 0xf;
    802005c8:	0045d51b          	srliw	a0,a1,0x4
    802005cc:	893d                	andi	a0,a0,15
    802005ce:	8d2d                	xor	a0,a0,a1
  crc ^= crc << 12;
    802005d0:	00c5159b          	slliw	a1,a0,0xc
    802005d4:	8d2d                	xor	a0,a0,a1
  crc ^= (crc & 0xff) << 5;
    802005d6:	0105179b          	slliw	a5,a0,0x10
    802005da:	0107d79b          	srliw	a5,a5,0x10
    802005de:	0057979b          	slliw	a5,a5,0x5
    802005e2:	6709                	lui	a4,0x2
    802005e4:	1701                	addi	a4,a4,-32
    802005e6:	8ff9                	and	a5,a5,a4
    802005e8:	8d3d                	xor	a0,a0,a5
  return crc;
}
    802005ea:	1542                	slli	a0,a0,0x30
    802005ec:	9141                	srli	a0,a0,0x30
    802005ee:	6422                	ld	s0,8(sp)
    802005f0:	0141                	addi	sp,sp,16
    802005f2:	8082                	ret

00000000802005f4 <sd_cmd>:
{
    802005f4:	7179                	addi	sp,sp,-48
    802005f6:	f406                	sd	ra,40(sp)
    802005f8:	f022                	sd	s0,32(sp)
    802005fa:	ec26                	sd	s1,24(sp)
    802005fc:	e84a                	sd	s2,16(sp)
    802005fe:	e44e                	sd	s3,8(sp)
    80200600:	e052                	sd	s4,0(sp)
    80200602:	1800                	addi	s0,sp,48
    80200604:	892a                	mv	s2,a0
    80200606:	8a2e                	mv	s4,a1
    80200608:	84b2                	mv	s1,a2
    8020060a:	89b6                	mv	s3,a3
  spi->csmode.mode = SPI_CSMODE_HOLD;
    8020060c:	4d1c                	lw	a5,24(a0)
    8020060e:	9bf1                	andi	a5,a5,-4
    80200610:	0027e793          	ori	a5,a5,2
    80200614:	cd1c                	sw	a5,24(a0)
  return spi_txrx(spi, 0xFF);
    80200616:	0ff00593          	li	a1,255
    8020061a:	00000097          	auipc	ra,0x0
    8020061e:	ea0080e7          	jalr	-352(ra) # 802004ba <spi_txrx>
  spi_txrx(spi, cmd);
    80200622:	85d2                	mv	a1,s4
    80200624:	854a                	mv	a0,s2
    80200626:	00000097          	auipc	ra,0x0
    8020062a:	e94080e7          	jalr	-364(ra) # 802004ba <spi_txrx>
  spi_txrx(spi, arg >> 24);
    8020062e:	0184d59b          	srliw	a1,s1,0x18
    80200632:	854a                	mv	a0,s2
    80200634:	00000097          	auipc	ra,0x0
    80200638:	e86080e7          	jalr	-378(ra) # 802004ba <spi_txrx>
  spi_txrx(spi, arg >> 16);
    8020063c:	0104d59b          	srliw	a1,s1,0x10
    80200640:	0ff5f593          	andi	a1,a1,255
    80200644:	854a                	mv	a0,s2
    80200646:	00000097          	auipc	ra,0x0
    8020064a:	e74080e7          	jalr	-396(ra) # 802004ba <spi_txrx>
  spi_txrx(spi, arg >> 8);
    8020064e:	0084d59b          	srliw	a1,s1,0x8
    80200652:	0ff5f593          	andi	a1,a1,255
    80200656:	854a                	mv	a0,s2
    80200658:	00000097          	auipc	ra,0x0
    8020065c:	e62080e7          	jalr	-414(ra) # 802004ba <spi_txrx>
  spi_txrx(spi, arg);
    80200660:	0ff4f593          	andi	a1,s1,255
    80200664:	854a                	mv	a0,s2
    80200666:	00000097          	auipc	ra,0x0
    8020066a:	e54080e7          	jalr	-428(ra) # 802004ba <spi_txrx>
  spi_txrx(spi, crc);
    8020066e:	85ce                	mv	a1,s3
    80200670:	854a                	mv	a0,s2
    80200672:	00000097          	auipc	ra,0x0
    80200676:	e48080e7          	jalr	-440(ra) # 802004ba <spi_txrx>
    8020067a:	3e800493          	li	s1,1000
  return spi_txrx(spi, 0xFF);
    8020067e:	0ff00593          	li	a1,255
    80200682:	854a                	mv	a0,s2
    80200684:	00000097          	auipc	ra,0x0
    80200688:	e36080e7          	jalr	-458(ra) # 802004ba <spi_txrx>
    if (!(r & 0x80)) {
    8020068c:	0185179b          	slliw	a5,a0,0x18
    80200690:	4187d79b          	sraiw	a5,a5,0x18
    80200694:	0007d463          	bgez	a5,8020069c <sd_cmd+0xa8>
  } while (--n > 0);
    80200698:	14fd                	addi	s1,s1,-1
    8020069a:	f0f5                	bnez	s1,8020067e <sd_cmd+0x8a>
}
    8020069c:	2501                	sext.w	a0,a0
    8020069e:	70a2                	ld	ra,40(sp)
    802006a0:	7402                	ld	s0,32(sp)
    802006a2:	64e2                	ld	s1,24(sp)
    802006a4:	6942                	ld	s2,16(sp)
    802006a6:	69a2                	ld	s3,8(sp)
    802006a8:	6a02                	ld	s4,0(sp)
    802006aa:	6145                	addi	sp,sp,48
    802006ac:	8082                	ret

00000000802006ae <sd_init>:
//    }
//    return gpt_invalid_partition_range();
//}

int sd_init(spi_ctrl* spi, unsigned int input_clk_khz, int skip_sd_init_commands)
{
    802006ae:	7179                	addi	sp,sp,-48
    802006b0:	f406                	sd	ra,40(sp)
    802006b2:	f022                	sd	s0,32(sp)
    802006b4:	ec26                	sd	s1,24(sp)
    802006b6:	e84a                	sd	s2,16(sp)
    802006b8:	e44e                	sd	s3,8(sp)
    802006ba:	e052                	sd	s4,0(sp)
    802006bc:	1800                	addi	s0,sp,48
    802006be:	84aa                	mv	s1,a0
    802006c0:	892e                	mv	s2,a1
  // Skip SD initialization commands if already done earlier and only set the
  // clock divider for data transfer.
  if (!skip_sd_init_commands) {
    802006c2:	ce1d                	beqz	a2,80200700 <sd_init+0x52>
  unsigned int quotient = (input_khz + 2 * max_target_khz - 1) / (2 * max_target_khz);
    802006c4:	65a9                	lui	a1,0xa
    802006c6:	c3f5859b          	addiw	a1,a1,-961
    802006ca:	00b9093b          	addw	s2,s2,a1
    802006ce:	0009071b          	sext.w	a4,s2
  if (quotient == 0) {
    802006d2:	67a9                	lui	a5,0xa
    802006d4:	c3f78793          	addi	a5,a5,-961 # 9c3f <_entry-0x801f63c1>
    return 0;
    802006d8:	4581                	li	a1,0
  if (quotient == 0) {
    802006da:	00e7f963          	bgeu	a5,a4,802006ec <sd_init+0x3e>
  unsigned int quotient = (input_khz + 2 * max_target_khz - 1) / (2 * max_target_khz);
    802006de:	65a9                	lui	a1,0xa
    802006e0:	c405859b          	addiw	a1,a1,-960
    802006e4:	02b9593b          	divuw	s2,s2,a1
    return quotient - 1;
    802006e8:	fff9059b          	addiw	a1,s2,-1
    if (sd_acmd41(spi)) return SD_INIT_ERROR_ACMD41;
    if (sd_cmd58(spi)) return SD_INIT_ERROR_CMD58;
    if (sd_cmd16(spi)) return SD_INIT_ERROR_CMD16;
  }
  // Increase clock frequency after initialization for higher performance.
  spi->sckdiv = spi_min_clk_divisor(input_clk_khz, SD_POST_INIT_CLK_KHZ);
    802006ec:	c08c                	sw	a1,0(s1)
  return 0;
    802006ee:	4501                	li	a0,0
}
    802006f0:	70a2                	ld	ra,40(sp)
    802006f2:	7402                	ld	s0,32(sp)
    802006f4:	64e2                	ld	s1,24(sp)
    802006f6:	6942                	ld	s2,16(sp)
    802006f8:	69a2                	ld	s3,8(sp)
    802006fa:	6a02                	ld	s4,0(sp)
    802006fc:	6145                	addi	sp,sp,48
    802006fe:	8082                	ret
  uint64_t start = get_time_us();
    80200700:	0000a097          	auipc	ra,0xa
    80200704:	ad4080e7          	jalr	-1324(ra) # 8020a1d4 <get_time_us>
    80200708:	8a2a                	mv	s4,a0
  while(get_time_us()-start>5000);
    8020070a:	6985                	lui	s3,0x1
    8020070c:	38898993          	addi	s3,s3,904 # 1388 <_entry-0x801fec78>
    80200710:	0000a097          	auipc	ra,0xa
    80200714:	ac4080e7          	jalr	-1340(ra) # 8020a1d4 <get_time_us>
    80200718:	414507b3          	sub	a5,a0,s4
    8020071c:	fef9eae3          	bltu	s3,a5,80200710 <sd_init+0x62>
  }).raw_bits;
    80200720:	000807b7          	lui	a5,0x80
  spi->fmt.raw_bits = ((spi_reg_fmt) {
    80200724:	c0bc                	sw	a5,64(s1)
  spi->csdef |= 0x1;
    80200726:	48dc                	lw	a5,20(s1)
    80200728:	2781                	sext.w	a5,a5
    8020072a:	0017e793          	ori	a5,a5,1
    8020072e:	c8dc                	sw	a5,20(s1)
  spi->csid = 0;
    80200730:	0004a823          	sw	zero,16(s1)
  unsigned int quotient = (input_khz + 2 * max_target_khz - 1) / (2 * max_target_khz);
    80200734:	31f9079b          	addiw	a5,s2,799
    80200738:	0007861b          	sext.w	a2,a5
  if (quotient == 0) {
    8020073c:	31f00693          	li	a3,799
    return 0;
    80200740:	4701                	li	a4,0
  if (quotient == 0) {
    80200742:	00c6f863          	bgeu	a3,a2,80200752 <sd_init+0xa4>
  unsigned int quotient = (input_khz + 2 * max_target_khz - 1) / (2 * max_target_khz);
    80200746:	32000713          	li	a4,800
    8020074a:	02e7d7bb          	divuw	a5,a5,a4
    return quotient - 1;
    8020074e:	fff7871b          	addiw	a4,a5,-1
  spi->sckdiv = spi_min_clk_divisor(input_clk_khz, SD_POWER_ON_FREQ_KHZ);
    80200752:	c098                	sw	a4,0(s1)
  spi->csmode.mode = SPI_CSMODE_OFF;
    80200754:	4c9c                	lw	a5,24(s1)
    80200756:	0037e793          	ori	a5,a5,3
    8020075a:	cc9c                	sw	a5,24(s1)
    8020075c:	49a9                	li	s3,10
  return spi_txrx(spi, 0xFF);
    8020075e:	0ff00593          	li	a1,255
    80200762:	8526                	mv	a0,s1
    80200764:	00000097          	auipc	ra,0x0
    80200768:	d56080e7          	jalr	-682(ra) # 802004ba <spi_txrx>
  for (int i = 10; i > 0; i--) {
    8020076c:	39fd                	addiw	s3,s3,-1
    8020076e:	fe0998e3          	bnez	s3,8020075e <sd_init+0xb0>
  spi->csmode.mode = SPI_CSMODE_AUTO;
    80200772:	4c9c                	lw	a5,24(s1)
    80200774:	9bf1                	andi	a5,a5,-4
    80200776:	cc9c                	sw	a5,24(s1)
  rc = (sd_cmd(spi, SD_CMD(SD_CMD_GO_IDLE_STATE), 0, 0x95) != SD_RESPONSE_IDLE);
    80200778:	09500693          	li	a3,149
    8020077c:	4601                	li	a2,0
    8020077e:	04000593          	li	a1,64
    80200782:	8526                	mv	a0,s1
    80200784:	00000097          	auipc	ra,0x0
    80200788:	e70080e7          	jalr	-400(ra) # 802005f4 <sd_cmd>
    8020078c:	89aa                	mv	s3,a0
  return spi_txrx(spi, 0xFF);
    8020078e:	0ff00593          	li	a1,255
    80200792:	8526                	mv	a0,s1
    80200794:	00000097          	auipc	ra,0x0
    80200798:	d26080e7          	jalr	-730(ra) # 802004ba <spi_txrx>
  spi->csmode.mode = SPI_CSMODE_AUTO;
    8020079c:	4c9c                	lw	a5,24(s1)
    8020079e:	9bf1                	andi	a5,a5,-4
    802007a0:	cc9c                	sw	a5,24(s1)
    if (sd_cmd0(spi)) return SD_INIT_ERROR_CMD0;
    802007a2:	4785                	li	a5,1
    802007a4:	4505                	li	a0,1
    802007a6:	f4f995e3          	bne	s3,a5,802006f0 <sd_init+0x42>
  rc = (sd_cmd(spi, SD_CMD(SD_CMD_SEND_IF_COND), 0x000001AA, 0x87) != SD_RESPONSE_IDLE);
    802007aa:	08700693          	li	a3,135
    802007ae:	1aa00613          	li	a2,426
    802007b2:	04800593          	li	a1,72
    802007b6:	8526                	mv	a0,s1
    802007b8:	00000097          	auipc	ra,0x0
    802007bc:	e3c080e7          	jalr	-452(ra) # 802005f4 <sd_cmd>
    802007c0:	89aa                	mv	s3,a0
  return spi_txrx(spi, 0xFF);
    802007c2:	0ff00593          	li	a1,255
    802007c6:	8526                	mv	a0,s1
    802007c8:	00000097          	auipc	ra,0x0
    802007cc:	cf2080e7          	jalr	-782(ra) # 802004ba <spi_txrx>
    802007d0:	0ff00593          	li	a1,255
    802007d4:	8526                	mv	a0,s1
    802007d6:	00000097          	auipc	ra,0x0
    802007da:	ce4080e7          	jalr	-796(ra) # 802004ba <spi_txrx>
    802007de:	0ff00593          	li	a1,255
    802007e2:	8526                	mv	a0,s1
    802007e4:	00000097          	auipc	ra,0x0
    802007e8:	cd6080e7          	jalr	-810(ra) # 802004ba <spi_txrx>
    802007ec:	8a2a                	mv	s4,a0
    802007ee:	0ff00593          	li	a1,255
    802007f2:	8526                	mv	a0,s1
    802007f4:	00000097          	auipc	ra,0x0
    802007f8:	cc6080e7          	jalr	-826(ra) # 802004ba <spi_txrx>
  rc = (sd_cmd(spi, SD_CMD(SD_CMD_SEND_IF_COND), 0x000001AA, 0x87) != SD_RESPONSE_IDLE);
    802007fc:	19fd                	addi	s3,s3,-1
    802007fe:	013039b3          	snez	s3,s3
  rc |= (sd_dummy(spi) != 0xAA); /* check pattern */
    80200802:	0005079b          	sext.w	a5,a0
    80200806:	f5678793          	addi	a5,a5,-170 # 7ff56 <_entry-0x801800aa>
    8020080a:	00f037b3          	snez	a5,a5
    8020080e:	00f9e9b3          	or	s3,s3,a5
  rc |= ((sd_dummy(spi) & 0xF) != 0x1); /* voltage */
    80200812:	00fa7a13          	andi	s4,s4,15
    80200816:	1a7d                	addi	s4,s4,-1
    80200818:	01403a33          	snez	s4,s4
    8020081c:	0149e9b3          	or	s3,s3,s4
    80200820:	0ff9f993          	andi	s3,s3,255
  return spi_txrx(spi, 0xFF);
    80200824:	0ff00593          	li	a1,255
    80200828:	8526                	mv	a0,s1
    8020082a:	00000097          	auipc	ra,0x0
    8020082e:	c90080e7          	jalr	-880(ra) # 802004ba <spi_txrx>
  spi->csmode.mode = SPI_CSMODE_AUTO;
    80200832:	4c9c                	lw	a5,24(s1)
    80200834:	9bf1                	andi	a5,a5,-4
    80200836:	cc9c                	sw	a5,24(s1)
    if (sd_cmd8(spi)) return SD_INIT_ERROR_CMD8;
    80200838:	4509                	li	a0,2
    8020083a:	ea099be3          	bnez	s3,802006f0 <sd_init+0x42>
  } while (r == SD_RESPONSE_IDLE);
    8020083e:	4a05                	li	s4,1
  sd_cmd(spi, SD_CMD(SD_CMD_APP_CMD), 0, 0x65);
    80200840:	06500693          	li	a3,101
    80200844:	4601                	li	a2,0
    80200846:	07700593          	li	a1,119
    8020084a:	8526                	mv	a0,s1
    8020084c:	00000097          	auipc	ra,0x0
    80200850:	da8080e7          	jalr	-600(ra) # 802005f4 <sd_cmd>
  return spi_txrx(spi, 0xFF);
    80200854:	0ff00593          	li	a1,255
    80200858:	8526                	mv	a0,s1
    8020085a:	00000097          	auipc	ra,0x0
    8020085e:	c60080e7          	jalr	-928(ra) # 802004ba <spi_txrx>
  spi->csmode.mode = SPI_CSMODE_AUTO;
    80200862:	4c9c                	lw	a5,24(s1)
    80200864:	9bf1                	andi	a5,a5,-4
    80200866:	cc9c                	sw	a5,24(s1)
    r = sd_cmd(spi, SD_CMD(SD_CMD_APP_SEND_OP_COND), 0x40000000, 0x77); /* HCS = 1 */
    80200868:	07700693          	li	a3,119
    8020086c:	40000637          	lui	a2,0x40000
    80200870:	06900593          	li	a1,105
    80200874:	8526                	mv	a0,s1
    80200876:	00000097          	auipc	ra,0x0
    8020087a:	d7e080e7          	jalr	-642(ra) # 802005f4 <sd_cmd>
    8020087e:	0ff57993          	andi	s3,a0,255
  return spi_txrx(spi, 0xFF);
    80200882:	0ff00593          	li	a1,255
    80200886:	8526                	mv	a0,s1
    80200888:	00000097          	auipc	ra,0x0
    8020088c:	c32080e7          	jalr	-974(ra) # 802004ba <spi_txrx>
  spi->csmode.mode = SPI_CSMODE_AUTO;
    80200890:	4c9c                	lw	a5,24(s1)
    80200892:	9bf1                	andi	a5,a5,-4
    80200894:	cc9c                	sw	a5,24(s1)
  } while (r == SD_RESPONSE_IDLE);
    80200896:	fb4985e3          	beq	s3,s4,80200840 <sd_init+0x192>
    if (sd_acmd41(spi)) return SD_INIT_ERROR_ACMD41;
    8020089a:	450d                	li	a0,3
    8020089c:	e4099ae3          	bnez	s3,802006f0 <sd_init+0x42>
  rc = (sd_cmd(spi, SD_CMD(SD_CMD_SET_BLOCKLEN), 0x200, 0x15) != 0x00);
    802008a0:	46d5                	li	a3,21
    802008a2:	20000613          	li	a2,512
    802008a6:	05000593          	li	a1,80
    802008aa:	8526                	mv	a0,s1
    802008ac:	00000097          	auipc	ra,0x0
    802008b0:	d48080e7          	jalr	-696(ra) # 802005f4 <sd_cmd>
    802008b4:	89aa                	mv	s3,a0
  return spi_txrx(spi, 0xFF);
    802008b6:	0ff00593          	li	a1,255
    802008ba:	8526                	mv	a0,s1
    802008bc:	00000097          	auipc	ra,0x0
    802008c0:	bfe080e7          	jalr	-1026(ra) # 802004ba <spi_txrx>
  spi->csmode.mode = SPI_CSMODE_AUTO;
    802008c4:	4c9c                	lw	a5,24(s1)
    802008c6:	9bf1                	andi	a5,a5,-4
    802008c8:	cc9c                	sw	a5,24(s1)
    if (sd_cmd16(spi)) return SD_INIT_ERROR_CMD16;
    802008ca:	4515                	li	a0,5
    802008cc:	de098ce3          	beqz	s3,802006c4 <sd_init+0x16>
    802008d0:	b505                	j	802006f0 <sd_init+0x42>

00000000802008d2 <sd_read_blocks>:


int sd_read_blocks(spi_ctrl* spi, void* dst, uint32_t src_lba, size_t size)
{
    802008d2:	715d                	addi	sp,sp,-80
    802008d4:	e486                	sd	ra,72(sp)
    802008d6:	e0a2                	sd	s0,64(sp)
    802008d8:	fc26                	sd	s1,56(sp)
    802008da:	f84a                	sd	s2,48(sp)
    802008dc:	f44e                	sd	s3,40(sp)
    802008de:	f052                	sd	s4,32(sp)
    802008e0:	ec56                	sd	s5,24(sp)
    802008e2:	e85a                	sd	s6,16(sp)
    802008e4:	e45e                	sd	s7,8(sp)
    802008e6:	e062                	sd	s8,0(sp)
    802008e8:	0880                	addi	s0,sp,80
    802008ea:	892a                	mv	s2,a0
    802008ec:	89ae                	mv	s3,a1
    802008ee:	84b2                	mv	s1,a2
    802008f0:	8ab6                	mv	s5,a3
  volatile uint8_t *p = dst;
  long i = size;
  int rc = 0;

  uint8_t crc = 0;
  crc = crc7(crc, SD_CMD(SD_CMD_READ_BLOCK_MULTIPLE));
    802008f2:	05200593          	li	a1,82
    802008f6:	4501                	li	a0,0
    802008f8:	00000097          	auipc	ra,0x0
    802008fc:	c92080e7          	jalr	-878(ra) # 8020058a <crc7>
  crc = crc7(crc, src_lba >> 24);
    80200900:	0184d59b          	srliw	a1,s1,0x18
    80200904:	00000097          	auipc	ra,0x0
    80200908:	c86080e7          	jalr	-890(ra) # 8020058a <crc7>
  crc = crc7(crc, (src_lba >> 16) & 0xff);
    8020090c:	0104d59b          	srliw	a1,s1,0x10
    80200910:	0ff5f593          	andi	a1,a1,255
    80200914:	00000097          	auipc	ra,0x0
    80200918:	c76080e7          	jalr	-906(ra) # 8020058a <crc7>
  crc = crc7(crc, (src_lba >> 8) & 0xff);
    8020091c:	0084d59b          	srliw	a1,s1,0x8
    80200920:	0ff5f593          	andi	a1,a1,255
    80200924:	00000097          	auipc	ra,0x0
    80200928:	c66080e7          	jalr	-922(ra) # 8020058a <crc7>
  crc = crc7(crc, src_lba & 0xff);
    8020092c:	0ff4f593          	andi	a1,s1,255
    80200930:	00000097          	auipc	ra,0x0
    80200934:	c5a080e7          	jalr	-934(ra) # 8020058a <crc7>
  crc = (crc << 1) | 1;
    80200938:	0015169b          	slliw	a3,a0,0x1
    8020093c:	0016e693          	ori	a3,a3,1
  if (sd_cmd(spi, SD_CMD(SD_CMD_READ_BLOCK_MULTIPLE), src_lba, crc) != 0x00) {
    80200940:	0ff6f693          	andi	a3,a3,255
    80200944:	8626                	mv	a2,s1
    80200946:	05200593          	li	a1,82
    8020094a:	854a                	mv	a0,s2
    8020094c:	00000097          	auipc	ra,0x0
    80200950:	ca8080e7          	jalr	-856(ra) # 802005f4 <sd_cmd>
    80200954:	8baa                	mv	s7,a0
    80200956:	20098993          	addi	s3,s3,512
    uint16_t crc, crc_exp;
    long n;

    crc = 0;
    n = 512;
    while (sd_dummy(spi) != SD_DATA_TOKEN);
    8020095a:	0fe00a13          	li	s4,254
    crc = 0;
    8020095e:	4b01                	li	s6,0
  if (sd_cmd(spi, SD_CMD(SD_CMD_READ_BLOCK_MULTIPLE), src_lba, crc) != 0x00) {
    80200960:	e149                	bnez	a0,802009e2 <sd_read_blocks+0x110>
    80200962:	e0098c13          	addi	s8,s3,-512
  return spi_txrx(spi, 0xFF);
    80200966:	0ff00593          	li	a1,255
    8020096a:	854a                	mv	a0,s2
    8020096c:	00000097          	auipc	ra,0x0
    80200970:	b4e080e7          	jalr	-1202(ra) # 802004ba <spi_txrx>
    while (sd_dummy(spi) != SD_DATA_TOKEN);
    80200974:	ff4519e3          	bne	a0,s4,80200966 <sd_read_blocks+0x94>
    crc = 0;
    80200978:	84da                	mv	s1,s6
  return spi_txrx(spi, 0xFF);
    8020097a:	0ff00593          	li	a1,255
    8020097e:	854a                	mv	a0,s2
    80200980:	00000097          	auipc	ra,0x0
    80200984:	b3a080e7          	jalr	-1222(ra) # 802004ba <spi_txrx>
    80200988:	85aa                	mv	a1,a0
    do {
      uint8_t x = sd_dummy(spi);
      *p++ = x;
    8020098a:	87e2                	mv	a5,s8
    8020098c:	0c05                	addi	s8,s8,1
    8020098e:	00a78023          	sb	a0,0(a5)
      crc = crc16(crc, x);
    80200992:	8526                	mv	a0,s1
    80200994:	00000097          	auipc	ra,0x0
    80200998:	c1e080e7          	jalr	-994(ra) # 802005b2 <crc16>
    8020099c:	84aa                	mv	s1,a0
    } while (--n > 0);
    8020099e:	fd3c1ee3          	bne	s8,s3,8020097a <sd_read_blocks+0xa8>
  return spi_txrx(spi, 0xFF);
    802009a2:	0ff00593          	li	a1,255
    802009a6:	854a                	mv	a0,s2
    802009a8:	00000097          	auipc	ra,0x0
    802009ac:	b12080e7          	jalr	-1262(ra) # 802004ba <spi_txrx>

    crc_exp = ((uint16_t)sd_dummy(spi) << 8);
    802009b0:	00851c1b          	slliw	s8,a0,0x8
    802009b4:	1c42                	slli	s8,s8,0x30
    802009b6:	030c5c13          	srli	s8,s8,0x30
  return spi_txrx(spi, 0xFF);
    802009ba:	0ff00593          	li	a1,255
    802009be:	854a                	mv	a0,s2
    802009c0:	00000097          	auipc	ra,0x0
    802009c4:	afa080e7          	jalr	-1286(ra) # 802004ba <spi_txrx>
    crc_exp |= sd_dummy(spi);
    802009c8:	00ac67b3          	or	a5,s8,a0

    if (crc != crc_exp) {
    802009cc:	2481                	sext.w	s1,s1
    802009ce:	17c2                	slli	a5,a5,0x30
    802009d0:	93c1                	srli	a5,a5,0x30
    802009d2:	02f49663          	bne	s1,a5,802009fe <sd_read_blocks+0x12c>
      break;
    }
//    if ((i % 2000) == 0){
//      puts(".");
//    }
  } while (--i > 0);
    802009d6:	1afd                	addi	s5,s5,-1
    802009d8:	20098993          	addi	s3,s3,512
    802009dc:	f95043e3          	bgtz	s5,80200962 <sd_read_blocks+0x90>
    802009e0:	a005                	j	80200a00 <sd_read_blocks+0x12e>
  return spi_txrx(spi, 0xFF);
    802009e2:	0ff00593          	li	a1,255
    802009e6:	854a                	mv	a0,s2
    802009e8:	00000097          	auipc	ra,0x0
    802009ec:	ad2080e7          	jalr	-1326(ra) # 802004ba <spi_txrx>
  spi->csmode.mode = SPI_CSMODE_AUTO;
    802009f0:	01892783          	lw	a5,24(s2)
    802009f4:	9bf1                	andi	a5,a5,-4
    802009f6:	00f92c23          	sw	a5,24(s2)
    return SD_COPY_ERROR_CMD18;
    802009fa:	4b85                	li	s7,1
    802009fc:	a03d                	j	80200a2a <sd_read_blocks+0x158>
      rc = SD_COPY_ERROR_CMD18_CRC;
    802009fe:	4b89                	li	s7,2

  sd_cmd(spi, SD_CMD(SD_CMD_STOP_TRANSMISSION), 0, 0x01);
    80200a00:	4685                	li	a3,1
    80200a02:	4601                	li	a2,0
    80200a04:	04c00593          	li	a1,76
    80200a08:	854a                	mv	a0,s2
    80200a0a:	00000097          	auipc	ra,0x0
    80200a0e:	bea080e7          	jalr	-1046(ra) # 802005f4 <sd_cmd>
  return spi_txrx(spi, 0xFF);
    80200a12:	0ff00593          	li	a1,255
    80200a16:	854a                	mv	a0,s2
    80200a18:	00000097          	auipc	ra,0x0
    80200a1c:	aa2080e7          	jalr	-1374(ra) # 802004ba <spi_txrx>
  spi->csmode.mode = SPI_CSMODE_AUTO;
    80200a20:	01892783          	lw	a5,24(s2)
    80200a24:	9bf1                	andi	a5,a5,-4
    80200a26:	00f92c23          	sw	a5,24(s2)
  sd_cmd_end(spi);
  return rc;
}
    80200a2a:	855e                	mv	a0,s7
    80200a2c:	60a6                	ld	ra,72(sp)
    80200a2e:	6406                	ld	s0,64(sp)
    80200a30:	74e2                	ld	s1,56(sp)
    80200a32:	7942                	ld	s2,48(sp)
    80200a34:	79a2                	ld	s3,40(sp)
    80200a36:	7a02                	ld	s4,32(sp)
    80200a38:	6ae2                	ld	s5,24(sp)
    80200a3a:	6b42                	ld	s6,16(sp)
    80200a3c:	6ba2                	ld	s7,8(sp)
    80200a3e:	6c02                	ld	s8,0(sp)
    80200a40:	6161                	addi	sp,sp,80
    80200a42:	8082                	ret

0000000080200a44 <sd_write_blocks>:


int sd_write_blocks(spi_ctrl* spi, void* src, uint32_t dst_lba, size_t size)
{
    80200a44:	711d                	addi	sp,sp,-96
    80200a46:	ec86                	sd	ra,88(sp)
    80200a48:	e8a2                	sd	s0,80(sp)
    80200a4a:	e4a6                	sd	s1,72(sp)
    80200a4c:	e0ca                	sd	s2,64(sp)
    80200a4e:	fc4e                	sd	s3,56(sp)
    80200a50:	f852                	sd	s4,48(sp)
    80200a52:	f456                	sd	s5,40(sp)
    80200a54:	f05a                	sd	s6,32(sp)
    80200a56:	ec5e                	sd	s7,24(sp)
    80200a58:	e862                	sd	s8,16(sp)
    80200a5a:	e466                	sd	s9,8(sp)
    80200a5c:	1080                	addi	s0,sp,96
    80200a5e:	8a2a                	mv	s4,a0
    80200a60:	8aae                	mv	s5,a1
    80200a62:	84b2                	mv	s1,a2
    80200a64:	8b36                	mv	s6,a3
    volatile uint8_t *p = src;
    long i = size;
    int rc = 0;

    uint8_t crc = 0;
    crc = crc7(crc, SD_CMD(SD_CMD_WRITE_BLOCK_MULTIPLE));
    80200a66:	05900593          	li	a1,89
    80200a6a:	4501                	li	a0,0
    80200a6c:	00000097          	auipc	ra,0x0
    80200a70:	b1e080e7          	jalr	-1250(ra) # 8020058a <crc7>
    crc = crc7(crc, dst_lba >> 24);
    80200a74:	0184d59b          	srliw	a1,s1,0x18
    80200a78:	00000097          	auipc	ra,0x0
    80200a7c:	b12080e7          	jalr	-1262(ra) # 8020058a <crc7>
    crc = crc7(crc, (dst_lba >> 16) & 0xff);
    80200a80:	0104d59b          	srliw	a1,s1,0x10
    80200a84:	0ff5f593          	andi	a1,a1,255
    80200a88:	00000097          	auipc	ra,0x0
    80200a8c:	b02080e7          	jalr	-1278(ra) # 8020058a <crc7>
    crc = crc7(crc, (dst_lba >> 8) & 0xff);
    80200a90:	0084d59b          	srliw	a1,s1,0x8
    80200a94:	0ff5f593          	andi	a1,a1,255
    80200a98:	00000097          	auipc	ra,0x0
    80200a9c:	af2080e7          	jalr	-1294(ra) # 8020058a <crc7>
    crc = crc7(crc, dst_lba & 0xff);
    80200aa0:	0ff4f593          	andi	a1,s1,255
    80200aa4:	00000097          	auipc	ra,0x0
    80200aa8:	ae6080e7          	jalr	-1306(ra) # 8020058a <crc7>
    crc = (crc << 1) | 1;
    80200aac:	0015169b          	slliw	a3,a0,0x1
    80200ab0:	0016e693          	ori	a3,a3,1
    if (sd_cmd(spi, SD_CMD(SD_CMD_WRITE_BLOCK_MULTIPLE), dst_lba, crc) != 0x00) {
    80200ab4:	0ff6f693          	andi	a3,a3,255
    80200ab8:	8626                	mv	a2,s1
    80200aba:	05900593          	li	a1,89
    80200abe:	8552                	mv	a0,s4
    80200ac0:	00000097          	auipc	ra,0x0
    80200ac4:	b34080e7          	jalr	-1228(ra) # 802005f4 <sd_cmd>
    80200ac8:	ed45                	bnez	a0,80200b80 <sd_write_blocks+0x13c>
    80200aca:	8caa                	mv	s9,a0
  return spi_txrx(spi, 0xFF);
    80200acc:	0ff00593          	li	a1,255
    80200ad0:	8552                	mv	a0,s4
    80200ad2:	00000097          	auipc	ra,0x0
    80200ad6:	9e8080e7          	jalr	-1560(ra) # 802004ba <spi_txrx>
    80200ada:	0ff00593          	li	a1,255
    80200ade:	8552                	mv	a0,s4
    80200ae0:	00000097          	auipc	ra,0x0
    80200ae4:	9da080e7          	jalr	-1574(ra) # 802004ba <spi_txrx>
    80200ae8:	200a8a93          	addi	s5,s5,512

    do {
        uint16_t crc;
        long n;

        crc = 0;
    80200aec:	4c01                	li	s8,0
        } while (--n);

        sd_txrx(spi, crc >> 8);
        sd_txrx(spi, crc & 0xff);

        if ((sd_dummy(spi) & SD_DATA_RESPONSE_MASK) != SD_DATA_RESPONSE_ACCEPTED) {
    80200aee:	4b95                	li	s7,5
    80200af0:	e00a8993          	addi	s3,s5,-512
  return spi_txrx(spi, data);
    80200af4:	0fc00593          	li	a1,252
    80200af8:	8552                	mv	a0,s4
    80200afa:	00000097          	auipc	ra,0x0
    80200afe:	9c0080e7          	jalr	-1600(ra) # 802004ba <spi_txrx>
        crc = 0;
    80200b02:	8962                	mv	s2,s8
            uint8_t x = *p++;
    80200b04:	87ce                	mv	a5,s3
    80200b06:	0985                	addi	s3,s3,1
    80200b08:	0007c483          	lbu	s1,0(a5)
    80200b0c:	0ff4f493          	andi	s1,s1,255
  return spi_txrx(spi, data);
    80200b10:	85a6                	mv	a1,s1
    80200b12:	8552                	mv	a0,s4
    80200b14:	00000097          	auipc	ra,0x0
    80200b18:	9a6080e7          	jalr	-1626(ra) # 802004ba <spi_txrx>
            crc = crc16(crc, x);
    80200b1c:	85a6                	mv	a1,s1
    80200b1e:	854a                	mv	a0,s2
    80200b20:	00000097          	auipc	ra,0x0
    80200b24:	a92080e7          	jalr	-1390(ra) # 802005b2 <crc16>
    80200b28:	892a                	mv	s2,a0
        } while (--n);
    80200b2a:	fd599de3          	bne	s3,s5,80200b04 <sd_write_blocks+0xc0>
        sd_txrx(spi, crc >> 8);
    80200b2e:	0085559b          	srliw	a1,a0,0x8
  return spi_txrx(spi, data);
    80200b32:	0ff5f593          	andi	a1,a1,255
    80200b36:	8552                	mv	a0,s4
    80200b38:	00000097          	auipc	ra,0x0
    80200b3c:	982080e7          	jalr	-1662(ra) # 802004ba <spi_txrx>
    80200b40:	0ff97593          	andi	a1,s2,255
    80200b44:	8552                	mv	a0,s4
    80200b46:	00000097          	auipc	ra,0x0
    80200b4a:	974080e7          	jalr	-1676(ra) # 802004ba <spi_txrx>
  return spi_txrx(spi, 0xFF);
    80200b4e:	0ff00593          	li	a1,255
    80200b52:	8552                	mv	a0,s4
    80200b54:	00000097          	auipc	ra,0x0
    80200b58:	966080e7          	jalr	-1690(ra) # 802004ba <spi_txrx>
        if ((sd_dummy(spi) & SD_DATA_RESPONSE_MASK) != SD_DATA_RESPONSE_ACCEPTED) {
    80200b5c:	01f57793          	andi	a5,a0,31
    80200b60:	03779e63          	bne	a5,s7,80200b9c <sd_write_blocks+0x158>
  return spi_txrx(spi, 0xFF);
    80200b64:	0ff00593          	li	a1,255
    80200b68:	8552                	mv	a0,s4
    80200b6a:	00000097          	auipc	ra,0x0
    80200b6e:	950080e7          	jalr	-1712(ra) # 802004ba <spi_txrx>
            rc = SD_COPY_ERROR_CMD25_CRC;
            break;
        }

        while(sd_dummy(spi) == SD_RESPONSE_BUSY);
    80200b72:	d96d                	beqz	a0,80200b64 <sd_write_blocks+0x120>

    } while (--i);
    80200b74:	1b7d                	addi	s6,s6,-1
    80200b76:	200a8a93          	addi	s5,s5,512
    80200b7a:	f60b1be3          	bnez	s6,80200af0 <sd_write_blocks+0xac>
    80200b7e:	a005                	j	80200b9e <sd_write_blocks+0x15a>
  return spi_txrx(spi, 0xFF);
    80200b80:	0ff00593          	li	a1,255
    80200b84:	8552                	mv	a0,s4
    80200b86:	00000097          	auipc	ra,0x0
    80200b8a:	934080e7          	jalr	-1740(ra) # 802004ba <spi_txrx>
  spi->csmode.mode = SPI_CSMODE_AUTO;
    80200b8e:	018a2783          	lw	a5,24(s4)
    80200b92:	9bf1                	andi	a5,a5,-4
    80200b94:	00fa2c23          	sw	a5,24(s4)
        return SD_COPY_ERROR_CMD25;
    80200b98:	4c85                	li	s9,1
    80200b9a:	a899                	j	80200bf0 <sd_write_blocks+0x1ac>
            rc = SD_COPY_ERROR_CMD25_CRC;
    80200b9c:	4c89                	li	s9,2
  return spi_txrx(spi, data);
    80200b9e:	0fd00593          	li	a1,253
    80200ba2:	8552                	mv	a0,s4
    80200ba4:	00000097          	auipc	ra,0x0
    80200ba8:	916080e7          	jalr	-1770(ra) # 802004ba <spi_txrx>
  return spi_txrx(spi, 0xFF);
    80200bac:	0ff00593          	li	a1,255
    80200bb0:	8552                	mv	a0,s4
    80200bb2:	00000097          	auipc	ra,0x0
    80200bb6:	908080e7          	jalr	-1784(ra) # 802004ba <spi_txrx>
    80200bba:	0ff00593          	li	a1,255
    80200bbe:	8552                	mv	a0,s4
    80200bc0:	00000097          	auipc	ra,0x0
    80200bc4:	8fa080e7          	jalr	-1798(ra) # 802004ba <spi_txrx>
    80200bc8:	0ff00593          	li	a1,255
    80200bcc:	8552                	mv	a0,s4
    80200bce:	00000097          	auipc	ra,0x0
    80200bd2:	8ec080e7          	jalr	-1812(ra) # 802004ba <spi_txrx>

    // magic!
    sd_dummy(spi);
    sd_dummy(spi);

    while(sd_dummy(spi) == SD_RESPONSE_BUSY);
    80200bd6:	d96d                	beqz	a0,80200bc8 <sd_write_blocks+0x184>
  return spi_txrx(spi, 0xFF);
    80200bd8:	0ff00593          	li	a1,255
    80200bdc:	8552                	mv	a0,s4
    80200bde:	00000097          	auipc	ra,0x0
    80200be2:	8dc080e7          	jalr	-1828(ra) # 802004ba <spi_txrx>
  spi->csmode.mode = SPI_CSMODE_AUTO;
    80200be6:	018a2783          	lw	a5,24(s4)
    80200bea:	9bf1                	andi	a5,a5,-4
    80200bec:	00fa2c23          	sw	a5,24(s4)
    sd_cmd_end(spi);
    return rc;
}
    80200bf0:	8566                	mv	a0,s9
    80200bf2:	60e6                	ld	ra,88(sp)
    80200bf4:	6446                	ld	s0,80(sp)
    80200bf6:	64a6                	ld	s1,72(sp)
    80200bf8:	6906                	ld	s2,64(sp)
    80200bfa:	79e2                	ld	s3,56(sp)
    80200bfc:	7a42                	ld	s4,48(sp)
    80200bfe:	7aa2                	ld	s5,40(sp)
    80200c00:	7b02                	ld	s6,32(sp)
    80200c02:	6be2                	ld	s7,24(sp)
    80200c04:	6c42                	ld	s8,16(sp)
    80200c06:	6ca2                	ld	s9,8(sp)
    80200c08:	6125                	addi	sp,sp,96
    80200c0a:	8082                	ret

0000000080200c0c <disk_status>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
    80200c0c:	1141                	addi	sp,sp,-16
    80200c0e:	e422                	sd	s0,8(sp)
    80200c10:	0800                	addi	s0,sp,16
	return pdrv == DEV_MMC ? RES_OK : RES_PARERR;
    80200c12:	e501                	bnez	a0,80200c1a <disk_status+0xe>
}
    80200c14:	6422                	ld	s0,8(sp)
    80200c16:	0141                	addi	sp,sp,16
    80200c18:	8082                	ret
	return pdrv == DEV_MMC ? RES_OK : RES_PARERR;
    80200c1a:	4511                	li	a0,4
    80200c1c:	bfe5                	j	80200c14 <disk_status+0x8>

0000000080200c1e <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
	int result;

	if (pdrv != DEV_MMC){
    80200c1e:	e121                	bnez	a0,80200c5e <disk_initialize+0x40>
{
    80200c20:	1141                	addi	sp,sp,-16
    80200c22:	e406                	sd	ra,8(sp)
    80200c24:	e022                	sd	s0,0(sp)
    80200c26:	0800                	addi	s0,sp,16
        return RES_PARERR;
    }
    printf("diskinit\n");
    80200c28:	00011517          	auipc	a0,0x11
    80200c2c:	44850513          	addi	a0,a0,1096 # 80212070 <rodata_start+0x70>
    80200c30:	00008097          	auipc	ra,0x8
    80200c34:	b00080e7          	jalr	-1280(ra) # 80208730 <printf>
    result = sd_init(spictrl, peripheral_input_khz, 0);
    80200c38:	4601                	li	a2,0
    80200c3a:	0007a5b7          	lui	a1,0x7a
    80200c3e:	12058593          	addi	a1,a1,288 # 7a120 <_entry-0x80185ee0>
    80200c42:	003f1537          	lui	a0,0x3f1
    80200c46:	0515                	addi	a0,a0,5
    80200c48:	0542                	slli	a0,a0,0x10
    80200c4a:	00000097          	auipc	ra,0x0
    80200c4e:	a64080e7          	jalr	-1436(ra) # 802006ae <sd_init>
    return result == 0 ? RES_OK : RES_ERROR;
    80200c52:	00a03533          	snez	a0,a0
}
    80200c56:	60a2                	ld	ra,8(sp)
    80200c58:	6402                	ld	s0,0(sp)
    80200c5a:	0141                	addi	sp,sp,16
    80200c5c:	8082                	ret
        return RES_PARERR;
    80200c5e:	4511                	li	a0,4
}
    80200c60:	8082                	ret

0000000080200c62 <disk_read>:
	UINT count		/* Number of sectors to read */
)
{
	int result;

    if (pdrv != DEV_MMC){
    80200c62:	e515                	bnez	a0,80200c8e <disk_read+0x2c>
{
    80200c64:	1141                	addi	sp,sp,-16
    80200c66:	e406                	sd	ra,8(sp)
    80200c68:	e022                	sd	s0,0(sp)
    80200c6a:	0800                	addi	s0,sp,16
        return RES_PARERR;
    }

//    KERNEL_ASSERT(sector <= (uint64_t) UINT32_MAX, "sector must be 32 bits");
//    printf("read sector = %d begin, count = %d\n", sector, count);
    result = sd_read_blocks(spictrl, buff, sector, count);
    80200c6c:	1682                	slli	a3,a3,0x20
    80200c6e:	9281                	srli	a3,a3,0x20
    80200c70:	2601                	sext.w	a2,a2
    80200c72:	003f1537          	lui	a0,0x3f1
    80200c76:	0515                	addi	a0,a0,5
    80200c78:	0542                	slli	a0,a0,0x10
    80200c7a:	00000097          	auipc	ra,0x0
    80200c7e:	c58080e7          	jalr	-936(ra) # 802008d2 <sd_read_blocks>
//    printf("read sector end, result = %d\n", result);

    return result == 0 ? RES_OK : RES_ERROR;
    80200c82:	00a03533          	snez	a0,a0
}
    80200c86:	60a2                	ld	ra,8(sp)
    80200c88:	6402                	ld	s0,0(sp)
    80200c8a:	0141                	addi	sp,sp,16
    80200c8c:	8082                	ret
        return RES_PARERR;
    80200c8e:	4511                	li	a0,4
}
    80200c90:	8082                	ret

0000000080200c92 <disk_write>:
	UINT count			/* Number of sectors to write */
)
{
	int result;

    if (pdrv != DEV_MMC){
    80200c92:	e515                	bnez	a0,80200cbe <disk_write+0x2c>
{
    80200c94:	1141                	addi	sp,sp,-16
    80200c96:	e406                	sd	ra,8(sp)
    80200c98:	e022                	sd	s0,0(sp)
    80200c9a:	0800                	addi	s0,sp,16
        return RES_PARERR;
    }

//    KERNEL_ASSERT(sector <= (uint64_t) UINT32_MAX, "sector must be 32 bits");
//    printf("write sector = %d begin, count = %d\n", sector, count);
    result = sd_write_blocks(spictrl, (void*)buff, sector, count);
    80200c9c:	1682                	slli	a3,a3,0x20
    80200c9e:	9281                	srli	a3,a3,0x20
    80200ca0:	2601                	sext.w	a2,a2
    80200ca2:	003f1537          	lui	a0,0x3f1
    80200ca6:	0515                	addi	a0,a0,5
    80200ca8:	0542                	slli	a0,a0,0x10
    80200caa:	00000097          	auipc	ra,0x0
    80200cae:	d9a080e7          	jalr	-614(ra) # 80200a44 <sd_write_blocks>
//    printf("write sector end, result = %d\n", result);
    return result == 0 ? RES_OK : RES_ERROR;
    80200cb2:	00a03533          	snez	a0,a0
}
    80200cb6:	60a2                	ld	ra,8(sp)
    80200cb8:	6402                	ld	s0,0(sp)
    80200cba:	0141                	addi	sp,sp,16
    80200cbc:	8082                	ret
        return RES_PARERR;
    80200cbe:	4511                	li	a0,4
}
    80200cc0:	8082                	ret

0000000080200cc2 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
    80200cc2:	1141                	addi	sp,sp,-16
    80200cc4:	e422                	sd	s0,8(sp)
    80200cc6:	0800                	addi	s0,sp,16
    DRESULT res;

    if (pdrv != DEV_MMC){
    80200cc8:	e91d                	bnez	a0,80200cfe <disk_ioctl+0x3c>
        return RES_PARERR;
    }

    switch (cmd) {
    80200cca:	4789                	li	a5,2
    80200ccc:	02f58363          	beq	a1,a5,80200cf2 <disk_ioctl+0x30>
    80200cd0:	00b7e863          	bltu	a5,a1,80200ce0 <disk_ioctl+0x1e>
    80200cd4:	c595                	beqz	a1,80200d00 <disk_ioctl+0x3e>
    case CTRL_SYNC:
        res = RES_OK;
        break;
    case GET_SECTOR_COUNT:
        *(DWORD*)buff = 13631488;
    80200cd6:	00d007b7          	lui	a5,0xd00
    80200cda:	c21c                	sw	a5,0(a2)
        res = RES_OK;
    80200cdc:	4501                	li	a0,0
        break;
    80200cde:	a00d                	j	80200d00 <disk_ioctl+0x3e>
    switch (cmd) {
    80200ce0:	478d                	li	a5,3
    80200ce2:	4511                	li	a0,4
    80200ce4:	00f59e63          	bne	a1,a5,80200d00 <disk_ioctl+0x3e>
    case GET_SECTOR_SIZE:
        *(WORD*)buff = 512;
        res = RES_OK;
        break;
    case GET_BLOCK_SIZE:
        *(WORD*)buff = 4096;
    80200ce8:	6785                	lui	a5,0x1
    80200cea:	00f61023          	sh	a5,0(a2) # 40000000 <_entry-0x40200000>
        res = RES_OK;
    80200cee:	4501                	li	a0,0
        break;
    80200cf0:	a801                	j	80200d00 <disk_ioctl+0x3e>
        *(WORD*)buff = 512;
    80200cf2:	20000793          	li	a5,512
    80200cf6:	00f61023          	sh	a5,0(a2)
        res = RES_OK;
    80200cfa:	4501                	li	a0,0
        break;
    80200cfc:	a011                	j	80200d00 <disk_ioctl+0x3e>
        return RES_PARERR;
    80200cfe:	4511                	li	a0,4
        res = RES_PARERR;
        break;
    }

    return res;
}
    80200d00:	6422                	ld	s0,8(sp)
    80200d02:	0141                	addi	sp,sp,16
    80200d04:	8082                	ret

0000000080200d06 <disk_init>:
#endif

int disk_init_flag;
void disk_init(void)
{
    if(disk_init_flag)return;
    80200d06:	00847797          	auipc	a5,0x847
    80200d0a:	49a7a783          	lw	a5,1178(a5) # 80a481a0 <disk_init_flag>
    80200d0e:	c391                	beqz	a5,80200d12 <disk_init+0xc>
    80200d10:	8082                	ret
{
    80200d12:	1141                	addi	sp,sp,-16
    80200d14:	e406                	sd	ra,8(sp)
    80200d16:	e022                	sd	s0,0(sp)
    80200d18:	0800                	addi	s0,sp,16
    else disk_init_flag = 1;
    80200d1a:	4785                	li	a5,1
    80200d1c:	00847717          	auipc	a4,0x847
    80200d20:	48f72223          	sw	a5,1156(a4) # 80a481a0 <disk_init_flag>
    #ifdef RAM
    ramdisk_init();
    80200d24:	fffff097          	auipc	ra,0xfffff
    80200d28:	65e080e7          	jalr	1630(ra) # 80200382 <ramdisk_init>
    #else
    disk_initialize(0);
    #endif
}
    80200d2c:	60a2                	ld	ra,8(sp)
    80200d2e:	6402                	ld	s0,0(sp)
    80200d30:	0141                	addi	sp,sp,16
    80200d32:	8082                	ret

0000000080200d34 <vdisk_read>:

void vdisk_read(struct buf *b)
{
    80200d34:	1141                	addi	sp,sp,-16
    80200d36:	e406                	sd	ra,8(sp)
    80200d38:	e022                	sd	s0,0(sp)
    80200d3a:	0800                	addi	s0,sp,16
    #ifdef RAM    
	ramdisk_rw(b, 0);
    80200d3c:	4581                	li	a1,0
    80200d3e:	fffff097          	auipc	ra,0xfffff
    80200d42:	694080e7          	jalr	1684(ra) # 802003d2 <ramdisk_rw>
    #else 
	disk_read(0,b->data, b->sectorno,1);
    #endif
}
    80200d46:	60a2                	ld	ra,8(sp)
    80200d48:	6402                	ld	s0,0(sp)
    80200d4a:	0141                	addi	sp,sp,16
    80200d4c:	8082                	ret

0000000080200d4e <vdisk_write>:

void vdisk_write(struct buf *b)
{
    80200d4e:	1141                	addi	sp,sp,-16
    80200d50:	e406                	sd	ra,8(sp)
    80200d52:	e022                	sd	s0,0(sp)
    80200d54:	0800                	addi	s0,sp,16
    #ifdef RAM
    	ramdisk_rw(b, 1);
    80200d56:	4585                	li	a1,1
    80200d58:	fffff097          	auipc	ra,0xfffff
    80200d5c:	67a080e7          	jalr	1658(ra) # 802003d2 <ramdisk_rw>
    #else 
	disk_write(0,b->data, b->sectorno,1);
    #endif
}
    80200d60:	60a2                	ld	ra,8(sp)
    80200d62:	6402                	ld	s0,0(sp)
    80200d64:	0141                	addi	sp,sp,16
    80200d66:	8082                	ret

0000000080200d68 <disk_intr>:

void disk_intr(void)
{
    80200d68:	1141                	addi	sp,sp,-16
    80200d6a:	e422                	sd	s0,8(sp)
    80200d6c:	0800                	addi	s0,sp,16
    #ifdef SD
        // dmac_intr(DMAC_CHANNEL0);
    #endif
}
    80200d6e:	6422                	ld	s0,8(sp)
    80200d70:	0141                	addi	sp,sp,16
    80200d72:	8082                	ret

0000000080200d74 <memset>:
#include "include/types.h"

void*
memset(void *dst, int c, uint n)
{
    80200d74:	1141                	addi	sp,sp,-16
    80200d76:	e422                	sd	s0,8(sp)
    80200d78:	0800                	addi	s0,sp,16
  char *cdst = (char *) dst;
  int i;
  for(i = 0; i < n; i++){
    80200d7a:	ce09                	beqz	a2,80200d94 <memset+0x20>
    80200d7c:	87aa                	mv	a5,a0
    80200d7e:	fff6071b          	addiw	a4,a2,-1
    80200d82:	1702                	slli	a4,a4,0x20
    80200d84:	9301                	srli	a4,a4,0x20
    80200d86:	0705                	addi	a4,a4,1
    80200d88:	972a                	add	a4,a4,a0
    cdst[i] = c;
    80200d8a:	00b78023          	sb	a1,0(a5)
  for(i = 0; i < n; i++){
    80200d8e:	0785                	addi	a5,a5,1
    80200d90:	fee79de3          	bne	a5,a4,80200d8a <memset+0x16>
  }
  return dst;
}
    80200d94:	6422                	ld	s0,8(sp)
    80200d96:	0141                	addi	sp,sp,16
    80200d98:	8082                	ret

0000000080200d9a <memcmp>:

int
memcmp(const void *v1, const void *v2, uint n)
{
    80200d9a:	1141                	addi	sp,sp,-16
    80200d9c:	e422                	sd	s0,8(sp)
    80200d9e:	0800                	addi	s0,sp,16
  const uchar *s1, *s2;

  s1 = v1;
  s2 = v2;
  while(n-- > 0){
    80200da0:	ca05                	beqz	a2,80200dd0 <memcmp+0x36>
    80200da2:	fff6069b          	addiw	a3,a2,-1
    80200da6:	1682                	slli	a3,a3,0x20
    80200da8:	9281                	srli	a3,a3,0x20
    80200daa:	0685                	addi	a3,a3,1
    80200dac:	96aa                	add	a3,a3,a0
    if(*s1 != *s2)
    80200dae:	00054783          	lbu	a5,0(a0) # 3f1000 <_entry-0x7fe0f000>
    80200db2:	0005c703          	lbu	a4,0(a1)
    80200db6:	00e79863          	bne	a5,a4,80200dc6 <memcmp+0x2c>
      return *s1 - *s2;
    s1++, s2++;
    80200dba:	0505                	addi	a0,a0,1
    80200dbc:	0585                	addi	a1,a1,1
  while(n-- > 0){
    80200dbe:	fed518e3          	bne	a0,a3,80200dae <memcmp+0x14>
  }

  return 0;
    80200dc2:	4501                	li	a0,0
    80200dc4:	a019                	j	80200dca <memcmp+0x30>
      return *s1 - *s2;
    80200dc6:	40e7853b          	subw	a0,a5,a4
}
    80200dca:	6422                	ld	s0,8(sp)
    80200dcc:	0141                	addi	sp,sp,16
    80200dce:	8082                	ret
  return 0;
    80200dd0:	4501                	li	a0,0
    80200dd2:	bfe5                	j	80200dca <memcmp+0x30>

0000000080200dd4 <memmove>:

void*
memmove(void *dst, const void *src, uint n)
{
    80200dd4:	1141                	addi	sp,sp,-16
    80200dd6:	e422                	sd	s0,8(sp)
    80200dd8:	0800                	addi	s0,sp,16
  const char *s;
  char *d;

  s = src;
  d = dst;
  if(s < d && s + n > d){
    80200dda:	00a5f963          	bgeu	a1,a0,80200dec <memmove+0x18>
    80200dde:	02061713          	slli	a4,a2,0x20
    80200de2:	9301                	srli	a4,a4,0x20
    80200de4:	00e587b3          	add	a5,a1,a4
    80200de8:	02f56563          	bltu	a0,a5,80200e12 <memmove+0x3e>
    s += n;
    d += n;
    while(n-- > 0)
      *--d = *--s;
  } else
    while(n-- > 0)
    80200dec:	fff6069b          	addiw	a3,a2,-1
    80200df0:	ce11                	beqz	a2,80200e0c <memmove+0x38>
    80200df2:	1682                	slli	a3,a3,0x20
    80200df4:	9281                	srli	a3,a3,0x20
    80200df6:	0685                	addi	a3,a3,1
    80200df8:	96ae                	add	a3,a3,a1
    80200dfa:	87aa                	mv	a5,a0
      *d++ = *s++;
    80200dfc:	0585                	addi	a1,a1,1
    80200dfe:	0785                	addi	a5,a5,1
    80200e00:	fff5c703          	lbu	a4,-1(a1)
    80200e04:	fee78fa3          	sb	a4,-1(a5)
    while(n-- > 0)
    80200e08:	fed59ae3          	bne	a1,a3,80200dfc <memmove+0x28>

  return dst;
}
    80200e0c:	6422                	ld	s0,8(sp)
    80200e0e:	0141                	addi	sp,sp,16
    80200e10:	8082                	ret
    d += n;
    80200e12:	972a                	add	a4,a4,a0
    while(n-- > 0)
    80200e14:	fff6069b          	addiw	a3,a2,-1
    80200e18:	da75                	beqz	a2,80200e0c <memmove+0x38>
    80200e1a:	02069613          	slli	a2,a3,0x20
    80200e1e:	9201                	srli	a2,a2,0x20
    80200e20:	fff64613          	not	a2,a2
    80200e24:	963e                	add	a2,a2,a5
      *--d = *--s;
    80200e26:	17fd                	addi	a5,a5,-1
    80200e28:	177d                	addi	a4,a4,-1
    80200e2a:	0007c683          	lbu	a3,0(a5)
    80200e2e:	00d70023          	sb	a3,0(a4)
    while(n-- > 0)
    80200e32:	fec79ae3          	bne	a5,a2,80200e26 <memmove+0x52>
    80200e36:	bfd9                	j	80200e0c <memmove+0x38>

0000000080200e38 <memcpy>:

// memcpy exists to placate GCC.  Use memmove.
void*
memcpy(void *dst, const void *src, uint n)
{
    80200e38:	1141                	addi	sp,sp,-16
    80200e3a:	e406                	sd	ra,8(sp)
    80200e3c:	e022                	sd	s0,0(sp)
    80200e3e:	0800                	addi	s0,sp,16
  return memmove(dst, src, n);
    80200e40:	00000097          	auipc	ra,0x0
    80200e44:	f94080e7          	jalr	-108(ra) # 80200dd4 <memmove>
}
    80200e48:	60a2                	ld	ra,8(sp)
    80200e4a:	6402                	ld	s0,0(sp)
    80200e4c:	0141                	addi	sp,sp,16
    80200e4e:	8082                	ret

0000000080200e50 <strncmp>:

int
strncmp(const char *p, const char *q, uint n)
{
    80200e50:	1141                	addi	sp,sp,-16
    80200e52:	e422                	sd	s0,8(sp)
    80200e54:	0800                	addi	s0,sp,16
  while(n > 0 && *p && *p == *q)
    80200e56:	ce11                	beqz	a2,80200e72 <strncmp+0x22>
    80200e58:	00054783          	lbu	a5,0(a0)
    80200e5c:	cf89                	beqz	a5,80200e76 <strncmp+0x26>
    80200e5e:	0005c703          	lbu	a4,0(a1)
    80200e62:	00f71a63          	bne	a4,a5,80200e76 <strncmp+0x26>
    n--, p++, q++;
    80200e66:	367d                	addiw	a2,a2,-1
    80200e68:	0505                	addi	a0,a0,1
    80200e6a:	0585                	addi	a1,a1,1
  while(n > 0 && *p && *p == *q)
    80200e6c:	f675                	bnez	a2,80200e58 <strncmp+0x8>
  if(n == 0)
    return 0;
    80200e6e:	4501                	li	a0,0
    80200e70:	a809                	j	80200e82 <strncmp+0x32>
    80200e72:	4501                	li	a0,0
    80200e74:	a039                	j	80200e82 <strncmp+0x32>
  if(n == 0)
    80200e76:	ca09                	beqz	a2,80200e88 <strncmp+0x38>
  return (uchar)*p - (uchar)*q;
    80200e78:	00054503          	lbu	a0,0(a0)
    80200e7c:	0005c783          	lbu	a5,0(a1)
    80200e80:	9d1d                	subw	a0,a0,a5
}
    80200e82:	6422                	ld	s0,8(sp)
    80200e84:	0141                	addi	sp,sp,16
    80200e86:	8082                	ret
    return 0;
    80200e88:	4501                	li	a0,0
    80200e8a:	bfe5                	j	80200e82 <strncmp+0x32>

0000000080200e8c <strncpy>:

char*
strncpy(char *s, const char *t, int n)
{
    80200e8c:	1141                	addi	sp,sp,-16
    80200e8e:	e422                	sd	s0,8(sp)
    80200e90:	0800                	addi	s0,sp,16
  char *os;

  os = s;
  while(n-- > 0 && (*s++ = *t++) != 0)
    80200e92:	872a                	mv	a4,a0
    80200e94:	8832                	mv	a6,a2
    80200e96:	367d                	addiw	a2,a2,-1
    80200e98:	01005963          	blez	a6,80200eaa <strncpy+0x1e>
    80200e9c:	0705                	addi	a4,a4,1
    80200e9e:	0005c783          	lbu	a5,0(a1)
    80200ea2:	fef70fa3          	sb	a5,-1(a4)
    80200ea6:	0585                	addi	a1,a1,1
    80200ea8:	f7f5                	bnez	a5,80200e94 <strncpy+0x8>
    ;
  while(n-- > 0)
    80200eaa:	00c05d63          	blez	a2,80200ec4 <strncpy+0x38>
    80200eae:	86ba                	mv	a3,a4
    *s++ = 0;
    80200eb0:	0685                	addi	a3,a3,1
    80200eb2:	fe068fa3          	sb	zero,-1(a3)
  while(n-- > 0)
    80200eb6:	fff6c793          	not	a5,a3
    80200eba:	9fb9                	addw	a5,a5,a4
    80200ebc:	010787bb          	addw	a5,a5,a6
    80200ec0:	fef048e3          	bgtz	a5,80200eb0 <strncpy+0x24>
  return os;
}
    80200ec4:	6422                	ld	s0,8(sp)
    80200ec6:	0141                	addi	sp,sp,16
    80200ec8:	8082                	ret

0000000080200eca <safestrcpy>:

// Like strncpy but guaranteed to NUL-terminate.
char*
safestrcpy(char *s, const char *t, int n)
{
    80200eca:	1141                	addi	sp,sp,-16
    80200ecc:	e422                	sd	s0,8(sp)
    80200ece:	0800                	addi	s0,sp,16
  char *os;

  os = s;
  if(n <= 0)
    80200ed0:	02c05363          	blez	a2,80200ef6 <safestrcpy+0x2c>
    80200ed4:	fff6069b          	addiw	a3,a2,-1
    80200ed8:	1682                	slli	a3,a3,0x20
    80200eda:	9281                	srli	a3,a3,0x20
    80200edc:	96ae                	add	a3,a3,a1
    80200ede:	87aa                	mv	a5,a0
    return os;
  while(--n > 0 && (*s++ = *t++) != 0)
    80200ee0:	00d58963          	beq	a1,a3,80200ef2 <safestrcpy+0x28>
    80200ee4:	0585                	addi	a1,a1,1
    80200ee6:	0785                	addi	a5,a5,1
    80200ee8:	fff5c703          	lbu	a4,-1(a1)
    80200eec:	fee78fa3          	sb	a4,-1(a5)
    80200ef0:	fb65                	bnez	a4,80200ee0 <safestrcpy+0x16>
    ;
  *s = 0;
    80200ef2:	00078023          	sb	zero,0(a5)
  return os;
}
    80200ef6:	6422                	ld	s0,8(sp)
    80200ef8:	0141                	addi	sp,sp,16
    80200efa:	8082                	ret

0000000080200efc <strlen>:

int
strlen(const char *s)
{
    80200efc:	1141                	addi	sp,sp,-16
    80200efe:	e422                	sd	s0,8(sp)
    80200f00:	0800                	addi	s0,sp,16
  int n;

  for(n = 0; s[n]; n++)
    80200f02:	00054783          	lbu	a5,0(a0)
    80200f06:	cf91                	beqz	a5,80200f22 <strlen+0x26>
    80200f08:	0505                	addi	a0,a0,1
    80200f0a:	87aa                	mv	a5,a0
    80200f0c:	4685                	li	a3,1
    80200f0e:	9e89                	subw	a3,a3,a0
    80200f10:	00f6853b          	addw	a0,a3,a5
    80200f14:	0785                	addi	a5,a5,1
    80200f16:	fff7c703          	lbu	a4,-1(a5)
    80200f1a:	fb7d                	bnez	a4,80200f10 <strlen+0x14>
    ;
  return n;
}
    80200f1c:	6422                	ld	s0,8(sp)
    80200f1e:	0141                	addi	sp,sp,16
    80200f20:	8082                	ret
  for(n = 0; s[n]; n++)
    80200f22:	4501                	li	a0,0
    80200f24:	bfe5                	j	80200f1c <strlen+0x20>

0000000080200f26 <wnstr>:

// convert uchar string into wide char string 
void wnstr(wchar *dst, char const *src, int len) {
    80200f26:	1141                	addi	sp,sp,-16
    80200f28:	e422                	sd	s0,8(sp)
    80200f2a:	0800                	addi	s0,sp,16
  while (len -- && *src) {
    80200f2c:	c215                	beqz	a2,80200f50 <wnstr+0x2a>
    80200f2e:	fff6071b          	addiw	a4,a2,-1
    80200f32:	1702                	slli	a4,a4,0x20
    80200f34:	9301                	srli	a4,a4,0x20
    80200f36:	0705                	addi	a4,a4,1
    80200f38:	0706                	slli	a4,a4,0x1
    80200f3a:	972a                	add	a4,a4,a0
    80200f3c:	0005c783          	lbu	a5,0(a1)
    80200f40:	cb81                	beqz	a5,80200f50 <wnstr+0x2a>
    *(uchar*)dst = *src++;
    80200f42:	0585                	addi	a1,a1,1
    80200f44:	00f50023          	sb	a5,0(a0)
    dst ++;
    80200f48:	0509                	addi	a0,a0,2
  while (len -- && *src) {
    80200f4a:	fee519e3          	bne	a0,a4,80200f3c <wnstr+0x16>
    dst ++;
    80200f4e:	853a                	mv	a0,a4
  }

  *dst = 0;
    80200f50:	00051023          	sh	zero,0(a0)
}
    80200f54:	6422                	ld	s0,8(sp)
    80200f56:	0141                	addi	sp,sp,16
    80200f58:	8082                	ret

0000000080200f5a <snstr>:

// convert wide char string into uchar string 
void snstr(char *dst, wchar const *src, int len) {
    80200f5a:	1141                	addi	sp,sp,-16
    80200f5c:	e422                	sd	s0,8(sp)
    80200f5e:	0800                	addi	s0,sp,16
  while (len -- && *src) {
    80200f60:	c221                	beqz	a2,80200fa0 <snstr+0x46>
    80200f62:	fff6079b          	addiw	a5,a2,-1
    80200f66:	fff6069b          	addiw	a3,a2,-1
    80200f6a:	1682                	slli	a3,a3,0x20
    80200f6c:	9281                	srli	a3,a3,0x20
    80200f6e:	0685                	addi	a3,a3,1
    80200f70:	96aa                	add	a3,a3,a0
    80200f72:	0005d703          	lhu	a4,0(a1)
    80200f76:	cb09                	beqz	a4,80200f88 <snstr+0x2e>
    *dst++ = (uchar)(*src & 0xff);
    80200f78:	0505                	addi	a0,a0,1
    80200f7a:	fee50fa3          	sb	a4,-1(a0)
    src ++;
    80200f7e:	0589                	addi	a1,a1,2
  while (len -- && *src) {
    80200f80:	37fd                	addiw	a5,a5,-1
    80200f82:	fed518e3          	bne	a0,a3,80200f72 <snstr+0x18>
    *dst++ = (uchar)(*src & 0xff);
    80200f86:	8536                	mv	a0,a3
  }
  while(len-- > 0)
    80200f88:	00f05c63          	blez	a5,80200fa0 <snstr+0x46>
    80200f8c:	37fd                	addiw	a5,a5,-1
    80200f8e:	1782                	slli	a5,a5,0x20
    80200f90:	9381                	srli	a5,a5,0x20
    80200f92:	0785                	addi	a5,a5,1
    80200f94:	97aa                	add	a5,a5,a0
    *dst++ = 0;
    80200f96:	0505                	addi	a0,a0,1
    80200f98:	fe050fa3          	sb	zero,-1(a0)
  while(len-- > 0)
    80200f9c:	fea79de3          	bne	a5,a0,80200f96 <snstr+0x3c>
}
    80200fa0:	6422                	ld	s0,8(sp)
    80200fa2:	0141                	addi	sp,sp,16
    80200fa4:	8082                	ret

0000000080200fa6 <wcsncmp>:

int wcsncmp(wchar const *s1, wchar const *s2, int len) {
    80200fa6:	1141                	addi	sp,sp,-16
    80200fa8:	e422                	sd	s0,8(sp)
    80200faa:	0800                	addi	s0,sp,16
    80200fac:	872a                	mv	a4,a0
  int ret = 0;

  while (len-- && *s1) {
    80200fae:	02061693          	slli	a3,a2,0x20
    80200fb2:	9281                	srli	a3,a3,0x20
    80200fb4:	0686                	slli	a3,a3,0x1
    80200fb6:	96ae                	add	a3,a3,a1
    80200fb8:	00d58f63          	beq	a1,a3,80200fd6 <wcsncmp+0x30>
    80200fbc:	00075783          	lhu	a5,0(a4)
    80200fc0:	cb89                	beqz	a5,80200fd2 <wcsncmp+0x2c>
    ret = (int)(*s1++ - *s2++);
    80200fc2:	0709                	addi	a4,a4,2
    80200fc4:	0589                	addi	a1,a1,2
    80200fc6:	ffe5d503          	lhu	a0,-2(a1)
    80200fca:	40a7853b          	subw	a0,a5,a0
    if (ret) break;
    80200fce:	d56d                	beqz	a0,80200fb8 <wcsncmp+0x12>
    80200fd0:	a021                	j	80200fd8 <wcsncmp+0x32>
    80200fd2:	4501                	li	a0,0
    80200fd4:	a011                	j	80200fd8 <wcsncmp+0x32>
    80200fd6:	4501                	li	a0,0
  }

  return ret;
}
    80200fd8:	6422                	ld	s0,8(sp)
    80200fda:	0141                	addi	sp,sp,16
    80200fdc:	8082                	ret

0000000080200fde <strchr>:

char*
strchr(const char *s, char c)
{
    80200fde:	1141                	addi	sp,sp,-16
    80200fe0:	e422                	sd	s0,8(sp)
    80200fe2:	0800                	addi	s0,sp,16
  for(; *s; s++)
    80200fe4:	00054783          	lbu	a5,0(a0)
    80200fe8:	cb99                	beqz	a5,80200ffe <strchr+0x20>
    if(*s == c)
    80200fea:	00f58763          	beq	a1,a5,80200ff8 <strchr+0x1a>
  for(; *s; s++)
    80200fee:	0505                	addi	a0,a0,1
    80200ff0:	00054783          	lbu	a5,0(a0)
    80200ff4:	fbfd                	bnez	a5,80200fea <strchr+0xc>
      return (char*)s;
  return 0;
    80200ff6:	4501                	li	a0,0
    80200ff8:	6422                	ld	s0,8(sp)
    80200ffa:	0141                	addi	sp,sp,16
    80200ffc:	8082                	ret
  return 0;
    80200ffe:	4501                	li	a0,0
    80201000:	bfe5                	j	80200ff8 <strchr+0x1a>

0000000080201002 <push_off>:
// it takes two pop_off()s to undo two push_off()s.  Also, if interrupts
// are initially off, then push_off, pop_off leaves them off.

void
push_off(void)
{
    80201002:	1101                	addi	sp,sp,-32
    80201004:	ec06                	sd	ra,24(sp)
    80201006:	e822                	sd	s0,16(sp)
    80201008:	e426                	sd	s1,8(sp)
    8020100a:	1000                	addi	s0,sp,32

static inline uint64
r_sstatus()
{
  uint64 x;
  asm volatile("csrr %0, sstatus" : "=r" (x) );
    8020100c:	100024f3          	csrr	s1,sstatus
    80201010:	100027f3          	csrr	a5,sstatus

// disable device interrupts
static inline void
intr_off()
{
  w_sstatus(r_sstatus() & ~SSTATUS_SIE);
    80201014:	9bf5                	andi	a5,a5,-3
  asm volatile("csrw sstatus, %0" : : "r" (x));
    80201016:	10079073          	csrw	sstatus,a5
  int old = intr_get();

  intr_off();
  //printf("\e[32mpush_off()\e[0m: cpuid(): %d\n", cpuid());
  if(mycpu()->noff == 0)
    8020101a:	0000a097          	auipc	ra,0xa
    8020101e:	416080e7          	jalr	1046(ra) # 8020b430 <mycpu>
    80201022:	5d3c                	lw	a5,120(a0)
    80201024:	cf89                	beqz	a5,8020103e <push_off+0x3c>
    mycpu()->intena = old;
  mycpu()->noff += 1;
    80201026:	0000a097          	auipc	ra,0xa
    8020102a:	40a080e7          	jalr	1034(ra) # 8020b430 <mycpu>
    8020102e:	5d3c                	lw	a5,120(a0)
    80201030:	2785                	addiw	a5,a5,1
    80201032:	dd3c                	sw	a5,120(a0)
}
    80201034:	60e2                	ld	ra,24(sp)
    80201036:	6442                	ld	s0,16(sp)
    80201038:	64a2                	ld	s1,8(sp)
    8020103a:	6105                	addi	sp,sp,32
    8020103c:	8082                	ret
    mycpu()->intena = old;
    8020103e:	0000a097          	auipc	ra,0xa
    80201042:	3f2080e7          	jalr	1010(ra) # 8020b430 <mycpu>
// are device interrupts enabled?
static inline int
intr_get()
{
  uint64 x = r_sstatus();
  return (x & SSTATUS_SIE) != 0;
    80201046:	8085                	srli	s1,s1,0x1
    80201048:	8885                	andi	s1,s1,1
    8020104a:	dd64                	sw	s1,124(a0)
    8020104c:	bfe9                	j	80201026 <push_off+0x24>

000000008020104e <pop_off>:

void
pop_off(void)
{
    8020104e:	1141                	addi	sp,sp,-16
    80201050:	e406                	sd	ra,8(sp)
    80201052:	e022                	sd	s0,0(sp)
    80201054:	0800                	addi	s0,sp,16
  struct cpu *c = mycpu();
    80201056:	0000a097          	auipc	ra,0xa
    8020105a:	3da080e7          	jalr	986(ra) # 8020b430 <mycpu>
  asm volatile("csrr %0, sstatus" : "=r" (x) );
    8020105e:	100027f3          	csrr	a5,sstatus
  return (x & SSTATUS_SIE) != 0;
    80201062:	8b89                	andi	a5,a5,2

  //printf("\e[31mpop_off()\e[0m: cpuid(): %d\n", cpuid());
  if(intr_get())
    80201064:	e78d                	bnez	a5,8020108e <pop_off+0x40>
    panic("pop_off - interruptible");
  if(c->noff < 1) {
    80201066:	5d3c                	lw	a5,120(a0)
    80201068:	02f05b63          	blez	a5,8020109e <pop_off+0x50>
    //printf("c->noff = %d\n", c->noff);
    panic("pop_off");
  }
  //printf("c->noff: %d\n", c->noff);
  //printf("c: %x\n", c);
  c->noff -= 1;
    8020106c:	37fd                	addiw	a5,a5,-1
    8020106e:	0007871b          	sext.w	a4,a5
    80201072:	dd3c                	sw	a5,120(a0)
  if(c->noff == 0 && c->intena)
    80201074:	eb09                	bnez	a4,80201086 <pop_off+0x38>
    80201076:	5d7c                	lw	a5,124(a0)
    80201078:	c799                	beqz	a5,80201086 <pop_off+0x38>
  asm volatile("csrr %0, sstatus" : "=r" (x) );
    8020107a:	100027f3          	csrr	a5,sstatus
  w_sstatus(r_sstatus() | SSTATUS_SIE);
    8020107e:	0027e793          	ori	a5,a5,2
  asm volatile("csrw sstatus, %0" : : "r" (x));
    80201082:	10079073          	csrw	sstatus,a5
    intr_on();
}
    80201086:	60a2                	ld	ra,8(sp)
    80201088:	6402                	ld	s0,0(sp)
    8020108a:	0141                	addi	sp,sp,16
    8020108c:	8082                	ret
    panic("pop_off - interruptible");
    8020108e:	00011517          	auipc	a0,0x11
    80201092:	ff250513          	addi	a0,a0,-14 # 80212080 <rodata_start+0x80>
    80201096:	00007097          	auipc	ra,0x7
    8020109a:	650080e7          	jalr	1616(ra) # 802086e6 <panic>
    panic("pop_off");
    8020109e:	00011517          	auipc	a0,0x11
    802010a2:	ffa50513          	addi	a0,a0,-6 # 80212098 <rodata_start+0x98>
    802010a6:	00007097          	auipc	ra,0x7
    802010aa:	640080e7          	jalr	1600(ra) # 802086e6 <panic>

00000000802010ae <image_init>:
#include "include/ramdisk.h"
#endif

void image_init(struct dirent* img)
{
    if(!FatFs[img->dev].valid){
    802010ae:	11454783          	lbu	a5,276(a0)
    802010b2:	6715                	lui	a4,0x5
    802010b4:	9b870713          	addi	a4,a4,-1608 # 49b8 <_entry-0x801fb648>
    802010b8:	02e78733          	mul	a4,a5,a4
    802010bc:	00854797          	auipc	a5,0x854
    802010c0:	af478793          	addi	a5,a5,-1292 # 80a54bb0 <FatFs>
    802010c4:	97ba                	add	a5,a5,a4
    802010c6:	43dc                	lw	a5,4(a5)
    802010c8:	c391                	beqz	a5,802010cc <image_init+0x1e>
    802010ca:	8082                	ret
{
    802010cc:	1141                	addi	sp,sp,-16
    802010ce:	e406                	sd	ra,8(sp)
    802010d0:	e022                	sd	s0,0(sp)
    802010d2:	0800                	addi	s0,sp,16
      panic("no support filesystem");
    802010d4:	00011517          	auipc	a0,0x11
    802010d8:	fcc50513          	addi	a0,a0,-52 # 802120a0 <rodata_start+0xa0>
    802010dc:	00007097          	auipc	ra,0x7
    802010e0:	60a080e7          	jalr	1546(ra) # 802086e6 <panic>

00000000802010e4 <image_read>:
    }
    return;
}

void image_read(struct buf *b,struct dirent* img)
{
    802010e4:	7179                	addi	sp,sp,-48
    802010e6:	f406                	sd	ra,40(sp)
    802010e8:	f022                	sd	s0,32(sp)
    802010ea:	ec26                	sd	s1,24(sp)
    802010ec:	e84a                	sd	s2,16(sp)
    802010ee:	e44e                	sd	s3,8(sp)
    802010f0:	1800                	addi	s0,sp,48
    802010f2:	892a                	mv	s2,a0
    802010f4:	84ae                	mv	s1,a1
  uint sectorno = b->sectorno;
  int off = sectorno*BSIZE;
    802010f6:	00c52983          	lw	s3,12(a0)
    802010fa:	0099999b          	slliw	s3,s3,0x9
  elock(img);
    802010fe:	852e                	mv	a0,a1
    80201100:	00003097          	auipc	ra,0x3
    80201104:	872080e7          	jalr	-1934(ra) # 80203972 <elock>
  if(eread(img,0,(uint64)(b->data),off,BSIZE)<0)panic("read image error");
    80201108:	20000713          	li	a4,512
    8020110c:	86ce                	mv	a3,s3
    8020110e:	05890613          	addi	a2,s2,88
    80201112:	4581                	li	a1,0
    80201114:	8526                	mv	a0,s1
    80201116:	00002097          	auipc	ra,0x2
    8020111a:	e7c080e7          	jalr	-388(ra) # 80202f92 <eread>
    8020111e:	00054e63          	bltz	a0,8020113a <image_read+0x56>
  eunlock(img);
    80201122:	8526                	mv	a0,s1
    80201124:	00003097          	auipc	ra,0x3
    80201128:	884080e7          	jalr	-1916(ra) # 802039a8 <eunlock>
  return;
}
    8020112c:	70a2                	ld	ra,40(sp)
    8020112e:	7402                	ld	s0,32(sp)
    80201130:	64e2                	ld	s1,24(sp)
    80201132:	6942                	ld	s2,16(sp)
    80201134:	69a2                	ld	s3,8(sp)
    80201136:	6145                	addi	sp,sp,48
    80201138:	8082                	ret
  if(eread(img,0,(uint64)(b->data),off,BSIZE)<0)panic("read image error");
    8020113a:	00011517          	auipc	a0,0x11
    8020113e:	f7e50513          	addi	a0,a0,-130 # 802120b8 <rodata_start+0xb8>
    80201142:	00007097          	auipc	ra,0x7
    80201146:	5a4080e7          	jalr	1444(ra) # 802086e6 <panic>

000000008020114a <image_write>:

void image_write(struct buf *b,struct dirent* img)
{
    8020114a:	7179                	addi	sp,sp,-48
    8020114c:	f406                	sd	ra,40(sp)
    8020114e:	f022                	sd	s0,32(sp)
    80201150:	ec26                	sd	s1,24(sp)
    80201152:	e84a                	sd	s2,16(sp)
    80201154:	e44e                	sd	s3,8(sp)
    80201156:	1800                	addi	s0,sp,48
    80201158:	892a                	mv	s2,a0
    8020115a:	84ae                	mv	s1,a1
  uint sectorno = b->sectorno;
  int off = sectorno*BSIZE;
    8020115c:	00c52983          	lw	s3,12(a0)
    80201160:	0099999b          	slliw	s3,s3,0x9
  elock(img);
    80201164:	852e                	mv	a0,a1
    80201166:	00003097          	auipc	ra,0x3
    8020116a:	80c080e7          	jalr	-2036(ra) # 80203972 <elock>
  if(ewrite(img,0,(uint64)(b->data),off,BSIZE)<0)panic("write image error");
    8020116e:	20000713          	li	a4,512
    80201172:	86ce                	mv	a3,s3
    80201174:	05890613          	addi	a2,s2,88
    80201178:	4581                	li	a1,0
    8020117a:	8526                	mv	a0,s1
    8020117c:	00002097          	auipc	ra,0x2
    80201180:	f2c080e7          	jalr	-212(ra) # 802030a8 <ewrite>
    80201184:	00054e63          	bltz	a0,802011a0 <image_write+0x56>
  eunlock(img);
    80201188:	8526                	mv	a0,s1
    8020118a:	00003097          	auipc	ra,0x3
    8020118e:	81e080e7          	jalr	-2018(ra) # 802039a8 <eunlock>
  return;
}
    80201192:	70a2                	ld	ra,40(sp)
    80201194:	7402                	ld	s0,32(sp)
    80201196:	64e2                	ld	s1,24(sp)
    80201198:	6942                	ld	s2,16(sp)
    8020119a:	69a2                	ld	s3,8(sp)
    8020119c:	6145                	addi	sp,sp,48
    8020119e:	8082                	ret
  if(ewrite(img,0,(uint64)(b->data),off,BSIZE)<0)panic("write image error");
    802011a0:	00011517          	auipc	a0,0x11
    802011a4:	f3050513          	addi	a0,a0,-208 # 802120d0 <rodata_start+0xd0>
    802011a8:	00007097          	auipc	ra,0x7
    802011ac:	53e080e7          	jalr	1342(ra) # 802086e6 <panic>

00000000802011b0 <zombiecond>:
  sched();
  release(&p->lock);
}


int zombiecond(struct proc* p,int pid){
    802011b0:	1141                	addi	sp,sp,-16
    802011b2:	e422                	sd	s0,8(sp)
    802011b4:	0800                	addi	s0,sp,16
  return (pid==-1||p->pid == pid);
    802011b6:	57fd                	li	a5,-1
    802011b8:	00f58a63          	beq	a1,a5,802011cc <zombiecond+0x1c>
    802011bc:	4128                	lw	a0,64(a0)
    802011be:	40b505b3          	sub	a1,a0,a1
    802011c2:	0015b513          	seqz	a0,a1
}
    802011c6:	6422                	ld	s0,8(sp)
    802011c8:	0141                	addi	sp,sp,16
    802011ca:	8082                	ret
  return (pid==-1||p->pid == pid);
    802011cc:	4505                	li	a0,1
    802011ce:	bfe5                	j	802011c6 <zombiecond+0x16>

00000000802011d0 <forkret>:
{
    802011d0:	1141                	addi	sp,sp,-16
    802011d2:	e406                	sd	ra,8(sp)
    802011d4:	e022                	sd	s0,0(sp)
    802011d6:	0800                	addi	s0,sp,16
  release(&myproc()->lock);
    802011d8:	0000a097          	auipc	ra,0xa
    802011dc:	274080e7          	jalr	628(ra) # 8020b44c <myproc>
    802011e0:	0521                	addi	a0,a0,8
    802011e2:	00007097          	auipc	ra,0x7
    802011e6:	1e8080e7          	jalr	488(ra) # 802083ca <release>
  usertrapret();
    802011ea:	00009097          	auipc	ra,0x9
    802011ee:	320080e7          	jalr	800(ra) # 8020a50a <usertrapret>
}
    802011f2:	60a2                	ld	ra,8(sp)
    802011f4:	6402                	ld	s0,0(sp)
    802011f6:	0141                	addi	sp,sp,16
    802011f8:	8082                	ret

00000000802011fa <freeproc>:
{
    802011fa:	1101                	addi	sp,sp,-32
    802011fc:	ec06                	sd	ra,24(sp)
    802011fe:	e822                	sd	s0,16(sp)
    80201200:	e426                	sd	s1,8(sp)
    80201202:	1000                	addi	s0,sp,32
    80201204:	84aa                	mv	s1,a0
  p->trapframe = 0;
    80201206:	06053423          	sd	zero,104(a0)
  if(p->mf)
    8020120a:	18053783          	ld	a5,384(a0)
    8020120e:	c789                	beqz	a5,80201218 <freeproc+0x1e>
    free_map_fix(p);
    80201210:	0000b097          	auipc	ra,0xb
    80201214:	3aa080e7          	jalr	938(ra) # 8020c5ba <free_map_fix>
  if(p->kstack)
    80201218:	68a8                	ld	a0,80(s1)
    8020121a:	e13d                	bnez	a0,80201280 <freeproc+0x86>
  if(p->pagetable)
    8020121c:	70bc                	ld	a5,96(s1)
    8020121e:	c791                	beqz	a5,8020122a <freeproc+0x30>
  uvmfree(p);
    80201220:	8526                	mv	a0,s1
    80201222:	00009097          	auipc	ra,0x9
    80201226:	bdc080e7          	jalr	-1060(ra) # 80209dfe <uvmfree>
  p->pagetable = 0;
    8020122a:	0604b023          	sd	zero,96(s1)
  p->vma = NULL;
    8020122e:	1604b823          	sd	zero,368(s1)
  p->robust_list = NULL;
    80201232:	1a04bc23          	sd	zero,440(s1)
  p->sz = 0;
    80201236:	0404bc23          	sd	zero,88(s1)
  p->pid = 0;
    8020123a:	0404a023          	sw	zero,64(s1)

static inline void list_del(struct list *node) {
	if(node==NULL){
	  panic("[list next]list is null");
	}
	__list_link(node->prev, node->next);
    8020123e:	1604b703          	ld	a4,352(s1)
    80201242:	1684b783          	ld	a5,360(s1)
	prev->next = next;
    80201246:	e71c                	sd	a5,8(a4)
	next->prev = prev;
    80201248:	e398                	sd	a4,0(a5)
  p->name[0] = 0;
    8020124a:	10048023          	sb	zero,256(s1)
  p->chan = 0;
    8020124e:	0204b823          	sd	zero,48(s1)
  p->killed = 0;
    80201252:	0204ac23          	sw	zero,56(s1)
  p->xstate = 0;
    80201256:	0204ae23          	sw	zero,60(s1)
  p->state = UNUSED;
    8020125a:	0204a023          	sw	zero,32(s1)
  sigaction_free(p->sig_act);
    8020125e:	1884b503          	ld	a0,392(s1)
    80201262:	00007097          	auipc	ra,0x7
    80201266:	fac080e7          	jalr	-84(ra) # 8020820e <sigaction_free>
  sigframefree(p->sig_frame);
    8020126a:	1a04b503          	ld	a0,416(s1)
    8020126e:	00007097          	auipc	ra,0x7
    80201272:	f34080e7          	jalr	-204(ra) # 802081a2 <sigframefree>
}
    80201276:	60e2                	ld	ra,24(sp)
    80201278:	6442                	ld	s0,16(sp)
    8020127a:	64a2                	ld	s1,8(sp)
    8020127c:	6105                	addi	sp,sp,32
    8020127e:	8082                	ret
    freepage((void *)p->kstack);
    80201280:	00008097          	auipc	ra,0x8
    80201284:	fa0080e7          	jalr	-96(ra) # 80209220 <_freepage>
    80201288:	bf51                	j	8020121c <freeproc+0x22>

000000008020128a <waitq_pool_init>:
waitq_pool_init(){
    8020128a:	1141                	addi	sp,sp,-16
    8020128c:	e406                	sd	ra,8(sp)
    8020128e:	e022                	sd	s0,0(sp)
    80201290:	0800                	addi	s0,sp,16
  for(int i = 0;i<WAITQ_NUM;i++){
    80201292:	00847797          	auipc	a5,0x847
    80201296:	f1678793          	addi	a5,a5,-234 # 80a481a8 <waitq_valid>
    8020129a:	00847717          	auipc	a4,0x847
    8020129e:	09e70713          	addi	a4,a4,158 # 80a48338 <waitq_pool_lk>
    waitq_valid[i] = 0;
    802012a2:	0007a023          	sw	zero,0(a5)
  for(int i = 0;i<WAITQ_NUM;i++){
    802012a6:	0791                	addi	a5,a5,4
    802012a8:	fee79de3          	bne	a5,a4,802012a2 <waitq_pool_init+0x18>
  initlock(&waitq_pool_lk,"waitq pool");
    802012ac:	00011597          	auipc	a1,0x11
    802012b0:	e3c58593          	addi	a1,a1,-452 # 802120e8 <rodata_start+0xe8>
    802012b4:	00847517          	auipc	a0,0x847
    802012b8:	08450513          	addi	a0,a0,132 # 80a48338 <waitq_pool_lk>
    802012bc:	00007097          	auipc	ra,0x7
    802012c0:	076080e7          	jalr	118(ra) # 80208332 <initlock>
}
    802012c4:	60a2                	ld	ra,8(sp)
    802012c6:	6402                	ld	s0,0(sp)
    802012c8:	0141                	addi	sp,sp,16
    802012ca:	8082                	ret

00000000802012cc <procinit>:
procinit(){
    802012cc:	7179                	addi	sp,sp,-48
    802012ce:	f406                	sd	ra,40(sp)
    802012d0:	f022                	sd	s0,32(sp)
    802012d2:	ec26                	sd	s1,24(sp)
    802012d4:	e84a                	sd	s2,16(sp)
    802012d6:	e44e                	sd	s3,8(sp)
    802012d8:	e052                	sd	s4,0(sp)
    802012da:	1800                	addi	s0,sp,48
  initlock(&pid_lock,"pid lock");
    802012dc:	00847497          	auipc	s1,0x847
    802012e0:	ecc48493          	addi	s1,s1,-308 # 80a481a8 <waitq_valid>
    802012e4:	00011597          	auipc	a1,0x11
    802012e8:	e1458593          	addi	a1,a1,-492 # 802120f8 <rodata_start+0xf8>
    802012ec:	00847517          	auipc	a0,0x847
    802012f0:	06450513          	addi	a0,a0,100 # 80a48350 <pid_lock>
    802012f4:	00007097          	auipc	ra,0x7
    802012f8:	03e080e7          	jalr	62(ra) # 80208332 <initlock>
  initproc = NULL;
    802012fc:	00854797          	auipc	a5,0x854
    80201300:	8a07b623          	sd	zero,-1876(a5) # 80a54ba8 <initproc>
  struct spinlock lk;
  struct list head;
}queue;

static inline void queue_init(queue *q,void* chan) {
	initlock(&q->lk,"queue");
    80201304:	00011597          	auipc	a1,0x11
    80201308:	1d458593          	addi	a1,a1,468 # 802124d8 <rodata_start+0x4d8>
    8020130c:	00847517          	auipc	a0,0x847
    80201310:	06450513          	addi	a0,a0,100 # 80a48370 <readyq+0x8>
    80201314:	00007097          	auipc	ra,0x7
    80201318:	01e080e7          	jalr	30(ra) # 80208332 <initlock>
	node->prev = node->next = node;
    8020131c:	00847797          	auipc	a5,0x847
    80201320:	06c78793          	addi	a5,a5,108 # 80a48388 <readyq+0x20>
    80201324:	1ef4b423          	sd	a5,488(s1)
    80201328:	1ef4b023          	sd	a5,480(s1)
	list_init(&q->head);
	q->chan = chan;
    8020132c:	1c04b023          	sd	zero,448(s1)
  waitq_pool_init();
    80201330:	00000097          	auipc	ra,0x0
    80201334:	f5a080e7          	jalr	-166(ra) # 8020128a <waitq_pool_init>
  firstuserinit = 1;
    80201338:	4785                	li	a5,1
    8020133a:	00854717          	auipc	a4,0x854
    8020133e:	84f72f23          	sw	a5,-1954(a4) # 80a54b98 <firstuserinit>
  for(struct proc* p = proc;p<proc+NPROC;p++){
    80201342:	00848497          	auipc	s1,0x848
    80201346:	31e48493          	addi	s1,s1,798 # 80a49660 <proc+0x8>
    8020134a:	00854a17          	auipc	s4,0x854
    8020134e:	856a0a13          	addi	s4,s4,-1962 # 80a54ba0 <runproc>
      initlock(&p->lock, "proc");
    80201352:	00011997          	auipc	s3,0x11
    80201356:	db698993          	addi	s3,s3,-586 # 80212108 <rodata_start+0x108>
      p->filelimit = NOFILE;
    8020135a:	0c800913          	li	s2,200
      initlock(&p->lock, "proc");
    8020135e:	85ce                	mv	a1,s3
    80201360:	8526                	mv	a0,s1
    80201362:	00007097          	auipc	ra,0x7
    80201366:	fd0080e7          	jalr	-48(ra) # 80208332 <initlock>
      p->state = UNUSED;
    8020136a:	0004ac23          	sw	zero,24(s1)
      p->parent = NULL;
    8020136e:	0204b023          	sd	zero,32(s1)
      p->killed = 0;
    80201372:	0204a823          	sw	zero,48(s1)
      p->filelimit = NOFILE;
    80201376:	0d24bc23          	sd	s2,216(s1)
      p->umask = 0;
    8020137a:	1a04ac23          	sw	zero,440(s1)
  for(struct proc* p = proc;p<proc+NPROC;p++){
    8020137e:	1d048493          	addi	s1,s1,464
    80201382:	fd449ee3          	bne	s1,s4,8020135e <procinit+0x92>
  __debug_info("procinit\n");
    80201386:	00011517          	auipc	a0,0x11
    8020138a:	d8a50513          	addi	a0,a0,-630 # 80212110 <rodata_start+0x110>
    8020138e:	00007097          	auipc	ra,0x7
    80201392:	568080e7          	jalr	1384(ra) # 802088f6 <__debug_info>
}
    80201396:	70a2                	ld	ra,40(sp)
    80201398:	7402                	ld	s0,32(sp)
    8020139a:	64e2                	ld	s1,24(sp)
    8020139c:	6942                	ld	s2,16(sp)
    8020139e:	69a2                	ld	s3,8(sp)
    802013a0:	6a02                	ld	s4,0(sp)
    802013a2:	6145                	addi	sp,sp,48
    802013a4:	8082                	ret

00000000802013a6 <findwaitq>:
findwaitq(void* chan){
    802013a6:	1101                	addi	sp,sp,-32
    802013a8:	ec06                	sd	ra,24(sp)
    802013aa:	e822                	sd	s0,16(sp)
    802013ac:	e426                	sd	s1,8(sp)
    802013ae:	e04a                	sd	s2,0(sp)
    802013b0:	1000                	addi	s0,sp,32
    802013b2:	892a                	mv	s2,a0
  acquire(&waitq_pool_lk);
    802013b4:	00847517          	auipc	a0,0x847
    802013b8:	f8450513          	addi	a0,a0,-124 # 80a48338 <waitq_pool_lk>
    802013bc:	00007097          	auipc	ra,0x7
    802013c0:	fba080e7          	jalr	-70(ra) # 80208376 <acquire>
  for(int i=0;i<WAITQ_NUM ;i++){
    802013c4:	00847797          	auipc	a5,0x847
    802013c8:	de478793          	addi	a5,a5,-540 # 80a481a8 <waitq_valid>
    802013cc:	00847717          	auipc	a4,0x847
    802013d0:	fcc70713          	addi	a4,a4,-52 # 80a48398 <waitq_pool>
    802013d4:	4481                	li	s1,0
    802013d6:	06400613          	li	a2,100
    802013da:	a039                	j	802013e8 <findwaitq+0x42>
    802013dc:	2485                	addiw	s1,s1,1
    802013de:	0791                	addi	a5,a5,4
    802013e0:	03070713          	addi	a4,a4,48
    802013e4:	02c48e63          	beq	s1,a2,80201420 <findwaitq+0x7a>
    if(waitq_valid[i]&&waitq_pool[i].chan == chan){
    802013e8:	4394                	lw	a3,0(a5)
    802013ea:	daed                	beqz	a3,802013dc <findwaitq+0x36>
    802013ec:	6314                	ld	a3,0(a4)
    802013ee:	ff2697e3          	bne	a3,s2,802013dc <findwaitq+0x36>
      release(&waitq_pool_lk);
    802013f2:	00847517          	auipc	a0,0x847
    802013f6:	f4650513          	addi	a0,a0,-186 # 80a48338 <waitq_pool_lk>
    802013fa:	00007097          	auipc	ra,0x7
    802013fe:	fd0080e7          	jalr	-48(ra) # 802083ca <release>
      return waitq_pool+i;
    80201402:	00149513          	slli	a0,s1,0x1
    80201406:	9526                	add	a0,a0,s1
    80201408:	0512                	slli	a0,a0,0x4
    8020140a:	00847797          	auipc	a5,0x847
    8020140e:	f8e78793          	addi	a5,a5,-114 # 80a48398 <waitq_pool>
    80201412:	953e                	add	a0,a0,a5
}
    80201414:	60e2                	ld	ra,24(sp)
    80201416:	6442                	ld	s0,16(sp)
    80201418:	64a2                	ld	s1,8(sp)
    8020141a:	6902                	ld	s2,0(sp)
    8020141c:	6105                	addi	sp,sp,32
    8020141e:	8082                	ret
  release(&waitq_pool_lk);
    80201420:	00847517          	auipc	a0,0x847
    80201424:	f1850513          	addi	a0,a0,-232 # 80a48338 <waitq_pool_lk>
    80201428:	00007097          	auipc	ra,0x7
    8020142c:	fa2080e7          	jalr	-94(ra) # 802083ca <release>
  return NULL;
    80201430:	4501                	li	a0,0
    80201432:	b7cd                	j	80201414 <findwaitq+0x6e>

0000000080201434 <allocwaitq>:
allocwaitq(void* chan){
    80201434:	1101                	addi	sp,sp,-32
    80201436:	ec06                	sd	ra,24(sp)
    80201438:	e822                	sd	s0,16(sp)
    8020143a:	e426                	sd	s1,8(sp)
    8020143c:	e04a                	sd	s2,0(sp)
    8020143e:	1000                	addi	s0,sp,32
    80201440:	892a                	mv	s2,a0
  acquire(&waitq_pool_lk);
    80201442:	00847517          	auipc	a0,0x847
    80201446:	ef650513          	addi	a0,a0,-266 # 80a48338 <waitq_pool_lk>
    8020144a:	00007097          	auipc	ra,0x7
    8020144e:	f2c080e7          	jalr	-212(ra) # 80208376 <acquire>
  for(int i=0;i<WAITQ_NUM ;i++){
    80201452:	00847717          	auipc	a4,0x847
    80201456:	d5670713          	addi	a4,a4,-682 # 80a481a8 <waitq_valid>
    8020145a:	4781                	li	a5,0
    8020145c:	06400613          	li	a2,100
    if(!waitq_valid[i]){
    80201460:	4314                	lw	a3,0(a4)
    80201462:	ce99                	beqz	a3,80201480 <allocwaitq+0x4c>
  for(int i=0;i<WAITQ_NUM ;i++){
    80201464:	2785                	addiw	a5,a5,1
    80201466:	0711                	addi	a4,a4,4
    80201468:	fec79ce3          	bne	a5,a2,80201460 <allocwaitq+0x2c>
  release(&waitq_pool_lk);
    8020146c:	00847517          	auipc	a0,0x847
    80201470:	ecc50513          	addi	a0,a0,-308 # 80a48338 <waitq_pool_lk>
    80201474:	00007097          	auipc	ra,0x7
    80201478:	f56080e7          	jalr	-170(ra) # 802083ca <release>
  return NULL;
    8020147c:	4481                	li	s1,0
    8020147e:	a899                	j	802014d4 <allocwaitq+0xa0>
      waitq_valid[i] = 1;
    80201480:	00279693          	slli	a3,a5,0x2
    80201484:	00847717          	auipc	a4,0x847
    80201488:	d2470713          	addi	a4,a4,-732 # 80a481a8 <waitq_valid>
    8020148c:	9736                	add	a4,a4,a3
    8020148e:	4685                	li	a3,1
    80201490:	c314                	sw	a3,0(a4)
      queue_init(waitq_pool+i,chan);
    80201492:	00179493          	slli	s1,a5,0x1
    80201496:	94be                	add	s1,s1,a5
    80201498:	0492                	slli	s1,s1,0x4
    8020149a:	00847797          	auipc	a5,0x847
    8020149e:	efe78793          	addi	a5,a5,-258 # 80a48398 <waitq_pool>
    802014a2:	94be                	add	s1,s1,a5
	initlock(&q->lk,"queue");
    802014a4:	00011597          	auipc	a1,0x11
    802014a8:	03458593          	addi	a1,a1,52 # 802124d8 <rodata_start+0x4d8>
    802014ac:	00848513          	addi	a0,s1,8
    802014b0:	00007097          	auipc	ra,0x7
    802014b4:	e82080e7          	jalr	-382(ra) # 80208332 <initlock>
	list_init(&q->head);
    802014b8:	02048793          	addi	a5,s1,32
    802014bc:	f49c                	sd	a5,40(s1)
    802014be:	f09c                	sd	a5,32(s1)
	q->chan = chan;
    802014c0:	0124b023          	sd	s2,0(s1)
      release(&waitq_pool_lk);
    802014c4:	00847517          	auipc	a0,0x847
    802014c8:	e7450513          	addi	a0,a0,-396 # 80a48338 <waitq_pool_lk>
    802014cc:	00007097          	auipc	ra,0x7
    802014d0:	efe080e7          	jalr	-258(ra) # 802083ca <release>
}
    802014d4:	8526                	mv	a0,s1
    802014d6:	60e2                	ld	ra,24(sp)
    802014d8:	6442                	ld	s0,16(sp)
    802014da:	64a2                	ld	s1,8(sp)
    802014dc:	6902                	ld	s2,0(sp)
    802014de:	6105                	addi	sp,sp,32
    802014e0:	8082                	ret

00000000802014e2 <delwaitq>:
delwaitq(queue* q){
    802014e2:	1101                	addi	sp,sp,-32
    802014e4:	ec06                	sd	ra,24(sp)
    802014e6:	e822                	sd	s0,16(sp)
    802014e8:	e426                	sd	s1,8(sp)
    802014ea:	e04a                	sd	s2,0(sp)
    802014ec:	1000                	addi	s0,sp,32
    802014ee:	84aa                	mv	s1,a0
  acquire(&waitq_pool_lk);
    802014f0:	00847917          	auipc	s2,0x847
    802014f4:	e4890913          	addi	s2,s2,-440 # 80a48338 <waitq_pool_lk>
    802014f8:	854a                	mv	a0,s2
    802014fa:	00007097          	auipc	ra,0x7
    802014fe:	e7c080e7          	jalr	-388(ra) # 80208376 <acquire>
  int i = q - waitq_pool;
    80201502:	00847517          	auipc	a0,0x847
    80201506:	e9650513          	addi	a0,a0,-362 # 80a48398 <waitq_pool>
    8020150a:	8c89                	sub	s1,s1,a0
    8020150c:	8491                	srai	s1,s1,0x4
  waitq_valid[i] = 0;
    8020150e:	00014797          	auipc	a5,0x14
    80201512:	de27b783          	ld	a5,-542(a5) # 802152f0 <erodata>
    80201516:	02f484bb          	mulw	s1,s1,a5
    8020151a:	048a                	slli	s1,s1,0x2
    8020151c:	00847797          	auipc	a5,0x847
    80201520:	c8c78793          	addi	a5,a5,-884 # 80a481a8 <waitq_valid>
    80201524:	94be                	add	s1,s1,a5
    80201526:	0004a023          	sw	zero,0(s1)
  release(&waitq_pool_lk);
    8020152a:	854a                	mv	a0,s2
    8020152c:	00007097          	auipc	ra,0x7
    80201530:	e9e080e7          	jalr	-354(ra) # 802083ca <release>
}
    80201534:	60e2                	ld	ra,24(sp)
    80201536:	6442                	ld	s0,16(sp)
    80201538:	64a2                	ld	s1,8(sp)
    8020153a:	6902                	ld	s2,0(sp)
    8020153c:	6105                	addi	sp,sp,32
    8020153e:	8082                	ret

0000000080201540 <readyq_push>:
readyq_push(struct proc* p){
    80201540:	7179                	addi	sp,sp,-48
    80201542:	f406                	sd	ra,40(sp)
    80201544:	f022                	sd	s0,32(sp)
    80201546:	ec26                	sd	s1,24(sp)
    80201548:	e84a                	sd	s2,16(sp)
    8020154a:	e44e                	sd	s3,8(sp)
    8020154c:	1800                	addi	s0,sp,48
    8020154e:	84aa                	mv	s1,a0
}

static inline void qlock(queue *q){
	acquire(&q->lk);
    80201550:	00847997          	auipc	s3,0x847
    80201554:	c5898993          	addi	s3,s3,-936 # 80a481a8 <waitq_valid>
    80201558:	00847917          	auipc	s2,0x847
    8020155c:	e1890913          	addi	s2,s2,-488 # 80a48370 <readyq+0x8>
    80201560:	854a                	mv	a0,s2
    80201562:	00007097          	auipc	ra,0x7
    80201566:	e14080e7          	jalr	-492(ra) # 80208376 <acquire>
	return list_empty(&q->head);
}

static inline void queue_push(queue* q,struct proc* p){
	qlock(q);
	list_add_before(&q->head,&p->dlist);
    8020156a:	14048713          	addi	a4,s1,320
	__list_insert(node, beforeme->prev, beforeme);
    8020156e:	1e09b783          	ld	a5,480(s3)
	prev->next = next->prev = node;
    80201572:	1ee9b023          	sd	a4,480(s3)
    80201576:	e798                	sd	a4,8(a5)
	node->next = next;
    80201578:	00847717          	auipc	a4,0x847
    8020157c:	e1070713          	addi	a4,a4,-496 # 80a48388 <readyq+0x20>
    80201580:	14e4b423          	sd	a4,328(s1)
	node->prev = prev;
    80201584:	14f4b023          	sd	a5,320(s1)
	p->q = (uint64)q;
    80201588:	00847797          	auipc	a5,0x847
    8020158c:	de078793          	addi	a5,a5,-544 # 80a48368 <readyq>
    80201590:	16f4bc23          	sd	a5,376(s1)
	release(&q->lk);
    80201594:	854a                	mv	a0,s2
    80201596:	00007097          	auipc	ra,0x7
    8020159a:	e34080e7          	jalr	-460(ra) # 802083ca <release>
}
    8020159e:	70a2                	ld	ra,40(sp)
    802015a0:	7402                	ld	s0,32(sp)
    802015a2:	64e2                	ld	s1,24(sp)
    802015a4:	6942                	ld	s2,16(sp)
    802015a6:	69a2                	ld	s3,8(sp)
    802015a8:	6145                	addi	sp,sp,48
    802015aa:	8082                	ret

00000000802015ac <readyq_pop>:
readyq_pop(){
    802015ac:	1101                	addi	sp,sp,-32
    802015ae:	ec06                	sd	ra,24(sp)
    802015b0:	e822                	sd	s0,16(sp)
    802015b2:	e426                	sd	s1,8(sp)
    802015b4:	1000                	addi	s0,sp,32
	acquire(&q->lk);
    802015b6:	00847517          	auipc	a0,0x847
    802015ba:	dba50513          	addi	a0,a0,-582 # 80a48370 <readyq+0x8>
    802015be:	00007097          	auipc	ra,0x7
    802015c2:	db8080e7          	jalr	-584(ra) # 80208376 <acquire>
	return head->next == head;
    802015c6:	00847797          	auipc	a5,0x847
    802015ca:	dca7b783          	ld	a5,-566(a5) # 80a48390 <readyq+0x28>
}

static inline struct proc* queue_pop(queue* q){
	struct proc* p = NULL;
	qlock(q);
	if(!queue_empty(q)){
    802015ce:	00847717          	auipc	a4,0x847
    802015d2:	dba70713          	addi	a4,a4,-582 # 80a48388 <readyq+0x20>
    802015d6:	04e78563          	beq	a5,a4,80201620 <readyq_pop+0x74>
	if(node==NULL){
    802015da:	cb9d                	beqz	a5,80201610 <readyq_pop+0x64>
	__list_link(node->prev, node->next);
    802015dc:	6394                	ld	a3,0(a5)
    802015de:	6798                	ld	a4,8(a5)
	prev->next = next;
    802015e0:	e698                	sd	a4,8(a3)
	next->prev = prev;
    802015e2:	e314                	sd	a3,0(a4)
		struct list* l = list_next(&q->head);
		list_del(l);
		p = dlist_entry(l, struct proc, dlist);
    802015e4:	ec078493          	addi	s1,a5,-320
		p->q = 0;
    802015e8:	0207bc23          	sd	zero,56(a5)
		p->dlist.prev = NULL;
    802015ec:	0007b023          	sd	zero,0(a5)
		p->dlist.next = NULL;
    802015f0:	0007b423          	sd	zero,8(a5)
	release(&q->lk);
    802015f4:	00847517          	auipc	a0,0x847
    802015f8:	d7c50513          	addi	a0,a0,-644 # 80a48370 <readyq+0x8>
    802015fc:	00007097          	auipc	ra,0x7
    80201600:	dce080e7          	jalr	-562(ra) # 802083ca <release>
}
    80201604:	8526                	mv	a0,s1
    80201606:	60e2                	ld	ra,24(sp)
    80201608:	6442                	ld	s0,16(sp)
    8020160a:	64a2                	ld	s1,8(sp)
    8020160c:	6105                	addi	sp,sp,32
    8020160e:	8082                	ret
	  panic("[list next]list is null");
    80201610:	00011517          	auipc	a0,0x11
    80201614:	b1050513          	addi	a0,a0,-1264 # 80212120 <rodata_start+0x120>
    80201618:	00007097          	auipc	ra,0x7
    8020161c:	0ce080e7          	jalr	206(ra) # 802086e6 <panic>
	struct proc* p = NULL;
    80201620:	4481                	li	s1,0
    80201622:	bfc9                	j	802015f4 <readyq_pop+0x48>

0000000080201624 <waitq_push>:
waitq_push(queue *q,struct proc* p){
    80201624:	7179                	addi	sp,sp,-48
    80201626:	f406                	sd	ra,40(sp)
    80201628:	f022                	sd	s0,32(sp)
    8020162a:	ec26                	sd	s1,24(sp)
    8020162c:	e84a                	sd	s2,16(sp)
    8020162e:	e44e                	sd	s3,8(sp)
    80201630:	1800                	addi	s0,sp,48
    80201632:	84aa                	mv	s1,a0
    80201634:	892e                	mv	s2,a1
	acquire(&q->lk);
    80201636:	00850993          	addi	s3,a0,8
    8020163a:	854e                	mv	a0,s3
    8020163c:	00007097          	auipc	ra,0x7
    80201640:	d3a080e7          	jalr	-710(ra) # 80208376 <acquire>
	list_add_before(&q->head,&p->dlist);
    80201644:	14090713          	addi	a4,s2,320
	__list_insert(node, beforeme->prev, beforeme);
    80201648:	709c                	ld	a5,32(s1)
	prev->next = next->prev = node;
    8020164a:	f098                	sd	a4,32(s1)
    8020164c:	e798                	sd	a4,8(a5)
    8020164e:	02048713          	addi	a4,s1,32
	node->next = next;
    80201652:	14e93423          	sd	a4,328(s2)
	node->prev = prev;
    80201656:	14f93023          	sd	a5,320(s2)
	p->q = (uint64)q;
    8020165a:	16993c23          	sd	s1,376(s2)
	release(&q->lk);
    8020165e:	854e                	mv	a0,s3
    80201660:	00007097          	auipc	ra,0x7
    80201664:	d6a080e7          	jalr	-662(ra) # 802083ca <release>
}
    80201668:	70a2                	ld	ra,40(sp)
    8020166a:	7402                	ld	s0,32(sp)
    8020166c:	64e2                	ld	s1,24(sp)
    8020166e:	6942                	ld	s2,16(sp)
    80201670:	69a2                	ld	s3,8(sp)
    80201672:	6145                	addi	sp,sp,48
    80201674:	8082                	ret

0000000080201676 <waitq_pop>:
waitq_pop(queue *q){
    80201676:	1101                	addi	sp,sp,-32
    80201678:	ec06                	sd	ra,24(sp)
    8020167a:	e822                	sd	s0,16(sp)
    8020167c:	e426                	sd	s1,8(sp)
    8020167e:	e04a                	sd	s2,0(sp)
    80201680:	1000                	addi	s0,sp,32
    80201682:	84aa                	mv	s1,a0
	acquire(&q->lk);
    80201684:	00850913          	addi	s2,a0,8
    80201688:	854a                	mv	a0,s2
    8020168a:	00007097          	auipc	ra,0x7
    8020168e:	cec080e7          	jalr	-788(ra) # 80208376 <acquire>
	return head->next == head;
    80201692:	749c                	ld	a5,40(s1)
	return list_empty(&q->head);
    80201694:	02048493          	addi	s1,s1,32
	if(!queue_empty(q)){
    80201698:	04978363          	beq	a5,s1,802016de <waitq_pop+0x68>
	if(node==NULL){
    8020169c:	cb8d                	beqz	a5,802016ce <waitq_pop+0x58>
	__list_link(node->prev, node->next);
    8020169e:	6394                	ld	a3,0(a5)
    802016a0:	6798                	ld	a4,8(a5)
	prev->next = next;
    802016a2:	e698                	sd	a4,8(a3)
	next->prev = prev;
    802016a4:	e314                	sd	a3,0(a4)
		p = dlist_entry(l, struct proc, dlist);
    802016a6:	ec078493          	addi	s1,a5,-320
		p->q = 0;
    802016aa:	0207bc23          	sd	zero,56(a5)
		p->dlist.prev = NULL;
    802016ae:	0007b023          	sd	zero,0(a5)
		p->dlist.next = NULL;
    802016b2:	0007b423          	sd	zero,8(a5)
	release(&q->lk);
    802016b6:	854a                	mv	a0,s2
    802016b8:	00007097          	auipc	ra,0x7
    802016bc:	d12080e7          	jalr	-750(ra) # 802083ca <release>
}
    802016c0:	8526                	mv	a0,s1
    802016c2:	60e2                	ld	ra,24(sp)
    802016c4:	6442                	ld	s0,16(sp)
    802016c6:	64a2                	ld	s1,8(sp)
    802016c8:	6902                	ld	s2,0(sp)
    802016ca:	6105                	addi	sp,sp,32
    802016cc:	8082                	ret
	  panic("[list next]list is null");
    802016ce:	00011517          	auipc	a0,0x11
    802016d2:	a5250513          	addi	a0,a0,-1454 # 80212120 <rodata_start+0x120>
    802016d6:	00007097          	auipc	ra,0x7
    802016da:	010080e7          	jalr	16(ra) # 802086e6 <panic>
	struct proc* p = NULL;
    802016de:	4481                	li	s1,0
    802016e0:	bfd9                	j	802016b6 <waitq_pop+0x40>

00000000802016e2 <scheduler>:
void scheduler(){
    802016e2:	715d                	addi	sp,sp,-80
    802016e4:	e486                	sd	ra,72(sp)
    802016e6:	e0a2                	sd	s0,64(sp)
    802016e8:	fc26                	sd	s1,56(sp)
    802016ea:	f84a                	sd	s2,48(sp)
    802016ec:	f44e                	sd	s3,40(sp)
    802016ee:	f052                	sd	s4,32(sp)
    802016f0:	ec56                	sd	s5,24(sp)
    802016f2:	e85a                	sd	s6,16(sp)
    802016f4:	e45e                	sd	s7,8(sp)
    802016f6:	e062                	sd	s8,0(sp)
    802016f8:	0880                	addi	s0,sp,80
  struct cpu *c = mycpu();
    802016fa:	0000a097          	auipc	ra,0xa
    802016fe:	d36080e7          	jalr	-714(ra) # 8020b430 <mycpu>
    80201702:	8a2a                	mv	s4,a0
  c->proc = 0;
    80201704:	00053023          	sd	zero,0(a0)
      if(p->state == RUNNABLE) {
    80201708:	4989                	li	s3,2
        p->state = RUNNING;
    8020170a:	4c0d                	li	s8,3
        w_satp(MAKE_SATP(p->pagetable));
    8020170c:	5afd                	li	s5,-1
    8020170e:	1afe                	slli	s5,s5,0x3f
        swtch(&c->context, &p->context);
    80201710:	00850b93          	addi	s7,a0,8
        w_satp(MAKE_SATP(kernel_pagetable));
    80201714:	0086bb17          	auipc	s6,0x86b
    80201718:	8e4b0b13          	addi	s6,s6,-1820 # 80a6bff8 <kernel_pagetable>
    8020171c:	a0a1                	j	80201764 <scheduler+0x82>
        p->state = RUNNING;
    8020171e:	0384a023          	sw	s8,32(s1)
        c->proc = p;
    80201722:	009a3023          	sd	s1,0(s4)
        w_satp(MAKE_SATP(p->pagetable));
    80201726:	70bc                	ld	a5,96(s1)
    80201728:	83b1                	srli	a5,a5,0xc
    8020172a:	0157e7b3          	or	a5,a5,s5
  asm volatile("csrw satp, %0" : : "r" (x));
    8020172e:	18079073          	csrw	satp,a5
static inline void
sfence_vma()
{
  // the zero, zero means flush all TLB entries.
  // asm volatile("sfence.vma zero, zero");
  asm volatile("sfence.vma");
    80201732:	12000073          	sfence.vma
        swtch(&c->context, &p->context);
    80201736:	07048593          	addi	a1,s1,112
    8020173a:	855e                	mv	a0,s7
    8020173c:	00006097          	auipc	ra,0x6
    80201740:	650080e7          	jalr	1616(ra) # 80207d8c <swtch>
        w_satp(MAKE_SATP(kernel_pagetable));
    80201744:	000b3783          	ld	a5,0(s6)
    80201748:	83b1                	srli	a5,a5,0xc
    8020174a:	0157e7b3          	or	a5,a5,s5
  asm volatile("csrw satp, %0" : : "r" (x));
    8020174e:	18079073          	csrw	satp,a5
  asm volatile("sfence.vma");
    80201752:	12000073          	sfence.vma
        c->proc = 0;
    80201756:	000a3023          	sd	zero,0(s4)
      release(&p->lock);
    8020175a:	854a                	mv	a0,s2
    8020175c:	00007097          	auipc	ra,0x7
    80201760:	c6e080e7          	jalr	-914(ra) # 802083ca <release>
    struct proc* p = readyq_pop();  //...
    80201764:	00000097          	auipc	ra,0x0
    80201768:	e48080e7          	jalr	-440(ra) # 802015ac <readyq_pop>
    8020176c:	84aa                	mv	s1,a0
    if(p){
    8020176e:	cd01                	beqz	a0,80201786 <scheduler+0xa4>
      acquire(&p->lock);
    80201770:	00850913          	addi	s2,a0,8
    80201774:	854a                	mv	a0,s2
    80201776:	00007097          	auipc	ra,0x7
    8020177a:	c00080e7          	jalr	-1024(ra) # 80208376 <acquire>
      if(p->state == RUNNABLE) {
    8020177e:	509c                	lw	a5,32(s1)
    80201780:	fd379de3          	bne	a5,s3,8020175a <scheduler+0x78>
    80201784:	bf69                	j	8020171e <scheduler+0x3c>
  asm volatile("csrr %0, sstatus" : "=r" (x) );
    80201786:	100027f3          	csrr	a5,sstatus
  w_sstatus(r_sstatus() | SSTATUS_SIE);
    8020178a:	0027e793          	ori	a5,a5,2
  asm volatile("csrw sstatus, %0" : : "r" (x));
    8020178e:	10079073          	csrw	sstatus,a5
      asm volatile("wfi");
    80201792:	10500073          	wfi
    80201796:	b7f9                	j	80201764 <scheduler+0x82>

0000000080201798 <allocpid>:
allocpid() {
    80201798:	1101                	addi	sp,sp,-32
    8020179a:	ec06                	sd	ra,24(sp)
    8020179c:	e822                	sd	s0,16(sp)
    8020179e:	e426                	sd	s1,8(sp)
    802017a0:	e04a                	sd	s2,0(sp)
    802017a2:	1000                	addi	s0,sp,32
  acquire(&pid_lock);
    802017a4:	00847917          	auipc	s2,0x847
    802017a8:	bac90913          	addi	s2,s2,-1108 # 80a48350 <pid_lock>
    802017ac:	854a                	mv	a0,s2
    802017ae:	00007097          	auipc	ra,0x7
    802017b2:	bc8080e7          	jalr	-1080(ra) # 80208376 <acquire>
  pid = nextpid;
    802017b6:	00815797          	auipc	a5,0x815
    802017ba:	87a78793          	addi	a5,a5,-1926 # 80a16030 <nextpid>
    802017be:	4384                	lw	s1,0(a5)
  nextpid = nextpid + 1;
    802017c0:	0014871b          	addiw	a4,s1,1
    802017c4:	c398                	sw	a4,0(a5)
  release(&pid_lock);
    802017c6:	854a                	mv	a0,s2
    802017c8:	00007097          	auipc	ra,0x7
    802017cc:	c02080e7          	jalr	-1022(ra) # 802083ca <release>
}
    802017d0:	8526                	mv	a0,s1
    802017d2:	60e2                	ld	ra,24(sp)
    802017d4:	6442                	ld	s0,16(sp)
    802017d6:	64a2                	ld	s1,8(sp)
    802017d8:	6902                	ld	s2,0(sp)
    802017da:	6105                	addi	sp,sp,32
    802017dc:	8082                	ret

00000000802017de <findproc>:
{
    802017de:	1141                	addi	sp,sp,-16
    802017e0:	e422                	sd	s0,8(sp)
    802017e2:	0800                	addi	s0,sp,16
    802017e4:	872a                	mv	a4,a0
  for(struct proc* p = proc;p!=proc+NPROC;p++){
    802017e6:	00848517          	auipc	a0,0x848
    802017ea:	e7250513          	addi	a0,a0,-398 # 80a49658 <proc>
    802017ee:	00853697          	auipc	a3,0x853
    802017f2:	3aa68693          	addi	a3,a3,938 # 80a54b98 <firstuserinit>
    802017f6:	a029                	j	80201800 <findproc+0x22>
    802017f8:	1d050513          	addi	a0,a0,464
    802017fc:	00d50a63          	beq	a0,a3,80201810 <findproc+0x32>
    if(p->pid == pid&& p->state !=UNUSED){
    80201800:	413c                	lw	a5,64(a0)
    80201802:	fee79be3          	bne	a5,a4,802017f8 <findproc+0x1a>
    80201806:	511c                	lw	a5,32(a0)
    80201808:	dbe5                	beqz	a5,802017f8 <findproc+0x1a>
}
    8020180a:	6422                	ld	s0,8(sp)
    8020180c:	0141                	addi	sp,sp,16
    8020180e:	8082                	ret
  return NULL;
    80201810:	4501                	li	a0,0
    80201812:	bfe5                	j	8020180a <findproc+0x2c>

0000000080201814 <proc_pagetable>:
{
    80201814:	7139                	addi	sp,sp,-64
    80201816:	fc06                	sd	ra,56(sp)
    80201818:	f822                	sd	s0,48(sp)
    8020181a:	f426                	sd	s1,40(sp)
    8020181c:	f04a                	sd	s2,32(sp)
    8020181e:	ec4e                	sd	s3,24(sp)
    80201820:	e852                	sd	s4,16(sp)
    80201822:	e456                	sd	s5,8(sp)
    80201824:	0080                	addi	s0,sp,64
    80201826:	892a                	mv	s2,a0
    80201828:	89ae                	mv	s3,a1
    8020182a:	8ab2                	mv	s5,a2
  pagetable = kvmcreate();
    8020182c:	00008097          	auipc	ra,0x8
    80201830:	588080e7          	jalr	1416(ra) # 80209db4 <kvmcreate>
    80201834:	8a2a                	mv	s4,a0
  if(pagetable == 0)
    80201836:	cd15                	beqz	a0,80201872 <proc_pagetable+0x5e>
  p->pagetable = pagetable;
    80201838:	06a93023          	sd	a0,96(s2)
  if(pp == NULL)
    8020183c:	02098463          	beqz	s3,80201864 <proc_pagetable+0x50>
    if((nvma = vma_copy(p, pp->vma)) == NULL)
    80201840:	1709b583          	ld	a1,368(s3)
    80201844:	854a                	mv	a0,s2
    80201846:	0000a097          	auipc	ra,0xa
    8020184a:	44a080e7          	jalr	1098(ra) # 8020bc90 <vma_copy>
    8020184e:	84aa                	mv	s1,a0
    80201850:	c521                	beqz	a0,80201898 <proc_pagetable+0x84>
    nvma = nvma->next;
    80201852:	6124                	ld	s1,64(a0)
    if(thread_create)
    80201854:	040a9b63          	bnez	s5,802018aa <proc_pagetable+0x96>
      while(nvma != p->vma)
    80201858:	17093783          	ld	a5,368(s2)
        if(nvma->type != TRAP && vma_deep_mapping(pp->pagetable, p->pagetable, nvma) < 0)
    8020185c:	4aa1                	li	s5,8
      while(nvma != p->vma)
    8020185e:	0af49a63          	bne	s1,a5,80201912 <proc_pagetable+0xfe>
    80201862:	a801                	j	80201872 <proc_pagetable+0x5e>
    if(vma_list_init(p) == NULL)
    80201864:	854a                	mv	a0,s2
    80201866:	0000a097          	auipc	ra,0xa
    8020186a:	268080e7          	jalr	616(ra) # 8020bace <vma_list_init>
    8020186e:	84aa                	mv	s1,a0
    80201870:	c919                	beqz	a0,80201886 <proc_pagetable+0x72>
}
    80201872:	8552                	mv	a0,s4
    80201874:	70e2                	ld	ra,56(sp)
    80201876:	7442                	ld	s0,48(sp)
    80201878:	74a2                	ld	s1,40(sp)
    8020187a:	7902                	ld	s2,32(sp)
    8020187c:	69e2                	ld	s3,24(sp)
    8020187e:	6a42                	ld	s4,16(sp)
    80201880:	6aa2                	ld	s5,8(sp)
    80201882:	6121                	addi	sp,sp,64
    80201884:	8082                	ret
      freewalk(pagetable);
    80201886:	8552                	mv	a0,s4
    80201888:	00008097          	auipc	ra,0x8
    8020188c:	48a080e7          	jalr	1162(ra) # 80209d12 <freewalk>
      p->pagetable = NULL;
    80201890:	06093023          	sd	zero,96(s2)
      return NULL;
    80201894:	8a26                	mv	s4,s1
    80201896:	bff1                	j	80201872 <proc_pagetable+0x5e>
      freepage(pagetable);
    80201898:	8552                	mv	a0,s4
    8020189a:	00008097          	auipc	ra,0x8
    8020189e:	986080e7          	jalr	-1658(ra) # 80209220 <_freepage>
      p->pagetable = NULL;
    802018a2:	06093023          	sd	zero,96(s2)
      return NULL;
    802018a6:	8a26                	mv	s4,s1
    802018a8:	b7e9                	j	80201872 <proc_pagetable+0x5e>
      while(nvma != p->vma)
    802018aa:	17093783          	ld	a5,368(s2)
    802018ae:	fcf482e3          	beq	s1,a5,80201872 <proc_pagetable+0x5e>
        if(nvma->type != TRAP && vma_shallow_mapping(pp->pagetable, p->pagetable, nvma) < 0)
    802018b2:	4aa1                	li	s5,8
    802018b4:	a031                	j	802018c0 <proc_pagetable+0xac>
        nvma = nvma->next;
    802018b6:	60a4                	ld	s1,64(s1)
      while(nvma != p->vma)
    802018b8:	17093783          	ld	a5,368(s2)
    802018bc:	fa978be3          	beq	a5,s1,80201872 <proc_pagetable+0x5e>
        if(nvma->type != TRAP && vma_shallow_mapping(pp->pagetable, p->pagetable, nvma) < 0)
    802018c0:	409c                	lw	a5,0(s1)
    802018c2:	ff578ae3          	beq	a5,s5,802018b6 <proc_pagetable+0xa2>
    802018c6:	8626                	mv	a2,s1
    802018c8:	06093583          	ld	a1,96(s2)
    802018cc:	0609b503          	ld	a0,96(s3)
    802018d0:	0000a097          	auipc	ra,0xa
    802018d4:	5da080e7          	jalr	1498(ra) # 8020beaa <vma_shallow_mapping>
    802018d8:	fc055fe3          	bgez	a0,802018b6 <proc_pagetable+0xa2>
          __debug_warn("[proc_pagetable] vma shallow mapping fail\n");
    802018dc:	00011517          	auipc	a0,0x11
    802018e0:	85c50513          	addi	a0,a0,-1956 # 80212138 <rodata_start+0x138>
    802018e4:	00007097          	auipc	ra,0x7
    802018e8:	1d8080e7          	jalr	472(ra) # 80208abc <__debug_warn>
          free_vma_list(p);
    802018ec:	854a                	mv	a0,s2
    802018ee:	0000a097          	auipc	ra,0xa
    802018f2:	12a080e7          	jalr	298(ra) # 8020ba18 <free_vma_list>
          freepage(pagetable);
    802018f6:	8552                	mv	a0,s4
    802018f8:	00008097          	auipc	ra,0x8
    802018fc:	928080e7          	jalr	-1752(ra) # 80209220 <_freepage>
          p->pagetable = NULL;
    80201900:	06093023          	sd	zero,96(s2)
          return NULL;
    80201904:	4a01                	li	s4,0
    80201906:	b7b5                	j	80201872 <proc_pagetable+0x5e>
        nvma = nvma->next;
    80201908:	60a4                	ld	s1,64(s1)
      while(nvma != p->vma)
    8020190a:	17093783          	ld	a5,368(s2)
    8020190e:	f69782e3          	beq	a5,s1,80201872 <proc_pagetable+0x5e>
        if(nvma->type != TRAP && vma_deep_mapping(pp->pagetable, p->pagetable, nvma) < 0)
    80201912:	409c                	lw	a5,0(s1)
    80201914:	ff578ae3          	beq	a5,s5,80201908 <proc_pagetable+0xf4>
    80201918:	8626                	mv	a2,s1
    8020191a:	06093583          	ld	a1,96(s2)
    8020191e:	0609b503          	ld	a0,96(s3)
    80201922:	0000a097          	auipc	ra,0xa
    80201926:	47e080e7          	jalr	1150(ra) # 8020bda0 <vma_deep_mapping>
    8020192a:	fc055fe3          	bgez	a0,80201908 <proc_pagetable+0xf4>
          __debug_warn("[proc_pagetable] vma deep mapping fail\n");
    8020192e:	00011517          	auipc	a0,0x11
    80201932:	83a50513          	addi	a0,a0,-1990 # 80212168 <rodata_start+0x168>
    80201936:	00007097          	auipc	ra,0x7
    8020193a:	186080e7          	jalr	390(ra) # 80208abc <__debug_warn>
          free_vma_list(p);
    8020193e:	854a                	mv	a0,s2
    80201940:	0000a097          	auipc	ra,0xa
    80201944:	0d8080e7          	jalr	216(ra) # 8020ba18 <free_vma_list>
          freepage(pagetable);
    80201948:	8552                	mv	a0,s4
    8020194a:	00008097          	auipc	ra,0x8
    8020194e:	8d6080e7          	jalr	-1834(ra) # 80209220 <_freepage>
          p->pagetable = NULL;
    80201952:	06093023          	sd	zero,96(s2)
          return NULL;
    80201956:	4a01                	li	s4,0
    80201958:	bf29                	j	80201872 <proc_pagetable+0x5e>

000000008020195a <allocproc>:
{
    8020195a:	7139                	addi	sp,sp,-64
    8020195c:	fc06                	sd	ra,56(sp)
    8020195e:	f822                	sd	s0,48(sp)
    80201960:	f426                	sd	s1,40(sp)
    80201962:	f04a                	sd	s2,32(sp)
    80201964:	ec4e                	sd	s3,24(sp)
    80201966:	e852                	sd	s4,16(sp)
    80201968:	e456                	sd	s5,8(sp)
    8020196a:	0080                	addi	s0,sp,64
    8020196c:	8aaa                	mv	s5,a0
    8020196e:	8a2e                	mv	s4,a1
  for(p = proc; p < &proc[NPROC]; p++) {
    80201970:	00848497          	auipc	s1,0x848
    80201974:	ce848493          	addi	s1,s1,-792 # 80a49658 <proc>
    80201978:	00853997          	auipc	s3,0x853
    8020197c:	22098993          	addi	s3,s3,544 # 80a54b98 <firstuserinit>
    acquire(&p->lock);
    80201980:	00848913          	addi	s2,s1,8
    80201984:	854a                	mv	a0,s2
    80201986:	00007097          	auipc	ra,0x7
    8020198a:	9f0080e7          	jalr	-1552(ra) # 80208376 <acquire>
    if(p->state == UNUSED) {
    8020198e:	509c                	lw	a5,32(s1)
    80201990:	cf81                	beqz	a5,802019a8 <allocproc+0x4e>
      release(&p->lock);
    80201992:	854a                	mv	a0,s2
    80201994:	00007097          	auipc	ra,0x7
    80201998:	a36080e7          	jalr	-1482(ra) # 802083ca <release>
  for(p = proc; p < &proc[NPROC]; p++) {
    8020199c:	1d048493          	addi	s1,s1,464
    802019a0:	ff3490e3          	bne	s1,s3,80201980 <allocproc+0x26>
  return NULL;
    802019a4:	4481                	li	s1,0
    802019a6:	a235                	j	80201ad2 <allocproc+0x178>
  p->umask = 0;
    802019a8:	1c04a023          	sw	zero,448(s1)
  p->pid = allocpid();
    802019ac:	00000097          	auipc	ra,0x0
    802019b0:	dec080e7          	jalr	-532(ra) # 80201798 <allocpid>
    802019b4:	c0a8                	sw	a0,64(s1)
  p->killed = 0;
    802019b6:	0204ac23          	sw	zero,56(s1)
  p->mf = NULL;
    802019ba:	1804b023          	sd	zero,384(s1)
  p->filelimit = NOFILE;
    802019be:	0c800793          	li	a5,200
    802019c2:	f0fc                	sd	a5,224(s1)
  p->robust_list = NULL;
    802019c4:	1a04bc23          	sd	zero,440(s1)
  p->clear_child_tid = NULL;
    802019c8:	1a04b823          	sd	zero,432(s1)
  p->set_child_tid = NULL;
    802019cc:	1a04b423          	sd	zero,424(s1)
  p->vma = NULL;
    802019d0:	1604b823          	sd	zero,368(s1)
  p->uid = 0;
    802019d4:	0404a223          	sw	zero,68(s1)
  p->gid = 0;
    802019d8:	0404a423          	sw	zero,72(s1)
  p->vswtch = 0;
    802019dc:	1c04a223          	sw	zero,452(s1)
  p->ivswtch = 0;
    802019e0:	1c04a423          	sw	zero,456(s1)
  p->sleep_expire = 0;
    802019e4:	1004bc23          	sd	zero,280(s1)
  p->q = NULL;
    802019e8:	1604bc23          	sd	zero,376(s1)
  p->proc_tms.utime = 0;
    802019ec:	1204b023          	sd	zero,288(s1)
  p->proc_tms.stime = 0;
    802019f0:	1204b423          	sd	zero,296(s1)
  p->proc_tms.cutime = 0;
    802019f4:	1204b823          	sd	zero,304(s1)
  p->proc_tms.cstime = 0;
    802019f8:	1204bc23          	sd	zero,312(s1)
  list_init(&p->c_list);
    802019fc:	15048793          	addi	a5,s1,336
	node->prev = node->next = node;
    80201a00:	14f4bc23          	sd	a5,344(s1)
    80201a04:	14f4b823          	sd	a5,336(s1)
  list_init(&p->sib_list);
    80201a08:	16048793          	addi	a5,s1,352
    80201a0c:	16f4b423          	sd	a5,360(s1)
    80201a10:	16f4b023          	sd	a5,352(s1)
  if((p->trapframe = allocpage()) == NULL){
    80201a14:	00007097          	auipc	ra,0x7
    80201a18:	76c080e7          	jalr	1900(ra) # 80209180 <_allocpage>
    80201a1c:	f4a8                	sd	a0,104(s1)
    80201a1e:	c561                	beqz	a0,80201ae6 <allocproc+0x18c>
  p->kstack = (uint64)allocpage();
    80201a20:	00007097          	auipc	ra,0x7
    80201a24:	760080e7          	jalr	1888(ra) # 80209180 <_allocpage>
    80201a28:	e8a8                	sd	a0,80(s1)
  if ((proc_pagetable(p, pp, thread_create)) == NULL) {
    80201a2a:	8652                	mv	a2,s4
    80201a2c:	85d6                	mv	a1,s5
    80201a2e:	8526                	mv	a0,s1
    80201a30:	00000097          	auipc	ra,0x0
    80201a34:	de4080e7          	jalr	-540(ra) # 80201814 <proc_pagetable>
    80201a38:	89aa                	mv	s3,a0
    80201a3a:	cd4d                	beqz	a0,80201af4 <allocproc+0x19a>
  p->ofile = kmalloc(NOFILE*sizeof(struct file*));
    80201a3c:	64000513          	li	a0,1600
    80201a40:	00008097          	auipc	ra,0x8
    80201a44:	9c8080e7          	jalr	-1592(ra) # 80209408 <kmalloc>
    80201a48:	f4e8                	sd	a0,232(s1)
  p->exec_close = kmalloc(NOFILE*sizeof(int));
    80201a4a:	32000513          	li	a0,800
    80201a4e:	00008097          	auipc	ra,0x8
    80201a52:	9ba080e7          	jalr	-1606(ra) # 80209408 <kmalloc>
    80201a56:	f8e8                	sd	a0,240(s1)
  if(!p->ofile){
    80201a58:	74f8                	ld	a4,232(s1)
    80201a5a:	4781                	li	a5,0
  for(int fd = 0; fd < NOFILE; fd++){
    80201a5c:	32000613          	li	a2,800
  if(!p->ofile){
    80201a60:	c755                	beqz	a4,80201b0c <allocproc+0x1b2>
    p->ofile[fd] = NULL;
    80201a62:	74f8                	ld	a4,232(s1)
    80201a64:	00179693          	slli	a3,a5,0x1
    80201a68:	9736                	add	a4,a4,a3
    80201a6a:	00073023          	sd	zero,0(a4)
    p->exec_close[fd] = 0;
    80201a6e:	78f8                	ld	a4,240(s1)
    80201a70:	973e                	add	a4,a4,a5
    80201a72:	00072023          	sw	zero,0(a4)
  for(int fd = 0; fd < NOFILE; fd++){
    80201a76:	0791                	addi	a5,a5,4
    80201a78:	fec795e3          	bne	a5,a2,80201a62 <allocproc+0x108>
  memset(p->ofile, 0, NOFILE*sizeof(struct file*));
    80201a7c:	64000613          	li	a2,1600
    80201a80:	4581                	li	a1,0
    80201a82:	74e8                	ld	a0,232(s1)
    80201a84:	fffff097          	auipc	ra,0xfffff
    80201a88:	2f0080e7          	jalr	752(ra) # 80200d74 <memset>
  memset(&p->context, 0, sizeof(p->context));
    80201a8c:	07000613          	li	a2,112
    80201a90:	4581                	li	a1,0
    80201a92:	07048513          	addi	a0,s1,112
    80201a96:	fffff097          	auipc	ra,0xfffff
    80201a9a:	2de080e7          	jalr	734(ra) # 80200d74 <memset>
  p->context.ra = (uint64)forkret;
    80201a9e:	fffff797          	auipc	a5,0xfffff
    80201aa2:	73278793          	addi	a5,a5,1842 # 802011d0 <forkret>
    80201aa6:	f8bc                	sd	a5,112(s1)
  p->context.sp = p->kstack + PGSIZE;
    80201aa8:	68bc                	ld	a5,80(s1)
    80201aaa:	6705                	lui	a4,0x1
    80201aac:	97ba                	add	a5,a5,a4
    80201aae:	fcbc                	sd	a5,120(s1)
  p->proc_tms.utime = 0;
    80201ab0:	1204b023          	sd	zero,288(s1)
  p->proc_tms.stime = 0;
    80201ab4:	1204b423          	sd	zero,296(s1)
  p->proc_tms.cutime = 1;
    80201ab8:	4785                	li	a5,1
    80201aba:	12f4b823          	sd	a5,304(s1)
  p->proc_tms.cstime = 1;
    80201abe:	12f4bc23          	sd	a5,312(s1)
  p->sig_act = NULL;
    80201ac2:	1804b423          	sd	zero,392(s1)
  p->sig_frame = NULL;
    80201ac6:	1a04b023          	sd	zero,416(s1)
	p->sig_pending.__val[i] = 0;
    80201aca:	1804bc23          	sd	zero,408(s1)
  p->killed = 0;
    80201ace:	0204ac23          	sw	zero,56(s1)
}
    80201ad2:	8526                	mv	a0,s1
    80201ad4:	70e2                	ld	ra,56(sp)
    80201ad6:	7442                	ld	s0,48(sp)
    80201ad8:	74a2                	ld	s1,40(sp)
    80201ada:	7902                	ld	s2,32(sp)
    80201adc:	69e2                	ld	s3,24(sp)
    80201ade:	6a42                	ld	s4,16(sp)
    80201ae0:	6aa2                	ld	s5,8(sp)
    80201ae2:	6121                	addi	sp,sp,64
    80201ae4:	8082                	ret
    release(&p->lock);
    80201ae6:	854a                	mv	a0,s2
    80201ae8:	00007097          	auipc	ra,0x7
    80201aec:	8e2080e7          	jalr	-1822(ra) # 802083ca <release>
    return NULL;
    80201af0:	4481                	li	s1,0
    80201af2:	b7c5                	j	80201ad2 <allocproc+0x178>
    freeproc(p);
    80201af4:	8526                	mv	a0,s1
    80201af6:	fffff097          	auipc	ra,0xfffff
    80201afa:	704080e7          	jalr	1796(ra) # 802011fa <freeproc>
    release(&p->lock);
    80201afe:	854a                	mv	a0,s2
    80201b00:	00007097          	auipc	ra,0x7
    80201b04:	8ca080e7          	jalr	-1846(ra) # 802083ca <release>
    return NULL;
    80201b08:	84ce                	mv	s1,s3
    80201b0a:	b7e1                	j	80201ad2 <allocproc+0x178>
    panic("proc ofile init\n");
    80201b0c:	00010517          	auipc	a0,0x10
    80201b10:	68450513          	addi	a0,a0,1668 # 80212190 <rodata_start+0x190>
    80201b14:	00007097          	auipc	ra,0x7
    80201b18:	bd2080e7          	jalr	-1070(ra) # 802086e6 <panic>

0000000080201b1c <proc_freepagetable>:
{
    80201b1c:	1141                	addi	sp,sp,-16
    80201b1e:	e406                	sd	ra,8(sp)
    80201b20:	e022                	sd	s0,0(sp)
    80201b22:	0800                	addi	s0,sp,16
  uvmfree(p);
    80201b24:	00008097          	auipc	ra,0x8
    80201b28:	2da080e7          	jalr	730(ra) # 80209dfe <uvmfree>
}
    80201b2c:	60a2                	ld	ra,8(sp)
    80201b2e:	6402                	ld	s0,0(sp)
    80201b30:	0141                	addi	sp,sp,16
    80201b32:	8082                	ret

0000000080201b34 <procnum>:
{
    80201b34:	1141                	addi	sp,sp,-16
    80201b36:	e422                	sd	s0,8(sp)
    80201b38:	0800                	addi	s0,sp,16
  for (p = proc; p < &proc[NPROC]; p++) {
    80201b3a:	00848797          	auipc	a5,0x848
    80201b3e:	b1e78793          	addi	a5,a5,-1250 # 80a49658 <proc>
  int num = 0;
    80201b42:	4501                	li	a0,0
  for (p = proc; p < &proc[NPROC]; p++) {
    80201b44:	00853697          	auipc	a3,0x853
    80201b48:	05468693          	addi	a3,a3,84 # 80a54b98 <firstuserinit>
    80201b4c:	a029                	j	80201b56 <procnum+0x22>
    80201b4e:	1d078793          	addi	a5,a5,464
    80201b52:	00d78663          	beq	a5,a3,80201b5e <procnum+0x2a>
    if (p->state != UNUSED) {
    80201b56:	5398                	lw	a4,32(a5)
    80201b58:	db7d                	beqz	a4,80201b4e <procnum+0x1a>
      num++;
    80201b5a:	2505                	addiw	a0,a0,1
    80201b5c:	bfcd                	j	80201b4e <procnum+0x1a>
}
    80201b5e:	6422                	ld	s0,8(sp)
    80201b60:	0141                	addi	sp,sp,16
    80201b62:	8082                	ret

0000000080201b64 <sched>:
{
    80201b64:	1101                	addi	sp,sp,-32
    80201b66:	ec06                	sd	ra,24(sp)
    80201b68:	e822                	sd	s0,16(sp)
    80201b6a:	e426                	sd	s1,8(sp)
    80201b6c:	e04a                	sd	s2,0(sp)
    80201b6e:	1000                	addi	s0,sp,32
  struct proc *p = myproc();
    80201b70:	0000a097          	auipc	ra,0xa
    80201b74:	8dc080e7          	jalr	-1828(ra) # 8020b44c <myproc>
    80201b78:	84aa                	mv	s1,a0
  if(!holding(&p->lock))
    80201b7a:	0521                	addi	a0,a0,8
    80201b7c:	00006097          	auipc	ra,0x6
    80201b80:	7cc080e7          	jalr	1996(ra) # 80208348 <holding>
    80201b84:	cd39                	beqz	a0,80201be2 <sched+0x7e>
  if(mycpu()->noff != 1)
    80201b86:	0000a097          	auipc	ra,0xa
    80201b8a:	8aa080e7          	jalr	-1878(ra) # 8020b430 <mycpu>
    80201b8e:	5d38                	lw	a4,120(a0)
    80201b90:	4785                	li	a5,1
    80201b92:	06f71063          	bne	a4,a5,80201bf2 <sched+0x8e>
  if(p->state == RUNNING)
    80201b96:	5098                	lw	a4,32(s1)
    80201b98:	478d                	li	a5,3
    80201b9a:	06f70463          	beq	a4,a5,80201c02 <sched+0x9e>
  asm volatile("csrr %0, sstatus" : "=r" (x) );
    80201b9e:	100027f3          	csrr	a5,sstatus
  return (x & SSTATUS_SIE) != 0;
    80201ba2:	8b89                	andi	a5,a5,2
  if(intr_get())
    80201ba4:	e7bd                	bnez	a5,80201c12 <sched+0xae>
  intena = mycpu()->intena;
    80201ba6:	0000a097          	auipc	ra,0xa
    80201baa:	88a080e7          	jalr	-1910(ra) # 8020b430 <mycpu>
    80201bae:	07c52903          	lw	s2,124(a0)
  swtch(&p->context, &mycpu()->context);
    80201bb2:	0000a097          	auipc	ra,0xa
    80201bb6:	87e080e7          	jalr	-1922(ra) # 8020b430 <mycpu>
    80201bba:	00850593          	addi	a1,a0,8
    80201bbe:	07048513          	addi	a0,s1,112
    80201bc2:	00006097          	auipc	ra,0x6
    80201bc6:	1ca080e7          	jalr	458(ra) # 80207d8c <swtch>
  mycpu()->intena = intena;
    80201bca:	0000a097          	auipc	ra,0xa
    80201bce:	866080e7          	jalr	-1946(ra) # 8020b430 <mycpu>
    80201bd2:	07252e23          	sw	s2,124(a0)
}
    80201bd6:	60e2                	ld	ra,24(sp)
    80201bd8:	6442                	ld	s0,16(sp)
    80201bda:	64a2                	ld	s1,8(sp)
    80201bdc:	6902                	ld	s2,0(sp)
    80201bde:	6105                	addi	sp,sp,32
    80201be0:	8082                	ret
    panic("sched p->lock");
    80201be2:	00010517          	auipc	a0,0x10
    80201be6:	5c650513          	addi	a0,a0,1478 # 802121a8 <rodata_start+0x1a8>
    80201bea:	00007097          	auipc	ra,0x7
    80201bee:	afc080e7          	jalr	-1284(ra) # 802086e6 <panic>
    panic("sched locks");
    80201bf2:	00010517          	auipc	a0,0x10
    80201bf6:	5c650513          	addi	a0,a0,1478 # 802121b8 <rodata_start+0x1b8>
    80201bfa:	00007097          	auipc	ra,0x7
    80201bfe:	aec080e7          	jalr	-1300(ra) # 802086e6 <panic>
    panic("sched running");
    80201c02:	00010517          	auipc	a0,0x10
    80201c06:	5c650513          	addi	a0,a0,1478 # 802121c8 <rodata_start+0x1c8>
    80201c0a:	00007097          	auipc	ra,0x7
    80201c0e:	adc080e7          	jalr	-1316(ra) # 802086e6 <panic>
    panic("sched interruptible");
    80201c12:	00010517          	auipc	a0,0x10
    80201c16:	5c650513          	addi	a0,a0,1478 # 802121d8 <rodata_start+0x1d8>
    80201c1a:	00007097          	auipc	ra,0x7
    80201c1e:	acc080e7          	jalr	-1332(ra) # 802086e6 <panic>

0000000080201c22 <sleep>:
{
    80201c22:	7179                	addi	sp,sp,-48
    80201c24:	f406                	sd	ra,40(sp)
    80201c26:	f022                	sd	s0,32(sp)
    80201c28:	ec26                	sd	s1,24(sp)
    80201c2a:	e84a                	sd	s2,16(sp)
    80201c2c:	e44e                	sd	s3,8(sp)
    80201c2e:	e052                	sd	s4,0(sp)
    80201c30:	1800                	addi	s0,sp,48
    80201c32:	89aa                	mv	s3,a0
    80201c34:	892e                	mv	s2,a1
  struct proc *p = myproc();
    80201c36:	0000a097          	auipc	ra,0xa
    80201c3a:	816080e7          	jalr	-2026(ra) # 8020b44c <myproc>
    80201c3e:	84aa                	mv	s1,a0
  if(lk != &p->lock){  //DOC: sleeplock0
    80201c40:	00850a13          	addi	s4,a0,8
    80201c44:	0b2a0b63          	beq	s4,s2,80201cfa <sleep+0xd8>
    acquire(&p->lock);  //DOC: sleeplock1
    80201c48:	8552                	mv	a0,s4
    80201c4a:	00006097          	auipc	ra,0x6
    80201c4e:	72c080e7          	jalr	1836(ra) # 80208376 <acquire>
    release(lk);
    80201c52:	854a                	mv	a0,s2
    80201c54:	00006097          	auipc	ra,0x6
    80201c58:	776080e7          	jalr	1910(ra) # 802083ca <release>
  queue* q = findwaitq(chan);
    80201c5c:	854e                	mv	a0,s3
    80201c5e:	fffff097          	auipc	ra,0xfffff
    80201c62:	748080e7          	jalr	1864(ra) # 802013a6 <findwaitq>
  if(!q)q = allocwaitq(chan);
    80201c66:	c529                	beqz	a0,80201cb0 <sleep+0x8e>
  waitq_push(q,p);
    80201c68:	85a6                	mv	a1,s1
    80201c6a:	00000097          	auipc	ra,0x0
    80201c6e:	9ba080e7          	jalr	-1606(ra) # 80201624 <waitq_push>
  p->vswtch += 1;
    80201c72:	1c44a783          	lw	a5,452(s1)
    80201c76:	2785                	addiw	a5,a5,1
    80201c78:	1cf4a223          	sw	a5,452(s1)
  p->state = SLEEPING;
    80201c7c:	4785                	li	a5,1
    80201c7e:	d09c                	sw	a5,32(s1)
  sched();
    80201c80:	00000097          	auipc	ra,0x0
    80201c84:	ee4080e7          	jalr	-284(ra) # 80201b64 <sched>
  p->chan = 0;
    80201c88:	0204b823          	sd	zero,48(s1)
    release(&p->lock);
    80201c8c:	8552                	mv	a0,s4
    80201c8e:	00006097          	auipc	ra,0x6
    80201c92:	73c080e7          	jalr	1852(ra) # 802083ca <release>
    acquire(lk);
    80201c96:	854a                	mv	a0,s2
    80201c98:	00006097          	auipc	ra,0x6
    80201c9c:	6de080e7          	jalr	1758(ra) # 80208376 <acquire>
}
    80201ca0:	70a2                	ld	ra,40(sp)
    80201ca2:	7402                	ld	s0,32(sp)
    80201ca4:	64e2                	ld	s1,24(sp)
    80201ca6:	6942                	ld	s2,16(sp)
    80201ca8:	69a2                	ld	s3,8(sp)
    80201caa:	6a02                	ld	s4,0(sp)
    80201cac:	6145                	addi	sp,sp,48
    80201cae:	8082                	ret
  if(!q)q = allocwaitq(chan);
    80201cb0:	854e                	mv	a0,s3
    80201cb2:	fffff097          	auipc	ra,0xfffff
    80201cb6:	782080e7          	jalr	1922(ra) # 80201434 <allocwaitq>
    80201cba:	89aa                	mv	s3,a0
  if(!q){
    80201cbc:	e909                	bnez	a0,80201cce <sleep+0xac>
    __debug_error("waitq pool is full\n");
    80201cbe:	00010517          	auipc	a0,0x10
    80201cc2:	53250513          	addi	a0,a0,1330 # 802121f0 <rodata_start+0x1f0>
    80201cc6:	00007097          	auipc	ra,0x7
    80201cca:	fcc080e7          	jalr	-52(ra) # 80208c92 <__debug_error>
  waitq_push(q,p);
    80201cce:	85a6                	mv	a1,s1
    80201cd0:	854e                	mv	a0,s3
    80201cd2:	00000097          	auipc	ra,0x0
    80201cd6:	952080e7          	jalr	-1710(ra) # 80201624 <waitq_push>
  p->vswtch += 1;
    80201cda:	1c44a783          	lw	a5,452(s1)
    80201cde:	2785                	addiw	a5,a5,1
    80201ce0:	1cf4a223          	sw	a5,452(s1)
  p->state = SLEEPING;
    80201ce4:	4785                	li	a5,1
    80201ce6:	d09c                	sw	a5,32(s1)
  sched();
    80201ce8:	00000097          	auipc	ra,0x0
    80201cec:	e7c080e7          	jalr	-388(ra) # 80201b64 <sched>
  p->chan = 0;
    80201cf0:	0204b823          	sd	zero,48(s1)
  if(lk != &p->lock){
    80201cf4:	f92a1ce3          	bne	s4,s2,80201c8c <sleep+0x6a>
    80201cf8:	b765                	j	80201ca0 <sleep+0x7e>
  queue* q = findwaitq(chan);
    80201cfa:	854e                	mv	a0,s3
    80201cfc:	fffff097          	auipc	ra,0xfffff
    80201d00:	6aa080e7          	jalr	1706(ra) # 802013a6 <findwaitq>
  if(!q)q = allocwaitq(chan);
    80201d04:	d555                	beqz	a0,80201cb0 <sleep+0x8e>
  waitq_push(q,p);
    80201d06:	85a6                	mv	a1,s1
    80201d08:	00000097          	auipc	ra,0x0
    80201d0c:	91c080e7          	jalr	-1764(ra) # 80201624 <waitq_push>
  p->vswtch += 1;
    80201d10:	1c44a783          	lw	a5,452(s1)
    80201d14:	2785                	addiw	a5,a5,1
    80201d16:	1cf4a223          	sw	a5,452(s1)
  p->state = SLEEPING;
    80201d1a:	4785                	li	a5,1
    80201d1c:	d09c                	sw	a5,32(s1)
  sched();
    80201d1e:	00000097          	auipc	ra,0x0
    80201d22:	e46080e7          	jalr	-442(ra) # 80201b64 <sched>
  p->chan = 0;
    80201d26:	0204b823          	sd	zero,48(s1)
  if(lk != &p->lock){
    80201d2a:	bf9d                	j	80201ca0 <sleep+0x7e>

0000000080201d2c <wakeup>:
{
    80201d2c:	1101                	addi	sp,sp,-32
    80201d2e:	ec06                	sd	ra,24(sp)
    80201d30:	e822                	sd	s0,16(sp)
    80201d32:	e426                	sd	s1,8(sp)
    80201d34:	e04a                	sd	s2,0(sp)
    80201d36:	1000                	addi	s0,sp,32
   queue* q = findwaitq(chan);
    80201d38:	fffff097          	auipc	ra,0xfffff
    80201d3c:	66e080e7          	jalr	1646(ra) # 802013a6 <findwaitq>
    80201d40:	84aa                	mv	s1,a0
       p->state = RUNNABLE;
    80201d42:	4909                	li	s2,2
   if(q){
    80201d44:	e909                	bnez	a0,80201d56 <wakeup+0x2a>
     return 0;
    80201d46:	4501                	li	a0,0
    80201d48:	a01d                	j	80201d6e <wakeup+0x42>
       p->state = RUNNABLE;
    80201d4a:	03252023          	sw	s2,32(a0)
       readyq_push(p);
    80201d4e:	fffff097          	auipc	ra,0xfffff
    80201d52:	7f2080e7          	jalr	2034(ra) # 80201540 <readyq_push>
     while((p = waitq_pop(q))!=NULL){
    80201d56:	8526                	mv	a0,s1
    80201d58:	00000097          	auipc	ra,0x0
    80201d5c:	91e080e7          	jalr	-1762(ra) # 80201676 <waitq_pop>
    80201d60:	f56d                	bnez	a0,80201d4a <wakeup+0x1e>
     delwaitq(q);
    80201d62:	8526                	mv	a0,s1
    80201d64:	fffff097          	auipc	ra,0xfffff
    80201d68:	77e080e7          	jalr	1918(ra) # 802014e2 <delwaitq>
     return 1;
    80201d6c:	4505                	li	a0,1
}
    80201d6e:	60e2                	ld	ra,24(sp)
    80201d70:	6442                	ld	s0,16(sp)
    80201d72:	64a2                	ld	s1,8(sp)
    80201d74:	6902                	ld	s2,0(sp)
    80201d76:	6105                	addi	sp,sp,32
    80201d78:	8082                	ret

0000000080201d7a <allocparent>:
allocparent(struct proc* parent,struct proc* child){
    80201d7a:	1141                	addi	sp,sp,-16
    80201d7c:	e422                	sd	s0,8(sp)
    80201d7e:	0800                	addi	s0,sp,16
  child->parent = parent;
    80201d80:	f588                	sd	a0,40(a1)
  list_add_after(&parent->c_list,&child->sib_list);
    80201d82:	16058713          	addi	a4,a1,352
	__list_insert(node, afterme, afterme->next);
    80201d86:	15853783          	ld	a5,344(a0)
	prev->next = next->prev = node;
    80201d8a:	e398                	sd	a4,0(a5)
    80201d8c:	14e53c23          	sd	a4,344(a0)
	node->next = next;
    80201d90:	16f5b423          	sd	a5,360(a1)
    80201d94:	15050513          	addi	a0,a0,336
	node->prev = prev;
    80201d98:	16a5b023          	sd	a0,352(a1)
}
    80201d9c:	6422                	ld	s0,8(sp)
    80201d9e:	0141                	addi	sp,sp,16
    80201da0:	8082                	ret

0000000080201da2 <userinit>:
{
    80201da2:	1101                	addi	sp,sp,-32
    80201da4:	ec06                	sd	ra,24(sp)
    80201da6:	e822                	sd	s0,16(sp)
    80201da8:	e426                	sd	s1,8(sp)
    80201daa:	e04a                	sd	s2,0(sp)
    80201dac:	1000                	addi	s0,sp,32
  p = allocproc(0, 0);
    80201dae:	4581                	li	a1,0
    80201db0:	4501                	li	a0,0
    80201db2:	00000097          	auipc	ra,0x0
    80201db6:	ba8080e7          	jalr	-1112(ra) # 8020195a <allocproc>
    80201dba:	84aa                	mv	s1,a0
  if(firstuserinit){
    80201dbc:	00853797          	auipc	a5,0x853
    80201dc0:	ddc7a783          	lw	a5,-548(a5) # 80a54b98 <firstuserinit>
    80201dc4:	c3f1                	beqz	a5,80201e88 <userinit+0xe6>
    initproc = p;
    80201dc6:	00853797          	auipc	a5,0x853
    80201dca:	dea7b123          	sd	a0,-542(a5) # 80a54ba8 <initproc>
    firstuserinit = 0;
    80201dce:	00853797          	auipc	a5,0x853
    80201dd2:	dc07a523          	sw	zero,-566(a5) # 80a54b98 <firstuserinit>
  alloc_load_vma(p, (uint64) 0, initcodesize, PTE_R|PTE_W|PTE_X|PTE_U);
    80201dd6:	00004917          	auipc	s2,0x4
    80201dda:	1f690913          	addi	s2,s2,502 # 80205fcc <initcodesize>
    80201dde:	46f9                	li	a3,30
    80201de0:	00092603          	lw	a2,0(s2)
    80201de4:	4581                	li	a1,0
    80201de6:	8526                	mv	a0,s1
    80201de8:	0000a097          	auipc	ra,0xa
    80201dec:	c0c080e7          	jalr	-1012(ra) # 8020b9f4 <alloc_load_vma>
  copyout(p->pagetable,0,initcode,initcodesize);
    80201df0:	00092683          	lw	a3,0(s2)
    80201df4:	00004617          	auipc	a2,0x4
    80201df8:	13c60613          	addi	a2,a2,316 # 80205f30 <initcode>
    80201dfc:	4581                	li	a1,0
    80201dfe:	70a8                	ld	a0,96(s1)
    80201e00:	00009097          	auipc	ra,0x9
    80201e04:	cec080e7          	jalr	-788(ra) # 8020aaec <copyout>
  p->trapframe->epc = 0x0;      // user program counter
    80201e08:	74bc                	ld	a5,104(s1)
    80201e0a:	0007bc23          	sd	zero,24(a5)
  p->trapframe->sp = type_locate_vma(p->vma,STACK)->end;  // user stack pointer
    80201e0e:	459d                	li	a1,7
    80201e10:	1704b503          	ld	a0,368(s1)
    80201e14:	00009097          	auipc	ra,0x9
    80201e18:	7d6080e7          	jalr	2006(ra) # 8020b5ea <type_locate_vma>
    80201e1c:	74bc                	ld	a5,104(s1)
    80201e1e:	6d18                	ld	a4,24(a0)
    80201e20:	fb98                	sd	a4,48(a5)
  safestrcpy(p->name, "initcode", sizeof(p->name));
    80201e22:	4651                	li	a2,20
    80201e24:	00010597          	auipc	a1,0x10
    80201e28:	3e458593          	addi	a1,a1,996 # 80212208 <rodata_start+0x208>
    80201e2c:	10048513          	addi	a0,s1,256
    80201e30:	fffff097          	auipc	ra,0xfffff
    80201e34:	09a080e7          	jalr	154(ra) # 80200eca <safestrcpy>
  p->state = RUNNABLE;
    80201e38:	4789                	li	a5,2
    80201e3a:	d09c                	sw	a5,32(s1)
  readyq_push(p);//insert to ready queue
    80201e3c:	8526                	mv	a0,s1
    80201e3e:	fffff097          	auipc	ra,0xfffff
    80201e42:	702080e7          	jalr	1794(ra) # 80201540 <readyq_push>
  p->tmask = 0;
    80201e46:	1004aa23          	sw	zero,276(s1)
  p->cwd = ename(NULL,"/",0);
    80201e4a:	4601                	li	a2,0
    80201e4c:	00012597          	auipc	a1,0x12
    80201e50:	b3c58593          	addi	a1,a1,-1220 # 80213988 <vma_type+0x4b0>
    80201e54:	4501                	li	a0,0
    80201e56:	00002097          	auipc	ra,0x2
    80201e5a:	55e080e7          	jalr	1374(ra) # 802043b4 <ename>
    80201e5e:	fce8                	sd	a0,248(s1)
  release(&p->lock);
    80201e60:	00848513          	addi	a0,s1,8
    80201e64:	00006097          	auipc	ra,0x6
    80201e68:	566080e7          	jalr	1382(ra) # 802083ca <release>
  __debug_info("userinit\n");
    80201e6c:	00010517          	auipc	a0,0x10
    80201e70:	3ac50513          	addi	a0,a0,940 # 80212218 <rodata_start+0x218>
    80201e74:	00007097          	auipc	ra,0x7
    80201e78:	a82080e7          	jalr	-1406(ra) # 802088f6 <__debug_info>
}
    80201e7c:	60e2                	ld	ra,24(sp)
    80201e7e:	6442                	ld	s0,16(sp)
    80201e80:	64a2                	ld	s1,8(sp)
    80201e82:	6902                	ld	s2,0(sp)
    80201e84:	6105                	addi	sp,sp,32
    80201e86:	8082                	ret
    allocparent(p,initproc);
    80201e88:	00853917          	auipc	s2,0x853
    80201e8c:	d2090913          	addi	s2,s2,-736 # 80a54ba8 <initproc>
    80201e90:	00093583          	ld	a1,0(s2)
    80201e94:	00000097          	auipc	ra,0x0
    80201e98:	ee6080e7          	jalr	-282(ra) # 80201d7a <allocparent>
    initproc = p;
    80201e9c:	00993023          	sd	s1,0(s2)
    80201ea0:	bf1d                	j	80201dd6 <userinit+0x34>

0000000080201ea2 <clone>:
int clone(uint64 flag, uint64 stack, uint64 ptid, uint64 tls, uint64 ctid) {
    80201ea2:	715d                	addi	sp,sp,-80
    80201ea4:	e486                	sd	ra,72(sp)
    80201ea6:	e0a2                	sd	s0,64(sp)
    80201ea8:	fc26                	sd	s1,56(sp)
    80201eaa:	f84a                	sd	s2,48(sp)
    80201eac:	f44e                	sd	s3,40(sp)
    80201eae:	f052                	sd	s4,32(sp)
    80201eb0:	ec56                	sd	s5,24(sp)
    80201eb2:	e85a                	sd	s6,16(sp)
    80201eb4:	e45e                	sd	s7,8(sp)
    80201eb6:	0880                	addi	s0,sp,80
    80201eb8:	8b2a                	mv	s6,a0
    80201eba:	84ae                	mv	s1,a1
    80201ebc:	8932                	mv	s2,a2
    80201ebe:	8a36                	mv	s4,a3
    80201ec0:	8bba                	mv	s7,a4
  struct proc *p = myproc();
    80201ec2:	00009097          	auipc	ra,0x9
    80201ec6:	58a080e7          	jalr	1418(ra) # 8020b44c <myproc>
    80201eca:	89aa                	mv	s3,a0
  if((flag & CLONE_THREAD) && (flag & CLONE_VM))
    80201ecc:	67c1                	lui	a5,0x10
    80201ece:	10078793          	addi	a5,a5,256 # 10100 <_entry-0x801eff00>
    80201ed2:	00fb7733          	and	a4,s6,a5
    80201ed6:	08f70463          	beq	a4,a5,80201f5e <clone+0xbc>
    if((np = allocproc(p, 0)) == NULL){
    80201eda:	4581                	li	a1,0
    80201edc:	00000097          	auipc	ra,0x0
    80201ee0:	a7e080e7          	jalr	-1410(ra) # 8020195a <allocproc>
    80201ee4:	8aaa                	mv	s5,a0
    80201ee6:	18050c63          	beqz	a0,8020207e <clone+0x1dc>
    *(np->trapframe) = *(p->trapframe);
    80201eea:	0689b683          	ld	a3,104(s3)
    80201eee:	87b6                	mv	a5,a3
    80201ef0:	7538                	ld	a4,104(a0)
    80201ef2:	12068693          	addi	a3,a3,288
    80201ef6:	0007b803          	ld	a6,0(a5)
    80201efa:	6788                	ld	a0,8(a5)
    80201efc:	6b8c                	ld	a1,16(a5)
    80201efe:	6f90                	ld	a2,24(a5)
    80201f00:	01073023          	sd	a6,0(a4) # 1000 <_entry-0x801ff000>
    80201f04:	e708                	sd	a0,8(a4)
    80201f06:	eb0c                	sd	a1,16(a4)
    80201f08:	ef10                	sd	a2,24(a4)
    80201f0a:	02078793          	addi	a5,a5,32
    80201f0e:	02070713          	addi	a4,a4,32
    80201f12:	fed792e3          	bne	a5,a3,80201ef6 <clone+0x54>
    if(stack != 0)
    80201f16:	c481                	beqz	s1,80201f1e <clone+0x7c>
      p->trapframe->sp = stack;
    80201f18:	0689b783          	ld	a5,104(s3)
    80201f1c:	fb84                	sd	s1,48(a5)
  sigaction_copy(&np->sig_act, p->sig_act);
    80201f1e:	1889b583          	ld	a1,392(s3)
    80201f22:	188a8513          	addi	a0,s5,392
    80201f26:	00006097          	auipc	ra,0x6
    80201f2a:	30e080e7          	jalr	782(ra) # 80208234 <sigaction_copy>
  np->sig_frame = p->sig_frame;
    80201f2e:	1a09b783          	ld	a5,416(s3)
    80201f32:	1afab023          	sd	a5,416(s5)
    np->sig_pending.__val[i] = p->sig_pending.__val[i];
    80201f36:	1989b783          	ld	a5,408(s3)
    80201f3a:	18fabc23          	sd	a5,408(s5)
  np->sz = p->sz;
    80201f3e:	0589b783          	ld	a5,88(s3)
    80201f42:	04fabc23          	sd	a5,88(s5)
  np->tmask = p->tmask;
    80201f46:	1149a783          	lw	a5,276(s3)
    80201f4a:	10faaa23          	sw	a5,276(s5)
  np->trapframe->a0 = 0;
    80201f4e:	068ab783          	ld	a5,104(s5)
    80201f52:	0607b823          	sd	zero,112(a5)
    80201f56:	4481                	li	s1,0
  for(i = 0; i < NOFILE; i++)
    80201f58:	64000a13          	li	s4,1600
    80201f5c:	a841                	j	80201fec <clone+0x14a>
    if((np = allocproc(p, 1)) == NULL){
    80201f5e:	4585                	li	a1,1
    80201f60:	00000097          	auipc	ra,0x0
    80201f64:	9fa080e7          	jalr	-1542(ra) # 8020195a <allocproc>
    80201f68:	8aaa                	mv	s5,a0
    80201f6a:	c939                	beqz	a0,80201fc0 <clone+0x11e>
    *(np->trapframe) = *(p->trapframe);
    80201f6c:	0689b683          	ld	a3,104(s3)
    80201f70:	87b6                	mv	a5,a3
    80201f72:	7538                	ld	a4,104(a0)
    80201f74:	12068693          	addi	a3,a3,288
    80201f78:	0007b803          	ld	a6,0(a5)
    80201f7c:	6788                	ld	a0,8(a5)
    80201f7e:	6b8c                	ld	a1,16(a5)
    80201f80:	6f90                	ld	a2,24(a5)
    80201f82:	01073023          	sd	a6,0(a4)
    80201f86:	e708                	sd	a0,8(a4)
    80201f88:	eb0c                	sd	a1,16(a4)
    80201f8a:	ef10                	sd	a2,24(a4)
    80201f8c:	02078793          	addi	a5,a5,32
    80201f90:	02070713          	addi	a4,a4,32
    80201f94:	fed792e3          	bne	a5,a3,80201f78 <clone+0xd6>
    np->trapframe->tp = tls;
    80201f98:	068ab783          	ld	a5,104(s5)
    80201f9c:	0547b023          	sd	s4,64(a5)
    np->trapframe->sp = stack;
    80201fa0:	068ab783          	ld	a5,104(s5)
    80201fa4:	fb84                	sd	s1,48(a5)
    if(ptid != 0)
    80201fa6:	f6090ce3          	beqz	s2,80201f1e <clone+0x7c>
      copyout(p->pagetable, ptid, (char *)&np->pid, sizeof(int));
    80201faa:	4691                	li	a3,4
    80201fac:	040a8613          	addi	a2,s5,64
    80201fb0:	85ca                	mv	a1,s2
    80201fb2:	0609b503          	ld	a0,96(s3)
    80201fb6:	00009097          	auipc	ra,0x9
    80201fba:	b36080e7          	jalr	-1226(ra) # 8020aaec <copyout>
    80201fbe:	b785                	j	80201f1e <clone+0x7c>
      __debug_warn("alloc process bad\n");
    80201fc0:	00010517          	auipc	a0,0x10
    80201fc4:	26850513          	addi	a0,a0,616 # 80212228 <rodata_start+0x228>
    80201fc8:	00007097          	auipc	ra,0x7
    80201fcc:	af4080e7          	jalr	-1292(ra) # 80208abc <__debug_warn>
      return -1;
    80201fd0:	54fd                	li	s1,-1
    80201fd2:	a851                	j	80202066 <clone+0x1c4>
      np->ofile[i] = filedup(p->ofile[i]);
    80201fd4:	0e8ab903          	ld	s2,232(s5)
    80201fd8:	9926                	add	s2,s2,s1
    80201fda:	00003097          	auipc	ra,0x3
    80201fde:	28a080e7          	jalr	650(ra) # 80205264 <filedup>
    80201fe2:	00a93023          	sd	a0,0(s2)
  for(i = 0; i < NOFILE; i++)
    80201fe6:	04a1                	addi	s1,s1,8
    80201fe8:	01448863          	beq	s1,s4,80201ff8 <clone+0x156>
    if(p->ofile[i])
    80201fec:	0e89b783          	ld	a5,232(s3)
    80201ff0:	97a6                	add	a5,a5,s1
    80201ff2:	6388                	ld	a0,0(a5)
    80201ff4:	f165                	bnez	a0,80201fd4 <clone+0x132>
    80201ff6:	bfc5                	j	80201fe6 <clone+0x144>
  np->cwd = edup(p->cwd);
    80201ff8:	0f89b503          	ld	a0,248(s3)
    80201ffc:	00001097          	auipc	ra,0x1
    80202000:	6a8080e7          	jalr	1704(ra) # 802036a4 <edup>
    80202004:	0eaabc23          	sd	a0,248(s5)
  allocparent(p, np);
    80202008:	85d6                	mv	a1,s5
    8020200a:	854e                	mv	a0,s3
    8020200c:	00000097          	auipc	ra,0x0
    80202010:	d6e080e7          	jalr	-658(ra) # 80201d7a <allocparent>
  safestrcpy(np->name, p->name, sizeof(p->name));
    80202014:	4651                	li	a2,20
    80202016:	10098593          	addi	a1,s3,256
    8020201a:	100a8513          	addi	a0,s5,256
    8020201e:	fffff097          	auipc	ra,0xfffff
    80202022:	eac080e7          	jalr	-340(ra) # 80200eca <safestrcpy>
  pid = np->pid;
    80202026:	040aa483          	lw	s1,64(s5)
  np->state = RUNNABLE;
    8020202a:	4789                	li	a5,2
    8020202c:	02faa023          	sw	a5,32(s5)
  readyq_push(np);
    80202030:	8556                	mv	a0,s5
    80202032:	fffff097          	auipc	ra,0xfffff
    80202036:	50e080e7          	jalr	1294(ra) # 80201540 <readyq_push>
  if(flag & CLONE_CHILD_SETTID){
    8020203a:	027b1793          	slli	a5,s6,0x27
    8020203e:	0007d463          	bgez	a5,80202046 <clone+0x1a4>
    np->set_child_tid = ctid;
    80202042:	1b7ab423          	sd	s7,424(s5)
  if(flag & CLONE_CHILD_CLEARTID){
    80202046:	02ab1793          	slli	a5,s6,0x2a
    8020204a:	0007d463          	bgez	a5,80202052 <clone+0x1b0>
    np->clear_child_tid = ctid;
    8020204e:	1b7ab823          	sd	s7,432(s5)
  p->killed = np->killed;
    80202052:	038aa783          	lw	a5,56(s5)
    80202056:	02f9ac23          	sw	a5,56(s3)
  release(&np->lock);
    8020205a:	008a8513          	addi	a0,s5,8
    8020205e:	00006097          	auipc	ra,0x6
    80202062:	36c080e7          	jalr	876(ra) # 802083ca <release>
}
    80202066:	8526                	mv	a0,s1
    80202068:	60a6                	ld	ra,72(sp)
    8020206a:	6406                	ld	s0,64(sp)
    8020206c:	74e2                	ld	s1,56(sp)
    8020206e:	7942                	ld	s2,48(sp)
    80202070:	79a2                	ld	s3,40(sp)
    80202072:	7a02                	ld	s4,32(sp)
    80202074:	6ae2                	ld	s5,24(sp)
    80202076:	6b42                	ld	s6,16(sp)
    80202078:	6ba2                	ld	s7,8(sp)
    8020207a:	6161                	addi	sp,sp,80
    8020207c:	8082                	ret
      return -1;
    8020207e:	54fd                	li	s1,-1
    80202080:	b7dd                	j	80202066 <clone+0x1c4>

0000000080202082 <getparent>:
getparent(struct proc* child){
    80202082:	1141                	addi	sp,sp,-16
    80202084:	e422                	sd	s0,8(sp)
    80202086:	0800                	addi	s0,sp,16
}
    80202088:	7508                	ld	a0,40(a0)
    8020208a:	6422                	ld	s0,8(sp)
    8020208c:	0141                	addi	sp,sp,16
    8020208e:	8082                	ret

0000000080202090 <findchild>:
findchild(struct proc* p,int (*cond)(struct proc*,int),int pid,struct proc** child){
    80202090:	715d                	addi	sp,sp,-80
    80202092:	e486                	sd	ra,72(sp)
    80202094:	e0a2                	sd	s0,64(sp)
    80202096:	fc26                	sd	s1,56(sp)
    80202098:	f84a                	sd	s2,48(sp)
    8020209a:	f44e                	sd	s3,40(sp)
    8020209c:	f052                	sd	s4,32(sp)
    8020209e:	ec56                	sd	s5,24(sp)
    802020a0:	e85a                	sd	s6,16(sp)
    802020a2:	e45e                	sd	s7,8(sp)
    802020a4:	e062                	sd	s8,0(sp)
    802020a6:	0880                	addi	s0,sp,80
   struct list* c_head = &p->c_list;
    802020a8:	15050a93          	addi	s5,a0,336
static inline struct list *list_prev(struct list *node) {
	return node->prev;
}

static inline struct list *list_next(struct list *node) {
	return node->next;
    802020ac:	15853483          	ld	s1,344(a0)
   *child = NULL;
    802020b0:	0006b023          	sd	zero,0(a3)
   while(c_it!=c_head){
    802020b4:	069a8163          	beq	s5,s1,80202116 <findchild+0x86>
    802020b8:	89ae                	mv	s3,a1
    802020ba:	8a32                	mv	s4,a2
    802020bc:	8bb6                	mv	s7,a3
        if(np->state == ZOMBIE){
    802020be:	4c11                	li	s8,4
    802020c0:	a021                	j	802020c8 <findchild+0x38>
    802020c2:	6484                	ld	s1,8(s1)
   while(c_it!=c_head){
    802020c4:	029a8b63          	beq	s5,s1,802020fa <findchild+0x6a>
  int ivswtch;
};


static inline struct proc* sib_getproc(struct list* list){
  return dlist_entry(list,struct proc,sib_list);
    802020c8:	ea048913          	addi	s2,s1,-352
      if(cond(np,pid)){
    802020cc:	85d2                	mv	a1,s4
    802020ce:	854a                	mv	a0,s2
    802020d0:	9982                	jalr	s3
    802020d2:	d965                	beqz	a0,802020c2 <findchild+0x32>
        acquire(&np->lock);
    802020d4:	ea848b13          	addi	s6,s1,-344
    802020d8:	855a                	mv	a0,s6
    802020da:	00006097          	auipc	ra,0x6
    802020de:	29c080e7          	jalr	668(ra) # 80208376 <acquire>
        *child = np; 
    802020e2:	012bb023          	sd	s2,0(s7)
        if(np->state == ZOMBIE){
    802020e6:	ec04a783          	lw	a5,-320(s1)
    802020ea:	01878963          	beq	a5,s8,802020fc <findchild+0x6c>
        release(&np->lock);
    802020ee:	855a                	mv	a0,s6
    802020f0:	00006097          	auipc	ra,0x6
    802020f4:	2da080e7          	jalr	730(ra) # 802083ca <release>
    802020f8:	b7e9                	j	802020c2 <findchild+0x32>
   return NULL;
    802020fa:	4901                	li	s2,0
}
    802020fc:	854a                	mv	a0,s2
    802020fe:	60a6                	ld	ra,72(sp)
    80202100:	6406                	ld	s0,64(sp)
    80202102:	74e2                	ld	s1,56(sp)
    80202104:	7942                	ld	s2,48(sp)
    80202106:	79a2                	ld	s3,40(sp)
    80202108:	7a02                	ld	s4,32(sp)
    8020210a:	6ae2                	ld	s5,24(sp)
    8020210c:	6b42                	ld	s6,16(sp)
    8020210e:	6ba2                	ld	s7,8(sp)
    80202110:	6c02                	ld	s8,0(sp)
    80202112:	6161                	addi	sp,sp,80
    80202114:	8082                	ret
   return NULL;
    80202116:	4901                	li	s2,0
    80202118:	b7d5                	j	802020fc <findchild+0x6c>

000000008020211a <reparent>:
{
    8020211a:	7139                	addi	sp,sp,-64
    8020211c:	fc06                	sd	ra,56(sp)
    8020211e:	f822                	sd	s0,48(sp)
    80202120:	f426                	sd	s1,40(sp)
    80202122:	f04a                	sd	s2,32(sp)
    80202124:	ec4e                	sd	s3,24(sp)
    80202126:	e852                	sd	s4,16(sp)
    80202128:	e456                	sd	s5,8(sp)
    8020212a:	e05a                	sd	s6,0(sp)
    8020212c:	0080                	addi	s0,sp,64
  struct list *c_head = &p->c_list;
    8020212e:	15050993          	addi	s3,a0,336
	return head->next == head;
    80202132:	15853a83          	ld	s5,344(a0)
  if(list_empty(c_head))return;
    80202136:	05598c63          	beq	s3,s5,8020218e <reparent+0x74>
	return node->prev;
    8020213a:	15053b03          	ld	s6,336(a0)
  struct list *c_it = c_next;
    8020213e:	84d6                	mv	s1,s5
      pp->parent = initproc;
    80202140:	00853a17          	auipc	s4,0x853
    80202144:	a68a0a13          	addi	s4,s4,-1432 # 80a54ba8 <initproc>
      acquire(&pp->lock);
    80202148:	ea848913          	addi	s2,s1,-344
    8020214c:	854a                	mv	a0,s2
    8020214e:	00006097          	auipc	ra,0x6
    80202152:	228080e7          	jalr	552(ra) # 80208376 <acquire>
      pp->parent = initproc;
    80202156:	000a3783          	ld	a5,0(s4)
    8020215a:	ecf4b423          	sd	a5,-312(s1)
      release(&pp->lock);
    8020215e:	854a                	mv	a0,s2
    80202160:	00006097          	auipc	ra,0x6
    80202164:	26a080e7          	jalr	618(ra) # 802083ca <release>
	return node->next;
    80202168:	6484                	ld	s1,8(s1)
  while(c_it!=c_head){
    8020216a:	fc999fe3          	bne	s3,s1,80202148 <reparent+0x2e>
  struct list* init_head = &initproc->c_list;
    8020216e:	00853797          	auipc	a5,0x853
    80202172:	a3a7b783          	ld	a5,-1478(a5) # 80a54ba8 <initproc>
    80202176:	1587b703          	ld	a4,344(a5)
	prev->next = next;
    8020217a:	1557bc23          	sd	s5,344(a5)
    8020217e:	15078793          	addi	a5,a5,336
	next->prev = prev;
    80202182:	00fab023          	sd	a5,0(s5)
	prev->next = next;
    80202186:	00eb3423          	sd	a4,8(s6)
	next->prev = prev;
    8020218a:	01673023          	sd	s6,0(a4)
}
    8020218e:	70e2                	ld	ra,56(sp)
    80202190:	7442                	ld	s0,48(sp)
    80202192:	74a2                	ld	s1,40(sp)
    80202194:	7902                	ld	s2,32(sp)
    80202196:	69e2                	ld	s3,24(sp)
    80202198:	6a42                	ld	s4,16(sp)
    8020219a:	6aa2                	ld	s5,8(sp)
    8020219c:	6b02                	ld	s6,0(sp)
    8020219e:	6121                	addi	sp,sp,64
    802021a0:	8082                	ret

00000000802021a2 <yield>:
{
    802021a2:	1101                	addi	sp,sp,-32
    802021a4:	ec06                	sd	ra,24(sp)
    802021a6:	e822                	sd	s0,16(sp)
    802021a8:	e426                	sd	s1,8(sp)
    802021aa:	e04a                	sd	s2,0(sp)
    802021ac:	1000                	addi	s0,sp,32
  struct proc *p = myproc();
    802021ae:	00009097          	auipc	ra,0x9
    802021b2:	29e080e7          	jalr	670(ra) # 8020b44c <myproc>
    802021b6:	84aa                	mv	s1,a0
  acquire(&p->lock);
    802021b8:	00850913          	addi	s2,a0,8
    802021bc:	854a                	mv	a0,s2
    802021be:	00006097          	auipc	ra,0x6
    802021c2:	1b8080e7          	jalr	440(ra) # 80208376 <acquire>
  readyq_push(p);
    802021c6:	8526                	mv	a0,s1
    802021c8:	fffff097          	auipc	ra,0xfffff
    802021cc:	378080e7          	jalr	888(ra) # 80201540 <readyq_push>
  p->state = RUNNABLE;
    802021d0:	4789                	li	a5,2
    802021d2:	d09c                	sw	a5,32(s1)
  sched();
    802021d4:	00000097          	auipc	ra,0x0
    802021d8:	990080e7          	jalr	-1648(ra) # 80201b64 <sched>
  release(&p->lock);
    802021dc:	854a                	mv	a0,s2
    802021de:	00006097          	auipc	ra,0x6
    802021e2:	1ec080e7          	jalr	492(ra) # 802083ca <release>
}
    802021e6:	60e2                	ld	ra,24(sp)
    802021e8:	6442                	ld	s0,16(sp)
    802021ea:	64a2                	ld	s1,8(sp)
    802021ec:	6902                	ld	s2,0(sp)
    802021ee:	6105                	addi	sp,sp,32
    802021f0:	8082                	ret

00000000802021f2 <wait4pid>:

// Wait for a child process to exit and return its pid.
// Return -1 if this process has no children.
int
wait4pid(int pid,uint64 addr)
{
    802021f2:	711d                	addi	sp,sp,-96
    802021f4:	ec86                	sd	ra,88(sp)
    802021f6:	e8a2                	sd	s0,80(sp)
    802021f8:	e4a6                	sd	s1,72(sp)
    802021fa:	e0ca                	sd	s2,64(sp)
    802021fc:	fc4e                	sd	s3,56(sp)
    802021fe:	f852                	sd	s4,48(sp)
    80202200:	f456                	sd	s5,40(sp)
    80202202:	f05a                	sd	s6,32(sp)
    80202204:	ec5e                	sd	s7,24(sp)
    80202206:	1080                	addi	s0,sp,96
    80202208:	892a                	mv	s2,a0
    8020220a:	8bae                	mv	s7,a1
  int kidpid;
  struct proc *p = myproc();
    8020220c:	00009097          	auipc	ra,0x9
    80202210:	240080e7          	jalr	576(ra) # 8020b44c <myproc>
    80202214:	89aa                	mv	s3,a0
  struct proc* child;
  struct proc* chan = NULL;
    80202216:	fa043423          	sd	zero,-88(s0)
  // hold p->lock for the whole time to avoid lost
  // wakeups from a child's exit().
  acquire(&p->lock);
    8020221a:	00850a13          	addi	s4,a0,8
    8020221e:	8552                	mv	a0,s4
    80202220:	00006097          	auipc	ra,0x6
    80202224:	156080e7          	jalr	342(ra) # 80208376 <acquire>
  //__debug_warn("[wait4pid]pid%d:%s enter\n",p->pid,p->name);
  while(1){
    kidpid = pid;
    child = findchild(p,zombiecond,pid,&chan);
    80202228:	fffffa97          	auipc	s5,0xfffff
    8020222c:	f88a8a93          	addi	s5,s5,-120 # 802011b0 <zombiecond>
    if(!chan){
      //__debug_warn("[wait4pid]pid%d:%s no kid to wait\n",p->pid,p->name);
      release(&p->lock);
      return -1;
    }
    if(pid == -1)sleep(p, &p->lock);  //DOC: wait-sleep
    80202230:	5b7d                	li	s6,-1
    80202232:	a8d1                	j	80202306 <wait4pid+0x114>
      kidpid = child->pid;
    80202234:	04052903          	lw	s2,64(a0)
      p->proc_tms.cstime += child->proc_tms.stime + child->proc_tms.cstime;
    80202238:	12853783          	ld	a5,296(a0)
    8020223c:	13853703          	ld	a4,312(a0)
    80202240:	973e                	add	a4,a4,a5
    80202242:	1389b783          	ld	a5,312(s3)
    80202246:	97ba                	add	a5,a5,a4
    80202248:	12f9bc23          	sd	a5,312(s3)
      p->proc_tms.cutime += child->proc_tms.utime + child->proc_tms.cutime;
    8020224c:	12053783          	ld	a5,288(a0)
    80202250:	13053703          	ld	a4,304(a0)
    80202254:	973e                	add	a4,a4,a5
    80202256:	1309b783          	ld	a5,304(s3)
    8020225a:	97ba                	add	a5,a5,a4
    8020225c:	12f9b823          	sd	a5,304(s3)
      child->xstate <<= 8;
    80202260:	5d5c                	lw	a5,60(a0)
    80202262:	0087979b          	slliw	a5,a5,0x8
    80202266:	dd5c                	sw	a5,60(a0)
      if(addr != 0 && copyout(p->pagetable, addr, (char *)&child->xstate, sizeof(child->xstate)) < 0) {
    80202268:	000b8e63          	beqz	s7,80202284 <wait4pid+0x92>
    8020226c:	4691                	li	a3,4
    8020226e:	03c50613          	addi	a2,a0,60
    80202272:	85de                	mv	a1,s7
    80202274:	0609b503          	ld	a0,96(s3)
    80202278:	00009097          	auipc	ra,0x9
    8020227c:	874080e7          	jalr	-1932(ra) # 8020aaec <copyout>
    80202280:	02054e63          	bltz	a0,802022bc <wait4pid+0xca>
      freeproc(child);
    80202284:	8526                	mv	a0,s1
    80202286:	fffff097          	auipc	ra,0xfffff
    8020228a:	f74080e7          	jalr	-140(ra) # 802011fa <freeproc>
      release(&child->lock);
    8020228e:	00848513          	addi	a0,s1,8
    80202292:	00006097          	auipc	ra,0x6
    80202296:	138080e7          	jalr	312(ra) # 802083ca <release>
      release(&p->lock);
    8020229a:	8552                	mv	a0,s4
    8020229c:	00006097          	auipc	ra,0x6
    802022a0:	12e080e7          	jalr	302(ra) # 802083ca <release>
    else sleep(chan,&p->lock);
  }
  release(&p->lock);
  return 0;
}
    802022a4:	854a                	mv	a0,s2
    802022a6:	60e6                	ld	ra,88(sp)
    802022a8:	6446                	ld	s0,80(sp)
    802022aa:	64a6                	ld	s1,72(sp)
    802022ac:	6906                	ld	s2,64(sp)
    802022ae:	79e2                	ld	s3,56(sp)
    802022b0:	7a42                	ld	s4,48(sp)
    802022b2:	7aa2                	ld	s5,40(sp)
    802022b4:	7b02                	ld	s6,32(sp)
    802022b6:	6be2                	ld	s7,24(sp)
    802022b8:	6125                	addi	sp,sp,96
    802022ba:	8082                	ret
        release(&child->lock);
    802022bc:	00848513          	addi	a0,s1,8
    802022c0:	00006097          	auipc	ra,0x6
    802022c4:	10a080e7          	jalr	266(ra) # 802083ca <release>
        release(&p->lock);
    802022c8:	8552                	mv	a0,s4
    802022ca:	00006097          	auipc	ra,0x6
    802022ce:	100080e7          	jalr	256(ra) # 802083ca <release>
        __debug_warn("[wait4pid]pid%d:%s copyout bad\n",p->pid,p->name);
    802022d2:	10098613          	addi	a2,s3,256
    802022d6:	0409a583          	lw	a1,64(s3)
    802022da:	00010517          	auipc	a0,0x10
    802022de:	f6650513          	addi	a0,a0,-154 # 80212240 <rodata_start+0x240>
    802022e2:	00006097          	auipc	ra,0x6
    802022e6:	7da080e7          	jalr	2010(ra) # 80208abc <__debug_warn>
        return -1;
    802022ea:	597d                	li	s2,-1
    802022ec:	bf65                	j	802022a4 <wait4pid+0xb2>
      release(&p->lock);
    802022ee:	8552                	mv	a0,s4
    802022f0:	00006097          	auipc	ra,0x6
    802022f4:	0da080e7          	jalr	218(ra) # 802083ca <release>
      return -1;
    802022f8:	597d                	li	s2,-1
    802022fa:	b76d                	j	802022a4 <wait4pid+0xb2>
    else sleep(chan,&p->lock);
    802022fc:	85d2                	mv	a1,s4
    802022fe:	00000097          	auipc	ra,0x0
    80202302:	924080e7          	jalr	-1756(ra) # 80201c22 <sleep>
    child = findchild(p,zombiecond,pid,&chan);
    80202306:	fa840693          	addi	a3,s0,-88
    8020230a:	864a                	mv	a2,s2
    8020230c:	85d6                	mv	a1,s5
    8020230e:	854e                	mv	a0,s3
    80202310:	00000097          	auipc	ra,0x0
    80202314:	d80080e7          	jalr	-640(ra) # 80202090 <findchild>
    80202318:	84aa                	mv	s1,a0
    if(child != NULL){
    8020231a:	fd09                	bnez	a0,80202234 <wait4pid+0x42>
    if(!chan){
    8020231c:	fa843503          	ld	a0,-88(s0)
    80202320:	d579                	beqz	a0,802022ee <wait4pid+0xfc>
    if(pid == -1)sleep(p, &p->lock);  //DOC: wait-sleep
    80202322:	fd691de3          	bne	s2,s6,802022fc <wait4pid+0x10a>
    80202326:	85d2                	mv	a1,s4
    80202328:	854e                	mv	a0,s3
    8020232a:	00000097          	auipc	ra,0x0
    8020232e:	8f8080e7          	jalr	-1800(ra) # 80201c22 <sleep>
    80202332:	bfd1                	j	80202306 <wait4pid+0x114>

0000000080202334 <exit>:

void
exit(int n)
{
    80202334:	7179                	addi	sp,sp,-48
    80202336:	f406                	sd	ra,40(sp)
    80202338:	f022                	sd	s0,32(sp)
    8020233a:	ec26                	sd	s1,24(sp)
    8020233c:	e84a                	sd	s2,16(sp)
    8020233e:	e44e                	sd	s3,8(sp)
    80202340:	e052                	sd	s4,0(sp)
    80202342:	1800                	addi	s0,sp,48
    80202344:	8a2a                	mv	s4,a0
  struct proc *p = myproc();
    80202346:	00009097          	auipc	ra,0x9
    8020234a:	106080e7          	jalr	262(ra) # 8020b44c <myproc>
    8020234e:	892a                	mv	s2,a0
    80202350:	4481                	li	s1,0
  //if(p == initproc)
    //panic("init exiting");
  //__debug_warn("[exit]pid %d:%s exit %d\n",p->pid,p->name,n);
  // Close all open files.
  for(int fd = 0; fd < NOFILE; fd++){
    80202352:	64000993          	li	s3,1600
    80202356:	a829                	j	80202370 <exit+0x3c>
    if(p->ofile[fd]){
      struct file *f = p->ofile[fd];
      fileclose(f);
    80202358:	00003097          	auipc	ra,0x3
    8020235c:	f5a080e7          	jalr	-166(ra) # 802052b2 <fileclose>
      p->ofile[fd] = 0;
    80202360:	0e893783          	ld	a5,232(s2)
    80202364:	97a6                	add	a5,a5,s1
    80202366:	0007b023          	sd	zero,0(a5)
  for(int fd = 0; fd < NOFILE; fd++){
    8020236a:	04a1                	addi	s1,s1,8
    8020236c:	01348863          	beq	s1,s3,8020237c <exit+0x48>
    if(p->ofile[fd]){
    80202370:	0e893783          	ld	a5,232(s2)
    80202374:	97a6                	add	a5,a5,s1
    80202376:	6388                	ld	a0,0(a5)
    80202378:	f165                	bnez	a0,80202358 <exit+0x24>
    8020237a:	bfc5                	j	8020236a <exit+0x36>
    }
  }
  if(p->ofile)
    8020237c:	0e893503          	ld	a0,232(s2)
    80202380:	c509                	beqz	a0,8020238a <exit+0x56>
    kfree((void*)p->ofile);
    80202382:	00007097          	auipc	ra,0x7
    80202386:	2d0080e7          	jalr	720(ra) # 80209652 <kfree>
  if(p->exec_close)
    8020238a:	0f093503          	ld	a0,240(s2)
    8020238e:	c509                	beqz	a0,80202398 <exit+0x64>
    kfree((void*)p->exec_close);
    80202390:	00007097          	auipc	ra,0x7
    80202394:	2c2080e7          	jalr	706(ra) # 80209652 <kfree>
  p->ofile = 0;
    80202398:	0e093423          	sd	zero,232(s2)

  eput(p->cwd);
    8020239c:	0f893503          	ld	a0,248(s2)
    802023a0:	00001097          	auipc	ra,0x1
    802023a4:	656080e7          	jalr	1622(ra) # 802039f6 <eput>
  p->cwd = 0;
    802023a8:	0e093c23          	sd	zero,248(s2)
  wakeup(p);
    802023ac:	854a                	mv	a0,s2
    802023ae:	00000097          	auipc	ra,0x0
    802023b2:	97e080e7          	jalr	-1666(ra) # 80201d2c <wakeup>
  acquire(&p->lock);
    802023b6:	00890513          	addi	a0,s2,8
    802023ba:	00006097          	auipc	ra,0x6
    802023be:	fbc080e7          	jalr	-68(ra) # 80208376 <acquire>
  wakeup(getparent(p));
    802023c2:	02893503          	ld	a0,40(s2)
    802023c6:	00000097          	auipc	ra,0x0
    802023ca:	966080e7          	jalr	-1690(ra) # 80201d2c <wakeup>
  reparent(p);
    802023ce:	854a                	mv	a0,s2
    802023d0:	00000097          	auipc	ra,0x0
    802023d4:	d4a080e7          	jalr	-694(ra) # 8020211a <reparent>
  
  p->xstate = n;
    802023d8:	03492e23          	sw	s4,60(s2)
  p->state = ZOMBIE;
    802023dc:	4791                	li	a5,4
    802023de:	02f92023          	sw	a5,32(s2)
  
  // p->killed = SIGTERM;
  // Jump into the scheduler, never to return.
  sched();
    802023e2:	fffff097          	auipc	ra,0xfffff
    802023e6:	782080e7          	jalr	1922(ra) # 80201b64 <sched>
  panic("zombie exit");
    802023ea:	00010517          	auipc	a0,0x10
    802023ee:	e7650513          	addi	a0,a0,-394 # 80212260 <rodata_start+0x260>
    802023f2:	00006097          	auipc	ra,0x6
    802023f6:	2f4080e7          	jalr	756(ra) # 802086e6 <panic>

00000000802023fa <kill>:
  while(1){
  
  }
}

int kill(int pid,int sig){
    802023fa:	7139                	addi	sp,sp,-64
    802023fc:	fc06                	sd	ra,56(sp)
    802023fe:	f822                	sd	s0,48(sp)
    80202400:	f426                	sd	s1,40(sp)
    80202402:	f04a                	sd	s2,32(sp)
    80202404:	ec4e                	sd	s3,24(sp)
    80202406:	e852                	sd	s4,16(sp)
    80202408:	e456                	sd	s5,8(sp)
    8020240a:	0080                	addi	s0,sp,64
    8020240c:	892e                	mv	s2,a1
	struct proc* p;
	for(p = proc; p < &proc[NPROC]; p++){
    8020240e:	00847497          	auipc	s1,0x847
    80202412:	24a48493          	addi	s1,s1,586 # 80a49658 <proc>
    80202416:	00852717          	auipc	a4,0x852
    8020241a:	78270713          	addi	a4,a4,1922 # 80a54b98 <firstuserinit>
		if(p->pid == pid){
    8020241e:	40bc                	lw	a5,64(s1)
    80202420:	00a78763          	beq	a5,a0,8020242e <kill+0x34>
	for(p = proc; p < &proc[NPROC]; p++){
    80202424:	1d048493          	addi	s1,s1,464
    80202428:	fee49be3          	bne	s1,a4,8020241e <kill+0x24>
    8020242c:	a83d                	j	8020246a <kill+0x70>
			acquire(&p->lock);
    8020242e:	00848993          	addi	s3,s1,8
    80202432:	854e                	mv	a0,s3
    80202434:	00006097          	auipc	ra,0x6
    80202438:	f42080e7          	jalr	-190(ra) # 80208376 <acquire>
			if(p->state == SLEEPING){
    8020243c:	5098                	lw	a4,32(s1)
    8020243e:	4785                	li	a5,1
    80202440:	02f70f63          	beq	a4,a5,8020247e <kill+0x84>
				// need to modify...
				queue_del(p);
				readyq_push(p);
				p->state = RUNNABLE;
			}
			p->sig_pending.__val[0] |= 1ul << sig;
    80202444:	4785                	li	a5,1
    80202446:	01279733          	sll	a4,a5,s2
    8020244a:	1984b783          	ld	a5,408(s1)
    8020244e:	8fd9                	or	a5,a5,a4
    80202450:	18f4bc23          	sd	a5,408(s1)
			if (0 == p->killed || sig < p->killed) {
    80202454:	5c9c                	lw	a5,56(s1)
    80202456:	c399                	beqz	a5,8020245c <kill+0x62>
    80202458:	00f95463          	bge	s2,a5,80202460 <kill+0x66>
				p->killed = sig;
    8020245c:	0324ac23          	sw	s2,56(s1)
			}
			release(&p->lock);
    80202460:	854e                	mv	a0,s3
    80202462:	00006097          	auipc	ra,0x6
    80202466:	f68080e7          	jalr	-152(ra) # 802083ca <release>
			return 0;
		}
	}
  //return -ESRCH;
  return 0;
}
    8020246a:	4501                	li	a0,0
    8020246c:	70e2                	ld	ra,56(sp)
    8020246e:	7442                	ld	s0,48(sp)
    80202470:	74a2                	ld	s1,40(sp)
    80202472:	7902                	ld	s2,32(sp)
    80202474:	69e2                	ld	s3,24(sp)
    80202476:	6a42                	ld	s4,16(sp)
    80202478:	6aa2                	ld	s5,8(sp)
    8020247a:	6121                	addi	sp,sp,64
    8020247c:	8082                	ret
	qunlock(q);
	return p;
}

static inline int queue_del(struct proc* p){
	queue* q = (queue*)p->q;
    8020247e:	1784ba03          	ld	s4,376(s1)
	acquire(&q->lk);
    80202482:	008a0a93          	addi	s5,s4,8
    80202486:	8556                	mv	a0,s5
    80202488:	00006097          	auipc	ra,0x6
    8020248c:	eee080e7          	jalr	-274(ra) # 80208376 <acquire>
	struct list* l = &p->dlist;
	qlock(q);
	if(q){
    80202490:	020a0b63          	beqz	s4,802024c6 <kill+0xcc>
	__list_link(node->prev, node->next);
    80202494:	1404b703          	ld	a4,320(s1)
    80202498:	1484b783          	ld	a5,328(s1)
	prev->next = next;
    8020249c:	e71c                	sd	a5,8(a4)
	next->prev = prev;
    8020249e:	e398                	sd	a4,0(a5)
		list_del(l);
		p->q = 0;
    802024a0:	1604bc23          	sd	zero,376(s1)
		p->dlist.prev = NULL;
    802024a4:	1404b023          	sd	zero,320(s1)
		p->dlist.next = NULL;
    802024a8:	1404b423          	sd	zero,328(s1)
	release(&q->lk);
    802024ac:	8556                	mv	a0,s5
    802024ae:	00006097          	auipc	ra,0x6
    802024b2:	f1c080e7          	jalr	-228(ra) # 802083ca <release>
				readyq_push(p);
    802024b6:	8526                	mv	a0,s1
    802024b8:	fffff097          	auipc	ra,0xfffff
    802024bc:	088080e7          	jalr	136(ra) # 80201540 <readyq_push>
				p->state = RUNNABLE;
    802024c0:	4789                	li	a5,2
    802024c2:	d09c                	sw	a5,32(s1)
    802024c4:	b741                	j	80202444 <kill+0x4a>
    802024c6:	8556                	mv	a0,s5
    802024c8:	00006097          	auipc	ra,0x6
    802024cc:	f02080e7          	jalr	-254(ra) # 802083ca <release>
		qunlock(q);	
		return 1;	
	}
	qunlock(q);
	return 0;
    802024d0:	b7dd                	j	802024b6 <kill+0xbc>

00000000802024d2 <tgkill>:
    if(p->pid == pid) return 1;
  }
  return 0;
}

int tgkill(int pid,int tid,int sig){
    802024d2:	872a                	mv	a4,a0
    802024d4:	852e                	mv	a0,a1
    802024d6:	85b2                	mv	a1,a2
  for(p = proc;p < &proc[NPROC];p++){
    802024d8:	00847797          	auipc	a5,0x847
    802024dc:	18078793          	addi	a5,a5,384 # 80a49658 <proc>
    802024e0:	00852697          	auipc	a3,0x852
    802024e4:	6b868693          	addi	a3,a3,1720 # 80a54b98 <firstuserinit>
    if(p->pid == sid) break;
    802024e8:	43b0                	lw	a2,64(a5)
    802024ea:	00a60663          	beq	a2,a0,802024f6 <tgkill+0x24>
  for(p = proc;p < &proc[NPROC];p++){
    802024ee:	1d078793          	addi	a5,a5,464
    802024f2:	fed79be3          	bne	a5,a3,802024e8 <tgkill+0x16>
  return child->parent;
    802024f6:	779c                	ld	a5,40(a5)
    if(!p)break;
    802024f8:	c385                	beqz	a5,80202518 <tgkill+0x46>
    if(p->pid == pid) return 1;
    802024fa:	43b4                	lw	a3,64(a5)
    802024fc:	fee69de3          	bne	a3,a4,802024f6 <tgkill+0x24>
int tgkill(int pid,int tid,int sig){
    80202500:	1141                	addi	sp,sp,-16
    80202502:	e406                	sd	ra,8(sp)
    80202504:	e022                	sd	s0,0(sp)
    80202506:	0800                	addi	s0,sp,16
  if(!cmp_parent(pid,tid)) return -1;
  else return kill(tid,sig);
    80202508:	00000097          	auipc	ra,0x0
    8020250c:	ef2080e7          	jalr	-270(ra) # 802023fa <kill>
}
    80202510:	60a2                	ld	ra,8(sp)
    80202512:	6402                	ld	s0,0(sp)
    80202514:	0141                	addi	sp,sp,16
    80202516:	8082                	ret
  if(!cmp_parent(pid,tid)) return -1;
    80202518:	557d                	li	a0,-1
}
    8020251a:	8082                	ret

000000008020251c <read_fat>:
/**
 * Read the FAT table content corresponded to the given cluster number.
 * @param   cluster     the number of cluster which you want to read its content in FAT table
 */
static uint32 read_fat(struct fs * self_fs, uint32 cluster)
{
    8020251c:	1101                	addi	sp,sp,-32
    8020251e:	ec06                	sd	ra,24(sp)
    80202520:	e822                	sd	s0,16(sp)
    80202522:	e426                	sd	s1,8(sp)
    80202524:	e04a                	sd	s2,0(sp)
    80202526:	1000                	addi	s0,sp,32
    if (cluster >= FAT32_EOC) {
    80202528:	100007b7          	lui	a5,0x10000
    8020252c:	17dd                	addi	a5,a5,-9
        return cluster;
    8020252e:	84ae                	mv	s1,a1
    if (cluster >= FAT32_EOC) {
    80202530:	00b7e863          	bltu	a5,a1,80202540 <read_fat+0x24>
    80202534:	892a                	mv	s2,a0
    }
    if (cluster > self_fs->fat.data_clus_cnt + 1) {     // because cluster number starts at 2, not 0
    80202536:	4d1c                	lw	a5,24(a0)
    80202538:	2785                	addiw	a5,a5,1
        return 0;
    8020253a:	4481                	li	s1,0
    if (cluster > self_fs->fat.data_clus_cnt + 1) {     // because cluster number starts at 2, not 0
    8020253c:	00b7f963          	bgeu	a5,a1,8020254e <read_fat+0x32>
    // here should be a cache layer for FAT table, but not implemented yet.
    struct buf *b = bread(self_fs->devno, fat_sec);
    uint32 next_clus = *(uint32 *)(b->data + fat_offset_of_clus(self_fs, cluster));
    brelse(b);
    return next_clus;
}
    80202540:	8526                	mv	a0,s1
    80202542:	60e2                	ld	ra,24(sp)
    80202544:	6442                	ld	s0,16(sp)
    80202546:	64a2                	ld	s1,8(sp)
    80202548:	6902                	ld	s2,0(sp)
    8020254a:	6105                	addi	sp,sp,32
    8020254c:	8082                	ret
    return self_fs->fat.bpb.rsvd_sec_cnt + (cluster << 2) / self_fs->fat.bpb.byts_per_sec + self_fs->fat.bpb.fat_sz * (fat_num - 1);
    8020254e:	0025949b          	slliw	s1,a1,0x2
    80202552:	02055783          	lhu	a5,32(a0)
    80202556:	02f4d7bb          	divuw	a5,s1,a5
    8020255a:	02455583          	lhu	a1,36(a0)
    struct buf *b = bread(self_fs->devno, fat_sec);
    8020255e:	9dbd                	addw	a1,a1,a5
    80202560:	4108                	lw	a0,0(a0)
    80202562:	ffffe097          	auipc	ra,0xffffe
    80202566:	b96080e7          	jalr	-1130(ra) # 802000f8 <bread>
    return (cluster << 2) % self_fs->fat.bpb.byts_per_sec;
    8020256a:	02095583          	lhu	a1,32(s2)
    8020256e:	02b4f5bb          	remuw	a1,s1,a1
    uint32 next_clus = *(uint32 *)(b->data + fat_offset_of_clus(self_fs, cluster));
    80202572:	1582                	slli	a1,a1,0x20
    80202574:	9181                	srli	a1,a1,0x20
    80202576:	95aa                	add	a1,a1,a0
    80202578:	4da4                	lw	s1,88(a1)
    brelse(b);
    8020257a:	ffffe097          	auipc	ra,0xffffe
    8020257e:	cea080e7          	jalr	-790(ra) # 80200264 <brelse>
    return next_clus;
    80202582:	bf7d                	j	80202540 <read_fat+0x24>

0000000080202584 <alloc_clus>:
        brelse(b);
    }
}

static uint32 alloc_clus(struct fs * self_fs, uint8 dev)
{
    80202584:	715d                	addi	sp,sp,-80
    80202586:	e486                	sd	ra,72(sp)
    80202588:	e0a2                	sd	s0,64(sp)
    8020258a:	fc26                	sd	s1,56(sp)
    8020258c:	f84a                	sd	s2,48(sp)
    8020258e:	f44e                	sd	s3,40(sp)
    80202590:	f052                	sd	s4,32(sp)
    80202592:	ec56                	sd	s5,24(sp)
    80202594:	e85a                	sd	s6,16(sp)
    80202596:	e45e                	sd	s7,8(sp)
    80202598:	e062                	sd	s8,0(sp)
    8020259a:	0880                	addi	s0,sp,80
    // should we keep a free cluster list? instead of searching fat every time.
    struct buf *b;
    uint32 sec = self_fs->fat.bpb.rsvd_sec_cnt;
    8020259c:	02455b83          	lhu	s7,36(a0)
    uint32 const ent_per_sec = self_fs->fat.bpb.byts_per_sec / sizeof(uint32);
    802025a0:	02055983          	lhu	s3,32(a0)
    for (uint32 i = 0; i < self_fs->fat.bpb.fat_sz; i++, sec++) {
    802025a4:	591c                	lw	a5,48(a0)
    802025a6:	cbf5                	beqz	a5,8020269a <alloc_clus+0x116>
    802025a8:	892a                	mv	s2,a0
    802025aa:	0029d99b          	srliw	s3,s3,0x2
    802025ae:	00098a1b          	sext.w	s4,s3
    802025b2:	4b01                	li	s6,0
        b = bread(self_fs->devno, sec);
        for (uint32 j = 0; j < ent_per_sec; j++) {
    802025b4:	4c01                	li	s8,0
    802025b6:	a86d                	j	80202670 <alloc_clus+0xec>
            if (((uint32 *)(b->data))[j] == 0) {
                ((uint32 *)(b->data))[j] = FAT32_EOC + 7;
    802025b8:	100007b7          	lui	a5,0x10000
    802025bc:	37fd                	addiw	a5,a5,-1
    802025be:	c29c                	sw	a5,0(a3)
                bwrite(self_fs->devno, b);
    802025c0:	85d6                	mv	a1,s5
    802025c2:	00092503          	lw	a0,0(s2)
    802025c6:	ffffe097          	auipc	ra,0xffffe
    802025ca:	c3e080e7          	jalr	-962(ra) # 80200204 <bwrite>
                brelse(b);
    802025ce:	8556                	mv	a0,s5
    802025d0:	ffffe097          	auipc	ra,0xffffe
    802025d4:	c94080e7          	jalr	-876(ra) # 80200264 <brelse>
                uint32 clus = i * ent_per_sec + j;
    802025d8:	036989bb          	mulw	s3,s3,s6
    802025dc:	009984bb          	addw	s1,s3,s1
    802025e0:	00048a9b          	sext.w	s5,s1
    return ((cluster - 2) * self_fs->fat.bpb.sec_per_clus) + self_fs->fat.first_data_sec;
    802025e4:	02294783          	lbu	a5,34(s2)
    802025e8:	34f9                	addiw	s1,s1,-2
    802025ea:	02f48a3b          	mulw	s4,s1,a5
    802025ee:	01092703          	lw	a4,16(s2)
    802025f2:	00ea0a3b          	addw	s4,s4,a4
    for (int i = 0; i < self_fs->fat.bpb.sec_per_clus; i++) {
    802025f6:	c7a9                	beqz	a5,80202640 <alloc_clus+0xbc>
    802025f8:	4981                	li	s3,0
        b = bread(self_fs->devno, sec++);
    802025fa:	014985bb          	addw	a1,s3,s4
    802025fe:	00092503          	lw	a0,0(s2)
    80202602:	ffffe097          	auipc	ra,0xffffe
    80202606:	af6080e7          	jalr	-1290(ra) # 802000f8 <bread>
    8020260a:	84aa                	mv	s1,a0
        memset(b->data, 0, BSIZE);
    8020260c:	20000613          	li	a2,512
    80202610:	4581                	li	a1,0
    80202612:	05850513          	addi	a0,a0,88
    80202616:	ffffe097          	auipc	ra,0xffffe
    8020261a:	75e080e7          	jalr	1886(ra) # 80200d74 <memset>
        bwrite(self_fs->devno, b);
    8020261e:	85a6                	mv	a1,s1
    80202620:	00092503          	lw	a0,0(s2)
    80202624:	ffffe097          	auipc	ra,0xffffe
    80202628:	be0080e7          	jalr	-1056(ra) # 80200204 <bwrite>
        brelse(b);
    8020262c:	8526                	mv	a0,s1
    8020262e:	ffffe097          	auipc	ra,0xffffe
    80202632:	c36080e7          	jalr	-970(ra) # 80200264 <brelse>
    for (int i = 0; i < self_fs->fat.bpb.sec_per_clus; i++) {
    80202636:	2985                	addiw	s3,s3,1
    80202638:	02294783          	lbu	a5,34(s2)
    8020263c:	faf9cfe3          	blt	s3,a5,802025fa <alloc_clus+0x76>
            }
        }
        brelse(b);
    }
    panic("no clusters");
}
    80202640:	8556                	mv	a0,s5
    80202642:	60a6                	ld	ra,72(sp)
    80202644:	6406                	ld	s0,64(sp)
    80202646:	74e2                	ld	s1,56(sp)
    80202648:	7942                	ld	s2,48(sp)
    8020264a:	79a2                	ld	s3,40(sp)
    8020264c:	7a02                	ld	s4,32(sp)
    8020264e:	6ae2                	ld	s5,24(sp)
    80202650:	6b42                	ld	s6,16(sp)
    80202652:	6ba2                	ld	s7,8(sp)
    80202654:	6c02                	ld	s8,0(sp)
    80202656:	6161                	addi	sp,sp,80
    80202658:	8082                	ret
        brelse(b);
    8020265a:	8556                	mv	a0,s5
    8020265c:	ffffe097          	auipc	ra,0xffffe
    80202660:	c08080e7          	jalr	-1016(ra) # 80200264 <brelse>
    for (uint32 i = 0; i < self_fs->fat.bpb.fat_sz; i++, sec++) {
    80202664:	2b05                	addiw	s6,s6,1
    80202666:	2b85                	addiw	s7,s7,1
    80202668:	03092783          	lw	a5,48(s2)
    8020266c:	02fb7763          	bgeu	s6,a5,8020269a <alloc_clus+0x116>
        b = bread(self_fs->devno, sec);
    80202670:	85de                	mv	a1,s7
    80202672:	00092503          	lw	a0,0(s2)
    80202676:	ffffe097          	auipc	ra,0xffffe
    8020267a:	a82080e7          	jalr	-1406(ra) # 802000f8 <bread>
    8020267e:	8aaa                	mv	s5,a0
        for (uint32 j = 0; j < ent_per_sec; j++) {
    80202680:	fc0a0de3          	beqz	s4,8020265a <alloc_clus+0xd6>
    80202684:	05850793          	addi	a5,a0,88
    80202688:	84e2                	mv	s1,s8
            if (((uint32 *)(b->data))[j] == 0) {
    8020268a:	86be                	mv	a3,a5
    8020268c:	4398                	lw	a4,0(a5)
    8020268e:	d70d                	beqz	a4,802025b8 <alloc_clus+0x34>
        for (uint32 j = 0; j < ent_per_sec; j++) {
    80202690:	2485                	addiw	s1,s1,1
    80202692:	0791                	addi	a5,a5,4
    80202694:	fe9a1be3          	bne	s4,s1,8020268a <alloc_clus+0x106>
    80202698:	b7c9                	j	8020265a <alloc_clus+0xd6>
    panic("no clusters");
    8020269a:	00010517          	auipc	a0,0x10
    8020269e:	bd650513          	addi	a0,a0,-1066 # 80212270 <rodata_start+0x270>
    802026a2:	00006097          	auipc	ra,0x6
    802026a6:	044080e7          	jalr	68(ra) # 802086e6 <panic>

00000000802026aa <write_fat>:
    if (cluster > self_fs->fat.data_clus_cnt + 1) {
    802026aa:	4d1c                	lw	a5,24(a0)
    802026ac:	2785                	addiw	a5,a5,1
    802026ae:	06b7e963          	bltu	a5,a1,80202720 <write_fat+0x76>
{
    802026b2:	7179                	addi	sp,sp,-48
    802026b4:	f406                	sd	ra,40(sp)
    802026b6:	f022                	sd	s0,32(sp)
    802026b8:	ec26                	sd	s1,24(sp)
    802026ba:	e84a                	sd	s2,16(sp)
    802026bc:	e44e                	sd	s3,8(sp)
    802026be:	e052                	sd	s4,0(sp)
    802026c0:	1800                	addi	s0,sp,48
    802026c2:	892a                	mv	s2,a0
    802026c4:	8a32                	mv	s4,a2
    return self_fs->fat.bpb.rsvd_sec_cnt + (cluster << 2) / self_fs->fat.bpb.byts_per_sec + self_fs->fat.bpb.fat_sz * (fat_num - 1);
    802026c6:	0025949b          	slliw	s1,a1,0x2
    802026ca:	02055783          	lhu	a5,32(a0)
    802026ce:	02f4d7bb          	divuw	a5,s1,a5
    802026d2:	02455583          	lhu	a1,36(a0)
    struct buf *b = bread(self_fs->devno, fat_sec);
    802026d6:	9dbd                	addw	a1,a1,a5
    802026d8:	4108                	lw	a0,0(a0)
    802026da:	ffffe097          	auipc	ra,0xffffe
    802026de:	a1e080e7          	jalr	-1506(ra) # 802000f8 <bread>
    802026e2:	89aa                	mv	s3,a0
    return (cluster << 2) % self_fs->fat.bpb.byts_per_sec;
    802026e4:	02095583          	lhu	a1,32(s2)
    802026e8:	02b4f5bb          	remuw	a1,s1,a1
    *(uint32 *)(b->data + off) = content;
    802026ec:	1582                	slli	a1,a1,0x20
    802026ee:	9181                	srli	a1,a1,0x20
    802026f0:	95aa                	add	a1,a1,a0
    802026f2:	0545ac23          	sw	s4,88(a1)
    bwrite(self_fs->devno, b);
    802026f6:	85aa                	mv	a1,a0
    802026f8:	00092503          	lw	a0,0(s2)
    802026fc:	ffffe097          	auipc	ra,0xffffe
    80202700:	b08080e7          	jalr	-1272(ra) # 80200204 <bwrite>
    brelse(b);
    80202704:	854e                	mv	a0,s3
    80202706:	ffffe097          	auipc	ra,0xffffe
    8020270a:	b5e080e7          	jalr	-1186(ra) # 80200264 <brelse>
    return 0;
    8020270e:	4501                	li	a0,0
}
    80202710:	70a2                	ld	ra,40(sp)
    80202712:	7402                	ld	s0,32(sp)
    80202714:	64e2                	ld	s1,24(sp)
    80202716:	6942                	ld	s2,16(sp)
    80202718:	69a2                	ld	s3,8(sp)
    8020271a:	6a02                	ld	s4,0(sp)
    8020271c:	6145                	addi	sp,sp,48
    8020271e:	8082                	ret
        return -1;
    80202720:	557d                	li	a0,-1
}
    80202722:	8082                	ret

0000000080202724 <reloc_clus>:
 * @param   off         the offset from the beginning of the relative file
 * @param   alloc       whether alloc new cluster when meeting end of FAT chains
 * @return              the offset from the new cur_clus
 */
static int reloc_clus(struct fs * self_fs, struct dirent *entry, uint off, int alloc)
{
    80202724:	715d                	addi	sp,sp,-80
    80202726:	e486                	sd	ra,72(sp)
    80202728:	e0a2                	sd	s0,64(sp)
    8020272a:	fc26                	sd	s1,56(sp)
    8020272c:	f84a                	sd	s2,48(sp)
    8020272e:	f44e                	sd	s3,40(sp)
    80202730:	f052                	sd	s4,32(sp)
    80202732:	ec56                	sd	s5,24(sp)
    80202734:	e85a                	sd	s6,16(sp)
    80202736:	e45e                	sd	s7,8(sp)
    80202738:	e062                	sd	s8,0(sp)
    8020273a:	0880                	addi	s0,sp,80
    8020273c:	89aa                	mv	s3,a0
    8020273e:	84ae                	mv	s1,a1
    80202740:	8ab2                	mv	s5,a2
    int clus_num = off / self_fs->fat.byts_per_clus;
    80202742:	01c52c03          	lw	s8,28(a0)
    80202746:	03865a3b          	divuw	s4,a2,s8
    while (clus_num > entry->clus_cnt) {
    8020274a:	1105a703          	lw	a4,272(a1)
    8020274e:	07477963          	bgeu	a4,s4,802027c0 <reloc_clus+0x9c>
    80202752:	8bb6                	mv	s7,a3
        int clus = read_fat(self_fs, entry->cur_clus);
        if (clus >= FAT32_EOC) {
    80202754:	10000b37          	lui	s6,0x10000
    80202758:	1b5d                	addi	s6,s6,-9
    8020275a:	a025                	j	80202782 <reloc_clus+0x5e>
            if (alloc) {
                clus = alloc_clus(self_fs, entry->dev);
                write_fat(self_fs, entry->cur_clus, clus);
            } else {
                entry->cur_clus = entry->first_clus;
    8020275c:	1044a783          	lw	a5,260(s1)
    80202760:	10f4a623          	sw	a5,268(s1)
                entry->clus_cnt = 0;
    80202764:	1004a823          	sw	zero,272(s1)
                return -1;
    80202768:	557d                	li	a0,-1
    8020276a:	a04d                	j	8020280c <reloc_clus+0xe8>
            }
        }
        entry->cur_clus = clus;
    8020276c:	1124a623          	sw	s2,268(s1)
        entry->clus_cnt++;
    80202770:	1104a783          	lw	a5,272(s1)
    80202774:	2785                	addiw	a5,a5,1
    80202776:	0007871b          	sext.w	a4,a5
    8020277a:	10f4a823          	sw	a5,272(s1)
    while (clus_num > entry->clus_cnt) {
    8020277e:	05477163          	bgeu	a4,s4,802027c0 <reloc_clus+0x9c>
        int clus = read_fat(self_fs, entry->cur_clus);
    80202782:	10c4a583          	lw	a1,268(s1)
    80202786:	854e                	mv	a0,s3
    80202788:	00000097          	auipc	ra,0x0
    8020278c:	d94080e7          	jalr	-620(ra) # 8020251c <read_fat>
    80202790:	0005091b          	sext.w	s2,a0
        if (clus >= FAT32_EOC) {
    80202794:	fd2b5ce3          	bge	s6,s2,8020276c <reloc_clus+0x48>
            if (alloc) {
    80202798:	fc0b82e3          	beqz	s7,8020275c <reloc_clus+0x38>
                clus = alloc_clus(self_fs, entry->dev);
    8020279c:	1144c583          	lbu	a1,276(s1)
    802027a0:	854e                	mv	a0,s3
    802027a2:	00000097          	auipc	ra,0x0
    802027a6:	de2080e7          	jalr	-542(ra) # 80202584 <alloc_clus>
    802027aa:	0005091b          	sext.w	s2,a0
                write_fat(self_fs, entry->cur_clus, clus);
    802027ae:	864a                	mv	a2,s2
    802027b0:	10c4a583          	lw	a1,268(s1)
    802027b4:	854e                	mv	a0,s3
    802027b6:	00000097          	auipc	ra,0x0
    802027ba:	ef4080e7          	jalr	-268(ra) # 802026aa <write_fat>
    802027be:	b77d                	j	8020276c <reloc_clus+0x48>
    }
    if (clus_num < entry->clus_cnt) {
    802027c0:	04ea7263          	bgeu	s4,a4,80202804 <reloc_clus+0xe0>
        entry->cur_clus = entry->first_clus;
    802027c4:	1044a783          	lw	a5,260(s1)
    802027c8:	10f4a623          	sw	a5,268(s1)
        entry->clus_cnt = 0;
    802027cc:	1004a823          	sw	zero,272(s1)
        while (entry->clus_cnt < clus_num) {
    802027d0:	038aea63          	bltu	s5,s8,80202804 <reloc_clus+0xe0>
            entry->cur_clus = read_fat(self_fs, entry->cur_clus);
            if (entry->cur_clus >= FAT32_EOC) {
    802027d4:	10000937          	lui	s2,0x10000
    802027d8:	195d                	addi	s2,s2,-9
            entry->cur_clus = read_fat(self_fs, entry->cur_clus);
    802027da:	10c4a583          	lw	a1,268(s1)
    802027de:	854e                	mv	a0,s3
    802027e0:	00000097          	auipc	ra,0x0
    802027e4:	d3c080e7          	jalr	-708(ra) # 8020251c <read_fat>
    802027e8:	2501                	sext.w	a0,a0
    802027ea:	10a4a623          	sw	a0,268(s1)
            if (entry->cur_clus >= FAT32_EOC) {
    802027ee:	02a96b63          	bltu	s2,a0,80202824 <reloc_clus+0x100>
                panic("reloc_clus");
            }
            entry->clus_cnt++;
    802027f2:	1104a783          	lw	a5,272(s1)
    802027f6:	2785                	addiw	a5,a5,1
    802027f8:	0007871b          	sext.w	a4,a5
    802027fc:	10f4a823          	sw	a5,272(s1)
        while (entry->clus_cnt < clus_num) {
    80202800:	fd476de3          	bltu	a4,s4,802027da <reloc_clus+0xb6>
        }
    }
    return off % self_fs->fat.byts_per_clus;
    80202804:	01c9a503          	lw	a0,28(s3)
    80202808:	02aaf53b          	remuw	a0,s5,a0
}
    8020280c:	60a6                	ld	ra,72(sp)
    8020280e:	6406                	ld	s0,64(sp)
    80202810:	74e2                	ld	s1,56(sp)
    80202812:	7942                	ld	s2,48(sp)
    80202814:	79a2                	ld	s3,40(sp)
    80202816:	7a02                	ld	s4,32(sp)
    80202818:	6ae2                	ld	s5,24(sp)
    8020281a:	6b42                	ld	s6,16(sp)
    8020281c:	6ba2                	ld	s7,8(sp)
    8020281e:	6c02                	ld	s8,0(sp)
    80202820:	6161                	addi	sp,sp,80
    80202822:	8082                	ret
                panic("reloc_clus");
    80202824:	00010517          	auipc	a0,0x10
    80202828:	a5c50513          	addi	a0,a0,-1444 # 80212280 <rodata_start+0x280>
    8020282c:	00006097          	auipc	ra,0x6
    80202830:	eba080e7          	jalr	-326(ra) # 802086e6 <panic>

0000000080202834 <rw_clus>:
{
    80202834:	7119                	addi	sp,sp,-128
    80202836:	fc86                	sd	ra,120(sp)
    80202838:	f8a2                	sd	s0,112(sp)
    8020283a:	f4a6                	sd	s1,104(sp)
    8020283c:	f0ca                	sd	s2,96(sp)
    8020283e:	ecce                	sd	s3,88(sp)
    80202840:	e8d2                	sd	s4,80(sp)
    80202842:	e4d6                	sd	s5,72(sp)
    80202844:	e0da                	sd	s6,64(sp)
    80202846:	fc5e                	sd	s7,56(sp)
    80202848:	f862                	sd	s8,48(sp)
    8020284a:	f466                	sd	s9,40(sp)
    8020284c:	f06a                	sd	s10,32(sp)
    8020284e:	ec6e                	sd	s11,24(sp)
    80202850:	0100                	addi	s0,sp,128
    80202852:	f8d43023          	sd	a3,-128(s0)
    80202856:	8b3a                	mv	s6,a4
    if (off + n > self_fs->fat.byts_per_clus)
    80202858:	010786bb          	addw	a3,a5,a6
    8020285c:	4d58                	lw	a4,28(a0)
    8020285e:	02d76d63          	bltu	a4,a3,80202898 <rw_clus+0x64>
    80202862:	8caa                	mv	s9,a0
    80202864:	8bb2                	mv	s7,a2
    80202866:	8c42                	mv	s8,a6
    uint sec = first_sec_of_clus(self_fs, cluster) + off / self_fs->fat.bpb.byts_per_sec;
    80202868:	02055a83          	lhu	s5,32(a0)
    return ((cluster - 2) * self_fs->fat.bpb.sec_per_clus) + self_fs->fat.first_data_sec;
    8020286c:	ffe5899b          	addiw	s3,a1,-2
    80202870:	02254583          	lbu	a1,34(a0)
    80202874:	02b989bb          	mulw	s3,s3,a1
    80202878:	490c                	lw	a1,16(a0)
    8020287a:	00b989bb          	addw	s3,s3,a1
    uint sec = first_sec_of_clus(self_fs, cluster) + off / self_fs->fat.bpb.byts_per_sec;
    8020287e:	0357d73b          	divuw	a4,a5,s5
    80202882:	00e989bb          	addw	s3,s3,a4
    off = off % self_fs->fat.bpb.byts_per_sec;
    80202886:	0357fabb          	remuw	s5,a5,s5
    for (tot = 0; tot < n; tot += m, off += m, data += m, sec++) {
    8020288a:	0e080963          	beqz	a6,8020297c <rw_clus+0x148>
    8020288e:	4a01                	li	s4,0
        m = BSIZE - off % BSIZE;
    80202890:	20000d93          	li	s11,512
        if (bad == -1) {
    80202894:	5d7d                	li	s10,-1
    80202896:	a0bd                	j	80202904 <rw_clus+0xd0>
        panic("offset out of range");
    80202898:	00010517          	auipc	a0,0x10
    8020289c:	9f850513          	addi	a0,a0,-1544 # 80212290 <rodata_start+0x290>
    802028a0:	00006097          	auipc	ra,0x6
    802028a4:	e46080e7          	jalr	-442(ra) # 802086e6 <panic>
                bwrite(self_fs->devno, bp);
    802028a8:	85ca                	mv	a1,s2
    802028aa:	000ca503          	lw	a0,0(s9)
    802028ae:	ffffe097          	auipc	ra,0xffffe
    802028b2:	956080e7          	jalr	-1706(ra) # 80200204 <bwrite>
        brelse(bp);
    802028b6:	854a                	mv	a0,s2
    802028b8:	ffffe097          	auipc	ra,0xffffe
    802028bc:	9ac080e7          	jalr	-1620(ra) # 80200264 <brelse>
        if (bad == -1) {
    802028c0:	a805                	j	802028f0 <rw_clus+0xbc>
            bad = either_copyout(user, data, bp->data + (off % BSIZE), m);
    802028c2:	05890613          	addi	a2,s2,88 # 10000058 <_entry-0x701fffa8>
    802028c6:	1682                	slli	a3,a3,0x20
    802028c8:	9281                	srli	a3,a3,0x20
    802028ca:	963a                	add	a2,a2,a4
    802028cc:	85da                	mv	a1,s6
    802028ce:	f8043503          	ld	a0,-128(s0)
    802028d2:	00008097          	auipc	ra,0x8
    802028d6:	594080e7          	jalr	1428(ra) # 8020ae66 <either_copyout>
    802028da:	f8a43423          	sd	a0,-120(s0)
        brelse(bp);
    802028de:	854a                	mv	a0,s2
    802028e0:	ffffe097          	auipc	ra,0xffffe
    802028e4:	984080e7          	jalr	-1660(ra) # 80200264 <brelse>
        if (bad == -1) {
    802028e8:	f8843783          	ld	a5,-120(s0)
    802028ec:	07a78863          	beq	a5,s10,8020295c <rw_clus+0x128>
    for (tot = 0; tot < n; tot += m, off += m, data += m, sec++) {
    802028f0:	01448a3b          	addw	s4,s1,s4
    802028f4:	01548abb          	addw	s5,s1,s5
    802028f8:	1482                	slli	s1,s1,0x20
    802028fa:	9081                	srli	s1,s1,0x20
    802028fc:	9b26                	add	s6,s6,s1
    802028fe:	2985                	addiw	s3,s3,1
    80202900:	058a7e63          	bgeu	s4,s8,8020295c <rw_clus+0x128>
        bp = bread(self_fs->devno, sec);
    80202904:	85ce                	mv	a1,s3
    80202906:	000ca503          	lw	a0,0(s9)
    8020290a:	ffffd097          	auipc	ra,0xffffd
    8020290e:	7ee080e7          	jalr	2030(ra) # 802000f8 <bread>
    80202912:	892a                	mv	s2,a0
        m = BSIZE - off % BSIZE;
    80202914:	1ffaf713          	andi	a4,s5,511
    80202918:	40ed863b          	subw	a2,s11,a4
        if (n - tot < m) {
    8020291c:	414c07bb          	subw	a5,s8,s4
    80202920:	86be                	mv	a3,a5
    80202922:	2781                	sext.w	a5,a5
    80202924:	0006059b          	sext.w	a1,a2
    80202928:	00f5f363          	bgeu	a1,a5,8020292e <rw_clus+0xfa>
    8020292c:	86b2                	mv	a3,a2
    8020292e:	0006849b          	sext.w	s1,a3
        if (write) {
    80202932:	f80b88e3          	beqz	s7,802028c2 <rw_clus+0x8e>
            if ((bad = either_copyin(user, bp->data + (off % BSIZE), data, m)) != -1) {
    80202936:	05890593          	addi	a1,s2,88
    8020293a:	1682                	slli	a3,a3,0x20
    8020293c:	9281                	srli	a3,a3,0x20
    8020293e:	865a                	mv	a2,s6
    80202940:	95ba                	add	a1,a1,a4
    80202942:	f8043503          	ld	a0,-128(s0)
    80202946:	00008097          	auipc	ra,0x8
    8020294a:	576080e7          	jalr	1398(ra) # 8020aebc <either_copyin>
    8020294e:	f5a51de3          	bne	a0,s10,802028a8 <rw_clus+0x74>
        brelse(bp);
    80202952:	854a                	mv	a0,s2
    80202954:	ffffe097          	auipc	ra,0xffffe
    80202958:	910080e7          	jalr	-1776(ra) # 80200264 <brelse>
}
    8020295c:	8552                	mv	a0,s4
    8020295e:	70e6                	ld	ra,120(sp)
    80202960:	7446                	ld	s0,112(sp)
    80202962:	74a6                	ld	s1,104(sp)
    80202964:	7906                	ld	s2,96(sp)
    80202966:	69e6                	ld	s3,88(sp)
    80202968:	6a46                	ld	s4,80(sp)
    8020296a:	6aa6                	ld	s5,72(sp)
    8020296c:	6b06                	ld	s6,64(sp)
    8020296e:	7be2                	ld	s7,56(sp)
    80202970:	7c42                	ld	s8,48(sp)
    80202972:	7ca2                	ld	s9,40(sp)
    80202974:	7d02                	ld	s10,32(sp)
    80202976:	6de2                	ld	s11,24(sp)
    80202978:	6109                	addi	sp,sp,128
    8020297a:	8082                	ret
    for (tot = 0; tot < n; tot += m, off += m, data += m, sec++) {
    8020297c:	8a42                	mv	s4,a6
    8020297e:	bff9                	j	8020295c <rw_clus+0x128>

0000000080202980 <eget>:
// by their whole path. But when parsing a path, we open all the directories through it, 
// which forms a linked list from the final file to the self_fs->root. Thus, we use the "parent" pointer 
// to recognize whether an entry with the "name" as given is really the file we want in the right path.
// Should never get self_fs->root by eget, it's easy to understand.
static struct dirent *eget(struct dirent *parent, char *name)
{
    80202980:	715d                	addi	sp,sp,-80
    80202982:	e486                	sd	ra,72(sp)
    80202984:	e0a2                	sd	s0,64(sp)
    80202986:	fc26                	sd	s1,56(sp)
    80202988:	f84a                	sd	s2,48(sp)
    8020298a:	f44e                	sd	s3,40(sp)
    8020298c:	f052                	sd	s4,32(sp)
    8020298e:	ec56                	sd	s5,24(sp)
    80202990:	e85a                	sd	s6,16(sp)
    80202992:	e45e                	sd	s7,8(sp)
    80202994:	e062                	sd	s8,0(sp)
    80202996:	0880                	addi	s0,sp,80
    80202998:	8a2a                	mv	s4,a0
    8020299a:	8bae                	mv	s7,a1
    if(parent->mnt) parent = &(FatFs[parent->dev].root);
    8020299c:	11c52783          	lw	a5,284(a0)
    802029a0:	c385                	beqz	a5,802029c0 <eget+0x40>
    802029a2:	11454a03          	lbu	s4,276(a0)
    802029a6:	6795                	lui	a5,0x5
    802029a8:	9b878713          	addi	a4,a5,-1608 # 49b8 <_entry-0x801fb648>
    802029ac:	02ea0a33          	mul	s4,s4,a4
    802029b0:	83078793          	addi	a5,a5,-2000
    802029b4:	9a3e                	add	s4,s4,a5
    802029b6:	00852517          	auipc	a0,0x852
    802029ba:	1fa50513          	addi	a0,a0,506 # 80a54bb0 <FatFs>
    802029be:	9a2a                	add	s4,s4,a0
    struct fs * self_fs = &FatFs[parent->dev];
    802029c0:	114a4903          	lbu	s2,276(s4)
    802029c4:	00090b1b          	sext.w	s6,s2
    struct dirent *ep;
    acquire(&self_fs->ecache.lock);
    802029c8:	6795                	lui	a5,0x5
    802029ca:	9b878793          	addi	a5,a5,-1608 # 49b8 <_entry-0x801fb648>
    802029ce:	02f90933          	mul	s2,s2,a5
    802029d2:	00852a97          	auipc	s5,0x852
    802029d6:	216a8a93          	addi	s5,s5,534 # 80a54be8 <FatFs+0x38>
    802029da:	9aca                	add	s5,s5,s2
    802029dc:	8556                	mv	a0,s5
    802029de:	00006097          	auipc	ra,0x6
    802029e2:	998080e7          	jalr	-1640(ra) # 80208376 <acquire>
    if (name) {
    802029e6:	080b8063          	beqz	s7,80202a66 <eget+0xe6>
        for (ep = self_fs->root.next; ep != &self_fs->root; ep = ep->next) {          // LRU algo
    802029ea:	00852697          	auipc	a3,0x852
    802029ee:	1c668693          	addi	a3,a3,454 # 80a54bb0 <FatFs>
    802029f2:	6795                	lui	a5,0x5
    802029f4:	9b878713          	addi	a4,a5,-1608 # 49b8 <_entry-0x801fb648>
    802029f8:	02eb0733          	mul	a4,s6,a4
    802029fc:	9736                	add	a4,a4,a3
    802029fe:	973e                	add	a4,a4,a5
    80202a00:	96073483          	ld	s1,-1696(a4)
    80202a04:	83078993          	addi	s3,a5,-2000
    80202a08:	99ca                	add	s3,s3,s2
    80202a0a:	99b6                	add	s3,s3,a3
    80202a0c:	05348d63          	beq	s1,s3,80202a66 <eget+0xe6>
            if (ep->valid == 1 && ep->parent == parent
    80202a10:	4c05                	li	s8,1
    80202a12:	a029                	j	80202a1c <eget+0x9c>
        for (ep = self_fs->root.next; ep != &self_fs->root; ep = ep->next) {          // LRU algo
    80202a14:	1304b483          	ld	s1,304(s1)
    80202a18:	05348763          	beq	s1,s3,80202a66 <eget+0xe6>
            if (ep->valid == 1 && ep->parent == parent
    80202a1c:	11649783          	lh	a5,278(s1)
    80202a20:	ff879ae3          	bne	a5,s8,80202a14 <eget+0x94>
    80202a24:	1284b783          	ld	a5,296(s1)
    80202a28:	ff4796e3          	bne	a5,s4,80202a14 <eget+0x94>
                && strncmp(ep->filename, name, FAT32_MAX_FILENAME) == 0) {
    80202a2c:	0ff00613          	li	a2,255
    80202a30:	85de                	mv	a1,s7
    80202a32:	8526                	mv	a0,s1
    80202a34:	ffffe097          	auipc	ra,0xffffe
    80202a38:	41c080e7          	jalr	1052(ra) # 80200e50 <strncmp>
    80202a3c:	fd61                	bnez	a0,80202a14 <eget+0x94>
                if (ep->ref++ == 0) {
    80202a3e:	1184a783          	lw	a5,280(s1)
    80202a42:	0017871b          	addiw	a4,a5,1
    80202a46:	10e4ac23          	sw	a4,280(s1)
    80202a4a:	eb81                	bnez	a5,80202a5a <eget+0xda>
                    ep->parent->ref++;
    80202a4c:	1284b703          	ld	a4,296(s1)
    80202a50:	11872783          	lw	a5,280(a4)
    80202a54:	2785                	addiw	a5,a5,1
    80202a56:	10f72c23          	sw	a5,280(a4)
                }
                release(&self_fs->ecache.lock);
    80202a5a:	8556                	mv	a0,s5
    80202a5c:	00006097          	auipc	ra,0x6
    80202a60:	96e080e7          	jalr	-1682(ra) # 802083ca <release>
                // edup(ep->parent);
                return ep;
    80202a64:	a0bd                	j	80202ad2 <eget+0x152>
            }
        }
    }
    for (ep = self_fs->root.prev; ep != &self_fs->root; ep = ep->prev) {              // LRU algo
    80202a66:	00852697          	auipc	a3,0x852
    80202a6a:	14a68693          	addi	a3,a3,330 # 80a54bb0 <FatFs>
    80202a6e:	6715                	lui	a4,0x5
    80202a70:	9b870793          	addi	a5,a4,-1608 # 49b8 <_entry-0x801fb648>
    80202a74:	02fb07b3          	mul	a5,s6,a5
    80202a78:	97b6                	add	a5,a5,a3
    80202a7a:	97ba                	add	a5,a5,a4
    80202a7c:	9687b483          	ld	s1,-1688(a5)
    80202a80:	83070713          	addi	a4,a4,-2000
    80202a84:	974a                	add	a4,a4,s2
    80202a86:	9736                	add	a4,a4,a3
    80202a88:	00e48963          	beq	s1,a4,80202a9a <eget+0x11a>
        if (ep->ref == 0) {
    80202a8c:	1184a783          	lw	a5,280(s1)
    80202a90:	cf89                	beqz	a5,80202aaa <eget+0x12a>
    for (ep = self_fs->root.prev; ep != &self_fs->root; ep = ep->prev) {              // LRU algo
    80202a92:	1384b483          	ld	s1,312(s1)
    80202a96:	fee49be3          	bne	s1,a4,80202a8c <eget+0x10c>
            ep->dirty = 0;
            release(&self_fs->ecache.lock);
            return ep;
        }
    }
    panic("eget: insufficient self_fs->ecache");
    80202a9a:	00010517          	auipc	a0,0x10
    80202a9e:	80e50513          	addi	a0,a0,-2034 # 802122a8 <rodata_start+0x2a8>
    80202aa2:	00006097          	auipc	ra,0x6
    80202aa6:	c44080e7          	jalr	-956(ra) # 802086e6 <panic>
            ep->ref = 1;
    80202aaa:	4785                	li	a5,1
    80202aac:	10f4ac23          	sw	a5,280(s1)
            ep->dev = parent->dev;
    80202ab0:	114a4783          	lbu	a5,276(s4)
    80202ab4:	10f48a23          	sb	a5,276(s1)
            ep->off = 0;
    80202ab8:	1204a023          	sw	zero,288(s1)
            ep->valid = 0;
    80202abc:	10049b23          	sh	zero,278(s1)
            ep->mnt = 0;
    80202ac0:	1004ae23          	sw	zero,284(s1)
            ep->dirty = 0;
    80202ac4:	10048aa3          	sb	zero,277(s1)
            release(&self_fs->ecache.lock);
    80202ac8:	8556                	mv	a0,s5
    80202aca:	00006097          	auipc	ra,0x6
    80202ace:	900080e7          	jalr	-1792(ra) # 802083ca <release>
    return 0;
}
    80202ad2:	8526                	mv	a0,s1
    80202ad4:	60a6                	ld	ra,72(sp)
    80202ad6:	6406                	ld	s0,64(sp)
    80202ad8:	74e2                	ld	s1,56(sp)
    80202ada:	7942                	ld	s2,48(sp)
    80202adc:	79a2                	ld	s3,40(sp)
    80202ade:	7a02                	ld	s4,32(sp)
    80202ae0:	6ae2                	ld	s5,24(sp)
    80202ae2:	6b42                	ld	s6,16(sp)
    80202ae4:	6ba2                	ld	s7,8(sp)
    80202ae6:	6c02                	ld	s8,0(sp)
    80202ae8:	6161                	addi	sp,sp,80
    80202aea:	8082                	ret

0000000080202aec <read_entry_name>:
 * @param   buffer      pointer to the array that stores the name
 * @param   raw_entry   pointer to the entry in a sector buffer
 * @param   islong      if non-zero, read as l-n-e, otherwise s-n-e.
 */
static void read_entry_name(char *buffer, union dentry *d)
{
    80202aec:	7179                	addi	sp,sp,-48
    80202aee:	f406                	sd	ra,40(sp)
    80202af0:	f022                	sd	s0,32(sp)
    80202af2:	ec26                	sd	s1,24(sp)
    80202af4:	e84a                	sd	s2,16(sp)
    80202af6:	1800                	addi	s0,sp,48
    80202af8:	84aa                	mv	s1,a0
    80202afa:	892e                	mv	s2,a1
    if (d->lne.attr == ATTR_LONG_NAME) {                       // long entry branch
    80202afc:	00b5c703          	lbu	a4,11(a1)
    80202b00:	47bd                	li	a5,15
    80202b02:	08f70463          	beq	a4,a5,80202b8a <read_entry_name+0x9e>
        snstr(buffer, d->lne.name2, NELEM(d->lne.name2));
        buffer += NELEM(d->lne.name2);
        snstr(buffer, d->lne.name3, NELEM(d->lne.name3));
    } else {
        // assert: only "." and ".." will enter this branch
        memset(buffer, 0, CHAR_SHORT_NAME + 2); // plus '.' and '\0'
    80202b06:	4635                	li	a2,13
    80202b08:	4581                	li	a1,0
    80202b0a:	ffffe097          	auipc	ra,0xffffe
    80202b0e:	26a080e7          	jalr	618(ra) # 80200d74 <memset>
        int i;
        for (i = 0; d->sne.name[i] != ' ' && i < 8; i++) {
    80202b12:	00094703          	lbu	a4,0(s2)
    80202b16:	02000793          	li	a5,32
    80202b1a:	0af70b63          	beq	a4,a5,80202bd0 <read_entry_name+0xe4>
    80202b1e:	4785                	li	a5,1
    80202b20:	02000613          	li	a2,32
    80202b24:	45a5                	li	a1,9
            buffer[i] = d->sne.name[i];
    80202b26:	00f486b3          	add	a3,s1,a5
    80202b2a:	fee68fa3          	sb	a4,-1(a3)
        for (i = 0; d->sne.name[i] != ' ' && i < 8; i++) {
    80202b2e:	0007851b          	sext.w	a0,a5
    80202b32:	00f90733          	add	a4,s2,a5
    80202b36:	00074703          	lbu	a4,0(a4)
    80202b3a:	00c70563          	beq	a4,a2,80202b44 <read_entry_name+0x58>
    80202b3e:	0785                	addi	a5,a5,1
    80202b40:	feb793e3          	bne	a5,a1,80202b26 <read_entry_name+0x3a>
        }
        if (d->sne.name[8] != ' ') {
    80202b44:	00894703          	lbu	a4,8(s2)
    80202b48:	02000793          	li	a5,32
    80202b4c:	00f70963          	beq	a4,a5,80202b5e <read_entry_name+0x72>
            buffer[i++] = '.';
    80202b50:	00a487b3          	add	a5,s1,a0
    80202b54:	02e00713          	li	a4,46
    80202b58:	00e78023          	sb	a4,0(a5)
    80202b5c:	2505                	addiw	a0,a0,1
        }
        for (int j = 8; j < CHAR_SHORT_NAME; j++, i++) {
    80202b5e:	00890793          	addi	a5,s2,8
    80202b62:	94aa                	add	s1,s1,a0
    80202b64:	092d                	addi	s2,s2,11
            if (d->sne.name[j] == ' ') { break; }
    80202b66:	02000693          	li	a3,32
    80202b6a:	0007c703          	lbu	a4,0(a5)
    80202b6e:	00d70863          	beq	a4,a3,80202b7e <read_entry_name+0x92>
            buffer[i] = d->sne.name[j];
    80202b72:	00e48023          	sb	a4,0(s1)
        for (int j = 8; j < CHAR_SHORT_NAME; j++, i++) {
    80202b76:	0785                	addi	a5,a5,1
    80202b78:	0485                	addi	s1,s1,1
    80202b7a:	ff2798e3          	bne	a5,s2,80202b6a <read_entry_name+0x7e>
        }
    }
}
    80202b7e:	70a2                	ld	ra,40(sp)
    80202b80:	7402                	ld	s0,32(sp)
    80202b82:	64e2                	ld	s1,24(sp)
    80202b84:	6942                	ld	s2,16(sp)
    80202b86:	6145                	addi	sp,sp,48
    80202b88:	8082                	ret
        memmove(temp, d->lne.name1, sizeof(temp));
    80202b8a:	4629                	li	a2,10
    80202b8c:	0585                	addi	a1,a1,1
    80202b8e:	fd040513          	addi	a0,s0,-48
    80202b92:	ffffe097          	auipc	ra,0xffffe
    80202b96:	242080e7          	jalr	578(ra) # 80200dd4 <memmove>
        snstr(buffer, temp, NELEM(d->lne.name1));
    80202b9a:	4615                	li	a2,5
    80202b9c:	fd040593          	addi	a1,s0,-48
    80202ba0:	8526                	mv	a0,s1
    80202ba2:	ffffe097          	auipc	ra,0xffffe
    80202ba6:	3b8080e7          	jalr	952(ra) # 80200f5a <snstr>
        snstr(buffer, d->lne.name2, NELEM(d->lne.name2));
    80202baa:	4619                	li	a2,6
    80202bac:	00e90593          	addi	a1,s2,14
    80202bb0:	00548513          	addi	a0,s1,5
    80202bb4:	ffffe097          	auipc	ra,0xffffe
    80202bb8:	3a6080e7          	jalr	934(ra) # 80200f5a <snstr>
        snstr(buffer, d->lne.name3, NELEM(d->lne.name3));
    80202bbc:	4609                	li	a2,2
    80202bbe:	01c90593          	addi	a1,s2,28
    80202bc2:	00b48513          	addi	a0,s1,11
    80202bc6:	ffffe097          	auipc	ra,0xffffe
    80202bca:	394080e7          	jalr	916(ra) # 80200f5a <snstr>
    80202bce:	bf45                	j	80202b7e <read_entry_name+0x92>
        for (i = 0; d->sne.name[i] != ' ' && i < 8; i++) {
    80202bd0:	4501                	li	a0,0
    80202bd2:	bf8d                	j	80202b44 <read_entry_name+0x58>

0000000080202bd4 <fat32_init>:
{
    80202bd4:	7139                	addi	sp,sp,-64
    80202bd6:	fc06                	sd	ra,56(sp)
    80202bd8:	f822                	sd	s0,48(sp)
    80202bda:	f426                	sd	s1,40(sp)
    80202bdc:	f04a                	sd	s2,32(sp)
    80202bde:	ec4e                	sd	s3,24(sp)
    80202be0:	e852                	sd	s4,16(sp)
    80202be2:	e456                	sd	s5,8(sp)
    80202be4:	e05a                	sd	s6,0(sp)
    80202be6:	0080                	addi	s0,sp,64
    80202be8:	892a                	mv	s2,a0
    if(!debug_output)
    80202bea:	00869797          	auipc	a5,0x869
    80202bee:	05e7a783          	lw	a5,94(a5) # 80a6bc48 <debug_output>
    80202bf2:	1c078063          	beqz	a5,80202db2 <fat32_init+0x1de>
    if(self_fs->valid)return -1;
    80202bf6:	00492783          	lw	a5,4(s2)
    80202bfa:	26079763          	bnez	a5,80202e68 <fat32_init+0x294>
    else self_fs->valid = 1;
    80202bfe:	4785                	li	a5,1
    80202c00:	00f92223          	sw	a5,4(s2)
    self_fs->disk_init(self_fs->image);
    80202c04:	6795                	lui	a5,0x5
    80202c06:	97ca                	add	a5,a5,s2
    80202c08:	9a07b783          	ld	a5,-1632(a5) # 49a0 <_entry-0x801fb660>
    80202c0c:	00893503          	ld	a0,8(s2)
    80202c10:	9782                	jalr	a5
    struct buf *b = bread(self_fs->devno, 0);
    80202c12:	4581                	li	a1,0
    80202c14:	00092503          	lw	a0,0(s2)
    80202c18:	ffffd097          	auipc	ra,0xffffd
    80202c1c:	4e0080e7          	jalr	1248(ra) # 802000f8 <bread>
    80202c20:	84aa                	mv	s1,a0
    if (strncmp((char const*)(b->data + 82), "FAT32", 5))
    80202c22:	4615                	li	a2,5
    80202c24:	0000f597          	auipc	a1,0xf
    80202c28:	6cc58593          	addi	a1,a1,1740 # 802122f0 <rodata_start+0x2f0>
    80202c2c:	0aa50513          	addi	a0,a0,170
    80202c30:	ffffe097          	auipc	ra,0xffffe
    80202c34:	220080e7          	jalr	544(ra) # 80200e50 <strncmp>
    80202c38:	8b2a                	mv	s6,a0
    80202c3a:	18051a63          	bnez	a0,80202dce <fat32_init+0x1fa>
    memmove(&self_fs->fat.bpb.byts_per_sec, b->data + 11, 2);            // avoid misaligned load on k210
    80202c3e:	4609                	li	a2,2
    80202c40:	06348593          	addi	a1,s1,99
    80202c44:	02090513          	addi	a0,s2,32
    80202c48:	ffffe097          	auipc	ra,0xffffe
    80202c4c:	18c080e7          	jalr	396(ra) # 80200dd4 <memmove>
    self_fs->fat.bpb.sec_per_clus = *(b->data + 13);
    80202c50:	0654c683          	lbu	a3,101(s1)
    80202c54:	02d90123          	sb	a3,34(s2)
    self_fs->fat.bpb.rsvd_sec_cnt = *(uint16 *)(b->data + 14);
    80202c58:	0664d603          	lhu	a2,102(s1)
    80202c5c:	02c91223          	sh	a2,36(s2)
    self_fs->fat.bpb.fat_cnt = *(b->data + 16);
    80202c60:	0684c703          	lbu	a4,104(s1)
    80202c64:	02e90323          	sb	a4,38(s2)
    self_fs->fat.bpb.hidd_sec = *(uint32 *)(b->data + 28);
    80202c68:	58fc                	lw	a5,116(s1)
    80202c6a:	02f92423          	sw	a5,40(s2)
    self_fs->fat.bpb.tot_sec = *(uint32 *)(b->data + 32);
    80202c6e:	5cbc                	lw	a5,120(s1)
    80202c70:	02f92623          	sw	a5,44(s2)
    self_fs->fat.bpb.fat_sz = *(uint32 *)(b->data + 36);
    80202c74:	5cec                	lw	a1,124(s1)
    80202c76:	02b92823          	sw	a1,48(s2)
    self_fs->fat.bpb.root_clus = *(uint32 *)(b->data + 44);
    80202c7a:	0844a503          	lw	a0,132(s1)
    80202c7e:	02a92a23          	sw	a0,52(s2)
    self_fs->fat.first_data_sec = self_fs->fat.bpb.rsvd_sec_cnt + self_fs->fat.bpb.fat_cnt * self_fs->fat.bpb.fat_sz;
    80202c82:	02b7073b          	mulw	a4,a4,a1
    80202c86:	9f31                	addw	a4,a4,a2
    80202c88:	00e92823          	sw	a4,16(s2)
    self_fs->fat.data_sec_cnt = self_fs->fat.bpb.tot_sec - self_fs->fat.first_data_sec;
    80202c8c:	9f99                	subw	a5,a5,a4
    80202c8e:	00f92a23          	sw	a5,20(s2)
    self_fs->fat.data_clus_cnt = self_fs->fat.data_sec_cnt / self_fs->fat.bpb.sec_per_clus;
    80202c92:	02d7d7bb          	divuw	a5,a5,a3
    80202c96:	00f92c23          	sw	a5,24(s2)
    self_fs->fat.byts_per_clus = self_fs->fat.bpb.sec_per_clus * self_fs->fat.bpb.byts_per_sec;
    80202c9a:	02095783          	lhu	a5,32(s2)
    80202c9e:	02d787bb          	mulw	a5,a5,a3
    80202ca2:	00f92e23          	sw	a5,28(s2)
    brelse(b);
    80202ca6:	8526                	mv	a0,s1
    80202ca8:	ffffd097          	auipc	ra,0xffffd
    80202cac:	5bc080e7          	jalr	1468(ra) # 80200264 <brelse>
    if(!debug_output){
    80202cb0:	00869797          	auipc	a5,0x869
    80202cb4:	f987a783          	lw	a5,-104(a5) # 80a6bc48 <debug_output>
    80202cb8:	12078363          	beqz	a5,80202dde <fat32_init+0x20a>
    debug_output = 1;
    80202cbc:	4785                	li	a5,1
    80202cbe:	00869717          	auipc	a4,0x869
    80202cc2:	f8f72523          	sw	a5,-118(a4) # 80a6bc48 <debug_output>
    if (BSIZE != self_fs->fat.bpb.byts_per_sec) 
    80202cc6:	02095703          	lhu	a4,32(s2)
    80202cca:	20000793          	li	a5,512
    80202cce:	18f71563          	bne	a4,a5,80202e58 <fat32_init+0x284>
    initlock(&self_fs->ecache.lock, "self_fs->ecache");
    80202cd2:	0000f597          	auipc	a1,0xf
    80202cd6:	70e58593          	addi	a1,a1,1806 # 802123e0 <rodata_start+0x3e0>
    80202cda:	03890513          	addi	a0,s2,56
    80202cde:	00005097          	auipc	ra,0x5
    80202ce2:	654080e7          	jalr	1620(ra) # 80208332 <initlock>
    memset(&self_fs->root, 0, sizeof(self_fs->root));
    80202ce6:	6495                	lui	s1,0x5
    80202ce8:	83048993          	addi	s3,s1,-2000 # 4830 <_entry-0x801fb7d0>
    80202cec:	99ca                	add	s3,s3,s2
    80202cee:	17000613          	li	a2,368
    80202cf2:	4581                	li	a1,0
    80202cf4:	854e                	mv	a0,s3
    80202cf6:	ffffe097          	auipc	ra,0xffffe
    80202cfa:	07e080e7          	jalr	126(ra) # 80200d74 <memset>
    initsleeplock(&self_fs->root.lock, "entry");
    80202cfe:	97048513          	addi	a0,s1,-1680
    80202d02:	0000f597          	auipc	a1,0xf
    80202d06:	6ee58593          	addi	a1,a1,1774 # 802123f0 <rodata_start+0x3f0>
    80202d0a:	954a                	add	a0,a0,s2
    80202d0c:	00005097          	auipc	ra,0x5
    80202d10:	706080e7          	jalr	1798(ra) # 80208412 <initsleeplock>
    self_fs->root.attribute = (ATTR_DIRECTORY | ATTR_SYSTEM);
    80202d14:	009907b3          	add	a5,s2,s1
    80202d18:	4751                	li	a4,20
    80202d1a:	92e78823          	sb	a4,-1744(a5)
    self_fs->root.first_clus = self_fs->root.cur_clus = self_fs->fat.bpb.root_clus;
    80202d1e:	03492703          	lw	a4,52(s2)
    80202d22:	92e7ae23          	sw	a4,-1732(a5)
    80202d26:	92e7aa23          	sw	a4,-1740(a5)
    self_fs->root.valid = 1;
    80202d2a:	4705                	li	a4,1
    80202d2c:	94e79323          	sh	a4,-1722(a5)
    self_fs->root.prev = &self_fs->root;
    80202d30:	9737b423          	sd	s3,-1688(a5)
    self_fs->root.next = &self_fs->root;
    80202d34:	9737b023          	sd	s3,-1696(a5)
    self_fs->root.dev = self_fs->devno;
    80202d38:	00092703          	lw	a4,0(s2)
    80202d3c:	94e78223          	sb	a4,-1724(a5)
    self_fs->root.parent = 0;
    80202d40:	9407bc23          	sd	zero,-1704(a5)
    for(struct dirent *de = self_fs->ecache.entries; de < self_fs->ecache.entries + ENTRY_CACHE_NUM; de++) {
    80202d44:	05090493          	addi	s1,s2,80
    80202d48:	8ace                	mv	s5,s3
        de->next = self_fs->root.next;
    80202d4a:	6795                	lui	a5,0x5
    80202d4c:	993e                	add	s2,s2,a5
        initsleeplock(&de->lock, "entry");
    80202d4e:	0000fa17          	auipc	s4,0xf
    80202d52:	6a2a0a13          	addi	s4,s4,1698 # 802123f0 <rodata_start+0x3f0>
        de->dev = 0;
    80202d56:	10048a23          	sb	zero,276(s1)
        de->valid = 0;
    80202d5a:	10049b23          	sh	zero,278(s1)
        de->ref = 0;
    80202d5e:	1004ac23          	sw	zero,280(s1)
        de->dirty = 0;
    80202d62:	10048aa3          	sb	zero,277(s1)
        de->mnt = 0;
    80202d66:	1004ae23          	sw	zero,284(s1)
        de->parent = 0;
    80202d6a:	1204b423          	sd	zero,296(s1)
        de->next = self_fs->root.next;
    80202d6e:	96093783          	ld	a5,-1696(s2)
    80202d72:	12f4b823          	sd	a5,304(s1)
        de->prev = &self_fs->root;
    80202d76:	1334bc23          	sd	s3,312(s1)
        initsleeplock(&de->lock, "entry");
    80202d7a:	85d2                	mv	a1,s4
    80202d7c:	14048513          	addi	a0,s1,320
    80202d80:	00005097          	auipc	ra,0x5
    80202d84:	692080e7          	jalr	1682(ra) # 80208412 <initsleeplock>
        self_fs->root.next->prev = de;
    80202d88:	96093783          	ld	a5,-1696(s2)
    80202d8c:	1297bc23          	sd	s1,312(a5) # 5138 <_entry-0x801faec8>
        self_fs->root.next = de;
    80202d90:	96993023          	sd	s1,-1696(s2)
    for(struct dirent *de = self_fs->ecache.entries; de < self_fs->ecache.entries + ENTRY_CACHE_NUM; de++) {
    80202d94:	17048493          	addi	s1,s1,368
    80202d98:	fb549fe3          	bne	s1,s5,80202d56 <fat32_init+0x182>
}
    80202d9c:	855a                	mv	a0,s6
    80202d9e:	70e2                	ld	ra,56(sp)
    80202da0:	7442                	ld	s0,48(sp)
    80202da2:	74a2                	ld	s1,40(sp)
    80202da4:	7902                	ld	s2,32(sp)
    80202da6:	69e2                	ld	s3,24(sp)
    80202da8:	6a42                	ld	s4,16(sp)
    80202daa:	6aa2                	ld	s5,8(sp)
    80202dac:	6b02                	ld	s6,0(sp)
    80202dae:	6121                	addi	sp,sp,64
    80202db0:	8082                	ret
      printf("[fat32_init]hart %d enter!\n",cpuid());
    80202db2:	00008097          	auipc	ra,0x8
    80202db6:	66e080e7          	jalr	1646(ra) # 8020b420 <cpuid>
    80202dba:	85aa                	mv	a1,a0
    80202dbc:	0000f517          	auipc	a0,0xf
    80202dc0:	51450513          	addi	a0,a0,1300 # 802122d0 <rodata_start+0x2d0>
    80202dc4:	00006097          	auipc	ra,0x6
    80202dc8:	96c080e7          	jalr	-1684(ra) # 80208730 <printf>
    80202dcc:	b52d                	j	80202bf6 <fat32_init+0x22>
        panic("not FAT32 volume");
    80202dce:	0000f517          	auipc	a0,0xf
    80202dd2:	52a50513          	addi	a0,a0,1322 # 802122f8 <rodata_start+0x2f8>
    80202dd6:	00006097          	auipc	ra,0x6
    80202dda:	910080e7          	jalr	-1776(ra) # 802086e6 <panic>
      printf("[FAT32 init]byts_per_sec: %d\n", self_fs->fat.bpb.byts_per_sec);
    80202dde:	02095583          	lhu	a1,32(s2)
    80202de2:	0000f517          	auipc	a0,0xf
    80202de6:	52e50513          	addi	a0,a0,1326 # 80212310 <rodata_start+0x310>
    80202dea:	00006097          	auipc	ra,0x6
    80202dee:	946080e7          	jalr	-1722(ra) # 80208730 <printf>
      printf("[FAT32 init]root_clus: %d\n", self_fs->fat.bpb.root_clus);
    80202df2:	03492583          	lw	a1,52(s2)
    80202df6:	0000f517          	auipc	a0,0xf
    80202dfa:	53a50513          	addi	a0,a0,1338 # 80212330 <rodata_start+0x330>
    80202dfe:	00006097          	auipc	ra,0x6
    80202e02:	932080e7          	jalr	-1742(ra) # 80208730 <printf>
      printf("[FAT32 init]sec_per_clus: %d\n", self_fs->fat.bpb.sec_per_clus);
    80202e06:	02294583          	lbu	a1,34(s2)
    80202e0a:	0000f517          	auipc	a0,0xf
    80202e0e:	54650513          	addi	a0,a0,1350 # 80212350 <rodata_start+0x350>
    80202e12:	00006097          	auipc	ra,0x6
    80202e16:	91e080e7          	jalr	-1762(ra) # 80208730 <printf>
      printf("[FAT32 init]fat_cnt: %d\n", self_fs->fat.bpb.fat_cnt);
    80202e1a:	02694583          	lbu	a1,38(s2)
    80202e1e:	0000f517          	auipc	a0,0xf
    80202e22:	55250513          	addi	a0,a0,1362 # 80212370 <rodata_start+0x370>
    80202e26:	00006097          	auipc	ra,0x6
    80202e2a:	90a080e7          	jalr	-1782(ra) # 80208730 <printf>
      printf("[FAT32 init]fat_sz: %d\n", self_fs->fat.bpb.fat_sz);
    80202e2e:	03092583          	lw	a1,48(s2)
    80202e32:	0000f517          	auipc	a0,0xf
    80202e36:	55e50513          	addi	a0,a0,1374 # 80212390 <rodata_start+0x390>
    80202e3a:	00006097          	auipc	ra,0x6
    80202e3e:	8f6080e7          	jalr	-1802(ra) # 80208730 <printf>
      printf("[FAT32 init]first_data_sec: %d\n", self_fs->fat.first_data_sec);
    80202e42:	01092583          	lw	a1,16(s2)
    80202e46:	0000f517          	auipc	a0,0xf
    80202e4a:	56250513          	addi	a0,a0,1378 # 802123a8 <rodata_start+0x3a8>
    80202e4e:	00006097          	auipc	ra,0x6
    80202e52:	8e2080e7          	jalr	-1822(ra) # 80208730 <printf>
    80202e56:	b59d                	j	80202cbc <fat32_init+0xe8>
        panic("byts_per_sec != BSIZE");
    80202e58:	0000f517          	auipc	a0,0xf
    80202e5c:	57050513          	addi	a0,a0,1392 # 802123c8 <rodata_start+0x3c8>
    80202e60:	00006097          	auipc	ra,0x6
    80202e64:	886080e7          	jalr	-1914(ra) # 802086e6 <panic>
    if(self_fs->valid)return -1;
    80202e68:	5b7d                	li	s6,-1
    80202e6a:	bf0d                	j	80202d9c <fat32_init+0x1c8>

0000000080202e6c <fs_init>:
{
    80202e6c:	1141                	addi	sp,sp,-16
    80202e6e:	e406                	sd	ra,8(sp)
    80202e70:	e022                	sd	s0,0(sp)
    80202e72:	0800                	addi	s0,sp,16
    debug_output = 0;
    80202e74:	00869797          	auipc	a5,0x869
    80202e78:	dc07aa23          	sw	zero,-556(a5) # 80a6bc48 <debug_output>
    for(int i=0;i<FSNUM;i++){
    80202e7c:	00852797          	auipc	a5,0x852
    80202e80:	d3478793          	addi	a5,a5,-716 # 80a54bb0 <FatFs>
    80202e84:	4701                	li	a4,0
    80202e86:	6695                	lui	a3,0x5
    80202e88:	9b868693          	addi	a3,a3,-1608 # 49b8 <_entry-0x801fb648>
    80202e8c:	4615                	li	a2,5
      FatFs[i].valid = 0;
    80202e8e:	0007a223          	sw	zero,4(a5)
      FatFs[i].devno = i;
    80202e92:	c398                	sw	a4,0(a5)
      FatFs[i].image = NULL;
    80202e94:	0007b423          	sd	zero,8(a5)
    for(int i=0;i<FSNUM;i++){
    80202e98:	2705                	addiw	a4,a4,1
    80202e9a:	97b6                	add	a5,a5,a3
    80202e9c:	fec719e3          	bne	a4,a2,80202e8e <fs_init+0x22>
    rootfs = FatFs;
    80202ea0:	00852517          	auipc	a0,0x852
    80202ea4:	d1050513          	addi	a0,a0,-752 # 80a54bb0 <FatFs>
    80202ea8:	00869797          	auipc	a5,0x869
    80202eac:	daa7b423          	sd	a0,-600(a5) # 80a6bc50 <rootfs>
    FatFs[0].image = NULL;
    80202eb0:	00053423          	sd	zero,8(a0)
    FatFs[0].disk_init = (void*)disk_init;
    80202eb4:	00857797          	auipc	a5,0x857
    80202eb8:	cfc78793          	addi	a5,a5,-772 # 80a59bb0 <FatFs+0x5000>
    80202ebc:	ffffe717          	auipc	a4,0xffffe
    80202ec0:	e4a70713          	addi	a4,a4,-438 # 80200d06 <disk_init>
    80202ec4:	9ae7b023          	sd	a4,-1632(a5)
    FatFs[0].disk_read = (void*)vdisk_read;
    80202ec8:	ffffe717          	auipc	a4,0xffffe
    80202ecc:	e6c70713          	addi	a4,a4,-404 # 80200d34 <vdisk_read>
    80202ed0:	9ae7b423          	sd	a4,-1624(a5)
    FatFs[0].disk_write = (void*)vdisk_write;
    80202ed4:	ffffe717          	auipc	a4,0xffffe
    80202ed8:	e7a70713          	addi	a4,a4,-390 # 80200d4e <vdisk_write>
    80202edc:	9ae7b823          	sd	a4,-1616(a5)
    FatFs[0].devno = 0;
    80202ee0:	00052023          	sw	zero,0(a0)
    return fat32_init(&FatFs[0]);
    80202ee4:	00000097          	auipc	ra,0x0
    80202ee8:	cf0080e7          	jalr	-784(ra) # 80202bd4 <fat32_init>
}
    80202eec:	60a2                	ld	ra,8(sp)
    80202eee:	6402                	ld	s0,0(sp)
    80202ef0:	0141                	addi	sp,sp,16
    80202ef2:	8082                	ret

0000000080202ef4 <allocFatFs>:
int allocFatFs(){
    80202ef4:	1141                	addi	sp,sp,-16
    80202ef6:	e422                	sd	s0,8(sp)
    80202ef8:	0800                	addi	s0,sp,16
   for(int i=0;i<FSNUM;i++){
    80202efa:	00852797          	auipc	a5,0x852
    80202efe:	cba78793          	addi	a5,a5,-838 # 80a54bb4 <FatFs+0x4>
    80202f02:	4501                	li	a0,0
    80202f04:	6695                	lui	a3,0x5
    80202f06:	9b868693          	addi	a3,a3,-1608 # 49b8 <_entry-0x801fb648>
    80202f0a:	4615                	li	a2,5
     if(!FatFs[i].valid){
    80202f0c:	4398                	lw	a4,0(a5)
    80202f0e:	c711                	beqz	a4,80202f1a <allocFatFs+0x26>
   for(int i=0;i<FSNUM;i++){
    80202f10:	2505                	addiw	a0,a0,1
    80202f12:	97b6                	add	a5,a5,a3
    80202f14:	fec51ce3          	bne	a0,a2,80202f0c <allocFatFs+0x18>
   return -1;
    80202f18:	557d                	li	a0,-1
}
    80202f1a:	6422                	ld	s0,8(sp)
    80202f1c:	0141                	addi	sp,sp,16
    80202f1e:	8082                	ret

0000000080202f20 <fat32_img>:
struct fs* fat32_img(struct dirent* img){
    80202f20:	1101                	addi	sp,sp,-32
    80202f22:	ec06                	sd	ra,24(sp)
    80202f24:	e822                	sd	s0,16(sp)
    80202f26:	e426                	sd	s1,8(sp)
    80202f28:	1000                	addi	s0,sp,32
    80202f2a:	84aa                	mv	s1,a0
   int devno = allocFatFs();
    80202f2c:	00000097          	auipc	ra,0x0
    80202f30:	fc8080e7          	jalr	-56(ra) # 80202ef4 <allocFatFs>
   if(devno<0)return NULL;
    80202f34:	04054d63          	bltz	a0,80202f8e <fat32_img+0x6e>
   FatFs[devno].image = img;
    80202f38:	6695                	lui	a3,0x5
    80202f3a:	9b868793          	addi	a5,a3,-1608 # 49b8 <_entry-0x801fb648>
    80202f3e:	02f507b3          	mul	a5,a0,a5
    80202f42:	00852717          	auipc	a4,0x852
    80202f46:	c6e70713          	addi	a4,a4,-914 # 80a54bb0 <FatFs>
    80202f4a:	00f70533          	add	a0,a4,a5
    80202f4e:	e504                	sd	s1,8(a0)
   FatFs[devno].disk_init = image_init;
    80202f50:	00a687b3          	add	a5,a3,a0
    80202f54:	ffffe717          	auipc	a4,0xffffe
    80202f58:	15a70713          	addi	a4,a4,346 # 802010ae <image_init>
    80202f5c:	9ae7b023          	sd	a4,-1632(a5)
   FatFs[devno].disk_read = image_read;
    80202f60:	ffffe717          	auipc	a4,0xffffe
    80202f64:	18470713          	addi	a4,a4,388 # 802010e4 <image_read>
    80202f68:	9ae7b423          	sd	a4,-1624(a5)
   FatFs[devno].disk_write = image_write;
    80202f6c:	ffffe717          	auipc	a4,0xffffe
    80202f70:	1de70713          	addi	a4,a4,478 # 8020114a <image_write>
    80202f74:	9ae7b823          	sd	a4,-1616(a5)
   fat32_init(FatFs+devno);
    80202f78:	84aa                	mv	s1,a0
    80202f7a:	00000097          	auipc	ra,0x0
    80202f7e:	c5a080e7          	jalr	-934(ra) # 80202bd4 <fat32_init>
}
    80202f82:	8526                	mv	a0,s1
    80202f84:	60e2                	ld	ra,24(sp)
    80202f86:	6442                	ld	s0,16(sp)
    80202f88:	64a2                	ld	s1,8(sp)
    80202f8a:	6105                	addi	sp,sp,32
    80202f8c:	8082                	ret
   if(devno<0)return NULL;
    80202f8e:	4481                	li	s1,0
    80202f90:	bfcd                	j	80202f82 <fat32_img+0x62>

0000000080202f92 <eread>:
    if (off > entry->file_size || off + n < off || (entry->attribute & ATTR_DIRECTORY)) {
    80202f92:	10852783          	lw	a5,264(a0)
    80202f96:	10d7e763          	bltu	a5,a3,802030a4 <eread+0x112>
{
    80202f9a:	7159                	addi	sp,sp,-112
    80202f9c:	f486                	sd	ra,104(sp)
    80202f9e:	f0a2                	sd	s0,96(sp)
    80202fa0:	eca6                	sd	s1,88(sp)
    80202fa2:	e8ca                	sd	s2,80(sp)
    80202fa4:	e4ce                	sd	s3,72(sp)
    80202fa6:	e0d2                	sd	s4,64(sp)
    80202fa8:	fc56                	sd	s5,56(sp)
    80202faa:	f85a                	sd	s6,48(sp)
    80202fac:	f45e                	sd	s7,40(sp)
    80202fae:	f062                	sd	s8,32(sp)
    80202fb0:	ec66                	sd	s9,24(sp)
    80202fb2:	e86a                	sd	s10,16(sp)
    80202fb4:	e46e                	sd	s11,8(sp)
    80202fb6:	1880                	addi	s0,sp,112
    80202fb8:	8a2a                	mv	s4,a0
    80202fba:	8c2e                	mv	s8,a1
    80202fbc:	8ab2                	mv	s5,a2
    80202fbe:	8936                	mv	s2,a3
    80202fc0:	8b3a                	mv	s6,a4
    if (off > entry->file_size || off + n < off || (entry->attribute & ATTR_DIRECTORY)) {
    80202fc2:	9eb9                	addw	a3,a3,a4
        return 0;
    80202fc4:	4501                	li	a0,0
    if (off > entry->file_size || off + n < off || (entry->attribute & ATTR_DIRECTORY)) {
    80202fc6:	0b26ee63          	bltu	a3,s2,80203082 <eread+0xf0>
    80202fca:	100a4703          	lbu	a4,256(s4)
    80202fce:	8b41                	andi	a4,a4,16
    80202fd0:	eb4d                	bnez	a4,80203082 <eread+0xf0>
    if (off + n > entry->file_size) {
    80202fd2:	00d7f463          	bgeu	a5,a3,80202fda <eread+0x48>
        n = entry->file_size - off;
    80202fd6:	41278b3b          	subw	s6,a5,s2
    for (tot = 0; entry->cur_clus < FAT32_EOC && tot < n; tot += m, off += m, dst += m) {
    80202fda:	10ca2703          	lw	a4,268(s4)
    80202fde:	100007b7          	lui	a5,0x10000
    80202fe2:	17dd                	addi	a5,a5,-9
    80202fe4:	08e7ec63          	bltu	a5,a4,8020307c <eread+0xea>
    80202fe8:	0a0b0c63          	beqz	s6,802030a0 <eread+0x10e>
    struct fs * self_fs = &FatFs[entry->dev];
    80202fec:	114a4c83          	lbu	s9,276(s4)
    80202ff0:	6b95                	lui	s7,0x5
    80202ff2:	9b8b8b93          	addi	s7,s7,-1608 # 49b8 <_entry-0x801fb648>
    80202ff6:	037c8bb3          	mul	s7,s9,s7
    80202ffa:	00852797          	auipc	a5,0x852
    80202ffe:	bb678793          	addi	a5,a5,-1098 # 80a54bb0 <FatFs>
    80203002:	9bbe                	add	s7,s7,a5
    for (tot = 0; entry->cur_clus < FAT32_EOC && tot < n; tot += m, off += m, dst += m) {
    80203004:	4981                	li	s3,0
        m = self_fs->fat.byts_per_clus - off % self_fs->fat.byts_per_clus;
    80203006:	8cde                	mv	s9,s7
    for (tot = 0; entry->cur_clus < FAT32_EOC && tot < n; tot += m, off += m, dst += m) {
    80203008:	10000d37          	lui	s10,0x10000
    8020300c:	1d5d                	addi	s10,s10,-9
    8020300e:	a835                	j	8020304a <eread+0xb8>
    80203010:	00048d9b          	sext.w	s11,s1
        if (rw_clus(self_fs, entry->cur_clus, 0, user_dst, dst, off % self_fs->fat.byts_per_clus, m) != m) {
    80203014:	886e                	mv	a6,s11
    80203016:	8756                	mv	a4,s5
    80203018:	86e2                	mv	a3,s8
    8020301a:	4601                	li	a2,0
    8020301c:	10ca2583          	lw	a1,268(s4)
    80203020:	855e                	mv	a0,s7
    80203022:	00000097          	auipc	ra,0x0
    80203026:	812080e7          	jalr	-2030(ra) # 80202834 <rw_clus>
    8020302a:	2501                	sext.w	a0,a0
    8020302c:	04ad9963          	bne	s11,a0,8020307e <eread+0xec>
    for (tot = 0; entry->cur_clus < FAT32_EOC && tot < n; tot += m, off += m, dst += m) {
    80203030:	013489bb          	addw	s3,s1,s3
    80203034:	0124893b          	addw	s2,s1,s2
    80203038:	1482                	slli	s1,s1,0x20
    8020303a:	9081                	srli	s1,s1,0x20
    8020303c:	9aa6                	add	s5,s5,s1
    8020303e:	10ca2783          	lw	a5,268(s4)
    80203042:	02fd6e63          	bltu	s10,a5,8020307e <eread+0xec>
    80203046:	0369fc63          	bgeu	s3,s6,8020307e <eread+0xec>
        reloc_clus(self_fs, entry, off, 0);
    8020304a:	4681                	li	a3,0
    8020304c:	864a                	mv	a2,s2
    8020304e:	85d2                	mv	a1,s4
    80203050:	855e                	mv	a0,s7
    80203052:	fffff097          	auipc	ra,0xfffff
    80203056:	6d2080e7          	jalr	1746(ra) # 80202724 <reloc_clus>
        m = self_fs->fat.byts_per_clus - off % self_fs->fat.byts_per_clus;
    8020305a:	01cca703          	lw	a4,28(s9)
    8020305e:	02e976bb          	remuw	a3,s2,a4
    80203062:	0006879b          	sext.w	a5,a3
    80203066:	9f15                	subw	a4,a4,a3
        if (n - tot < m) {
    80203068:	413b06bb          	subw	a3,s6,s3
    8020306c:	84b6                	mv	s1,a3
    8020306e:	2681                	sext.w	a3,a3
    80203070:	0007061b          	sext.w	a2,a4
    80203074:	f8d67ee3          	bgeu	a2,a3,80203010 <eread+0x7e>
    80203078:	84ba                	mv	s1,a4
    8020307a:	bf59                	j	80203010 <eread+0x7e>
    for (tot = 0; entry->cur_clus < FAT32_EOC && tot < n; tot += m, off += m, dst += m) {
    8020307c:	4981                	li	s3,0
    return tot;
    8020307e:	0009851b          	sext.w	a0,s3
}
    80203082:	70a6                	ld	ra,104(sp)
    80203084:	7406                	ld	s0,96(sp)
    80203086:	64e6                	ld	s1,88(sp)
    80203088:	6946                	ld	s2,80(sp)
    8020308a:	69a6                	ld	s3,72(sp)
    8020308c:	6a06                	ld	s4,64(sp)
    8020308e:	7ae2                	ld	s5,56(sp)
    80203090:	7b42                	ld	s6,48(sp)
    80203092:	7ba2                	ld	s7,40(sp)
    80203094:	7c02                	ld	s8,32(sp)
    80203096:	6ce2                	ld	s9,24(sp)
    80203098:	6d42                	ld	s10,16(sp)
    8020309a:	6da2                	ld	s11,8(sp)
    8020309c:	6165                	addi	sp,sp,112
    8020309e:	8082                	ret
    for (tot = 0; entry->cur_clus < FAT32_EOC && tot < n; tot += m, off += m, dst += m) {
    802030a0:	89da                	mv	s3,s6
    802030a2:	bff1                	j	8020307e <eread+0xec>
        return 0;
    802030a4:	4501                	li	a0,0
}
    802030a6:	8082                	ret

00000000802030a8 <ewrite>:
{
    802030a8:	711d                	addi	sp,sp,-96
    802030aa:	ec86                	sd	ra,88(sp)
    802030ac:	e8a2                	sd	s0,80(sp)
    802030ae:	e4a6                	sd	s1,72(sp)
    802030b0:	e0ca                	sd	s2,64(sp)
    802030b2:	fc4e                	sd	s3,56(sp)
    802030b4:	f852                	sd	s4,48(sp)
    802030b6:	f456                	sd	s5,40(sp)
    802030b8:	f05a                	sd	s6,32(sp)
    802030ba:	ec5e                	sd	s7,24(sp)
    802030bc:	e862                	sd	s8,16(sp)
    802030be:	e466                	sd	s9,8(sp)
    802030c0:	e06a                	sd	s10,0(sp)
    802030c2:	1080                	addi	s0,sp,96
    802030c4:	8c2e                	mv	s8,a1
    struct fs * self_fs = &FatFs[entry->dev];
    802030c6:	11454583          	lbu	a1,276(a0)
    802030ca:	6b15                	lui	s6,0x5
    802030cc:	9b8b0b13          	addi	s6,s6,-1608 # 49b8 <_entry-0x801fb648>
    802030d0:	03658b33          	mul	s6,a1,s6
    802030d4:	00852797          	auipc	a5,0x852
    802030d8:	adc78793          	addi	a5,a5,-1316 # 80a54bb0 <FatFs>
    802030dc:	9b3e                	add	s6,s6,a5
    if (off > entry->file_size || off + n < off || (uint64)off + n > 0xffffffff
    802030de:	10852783          	lw	a5,264(a0)
    802030e2:	0ed7e063          	bltu	a5,a3,802031c2 <ewrite+0x11a>
    802030e6:	8aaa                	mv	s5,a0
    802030e8:	8a32                	mv	s4,a2
    802030ea:	8936                	mv	s2,a3
    802030ec:	8bba                	mv	s7,a4
    802030ee:	00058c9b          	sext.w	s9,a1
    802030f2:	00e687bb          	addw	a5,a3,a4
    802030f6:	0cd7e863          	bltu	a5,a3,802031c6 <ewrite+0x11e>
    802030fa:	02069793          	slli	a5,a3,0x20
    802030fe:	9381                	srli	a5,a5,0x20
    80203100:	1702                	slli	a4,a4,0x20
    80203102:	9301                	srli	a4,a4,0x20
    80203104:	97ba                	add	a5,a5,a4
    80203106:	577d                	li	a4,-1
    80203108:	9301                	srli	a4,a4,0x20
    8020310a:	0cf76063          	bltu	a4,a5,802031ca <ewrite+0x122>
        || (entry->attribute & ATTR_READ_ONLY)) {
    8020310e:	10054783          	lbu	a5,256(a0)
    80203112:	8b85                	andi	a5,a5,1
    80203114:	efcd                	bnez	a5,802031ce <ewrite+0x126>
    if (entry->first_clus == 0) {   // so file_size if 0 too, which requests off == 0
    80203116:	10452783          	lw	a5,260(a0)
    8020311a:	cf99                	beqz	a5,80203138 <ewrite+0x90>
    for (tot = 0; tot < n; tot += m, off += m, src += m) {
    8020311c:	0a0b8163          	beqz	s7,802031be <ewrite+0x116>
    80203120:	4981                	li	s3,0
        m = self_fs->fat.byts_per_clus - off % self_fs->fat.byts_per_clus;
    80203122:	6795                	lui	a5,0x5
    80203124:	9b878793          	addi	a5,a5,-1608 # 49b8 <_entry-0x801fb648>
    80203128:	02fc8cb3          	mul	s9,s9,a5
    8020312c:	00852797          	auipc	a5,0x852
    80203130:	a8478793          	addi	a5,a5,-1404 # 80a54bb0 <FatFs>
    80203134:	9cbe                	add	s9,s9,a5
    80203136:	a891                	j	8020318a <ewrite+0xe2>
        entry->cur_clus = entry->first_clus = alloc_clus(self_fs, entry->dev);
    80203138:	855a                	mv	a0,s6
    8020313a:	fffff097          	auipc	ra,0xfffff
    8020313e:	44a080e7          	jalr	1098(ra) # 80202584 <alloc_clus>
    80203142:	2501                	sext.w	a0,a0
    80203144:	10aaa223          	sw	a0,260(s5)
    80203148:	10aaa623          	sw	a0,268(s5)
        entry->clus_cnt = 0;
    8020314c:	100aa823          	sw	zero,272(s5)
        entry->dirty = 1;
    80203150:	4785                	li	a5,1
    80203152:	10fa8aa3          	sb	a5,277(s5)
    80203156:	b7d9                	j	8020311c <ewrite+0x74>
    80203158:	00048d1b          	sext.w	s10,s1
        if (rw_clus(self_fs, entry->cur_clus, 1, user_src, src, off % self_fs->fat.byts_per_clus, m) != m) {
    8020315c:	886a                	mv	a6,s10
    8020315e:	8752                	mv	a4,s4
    80203160:	86e2                	mv	a3,s8
    80203162:	4605                	li	a2,1
    80203164:	10caa583          	lw	a1,268(s5)
    80203168:	855a                	mv	a0,s6
    8020316a:	fffff097          	auipc	ra,0xfffff
    8020316e:	6ca080e7          	jalr	1738(ra) # 80202834 <rw_clus>
    80203172:	2501                	sext.w	a0,a0
    80203174:	04ad1f63          	bne	s10,a0,802031d2 <ewrite+0x12a>
    for (tot = 0; tot < n; tot += m, off += m, src += m) {
    80203178:	013489bb          	addw	s3,s1,s3
    8020317c:	0124893b          	addw	s2,s1,s2
    80203180:	1482                	slli	s1,s1,0x20
    80203182:	9081                	srli	s1,s1,0x20
    80203184:	9a26                	add	s4,s4,s1
    80203186:	0579f663          	bgeu	s3,s7,802031d2 <ewrite+0x12a>
        reloc_clus(self_fs, entry, off, 1);
    8020318a:	4685                	li	a3,1
    8020318c:	864a                	mv	a2,s2
    8020318e:	85d6                	mv	a1,s5
    80203190:	855a                	mv	a0,s6
    80203192:	fffff097          	auipc	ra,0xfffff
    80203196:	592080e7          	jalr	1426(ra) # 80202724 <reloc_clus>
        m = self_fs->fat.byts_per_clus - off % self_fs->fat.byts_per_clus;
    8020319a:	01cca803          	lw	a6,28(s9)
    8020319e:	0309773b          	remuw	a4,s2,a6
    802031a2:	0007079b          	sext.w	a5,a4
    802031a6:	40e8083b          	subw	a6,a6,a4
        if (n - tot < m) {
    802031aa:	413b873b          	subw	a4,s7,s3
    802031ae:	84ba                	mv	s1,a4
    802031b0:	2701                	sext.w	a4,a4
    802031b2:	0008069b          	sext.w	a3,a6
    802031b6:	fae6f1e3          	bgeu	a3,a4,80203158 <ewrite+0xb0>
    802031ba:	84c2                	mv	s1,a6
    802031bc:	bf71                	j	80203158 <ewrite+0xb0>
    for (tot = 0; tot < n; tot += m, off += m, src += m) {
    802031be:	89de                	mv	s3,s7
    802031c0:	a015                	j	802031e4 <ewrite+0x13c>
        return -1;
    802031c2:	557d                	li	a0,-1
    802031c4:	a015                	j	802031e8 <ewrite+0x140>
    802031c6:	557d                	li	a0,-1
    802031c8:	a005                	j	802031e8 <ewrite+0x140>
    802031ca:	557d                	li	a0,-1
    802031cc:	a831                	j	802031e8 <ewrite+0x140>
    802031ce:	557d                	li	a0,-1
    802031d0:	a821                	j	802031e8 <ewrite+0x140>
        if(off > entry->file_size) {
    802031d2:	108aa783          	lw	a5,264(s5)
    802031d6:	0127f763          	bgeu	a5,s2,802031e4 <ewrite+0x13c>
            entry->file_size = off;
    802031da:	112aa423          	sw	s2,264(s5)
            entry->dirty = 1;
    802031de:	4785                	li	a5,1
    802031e0:	10fa8aa3          	sb	a5,277(s5)
    return tot;
    802031e4:	0009851b          	sext.w	a0,s3
}
    802031e8:	60e6                	ld	ra,88(sp)
    802031ea:	6446                	ld	s0,80(sp)
    802031ec:	64a6                	ld	s1,72(sp)
    802031ee:	6906                	ld	s2,64(sp)
    802031f0:	79e2                	ld	s3,56(sp)
    802031f2:	7a42                	ld	s4,48(sp)
    802031f4:	7aa2                	ld	s5,40(sp)
    802031f6:	7b02                	ld	s6,32(sp)
    802031f8:	6be2                	ld	s7,24(sp)
    802031fa:	6c42                	ld	s8,16(sp)
    802031fc:	6ca2                	ld	s9,8(sp)
    802031fe:	6d02                	ld	s10,0(sp)
    80203200:	6125                	addi	sp,sp,96
    80203202:	8082                	ret

0000000080203204 <formatname>:
{
    80203204:	7179                	addi	sp,sp,-48
    80203206:	f406                	sd	ra,40(sp)
    80203208:	f022                	sd	s0,32(sp)
    8020320a:	ec26                	sd	s1,24(sp)
    8020320c:	e84a                	sd	s2,16(sp)
    8020320e:	e44e                	sd	s3,8(sp)
    80203210:	e052                	sd	s4,0(sp)
    80203212:	1800                	addi	s0,sp,48
    80203214:	84aa                	mv	s1,a0
    while (*name == ' ' || *name == '.') { name++; }
    80203216:	02000793          	li	a5,32
    8020321a:	02e00713          	li	a4,46
    8020321e:	a011                	j	80203222 <formatname+0x1e>
    80203220:	0485                	addi	s1,s1,1
    80203222:	0004c583          	lbu	a1,0(s1)
    80203226:	fef58de3          	beq	a1,a5,80203220 <formatname+0x1c>
    8020322a:	fee58be3          	beq	a1,a4,80203220 <formatname+0x1c>
    for (p = name; *p; p++) {
    8020322e:	c1b9                	beqz	a1,80203274 <formatname+0x70>
    80203230:	8926                	mv	s2,s1
        if (c < 0x20 || strchr(illegal, c)) {
    80203232:	49fd                	li	s3,31
    80203234:	00813a17          	auipc	s4,0x813
    80203238:	dd4a0a13          	addi	s4,s4,-556 # 80a16008 <illegal.2337>
    8020323c:	02b9fe63          	bgeu	s3,a1,80203278 <formatname+0x74>
    80203240:	8552                	mv	a0,s4
    80203242:	ffffe097          	auipc	ra,0xffffe
    80203246:	d9c080e7          	jalr	-612(ra) # 80200fde <strchr>
    8020324a:	e121                	bnez	a0,8020328a <formatname+0x86>
    for (p = name; *p; p++) {
    8020324c:	0905                	addi	s2,s2,1
    8020324e:	00094583          	lbu	a1,0(s2)
    80203252:	f5ed                	bnez	a1,8020323c <formatname+0x38>
        if (*p != ' ') {
    80203254:	02000693          	li	a3,32
    80203258:	874a                	mv	a4,s2
    while (p-- > name) {
    8020325a:	0124fb63          	bgeu	s1,s2,80203270 <formatname+0x6c>
        if (*p != ' ') {
    8020325e:	197d                	addi	s2,s2,-1
    80203260:	00094783          	lbu	a5,0(s2)
    80203264:	fed78ae3          	beq	a5,a3,80203258 <formatname+0x54>
            p[1] = '\0';
    80203268:	00070023          	sb	zero,0(a4)
            break;
    8020326c:	8526                	mv	a0,s1
    8020326e:	a031                	j	8020327a <formatname+0x76>
    80203270:	8526                	mv	a0,s1
    80203272:	a021                	j	8020327a <formatname+0x76>
    for (p = name; *p; p++) {
    80203274:	8526                	mv	a0,s1
    80203276:	a011                	j	8020327a <formatname+0x76>
            return 0;
    80203278:	4501                	li	a0,0
}
    8020327a:	70a2                	ld	ra,40(sp)
    8020327c:	7402                	ld	s0,32(sp)
    8020327e:	64e2                	ld	s1,24(sp)
    80203280:	6942                	ld	s2,16(sp)
    80203282:	69a2                	ld	s3,8(sp)
    80203284:	6a02                	ld	s4,0(sp)
    80203286:	6145                	addi	sp,sp,48
    80203288:	8082                	ret
            return 0;
    8020328a:	4501                	li	a0,0
    8020328c:	b7fd                	j	8020327a <formatname+0x76>

000000008020328e <cal_checksum>:
{
    8020328e:	1141                	addi	sp,sp,-16
    80203290:	e422                	sd	s0,8(sp)
    80203292:	0800                	addi	s0,sp,16
    80203294:	87aa                	mv	a5,a0
    for (int i = CHAR_SHORT_NAME; i != 0; i--) {
    80203296:	00b50613          	addi	a2,a0,11
    uint8 sum = 0;
    8020329a:	4501                	li	a0,0
        sum = ((sum & 1) ? 0x80 : 0) + (sum >> 1) + *shortname++;
    8020329c:	0075171b          	slliw	a4,a0,0x7
    802032a0:	0785                	addi	a5,a5,1
    802032a2:	0015551b          	srliw	a0,a0,0x1
    802032a6:	fff7c683          	lbu	a3,-1(a5)
    802032aa:	9d35                	addw	a0,a0,a3
    802032ac:	953a                	add	a0,a0,a4
    802032ae:	0ff57513          	andi	a0,a0,255
    for (int i = CHAR_SHORT_NAME; i != 0; i--) {
    802032b2:	fef615e3          	bne	a2,a5,8020329c <cal_checksum+0xe>
}
    802032b6:	6422                	ld	s0,8(sp)
    802032b8:	0141                	addi	sp,sp,16
    802032ba:	8082                	ret

00000000802032bc <emake>:
{
    802032bc:	7171                	addi	sp,sp,-176
    802032be:	f506                	sd	ra,168(sp)
    802032c0:	f122                	sd	s0,160(sp)
    802032c2:	ed26                	sd	s1,152(sp)
    802032c4:	e94a                	sd	s2,144(sp)
    802032c6:	e54e                	sd	s3,136(sp)
    802032c8:	e152                	sd	s4,128(sp)
    802032ca:	fcd6                	sd	s5,120(sp)
    802032cc:	f8da                	sd	s6,112(sp)
    802032ce:	f4de                	sd	s7,104(sp)
    802032d0:	f0e2                	sd	s8,96(sp)
    802032d2:	ece6                	sd	s9,88(sp)
    802032d4:	e8ea                	sd	s10,80(sp)
    802032d6:	e4ee                	sd	s11,72(sp)
    802032d8:	1900                	addi	s0,sp,176
    802032da:	89aa                	mv	s3,a0
    802032dc:	8cae                	mv	s9,a1
    802032de:	8c32                	mv	s8,a2
    if(dp->mnt) dp = &(FatFs[dp->dev].root);
    802032e0:	11c52783          	lw	a5,284(a0)
    802032e4:	c385                	beqz	a5,80203304 <emake+0x48>
    802032e6:	11454983          	lbu	s3,276(a0)
    802032ea:	6795                	lui	a5,0x5
    802032ec:	9b878713          	addi	a4,a5,-1608 # 49b8 <_entry-0x801fb648>
    802032f0:	02e989b3          	mul	s3,s3,a4
    802032f4:	83078793          	addi	a5,a5,-2000
    802032f8:	99be                	add	s3,s3,a5
    802032fa:	00852797          	auipc	a5,0x852
    802032fe:	8b678793          	addi	a5,a5,-1866 # 80a54bb0 <FatFs>
    80203302:	99be                	add	s3,s3,a5
    struct fs * self_fs = &FatFs[dp->dev];
    80203304:	1149ca83          	lbu	s5,276(s3)
    80203308:	6795                	lui	a5,0x5
    8020330a:	9b878793          	addi	a5,a5,-1608 # 49b8 <_entry-0x801fb648>
    8020330e:	02fa8ab3          	mul	s5,s5,a5
    80203312:	00852797          	auipc	a5,0x852
    80203316:	89e78793          	addi	a5,a5,-1890 # 80a54bb0 <FatFs>
    8020331a:	9abe                	add	s5,s5,a5
    if (!(dp->attribute & ATTR_DIRECTORY))
    8020331c:	1009c783          	lbu	a5,256(s3)
    80203320:	8bc1                	andi	a5,a5,16
    80203322:	c3cd                	beqz	a5,802033c4 <emake+0x108>
    if (off % sizeof(union dentry))
    80203324:	01fc7793          	andi	a5,s8,31
    80203328:	e7d5                	bnez	a5,802033d4 <emake+0x118>
    memset(&de, 0, sizeof(de));
    8020332a:	02000613          	li	a2,32
    8020332e:	4581                	li	a1,0
    80203330:	f7040513          	addi	a0,s0,-144
    80203334:	ffffe097          	auipc	ra,0xffffe
    80203338:	a40080e7          	jalr	-1472(ra) # 80200d74 <memset>
    if (off <= 32) {
    8020333c:	02000793          	li	a5,32
    80203340:	0b87ee63          	bltu	a5,s8,802033fc <emake+0x140>
        if (off == 0) {
    80203344:	0a0c1063          	bnez	s8,802033e4 <emake+0x128>
            strncpy(de.sne.name, ".          ", sizeof(de.sne.name));
    80203348:	462d                	li	a2,11
    8020334a:	0000f597          	auipc	a1,0xf
    8020334e:	0d658593          	addi	a1,a1,214 # 80212420 <rodata_start+0x420>
    80203352:	f7040513          	addi	a0,s0,-144
    80203356:	ffffe097          	auipc	ra,0xffffe
    8020335a:	b36080e7          	jalr	-1226(ra) # 80200e8c <strncpy>
        de.sne.attr = ATTR_DIRECTORY;
    8020335e:	47c1                	li	a5,16
    80203360:	f6f40da3          	sb	a5,-133(s0)
        de.sne.fst_clus_hi = (uint16)(ep->first_clus >> 16);        // first clus high 16 bits
    80203364:	104ca783          	lw	a5,260(s9)
    80203368:	0107d71b          	srliw	a4,a5,0x10
    8020336c:	f8e41223          	sh	a4,-124(s0)
        de.sne.fst_clus_lo = (uint16)(ep->first_clus & 0xffff);       // low 16 bits
    80203370:	f8f41523          	sh	a5,-118(s0)
        de.sne.file_size = 0;                                       // filesize is updated in eupdate()
    80203374:	f8042623          	sw	zero,-116(s0)
        off = reloc_clus(self_fs, dp, off, 1);
    80203378:	4685                	li	a3,1
    8020337a:	8662                	mv	a2,s8
    8020337c:	85ce                	mv	a1,s3
    8020337e:	8556                	mv	a0,s5
    80203380:	fffff097          	auipc	ra,0xfffff
    80203384:	3a4080e7          	jalr	932(ra) # 80202724 <reloc_clus>
        rw_clus(self_fs, dp->cur_clus, 1, 0, (uint64)&de, off, sizeof(de));
    80203388:	02000813          	li	a6,32
    8020338c:	0005079b          	sext.w	a5,a0
    80203390:	f7040713          	addi	a4,s0,-144
    80203394:	4681                	li	a3,0
    80203396:	4605                	li	a2,1
    80203398:	10c9a583          	lw	a1,268(s3)
    8020339c:	8556                	mv	a0,s5
    8020339e:	fffff097          	auipc	ra,0xfffff
    802033a2:	496080e7          	jalr	1174(ra) # 80202834 <rw_clus>
}
    802033a6:	70aa                	ld	ra,168(sp)
    802033a8:	740a                	ld	s0,160(sp)
    802033aa:	64ea                	ld	s1,152(sp)
    802033ac:	694a                	ld	s2,144(sp)
    802033ae:	69aa                	ld	s3,136(sp)
    802033b0:	6a0a                	ld	s4,128(sp)
    802033b2:	7ae6                	ld	s5,120(sp)
    802033b4:	7b46                	ld	s6,112(sp)
    802033b6:	7ba6                	ld	s7,104(sp)
    802033b8:	7c06                	ld	s8,96(sp)
    802033ba:	6ce6                	ld	s9,88(sp)
    802033bc:	6d46                	ld	s10,80(sp)
    802033be:	6da6                	ld	s11,72(sp)
    802033c0:	614d                	addi	sp,sp,176
    802033c2:	8082                	ret
        panic("emake: not dir");
    802033c4:	0000f517          	auipc	a0,0xf
    802033c8:	03450513          	addi	a0,a0,52 # 802123f8 <rodata_start+0x3f8>
    802033cc:	00005097          	auipc	ra,0x5
    802033d0:	31a080e7          	jalr	794(ra) # 802086e6 <panic>
        panic("emake: not aligned");
    802033d4:	0000f517          	auipc	a0,0xf
    802033d8:	03450513          	addi	a0,a0,52 # 80212408 <rodata_start+0x408>
    802033dc:	00005097          	auipc	ra,0x5
    802033e0:	30a080e7          	jalr	778(ra) # 802086e6 <panic>
            strncpy(de.sne.name, "..         ", sizeof(de.sne.name));
    802033e4:	462d                	li	a2,11
    802033e6:	0000f597          	auipc	a1,0xf
    802033ea:	04a58593          	addi	a1,a1,74 # 80212430 <rodata_start+0x430>
    802033ee:	f7040513          	addi	a0,s0,-144
    802033f2:	ffffe097          	auipc	ra,0xffffe
    802033f6:	a9a080e7          	jalr	-1382(ra) # 80200e8c <strncpy>
    802033fa:	b795                	j	8020335e <emake+0xa2>
        int entcnt = (strlen(ep->filename) + CHAR_LONG_NAME - 1) / CHAR_LONG_NAME;   // count of l-n-entries, rounds up
    802033fc:	8966                	mv	s2,s9
    802033fe:	8566                	mv	a0,s9
    80203400:	ffffe097          	auipc	ra,0xffffe
    80203404:	afc080e7          	jalr	-1284(ra) # 80200efc <strlen>
    80203408:	f4a43c23          	sd	a0,-168(s0)
    8020340c:	00c5071b          	addiw	a4,a0,12
    80203410:	47b5                	li	a5,13
    80203412:	02f747bb          	divw	a5,a4,a5
    80203416:	f4f42a23          	sw	a5,-172(s0)
    8020341a:	00078d9b          	sext.w	s11,a5
        memset(shortname, 0, sizeof(shortname));
    8020341e:	4631                	li	a2,12
    80203420:	4581                	li	a1,0
    80203422:	f6040513          	addi	a0,s0,-160
    80203426:	ffffe097          	auipc	ra,0xffffe
    8020342a:	94e080e7          	jalr	-1714(ra) # 80200d74 <memset>
    for (int j = strlen(name) - 1; j >= 0; j--) {
    8020342e:	8566                	mv	a0,s9
    80203430:	ffffe097          	auipc	ra,0xffffe
    80203434:	acc080e7          	jalr	-1332(ra) # 80200efc <strlen>
    80203438:	fff5079b          	addiw	a5,a0,-1
    8020343c:	0207ca63          	bltz	a5,80203470 <emake+0x1b4>
    80203440:	97e6                	add	a5,a5,s9
    80203442:	ffec8693          	addi	a3,s9,-2
    80203446:	96aa                	add	a3,a3,a0
    80203448:	fff5071b          	addiw	a4,a0,-1
    8020344c:	1702                	slli	a4,a4,0x20
    8020344e:	9301                	srli	a4,a4,0x20
    80203450:	8e99                	sub	a3,a3,a4
        if (name[j] == '.') {
    80203452:	02e00613          	li	a2,46
    80203456:	8a3e                	mv	s4,a5
    80203458:	0007c703          	lbu	a4,0(a5)
    8020345c:	00c70663          	beq	a4,a2,80203468 <emake+0x1ac>
    for (int j = strlen(name) - 1; j >= 0; j--) {
    80203460:	17fd                	addi	a5,a5,-1
    80203462:	fed79ae3          	bne	a5,a3,80203456 <emake+0x19a>
    char c, *p = name;
    80203466:	8a66                	mv	s4,s9
        shortname[i++] = c;
    80203468:	4481                	li	s1,0
        if (i == 8 && p) {
    8020346a:	4ba1                	li	s7,8
    while (i < CHAR_SHORT_NAME && (c = *name++)) {
    8020346c:	4d29                	li	s10,10
    8020346e:	a87d                	j	8020352c <emake+0x270>
    char c, *p = name;
    80203470:	8a66                	mv	s4,s9
    80203472:	bfdd                	j	80203468 <emake+0x1ac>
        if (i == 8 && p) {
    80203474:	220a0363          	beqz	s4,8020369a <emake+0x3de>
            if (p + 1 < name) { break; }            // no '.'
    80203478:	0a05                	addi	s4,s4,1
    8020347a:	096a7063          	bgeu	s4,s6,802034fa <emake+0x23e>
    8020347e:	f6040793          	addi	a5,s0,-160
    80203482:	97a6                	add	a5,a5,s1
        shortname[i++] = ' ';
    80203484:	02000693          	li	a3,32
    while (i < CHAR_SHORT_NAME) {
    80203488:	4729                	li	a4,10
        shortname[i++] = ' ';
    8020348a:	2485                	addiw	s1,s1,1
    8020348c:	00d78023          	sb	a3,0(a5)
    while (i < CHAR_SHORT_NAME) {
    80203490:	0785                	addi	a5,a5,1
    80203492:	fe975ce3          	bge	a4,s1,8020348a <emake+0x1ce>
        de.lne.checksum = cal_checksum((uchar *)shortname);
    80203496:	f6040513          	addi	a0,s0,-160
    8020349a:	00000097          	auipc	ra,0x0
    8020349e:	df4080e7          	jalr	-524(ra) # 8020328e <cal_checksum>
    802034a2:	f6a40ea3          	sb	a0,-131(s0)
        de.lne.attr = ATTR_LONG_NAME;
    802034a6:	47bd                	li	a5,15
    802034a8:	f6f40da3          	sb	a5,-133(s0)
        for (int i = entcnt; i > 0; i--) {
    802034ac:	f5843783          	ld	a5,-168(s0)
    802034b0:	0ef05a63          	blez	a5,802035a4 <emake+0x2e8>
    802034b4:	f5442783          	lw	a5,-172(s0)
    802034b8:	37fd                	addiw	a5,a5,-1
    802034ba:	f4f42a23          	sw	a5,-172(s0)
    802034be:	00179b1b          	slliw	s6,a5,0x1
    802034c2:	00fb0b3b          	addw	s6,s6,a5
    802034c6:	002b1b1b          	slliw	s6,s6,0x2
    802034ca:	00fb0b3b          	addw	s6,s6,a5
    802034ce:	9b66                	add	s6,s6,s9
    802034d0:	8a6e                	mv	s4,s11
    802034d2:	8be2                	mv	s7,s8
            int end = 0;
    802034d4:	4d01                	li	s10,0
                    *w++ = 0xff;            // on k210, unaligned reading is illegal
    802034d6:	597d                	li	s2,-1
                switch (j) {
    802034d8:	44ad                	li	s1,11
    802034da:	a24d                	j	8020367c <emake+0x3c0>
            if (name > p) {                    // last '.'
    802034dc:	056a7563          	bgeu	s4,s6,80203526 <emake+0x26a>
                memset(shortname + i, ' ', 8 - i);
    802034e0:	4621                	li	a2,8
    802034e2:	9e05                	subw	a2,a2,s1
    802034e4:	02000593          	li	a1,32
    802034e8:	f6040793          	addi	a5,s0,-160
    802034ec:	00978533          	add	a0,a5,s1
    802034f0:	ffffe097          	auipc	ra,0xffffe
    802034f4:	884080e7          	jalr	-1916(ra) # 80200d74 <memset>
    while (i < CHAR_SHORT_NAME && (c = *name++)) {
    802034f8:	8a5a                	mv	s4,s6
        shortname[i++] = c;
    802034fa:	8b52                	mv	s6,s4
    802034fc:	84de                	mv	s1,s7
    802034fe:	4a01                	li	s4,0
    80203500:	a02d                	j	8020352a <emake+0x26e>
            if (strchr(illegal, c) != NULL) {
    80203502:	85ca                	mv	a1,s2
    80203504:	00813517          	auipc	a0,0x813
    80203508:	b3450513          	addi	a0,a0,-1228 # 80a16038 <illegal.2353>
    8020350c:	ffffe097          	auipc	ra,0xffffe
    80203510:	ad2080e7          	jalr	-1326(ra) # 80200fde <strchr>
    80203514:	c119                	beqz	a0,8020351a <emake+0x25e>
                c = '_';
    80203516:	05f00913          	li	s2,95
        shortname[i++] = c;
    8020351a:	f9040793          	addi	a5,s0,-112
    8020351e:	97a6                	add	a5,a5,s1
    80203520:	fd278823          	sb	s2,-48(a5)
    80203524:	2485                	addiw	s1,s1,1
    while (i < CHAR_SHORT_NAME && (c = *name++)) {
    80203526:	f69d48e3          	blt	s10,s1,80203496 <emake+0x1da>
        shortname[i++] = c;
    8020352a:	895a                	mv	s2,s6
    while (i < CHAR_SHORT_NAME && (c = *name++)) {
    8020352c:	00190b13          	addi	s6,s2,1
    80203530:	00094903          	lbu	s2,0(s2)
    80203534:	02090763          	beqz	s2,80203562 <emake+0x2a6>
        if (i == 8 && p) {
    80203538:	f3748ee3          	beq	s1,s7,80203474 <emake+0x1b8>
        if (c == ' ') { continue; }
    8020353c:	02000793          	li	a5,32
    80203540:	fef903e3          	beq	s2,a5,80203526 <emake+0x26a>
        if (c == '.') {
    80203544:	02e00793          	li	a5,46
    80203548:	f8f90ae3          	beq	s2,a5,802034dc <emake+0x220>
        if (c >= 'a' && c <= 'z') {
    8020354c:	f9f9079b          	addiw	a5,s2,-97
    80203550:	0ff7f793          	andi	a5,a5,255
    80203554:	4765                	li	a4,25
    80203556:	faf766e3          	bltu	a4,a5,80203502 <emake+0x246>
            c += 'A' - 'a';
    8020355a:	3901                	addiw	s2,s2,-32
    8020355c:	0ff97913          	andi	s2,s2,255
    80203560:	bf6d                	j	8020351a <emake+0x25e>
    while (i < CHAR_SHORT_NAME) {
    80203562:	47a9                	li	a5,10
    80203564:	f097dde3          	bge	a5,s1,8020347e <emake+0x1c2>
    80203568:	b73d                	j	80203496 <emake+0x1da>
                de.lne.order |= LAST_LONG_ENTRY;
    8020356a:	0407e793          	ori	a5,a5,64
    8020356e:	f6f40823          	sb	a5,-144(s0)
    80203572:	aa19                	j	80203688 <emake+0x3cc>
                    if ((*w++ = *p++) == 0) {
    80203574:	0005c683          	lbu	a3,0(a1)
    80203578:	00d78023          	sb	a3,0(a5)
                        end = 1;
    8020357c:	0016b693          	seqz	a3,a3
                    *w++ = 0;
    80203580:	000780a3          	sb	zero,1(a5)
    80203584:	0789                	addi	a5,a5,2
                    if ((*w++ = *p++) == 0) {
    80203586:	0585                	addi	a1,a1,1
    80203588:	a075                	j	80203634 <emake+0x378>
    8020358a:	020c0c1b          	addiw	s8,s8,32
    8020358e:	4781                	li	a5,0
    80203590:	f5843703          	ld	a4,-168(s0)
    80203594:	00e05663          	blez	a4,802035a0 <emake+0x2e4>
    80203598:	f5442783          	lw	a5,-172(s0)
    8020359c:	0057979b          	slliw	a5,a5,0x5
    802035a0:	01878c3b          	addw	s8,a5,s8
        memset(&de, 0, sizeof(de));
    802035a4:	02000613          	li	a2,32
    802035a8:	4581                	li	a1,0
    802035aa:	f7040513          	addi	a0,s0,-144
    802035ae:	ffffd097          	auipc	ra,0xffffd
    802035b2:	7c6080e7          	jalr	1990(ra) # 80200d74 <memset>
        strncpy(de.sne.name, shortname, sizeof(de.sne.name));
    802035b6:	462d                	li	a2,11
    802035b8:	f6040593          	addi	a1,s0,-160
    802035bc:	f7040513          	addi	a0,s0,-144
    802035c0:	ffffe097          	auipc	ra,0xffffe
    802035c4:	8cc080e7          	jalr	-1844(ra) # 80200e8c <strncpy>
        de.sne.attr = ep->attribute;
    802035c8:	100cc783          	lbu	a5,256(s9)
    802035cc:	f6f40da3          	sb	a5,-133(s0)
        de.sne.fst_clus_hi = (uint16)(ep->first_clus >> 16);      // first clus high 16 bits
    802035d0:	104ca783          	lw	a5,260(s9)
    802035d4:	0107d71b          	srliw	a4,a5,0x10
    802035d8:	f8e41223          	sh	a4,-124(s0)
        de.sne.fst_clus_lo = (uint16)(ep->first_clus & 0xffff);     // low 16 bits
    802035dc:	f8f41523          	sh	a5,-118(s0)
        de.sne.file_size = ep->file_size;                         // filesize is updated in eupdate()
    802035e0:	108ca783          	lw	a5,264(s9)
    802035e4:	f8f42623          	sw	a5,-116(s0)
        off = reloc_clus(self_fs, dp, off, 1);
    802035e8:	4685                	li	a3,1
    802035ea:	8662                	mv	a2,s8
    802035ec:	85ce                	mv	a1,s3
    802035ee:	8556                	mv	a0,s5
    802035f0:	fffff097          	auipc	ra,0xfffff
    802035f4:	134080e7          	jalr	308(ra) # 80202724 <reloc_clus>
        rw_clus(self_fs, dp->cur_clus, 1, 0, (uint64)&de, off, sizeof(de));
    802035f8:	02000813          	li	a6,32
    802035fc:	0005079b          	sext.w	a5,a0
    80203600:	f7040713          	addi	a4,s0,-144
    80203604:	4681                	li	a3,0
    80203606:	4605                	li	a2,1
    80203608:	10c9a583          	lw	a1,268(s3)
    8020360c:	8556                	mv	a0,s5
    8020360e:	fffff097          	auipc	ra,0xfffff
    80203612:	226080e7          	jalr	550(ra) # 80202834 <rw_clus>
}
    80203616:	bb41                	j	802033a6 <emake+0xea>
                    case 5:     w = (uint8 *)de.lne.name2; break;
    80203618:	f7e40793          	addi	a5,s0,-130
    8020361c:	a019                	j	80203622 <emake+0x366>
                switch (j) {
    8020361e:	f8c40793          	addi	a5,s0,-116
            for (int j = 1; j <= CHAR_LONG_NAME; j++) {
    80203622:	2705                	addiw	a4,a4,1
    80203624:	fff7061b          	addiw	a2,a4,-1
                if (end) {
    80203628:	d6b1                	beqz	a3,80203574 <emake+0x2b8>
                    *w++ = 0xff;            // on k210, unaligned reading is illegal
    8020362a:	01278023          	sb	s2,0(a5)
                    *w++ = 0xff;
    8020362e:	012780a3          	sb	s2,1(a5)
    80203632:	0789                	addi	a5,a5,2
                switch (j) {
    80203634:	fea602e3          	beq	a2,a0,80203618 <emake+0x35c>
    80203638:	fe9603e3          	beq	a2,s1,8020361e <emake+0x362>
            for (int j = 1; j <= CHAR_LONG_NAME; j++) {
    8020363c:	0007061b          	sext.w	a2,a4
    80203640:	fec851e3          	bge	a6,a2,80203622 <emake+0x366>
            uint off2 = reloc_clus(self_fs, dp, off, 1);
    80203644:	4685                	li	a3,1
    80203646:	865e                	mv	a2,s7
    80203648:	85ce                	mv	a1,s3
    8020364a:	8556                	mv	a0,s5
    8020364c:	fffff097          	auipc	ra,0xfffff
    80203650:	0d8080e7          	jalr	216(ra) # 80202724 <reloc_clus>
            rw_clus(self_fs, dp->cur_clus, 1, 0, (uint64)&de, off2, sizeof(de));
    80203654:	02000813          	li	a6,32
    80203658:	0005079b          	sext.w	a5,a0
    8020365c:	f7040713          	addi	a4,s0,-144
    80203660:	86ea                	mv	a3,s10
    80203662:	4605                	li	a2,1
    80203664:	10c9a583          	lw	a1,268(s3)
    80203668:	8556                	mv	a0,s5
    8020366a:	fffff097          	auipc	ra,0xfffff
    8020366e:	1ca080e7          	jalr	458(ra) # 80202834 <rw_clus>
            off += sizeof(de);
    80203672:	020b8b9b          	addiw	s7,s7,32
        for (int i = entcnt; i > 0; i--) {
    80203676:	1b4d                	addi	s6,s6,-13
    80203678:	f14059e3          	blez	s4,8020358a <emake+0x2ce>
            if ((de.lne.order = i) == entcnt) {
    8020367c:	0ffa7793          	andi	a5,s4,255
    80203680:	eefd85e3          	beq	s11,a5,8020356a <emake+0x2ae>
    80203684:	f6f40823          	sb	a5,-144(s0)
            char *p = ep->filename + (i - 1) * CHAR_LONG_NAME;
    80203688:	3a7d                	addiw	s4,s4,-1
    8020368a:	85da                	mv	a1,s6
    8020368c:	4709                	li	a4,2
            int end = 0;
    8020368e:	86ea                	mv	a3,s10
            uint8 *w = (uint8 *)de.lne.name1;
    80203690:	f7140793          	addi	a5,s0,-143
                switch (j) {
    80203694:	4515                	li	a0,5
            for (int j = 1; j <= CHAR_LONG_NAME; j++) {
    80203696:	4835                	li	a6,13
    80203698:	b771                	j	80203624 <emake+0x368>
        if (c == ' ') { continue; }
    8020369a:	02000793          	li	a5,32
    8020369e:	eaf913e3          	bne	s2,a5,80203544 <emake+0x288>
    802036a2:	b561                	j	8020352a <emake+0x26e>

00000000802036a4 <edup>:
{
    802036a4:	1101                	addi	sp,sp,-32
    802036a6:	ec06                	sd	ra,24(sp)
    802036a8:	e822                	sd	s0,16(sp)
    802036aa:	e426                	sd	s1,8(sp)
    802036ac:	e04a                	sd	s2,0(sp)
    802036ae:	1000                	addi	s0,sp,32
    802036b0:	84aa                	mv	s1,a0
        acquire(&self_fs->ecache.lock);
    802036b2:	11454903          	lbu	s2,276(a0)
    802036b6:	6795                	lui	a5,0x5
    802036b8:	9b878793          	addi	a5,a5,-1608 # 49b8 <_entry-0x801fb648>
    802036bc:	02f90933          	mul	s2,s2,a5
    802036c0:	00851797          	auipc	a5,0x851
    802036c4:	52878793          	addi	a5,a5,1320 # 80a54be8 <FatFs+0x38>
    802036c8:	993e                	add	s2,s2,a5
    802036ca:	854a                	mv	a0,s2
    802036cc:	00005097          	auipc	ra,0x5
    802036d0:	caa080e7          	jalr	-854(ra) # 80208376 <acquire>
        entry->ref++;
    802036d4:	1184a783          	lw	a5,280(s1)
    802036d8:	2785                	addiw	a5,a5,1
    802036da:	10f4ac23          	sw	a5,280(s1)
        release(&self_fs->ecache.lock);
    802036de:	854a                	mv	a0,s2
    802036e0:	00005097          	auipc	ra,0x5
    802036e4:	cea080e7          	jalr	-790(ra) # 802083ca <release>
}
    802036e8:	8526                	mv	a0,s1
    802036ea:	60e2                	ld	ra,24(sp)
    802036ec:	6442                	ld	s0,16(sp)
    802036ee:	64a2                	ld	s1,8(sp)
    802036f0:	6902                	ld	s2,0(sp)
    802036f2:	6105                	addi	sp,sp,32
    802036f4:	8082                	ret

00000000802036f6 <eupdate>:
    if (!entry->dirty || entry->valid != 1) { return; }
    802036f6:	11554783          	lbu	a5,277(a0)
    802036fa:	10078263          	beqz	a5,802037fe <eupdate+0x108>
{
    802036fe:	711d                	addi	sp,sp,-96
    80203700:	ec86                	sd	ra,88(sp)
    80203702:	e8a2                	sd	s0,80(sp)
    80203704:	e4a6                	sd	s1,72(sp)
    80203706:	e0ca                	sd	s2,64(sp)
    80203708:	fc4e                	sd	s3,56(sp)
    8020370a:	1080                	addi	s0,sp,96
    8020370c:	84aa                	mv	s1,a0
    if (!entry->dirty || entry->valid != 1) { return; }
    8020370e:	11651703          	lh	a4,278(a0)
    80203712:	4785                	li	a5,1
    80203714:	00f70963          	beq	a4,a5,80203726 <eupdate+0x30>
}
    80203718:	60e6                	ld	ra,88(sp)
    8020371a:	6446                	ld	s0,80(sp)
    8020371c:	64a6                	ld	s1,72(sp)
    8020371e:	6906                	ld	s2,64(sp)
    80203720:	79e2                	ld	s3,56(sp)
    80203722:	6125                	addi	sp,sp,96
    80203724:	8082                	ret
    struct fs * self_fs = &FatFs[entry->dev];
    80203726:	11454903          	lbu	s2,276(a0)
    8020372a:	6795                	lui	a5,0x5
    8020372c:	9b878793          	addi	a5,a5,-1608 # 49b8 <_entry-0x801fb648>
    80203730:	02f90933          	mul	s2,s2,a5
    80203734:	00851797          	auipc	a5,0x851
    80203738:	47c78793          	addi	a5,a5,1148 # 80a54bb0 <FatFs>
    8020373c:	993e                	add	s2,s2,a5
    uint entcnt = 0;
    8020373e:	fc042623          	sw	zero,-52(s0)
    uint32 off = reloc_clus(self_fs, entry->parent, entry->off, 0);
    80203742:	4681                	li	a3,0
    80203744:	12052603          	lw	a2,288(a0)
    80203748:	12853583          	ld	a1,296(a0)
    8020374c:	854a                	mv	a0,s2
    8020374e:	fffff097          	auipc	ra,0xfffff
    80203752:	fd6080e7          	jalr	-42(ra) # 80202724 <reloc_clus>
    rw_clus(self_fs, entry->parent->cur_clus, 0, 0, (uint64) &entcnt, off, 1);
    80203756:	1284b583          	ld	a1,296(s1)
    8020375a:	4805                	li	a6,1
    8020375c:	0005079b          	sext.w	a5,a0
    80203760:	fcc40713          	addi	a4,s0,-52
    80203764:	4681                	li	a3,0
    80203766:	4601                	li	a2,0
    80203768:	10c5a583          	lw	a1,268(a1)
    8020376c:	854a                	mv	a0,s2
    8020376e:	fffff097          	auipc	ra,0xfffff
    80203772:	0c6080e7          	jalr	198(ra) # 80202834 <rw_clus>
    entcnt &= ~LAST_LONG_ENTRY;
    80203776:	fcc42603          	lw	a2,-52(s0)
    8020377a:	fbf67613          	andi	a2,a2,-65
    8020377e:	fcc42623          	sw	a2,-52(s0)
    off = reloc_clus(self_fs, entry->parent, entry->off + (entcnt << 5), 0);
    80203782:	0056161b          	slliw	a2,a2,0x5
    80203786:	1204a783          	lw	a5,288(s1)
    8020378a:	4681                	li	a3,0
    8020378c:	9e3d                	addw	a2,a2,a5
    8020378e:	1284b583          	ld	a1,296(s1)
    80203792:	854a                	mv	a0,s2
    80203794:	fffff097          	auipc	ra,0xfffff
    80203798:	f90080e7          	jalr	-112(ra) # 80202724 <reloc_clus>
    8020379c:	0005099b          	sext.w	s3,a0
    rw_clus(self_fs, entry->parent->cur_clus, 0, 0, (uint64)&de, off, sizeof(de));
    802037a0:	1284b583          	ld	a1,296(s1)
    802037a4:	02000813          	li	a6,32
    802037a8:	87ce                	mv	a5,s3
    802037aa:	fa840713          	addi	a4,s0,-88
    802037ae:	4681                	li	a3,0
    802037b0:	4601                	li	a2,0
    802037b2:	10c5a583          	lw	a1,268(a1)
    802037b6:	854a                	mv	a0,s2
    802037b8:	fffff097          	auipc	ra,0xfffff
    802037bc:	07c080e7          	jalr	124(ra) # 80202834 <rw_clus>
    de.sne.fst_clus_hi = (uint16)(entry->first_clus >> 16);
    802037c0:	1044a783          	lw	a5,260(s1)
    802037c4:	0107d71b          	srliw	a4,a5,0x10
    802037c8:	fae41e23          	sh	a4,-68(s0)
    de.sne.fst_clus_lo = (uint16)(entry->first_clus & 0xffff);
    802037cc:	fcf41123          	sh	a5,-62(s0)
    de.sne.file_size = entry->file_size;
    802037d0:	1084a783          	lw	a5,264(s1)
    802037d4:	fcf42223          	sw	a5,-60(s0)
    rw_clus(self_fs, entry->parent->cur_clus, 1, 0, (uint64)&de, off, sizeof(de));
    802037d8:	1284b583          	ld	a1,296(s1)
    802037dc:	02000813          	li	a6,32
    802037e0:	87ce                	mv	a5,s3
    802037e2:	fa840713          	addi	a4,s0,-88
    802037e6:	4681                	li	a3,0
    802037e8:	4605                	li	a2,1
    802037ea:	10c5a583          	lw	a1,268(a1)
    802037ee:	854a                	mv	a0,s2
    802037f0:	fffff097          	auipc	ra,0xfffff
    802037f4:	044080e7          	jalr	68(ra) # 80202834 <rw_clus>
    entry->dirty = 0;
    802037f8:	10048aa3          	sb	zero,277(s1)
    802037fc:	bf31                	j	80203718 <eupdate+0x22>
    802037fe:	8082                	ret

0000000080203800 <eremove>:
    if (entry->valid != 1) { return; }
    80203800:	11651703          	lh	a4,278(a0)
    80203804:	4785                	li	a5,1
    80203806:	00f70363          	beq	a4,a5,8020380c <eremove+0xc>
    8020380a:	8082                	ret
{
    8020380c:	715d                	addi	sp,sp,-80
    8020380e:	e486                	sd	ra,72(sp)
    80203810:	e0a2                	sd	s0,64(sp)
    80203812:	fc26                	sd	s1,56(sp)
    80203814:	f84a                	sd	s2,48(sp)
    80203816:	f44e                	sd	s3,40(sp)
    80203818:	f052                	sd	s4,32(sp)
    8020381a:	ec56                	sd	s5,24(sp)
    8020381c:	0880                	addi	s0,sp,80
    8020381e:	89aa                	mv	s3,a0
    struct fs * self_fs = &FatFs[entry->dev];
    80203820:	11454a83          	lbu	s5,276(a0)
    80203824:	6795                	lui	a5,0x5
    80203826:	9b878793          	addi	a5,a5,-1608 # 49b8 <_entry-0x801fb648>
    8020382a:	02fa8ab3          	mul	s5,s5,a5
    8020382e:	00851797          	auipc	a5,0x851
    80203832:	38278793          	addi	a5,a5,898 # 80a54bb0 <FatFs>
    80203836:	9abe                	add	s5,s5,a5
    uint entcnt = 0;
    80203838:	fa042e23          	sw	zero,-68(s0)
    uint32 off = entry->off;
    8020383c:	12052a03          	lw	s4,288(a0)
    uint32 off2 = reloc_clus(self_fs, entry->parent, off, 0);
    80203840:	4681                	li	a3,0
    80203842:	8652                	mv	a2,s4
    80203844:	12853583          	ld	a1,296(a0)
    80203848:	8556                	mv	a0,s5
    8020384a:	fffff097          	auipc	ra,0xfffff
    8020384e:	eda080e7          	jalr	-294(ra) # 80202724 <reloc_clus>
    80203852:	0005049b          	sext.w	s1,a0
    rw_clus(self_fs, entry->parent->cur_clus, 0, 0, (uint64) &entcnt, off2, 1);
    80203856:	1289b583          	ld	a1,296(s3)
    8020385a:	4805                	li	a6,1
    8020385c:	87a6                	mv	a5,s1
    8020385e:	fbc40713          	addi	a4,s0,-68
    80203862:	4681                	li	a3,0
    80203864:	4601                	li	a2,0
    80203866:	10c5a583          	lw	a1,268(a1)
    8020386a:	8556                	mv	a0,s5
    8020386c:	fffff097          	auipc	ra,0xfffff
    80203870:	fc8080e7          	jalr	-56(ra) # 80202834 <rw_clus>
    entcnt &= ~LAST_LONG_ENTRY;
    80203874:	fbc42783          	lw	a5,-68(s0)
    80203878:	fbf7f793          	andi	a5,a5,-65
    8020387c:	faf42e23          	sw	a5,-68(s0)
    uint8 flag = EMPTY_ENTRY;
    80203880:	5795                	li	a5,-27
    80203882:	faf40da3          	sb	a5,-69(s0)
    for (int i = 0; i <= entcnt; i++) {
    80203886:	4901                	li	s2,0
        rw_clus(self_fs, entry->parent->cur_clus, 1, 0, (uint64) &flag, off2, 1);
    80203888:	1289b583          	ld	a1,296(s3)
    8020388c:	4805                	li	a6,1
    8020388e:	87a6                	mv	a5,s1
    80203890:	fbb40713          	addi	a4,s0,-69
    80203894:	4681                	li	a3,0
    80203896:	4605                	li	a2,1
    80203898:	10c5a583          	lw	a1,268(a1)
    8020389c:	8556                	mv	a0,s5
    8020389e:	fffff097          	auipc	ra,0xfffff
    802038a2:	f96080e7          	jalr	-106(ra) # 80202834 <rw_clus>
        off += 32;
    802038a6:	020a0a1b          	addiw	s4,s4,32
        off2 = reloc_clus(self_fs, entry->parent, off, 0);
    802038aa:	4681                	li	a3,0
    802038ac:	8652                	mv	a2,s4
    802038ae:	1289b583          	ld	a1,296(s3)
    802038b2:	8556                	mv	a0,s5
    802038b4:	fffff097          	auipc	ra,0xfffff
    802038b8:	e70080e7          	jalr	-400(ra) # 80202724 <reloc_clus>
    802038bc:	0005049b          	sext.w	s1,a0
    for (int i = 0; i <= entcnt; i++) {
    802038c0:	0019079b          	addiw	a5,s2,1
    802038c4:	0007891b          	sext.w	s2,a5
    802038c8:	fbc42703          	lw	a4,-68(s0)
    802038cc:	fb277ee3          	bgeu	a4,s2,80203888 <eremove+0x88>
    entry->valid = -1;
    802038d0:	57fd                	li	a5,-1
    802038d2:	10f99b23          	sh	a5,278(s3)
}
    802038d6:	60a6                	ld	ra,72(sp)
    802038d8:	6406                	ld	s0,64(sp)
    802038da:	74e2                	ld	s1,56(sp)
    802038dc:	7942                	ld	s2,48(sp)
    802038de:	79a2                	ld	s3,40(sp)
    802038e0:	7a02                	ld	s4,32(sp)
    802038e2:	6ae2                	ld	s5,24(sp)
    802038e4:	6161                	addi	sp,sp,80
    802038e6:	8082                	ret

00000000802038e8 <etrunc>:
{
    802038e8:	7139                	addi	sp,sp,-64
    802038ea:	fc06                	sd	ra,56(sp)
    802038ec:	f822                	sd	s0,48(sp)
    802038ee:	f426                	sd	s1,40(sp)
    802038f0:	f04a                	sd	s2,32(sp)
    802038f2:	ec4e                	sd	s3,24(sp)
    802038f4:	e852                	sd	s4,16(sp)
    802038f6:	e456                	sd	s5,8(sp)
    802038f8:	0080                	addi	s0,sp,64
    802038fa:	8aaa                	mv	s5,a0
    struct fs * self_fs = &FatFs[entry->dev];
    802038fc:	11454903          	lbu	s2,276(a0)
    80203900:	6795                	lui	a5,0x5
    80203902:	9b878793          	addi	a5,a5,-1608 # 49b8 <_entry-0x801fb648>
    80203906:	02f90933          	mul	s2,s2,a5
    8020390a:	00851797          	auipc	a5,0x851
    8020390e:	2a678793          	addi	a5,a5,678 # 80a54bb0 <FatFs>
    80203912:	993e                	add	s2,s2,a5
    for (uint32 clus = entry->first_clus; clus >= 2 && clus < FAT32_EOC; ) {
    80203914:	10452483          	lw	s1,260(a0)
    80203918:	ffe4871b          	addiw	a4,s1,-2
    8020391c:	100007b7          	lui	a5,0x10000
    80203920:	17d5                	addi	a5,a5,-11
    80203922:	02e7e863          	bltu	a5,a4,80203952 <etrunc+0x6a>
    80203926:	8a3e                	mv	s4,a5
        uint32 next = read_fat(self_fs, clus);
    80203928:	0004899b          	sext.w	s3,s1
    8020392c:	85a6                	mv	a1,s1
    8020392e:	854a                	mv	a0,s2
    80203930:	fffff097          	auipc	ra,0xfffff
    80203934:	bec080e7          	jalr	-1044(ra) # 8020251c <read_fat>
    80203938:	0005049b          	sext.w	s1,a0
    write_fat(self_fs, cluster, 0);
    8020393c:	4601                	li	a2,0
    8020393e:	85ce                	mv	a1,s3
    80203940:	854a                	mv	a0,s2
    80203942:	fffff097          	auipc	ra,0xfffff
    80203946:	d68080e7          	jalr	-664(ra) # 802026aa <write_fat>
    for (uint32 clus = entry->first_clus; clus >= 2 && clus < FAT32_EOC; ) {
    8020394a:	ffe4879b          	addiw	a5,s1,-2
    8020394e:	fcfa7de3          	bgeu	s4,a5,80203928 <etrunc+0x40>
    entry->file_size = 0;
    80203952:	100aa423          	sw	zero,264(s5)
    entry->first_clus = 0;
    80203956:	100aa223          	sw	zero,260(s5)
    entry->dirty = 1;
    8020395a:	4785                	li	a5,1
    8020395c:	10fa8aa3          	sb	a5,277(s5)
}
    80203960:	70e2                	ld	ra,56(sp)
    80203962:	7442                	ld	s0,48(sp)
    80203964:	74a2                	ld	s1,40(sp)
    80203966:	7902                	ld	s2,32(sp)
    80203968:	69e2                	ld	s3,24(sp)
    8020396a:	6a42                	ld	s4,16(sp)
    8020396c:	6aa2                	ld	s5,8(sp)
    8020396e:	6121                	addi	sp,sp,64
    80203970:	8082                	ret

0000000080203972 <elock>:
{
    80203972:	1141                	addi	sp,sp,-16
    80203974:	e406                	sd	ra,8(sp)
    80203976:	e022                	sd	s0,0(sp)
    80203978:	0800                	addi	s0,sp,16
    if (entry == 0 || entry->ref < 1)
    8020397a:	cd19                	beqz	a0,80203998 <elock+0x26>
    8020397c:	11852783          	lw	a5,280(a0)
    80203980:	00f05c63          	blez	a5,80203998 <elock+0x26>
    acquiresleep(&entry->lock);
    80203984:	14050513          	addi	a0,a0,320
    80203988:	00005097          	auipc	ra,0x5
    8020398c:	ac4080e7          	jalr	-1340(ra) # 8020844c <acquiresleep>
}
    80203990:	60a2                	ld	ra,8(sp)
    80203992:	6402                	ld	s0,0(sp)
    80203994:	0141                	addi	sp,sp,16
    80203996:	8082                	ret
        panic("elock");
    80203998:	0000f517          	auipc	a0,0xf
    8020399c:	aa850513          	addi	a0,a0,-1368 # 80212440 <rodata_start+0x440>
    802039a0:	00005097          	auipc	ra,0x5
    802039a4:	d46080e7          	jalr	-698(ra) # 802086e6 <panic>

00000000802039a8 <eunlock>:
{
    802039a8:	1101                	addi	sp,sp,-32
    802039aa:	ec06                	sd	ra,24(sp)
    802039ac:	e822                	sd	s0,16(sp)
    802039ae:	e426                	sd	s1,8(sp)
    802039b0:	e04a                	sd	s2,0(sp)
    802039b2:	1000                	addi	s0,sp,32
    if (entry == 0 || !holdingsleep(&entry->lock) || entry->ref < 1)
    802039b4:	c90d                	beqz	a0,802039e6 <eunlock+0x3e>
    802039b6:	84aa                	mv	s1,a0
    802039b8:	14050913          	addi	s2,a0,320
    802039bc:	854a                	mv	a0,s2
    802039be:	00005097          	auipc	ra,0x5
    802039c2:	b1c080e7          	jalr	-1252(ra) # 802084da <holdingsleep>
    802039c6:	c105                	beqz	a0,802039e6 <eunlock+0x3e>
    802039c8:	1184a783          	lw	a5,280(s1)
    802039cc:	00f05d63          	blez	a5,802039e6 <eunlock+0x3e>
    releasesleep(&entry->lock);
    802039d0:	854a                	mv	a0,s2
    802039d2:	00005097          	auipc	ra,0x5
    802039d6:	ac4080e7          	jalr	-1340(ra) # 80208496 <releasesleep>
}
    802039da:	60e2                	ld	ra,24(sp)
    802039dc:	6442                	ld	s0,16(sp)
    802039de:	64a2                	ld	s1,8(sp)
    802039e0:	6902                	ld	s2,0(sp)
    802039e2:	6105                	addi	sp,sp,32
    802039e4:	8082                	ret
        panic("eunlock");
    802039e6:	0000f517          	auipc	a0,0xf
    802039ea:	a6250513          	addi	a0,a0,-1438 # 80212448 <rodata_start+0x448>
    802039ee:	00005097          	auipc	ra,0x5
    802039f2:	cf8080e7          	jalr	-776(ra) # 802086e6 <panic>

00000000802039f6 <eput>:
{
    802039f6:	7139                	addi	sp,sp,-64
    802039f8:	fc06                	sd	ra,56(sp)
    802039fa:	f822                	sd	s0,48(sp)
    802039fc:	f426                	sd	s1,40(sp)
    802039fe:	f04a                	sd	s2,32(sp)
    80203a00:	ec4e                	sd	s3,24(sp)
    80203a02:	e852                	sd	s4,16(sp)
    80203a04:	e456                	sd	s5,8(sp)
    80203a06:	e05a                	sd	s6,0(sp)
    80203a08:	0080                	addi	s0,sp,64
    80203a0a:	892a                	mv	s2,a0
    struct fs *self_fs = &FatFs[entry->dev];
    80203a0c:	11454483          	lbu	s1,276(a0)
    80203a10:	00048b1b          	sext.w	s6,s1
    acquire(&self_fs->ecache.lock);
    80203a14:	6a15                	lui	s4,0x5
    80203a16:	9b8a0793          	addi	a5,s4,-1608 # 49b8 <_entry-0x801fb648>
    80203a1a:	02f484b3          	mul	s1,s1,a5
    80203a1e:	03848993          	addi	s3,s1,56
    80203a22:	00851a97          	auipc	s5,0x851
    80203a26:	18ea8a93          	addi	s5,s5,398 # 80a54bb0 <FatFs>
    80203a2a:	99d6                	add	s3,s3,s5
    80203a2c:	854e                	mv	a0,s3
    80203a2e:	00005097          	auipc	ra,0x5
    80203a32:	948080e7          	jalr	-1720(ra) # 80208376 <acquire>
    if (entry != &self_fs->root && entry->valid != 0 && entry->ref == 1) {
    80203a36:	830a0a13          	addi	s4,s4,-2000
    80203a3a:	94d2                	add	s1,s1,s4
    80203a3c:	94d6                	add	s1,s1,s5
    80203a3e:	01248a63          	beq	s1,s2,80203a52 <eput+0x5c>
    80203a42:	11691783          	lh	a5,278(s2)
    80203a46:	c791                	beqz	a5,80203a52 <eput+0x5c>
    80203a48:	11892703          	lw	a4,280(s2)
    80203a4c:	4785                	li	a5,1
    80203a4e:	02f70663          	beq	a4,a5,80203a7a <eput+0x84>
    entry->ref--;
    80203a52:	11892783          	lw	a5,280(s2)
    80203a56:	37fd                	addiw	a5,a5,-1
    80203a58:	10f92c23          	sw	a5,280(s2)
    release(&self_fs->ecache.lock);
    80203a5c:	854e                	mv	a0,s3
    80203a5e:	00005097          	auipc	ra,0x5
    80203a62:	96c080e7          	jalr	-1684(ra) # 802083ca <release>
}
    80203a66:	70e2                	ld	ra,56(sp)
    80203a68:	7442                	ld	s0,48(sp)
    80203a6a:	74a2                	ld	s1,40(sp)
    80203a6c:	7902                	ld	s2,32(sp)
    80203a6e:	69e2                	ld	s3,24(sp)
    80203a70:	6a42                	ld	s4,16(sp)
    80203a72:	6aa2                	ld	s5,8(sp)
    80203a74:	6b02                	ld	s6,0(sp)
    80203a76:	6121                	addi	sp,sp,64
    80203a78:	8082                	ret
        acquiresleep(&entry->lock);
    80203a7a:	14090a13          	addi	s4,s2,320
    80203a7e:	8552                	mv	a0,s4
    80203a80:	00005097          	auipc	ra,0x5
    80203a84:	9cc080e7          	jalr	-1588(ra) # 8020844c <acquiresleep>
        entry->next->prev = entry->prev;
    80203a88:	13093703          	ld	a4,304(s2)
    80203a8c:	13893783          	ld	a5,312(s2)
    80203a90:	12f73c23          	sd	a5,312(a4)
        entry->prev->next = entry->next;
    80203a94:	13093703          	ld	a4,304(s2)
    80203a98:	12e7b823          	sd	a4,304(a5) # 10000130 <_entry-0x701ffed0>
        entry->next = self_fs->root.next;
    80203a9c:	6795                	lui	a5,0x5
    80203a9e:	9b878713          	addi	a4,a5,-1608 # 49b8 <_entry-0x801fb648>
    80203aa2:	02eb0b33          	mul	s6,s6,a4
    80203aa6:	9b56                	add	s6,s6,s5
    80203aa8:	9b3e                	add	s6,s6,a5
    80203aaa:	960b3783          	ld	a5,-1696(s6)
    80203aae:	12f93823          	sd	a5,304(s2)
        entry->prev = &self_fs->root;
    80203ab2:	12993c23          	sd	s1,312(s2)
        self_fs->root.next->prev = entry;
    80203ab6:	960b3783          	ld	a5,-1696(s6)
    80203aba:	1327bc23          	sd	s2,312(a5)
        self_fs->root.next = entry;
    80203abe:	972b3023          	sd	s2,-1696(s6)
        release(&self_fs->ecache.lock);
    80203ac2:	854e                	mv	a0,s3
    80203ac4:	00005097          	auipc	ra,0x5
    80203ac8:	906080e7          	jalr	-1786(ra) # 802083ca <release>
        if (entry->valid == -1) {       // this means some one has called eremove()
    80203acc:	11691703          	lh	a4,278(s2)
    80203ad0:	57fd                	li	a5,-1
    80203ad2:	06f70263          	beq	a4,a5,80203b36 <eput+0x140>
            elock(entry->parent);
    80203ad6:	12893503          	ld	a0,296(s2)
    80203ada:	00000097          	auipc	ra,0x0
    80203ade:	e98080e7          	jalr	-360(ra) # 80203972 <elock>
            eupdate(entry);
    80203ae2:	854a                	mv	a0,s2
    80203ae4:	00000097          	auipc	ra,0x0
    80203ae8:	c12080e7          	jalr	-1006(ra) # 802036f6 <eupdate>
            eunlock(entry->parent);
    80203aec:	12893503          	ld	a0,296(s2)
    80203af0:	00000097          	auipc	ra,0x0
    80203af4:	eb8080e7          	jalr	-328(ra) # 802039a8 <eunlock>
        releasesleep(&entry->lock);
    80203af8:	8552                	mv	a0,s4
    80203afa:	00005097          	auipc	ra,0x5
    80203afe:	99c080e7          	jalr	-1636(ra) # 80208496 <releasesleep>
        struct dirent *eparent = entry->parent;
    80203b02:	12893483          	ld	s1,296(s2)
        acquire(&self_fs->ecache.lock);
    80203b06:	854e                	mv	a0,s3
    80203b08:	00005097          	auipc	ra,0x5
    80203b0c:	86e080e7          	jalr	-1938(ra) # 80208376 <acquire>
        entry->ref--;
    80203b10:	11892783          	lw	a5,280(s2)
    80203b14:	37fd                	addiw	a5,a5,-1
    80203b16:	10f92c23          	sw	a5,280(s2)
        release(&self_fs->ecache.lock);
    80203b1a:	854e                	mv	a0,s3
    80203b1c:	00005097          	auipc	ra,0x5
    80203b20:	8ae080e7          	jalr	-1874(ra) # 802083ca <release>
        if (entry->ref == 0) {
    80203b24:	11892783          	lw	a5,280(s2)
    80203b28:	ff9d                	bnez	a5,80203a66 <eput+0x70>
            eput(eparent);
    80203b2a:	8526                	mv	a0,s1
    80203b2c:	00000097          	auipc	ra,0x0
    80203b30:	eca080e7          	jalr	-310(ra) # 802039f6 <eput>
    80203b34:	bf0d                	j	80203a66 <eput+0x70>
            etrunc(entry);
    80203b36:	854a                	mv	a0,s2
    80203b38:	00000097          	auipc	ra,0x0
    80203b3c:	db0080e7          	jalr	-592(ra) # 802038e8 <etrunc>
    80203b40:	bf65                	j	80203af8 <eput+0x102>

0000000080203b42 <estat>:
{
    80203b42:	1101                	addi	sp,sp,-32
    80203b44:	ec06                	sd	ra,24(sp)
    80203b46:	e822                	sd	s0,16(sp)
    80203b48:	e426                	sd	s1,8(sp)
    80203b4a:	e04a                	sd	s2,0(sp)
    80203b4c:	1000                	addi	s0,sp,32
    80203b4e:	892a                	mv	s2,a0
    80203b50:	84ae                	mv	s1,a1
    strncpy(st->name, de->filename, STAT_MAX_NAME);
    80203b52:	02000613          	li	a2,32
    80203b56:	85aa                	mv	a1,a0
    80203b58:	8526                	mv	a0,s1
    80203b5a:	ffffd097          	auipc	ra,0xffffd
    80203b5e:	332080e7          	jalr	818(ra) # 80200e8c <strncpy>
    st->type = (de->attribute & ATTR_DIRECTORY) ? T_DIR : T_FILE;
    80203b62:	10094783          	lbu	a5,256(s2)
    80203b66:	8bc1                	andi	a5,a5,16
    80203b68:	0017b793          	seqz	a5,a5
    80203b6c:	0785                	addi	a5,a5,1
    80203b6e:	02f49423          	sh	a5,40(s1)
    st->dev = de->dev;
    80203b72:	11494783          	lbu	a5,276(s2)
    80203b76:	d0dc                	sw	a5,36(s1)
    st->size = de->file_size;
    80203b78:	10896783          	lwu	a5,264(s2)
    80203b7c:	f89c                	sd	a5,48(s1)
}
    80203b7e:	60e2                	ld	ra,24(sp)
    80203b80:	6442                	ld	s0,16(sp)
    80203b82:	64a2                	ld	s1,8(sp)
    80203b84:	6902                	ld	s2,0(sp)
    80203b86:	6105                	addi	sp,sp,32
    80203b88:	8082                	ret

0000000080203b8a <enext>:
 * @return  -1      meet the end of dir
 *          0       find empty slots
 *          1       find a file with all its entries
 */
int enext(struct dirent *dp, struct dirent *ep, uint off, int *count)
{
    80203b8a:	7119                	addi	sp,sp,-128
    80203b8c:	fc86                	sd	ra,120(sp)
    80203b8e:	f8a2                	sd	s0,112(sp)
    80203b90:	f4a6                	sd	s1,104(sp)
    80203b92:	f0ca                	sd	s2,96(sp)
    80203b94:	ecce                	sd	s3,88(sp)
    80203b96:	e8d2                	sd	s4,80(sp)
    80203b98:	e4d6                	sd	s5,72(sp)
    80203b9a:	e0da                	sd	s6,64(sp)
    80203b9c:	fc5e                	sd	s7,56(sp)
    80203b9e:	f862                	sd	s8,48(sp)
    80203ba0:	f466                	sd	s9,40(sp)
    80203ba2:	f06a                	sd	s10,32(sp)
    80203ba4:	0100                	addi	s0,sp,128
    if (!(dp->attribute & ATTR_DIRECTORY))
    80203ba6:	10054783          	lbu	a5,256(a0)
    80203baa:	8bc1                	andi	a5,a5,16
    80203bac:	cfb5                	beqz	a5,80203c28 <enext+0x9e>
    80203bae:	892a                	mv	s2,a0
    80203bb0:	8bae                	mv	s7,a1
    80203bb2:	84b2                	mv	s1,a2
    80203bb4:	8a36                	mv	s4,a3
        panic("enext not dir");
    if (ep->valid)
    80203bb6:	11659783          	lh	a5,278(a1)
    80203bba:	efbd                	bnez	a5,80203c38 <enext+0xae>
        panic("enext ep valid");
    if (off % 32)
    80203bbc:	01f67793          	andi	a5,a2,31
    80203bc0:	e7c1                	bnez	a5,80203c48 <enext+0xbe>
        panic("enext not align");
    if (dp->valid != 1) { return -1; }
    80203bc2:	11651703          	lh	a4,278(a0)
    80203bc6:	4785                	li	a5,1
    80203bc8:	557d                	li	a0,-1
    80203bca:	16f71763          	bne	a4,a5,80203d38 <enext+0x1ae>
    
    if(dp->mnt) dp = &(FatFs[dp->dev].root);
    80203bce:	11c92783          	lw	a5,284(s2)
    80203bd2:	c385                	beqz	a5,80203bf2 <enext+0x68>
    80203bd4:	11494903          	lbu	s2,276(s2)
    80203bd8:	6795                	lui	a5,0x5
    80203bda:	9b878713          	addi	a4,a5,-1608 # 49b8 <_entry-0x801fb648>
    80203bde:	02e90933          	mul	s2,s2,a4
    80203be2:	83078793          	addi	a5,a5,-2000
    80203be6:	993e                	add	s2,s2,a5
    80203be8:	00851517          	auipc	a0,0x851
    80203bec:	fc850513          	addi	a0,a0,-56 # 80a54bb0 <FatFs>
    80203bf0:	992a                	add	s2,s2,a0
    struct fs * self_fs = &FatFs[dp->dev];
    80203bf2:	11494983          	lbu	s3,276(s2)
    80203bf6:	6795                	lui	a5,0x5
    80203bf8:	9b878793          	addi	a5,a5,-1608 # 49b8 <_entry-0x801fb648>
    80203bfc:	02f989b3          	mul	s3,s3,a5
    80203c00:	00851797          	auipc	a5,0x851
    80203c04:	fb078793          	addi	a5,a5,-80 # 80a54bb0 <FatFs>
    80203c08:	99be                	add	s3,s3,a5

    union dentry de;
    int cnt = 0;
    memset(ep->filename, 0, FAT32_MAX_FILENAME + 1);
    80203c0a:	8d5e                	mv	s10,s7
    80203c0c:	10000613          	li	a2,256
    80203c10:	4581                	li	a1,0
    80203c12:	855e                	mv	a0,s7
    80203c14:	ffffd097          	auipc	ra,0xffffd
    80203c18:	160080e7          	jalr	352(ra) # 80200d74 <memset>
    int cnt = 0;
    80203c1c:	4a81                	li	s5,0

    for (int off2; (off2 = reloc_clus(self_fs, dp, off, 0)) != -1; off += 32) {
    80203c1e:	5b7d                	li	s6,-1
        if (rw_clus(self_fs, dp->cur_clus, 0, 0, (uint64)&de, off2, 32) != 32 || de.lne.order == END_OF_ENTRY) {//?????
            return -1;
        }
        if (de.lne.order == EMPTY_ENTRY) {
    80203c20:	0e500c13          	li	s8,229
            continue;
        } else if (cnt) {
            *count = cnt;
            return 0;
        }
        if (de.lne.attr == ATTR_LONG_NAME) {
    80203c24:	4cbd                	li	s9,15
    for (int off2; (off2 = reloc_clus(self_fs, dp, off, 0)) != -1; off += 32) {
    80203c26:	a085                	j	80203c86 <enext+0xfc>
        panic("enext not dir");
    80203c28:	0000f517          	auipc	a0,0xf
    80203c2c:	82850513          	addi	a0,a0,-2008 # 80212450 <rodata_start+0x450>
    80203c30:	00005097          	auipc	ra,0x5
    80203c34:	ab6080e7          	jalr	-1354(ra) # 802086e6 <panic>
        panic("enext ep valid");
    80203c38:	0000f517          	auipc	a0,0xf
    80203c3c:	82850513          	addi	a0,a0,-2008 # 80212460 <rodata_start+0x460>
    80203c40:	00005097          	auipc	ra,0x5
    80203c44:	aa6080e7          	jalr	-1370(ra) # 802086e6 <panic>
        panic("enext not align");
    80203c48:	0000f517          	auipc	a0,0xf
    80203c4c:	82850513          	addi	a0,a0,-2008 # 80212470 <rodata_start+0x470>
    80203c50:	00005097          	auipc	ra,0x5
    80203c54:	a96080e7          	jalr	-1386(ra) # 802086e6 <panic>
            cnt++;
    80203c58:	2a85                	addiw	s5,s5,1
            continue;
    80203c5a:	a025                	j	80203c82 <enext+0xf8>
            *count = cnt;
    80203c5c:	015a2023          	sw	s5,0(s4)
            return 0;
    80203c60:	4501                	li	a0,0
    80203c62:	a8d9                	j	80203d38 <enext+0x1ae>
            int lcnt = de.lne.order & ~LAST_LONG_ENTRY;
            if (de.lne.order & LAST_LONG_ENTRY) {
                *count = lcnt + 1;                              // plus the s-n-e;
                count = 0;
            }
            read_entry_name(ep->filename + (lcnt - 1) * CHAR_LONG_NAME, &de);
    80203c64:	fff5079b          	addiw	a5,a0,-1
    80203c68:	0017951b          	slliw	a0,a5,0x1
    80203c6c:	9d3d                	addw	a0,a0,a5
    80203c6e:	0025151b          	slliw	a0,a0,0x2
    80203c72:	9d3d                	addw	a0,a0,a5
    80203c74:	f8040593          	addi	a1,s0,-128
    80203c78:	956a                	add	a0,a0,s10
    80203c7a:	fffff097          	auipc	ra,0xfffff
    80203c7e:	e72080e7          	jalr	-398(ra) # 80202aec <read_entry_name>
    for (int off2; (off2 = reloc_clus(self_fs, dp, off, 0)) != -1; off += 32) {
    80203c82:	0204849b          	addiw	s1,s1,32
    80203c86:	4681                	li	a3,0
    80203c88:	8626                	mv	a2,s1
    80203c8a:	85ca                	mv	a1,s2
    80203c8c:	854e                	mv	a0,s3
    80203c8e:	fffff097          	auipc	ra,0xfffff
    80203c92:	a96080e7          	jalr	-1386(ra) # 80202724 <reloc_clus>
    80203c96:	0b650163          	beq	a0,s6,80203d38 <enext+0x1ae>
        if (rw_clus(self_fs, dp->cur_clus, 0, 0, (uint64)&de, off2, 32) != 32 || de.lne.order == END_OF_ENTRY) {//?????
    80203c9a:	02000813          	li	a6,32
    80203c9e:	0005079b          	sext.w	a5,a0
    80203ca2:	f8040713          	addi	a4,s0,-128
    80203ca6:	4681                	li	a3,0
    80203ca8:	4601                	li	a2,0
    80203caa:	10c92583          	lw	a1,268(s2)
    80203cae:	854e                	mv	a0,s3
    80203cb0:	fffff097          	auipc	ra,0xfffff
    80203cb4:	b84080e7          	jalr	-1148(ra) # 80202834 <rw_clus>
    80203cb8:	2501                	sext.w	a0,a0
    80203cba:	02000793          	li	a5,32
    80203cbe:	06f51c63          	bne	a0,a5,80203d36 <enext+0x1ac>
    80203cc2:	f8044783          	lbu	a5,-128(s0)
    80203cc6:	c7d9                	beqz	a5,80203d54 <enext+0x1ca>
        if (de.lne.order == EMPTY_ENTRY) {
    80203cc8:	f98788e3          	beq	a5,s8,80203c58 <enext+0xce>
        } else if (cnt) {
    80203ccc:	f80a98e3          	bnez	s5,80203c5c <enext+0xd2>
        if (de.lne.attr == ATTR_LONG_NAME) {
    80203cd0:	f8b44703          	lbu	a4,-117(s0)
    80203cd4:	01971d63          	bne	a4,s9,80203cee <enext+0x164>
            int lcnt = de.lne.order & ~LAST_LONG_ENTRY;
    80203cd8:	0bf7f513          	andi	a0,a5,191
            if (de.lne.order & LAST_LONG_ENTRY) {
    80203cdc:	0407f793          	andi	a5,a5,64
    80203ce0:	d3d1                	beqz	a5,80203c64 <enext+0xda>
                *count = lcnt + 1;                              // plus the s-n-e;
    80203ce2:	0015079b          	addiw	a5,a0,1
    80203ce6:	00fa2023          	sw	a5,0(s4)
                count = 0;
    80203cea:	4a01                	li	s4,0
    80203cec:	bfa5                	j	80203c64 <enext+0xda>
        } else {
            if (count) {
    80203cee:	000a0c63          	beqz	s4,80203d06 <enext+0x17c>
                *count = 1;
    80203cf2:	4785                	li	a5,1
    80203cf4:	00fa2023          	sw	a5,0(s4)
                read_entry_name(ep->filename, &de);
    80203cf8:	f8040593          	addi	a1,s0,-128
    80203cfc:	855e                	mv	a0,s7
    80203cfe:	fffff097          	auipc	ra,0xfffff
    80203d02:	dee080e7          	jalr	-530(ra) # 80202aec <read_entry_name>
    entry->attribute = d->sne.attr;
    80203d06:	f8b44783          	lbu	a5,-117(s0)
    80203d0a:	10fb8023          	sb	a5,256(s7)
    entry->first_clus = ((uint32)d->sne.fst_clus_hi << 16) | d->sne.fst_clus_lo;
    80203d0e:	f9445783          	lhu	a5,-108(s0)
    80203d12:	0107979b          	slliw	a5,a5,0x10
    80203d16:	f9a45703          	lhu	a4,-102(s0)
    80203d1a:	8fd9                	or	a5,a5,a4
    80203d1c:	2781                	sext.w	a5,a5
    80203d1e:	10fba223          	sw	a5,260(s7)
    entry->file_size = d->sne.file_size;
    80203d22:	f9c42703          	lw	a4,-100(s0)
    80203d26:	10eba423          	sw	a4,264(s7)
    entry->cur_clus = entry->first_clus;
    80203d2a:	10fba623          	sw	a5,268(s7)
    entry->clus_cnt = 0;
    80203d2e:	100ba823          	sw	zero,272(s7)
            }
            read_entry_info(ep, &de);
            return 1;
    80203d32:	4505                	li	a0,1
}
    80203d34:	a011                	j	80203d38 <enext+0x1ae>
            return -1;
    80203d36:	557d                	li	a0,-1
        }
    }

    return -1;
}
    80203d38:	70e6                	ld	ra,120(sp)
    80203d3a:	7446                	ld	s0,112(sp)
    80203d3c:	74a6                	ld	s1,104(sp)
    80203d3e:	7906                	ld	s2,96(sp)
    80203d40:	69e6                	ld	s3,88(sp)
    80203d42:	6a46                	ld	s4,80(sp)
    80203d44:	6aa6                	ld	s5,72(sp)
    80203d46:	6b06                	ld	s6,64(sp)
    80203d48:	7be2                	ld	s7,56(sp)
    80203d4a:	7c42                	ld	s8,48(sp)
    80203d4c:	7ca2                	ld	s9,40(sp)
    80203d4e:	7d02                	ld	s10,32(sp)
    80203d50:	6109                	addi	sp,sp,128
    80203d52:	8082                	ret
            return -1;
    80203d54:	557d                	li	a0,-1
    80203d56:	b7cd                	j	80203d38 <enext+0x1ae>

0000000080203d58 <dirlookup>:
 * @param   dp          entry of a directory file
 * @param   filename    target filename
 * @param   poff        offset of proper empty entry slots from the beginning of the dir
 */
struct dirent *dirlookup(struct dirent *dp, char *filename, uint *poff)
{
    80203d58:	715d                	addi	sp,sp,-80
    80203d5a:	e486                	sd	ra,72(sp)
    80203d5c:	e0a2                	sd	s0,64(sp)
    80203d5e:	fc26                	sd	s1,56(sp)
    80203d60:	f84a                	sd	s2,48(sp)
    80203d62:	f44e                	sd	s3,40(sp)
    80203d64:	f052                	sd	s4,32(sp)
    80203d66:	ec56                	sd	s5,24(sp)
    80203d68:	e85a                	sd	s6,16(sp)
    80203d6a:	0880                	addi	s0,sp,80
    struct fs * self_fs = &FatFs[dp->dev];
    80203d6c:	11454a03          	lbu	s4,276(a0)
    if (!(dp->attribute & ATTR_DIRECTORY))
    80203d70:	10054783          	lbu	a5,256(a0)
    80203d74:	8bc1                	andi	a5,a5,16
    80203d76:	c3bd                	beqz	a5,80203ddc <dirlookup+0x84>
    80203d78:	84aa                	mv	s1,a0
    80203d7a:	89ae                	mv	s3,a1
    80203d7c:	8ab2                	mv	s5,a2
        panic("dirlookup not DIR");
    if (strncmp(filename, ".", FAT32_MAX_FILENAME) == 0) {
    80203d7e:	0ff00613          	li	a2,255
    80203d82:	0000e597          	auipc	a1,0xe
    80203d86:	71658593          	addi	a1,a1,1814 # 80212498 <rodata_start+0x498>
    80203d8a:	854e                	mv	a0,s3
    80203d8c:	ffffd097          	auipc	ra,0xffffd
    80203d90:	0c4080e7          	jalr	196(ra) # 80200e50 <strncmp>
    80203d94:	cd21                	beqz	a0,80203dec <dirlookup+0x94>
        return edup(dp);
    } else if (strncmp(filename, "..", FAT32_MAX_FILENAME) == 0) {
    80203d96:	0ff00613          	li	a2,255
    80203d9a:	0000e597          	auipc	a1,0xe
    80203d9e:	70658593          	addi	a1,a1,1798 # 802124a0 <rodata_start+0x4a0>
    80203da2:	854e                	mv	a0,s3
    80203da4:	ffffd097          	auipc	ra,0xffffd
    80203da8:	0ac080e7          	jalr	172(ra) # 80200e50 <strncmp>
    80203dac:	e925                	bnez	a0,80203e1c <dirlookup+0xc4>
        if (dp == &self_fs->root) {
    80203dae:	6715                	lui	a4,0x5
    80203db0:	9b870793          	addi	a5,a4,-1608 # 49b8 <_entry-0x801fb648>
    80203db4:	02fa07b3          	mul	a5,s4,a5
    80203db8:	83070713          	addi	a4,a4,-2000
    80203dbc:	97ba                	add	a5,a5,a4
    80203dbe:	00851717          	auipc	a4,0x851
    80203dc2:	df270713          	addi	a4,a4,-526 # 80a54bb0 <FatFs>
    80203dc6:	97ba                	add	a5,a5,a4
    80203dc8:	04f48363          	beq	s1,a5,80203e0e <dirlookup+0xb6>
            return edup(&self_fs->root);
        }
        return edup(dp->parent);
    80203dcc:	1284b503          	ld	a0,296(s1)
    80203dd0:	00000097          	auipc	ra,0x0
    80203dd4:	8d4080e7          	jalr	-1836(ra) # 802036a4 <edup>
    80203dd8:	892a                	mv	s2,a0
    80203dda:	a839                	j	80203df8 <dirlookup+0xa0>
        panic("dirlookup not DIR");
    80203ddc:	0000e517          	auipc	a0,0xe
    80203de0:	6a450513          	addi	a0,a0,1700 # 80212480 <rodata_start+0x480>
    80203de4:	00005097          	auipc	ra,0x5
    80203de8:	902080e7          	jalr	-1790(ra) # 802086e6 <panic>
        return edup(dp);
    80203dec:	8526                	mv	a0,s1
    80203dee:	00000097          	auipc	ra,0x0
    80203df2:	8b6080e7          	jalr	-1866(ra) # 802036a4 <edup>
    80203df6:	892a                	mv	s2,a0
    if (poff) {
        *poff = off;
    }
    eput(ep);
    return NULL;
}
    80203df8:	854a                	mv	a0,s2
    80203dfa:	60a6                	ld	ra,72(sp)
    80203dfc:	6406                	ld	s0,64(sp)
    80203dfe:	74e2                	ld	s1,56(sp)
    80203e00:	7942                	ld	s2,48(sp)
    80203e02:	79a2                	ld	s3,40(sp)
    80203e04:	7a02                	ld	s4,32(sp)
    80203e06:	6ae2                	ld	s5,24(sp)
    80203e08:	6b42                	ld	s6,16(sp)
    80203e0a:	6161                	addi	sp,sp,80
    80203e0c:	8082                	ret
            return edup(&self_fs->root);
    80203e0e:	8526                	mv	a0,s1
    80203e10:	00000097          	auipc	ra,0x0
    80203e14:	894080e7          	jalr	-1900(ra) # 802036a4 <edup>
    80203e18:	892a                	mv	s2,a0
    80203e1a:	bff9                	j	80203df8 <dirlookup+0xa0>
    if (dp->valid != 1) {
    80203e1c:	11649703          	lh	a4,278(s1)
    80203e20:	4785                	li	a5,1
        return NULL;
    80203e22:	4901                	li	s2,0
    if (dp->valid != 1) {
    80203e24:	fcf71ae3          	bne	a4,a5,80203df8 <dirlookup+0xa0>
    if(dp->mnt) dp = &(FatFs[dp->dev].root);
    80203e28:	11c4a783          	lw	a5,284(s1)
    80203e2c:	c385                	beqz	a5,80203e4c <dirlookup+0xf4>
    80203e2e:	1144c483          	lbu	s1,276(s1)
    80203e32:	6795                	lui	a5,0x5
    80203e34:	9b878713          	addi	a4,a5,-1608 # 49b8 <_entry-0x801fb648>
    80203e38:	02e484b3          	mul	s1,s1,a4
    80203e3c:	83078793          	addi	a5,a5,-2000
    80203e40:	94be                	add	s1,s1,a5
    80203e42:	00851517          	auipc	a0,0x851
    80203e46:	d6e50513          	addi	a0,a0,-658 # 80a54bb0 <FatFs>
    80203e4a:	94aa                	add	s1,s1,a0
    struct dirent *ep = eget(dp, filename);
    80203e4c:	85ce                	mv	a1,s3
    80203e4e:	8526                	mv	a0,s1
    80203e50:	fffff097          	auipc	ra,0xfffff
    80203e54:	b30080e7          	jalr	-1232(ra) # 80202980 <eget>
    80203e58:	892a                	mv	s2,a0
    if (ep->valid == 1) { return ep; }                               // self_fs->ecache hits
    80203e5a:	11651703          	lh	a4,278(a0)
    80203e5e:	4785                	li	a5,1
    80203e60:	f8f70ce3          	beq	a4,a5,80203df8 <dirlookup+0xa0>
    int len = strlen(filename);
    80203e64:	854e                	mv	a0,s3
    80203e66:	ffffd097          	auipc	ra,0xffffd
    80203e6a:	096080e7          	jalr	150(ra) # 80200efc <strlen>
    int count = 0;
    80203e6e:	fa042e23          	sw	zero,-68(s0)
    struct fs * self_fs = &FatFs[dp->dev];
    80203e72:	6795                	lui	a5,0x5
    80203e74:	9b878793          	addi	a5,a5,-1608 # 49b8 <_entry-0x801fb648>
    80203e78:	02fa07b3          	mul	a5,s4,a5
    reloc_clus(self_fs, dp, 0, 0);
    80203e7c:	4681                	li	a3,0
    80203e7e:	4601                	li	a2,0
    80203e80:	85a6                	mv	a1,s1
    80203e82:	00851517          	auipc	a0,0x851
    80203e86:	d2e50513          	addi	a0,a0,-722 # 80a54bb0 <FatFs>
    80203e8a:	953e                	add	a0,a0,a5
    80203e8c:	fffff097          	auipc	ra,0xfffff
    80203e90:	898080e7          	jalr	-1896(ra) # 80202724 <reloc_clus>
    uint off = 0;
    80203e94:	4a01                	li	s4,0
    while ((type = enext(dp, ep, off, &count) != -1)) {//?????
    80203e96:	5b7d                	li	s6,-1
    80203e98:	fbc40693          	addi	a3,s0,-68
    80203e9c:	8652                	mv	a2,s4
    80203e9e:	85ca                	mv	a1,s2
    80203ea0:	8526                	mv	a0,s1
    80203ea2:	00000097          	auipc	ra,0x0
    80203ea6:	ce8080e7          	jalr	-792(ra) # 80203b8a <enext>
    80203eaa:	03650f63          	beq	a0,s6,80203ee8 <dirlookup+0x190>
        } else if (strncmp(filename, ep->filename, FAT32_MAX_FILENAME) == 0) {
    80203eae:	0ff00613          	li	a2,255
    80203eb2:	85ca                	mv	a1,s2
    80203eb4:	854e                	mv	a0,s3
    80203eb6:	ffffd097          	auipc	ra,0xffffd
    80203eba:	f9a080e7          	jalr	-102(ra) # 80200e50 <strncmp>
    80203ebe:	c901                	beqz	a0,80203ece <dirlookup+0x176>
        off += count << 5;
    80203ec0:	fbc42783          	lw	a5,-68(s0)
    80203ec4:	0057979b          	slliw	a5,a5,0x5
    80203ec8:	01478a3b          	addw	s4,a5,s4
    80203ecc:	b7f1                	j	80203e98 <dirlookup+0x140>
            ep->parent = edup(dp);
    80203ece:	8526                	mv	a0,s1
    80203ed0:	fffff097          	auipc	ra,0xfffff
    80203ed4:	7d4080e7          	jalr	2004(ra) # 802036a4 <edup>
    80203ed8:	12a93423          	sd	a0,296(s2)
            ep->off = off;
    80203edc:	13492023          	sw	s4,288(s2)
            ep->valid = 1;
    80203ee0:	4785                	li	a5,1
    80203ee2:	10f91b23          	sh	a5,278(s2)
            return ep;
    80203ee6:	bf09                	j	80203df8 <dirlookup+0xa0>
    if (poff) {
    80203ee8:	000a8463          	beqz	s5,80203ef0 <dirlookup+0x198>
        *poff = off;
    80203eec:	014aa023          	sw	s4,0(s5)
    eput(ep);
    80203ef0:	854a                	mv	a0,s2
    80203ef2:	00000097          	auipc	ra,0x0
    80203ef6:	b04080e7          	jalr	-1276(ra) # 802039f6 <eput>
    return NULL;
    80203efa:	4901                	li	s2,0
    80203efc:	bdf5                	j	80203df8 <dirlookup+0xa0>

0000000080203efe <ealloc>:
{
    80203efe:	715d                	addi	sp,sp,-80
    80203f00:	e486                	sd	ra,72(sp)
    80203f02:	e0a2                	sd	s0,64(sp)
    80203f04:	fc26                	sd	s1,56(sp)
    80203f06:	f84a                	sd	s2,48(sp)
    80203f08:	f44e                	sd	s3,40(sp)
    80203f0a:	f052                	sd	s4,32(sp)
    80203f0c:	ec56                	sd	s5,24(sp)
    80203f0e:	0880                	addi	s0,sp,80
    80203f10:	84aa                	mv	s1,a0
    80203f12:	852e                	mv	a0,a1
    80203f14:	89b2                	mv	s3,a2
    if(dp->mnt) dp = &(FatFs[dp->dev].root);
    80203f16:	11c4a783          	lw	a5,284(s1)
    80203f1a:	c385                	beqz	a5,80203f3a <ealloc+0x3c>
    80203f1c:	1144c483          	lbu	s1,276(s1)
    80203f20:	6795                	lui	a5,0x5
    80203f22:	9b878713          	addi	a4,a5,-1608 # 49b8 <_entry-0x801fb648>
    80203f26:	02e484b3          	mul	s1,s1,a4
    80203f2a:	83078793          	addi	a5,a5,-2000
    80203f2e:	94be                	add	s1,s1,a5
    80203f30:	00851797          	auipc	a5,0x851
    80203f34:	c8078793          	addi	a5,a5,-896 # 80a54bb0 <FatFs>
    80203f38:	94be                	add	s1,s1,a5
    if (!(dp->attribute & ATTR_DIRECTORY)) {
    80203f3a:	1004c783          	lbu	a5,256(s1)
    80203f3e:	8bc1                	andi	a5,a5,16
    80203f40:	c7b1                	beqz	a5,80203f8c <ealloc+0x8e>
    if (dp->valid != 1 || !(name = formatname(name))) {        // detect illegal character
    80203f42:	11649703          	lh	a4,278(s1)
    80203f46:	4785                	li	a5,1
        return NULL;
    80203f48:	4901                	li	s2,0
    if (dp->valid != 1 || !(name = formatname(name))) {        // detect illegal character
    80203f4a:	02f71763          	bne	a4,a5,80203f78 <ealloc+0x7a>
    struct fs * self_fs = &FatFs[dp->dev];
    80203f4e:	1144ca83          	lbu	s5,276(s1)
    if (dp->valid != 1 || !(name = formatname(name))) {        // detect illegal character
    80203f52:	fffff097          	auipc	ra,0xfffff
    80203f56:	2b2080e7          	jalr	690(ra) # 80203204 <formatname>
    80203f5a:	8a2a                	mv	s4,a0
    80203f5c:	12050163          	beqz	a0,8020407e <ealloc+0x180>
    uint off = 0;
    80203f60:	fa042e23          	sw	zero,-68(s0)
    if ((ep = dirlookup(dp, name, &off)) != 0) {      // entry exists
    80203f64:	fbc40613          	addi	a2,s0,-68
    80203f68:	85aa                	mv	a1,a0
    80203f6a:	8526                	mv	a0,s1
    80203f6c:	00000097          	auipc	ra,0x0
    80203f70:	dec080e7          	jalr	-532(ra) # 80203d58 <dirlookup>
    80203f74:	892a                	mv	s2,a0
    80203f76:	c11d                	beqz	a0,80203f9c <ealloc+0x9e>
}
    80203f78:	854a                	mv	a0,s2
    80203f7a:	60a6                	ld	ra,72(sp)
    80203f7c:	6406                	ld	s0,64(sp)
    80203f7e:	74e2                	ld	s1,56(sp)
    80203f80:	7942                	ld	s2,48(sp)
    80203f82:	79a2                	ld	s3,40(sp)
    80203f84:	7a02                	ld	s4,32(sp)
    80203f86:	6ae2                	ld	s5,24(sp)
    80203f88:	6161                	addi	sp,sp,80
    80203f8a:	8082                	ret
        panic("ealloc not dir");
    80203f8c:	0000e517          	auipc	a0,0xe
    80203f90:	51c50513          	addi	a0,a0,1308 # 802124a8 <rodata_start+0x4a8>
    80203f94:	00004097          	auipc	ra,0x4
    80203f98:	752080e7          	jalr	1874(ra) # 802086e6 <panic>
    ep = eget(dp, name);
    80203f9c:	85d2                	mv	a1,s4
    80203f9e:	8526                	mv	a0,s1
    80203fa0:	fffff097          	auipc	ra,0xfffff
    80203fa4:	9e0080e7          	jalr	-1568(ra) # 80202980 <eget>
    80203fa8:	892a                	mv	s2,a0
    elock(ep);
    80203faa:	00000097          	auipc	ra,0x0
    80203fae:	9c8080e7          	jalr	-1592(ra) # 80203972 <elock>
    ep->attribute = attr;
    80203fb2:	11390023          	sb	s3,256(s2)
    ep->file_size = 0;
    80203fb6:	10092423          	sw	zero,264(s2)
    ep->first_clus = 0;
    80203fba:	10092223          	sw	zero,260(s2)
    ep->parent = edup(dp);
    80203fbe:	8526                	mv	a0,s1
    80203fc0:	fffff097          	auipc	ra,0xfffff
    80203fc4:	6e4080e7          	jalr	1764(ra) # 802036a4 <edup>
    80203fc8:	12a93423          	sd	a0,296(s2)
    ep->off = off;
    80203fcc:	fbc42783          	lw	a5,-68(s0)
    80203fd0:	12f92023          	sw	a5,288(s2)
    ep->clus_cnt = 0;
    80203fd4:	10092823          	sw	zero,272(s2)
    ep->cur_clus = 0;
    80203fd8:	10092623          	sw	zero,268(s2)
    ep->dirty = 0;
    80203fdc:	10090aa3          	sb	zero,277(s2)
    strncpy(ep->filename, name, FAT32_MAX_FILENAME);
    80203fe0:	0ff00613          	li	a2,255
    80203fe4:	85d2                	mv	a1,s4
    80203fe6:	854a                	mv	a0,s2
    80203fe8:	ffffd097          	auipc	ra,0xffffd
    80203fec:	ea4080e7          	jalr	-348(ra) # 80200e8c <strncpy>
    ep->filename[FAT32_MAX_FILENAME] = '\0';
    80203ff0:	0e090fa3          	sb	zero,255(s2)
    if (attr == ATTR_DIRECTORY) {    // generate "." and ".." for ep
    80203ff4:	47c1                	li	a5,16
    80203ff6:	02f98963          	beq	s3,a5,80204028 <ealloc+0x12a>
        ep->attribute |= ATTR_ARCHIVE;
    80203ffa:	10094783          	lbu	a5,256(s2)
    80203ffe:	0207e793          	ori	a5,a5,32
    80204002:	10f90023          	sb	a5,256(s2)
    emake(dp, ep, off);
    80204006:	fbc42603          	lw	a2,-68(s0)
    8020400a:	85ca                	mv	a1,s2
    8020400c:	8526                	mv	a0,s1
    8020400e:	fffff097          	auipc	ra,0xfffff
    80204012:	2ae080e7          	jalr	686(ra) # 802032bc <emake>
    ep->valid = 1;
    80204016:	4785                	li	a5,1
    80204018:	10f91b23          	sh	a5,278(s2)
    eunlock(ep);
    8020401c:	854a                	mv	a0,s2
    8020401e:	00000097          	auipc	ra,0x0
    80204022:	98a080e7          	jalr	-1654(ra) # 802039a8 <eunlock>
    return ep;
    80204026:	bf89                	j	80203f78 <ealloc+0x7a>
        ep->attribute |= ATTR_DIRECTORY;
    80204028:	10094783          	lbu	a5,256(s2)
    8020402c:	0107e793          	ori	a5,a5,16
    80204030:	10f90023          	sb	a5,256(s2)
    struct fs * self_fs = &FatFs[dp->dev];
    80204034:	6515                	lui	a0,0x5
    80204036:	9b850513          	addi	a0,a0,-1608 # 49b8 <_entry-0x801fb648>
    8020403a:	02aa8ab3          	mul	s5,s5,a0
        ep->cur_clus = ep->first_clus = alloc_clus(self_fs, dp->dev);
    8020403e:	1144c583          	lbu	a1,276(s1)
    80204042:	00851517          	auipc	a0,0x851
    80204046:	b6e50513          	addi	a0,a0,-1170 # 80a54bb0 <FatFs>
    8020404a:	9556                	add	a0,a0,s5
    8020404c:	ffffe097          	auipc	ra,0xffffe
    80204050:	538080e7          	jalr	1336(ra) # 80202584 <alloc_clus>
    80204054:	2501                	sext.w	a0,a0
    80204056:	10a92223          	sw	a0,260(s2)
    8020405a:	10a92623          	sw	a0,268(s2)
        emake(ep, ep, 0);
    8020405e:	4601                	li	a2,0
    80204060:	85ca                	mv	a1,s2
    80204062:	854a                	mv	a0,s2
    80204064:	fffff097          	auipc	ra,0xfffff
    80204068:	258080e7          	jalr	600(ra) # 802032bc <emake>
        emake(ep, dp, 32);
    8020406c:	02000613          	li	a2,32
    80204070:	85a6                	mv	a1,s1
    80204072:	854a                	mv	a0,s2
    80204074:	fffff097          	auipc	ra,0xfffff
    80204078:	248080e7          	jalr	584(ra) # 802032bc <emake>
    8020407c:	b769                	j	80204006 <ealloc+0x108>
        return NULL;
    8020407e:	892a                	mv	s2,a0
    80204080:	bde5                	j	80203f78 <ealloc+0x7a>

0000000080204082 <lookup_path>:
}


// FAT32 version of namex in xv6's original file system.
static struct dirent *lookup_path(struct dirent* env,char *path, int parent, char *name,int* devno)
{
    80204082:	711d                	addi	sp,sp,-96
    80204084:	ec86                	sd	ra,88(sp)
    80204086:	e8a2                	sd	s0,80(sp)
    80204088:	e4a6                	sd	s1,72(sp)
    8020408a:	e0ca                	sd	s2,64(sp)
    8020408c:	fc4e                	sd	s3,56(sp)
    8020408e:	f852                	sd	s4,48(sp)
    80204090:	f456                	sd	s5,40(sp)
    80204092:	f05a                	sd	s6,32(sp)
    80204094:	ec5e                	sd	s7,24(sp)
    80204096:	e862                	sd	s8,16(sp)
    80204098:	e466                	sd	s9,8(sp)
    8020409a:	e06a                	sd	s10,0(sp)
    8020409c:	1080                	addi	s0,sp,96
    8020409e:	892e                	mv	s2,a1
    802040a0:	8bb2                	mv	s7,a2
    802040a2:	8ab6                	mv	s5,a3
    802040a4:	8b3a                	mv	s6,a4
    struct dirent *entry, *next;
    
    struct fs * self_fs;
    if(devno)*devno = -1;
    802040a6:	c319                	beqz	a4,802040ac <lookup_path+0x2a>
    802040a8:	57fd                	li	a5,-1
    802040aa:	c31c                	sw	a5,0(a4)
    if (*path == '/') {
    802040ac:	00094783          	lbu	a5,0(s2)
    802040b0:	02f00713          	li	a4,47
    802040b4:	02e78363          	beq	a5,a4,802040da <lookup_path+0x58>
        self_fs = &FatFs[0];
        entry = edup(&self_fs->root);
    } else if(env){
    802040b8:	c91d                	beqz	a0,802040ee <lookup_path+0x6c>
        entry = edup(env); 
    802040ba:	fffff097          	auipc	ra,0xfffff
    802040be:	5ea080e7          	jalr	1514(ra) # 802036a4 <edup>
    802040c2:	89aa                	mv	s3,a0
    while (*path == '/') {
    802040c4:	02f00a13          	li	s4,47
    802040c8:	0ff00c13          	li	s8,255
    802040cc:	0ff00d13          	li	s10,255
        return NULL;
    }

    while ((path = skipelem(path, name)) != 0) {
        elock(entry);
        if(devno&&entry == dev){
    802040d0:	00868c97          	auipc	s9,0x868
    802040d4:	dd8c8c93          	addi	s9,s9,-552 # 80a6bea8 <dev>
    802040d8:	aa0d                	j	8020420a <lookup_path+0x188>
        entry = edup(&self_fs->root);
    802040da:	00855517          	auipc	a0,0x855
    802040de:	30650513          	addi	a0,a0,774 # 80a593e0 <FatFs+0x4830>
    802040e2:	fffff097          	auipc	ra,0xfffff
    802040e6:	5c2080e7          	jalr	1474(ra) # 802036a4 <edup>
    802040ea:	89aa                	mv	s3,a0
    802040ec:	bfe1                	j	802040c4 <lookup_path+0x42>
        return NULL;
    802040ee:	89aa                	mv	s3,a0
    } else if (*path != '\0') {
    802040f0:	cba1                	beqz	a5,80204140 <lookup_path+0xbe>
        self_fs = &FatFs[myproc()->cwd->dev];
    802040f2:	00007097          	auipc	ra,0x7
    802040f6:	35a080e7          	jalr	858(ra) # 8020b44c <myproc>
        entry = edup(myproc()->cwd);
    802040fa:	00007097          	auipc	ra,0x7
    802040fe:	352080e7          	jalr	850(ra) # 8020b44c <myproc>
    80204102:	7d68                	ld	a0,248(a0)
    80204104:	fffff097          	auipc	ra,0xfffff
    80204108:	5a0080e7          	jalr	1440(ra) # 802036a4 <edup>
    8020410c:	89aa                	mv	s3,a0
    8020410e:	bf5d                	j	802040c4 <lookup_path+0x42>
          eunlock(entry);
    80204110:	854e                	mv	a0,s3
    80204112:	00000097          	auipc	ra,0x0
    80204116:	896080e7          	jalr	-1898(ra) # 802039a8 <eunlock>
          *devno = devlookup(name);
    8020411a:	8556                	mv	a0,s5
    8020411c:	00004097          	auipc	ra,0x4
    80204120:	b12080e7          	jalr	-1262(ra) # 80207c2e <devlookup>
    80204124:	00ab2023          	sw	a0,0(s6)
          return entry;
    80204128:	a821                	j	80204140 <lookup_path+0xbe>
        }
        if (!(entry->attribute & ATTR_DIRECTORY)) {
            eunlock(entry);
    8020412a:	854e                	mv	a0,s3
    8020412c:	00000097          	auipc	ra,0x0
    80204130:	87c080e7          	jalr	-1924(ra) # 802039a8 <eunlock>
            eput(entry);
    80204134:	854e                	mv	a0,s3
    80204136:	00000097          	auipc	ra,0x0
    8020413a:	8c0080e7          	jalr	-1856(ra) # 802039f6 <eput>
            return NULL;
    8020413e:	4981                	li	s3,0
    if (parent) {
        eput(entry);
        return NULL;
    }
    return entry;
}
    80204140:	854e                	mv	a0,s3
    80204142:	60e6                	ld	ra,88(sp)
    80204144:	6446                	ld	s0,80(sp)
    80204146:	64a6                	ld	s1,72(sp)
    80204148:	6906                	ld	s2,64(sp)
    8020414a:	79e2                	ld	s3,56(sp)
    8020414c:	7a42                	ld	s4,48(sp)
    8020414e:	7aa2                	ld	s5,40(sp)
    80204150:	7b02                	ld	s6,32(sp)
    80204152:	6be2                	ld	s7,24(sp)
    80204154:	6c42                	ld	s8,16(sp)
    80204156:	6ca2                	ld	s9,8(sp)
    80204158:	6d02                	ld	s10,0(sp)
    8020415a:	6125                	addi	sp,sp,96
    8020415c:	8082                	ret
            eunlock(entry);
    8020415e:	854e                	mv	a0,s3
    80204160:	00000097          	auipc	ra,0x0
    80204164:	848080e7          	jalr	-1976(ra) # 802039a8 <eunlock>
            return entry;
    80204168:	bfe1                	j	80204140 <lookup_path+0xbe>
            eunlock(entry);
    8020416a:	854e                	mv	a0,s3
    8020416c:	00000097          	auipc	ra,0x0
    80204170:	83c080e7          	jalr	-1988(ra) # 802039a8 <eunlock>
            eput(entry);
    80204174:	854e                	mv	a0,s3
    80204176:	00000097          	auipc	ra,0x0
    8020417a:	880080e7          	jalr	-1920(ra) # 802039f6 <eput>
            return NULL;
    8020417e:	89ca                	mv	s3,s2
    80204180:	b7c1                	j	80204140 <lookup_path+0xbe>
    int len = path - s;
    80204182:	412487bb          	subw	a5,s1,s2
    if (len > FAT32_MAX_FILENAME) {
    80204186:	863e                	mv	a2,a5
    80204188:	00fc5363          	bge	s8,a5,8020418e <lookup_path+0x10c>
    8020418c:	866a                	mv	a2,s10
    8020418e:	0006079b          	sext.w	a5,a2
    name[len] = 0;
    80204192:	97d6                	add	a5,a5,s5
    80204194:	00078023          	sb	zero,0(a5)
    memmove(name, s, len);
    80204198:	2601                	sext.w	a2,a2
    8020419a:	85ca                	mv	a1,s2
    8020419c:	8556                	mv	a0,s5
    8020419e:	ffffd097          	auipc	ra,0xffffd
    802041a2:	c36080e7          	jalr	-970(ra) # 80200dd4 <memmove>
    while (*path == '/') {
    802041a6:	0004c783          	lbu	a5,0(s1)
    802041aa:	01479763          	bne	a5,s4,802041b8 <lookup_path+0x136>
        path++;
    802041ae:	0485                	addi	s1,s1,1
    while (*path == '/') {
    802041b0:	0004c783          	lbu	a5,0(s1)
    802041b4:	ff478de3          	beq	a5,s4,802041ae <lookup_path+0x12c>
        elock(entry);
    802041b8:	854e                	mv	a0,s3
    802041ba:	fffff097          	auipc	ra,0xfffff
    802041be:	7b8080e7          	jalr	1976(ra) # 80203972 <elock>
        if(devno&&entry == dev){
    802041c2:	000b0663          	beqz	s6,802041ce <lookup_path+0x14c>
    802041c6:	000cb783          	ld	a5,0(s9)
    802041ca:	f53783e3          	beq	a5,s3,80204110 <lookup_path+0x8e>
        if (!(entry->attribute & ATTR_DIRECTORY)) {
    802041ce:	1009c783          	lbu	a5,256(s3)
    802041d2:	8bc1                	andi	a5,a5,16
    802041d4:	dbb9                	beqz	a5,8020412a <lookup_path+0xa8>
        if (parent && *path == '\0') {
    802041d6:	000b8563          	beqz	s7,802041e0 <lookup_path+0x15e>
    802041da:	0004c783          	lbu	a5,0(s1)
    802041de:	d3c1                	beqz	a5,8020415e <lookup_path+0xdc>
        if ((next = dirlookup(entry, name, 0)) == 0) {
    802041e0:	4601                	li	a2,0
    802041e2:	85d6                	mv	a1,s5
    802041e4:	854e                	mv	a0,s3
    802041e6:	00000097          	auipc	ra,0x0
    802041ea:	b72080e7          	jalr	-1166(ra) # 80203d58 <dirlookup>
    802041ee:	892a                	mv	s2,a0
    802041f0:	dd2d                	beqz	a0,8020416a <lookup_path+0xe8>
        eunlock(entry);
    802041f2:	854e                	mv	a0,s3
    802041f4:	fffff097          	auipc	ra,0xfffff
    802041f8:	7b4080e7          	jalr	1972(ra) # 802039a8 <eunlock>
        eput(entry);
    802041fc:	854e                	mv	a0,s3
    802041fe:	fffff097          	auipc	ra,0xfffff
    80204202:	7f8080e7          	jalr	2040(ra) # 802039f6 <eput>
        entry = next;
    80204206:	89ca                	mv	s3,s2
        eput(entry);
    80204208:	8926                	mv	s2,s1
    while (*path == '/') {
    8020420a:	00094783          	lbu	a5,0(s2)
    8020420e:	03479363          	bne	a5,s4,80204234 <lookup_path+0x1b2>
        path++;
    80204212:	0905                	addi	s2,s2,1
    while (*path == '/') {
    80204214:	00094783          	lbu	a5,0(s2)
    80204218:	ff478de3          	beq	a5,s4,80204212 <lookup_path+0x190>
    if (*path == 0) { return NULL; }
    8020421c:	cf89                	beqz	a5,80204236 <lookup_path+0x1b4>
        path++;
    8020421e:	84ca                	mv	s1,s2
    while (*path != '/' && *path != 0) {
    80204220:	f74781e3          	beq	a5,s4,80204182 <lookup_path+0x100>
        eput(entry);
    80204224:	84ca                	mv	s1,s2
    while (*path != '/' && *path != 0) {
    80204226:	dfb1                	beqz	a5,80204182 <lookup_path+0x100>
        path++;
    80204228:	0485                	addi	s1,s1,1
    while (*path != '/' && *path != 0) {
    8020422a:	0004c783          	lbu	a5,0(s1)
    8020422e:	ff479ce3          	bne	a5,s4,80204226 <lookup_path+0x1a4>
    80204232:	bf81                	j	80204182 <lookup_path+0x100>
    if (*path == 0) { return NULL; }
    80204234:	fbe5                	bnez	a5,80204224 <lookup_path+0x1a2>
    if (parent) {
    80204236:	f00b85e3          	beqz	s7,80204140 <lookup_path+0xbe>
        eput(entry);
    8020423a:	854e                	mv	a0,s3
    8020423c:	fffff097          	auipc	ra,0xfffff
    80204240:	7ba080e7          	jalr	1978(ra) # 802039f6 <eput>
        return NULL;
    80204244:	4981                	li	s3,0
    80204246:	bded                	j	80204140 <lookup_path+0xbe>

0000000080204248 <isdirempty>:

// Is the directory dp empty except for "." and ".." ?
int
isdirempty(struct dirent *dp)
{
    80204248:	7165                	addi	sp,sp,-400
    8020424a:	e706                	sd	ra,392(sp)
    8020424c:	e322                	sd	s0,384(sp)
    8020424e:	0b00                	addi	s0,sp,400
  struct dirent ep;
  int count;
  int ret;
  ep.valid = 0;
    80204250:	f8041b23          	sh	zero,-106(s0)
  ret = enext(dp, &ep, 2 * 32, &count);   // skip the "." and ".."
    80204254:	e7c40693          	addi	a3,s0,-388
    80204258:	04000613          	li	a2,64
    8020425c:	e8040593          	addi	a1,s0,-384
    80204260:	00000097          	auipc	ra,0x0
    80204264:	92a080e7          	jalr	-1750(ra) # 80203b8a <enext>
  return ret == -1;
    80204268:	0505                	addi	a0,a0,1
}
    8020426a:	00153513          	seqz	a0,a0
    8020426e:	60ba                	ld	ra,392(sp)
    80204270:	641a                	ld	s0,384(sp)
    80204272:	6159                	addi	sp,sp,400
    80204274:	8082                	ret

0000000080204276 <hashpath>:

int hashpath(char* name){
    80204276:	1141                	addi	sp,sp,-16
    80204278:	e422                	sd	s0,8(sp)
    8020427a:	0800                	addi	s0,sp,16
  int hashvalue = 0;
  for(int i = 0;name[i];i++){
    8020427c:	00054783          	lbu	a5,0(a0)
    80204280:	cf91                	beqz	a5,8020429c <hashpath+0x26>
    80204282:	872a                	mv	a4,a0
    80204284:	0007851b          	sext.w	a0,a5
    80204288:	0705                	addi	a4,a4,1
    hashvalue = hashvalue*128;
    hashvalue += name[i];
    if(hashvalue > NAME_HASH){
    8020428a:	000f46b7          	lui	a3,0xf4
    8020428e:	24068693          	addi	a3,a3,576 # f4240 <_entry-0x8010bdc0>
      hashvalue = hashvalue%NAME_HASH;
    80204292:	000f4637          	lui	a2,0xf4
    80204296:	2406061b          	addiw	a2,a2,576
    8020429a:	a031                	j	802042a6 <hashpath+0x30>
  int hashvalue = 0;
    8020429c:	4501                	li	a0,0
    }
  }
  return hashvalue;
}
    8020429e:	6422                	ld	s0,8(sp)
    802042a0:	0141                	addi	sp,sp,16
    802042a2:	8082                	ret
    802042a4:	0705                	addi	a4,a4,1
  for(int i = 0;name[i];i++){
    802042a6:	00074783          	lbu	a5,0(a4)
    802042aa:	dbf5                	beqz	a5,8020429e <hashpath+0x28>
    hashvalue = hashvalue*128;
    802042ac:	0075151b          	slliw	a0,a0,0x7
    hashvalue += name[i];
    802042b0:	9fa9                	addw	a5,a5,a0
    802042b2:	0007851b          	sext.w	a0,a5
    if(hashvalue > NAME_HASH){
    802042b6:	fea6d7e3          	bge	a3,a0,802042a4 <hashpath+0x2e>
      hashvalue = hashvalue%NAME_HASH;
    802042ba:	02c7e53b          	remw	a0,a5,a2
    802042be:	b7dd                	j	802042a4 <hashpath+0x2e>

00000000802042c0 <ekstat>:


void ekstat(struct dirent *de, struct kstat *st)
{
    802042c0:	1101                	addi	sp,sp,-32
    802042c2:	ec06                	sd	ra,24(sp)
    802042c4:	e822                	sd	s0,16(sp)
    802042c6:	e426                	sd	s1,8(sp)
    802042c8:	e04a                	sd	s2,0(sp)
    802042ca:	1000                	addi	s0,sp,32
    802042cc:	892a                	mv	s2,a0
    802042ce:	84ae                	mv	s1,a1
    struct fs *self_fs = &FatFs[de->dev];
    802042d0:	11454703          	lbu	a4,276(a0)
    st->st_dev = de->dev;
    802042d4:	e198                	sd	a4,0(a1)
    st->st_size = de->file_size;
    802042d6:	10856783          	lwu	a5,264(a0)
    802042da:	f99c                	sd	a5,48(a1)
    st->st_blksize = self_fs->fat.bpb.byts_per_sec;
    802042dc:	6695                	lui	a3,0x5
    802042de:	9b868693          	addi	a3,a3,-1608 # 49b8 <_entry-0x801fb648>
    802042e2:	02d706b3          	mul	a3,a4,a3
    802042e6:	00851717          	auipc	a4,0x851
    802042ea:	8ca70713          	addi	a4,a4,-1846 # 80a54bb0 <FatFs>
    802042ee:	9736                	add	a4,a4,a3
    802042f0:	02075683          	lhu	a3,32(a4)
    802042f4:	dd94                	sw	a3,56(a1)
    st->st_blocks = (st->st_size + st->st_blksize - 1) / st->st_blksize;
    802042f6:	97b6                	add	a5,a5,a3
    802042f8:	17fd                	addi	a5,a5,-1
    802042fa:	02d7c7b3          	div	a5,a5,a3
    802042fe:	e1bc                	sd	a5,64(a1)
    st->st_atime_nsec = 0;
    80204300:	0405b823          	sd	zero,80(a1)
    st->st_atime_sec = 0;
    80204304:	0405b423          	sd	zero,72(a1)
    st->st_ctime_nsec = 0;
    80204308:	0605b823          	sd	zero,112(a1)
    st->st_ctime_sec = 0;
    8020430c:	0605b423          	sd	zero,104(a1)
    st->st_mtime_nsec = 0;
    80204310:	0605b023          	sd	zero,96(a1)
    st->st_mtime_sec = 0;
    80204314:	0405bc23          	sd	zero,88(a1)
    st->st_uid = 0;
    80204318:	0005ac23          	sw	zero,24(a1)
    st->st_gid = 0;
    8020431c:	0005ae23          	sw	zero,28(a1)
    st->st_dev = self_fs->devno;
    80204320:	00076783          	lwu	a5,0(a4)
    80204324:	e19c                	sd	a5,0(a1)
    st->st_rdev = de->dev;
    80204326:	11454783          	lbu	a5,276(a0)
    8020432a:	f19c                	sd	a5,32(a1)
    st->st_nlink = 1;
    8020432c:	4785                	li	a5,1
    8020432e:	c9dc                	sw	a5,20(a1)
    st->st_ino = hashpath(de->filename);
    80204330:	00000097          	auipc	ra,0x0
    80204334:	f46080e7          	jalr	-186(ra) # 80204276 <hashpath>
    80204338:	e488                	sd	a0,8(s1)
    st->st_mode = 0;
    8020433a:	0004a823          	sw	zero,16(s1)
    st->st_mode = (de->attribute & ATTR_DIRECTORY) ? S_IFDIR : S_IFREG;
    8020433e:	10094703          	lbu	a4,256(s2)
    80204342:	8b41                	andi	a4,a4,16
    80204344:	6791                	lui	a5,0x4
    80204346:	e311                	bnez	a4,8020434a <ekstat+0x8a>
    80204348:	67a1                	lui	a5,0x8
    st->st_mode |= 0x1ff;
    8020434a:	1ff7e793          	ori	a5,a5,511
    8020434e:	c89c                	sw	a5,16(s1)
}
    80204350:	60e2                	ld	ra,24(sp)
    80204352:	6442                	ld	s0,16(sp)
    80204354:	64a2                	ld	s1,8(sp)
    80204356:	6902                	ld	s2,0(sp)
    80204358:	6105                	addi	sp,sp,32
    8020435a:	8082                	ret

000000008020435c <estatfs>:


void estatfs(struct dirent *de, struct statfs *st){
    8020435c:	1141                	addi	sp,sp,-16
    8020435e:	e422                	sd	s0,8(sp)
    80204360:	0800                	addi	s0,sp,16
    struct fs *self_fs = &FatFs[de->dev];
    80204362:	11454783          	lbu	a5,276(a0)
    st->f_type = 0;
    80204366:	0005b023          	sd	zero,0(a1)
    st->f_bsize = self_fs->fat.byts_per_clus;
    8020436a:	6715                	lui	a4,0x5
    8020436c:	9b870713          	addi	a4,a4,-1608 # 49b8 <_entry-0x801fb648>
    80204370:	02e78733          	mul	a4,a5,a4
    80204374:	00851797          	auipc	a5,0x851
    80204378:	83c78793          	addi	a5,a5,-1988 # 80a54bb0 <FatFs>
    8020437c:	97ba                	add	a5,a5,a4
    8020437e:	01c7e703          	lwu	a4,28(a5)
    80204382:	e598                	sd	a4,8(a1)
    st->f_blocks = self_fs->fat.data_clus_cnt;
    80204384:	0187e703          	lwu	a4,24(a5)
    80204388:	e998                	sd	a4,16(a1)
    st->f_bfree = self_fs->fat.bpb.rsvd_sec_cnt;
    8020438a:	0247d703          	lhu	a4,36(a5)
    8020438e:	ed98                	sd	a4,24(a1)
    st->f_bavail = self_fs->fat.bpb.rsvd_sec_cnt-self_fs->fat.bpb.hidd_sec;
    80204390:	0247d703          	lhu	a4,36(a5)
    80204394:	579c                	lw	a5,40(a5)
    80204396:	40f707bb          	subw	a5,a4,a5
    8020439a:	1782                	slli	a5,a5,0x20
    8020439c:	9381                	srli	a5,a5,0x20
    8020439e:	f19c                	sd	a5,32(a1)
    st->f_files = FILENUM(self_fs);
    802043a0:	47b5                	li	a5,13
    802043a2:	f59c                	sd	a5,40(a1)
    st->f_ffree = FILEFREE(self_fs);
    802043a4:	0205b823          	sd	zero,48(a1)
    st->f_namelen = FAT32_MAX_FILENAME;
    802043a8:	0ff00793          	li	a5,255
    802043ac:	e1bc                	sd	a5,64(a1)
}
    802043ae:	6422                	ld	s0,8(sp)
    802043b0:	0141                	addi	sp,sp,16
    802043b2:	8082                	ret

00000000802043b4 <ename>:

struct dirent *ename(struct dirent* env,char *path,int* devno)
{
    802043b4:	716d                	addi	sp,sp,-272
    802043b6:	e606                	sd	ra,264(sp)
    802043b8:	e222                	sd	s0,256(sp)
    802043ba:	0a00                	addi	s0,sp,272
    802043bc:	8732                	mv	a4,a2
    char name[FAT32_MAX_FILENAME + 1];
    return lookup_path(env,path, 0, name, devno);
    802043be:	ef040693          	addi	a3,s0,-272
    802043c2:	4601                	li	a2,0
    802043c4:	00000097          	auipc	ra,0x0
    802043c8:	cbe080e7          	jalr	-834(ra) # 80204082 <lookup_path>
}
    802043cc:	60b2                	ld	ra,264(sp)
    802043ce:	6412                	ld	s0,256(sp)
    802043d0:	6151                	addi	sp,sp,272
    802043d2:	8082                	ret

00000000802043d4 <enameparent>:

struct dirent *enameparent(struct dirent* env,char *path, char *name,int* devno)
{
    802043d4:	1141                	addi	sp,sp,-16
    802043d6:	e406                	sd	ra,8(sp)
    802043d8:	e022                	sd	s0,0(sp)
    802043da:	0800                	addi	s0,sp,16
    802043dc:	8736                	mv	a4,a3
    return lookup_path(env,path, 1, name, devno);
    802043de:	86b2                	mv	a3,a2
    802043e0:	4605                	li	a2,1
    802043e2:	00000097          	auipc	ra,0x0
    802043e6:	ca0080e7          	jalr	-864(ra) # 80204082 <lookup_path>
}
    802043ea:	60a2                	ld	ra,8(sp)
    802043ec:	6402                	ld	s0,0(sp)
    802043ee:	0141                	addi	sp,sp,16
    802043f0:	8082                	ret

00000000802043f2 <emount>:

int emount(struct fs* fatfs,char* mnt){
    802043f2:	1101                	addi	sp,sp,-32
    802043f4:	ec06                	sd	ra,24(sp)
    802043f6:	e822                	sd	s0,16(sp)
    802043f8:	e426                	sd	s1,8(sp)
    802043fa:	1000                	addi	s0,sp,32
    802043fc:	84aa                	mv	s1,a0
    struct dirent* mntpoint = ename(NULL,mnt,0);
    802043fe:	4601                	li	a2,0
    80204400:	4501                	li	a0,0
    80204402:	00000097          	auipc	ra,0x0
    80204406:	fb2080e7          	jalr	-78(ra) # 802043b4 <ename>
    if(mntpoint == NULL||!(mntpoint->attribute&ATTR_DIRECTORY))return -1; 
    8020440a:	c90d                	beqz	a0,8020443c <emount+0x4a>
    8020440c:	10054783          	lbu	a5,256(a0)
    80204410:	8bc1                	andi	a5,a5,16
    80204412:	c79d                	beqz	a5,80204440 <emount+0x4e>
    mntpoint = edup(mntpoint);
    80204414:	fffff097          	auipc	ra,0xfffff
    80204418:	290080e7          	jalr	656(ra) # 802036a4 <edup>
    mntpoint->mnt = 1;
    8020441c:	4785                	li	a5,1
    8020441e:	10f52e23          	sw	a5,284(a0)
    mntpoint->dev = fatfs->devno;
    80204422:	409c                	lw	a5,0(s1)
    80204424:	10f50a23          	sb	a5,276(a0)
    fatfs->root.parent = mntpoint;
    80204428:	6795                	lui	a5,0x5
    8020442a:	94be                	add	s1,s1,a5
    8020442c:	94a4bc23          	sd	a0,-1704(s1)
    return 0;
    80204430:	4501                	li	a0,0
}
    80204432:	60e2                	ld	ra,24(sp)
    80204434:	6442                	ld	s0,16(sp)
    80204436:	64a2                	ld	s1,8(sp)
    80204438:	6105                	addi	sp,sp,32
    8020443a:	8082                	ret
    if(mntpoint == NULL||!(mntpoint->attribute&ATTR_DIRECTORY))return -1; 
    8020443c:	557d                	li	a0,-1
    8020443e:	bfd5                	j	80204432 <emount+0x40>
    80204440:	557d                	li	a0,-1
    80204442:	bfc5                	j	80204432 <emount+0x40>

0000000080204444 <eumount>:

int eumount(char* mnt){
    80204444:	1101                	addi	sp,sp,-32
    80204446:	ec06                	sd	ra,24(sp)
    80204448:	e822                	sd	s0,16(sp)
    8020444a:	e426                	sd	s1,8(sp)
    8020444c:	1000                	addi	s0,sp,32
    8020444e:	85aa                	mv	a1,a0
    struct dirent* mntpoint = ename(NULL,mnt,0);
    80204450:	4601                	li	a2,0
    80204452:	4501                	li	a0,0
    80204454:	00000097          	auipc	ra,0x0
    80204458:	f60080e7          	jalr	-160(ra) # 802043b4 <ename>
    if(mntpoint == NULL)return -1; 
    8020445c:	c939                	beqz	a0,802044b2 <eumount+0x6e>
    8020445e:	84aa                	mv	s1,a0
    if(mntpoint->mnt) mntpoint->mnt=0;
    80204460:	11c52783          	lw	a5,284(a0)
    80204464:	c399                	beqz	a5,8020446a <eumount+0x26>
    80204466:	10052e23          	sw	zero,284(a0)
    if(FatFs[mntpoint->dev].image)eput(FatFs[mntpoint->dev].image);
    8020446a:	1144c783          	lbu	a5,276(s1)
    8020446e:	6715                	lui	a4,0x5
    80204470:	9b870713          	addi	a4,a4,-1608 # 49b8 <_entry-0x801fb648>
    80204474:	02e78733          	mul	a4,a5,a4
    80204478:	00850797          	auipc	a5,0x850
    8020447c:	73878793          	addi	a5,a5,1848 # 80a54bb0 <FatFs>
    80204480:	97ba                	add	a5,a5,a4
    80204482:	6788                	ld	a0,8(a5)
    80204484:	c509                	beqz	a0,8020448e <eumount+0x4a>
    80204486:	fffff097          	auipc	ra,0xfffff
    8020448a:	570080e7          	jalr	1392(ra) # 802039f6 <eput>
    if(mntpoint->parent)mntpoint->dev = mntpoint->parent->dev;
    8020448e:	1284b783          	ld	a5,296(s1)
    80204492:	c789                	beqz	a5,8020449c <eumount+0x58>
    80204494:	1147c783          	lbu	a5,276(a5)
    80204498:	10f48a23          	sb	a5,276(s1)
    eput(mntpoint);
    8020449c:	8526                	mv	a0,s1
    8020449e:	fffff097          	auipc	ra,0xfffff
    802044a2:	558080e7          	jalr	1368(ra) # 802039f6 <eput>
    return 0;
    802044a6:	4501                	li	a0,0
}
    802044a8:	60e2                	ld	ra,24(sp)
    802044aa:	6442                	ld	s0,16(sp)
    802044ac:	64a2                	ld	s1,8(sp)
    802044ae:	6105                	addi	sp,sp,32
    802044b0:	8082                	ret
    if(mntpoint == NULL)return -1; 
    802044b2:	557d                	li	a0,-1
    802044b4:	bfd5                	j	802044a8 <eumount+0x64>

00000000802044b6 <create>:
}


struct dirent*
create(struct dirent* env, char *path, short type, int mode, int *err)
{
    802044b6:	dc010113          	addi	sp,sp,-576
    802044ba:	22113c23          	sd	ra,568(sp)
    802044be:	22813823          	sd	s0,560(sp)
    802044c2:	22913423          	sd	s1,552(sp)
    802044c6:	23213023          	sd	s2,544(sp)
    802044ca:	21313c23          	sd	s3,536(sp)
    802044ce:	21413823          	sd	s4,528(sp)
    802044d2:	21513423          	sd	s5,520(sp)
    802044d6:	21613023          	sd	s6,512(sp)
    802044da:	0480                	addi	s0,sp,576
    802044dc:	8aaa                	mv	s5,a0
    802044de:	8a2e                	mv	s4,a1
    802044e0:	8932                	mv	s2,a2
    802044e2:	8b3a                	mv	s6,a4
  if (type == T_DIR) {
    mode = ATTR_DIRECTORY;
  } else if (mode & O_RDONLY) {
    mode = ATTR_READ_ONLY;
  } else {
    mode = 0;  
    802044e4:	fff60993          	addi	s3,a2,-1 # f3fff <_entry-0x8010c001>
    802044e8:	0019b993          	seqz	s3,s3
    802044ec:	0992                	slli	s3,s3,0x4
  }

  if((dp = enameparent(env, path, name, 0)) == NULL)
    802044ee:	4681                	li	a3,0
    802044f0:	ec040613          	addi	a2,s0,-320
    802044f4:	00000097          	auipc	ra,0x0
    802044f8:	ee0080e7          	jalr	-288(ra) # 802043d4 <enameparent>
    802044fc:	c541                	beqz	a0,80204584 <create+0xce>
    802044fe:	84aa                	mv	s1,a0
      return NULL;
    } 
  }
  else
  {
    elock(dp);
    80204500:	fffff097          	auipc	ra,0xfffff
    80204504:	472080e7          	jalr	1138(ra) # 80203972 <elock>
  }
  
  if ((ep = ealloc(dp, name, mode)) == NULL) {
    80204508:	864e                	mv	a2,s3
    8020450a:	ec040593          	addi	a1,s0,-320
    8020450e:	8526                	mv	a0,s1
    80204510:	00000097          	auipc	ra,0x0
    80204514:	9ee080e7          	jalr	-1554(ra) # 80203efe <ealloc>
    80204518:	89aa                	mv	s3,a0
    8020451a:	14050663          	beqz	a0,80204666 <create+0x1b0>
    eput(dp);
    *err = -EINVAL;
    return NULL;
  }
  
  if ((type == T_DIR && !(ep->attribute & ATTR_DIRECTORY)) ||
    8020451e:	0009079b          	sext.w	a5,s2
    80204522:	4705                	li	a4,1
    80204524:	14e78f63          	beq	a5,a4,80204682 <create+0x1cc>
    80204528:	2901                	sext.w	s2,s2
    8020452a:	4789                	li	a5,2
    8020452c:	00f91763          	bne	s2,a5,8020453a <create+0x84>
      (type == T_FILE && (ep->attribute & ATTR_DIRECTORY))) {
    80204530:	10054783          	lbu	a5,256(a0)
    80204534:	8bc1                	andi	a5,a5,16
    80204536:	14079b63          	bnez	a5,8020468c <create+0x1d6>
    eput(dp);
    *err = -EINVAL;
    return NULL;
  }

  eunlock(dp);
    8020453a:	8526                	mv	a0,s1
    8020453c:	fffff097          	auipc	ra,0xfffff
    80204540:	46c080e7          	jalr	1132(ra) # 802039a8 <eunlock>
  eput(dp);
    80204544:	8526                	mv	a0,s1
    80204546:	fffff097          	auipc	ra,0xfffff
    8020454a:	4b0080e7          	jalr	1200(ra) # 802039f6 <eput>
  elock(ep);
    8020454e:	854e                	mv	a0,s3
    80204550:	fffff097          	auipc	ra,0xfffff
    80204554:	422080e7          	jalr	1058(ra) # 80203972 <elock>
  *err = 0;
    80204558:	000b2023          	sw	zero,0(s6)
  return ep;
}
    8020455c:	854e                	mv	a0,s3
    8020455e:	23813083          	ld	ra,568(sp)
    80204562:	23013403          	ld	s0,560(sp)
    80204566:	22813483          	ld	s1,552(sp)
    8020456a:	22013903          	ld	s2,544(sp)
    8020456e:	21813983          	ld	s3,536(sp)
    80204572:	21013a03          	ld	s4,528(sp)
    80204576:	20813a83          	ld	s5,520(sp)
    8020457a:	20013b03          	ld	s6,512(sp)
    8020457e:	24010113          	addi	sp,sp,576
    80204582:	8082                	ret
  int len = strlen(path);
    80204584:	8552                	mv	a0,s4
    80204586:	ffffd097          	auipc	ra,0xffffd
    8020458a:	976080e7          	jalr	-1674(ra) # 80200efc <strlen>
    8020458e:	84aa                	mv	s1,a0
  strncpy(pname, path, len + 1);
    80204590:	0015061b          	addiw	a2,a0,1
    80204594:	85d2                	mv	a1,s4
    80204596:	dc040513          	addi	a0,s0,-576
    8020459a:	ffffd097          	auipc	ra,0xffffd
    8020459e:	8f2080e7          	jalr	-1806(ra) # 80200e8c <strncpy>
  int i = len - 1;
    802045a2:	fff4871b          	addiw	a4,s1,-1
  if(pname[i] == '/' && i == 0)		// root dir
    802045a6:	fc040793          	addi	a5,s0,-64
    802045aa:	97ba                	add	a5,a5,a4
    802045ac:	e007c683          	lbu	a3,-512(a5)
    802045b0:	02f00793          	li	a5,47
    802045b4:	02f68863          	beq	a3,a5,802045e4 <create+0x12e>
  for(; i >= 0; --i)
    802045b8:	06074363          	bltz	a4,8020461e <create+0x168>
    802045bc:	dc040793          	addi	a5,s0,-576
    802045c0:	97ba                	add	a5,a5,a4
    802045c2:	dbf40693          	addi	a3,s0,-577
    802045c6:	96ba                	add	a3,a3,a4
    802045c8:	1702                	slli	a4,a4,0x20
    802045ca:	9301                	srli	a4,a4,0x20
    802045cc:	40e68733          	sub	a4,a3,a4
    if(pname[i] == '/')
    802045d0:	02f00613          	li	a2,47
    802045d4:	0007c683          	lbu	a3,0(a5)
    802045d8:	04c68163          	beq	a3,a2,8020461a <create+0x164>
  for(; i >= 0; --i)
    802045dc:	17fd                	addi	a5,a5,-1
    802045de:	fee79be3          	bne	a5,a4,802045d4 <create+0x11e>
    802045e2:	a835                	j	8020461e <create+0x168>
  if(pname[i] == '/' && i == 0)		// root dir
    802045e4:	c701                	beqz	a4,802045ec <create+0x136>
    i--;
    802045e6:	ffe4871b          	addiw	a4,s1,-2
    802045ea:	b7f9                	j	802045b8 <create+0x102>
    pname[0] = 0;
    802045ec:	dc040023          	sb	zero,-576(s0)
      *err = -EEXIST;
    802045f0:	57bd                	li	a5,-17
    802045f2:	00fb2023          	sw	a5,0(s6)
      elock(&rootfs->root);
    802045f6:	00867917          	auipc	s2,0x867
    802045fa:	65a90913          	addi	s2,s2,1626 # 80a6bc50 <rootfs>
    802045fe:	00093503          	ld	a0,0(s2)
    80204602:	6995                	lui	s3,0x5
    80204604:	83098493          	addi	s1,s3,-2000 # 4830 <_entry-0x801fb7d0>
    80204608:	9526                	add	a0,a0,s1
    8020460a:	fffff097          	auipc	ra,0xfffff
    8020460e:	368080e7          	jalr	872(ra) # 80203972 <elock>
      return &rootfs->root;
    80204612:	00093983          	ld	s3,0(s2)
    80204616:	99a6                	add	s3,s3,s1
    80204618:	b791                	j	8020455c <create+0xa6>
      pname[i] = 0;
    8020461a:	00078023          	sb	zero,0(a5)
  int len2 = strlen(pname);
    8020461e:	dc040513          	addi	a0,s0,-576
    80204622:	ffffd097          	auipc	ra,0xffffd
    80204626:	8da080e7          	jalr	-1830(ra) # 80200efc <strlen>
  strncpy(name, path + len2 + 1, len - len2 + 1);
    8020462a:	40a4863b          	subw	a2,s1,a0
    8020462e:	00150593          	addi	a1,a0,1
    80204632:	2605                	addiw	a2,a2,1
    80204634:	95d2                	add	a1,a1,s4
    80204636:	ec040513          	addi	a0,s0,-320
    8020463a:	ffffd097          	auipc	ra,0xffffd
    8020463e:	852080e7          	jalr	-1966(ra) # 80200e8c <strncpy>
    if(pname[0] == 0)
    80204642:	dc044783          	lbu	a5,-576(s0)
    80204646:	d7cd                	beqz	a5,802045f0 <create+0x13a>
    dp = create(env, pname, T_DIR, O_RDWR, err);
    80204648:	875a                	mv	a4,s6
    8020464a:	4689                	li	a3,2
    8020464c:	4605                	li	a2,1
    8020464e:	dc040593          	addi	a1,s0,-576
    80204652:	8556                	mv	a0,s5
    80204654:	00000097          	auipc	ra,0x0
    80204658:	e62080e7          	jalr	-414(ra) # 802044b6 <create>
    8020465c:	84aa                	mv	s1,a0
    if(dp == NULL)
    8020465e:	ea0515e3          	bnez	a0,80204508 <create+0x52>
      return NULL;
    80204662:	89aa                	mv	s3,a0
    80204664:	bde5                	j	8020455c <create+0xa6>
    eunlock(dp);
    80204666:	8526                	mv	a0,s1
    80204668:	fffff097          	auipc	ra,0xfffff
    8020466c:	340080e7          	jalr	832(ra) # 802039a8 <eunlock>
    eput(dp);
    80204670:	8526                	mv	a0,s1
    80204672:	fffff097          	auipc	ra,0xfffff
    80204676:	384080e7          	jalr	900(ra) # 802039f6 <eput>
    *err = -EINVAL;
    8020467a:	57a9                	li	a5,-22
    8020467c:	00fb2023          	sw	a5,0(s6)
    return NULL;
    80204680:	bdf1                	j	8020455c <create+0xa6>
  if ((type == T_DIR && !(ep->attribute & ATTR_DIRECTORY)) ||
    80204682:	10054783          	lbu	a5,256(a0)
    80204686:	8bc1                	andi	a5,a5,16
    80204688:	ea0799e3          	bnez	a5,8020453a <create+0x84>
    eunlock(dp);
    8020468c:	8526                	mv	a0,s1
    8020468e:	fffff097          	auipc	ra,0xfffff
    80204692:	31a080e7          	jalr	794(ra) # 802039a8 <eunlock>
    eput(ep);
    80204696:	854e                	mv	a0,s3
    80204698:	fffff097          	auipc	ra,0xfffff
    8020469c:	35e080e7          	jalr	862(ra) # 802039f6 <eput>
    eput(dp);
    802046a0:	8526                	mv	a0,s1
    802046a2:	fffff097          	auipc	ra,0xfffff
    802046a6:	354080e7          	jalr	852(ra) # 802039f6 <eput>
    *err = -EINVAL;
    802046aa:	57a9                	li	a5,-22
    802046ac:	00fb2023          	sw	a5,0(s6)
    return NULL;
    802046b0:	4981                	li	s3,0
    802046b2:	b56d                	j	8020455c <create+0xa6>

00000000802046b4 <pipepoll>:
}


static
uint32 pipepoll(struct file *fp, struct poll_table *pt)
{
    802046b4:	7179                	addi	sp,sp,-48
    802046b6:	f406                	sd	ra,40(sp)
    802046b8:	f022                	sd	s0,32(sp)
    802046ba:	ec26                	sd	s1,24(sp)
    802046bc:	e84a                	sd	s2,16(sp)
    802046be:	e44e                	sd	s3,8(sp)
    802046c0:	1800                	addi	s0,sp,48
    802046c2:	84aa                	mv	s1,a0
    802046c4:	892e                	mv	s2,a1
	uint32 mask = 0;
	struct pipe *pi = fp->pipe;
    802046c6:	01053983          	ld	s3,16(a0)
	__debug_info("pipepoll", "r/w=%d/%d | ro/wo=%d/%d | rq/wq=%d/%d rn/wn=%d/%d\n",
				fp->readable, fp->writable, pi->readopen, pi->writeopen,
				!wait_queue_empty(&pi->rqueue), !wait_queue_empty(&pi->wqueue),
				pi->nread, pi->nwrite);
*/
	if (fp->readable)
    802046ca:	00854783          	lbu	a5,8(a0)
    802046ce:	c3d9                	beqz	a5,80204754 <pipepoll+0xa0>


static inline void
poll_wait(struct file * fp, struct wait_queue *wq, struct poll_table *pt)
{
	if (pt && pt->func && wq)
    802046d0:	c5cd                	beqz	a1,8020477a <pipepoll+0xc6>
    802046d2:	619c                	ld	a5,0(a1)
    802046d4:	cfa5                	beqz	a5,8020474c <pipepoll+0x98>
		pt->func(fp, wq, pt);
    802046d6:	862e                	mv	a2,a1
    802046d8:	04098593          	addi	a1,s3,64
    802046dc:	9782                	jalr	a5
		poll_wait(fp, &pi->rqueue, pt);
	if (fp->writable)
    802046de:	0094c783          	lbu	a5,9(s1)
    802046e2:	c781                	beqz	a5,802046ea <pipepoll+0x36>
		poll_wait(fp, &pi->wqueue, pt);
    802046e4:	01898593          	addi	a1,s3,24
	if (pt && pt->func && wq)
    802046e8:	a8b5                	j	80204764 <pipepoll+0xb0>

	if (fp->readable) {
    802046ea:	0084c783          	lbu	a5,8(s1)
	uint32 mask = 0;
    802046ee:	4501                	li	a0,0
	if (fp->readable) {
    802046f0:	c7b9                	beqz	a5,8020473e <pipepoll+0x8a>
		if (pi->nwrite - pi->nread > 0)			// has something to read
    802046f2:	06c9a503          	lw	a0,108(s3)
    802046f6:	0689a783          	lw	a5,104(s3)
    802046fa:	8d1d                	sub	a0,a0,a5
    802046fc:	00a037b3          	snez	a5,a0
	uint32 mask = 0;
    80204700:	00a03533          	snez	a0,a0
			mask |= POLLIN;
		if (!pi->writeopen) {
    80204704:	0719c703          	lbu	a4,113(s3)
    80204708:	e701                	bnez	a4,80204710 <pipepoll+0x5c>
			// if (pi->nwrite - pi->nread == 0)
			// 	mask |= POLLPRI;
			// else
				mask |= POLLHUP;
    8020470a:	0107e513          	ori	a0,a5,16
    8020470e:	2501                	sext.w	a0,a0
		}
	}

	if (fp->writable) {
    80204710:	0094c783          	lbu	a5,9(s1)
    80204714:	c78d                	beqz	a5,8020473e <pipepoll+0x8a>
		if (pi->nwrite - pi->nread < PIPESIZE(pi))	// has room to write
    80204716:	06c9a703          	lw	a4,108(s3)
    8020471a:	0689a783          	lw	a5,104(s3)
    8020471e:	0739c683          	lbu	a3,115(s3)
    80204722:	9f1d                	subw	a4,a4,a5
    80204724:	20000793          	li	a5,512
    80204728:	00d797bb          	sllw	a5,a5,a3
    8020472c:	00f77463          	bgeu	a4,a5,80204734 <pipepoll+0x80>
			mask |= POLLOUT;
    80204730:	00456513          	ori	a0,a0,4
		if (!pi->readopen)
    80204734:	0709c783          	lbu	a5,112(s3)
    80204738:	e399                	bnez	a5,8020473e <pipepoll+0x8a>
			mask |= POLLERR;
    8020473a:	00856513          	ori	a0,a0,8
	}

	return mask;
}
    8020473e:	70a2                	ld	ra,40(sp)
    80204740:	7402                	ld	s0,32(sp)
    80204742:	64e2                	ld	s1,24(sp)
    80204744:	6942                	ld	s2,16(sp)
    80204746:	69a2                	ld	s3,8(sp)
    80204748:	6145                	addi	sp,sp,48
    8020474a:	8082                	ret
	if (fp->writable)
    8020474c:	00954783          	lbu	a5,9(a0)
    80204750:	fbd1                	bnez	a5,802046e4 <pipepoll+0x30>
    80204752:	b745                	j	802046f2 <pipepoll+0x3e>
    80204754:	00954783          	lbu	a5,9(a0)
	uint32 mask = 0;
    80204758:	4501                	li	a0,0
	if (fp->writable)
    8020475a:	d3f5                	beqz	a5,8020473e <pipepoll+0x8a>
    8020475c:	02090263          	beqz	s2,80204780 <pipepoll+0xcc>
		poll_wait(fp, &pi->wqueue, pt);
    80204760:	01898593          	addi	a1,s3,24
    80204764:	00093783          	ld	a5,0(s2)
    80204768:	cf81                	beqz	a5,80204780 <pipepoll+0xcc>
		pt->func(fp, wq, pt);
    8020476a:	864a                	mv	a2,s2
    8020476c:	8526                	mv	a0,s1
    8020476e:	9782                	jalr	a5
	if (fp->readable) {
    80204770:	0084c783          	lbu	a5,8(s1)
	uint32 mask = 0;
    80204774:	4501                	li	a0,0
	if (fp->readable) {
    80204776:	dfc9                	beqz	a5,80204710 <pipepoll+0x5c>
    80204778:	bfad                	j	802046f2 <pipepoll+0x3e>
	if (fp->writable)
    8020477a:	00954783          	lbu	a5,9(a0)
    8020477e:	d7b5                	beqz	a5,802046ea <pipepoll+0x36>
	if (fp->readable) {
    80204780:	0084c783          	lbu	a5,8(s1)
	uint32 mask = 0;
    80204784:	4501                	li	a0,0
	if (fp->readable) {
    80204786:	dbc1                	beqz	a5,80204716 <pipepoll+0x62>
    80204788:	b7ad                	j	802046f2 <pipepoll+0x3e>

000000008020478a <pipewakeup>:
{
    8020478a:	1101                	addi	sp,sp,-32
    8020478c:	ec06                	sd	ra,24(sp)
    8020478e:	e822                	sd	s0,16(sp)
    80204790:	e426                	sd	s1,8(sp)
    80204792:	e04a                	sd	s2,0(sp)
    80204794:	1000                	addi	s0,sp,32
	queue = (who == PIPE_READER) ? &pi->rqueue : &pi->wqueue;
    80204796:	01850493          	addi	s1,a0,24
    8020479a:	e199                	bnez	a1,802047a0 <pipewakeup+0x16>
    8020479c:	04050493          	addi	s1,a0,64
	acquire(&queue->lock);
    802047a0:	8926                	mv	s2,s1
    802047a2:	8526                	mv	a0,s1
    802047a4:	00004097          	auipc	ra,0x4
    802047a8:	bd2080e7          	jalr	-1070(ra) # 80208376 <acquire>
	return head->next == head;
    802047ac:	709c                	ld	a5,32(s1)
	initlock(&wq->lock, str);
	list_init(&wq->head);
}

static inline int wait_queue_empty(struct wait_queue *wq) {
	return list_empty(&wq->head);
    802047ae:	04e1                	addi	s1,s1,24
	if (!wait_queue_empty(queue)) {
    802047b0:	00978863          	beq	a5,s1,802047c0 <pipewakeup+0x36>
		wakeup(wno->chan);
    802047b4:	ff87b503          	ld	a0,-8(a5)
    802047b8:	ffffd097          	auipc	ra,0xffffd
    802047bc:	574080e7          	jalr	1396(ra) # 80201d2c <wakeup>
	release(&queue->lock);
    802047c0:	854a                	mv	a0,s2
    802047c2:	00004097          	auipc	ra,0x4
    802047c6:	c08080e7          	jalr	-1016(ra) # 802083ca <release>
}
    802047ca:	60e2                	ld	ra,24(sp)
    802047cc:	6442                	ld	s0,16(sp)
    802047ce:	64a2                	ld	s1,8(sp)
    802047d0:	6902                	ld	s2,0(sp)
    802047d2:	6105                	addi	sp,sp,32
    802047d4:	8082                	ret

00000000802047d6 <pipelock>:
{
    802047d6:	7179                	addi	sp,sp,-48
    802047d8:	f406                	sd	ra,40(sp)
    802047da:	f022                	sd	s0,32(sp)
    802047dc:	ec26                	sd	s1,24(sp)
    802047de:	e84a                	sd	s2,16(sp)
    802047e0:	e44e                	sd	s3,8(sp)
    802047e2:	e052                	sd	s4,0(sp)
    802047e4:	1800                	addi	s0,sp,48
    802047e6:	892e                	mv	s2,a1
	q = (who == PIPE_READER) ? &pi->rqueue : &pi->wqueue;
    802047e8:	01850493          	addi	s1,a0,24
    802047ec:	e219                	bnez	a2,802047f2 <pipelock+0x1c>
    802047ee:	04050493          	addi	s1,a0,64
	acquire(&q->lock);
    802047f2:	8a26                	mv	s4,s1
    802047f4:	8526                	mv	a0,s1
    802047f6:	00004097          	auipc	ra,0x4
    802047fa:	b80080e7          	jalr	-1152(ra) # 80208376 <acquire>
	return wq->head.next == &node->list;
}

// This goes without locking. Add node to the last.
static inline void wait_queue_add(struct wait_queue *wq, struct wait_node *node) {
	list_add_before(&wq->head, &node->list);
    802047fe:	00890993          	addi	s3,s2,8
	__list_insert(node, beforeme->prev, beforeme);
    80204802:	6c9c                	ld	a5,24(s1)
	prev->next = next->prev = node;
    80204804:	0134bc23          	sd	s3,24(s1)
    80204808:	0137b423          	sd	s3,8(a5)
    8020480c:	01848713          	addi	a4,s1,24
	node->next = next;
    80204810:	00e93823          	sd	a4,16(s2)
	node->prev = prev;
    80204814:	00f93423          	sd	a5,8(s2)
	while (!wait_queue_is_first(q, wait)) {
    80204818:	709c                	ld	a5,32(s1)
    8020481a:	00f98c63          	beq	s3,a5,80204832 <pipelock+0x5c>
		sleep(wait->chan, &q->lock);
    8020481e:	85d2                	mv	a1,s4
    80204820:	00093503          	ld	a0,0(s2)
    80204824:	ffffd097          	auipc	ra,0xffffd
    80204828:	3fe080e7          	jalr	1022(ra) # 80201c22 <sleep>
	while (!wait_queue_is_first(q, wait)) {
    8020482c:	709c                	ld	a5,32(s1)
    8020482e:	fef998e3          	bne	s3,a5,8020481e <pipelock+0x48>
	release(&q->lock);
    80204832:	8552                	mv	a0,s4
    80204834:	00004097          	auipc	ra,0x4
    80204838:	b96080e7          	jalr	-1130(ra) # 802083ca <release>
}
    8020483c:	70a2                	ld	ra,40(sp)
    8020483e:	7402                	ld	s0,32(sp)
    80204840:	64e2                	ld	s1,24(sp)
    80204842:	6942                	ld	s2,16(sp)
    80204844:	69a2                	ld	s3,8(sp)
    80204846:	6a02                	ld	s4,0(sp)
    80204848:	6145                	addi	sp,sp,48
    8020484a:	8082                	ret

000000008020484c <pipewritable>:
{
    8020484c:	7139                	addi	sp,sp,-64
    8020484e:	fc06                	sd	ra,56(sp)
    80204850:	f822                	sd	s0,48(sp)
    80204852:	f426                	sd	s1,40(sp)
    80204854:	f04a                	sd	s2,32(sp)
    80204856:	ec4e                	sd	s3,24(sp)
    80204858:	e852                	sd	s4,16(sp)
    8020485a:	e456                	sd	s5,8(sp)
    8020485c:	e05a                	sd	s6,0(sp)
    8020485e:	0080                	addi	s0,sp,64
    80204860:	84aa                	mv	s1,a0
	struct proc *pr = myproc();
    80204862:	00007097          	auipc	ra,0x7
    80204866:	bea080e7          	jalr	-1046(ra) # 8020b44c <myproc>
    8020486a:	89aa                	mv	s3,a0
	return container_of(wq->head.next, struct wait_node, list);
    8020486c:	0384ba83          	ld	s5,56(s1)
	acquire(&pi->lock);
    80204870:	8526                	mv	a0,s1
    80204872:	00004097          	auipc	ra,0x4
    80204876:	b04080e7          	jalr	-1276(ra) # 80208376 <acquire>
	pi->writing = 1;
    8020487a:	4785                	li	a5,1
    8020487c:	06f48923          	sb	a5,114(s1)
	while ((m = pi->nwrite - pi->nread) == PIPESIZE(pi)) {		// pipe is full
    80204880:	06c4a903          	lw	s2,108(s1)
    80204884:	54bc                	lw	a5,104(s1)
    80204886:	40f9093b          	subw	s2,s2,a5
    8020488a:	0734c703          	lbu	a4,115(s1)
    8020488e:	20000793          	li	a5,512
    80204892:	00e797bb          	sllw	a5,a5,a4
    80204896:	05279763          	bne	a5,s2,802048e4 <pipewritable+0x98>
    8020489a:	8a26                	mv	s4,s1
    8020489c:	20000b13          	li	s6,512
		if (pr->killed) {
    802048a0:	0389a783          	lw	a5,56(s3)
    802048a4:	ef8d                	bnez	a5,802048de <pipewritable+0x92>
		if (pi->readopen == 0) {
    802048a6:	0704c783          	lbu	a5,112(s1)
    802048aa:	cfa9                	beqz	a5,80204904 <pipewritable+0xb8>
		pipewakeup(pi, PIPE_READER);
    802048ac:	4581                	li	a1,0
    802048ae:	8526                	mv	a0,s1
    802048b0:	00000097          	auipc	ra,0x0
    802048b4:	eda080e7          	jalr	-294(ra) # 8020478a <pipewakeup>
		sleep(wait->chan, &pi->lock);
    802048b8:	85d2                	mv	a1,s4
    802048ba:	ff8ab503          	ld	a0,-8(s5)
    802048be:	ffffd097          	auipc	ra,0xffffd
    802048c2:	364080e7          	jalr	868(ra) # 80201c22 <sleep>
	while ((m = pi->nwrite - pi->nread) == PIPESIZE(pi)) {		// pipe is full
    802048c6:	06c4a903          	lw	s2,108(s1)
    802048ca:	54bc                	lw	a5,104(s1)
    802048cc:	40f9093b          	subw	s2,s2,a5
    802048d0:	0734c783          	lbu	a5,115(s1)
    802048d4:	00fb17bb          	sllw	a5,s6,a5
    802048d8:	fd2784e3          	beq	a5,s2,802048a0 <pipewritable+0x54>
    802048dc:	a021                	j	802048e4 <pipewritable+0x98>
			pi->writing = 0;
    802048de:	06048923          	sb	zero,114(s1)
			m = -EINTR;
    802048e2:	5971                	li	s2,-4
	release(&pi->lock);
    802048e4:	8526                	mv	a0,s1
    802048e6:	00004097          	auipc	ra,0x4
    802048ea:	ae4080e7          	jalr	-1308(ra) # 802083ca <release>
}
    802048ee:	854a                	mv	a0,s2
    802048f0:	70e2                	ld	ra,56(sp)
    802048f2:	7442                	ld	s0,48(sp)
    802048f4:	74a2                	ld	s1,40(sp)
    802048f6:	7902                	ld	s2,32(sp)
    802048f8:	69e2                	ld	s3,24(sp)
    802048fa:	6a42                	ld	s4,16(sp)
    802048fc:	6aa2                	ld	s5,8(sp)
    802048fe:	6b02                	ld	s6,0(sp)
    80204900:	6121                	addi	sp,sp,64
    80204902:	8082                	ret
			pi->writing = 0;
    80204904:	06048923          	sb	zero,114(s1)
			m = -EPIPE;
    80204908:	5901                	li	s2,-32
			break;
    8020490a:	bfe9                	j	802048e4 <pipewritable+0x98>

000000008020490c <pipereadable>:
{
    8020490c:	7139                	addi	sp,sp,-64
    8020490e:	fc06                	sd	ra,56(sp)
    80204910:	f822                	sd	s0,48(sp)
    80204912:	f426                	sd	s1,40(sp)
    80204914:	f04a                	sd	s2,32(sp)
    80204916:	ec4e                	sd	s3,24(sp)
    80204918:	e852                	sd	s4,16(sp)
    8020491a:	e456                	sd	s5,8(sp)
    8020491c:	e05a                	sd	s6,0(sp)
    8020491e:	0080                	addi	s0,sp,64
    80204920:	84aa                	mv	s1,a0
    80204922:	8b2e                	mv	s6,a1
	struct proc *pr = myproc();
    80204924:	00007097          	auipc	ra,0x7
    80204928:	b28080e7          	jalr	-1240(ra) # 8020b44c <myproc>
    8020492c:	89aa                	mv	s3,a0
    8020492e:	0604ba83          	ld	s5,96(s1)
	acquire(&pi->lock);
    80204932:	8a26                	mv	s4,s1
    80204934:	8526                	mv	a0,s1
    80204936:	00004097          	auipc	ra,0x4
    8020493a:	a40080e7          	jalr	-1472(ra) # 80208376 <acquire>
	while ((m = pi->nwrite - pi->nread) == 0) {	// pipe is empty
    8020493e:	06c4a903          	lw	s2,108(s1)
    80204942:	54bc                	lw	a5,104(s1)
    80204944:	40f9093b          	subw	s2,s2,a5
    80204948:	02090163          	beqz	s2,8020496a <pipereadable+0x5e>
    8020494c:	a099                	j	80204992 <pipereadable+0x86>
			sleep(wait->chan, &pi->lock);
    8020494e:	85d2                	mv	a1,s4
    80204950:	ff8ab503          	ld	a0,-8(s5)
    80204954:	ffffd097          	auipc	ra,0xffffd
    80204958:	2ce080e7          	jalr	718(ra) # 80201c22 <sleep>
	while ((m = pi->nwrite - pi->nread) == 0) {	// pipe is empty
    8020495c:	06c4a903          	lw	s2,108(s1)
    80204960:	54bc                	lw	a5,104(s1)
    80204962:	40f9093b          	subw	s2,s2,a5
    80204966:	02091663          	bnez	s2,80204992 <pipereadable+0x86>
		if (pr->killed) {
    8020496a:	0389a783          	lw	a5,56(s3)
    8020496e:	e38d                	bnez	a5,80204990 <pipereadable+0x84>
		if (pi->writeopen == 0) {
    80204970:	0714c783          	lbu	a5,113(s1)
    80204974:	cf9d                	beqz	a5,802049b2 <pipereadable+0xa6>
		pipewakeup(pi, PIPE_WRITER);
    80204976:	4585                	li	a1,1
    80204978:	8526                	mv	a0,s1
    8020497a:	00000097          	auipc	ra,0x0
    8020497e:	e10080e7          	jalr	-496(ra) # 8020478a <pipewakeup>
		if (!pi->writing && immediate) {
    80204982:	0724c783          	lbu	a5,114(s1)
    80204986:	f7e1                	bnez	a5,8020494e <pipereadable+0x42>
    80204988:	fc0b03e3          	beqz	s6,8020494e <pipereadable+0x42>
			m = -1;
    8020498c:	597d                	li	s2,-1
    8020498e:	a011                	j	80204992 <pipereadable+0x86>
			m = -EINTR;
    80204990:	5971                	li	s2,-4
	release(&pi->lock);
    80204992:	8526                	mv	a0,s1
    80204994:	00004097          	auipc	ra,0x4
    80204998:	a36080e7          	jalr	-1482(ra) # 802083ca <release>
}
    8020499c:	854a                	mv	a0,s2
    8020499e:	70e2                	ld	ra,56(sp)
    802049a0:	7442                	ld	s0,48(sp)
    802049a2:	74a2                	ld	s1,40(sp)
    802049a4:	7902                	ld	s2,32(sp)
    802049a6:	69e2                	ld	s3,24(sp)
    802049a8:	6a42                	ld	s4,16(sp)
    802049aa:	6aa2                	ld	s5,8(sp)
    802049ac:	6b02                	ld	s6,0(sp)
    802049ae:	6121                	addi	sp,sp,64
    802049b0:	8082                	ret
			m = -EPIPE;
    802049b2:	5901                	li	s2,-32
    802049b4:	bff9                	j	80204992 <pipereadable+0x86>

00000000802049b6 <pipeunlock>:
{
    802049b6:	7179                	addi	sp,sp,-48
    802049b8:	f406                	sd	ra,40(sp)
    802049ba:	f022                	sd	s0,32(sp)
    802049bc:	ec26                	sd	s1,24(sp)
    802049be:	e84a                	sd	s2,16(sp)
    802049c0:	e44e                	sd	s3,8(sp)
    802049c2:	1800                	addi	s0,sp,48
    802049c4:	892e                	mv	s2,a1
	q = (who == PIPE_READER) ? &pi->rqueue : &pi->wqueue;
    802049c6:	01850493          	addi	s1,a0,24
    802049ca:	e219                	bnez	a2,802049d0 <pipeunlock+0x1a>
    802049cc:	04050493          	addi	s1,a0,64
	acquire(&q->lock);
    802049d0:	89a6                	mv	s3,s1
    802049d2:	8526                	mv	a0,s1
    802049d4:	00004097          	auipc	ra,0x4
    802049d8:	9a2080e7          	jalr	-1630(ra) # 80208376 <acquire>
	__list_link(node->prev, node->next);
    802049dc:	00893703          	ld	a4,8(s2)
    802049e0:	01093783          	ld	a5,16(s2)
	prev->next = next;
    802049e4:	e71c                	sd	a5,8(a4)
	next->prev = prev;
    802049e6:	e398                	sd	a4,0(a5)
	return head->next == head;
    802049e8:	709c                	ld	a5,32(s1)
	return list_empty(&wq->head);
    802049ea:	04e1                	addi	s1,s1,24
	if (!wait_queue_empty(q)) {		// wake up the next one
    802049ec:	00978863          	beq	a5,s1,802049fc <pipeunlock+0x46>
		wakeup(wait->chan);
    802049f0:	ff87b503          	ld	a0,-8(a5)
    802049f4:	ffffd097          	auipc	ra,0xffffd
    802049f8:	338080e7          	jalr	824(ra) # 80201d2c <wakeup>
	release(&q->lock);
    802049fc:	854e                	mv	a0,s3
    802049fe:	00004097          	auipc	ra,0x4
    80204a02:	9cc080e7          	jalr	-1588(ra) # 802083ca <release>
}
    80204a06:	70a2                	ld	ra,40(sp)
    80204a08:	7402                	ld	s0,32(sp)
    80204a0a:	64e2                	ld	s1,24(sp)
    80204a0c:	6942                	ld	s2,16(sp)
    80204a0e:	69a2                	ld	s3,8(sp)
    80204a10:	6145                	addi	sp,sp,48
    80204a12:	8082                	ret

0000000080204a14 <pipealloc>:
{
    80204a14:	7139                	addi	sp,sp,-64
    80204a16:	fc06                	sd	ra,56(sp)
    80204a18:	f822                	sd	s0,48(sp)
    80204a1a:	f426                	sd	s1,40(sp)
    80204a1c:	f04a                	sd	s2,32(sp)
    80204a1e:	ec4e                	sd	s3,24(sp)
    80204a20:	e852                	sd	s4,16(sp)
    80204a22:	e456                	sd	s5,8(sp)
    80204a24:	0080                	addi	s0,sp,64
    80204a26:	8a2a                	mv	s4,a0
    80204a28:	8aae                	mv	s5,a1
	if ((f0 = filealloc()) == NULL ||
    80204a2a:	00000097          	auipc	ra,0x0
    80204a2e:	7f0080e7          	jalr	2032(ra) # 8020521a <filealloc>
    80204a32:	c57d                	beqz	a0,80204b20 <pipealloc+0x10c>
    80204a34:	892a                	mv	s2,a0
		(f1 = filealloc()) == NULL ||
    80204a36:	00000097          	auipc	ra,0x0
    80204a3a:	7e4080e7          	jalr	2020(ra) # 8020521a <filealloc>
    80204a3e:	89aa                	mv	s3,a0
	if ((f0 = filealloc()) == NULL ||
    80204a40:	c561                	beqz	a0,80204b08 <pipealloc+0xf4>
		(pi = kmalloc(sizeof(struct pipe))) == NULL)
    80204a42:	28000513          	li	a0,640
    80204a46:	00005097          	auipc	ra,0x5
    80204a4a:	9c2080e7          	jalr	-1598(ra) # 80209408 <kmalloc>
    80204a4e:	84aa                	mv	s1,a0
		(f1 = filealloc()) == NULL ||
    80204a50:	cd45                	beqz	a0,80204b08 <pipealloc+0xf4>
	pi->readopen = 1;
    80204a52:	4785                	li	a5,1
    80204a54:	06f50823          	sb	a5,112(a0)
	pi->writeopen = 1;
    80204a58:	06f508a3          	sb	a5,113(a0)
	pi->nwrite = 0;
    80204a5c:	06052623          	sw	zero,108(a0)
	pi->nread = 0;
    80204a60:	06052423          	sw	zero,104(a0)
	pi->writing = 0;
    80204a64:	06050923          	sb	zero,114(a0)
	pi->pdata = pi->data;
    80204a68:	08050793          	addi	a5,a0,128
    80204a6c:	fd3c                	sd	a5,120(a0)
	pi->size_shift = 0;
    80204a6e:	060509a3          	sb	zero,115(a0)
	initlock(&pi->lock, "pipe");
    80204a72:	0000e597          	auipc	a1,0xe
    80204a76:	a4658593          	addi	a1,a1,-1466 # 802124b8 <rodata_start+0x4b8>
    80204a7a:	00004097          	auipc	ra,0x4
    80204a7e:	8b8080e7          	jalr	-1864(ra) # 80208332 <initlock>
	initlock(&wq->lock, str);
    80204a82:	0000e597          	auipc	a1,0xe
    80204a86:	a3e58593          	addi	a1,a1,-1474 # 802124c0 <rodata_start+0x4c0>
    80204a8a:	01848513          	addi	a0,s1,24
    80204a8e:	00004097          	auipc	ra,0x4
    80204a92:	8a4080e7          	jalr	-1884(ra) # 80208332 <initlock>
	list_init(&wq->head);
    80204a96:	03048793          	addi	a5,s1,48
	node->prev = node->next = node;
    80204a9a:	fc9c                	sd	a5,56(s1)
    80204a9c:	f89c                	sd	a5,48(s1)
	initlock(&wq->lock, str);
    80204a9e:	0000e597          	auipc	a1,0xe
    80204aa2:	a3258593          	addi	a1,a1,-1486 # 802124d0 <rodata_start+0x4d0>
    80204aa6:	04048513          	addi	a0,s1,64
    80204aaa:	00004097          	auipc	ra,0x4
    80204aae:	888080e7          	jalr	-1912(ra) # 80208332 <initlock>
	list_init(&wq->head);
    80204ab2:	05848793          	addi	a5,s1,88
    80204ab6:	f0bc                	sd	a5,96(s1)
    80204ab8:	ecbc                	sd	a5,88(s1)
	f0->type = FD_PIPE;
    80204aba:	4785                	li	a5,1
    80204abc:	00f92023          	sw	a5,0(s2)
	f0->readable = 1;
    80204ac0:	00f90423          	sb	a5,8(s2)
	f0->writable = 0;
    80204ac4:	000904a3          	sb	zero,9(s2)
	f0->pipe = pi;
    80204ac8:	00993823          	sd	s1,16(s2)
	f0->poll = pipepoll;
    80204acc:	00000717          	auipc	a4,0x0
    80204ad0:	be870713          	addi	a4,a4,-1048 # 802046b4 <pipepoll>
    80204ad4:	04e93423          	sd	a4,72(s2)
	f1->type = FD_PIPE;
    80204ad8:	00f9a023          	sw	a5,0(s3)
	f1->readable = 0;
    80204adc:	00098423          	sb	zero,8(s3)
	f1->writable = 1;
    80204ae0:	00f984a3          	sb	a5,9(s3)
	f1->pipe = pi;
    80204ae4:	0099b823          	sd	s1,16(s3)
	f1->poll = pipepoll;
    80204ae8:	04e9b423          	sd	a4,72(s3)
	*pf0 = f0;
    80204aec:	012a3023          	sd	s2,0(s4)
	*pf1 = f1;
    80204af0:	013ab023          	sd	s3,0(s5)
	return 0;
    80204af4:	4501                	li	a0,0
}
    80204af6:	70e2                	ld	ra,56(sp)
    80204af8:	7442                	ld	s0,48(sp)
    80204afa:	74a2                	ld	s1,40(sp)
    80204afc:	7902                	ld	s2,32(sp)
    80204afe:	69e2                	ld	s3,24(sp)
    80204b00:	6a42                	ld	s4,16(sp)
    80204b02:	6aa2                	ld	s5,8(sp)
    80204b04:	6121                	addi	sp,sp,64
    80204b06:	8082                	ret
		fileclose(f0);
    80204b08:	854a                	mv	a0,s2
    80204b0a:	00000097          	auipc	ra,0x0
    80204b0e:	7a8080e7          	jalr	1960(ra) # 802052b2 <fileclose>
	if (f1)
    80204b12:	00098763          	beqz	s3,80204b20 <pipealloc+0x10c>
		fileclose(f1);
    80204b16:	854e                	mv	a0,s3
    80204b18:	00000097          	auipc	ra,0x0
    80204b1c:	79a080e7          	jalr	1946(ra) # 802052b2 <fileclose>
	*pf0 = *pf1 = NULL;
    80204b20:	000ab023          	sd	zero,0(s5)
    80204b24:	000a3023          	sd	zero,0(s4)
	return -ENOMEM;
    80204b28:	5551                	li	a0,-12
    80204b2a:	b7f1                	j	80204af6 <pipealloc+0xe2>

0000000080204b2c <pipeclose>:
{
    80204b2c:	1101                	addi	sp,sp,-32
    80204b2e:	ec06                	sd	ra,24(sp)
    80204b30:	e822                	sd	s0,16(sp)
    80204b32:	e426                	sd	s1,8(sp)
    80204b34:	e04a                	sd	s2,0(sp)
    80204b36:	1000                	addi	s0,sp,32
    80204b38:	84aa                	mv	s1,a0
    80204b3a:	892e                	mv	s2,a1
	acquire(&pi->lock);
    80204b3c:	00004097          	auipc	ra,0x4
    80204b40:	83a080e7          	jalr	-1990(ra) # 80208376 <acquire>
	if (writable) {
    80204b44:	04090063          	beqz	s2,80204b84 <pipeclose+0x58>
		pi->writeopen = 0;
    80204b48:	060488a3          	sb	zero,113(s1)
		pipewakeup(pi, PIPE_READER);
    80204b4c:	4581                	li	a1,0
    80204b4e:	8526                	mv	a0,s1
    80204b50:	00000097          	auipc	ra,0x0
    80204b54:	c3a080e7          	jalr	-966(ra) # 8020478a <pipewakeup>
	if (pi->readopen == 0 && pi->writeopen == 0) {
    80204b58:	0704d783          	lhu	a5,112(s1)
    80204b5c:	e7a1                	bnez	a5,80204ba4 <pipeclose+0x78>
		release(&pi->lock);
    80204b5e:	8526                	mv	a0,s1
    80204b60:	00004097          	auipc	ra,0x4
    80204b64:	86a080e7          	jalr	-1942(ra) # 802083ca <release>
		if (pi->size_shift)
    80204b68:	0734c783          	lbu	a5,115(s1)
    80204b6c:	e78d                	bnez	a5,80204b96 <pipeclose+0x6a>
		kfree(pi);
    80204b6e:	8526                	mv	a0,s1
    80204b70:	00005097          	auipc	ra,0x5
    80204b74:	ae2080e7          	jalr	-1310(ra) # 80209652 <kfree>
}
    80204b78:	60e2                	ld	ra,24(sp)
    80204b7a:	6442                	ld	s0,16(sp)
    80204b7c:	64a2                	ld	s1,8(sp)
    80204b7e:	6902                	ld	s2,0(sp)
    80204b80:	6105                	addi	sp,sp,32
    80204b82:	8082                	ret
		pi->readopen = 0;
    80204b84:	06048823          	sb	zero,112(s1)
		pipewakeup(pi, PIPE_WRITER);
    80204b88:	4585                	li	a1,1
    80204b8a:	8526                	mv	a0,s1
    80204b8c:	00000097          	auipc	ra,0x0
    80204b90:	bfe080e7          	jalr	-1026(ra) # 8020478a <pipewakeup>
    80204b94:	b7d1                	j	80204b58 <pipeclose+0x2c>
			freepage_n((uint64)pi->pdata, 4);
    80204b96:	4591                	li	a1,4
    80204b98:	7ca8                	ld	a0,120(s1)
    80204b9a:	00004097          	auipc	ra,0x4
    80204b9e:	59e080e7          	jalr	1438(ra) # 80209138 <freepage_n>
    80204ba2:	b7f1                	j	80204b6e <pipeclose+0x42>
		release(&pi->lock);
    80204ba4:	8526                	mv	a0,s1
    80204ba6:	00004097          	auipc	ra,0x4
    80204baa:	824080e7          	jalr	-2012(ra) # 802083ca <release>
}
    80204bae:	b7e9                	j	80204b78 <pipeclose+0x4c>

0000000080204bb0 <pipewrite>:
{
    80204bb0:	7135                	addi	sp,sp,-160
    80204bb2:	ed06                	sd	ra,152(sp)
    80204bb4:	e922                	sd	s0,144(sp)
    80204bb6:	e526                	sd	s1,136(sp)
    80204bb8:	e14a                	sd	s2,128(sp)
    80204bba:	fcce                	sd	s3,120(sp)
    80204bbc:	f8d2                	sd	s4,112(sp)
    80204bbe:	f4d6                	sd	s5,104(sp)
    80204bc0:	f0da                	sd	s6,96(sp)
    80204bc2:	ecde                	sd	s7,88(sp)
    80204bc4:	e8e2                	sd	s8,80(sp)
    80204bc6:	e4e6                	sd	s9,72(sp)
    80204bc8:	e0ea                	sd	s10,64(sp)
    80204bca:	fc6e                	sd	s11,56(sp)
    80204bcc:	1100                	addi	s0,sp,160
    80204bce:	84aa                	mv	s1,a0
    80204bd0:	8bae                	mv	s7,a1
    80204bd2:	8c32                	mv	s8,a2
    80204bd4:	8936                	mv	s2,a3
    80204bd6:	f6d43423          	sd	a3,-152(s0)
	wait.chan = &wait;
    80204bda:	f7840593          	addi	a1,s0,-136
    80204bde:	f6b43c23          	sd	a1,-136(s0)
	pipelock(pi, &wait, PIPE_WRITER);		// block other writers
    80204be2:	4605                	li	a2,1
    80204be4:	00000097          	auipc	ra,0x0
    80204be8:	bf2080e7          	jalr	-1038(ra) # 802047d6 <pipelock>
	if (!pi->size_shift && n > PIPE_SIZE && 
    80204bec:	0734c783          	lbu	a5,115(s1)
    80204bf0:	e3b1                	bnez	a5,80204c34 <pipewrite+0x84>
    80204bf2:	20000713          	li	a4,512
    80204bf6:	03275f63          	bge	a4,s2,80204c34 <pipewrite+0x84>
    80204bfa:	54b8                	lw	a4,104(s1)
    80204bfc:	54fc                	lw	a5,108(s1)
    80204bfe:	00f70c63          	beq	a4,a5,80204c16 <pipewrite+0x66>
	char *const pipebound = pi->pdata + PIPESIZE(pi);
    80204c02:	0734cb03          	lbu	s6,115(s1)
    80204c06:	20000793          	li	a5,512
    80204c0a:	016797bb          	sllw	a5,a5,s6
    80204c0e:	0784bb03          	ld	s6,120(s1)
    80204c12:	9b3e                	add	s6,s6,a5
	for (i = 0; i < n;) {
    80204c14:	a81d                	j	80204c4a <pipewrite+0x9a>
		char *bigger = allocpage_n(4);
    80204c16:	4511                	li	a0,4
    80204c18:	00004097          	auipc	ra,0x4
    80204c1c:	4c6080e7          	jalr	1222(ra) # 802090de <allocpage_n>
		if (bigger) {
    80204c20:	d16d                	beqz	a0,80204c02 <pipewrite+0x52>
			pi->nwrite = pi->nread = 0;
    80204c22:	0604a423          	sw	zero,104(s1)
    80204c26:	0604a623          	sw	zero,108(s1)
			pi->pdata = bigger;
    80204c2a:	fca8                	sd	a0,120(s1)
			pi->size_shift = 5;
    80204c2c:	4795                	li	a5,5
    80204c2e:	06f489a3          	sb	a5,115(s1)
    80204c32:	bfc1                	j	80204c02 <pipewrite+0x52>
	char *const pipebound = pi->pdata + PIPESIZE(pi);
    80204c34:	20000b13          	li	s6,512
    80204c38:	00fb17bb          	sllw	a5,s6,a5
    80204c3c:	0784bb03          	ld	s6,120(s1)
    80204c40:	9b3e                	add	s6,s6,a5
	for (i = 0; i < n;) {
    80204c42:	f6843783          	ld	a5,-152(s0)
    80204c46:	0cf05963          	blez	a5,80204d18 <pipewrite+0x168>
{
    80204c4a:	4a81                	li	s5,0
		m = (PIPESIZE(pi) - m < n - i) ?	// amount of bytes to write
    80204c4c:	20000c93          	li	s9,512
		if ((m = pipewritable(pi)) < 0) {
    80204c50:	8526                	mv	a0,s1
    80204c52:	00000097          	auipc	ra,0x0
    80204c56:	bfa080e7          	jalr	-1030(ra) # 8020484c <pipewritable>
    80204c5a:	10054a63          	bltz	a0,80204d6e <pipewrite+0x1be>
		m = (PIPESIZE(pi) - m < n - i) ?	// amount of bytes to write
    80204c5e:	0734c783          	lbu	a5,115(s1)
    80204c62:	00fc973b          	sllw	a4,s9,a5
    80204c66:	40a7053b          	subw	a0,a4,a0
    80204c6a:	f6843783          	ld	a5,-152(s0)
    80204c6e:	415787bb          	subw	a5,a5,s5
    80204c72:	86be                	mv	a3,a5
    80204c74:	2781                	sext.w	a5,a5
    80204c76:	0005061b          	sext.w	a2,a0
    80204c7a:	00f65363          	bge	a2,a5,80204c80 <pipewrite+0xd0>
    80204c7e:	86aa                	mv	a3,a0
    80204c80:	00068d9b          	sext.w	s11,a3
		int mm = m > PIPESIZE(pi) / 2 ? (PIPESIZE(pi) / 2) : m;
    80204c84:	01f7579b          	srliw	a5,a4,0x1f
    80204c88:	9fb9                	addw	a5,a5,a4
    80204c8a:	4017d79b          	sraiw	a5,a5,0x1
    80204c8e:	8d3e                	mv	s10,a5
    80204c90:	2781                	sext.w	a5,a5
    80204c92:	00fdd363          	bge	s11,a5,80204c98 <pipewrite+0xe8>
    80204c96:	8d36                	mv	s10,a3
    80204c98:	2d01                	sext.w	s10,s10
		while (m > 0) {					// pipe is a loop in a buf
    80204c9a:	07b05263          	blez	s11,80204cfe <pipewrite+0x14e>
			while (mm > 0) {
    80204c9e:	05a05c63          	blez	s10,80204cf6 <pipewrite+0x146>
    80204ca2:	89ea                	mv	s3,s10
    80204ca4:	a805                	j	80204cd4 <pipewrite+0x124>
				int count = (pipebound - paddr < mm) ? pipebound - paddr : mm;
    80204ca6:	00090a1b          	sext.w	s4,s2
				if (either_copyin(user,paddr, addr + i, count) < 0) {
    80204caa:	86d2                	mv	a3,s4
    80204cac:	018a8633          	add	a2,s5,s8
    80204cb0:	855e                	mv	a0,s7
    80204cb2:	00006097          	auipc	ra,0x6
    80204cb6:	20a080e7          	jalr	522(ra) # 8020aebc <either_copyin>
    80204cba:	06054063          	bltz	a0,80204d1a <pipewrite+0x16a>
				i += count;
    80204cbe:	015a0abb          	addw	s5,s4,s5
				pi->nwrite += count;
    80204cc2:	54fc                	lw	a5,108(s1)
    80204cc4:	0127893b          	addw	s2,a5,s2
    80204cc8:	0724a623          	sw	s2,108(s1)
				mm -= count;
    80204ccc:	414989bb          	subw	s3,s3,s4
			while (mm > 0) {
    80204cd0:	03305363          	blez	s3,80204cf6 <pipewrite+0x146>
				char *paddr = pi->pdata + pi->nwrite % PIPESIZE(pi);
    80204cd4:	0734c583          	lbu	a1,115(s1)
    80204cd8:	00bc95bb          	sllw	a1,s9,a1
    80204cdc:	35fd                	addiw	a1,a1,-1
    80204cde:	54fc                	lw	a5,108(s1)
    80204ce0:	8dfd                	and	a1,a1,a5
    80204ce2:	1582                	slli	a1,a1,0x20
    80204ce4:	9181                	srli	a1,a1,0x20
    80204ce6:	7cbc                	ld	a5,120(s1)
    80204ce8:	95be                	add	a1,a1,a5
				int count = (pipebound - paddr < mm) ? pipebound - paddr : mm;
    80204cea:	40bb0933          	sub	s2,s6,a1
    80204cee:	fb29dce3          	bge	s3,s2,80204ca6 <pipewrite+0xf6>
    80204cf2:	894e                	mv	s2,s3
    80204cf4:	bf4d                	j	80204ca6 <pipewrite+0xf6>
			m -= mm;
    80204cf6:	41ad8dbb          	subw	s11,s11,s10
			if ((mm = m) > 0) {
    80204cfa:	01b04763          	bgtz	s11,80204d08 <pipewrite+0x158>
	for (i = 0; i < n;) {
    80204cfe:	f6843783          	ld	a5,-152(s0)
    80204d02:	f4fac7e3          	blt	s5,a5,80204c50 <pipewrite+0xa0>
    80204d06:	a811                	j	80204d1a <pipewrite+0x16a>
				pipewakeup(pi, PIPE_READER);
    80204d08:	4581                	li	a1,0
    80204d0a:	8526                	mv	a0,s1
    80204d0c:	00000097          	auipc	ra,0x0
    80204d10:	a7e080e7          	jalr	-1410(ra) # 8020478a <pipewakeup>
    80204d14:	8d6e                	mv	s10,s11
    80204d16:	b761                	j	80204c9e <pipewrite+0xee>
	for (i = 0; i < n;) {
    80204d18:	4a81                	li	s5,0
	acquire(&pi->lock);		// see pipewritable()
    80204d1a:	8526                	mv	a0,s1
    80204d1c:	00003097          	auipc	ra,0x3
    80204d20:	65a080e7          	jalr	1626(ra) # 80208376 <acquire>
	pipewakeup(pi, PIPE_READER);
    80204d24:	4581                	li	a1,0
    80204d26:	8526                	mv	a0,s1
    80204d28:	00000097          	auipc	ra,0x0
    80204d2c:	a62080e7          	jalr	-1438(ra) # 8020478a <pipewakeup>
	pi->writing = 0;
    80204d30:	06048923          	sb	zero,114(s1)
	release(&pi->lock);
    80204d34:	8526                	mv	a0,s1
    80204d36:	00003097          	auipc	ra,0x3
    80204d3a:	694080e7          	jalr	1684(ra) # 802083ca <release>
	pipeunlock(pi, &wait, PIPE_WRITER);
    80204d3e:	4605                	li	a2,1
    80204d40:	f7840593          	addi	a1,s0,-136
    80204d44:	8526                	mv	a0,s1
    80204d46:	00000097          	auipc	ra,0x0
    80204d4a:	c70080e7          	jalr	-912(ra) # 802049b6 <pipeunlock>
}
    80204d4e:	8556                	mv	a0,s5
    80204d50:	60ea                	ld	ra,152(sp)
    80204d52:	644a                	ld	s0,144(sp)
    80204d54:	64aa                	ld	s1,136(sp)
    80204d56:	690a                	ld	s2,128(sp)
    80204d58:	79e6                	ld	s3,120(sp)
    80204d5a:	7a46                	ld	s4,112(sp)
    80204d5c:	7aa6                	ld	s5,104(sp)
    80204d5e:	7b06                	ld	s6,96(sp)
    80204d60:	6be6                	ld	s7,88(sp)
    80204d62:	6c46                	ld	s8,80(sp)
    80204d64:	6ca6                	ld	s9,72(sp)
    80204d66:	6d06                	ld	s10,64(sp)
    80204d68:	7de2                	ld	s11,56(sp)
    80204d6a:	610d                	addi	sp,sp,160
    80204d6c:	8082                	ret
		if ((m = pipewritable(pi)) < 0) {
    80204d6e:	8aaa                	mv	s5,a0
    80204d70:	b7f9                	j	80204d3e <pipewrite+0x18e>

0000000080204d72 <piperead>:
{
    80204d72:	7135                	addi	sp,sp,-160
    80204d74:	ed06                	sd	ra,152(sp)
    80204d76:	e922                	sd	s0,144(sp)
    80204d78:	e526                	sd	s1,136(sp)
    80204d7a:	e14a                	sd	s2,128(sp)
    80204d7c:	fcce                	sd	s3,120(sp)
    80204d7e:	f8d2                	sd	s4,112(sp)
    80204d80:	f4d6                	sd	s5,104(sp)
    80204d82:	f0da                	sd	s6,96(sp)
    80204d84:	ecde                	sd	s7,88(sp)
    80204d86:	e8e2                	sd	s8,80(sp)
    80204d88:	e4e6                	sd	s9,72(sp)
    80204d8a:	e0ea                	sd	s10,64(sp)
    80204d8c:	fc6e                	sd	s11,56(sp)
    80204d8e:	1100                	addi	s0,sp,160
    80204d90:	84aa                	mv	s1,a0
    80204d92:	8c2e                	mv	s8,a1
    80204d94:	8cb2                	mv	s9,a2
    80204d96:	8936                	mv	s2,a3
    80204d98:	f6d43423          	sd	a3,-152(s0)
	wait.chan = &wait;
    80204d9c:	f7840593          	addi	a1,s0,-136
    80204da0:	f6b43c23          	sd	a1,-136(s0)
	pipelock(pi, &wait, PIPE_READER);	// block other readers
    80204da4:	4601                	li	a2,0
    80204da6:	00000097          	auipc	ra,0x0
    80204daa:	a30080e7          	jalr	-1488(ra) # 802047d6 <pipelock>
	while (tot < n) {
    80204dae:	0f205263          	blez	s2,80204e92 <piperead+0x120>
	int tot = 0, m;
    80204db2:	4b01                	li	s6,0
		char *const pipebound = pi->pdata + PIPESIZE(pi);
    80204db4:	20000d13          	li	s10,512
		if ((m = pipereadable(pi, tot > 0)) < 0) {
    80204db8:	016025b3          	sgtz	a1,s6
    80204dbc:	8526                	mv	a0,s1
    80204dbe:	00000097          	auipc	ra,0x0
    80204dc2:	b4e080e7          	jalr	-1202(ra) # 8020490c <pipereadable>
    80204dc6:	04054763          	bltz	a0,80204e14 <piperead+0xa2>
		if (m > n - tot)
    80204dca:	f6843783          	ld	a5,-152(s0)
    80204dce:	416787bb          	subw	a5,a5,s6
    80204dd2:	86be                	mv	a3,a5
    80204dd4:	2781                	sext.w	a5,a5
    80204dd6:	00f55363          	bge	a0,a5,80204ddc <piperead+0x6a>
    80204dda:	86aa                	mv	a3,a0
    80204ddc:	00068d9b          	sext.w	s11,a3
		char *const pipebound = pi->pdata + PIPESIZE(pi);
    80204de0:	0734c783          	lbu	a5,115(s1)
    80204de4:	00fd173b          	sllw	a4,s10,a5
    80204de8:	0007079b          	sext.w	a5,a4
    80204dec:	0784bb83          	ld	s7,120(s1)
    80204df0:	9bbe                	add	s7,s7,a5
		int mm = m > PIPESIZE(pi) / 2 ? (PIPESIZE(pi) / 2) : m;
    80204df2:	01f7579b          	srliw	a5,a4,0x1f
    80204df6:	9fb9                	addw	a5,a5,a4
    80204df8:	4017d79b          	sraiw	a5,a5,0x1
    80204dfc:	8abe                	mv	s5,a5
    80204dfe:	2781                	sext.w	a5,a5
    80204e00:	00fdd363          	bge	s11,a5,80204e06 <piperead+0x94>
    80204e04:	8ab6                	mv	s5,a3
    80204e06:	2a81                	sext.w	s5,s5
		while (m > 0) {
    80204e08:	07b05863          	blez	s11,80204e78 <piperead+0x106>
			for (int i = 0; i < mm;) {
    80204e0c:	07505263          	blez	s5,80204e70 <piperead+0xfe>
    80204e10:	4901                	li	s2,0
    80204e12:	a825                	j	80204e4a <piperead+0xd8>
			if (tot == 0)
    80204e14:	0a0b1063          	bnez	s6,80204eb4 <piperead+0x142>
		if ((m = pipereadable(pi, tot > 0)) < 0) {
    80204e18:	8b2a                	mv	s6,a0
    80204e1a:	a869                	j	80204eb4 <piperead+0x142>
				int count = (pipebound - paddr < mm - i) ? pipebound - paddr : mm - i;
    80204e1c:	00098a1b          	sext.w	s4,s3
				if (either_copyout(user, addr + i, paddr, count) < 0) {
    80204e20:	86d2                	mv	a3,s4
    80204e22:	019905b3          	add	a1,s2,s9
    80204e26:	8562                	mv	a0,s8
    80204e28:	00006097          	auipc	ra,0x6
    80204e2c:	03e080e7          	jalr	62(ra) # 8020ae66 <either_copyout>
    80204e30:	06054263          	bltz	a0,80204e94 <piperead+0x122>
				pi->nread += count;
    80204e34:	54bc                	lw	a5,104(s1)
    80204e36:	013789bb          	addw	s3,a5,s3
    80204e3a:	0734a423          	sw	s3,104(s1)
				i += count;
    80204e3e:	012a093b          	addw	s2,s4,s2
				tot += count;
    80204e42:	016a0b3b          	addw	s6,s4,s6
			for (int i = 0; i < mm;) {
    80204e46:	03595563          	bge	s2,s5,80204e70 <piperead+0xfe>
				char *paddr = pi->pdata + pi->nread % PIPESIZE(pi);
    80204e4a:	0734c603          	lbu	a2,115(s1)
    80204e4e:	00cd163b          	sllw	a2,s10,a2
    80204e52:	367d                	addiw	a2,a2,-1
    80204e54:	54bc                	lw	a5,104(s1)
    80204e56:	8e7d                	and	a2,a2,a5
    80204e58:	1602                	slli	a2,a2,0x20
    80204e5a:	9201                	srli	a2,a2,0x20
    80204e5c:	7cbc                	ld	a5,120(s1)
    80204e5e:	963e                	add	a2,a2,a5
				int count = (pipebound - paddr < mm - i) ? pipebound - paddr : mm - i;
    80204e60:	40cb87b3          	sub	a5,s7,a2
    80204e64:	412a89bb          	subw	s3,s5,s2
    80204e68:	fb37dae3          	bge	a5,s3,80204e1c <piperead+0xaa>
    80204e6c:	89be                	mv	s3,a5
    80204e6e:	b77d                	j	80204e1c <piperead+0xaa>
			m -= mm;
    80204e70:	415d8dbb          	subw	s11,s11,s5
			if ((mm = m) > 0) {
    80204e74:	01b04763          	bgtz	s11,80204e82 <piperead+0x110>
	while (tot < n) {
    80204e78:	f6843783          	ld	a5,-152(s0)
    80204e7c:	f2fb4ee3          	blt	s6,a5,80204db8 <piperead+0x46>
    80204e80:	a811                	j	80204e94 <piperead+0x122>
				pipewakeup(pi, PIPE_WRITER);
    80204e82:	4585                	li	a1,1
    80204e84:	8526                	mv	a0,s1
    80204e86:	00000097          	auipc	ra,0x0
    80204e8a:	904080e7          	jalr	-1788(ra) # 8020478a <pipewakeup>
    80204e8e:	8aee                	mv	s5,s11
    80204e90:	bfb5                	j	80204e0c <piperead+0x9a>
	int tot = 0, m;
    80204e92:	4b01                	li	s6,0
	acquire(&pi->lock);		// see pipewritable()
    80204e94:	8526                	mv	a0,s1
    80204e96:	00003097          	auipc	ra,0x3
    80204e9a:	4e0080e7          	jalr	1248(ra) # 80208376 <acquire>
	pipewakeup(pi, PIPE_WRITER);
    80204e9e:	4585                	li	a1,1
    80204ea0:	8526                	mv	a0,s1
    80204ea2:	00000097          	auipc	ra,0x0
    80204ea6:	8e8080e7          	jalr	-1816(ra) # 8020478a <pipewakeup>
	release(&pi->lock);
    80204eaa:	8526                	mv	a0,s1
    80204eac:	00003097          	auipc	ra,0x3
    80204eb0:	51e080e7          	jalr	1310(ra) # 802083ca <release>
	pipeunlock(pi, &wait, PIPE_READER);
    80204eb4:	4601                	li	a2,0
    80204eb6:	f7840593          	addi	a1,s0,-136
    80204eba:	8526                	mv	a0,s1
    80204ebc:	00000097          	auipc	ra,0x0
    80204ec0:	afa080e7          	jalr	-1286(ra) # 802049b6 <pipeunlock>
}
    80204ec4:	855a                	mv	a0,s6
    80204ec6:	60ea                	ld	ra,152(sp)
    80204ec8:	644a                	ld	s0,144(sp)
    80204eca:	64aa                	ld	s1,136(sp)
    80204ecc:	690a                	ld	s2,128(sp)
    80204ece:	79e6                	ld	s3,120(sp)
    80204ed0:	7a46                	ld	s4,112(sp)
    80204ed2:	7aa6                	ld	s5,104(sp)
    80204ed4:	7b06                	ld	s6,96(sp)
    80204ed6:	6be6                	ld	s7,88(sp)
    80204ed8:	6c46                	ld	s8,80(sp)
    80204eda:	6ca6                	ld	s9,72(sp)
    80204edc:	6d06                	ld	s10,64(sp)
    80204ede:	7de2                	ld	s11,56(sp)
    80204ee0:	610d                	addi	sp,sp,160
    80204ee2:	8082                	ret

0000000080204ee4 <pipewritev>:
{
    80204ee4:	7135                	addi	sp,sp,-160
    80204ee6:	ed06                	sd	ra,152(sp)
    80204ee8:	e922                	sd	s0,144(sp)
    80204eea:	e526                	sd	s1,136(sp)
    80204eec:	e14a                	sd	s2,128(sp)
    80204eee:	fcce                	sd	s3,120(sp)
    80204ef0:	f8d2                	sd	s4,112(sp)
    80204ef2:	f4d6                	sd	s5,104(sp)
    80204ef4:	f0da                	sd	s6,96(sp)
    80204ef6:	ecde                	sd	s7,88(sp)
    80204ef8:	e8e2                	sd	s8,80(sp)
    80204efa:	e4e6                	sd	s9,72(sp)
    80204efc:	e0ea                	sd	s10,64(sp)
    80204efe:	fc6e                	sd	s11,56(sp)
    80204f00:	1100                	addi	s0,sp,160
    80204f02:	84aa                	mv	s1,a0
    80204f04:	89ae                	mv	s3,a1
    80204f06:	8932                	mv	s2,a2
	char *const pipebound = pi->pdata + PIPESIZE(pi);
    80204f08:	07354783          	lbu	a5,115(a0)
    80204f0c:	20000c13          	li	s8,512
    80204f10:	00fc17bb          	sllw	a5,s8,a5
    80204f14:	07853c03          	ld	s8,120(a0)
    80204f18:	9c3e                	add	s8,s8,a5
	wait.chan = &wait;
    80204f1a:	f7840593          	addi	a1,s0,-136
    80204f1e:	f6b43c23          	sd	a1,-136(s0)
	pipelock(pi, &wait, PIPE_WRITER);	// block other writers
    80204f22:	4605                	li	a2,1
    80204f24:	00000097          	auipc	ra,0x0
    80204f28:	8b2080e7          	jalr	-1870(ra) # 802047d6 <pipelock>
	for (int i = 0; i < count; i++) {
    80204f2c:	0f205563          	blez	s2,80205016 <pipewritev+0x132>
    80204f30:	8dce                	mv	s11,s3
    80204f32:	fff9079b          	addiw	a5,s2,-1
    80204f36:	1782                	slli	a5,a5,0x20
    80204f38:	9381                	srli	a5,a5,0x20
    80204f3a:	0792                	slli	a5,a5,0x4
    80204f3c:	09c1                	addi	s3,s3,16
    80204f3e:	97ce                	add	a5,a5,s3
    80204f40:	f6f43423          	sd	a5,-152(s0)
	int ret = 0;
    80204f44:	4b01                	li	s6,0
			m = (PIPESIZE(pi) - m < n - j) ? PIPESIZE(pi) - m : n - j;		// amount of bytes to write
    80204f46:	20000c93          	li	s9,512
		uint64 addr = (uint64)ioarr[i].iov_base;
    80204f4a:	000dbb83          	ld	s7,0(s11)
		uint64 n = ioarr[i].iov_len;
    80204f4e:	008ded03          	lwu	s10,8(s11)
		struct vma* vma = myproc()->vma;
    80204f52:	00006097          	auipc	ra,0x6
    80204f56:	4fa080e7          	jalr	1274(ra) # 8020b44c <myproc>
    80204f5a:	17053903          	ld	s2,368(a0)
		if (!addr_locate_vma(vma, addr)||!addr_locate_vma(vma, addr+n-1))
    80204f5e:	85de                	mv	a1,s7
    80204f60:	854a                	mv	a0,s2
    80204f62:	00006097          	auipc	ra,0x6
    80204f66:	6d0080e7          	jalr	1744(ra) # 8020b632 <addr_locate_vma>
    80204f6a:	c55d                	beqz	a0,80205018 <pipewritev+0x134>
    80204f6c:	01ab85b3          	add	a1,s7,s10
    80204f70:	15fd                	addi	a1,a1,-1
    80204f72:	854a                	mv	a0,s2
    80204f74:	00006097          	auipc	ra,0x6
    80204f78:	6be080e7          	jalr	1726(ra) # 8020b632 <addr_locate_vma>
    80204f7c:	cd51                	beqz	a0,80205018 <pipewritev+0x134>
		for (j = 0; j < n;) {
    80204f7e:	020d0c63          	beqz	s10,80204fb6 <pipewritev+0xd2>
    80204f82:	4a81                	li	s5,0
    80204f84:	4981                	li	s3,0
			int m = pipewritable(pi);
    80204f86:	8526                	mv	a0,s1
    80204f88:	00000097          	auipc	ra,0x0
    80204f8c:	8c4080e7          	jalr	-1852(ra) # 8020484c <pipewritable>
			if (m < 0) {
    80204f90:	0c054e63          	bltz	a0,8020506c <pipewritev+0x188>
			m = (PIPESIZE(pi) - m < n - j) ? PIPESIZE(pi) - m : n - j;		// amount of bytes to write
    80204f94:	0734c903          	lbu	s2,115(s1)
    80204f98:	012c993b          	sllw	s2,s9,s2
    80204f9c:	413d09b3          	sub	s3,s10,s3
    80204fa0:	40a9093b          	subw	s2,s2,a0
    80204fa4:	0129f363          	bgeu	s3,s2,80204faa <pipewritev+0xc6>
    80204fa8:	894e                	mv	s2,s3
    80204faa:	2901                	sext.w	s2,s2
			while (m > 0) {							// pipe is a loop in a buf
    80204fac:	05204463          	bgtz	s2,80204ff4 <pipewritev+0x110>
		for (j = 0; j < n;) {
    80204fb0:	89d6                	mv	s3,s5
    80204fb2:	fdaaeae3          	bltu	s5,s10,80204f86 <pipewritev+0xa2>
	for (int i = 0; i < count; i++) {
    80204fb6:	0dc1                	addi	s11,s11,16
    80204fb8:	f6843783          	ld	a5,-152(s0)
    80204fbc:	f8fd97e3          	bne	s11,a5,80204f4a <pipewritev+0x66>
    80204fc0:	a8a1                	j	80205018 <pipewritev+0x134>
				int cnt = (pipebound - paddr < m) ? pipebound - paddr : m;
    80204fc2:	000a099b          	sext.w	s3,s4
				if (either_copyin(1, paddr, addr + j, cnt) < 0)
    80204fc6:	86ce                	mv	a3,s3
    80204fc8:	017a8633          	add	a2,s5,s7
    80204fcc:	4505                	li	a0,1
    80204fce:	00006097          	auipc	ra,0x6
    80204fd2:	eee080e7          	jalr	-274(ra) # 8020aebc <either_copyin>
    80204fd6:	04054163          	bltz	a0,80205018 <pipewritev+0x134>
				m -= cnt;
    80204fda:	4139093b          	subw	s2,s2,s3
				j += cnt;
    80204fde:	01598abb          	addw	s5,s3,s5
				pi->nwrite += cnt;
    80204fe2:	54fc                	lw	a5,108(s1)
    80204fe4:	01478a3b          	addw	s4,a5,s4
    80204fe8:	0744a623          	sw	s4,108(s1)
				ret += cnt;
    80204fec:	01698b3b          	addw	s6,s3,s6
			while (m > 0) {							// pipe is a loop in a buf
    80204ff0:	fd2050e3          	blez	s2,80204fb0 <pipewritev+0xcc>
				char *paddr = pi->pdata + pi->nwrite % PIPESIZE(pi);
    80204ff4:	0734c583          	lbu	a1,115(s1)
    80204ff8:	00bc95bb          	sllw	a1,s9,a1
    80204ffc:	35fd                	addiw	a1,a1,-1
    80204ffe:	54fc                	lw	a5,108(s1)
    80205000:	8dfd                	and	a1,a1,a5
    80205002:	1582                	slli	a1,a1,0x20
    80205004:	9181                	srli	a1,a1,0x20
    80205006:	7cbc                	ld	a5,120(s1)
    80205008:	95be                	add	a1,a1,a5
				int cnt = (pipebound - paddr < m) ? pipebound - paddr : m;
    8020500a:	40bc0a33          	sub	s4,s8,a1
    8020500e:	fb495ae3          	bge	s2,s4,80204fc2 <pipewritev+0xde>
    80205012:	8a4a                	mv	s4,s2
    80205014:	b77d                	j	80204fc2 <pipewritev+0xde>
	int ret = 0;
    80205016:	4b01                	li	s6,0
	acquire(&pi->lock);		// see pipewritable()
    80205018:	8526                	mv	a0,s1
    8020501a:	00003097          	auipc	ra,0x3
    8020501e:	35c080e7          	jalr	860(ra) # 80208376 <acquire>
	pipewakeup(pi, PIPE_READER);
    80205022:	4581                	li	a1,0
    80205024:	8526                	mv	a0,s1
    80205026:	fffff097          	auipc	ra,0xfffff
    8020502a:	764080e7          	jalr	1892(ra) # 8020478a <pipewakeup>
	pi->writing = 0;
    8020502e:	06048923          	sb	zero,114(s1)
	release(&pi->lock);
    80205032:	8526                	mv	a0,s1
    80205034:	00003097          	auipc	ra,0x3
    80205038:	396080e7          	jalr	918(ra) # 802083ca <release>
	pipeunlock(pi, &wait, PIPE_WRITER);
    8020503c:	4605                	li	a2,1
    8020503e:	f7840593          	addi	a1,s0,-136
    80205042:	8526                	mv	a0,s1
    80205044:	00000097          	auipc	ra,0x0
    80205048:	972080e7          	jalr	-1678(ra) # 802049b6 <pipeunlock>
}
    8020504c:	855a                	mv	a0,s6
    8020504e:	60ea                	ld	ra,152(sp)
    80205050:	644a                	ld	s0,144(sp)
    80205052:	64aa                	ld	s1,136(sp)
    80205054:	690a                	ld	s2,128(sp)
    80205056:	79e6                	ld	s3,120(sp)
    80205058:	7a46                	ld	s4,112(sp)
    8020505a:	7aa6                	ld	s5,104(sp)
    8020505c:	7b06                	ld	s6,96(sp)
    8020505e:	6be6                	ld	s7,88(sp)
    80205060:	6c46                	ld	s8,80(sp)
    80205062:	6ca6                	ld	s9,72(sp)
    80205064:	6d06                	ld	s10,64(sp)
    80205066:	7de2                	ld	s11,56(sp)
    80205068:	610d                	addi	sp,sp,160
    8020506a:	8082                	ret
				ret = -EPIPE;
    8020506c:	5b01                	li	s6,-32
    8020506e:	b7f9                	j	8020503c <pipewritev+0x158>

0000000080205070 <pipereadv>:
{
    80205070:	7135                	addi	sp,sp,-160
    80205072:	ed06                	sd	ra,152(sp)
    80205074:	e922                	sd	s0,144(sp)
    80205076:	e526                	sd	s1,136(sp)
    80205078:	e14a                	sd	s2,128(sp)
    8020507a:	fcce                	sd	s3,120(sp)
    8020507c:	f8d2                	sd	s4,112(sp)
    8020507e:	f4d6                	sd	s5,104(sp)
    80205080:	f0da                	sd	s6,96(sp)
    80205082:	ecde                	sd	s7,88(sp)
    80205084:	e8e2                	sd	s8,80(sp)
    80205086:	e4e6                	sd	s9,72(sp)
    80205088:	e0ea                	sd	s10,64(sp)
    8020508a:	fc6e                	sd	s11,56(sp)
    8020508c:	1100                	addi	s0,sp,160
    8020508e:	84aa                	mv	s1,a0
    80205090:	89ae                	mv	s3,a1
    80205092:	8932                	mv	s2,a2
	char *const pipebound = pi->pdata + PIPESIZE(pi);
    80205094:	07354783          	lbu	a5,115(a0)
    80205098:	20000c93          	li	s9,512
    8020509c:	00fc97bb          	sllw	a5,s9,a5
    802050a0:	07853c83          	ld	s9,120(a0)
    802050a4:	9cbe                	add	s9,s9,a5
	wait.chan = &wait;
    802050a6:	f7840593          	addi	a1,s0,-136
    802050aa:	f6b43c23          	sd	a1,-136(s0)
	pipelock(pi, &wait, PIPE_READER);	// block other readers
    802050ae:	4601                	li	a2,0
    802050b0:	fffff097          	auipc	ra,0xfffff
    802050b4:	726080e7          	jalr	1830(ra) # 802047d6 <pipelock>
	if ((ndata = pipereadable(pi, 0)) < 0) {
    802050b8:	4581                	li	a1,0
    802050ba:	8526                	mv	a0,s1
    802050bc:	00000097          	auipc	ra,0x0
    802050c0:	850080e7          	jalr	-1968(ra) # 8020490c <pipereadable>
    802050c4:	12054563          	bltz	a0,802051ee <pipereadv+0x17e>
    802050c8:	8aaa                	mv	s5,a0
	for (int i = 0; i < count && ndata > 0; i++) {
    802050ca:	0d205763          	blez	s2,80205198 <pipereadv+0x128>
    802050ce:	10a05e63          	blez	a0,802051ea <pipereadv+0x17a>
    802050d2:	8dce                	mv	s11,s3
    802050d4:	fff9079b          	addiw	a5,s2,-1
    802050d8:	1782                	slli	a5,a5,0x20
    802050da:	9381                	srli	a5,a5,0x20
    802050dc:	0792                	slli	a5,a5,0x4
    802050de:	97ce                	add	a5,a5,s3
    802050e0:	f6f43423          	sd	a5,-152(s0)
	int ndata, ret = 0;
    802050e4:	4b81                	li	s7,0
			char *paddr = pi->pdata + pi->nread % PIPESIZE(pi);
    802050e6:	20000d13          	li	s10,512
		uint64 addr = (uint64)ioarr[i].iov_base;
    802050ea:	000dbc03          	ld	s8,0(s11)
		uint64 n = ioarr[i].iov_len;
    802050ee:	008de903          	lwu	s2,8(s11)
		int m = n < ndata ? n : ndata;
    802050f2:	8b56                	mv	s6,s5
    802050f4:	01597363          	bgeu	s2,s5,802050fa <pipereadv+0x8a>
    802050f8:	8b4a                	mv	s6,s2
    802050fa:	2b01                	sext.w	s6,s6
		struct vma* vma = myproc()->vma;
    802050fc:	00006097          	auipc	ra,0x6
    80205100:	350080e7          	jalr	848(ra) # 8020b44c <myproc>
    80205104:	17053983          	ld	s3,368(a0)
		if (!addr_locate_vma(vma, addr)||!addr_locate_vma(vma, addr+n-1))
    80205108:	85e2                	mv	a1,s8
    8020510a:	854e                	mv	a0,s3
    8020510c:	00006097          	auipc	ra,0x6
    80205110:	526080e7          	jalr	1318(ra) # 8020b632 <addr_locate_vma>
    80205114:	c159                	beqz	a0,8020519a <pipereadv+0x12a>
    80205116:	012c05b3          	add	a1,s8,s2
    8020511a:	15fd                	addi	a1,a1,-1
    8020511c:	854e                	mv	a0,s3
    8020511e:	00006097          	auipc	ra,0x6
    80205122:	514080e7          	jalr	1300(ra) # 8020b632 <addr_locate_vma>
    80205126:	c935                	beqz	a0,8020519a <pipereadv+0x12a>
		for (j = 0; j < m;) {
    80205128:	07605063          	blez	s6,80205188 <pipereadv+0x118>
    8020512c:	4901                	li	s2,0
    8020512e:	a815                	j	80205162 <pipereadv+0xf2>
			int cnt = (pipebound - paddr < m - j) ? pipebound - paddr : m - j;
    80205130:	000a099b          	sext.w	s3,s4
			if (either_copyout(1, addr + j, paddr, cnt) < 0)
    80205134:	86ce                	mv	a3,s3
    80205136:	018905b3          	add	a1,s2,s8
    8020513a:	4505                	li	a0,1
    8020513c:	00006097          	auipc	ra,0x6
    80205140:	d2a080e7          	jalr	-726(ra) # 8020ae66 <either_copyout>
    80205144:	04054b63          	bltz	a0,8020519a <pipereadv+0x12a>
			pi->nread += cnt;
    80205148:	54bc                	lw	a5,104(s1)
    8020514a:	01478a3b          	addw	s4,a5,s4
    8020514e:	0744a423          	sw	s4,104(s1)
			j += cnt;
    80205152:	0129893b          	addw	s2,s3,s2
			ret += cnt;
    80205156:	01798bbb          	addw	s7,s3,s7
			ndata -= cnt;
    8020515a:	413a8abb          	subw	s5,s5,s3
		for (j = 0; j < m;) {
    8020515e:	03695563          	bge	s2,s6,80205188 <pipereadv+0x118>
			char *paddr = pi->pdata + pi->nread % PIPESIZE(pi);
    80205162:	0734c603          	lbu	a2,115(s1)
    80205166:	00cd163b          	sllw	a2,s10,a2
    8020516a:	367d                	addiw	a2,a2,-1
    8020516c:	54bc                	lw	a5,104(s1)
    8020516e:	8e7d                	and	a2,a2,a5
    80205170:	1602                	slli	a2,a2,0x20
    80205172:	9201                	srli	a2,a2,0x20
    80205174:	7cbc                	ld	a5,120(s1)
    80205176:	963e                	add	a2,a2,a5
			int cnt = (pipebound - paddr < m - j) ? pipebound - paddr : m - j;
    80205178:	40cc87b3          	sub	a5,s9,a2
    8020517c:	412b0a3b          	subw	s4,s6,s2
    80205180:	fb47d8e3          	bge	a5,s4,80205130 <pipereadv+0xc0>
    80205184:	8a3e                	mv	s4,a5
    80205186:	b76d                	j	80205130 <pipereadv+0xc0>
	for (int i = 0; i < count && ndata > 0; i++) {
    80205188:	f6843783          	ld	a5,-152(s0)
    8020518c:	00fd8763          	beq	s11,a5,8020519a <pipereadv+0x12a>
    80205190:	0dc1                	addi	s11,s11,16
    80205192:	f5504ce3          	bgtz	s5,802050ea <pipereadv+0x7a>
    80205196:	a011                	j	8020519a <pipereadv+0x12a>
	int ndata, ret = 0;
    80205198:	4b81                	li	s7,0
	acquire(&pi->lock);		// see pipewritable()
    8020519a:	8526                	mv	a0,s1
    8020519c:	00003097          	auipc	ra,0x3
    802051a0:	1da080e7          	jalr	474(ra) # 80208376 <acquire>
	pipewakeup(pi, PIPE_WRITER);
    802051a4:	4585                	li	a1,1
    802051a6:	8526                	mv	a0,s1
    802051a8:	fffff097          	auipc	ra,0xfffff
    802051ac:	5e2080e7          	jalr	1506(ra) # 8020478a <pipewakeup>
	release(&pi->lock);
    802051b0:	8526                	mv	a0,s1
    802051b2:	00003097          	auipc	ra,0x3
    802051b6:	218080e7          	jalr	536(ra) # 802083ca <release>
	pipeunlock(pi, &wait, PIPE_READER);
    802051ba:	4601                	li	a2,0
    802051bc:	f7840593          	addi	a1,s0,-136
    802051c0:	8526                	mv	a0,s1
    802051c2:	fffff097          	auipc	ra,0xfffff
    802051c6:	7f4080e7          	jalr	2036(ra) # 802049b6 <pipeunlock>
}
    802051ca:	855e                	mv	a0,s7
    802051cc:	60ea                	ld	ra,152(sp)
    802051ce:	644a                	ld	s0,144(sp)
    802051d0:	64aa                	ld	s1,136(sp)
    802051d2:	690a                	ld	s2,128(sp)
    802051d4:	79e6                	ld	s3,120(sp)
    802051d6:	7a46                	ld	s4,112(sp)
    802051d8:	7aa6                	ld	s5,104(sp)
    802051da:	7b06                	ld	s6,96(sp)
    802051dc:	6be6                	ld	s7,88(sp)
    802051de:	6c46                	ld	s8,80(sp)
    802051e0:	6ca6                	ld	s9,72(sp)
    802051e2:	6d06                	ld	s10,64(sp)
    802051e4:	7de2                	ld	s11,56(sp)
    802051e6:	610d                	addi	sp,sp,160
    802051e8:	8082                	ret
	int ndata, ret = 0;
    802051ea:	4b81                	li	s7,0
    802051ec:	b77d                	j	8020519a <pipereadv+0x12a>
		ret = -EPIPE;
    802051ee:	5b81                	li	s7,-32
    802051f0:	b7e9                	j	802051ba <pipereadv+0x14a>

00000000802051f2 <fileinit>:

extern int disk_init_flag;

void
fileinit(void)
{
    802051f2:	1141                	addi	sp,sp,-16
    802051f4:	e406                	sd	ra,8(sp)
    802051f6:	e022                	sd	s0,0(sp)
    802051f8:	0800                	addi	s0,sp,16
  disk_init_flag = 0;
    802051fa:	00843797          	auipc	a5,0x843
    802051fe:	fa07a323          	sw	zero,-90(a5) # 80a481a0 <disk_init_flag>
  #ifdef DEBUG
  printf("fileinit\n");
    80205202:	0000d517          	auipc	a0,0xd
    80205206:	2de50513          	addi	a0,a0,734 # 802124e0 <rodata_start+0x4e0>
    8020520a:	00003097          	auipc	ra,0x3
    8020520e:	526080e7          	jalr	1318(ra) # 80208730 <printf>
  #endif
}
    80205212:	60a2                	ld	ra,8(sp)
    80205214:	6402                	ld	s0,0(sp)
    80205216:	0141                	addi	sp,sp,16
    80205218:	8082                	ret

000000008020521a <filealloc>:

// Allocate a file structure.
struct file*
filealloc(void)
{
    8020521a:	1101                	addi	sp,sp,-32
    8020521c:	ec06                	sd	ra,24(sp)
    8020521e:	e822                	sd	s0,16(sp)
    80205220:	e426                	sd	s1,8(sp)
    80205222:	1000                	addi	s0,sp,32
  struct file *f = kmalloc(sizeof(struct file));
    80205224:	07000513          	li	a0,112
    80205228:	00004097          	auipc	ra,0x4
    8020522c:	1e0080e7          	jalr	480(ra) # 80209408 <kmalloc>
    80205230:	84aa                	mv	s1,a0
  memset(f,0,sizeof(struct file));
    80205232:	07000613          	li	a2,112
    80205236:	4581                	li	a1,0
    80205238:	ffffc097          	auipc	ra,0xffffc
    8020523c:	b3c080e7          	jalr	-1220(ra) # 80200d74 <memset>
  f->ref = 1;
    80205240:	4785                	li	a5,1
    80205242:	c0dc                	sw	a5,4(s1)
  initlock(&f->lk,"file lock");
    80205244:	0000d597          	auipc	a1,0xd
    80205248:	2ac58593          	addi	a1,a1,684 # 802124f0 <rodata_start+0x4f0>
    8020524c:	02048513          	addi	a0,s1,32
    80205250:	00003097          	auipc	ra,0x3
    80205254:	0e2080e7          	jalr	226(ra) # 80208332 <initlock>
  return f;
}
    80205258:	8526                	mv	a0,s1
    8020525a:	60e2                	ld	ra,24(sp)
    8020525c:	6442                	ld	s0,16(sp)
    8020525e:	64a2                	ld	s1,8(sp)
    80205260:	6105                	addi	sp,sp,32
    80205262:	8082                	ret

0000000080205264 <filedup>:

// Increment ref count for file f.
struct file*
filedup(struct file *f)
{
    80205264:	1101                	addi	sp,sp,-32
    80205266:	ec06                	sd	ra,24(sp)
    80205268:	e822                	sd	s0,16(sp)
    8020526a:	e426                	sd	s1,8(sp)
    8020526c:	e04a                	sd	s2,0(sp)
    8020526e:	1000                	addi	s0,sp,32
    80205270:	84aa                	mv	s1,a0
  acquire(&f->lk);
    80205272:	02050913          	addi	s2,a0,32
    80205276:	854a                	mv	a0,s2
    80205278:	00003097          	auipc	ra,0x3
    8020527c:	0fe080e7          	jalr	254(ra) # 80208376 <acquire>
  if(f->ref < 1)
    80205280:	40dc                	lw	a5,4(s1)
    80205282:	02f05063          	blez	a5,802052a2 <filedup+0x3e>
    panic("filedup");
  f->ref++;
    80205286:	2785                	addiw	a5,a5,1
    80205288:	c0dc                	sw	a5,4(s1)
  release(&f->lk);
    8020528a:	854a                	mv	a0,s2
    8020528c:	00003097          	auipc	ra,0x3
    80205290:	13e080e7          	jalr	318(ra) # 802083ca <release>
  return f;
}
    80205294:	8526                	mv	a0,s1
    80205296:	60e2                	ld	ra,24(sp)
    80205298:	6442                	ld	s0,16(sp)
    8020529a:	64a2                	ld	s1,8(sp)
    8020529c:	6902                	ld	s2,0(sp)
    8020529e:	6105                	addi	sp,sp,32
    802052a0:	8082                	ret
    panic("filedup");
    802052a2:	0000d517          	auipc	a0,0xd
    802052a6:	25e50513          	addi	a0,a0,606 # 80212500 <rodata_start+0x500>
    802052aa:	00003097          	auipc	ra,0x3
    802052ae:	43c080e7          	jalr	1084(ra) # 802086e6 <panic>

00000000802052b2 <fileclose>:

// Close file f.  (Decrement ref count, close when reaches 0.)
void
fileclose(struct file *f)
{
    802052b2:	1101                	addi	sp,sp,-32
    802052b4:	ec06                	sd	ra,24(sp)
    802052b6:	e822                	sd	s0,16(sp)
    802052b8:	e426                	sd	s1,8(sp)
    802052ba:	e04a                	sd	s2,0(sp)
    802052bc:	1000                	addi	s0,sp,32
    802052be:	84aa                	mv	s1,a0
  acquire(&f->lk);
    802052c0:	02050913          	addi	s2,a0,32
    802052c4:	854a                	mv	a0,s2
    802052c6:	00003097          	auipc	ra,0x3
    802052ca:	0b0080e7          	jalr	176(ra) # 80208376 <acquire>
  if(f->ref < 1)
    802052ce:	40dc                	lw	a5,4(s1)
    802052d0:	02f05f63          	blez	a5,8020530e <fileclose+0x5c>
    panic("fileclose");
  if(--f->ref > 0){
    802052d4:	37fd                	addiw	a5,a5,-1
    802052d6:	0007871b          	sext.w	a4,a5
    802052da:	c0dc                	sw	a5,4(s1)
    802052dc:	04e04163          	bgtz	a4,8020531e <fileclose+0x6c>
    release(&f->lk);
    return;
  }
  release(&f->lk);
    802052e0:	854a                	mv	a0,s2
    802052e2:	00003097          	auipc	ra,0x3
    802052e6:	0e8080e7          	jalr	232(ra) # 802083ca <release>

  if(f->type == FD_PIPE){
    802052ea:	409c                	lw	a5,0(s1)
    802052ec:	4705                	li	a4,1
    802052ee:	02e78e63          	beq	a5,a4,8020532a <fileclose+0x78>
    pipeclose(f->pipe, f->writable);
  } else if(f->type == FD_ENTRY){
    802052f2:	4709                	li	a4,2
    802052f4:	04e78363          	beq	a5,a4,8020533a <fileclose+0x88>
    eput(f->ep);
  } else if (f->type == FD_DEVICE) {

  }
  kfree(f);
    802052f8:	8526                	mv	a0,s1
    802052fa:	00004097          	auipc	ra,0x4
    802052fe:	358080e7          	jalr	856(ra) # 80209652 <kfree>
}
    80205302:	60e2                	ld	ra,24(sp)
    80205304:	6442                	ld	s0,16(sp)
    80205306:	64a2                	ld	s1,8(sp)
    80205308:	6902                	ld	s2,0(sp)
    8020530a:	6105                	addi	sp,sp,32
    8020530c:	8082                	ret
    panic("fileclose");
    8020530e:	0000d517          	auipc	a0,0xd
    80205312:	1fa50513          	addi	a0,a0,506 # 80212508 <rodata_start+0x508>
    80205316:	00003097          	auipc	ra,0x3
    8020531a:	3d0080e7          	jalr	976(ra) # 802086e6 <panic>
    release(&f->lk);
    8020531e:	854a                	mv	a0,s2
    80205320:	00003097          	auipc	ra,0x3
    80205324:	0aa080e7          	jalr	170(ra) # 802083ca <release>
    return;
    80205328:	bfe9                	j	80205302 <fileclose+0x50>
    pipeclose(f->pipe, f->writable);
    8020532a:	0094c583          	lbu	a1,9(s1)
    8020532e:	6888                	ld	a0,16(s1)
    80205330:	fffff097          	auipc	ra,0xfffff
    80205334:	7fc080e7          	jalr	2044(ra) # 80204b2c <pipeclose>
    80205338:	b7c1                	j	802052f8 <fileclose+0x46>
    eput(f->ep);
    8020533a:	6c88                	ld	a0,24(s1)
    8020533c:	ffffe097          	auipc	ra,0xffffe
    80205340:	6ba080e7          	jalr	1722(ra) # 802039f6 <eput>
    80205344:	bf55                	j	802052f8 <fileclose+0x46>

0000000080205346 <fileillegal>:

int fileillegal(struct file* f){
    80205346:	1101                	addi	sp,sp,-32
    80205348:	ec06                	sd	ra,24(sp)
    8020534a:	e822                	sd	s0,16(sp)
    8020534c:	e426                	sd	s1,8(sp)
    8020534e:	e04a                	sd	s2,0(sp)
    80205350:	1000                	addi	s0,sp,32
  switch (f->type) {
    80205352:	411c                	lw	a5,0(a0)
    80205354:	4709                	li	a4,2
    80205356:	00f76b63          	bltu	a4,a5,8020536c <fileillegal+0x26>
    8020535a:	e3ad                	bnez	a5,802053bc <fileillegal+0x76>
        if(f->major < 0 || f->major >= getdevnum() || !devsw[f->major].read || !devsw[f->major].write)
          return 1;
    case FD_ENTRY:
        break;
    default:
      panic("fileillegal");
    8020535c:	0000d517          	auipc	a0,0xd
    80205360:	1bc50513          	addi	a0,a0,444 # 80212518 <rodata_start+0x518>
    80205364:	00003097          	auipc	ra,0x3
    80205368:	382080e7          	jalr	898(ra) # 802086e6 <panic>
    8020536c:	84aa                	mv	s1,a0
  switch (f->type) {
    8020536e:	470d                	li	a4,3
    80205370:	fee796e3          	bne	a5,a4,8020535c <fileillegal+0x16>
        if(f->major < 0 || f->major >= getdevnum() || !devsw[f->major].read || !devsw[f->major].write)
    80205374:	04051903          	lh	s2,64(a0)
          return 1;
    80205378:	4505                	li	a0,1
        if(f->major < 0 || f->major >= getdevnum() || !devsw[f->major].read || !devsw[f->major].write)
    8020537a:	04094263          	bltz	s2,802053be <fileillegal+0x78>
    8020537e:	00002097          	auipc	ra,0x2
    80205382:	57c080e7          	jalr	1404(ra) # 802078fa <getdevnum>
    80205386:	87aa                	mv	a5,a0
    80205388:	2901                	sext.w	s2,s2
          return 1;
    8020538a:	4505                	li	a0,1
        if(f->major < 0 || f->major >= getdevnum() || !devsw[f->major].read || !devsw[f->major].write)
    8020538c:	02f95963          	bge	s2,a5,802053be <fileillegal+0x78>
    80205390:	04049703          	lh	a4,64(s1)
    80205394:	00371793          	slli	a5,a4,0x3
    80205398:	8f99                	sub	a5,a5,a4
    8020539a:	078e                	slli	a5,a5,0x3
    8020539c:	00867697          	auipc	a3,0x867
    802053a0:	8c468693          	addi	a3,a3,-1852 # 80a6bc60 <devsw>
    802053a4:	97b6                	add	a5,a5,a3
    802053a6:	779c                	ld	a5,40(a5)
    802053a8:	c38d                	beqz	a5,802053ca <fileillegal+0x84>
    802053aa:	00371793          	slli	a5,a4,0x3
    802053ae:	8f99                	sub	a5,a5,a4
    802053b0:	078e                	slli	a5,a5,0x3
    802053b2:	97b6                	add	a5,a5,a3
    802053b4:	7b88                	ld	a0,48(a5)
          return 1;
    802053b6:	00153513          	seqz	a0,a0
    802053ba:	a011                	j	802053be <fileillegal+0x78>
  switch (f->type) {
    802053bc:	4501                	li	a0,0
      return 1;
  }
  return 0;
}
    802053be:	60e2                	ld	ra,24(sp)
    802053c0:	6442                	ld	s0,16(sp)
    802053c2:	64a2                	ld	s1,8(sp)
    802053c4:	6902                	ld	s2,0(sp)
    802053c6:	6105                	addi	sp,sp,32
    802053c8:	8082                	ret
          return 1;
    802053ca:	4505                	li	a0,1
    802053cc:	bfcd                	j	802053be <fileillegal+0x78>

00000000802053ce <print_f_info>:

void print_f_info(struct file* f){
    802053ce:	1141                	addi	sp,sp,-16
    802053d0:	e406                	sd	ra,8(sp)
    802053d2:	e022                	sd	s0,0(sp)
    802053d4:	0800                	addi	s0,sp,16
  switch (f->type) {
    802053d6:	411c                	lw	a5,0(a0)
    802053d8:	4709                	li	a4,2
    802053da:	04e78863          	beq	a5,a4,8020542a <print_f_info+0x5c>
    802053de:	00f76f63          	bltu	a4,a5,802053fc <print_f_info+0x2e>
    802053e2:	cfb1                	beqz	a5,8020543e <print_f_info+0x70>
    case FD_PIPE:
        printf("[file]PIPE\n");
    802053e4:	0000d517          	auipc	a0,0xd
    802053e8:	14450513          	addi	a0,a0,324 # 80212528 <rodata_start+0x528>
    802053ec:	00003097          	auipc	ra,0x3
    802053f0:	344080e7          	jalr	836(ra) # 80208730 <printf>
    case FD_NONE:
        printf("[file]NONE\n");
    	return;
  }

}
    802053f4:	60a2                	ld	ra,8(sp)
    802053f6:	6402                	ld	s0,0(sp)
    802053f8:	0141                	addi	sp,sp,16
    802053fa:	8082                	ret
  switch (f->type) {
    802053fc:	470d                	li	a4,3
    802053fe:	fee79be3          	bne	a5,a4,802053f4 <print_f_info+0x26>
        printf("[file]DEVICE name:%s\n",devsw[f->major].name);
    80205402:	04051583          	lh	a1,64(a0)
    80205406:	00359793          	slli	a5,a1,0x3
    8020540a:	8f8d                	sub	a5,a5,a1
    8020540c:	078e                	slli	a5,a5,0x3
    8020540e:	00867597          	auipc	a1,0x867
    80205412:	85258593          	addi	a1,a1,-1966 # 80a6bc60 <devsw>
    80205416:	95be                	add	a1,a1,a5
    80205418:	0000d517          	auipc	a0,0xd
    8020541c:	12050513          	addi	a0,a0,288 # 80212538 <rodata_start+0x538>
    80205420:	00003097          	auipc	ra,0x3
    80205424:	310080e7          	jalr	784(ra) # 80208730 <printf>
        break;
    80205428:	b7f1                	j	802053f4 <print_f_info+0x26>
        printf("[file]ENTRY name:%s\n",f->ep->filename);
    8020542a:	6d0c                	ld	a1,24(a0)
    8020542c:	0000d517          	auipc	a0,0xd
    80205430:	12450513          	addi	a0,a0,292 # 80212550 <rodata_start+0x550>
    80205434:	00003097          	auipc	ra,0x3
    80205438:	2fc080e7          	jalr	764(ra) # 80208730 <printf>
        break;
    8020543c:	bf65                	j	802053f4 <print_f_info+0x26>
        printf("[file]NONE\n");
    8020543e:	0000d517          	auipc	a0,0xd
    80205442:	12a50513          	addi	a0,a0,298 # 80212568 <rodata_start+0x568>
    80205446:	00003097          	auipc	ra,0x3
    8020544a:	2ea080e7          	jalr	746(ra) # 80208730 <printf>
    	return;
    8020544e:	b75d                	j	802053f4 <print_f_info+0x26>

0000000080205450 <fileiolock>:

void fileiolock(struct file* f){
    80205450:	1141                	addi	sp,sp,-16
    80205452:	e406                	sd	ra,8(sp)
    80205454:	e022                	sd	s0,0(sp)
    80205456:	0800                	addi	s0,sp,16
  switch (f->type) {
    80205458:	411c                	lw	a5,0(a0)
    8020545a:	4709                	li	a4,2
    8020545c:	02e78863          	beq	a5,a4,8020548c <fileiolock+0x3c>
    80205460:	470d                	li	a4,3
    80205462:	02e79163          	bne	a5,a4,80205484 <fileiolock+0x34>
    case FD_PIPE:
        break;
    case FD_DEVICE:
        acquire(&(devsw + f->major)->lk);
    80205466:	04051503          	lh	a0,64(a0)
    8020546a:	00351793          	slli	a5,a0,0x3
    8020546e:	8f89                	sub	a5,a5,a0
    80205470:	078e                	slli	a5,a5,0x3
    80205472:	00866517          	auipc	a0,0x866
    80205476:	7fe50513          	addi	a0,a0,2046 # 80a6bc70 <devsw+0x10>
    8020547a:	953e                	add	a0,a0,a5
    8020547c:	00003097          	auipc	ra,0x3
    80205480:	efa080e7          	jalr	-262(ra) # 80208376 <acquire>
        elock(f->ep);
        break;
    case FD_NONE:
    	return;
  }
}
    80205484:	60a2                	ld	ra,8(sp)
    80205486:	6402                	ld	s0,0(sp)
    80205488:	0141                	addi	sp,sp,16
    8020548a:	8082                	ret
        elock(f->ep);
    8020548c:	6d08                	ld	a0,24(a0)
    8020548e:	ffffe097          	auipc	ra,0xffffe
    80205492:	4e4080e7          	jalr	1252(ra) # 80203972 <elock>
        break;
    80205496:	b7fd                	j	80205484 <fileiolock+0x34>

0000000080205498 <fileiounlock>:

void fileiounlock(struct file* f){
    80205498:	1141                	addi	sp,sp,-16
    8020549a:	e406                	sd	ra,8(sp)
    8020549c:	e022                	sd	s0,0(sp)
    8020549e:	0800                	addi	s0,sp,16
  switch (f->type) {
    802054a0:	411c                	lw	a5,0(a0)
    802054a2:	4709                	li	a4,2
    802054a4:	02e78863          	beq	a5,a4,802054d4 <fileiounlock+0x3c>
    802054a8:	470d                	li	a4,3
    802054aa:	02e79163          	bne	a5,a4,802054cc <fileiounlock+0x34>
    case FD_PIPE:
        break;
    case FD_DEVICE:
        release(&(devsw + f->major)->lk);
    802054ae:	04051503          	lh	a0,64(a0)
    802054b2:	00351793          	slli	a5,a0,0x3
    802054b6:	8f89                	sub	a5,a5,a0
    802054b8:	078e                	slli	a5,a5,0x3
    802054ba:	00866517          	auipc	a0,0x866
    802054be:	7b650513          	addi	a0,a0,1974 # 80a6bc70 <devsw+0x10>
    802054c2:	953e                	add	a0,a0,a5
    802054c4:	00003097          	auipc	ra,0x3
    802054c8:	f06080e7          	jalr	-250(ra) # 802083ca <release>
        eunlock(f->ep);
        break;
    case FD_NONE:
    	return;
  }
}
    802054cc:	60a2                	ld	ra,8(sp)
    802054ce:	6402                	ld	s0,0(sp)
    802054d0:	0141                	addi	sp,sp,16
    802054d2:	8082                	ret
        eunlock(f->ep);
    802054d4:	6d08                	ld	a0,24(a0)
    802054d6:	ffffe097          	auipc	ra,0xffffe
    802054da:	4d2080e7          	jalr	1234(ra) # 802039a8 <eunlock>
        break;
    802054de:	b7fd                	j	802054cc <fileiounlock+0x34>

00000000802054e0 <fileinput>:

uint64
fileinput(struct file* f, int user, uint64 addr, int n, uint64 off){
    802054e0:	1141                	addi	sp,sp,-16
    802054e2:	e406                	sd	ra,8(sp)
    802054e4:	e022                	sd	s0,0(sp)
    802054e6:	0800                	addi	s0,sp,16
    802054e8:	87aa                	mv	a5,a0
    802054ea:	88ae                	mv	a7,a1
    802054ec:	85b2                	mv	a1,a2
    802054ee:	863a                	mv	a2,a4
  uint64 r = 0;
  switch (f->type) {
    802054f0:	00052803          	lw	a6,0(a0)
    802054f4:	4709                	li	a4,2
    802054f6:	04e80563          	beq	a6,a4,80205540 <fileinput+0x60>
    802054fa:	470d                	li	a4,3
    802054fc:	02e80263          	beq	a6,a4,80205520 <fileinput+0x40>
    80205500:	4705                	li	a4,1
    80205502:	4501                	li	a0,0
    80205504:	00e80663          	beq	a6,a4,80205510 <fileinput+0x30>
        break;
    case FD_NONE:
    	return 0;
  }
  return r;
}
    80205508:	60a2                	ld	ra,8(sp)
    8020550a:	6402                	ld	s0,0(sp)
    8020550c:	0141                	addi	sp,sp,16
    8020550e:	8082                	ret
        r = piperead(f->pipe, user, addr, n);
    80205510:	862e                	mv	a2,a1
    80205512:	85c6                	mv	a1,a7
    80205514:	6b88                	ld	a0,16(a5)
    80205516:	00000097          	auipc	ra,0x0
    8020551a:	85c080e7          	jalr	-1956(ra) # 80204d72 <piperead>
        break;
    8020551e:	b7ed                	j	80205508 <fileinput+0x28>
        r = (devsw + f->major)->read(user, addr, n);
    80205520:	04051703          	lh	a4,64(a0)
    80205524:	00371793          	slli	a5,a4,0x3
    80205528:	8f99                	sub	a5,a5,a4
    8020552a:	078e                	slli	a5,a5,0x3
    8020552c:	00866717          	auipc	a4,0x866
    80205530:	73470713          	addi	a4,a4,1844 # 80a6bc60 <devsw>
    80205534:	97ba                	add	a5,a5,a4
    80205536:	779c                	ld	a5,40(a5)
    80205538:	8636                	mv	a2,a3
    8020553a:	8546                	mv	a0,a7
    8020553c:	9782                	jalr	a5
        break;
    8020553e:	b7e9                	j	80205508 <fileinput+0x28>
        r = eread(f->ep, user, addr, off, n);
    80205540:	8736                	mv	a4,a3
    80205542:	0006069b          	sext.w	a3,a2
    80205546:	862e                	mv	a2,a1
    80205548:	85c6                	mv	a1,a7
    8020554a:	6d08                	ld	a0,24(a0)
    8020554c:	ffffe097          	auipc	ra,0xffffe
    80205550:	a46080e7          	jalr	-1466(ra) # 80202f92 <eread>
        break;
    80205554:	bf55                	j	80205508 <fileinput+0x28>

0000000080205556 <fileoutput>:

uint64
fileoutput(struct file* f, int user, uint64 addr, int n, uint64 off){
    80205556:	1141                	addi	sp,sp,-16
    80205558:	e406                	sd	ra,8(sp)
    8020555a:	e022                	sd	s0,0(sp)
    8020555c:	0800                	addi	s0,sp,16
    8020555e:	87aa                	mv	a5,a0
    80205560:	88ae                	mv	a7,a1
    80205562:	85b2                	mv	a1,a2
    80205564:	863a                	mv	a2,a4
  uint64 r = 0;
  switch (f->type) {
    80205566:	00052803          	lw	a6,0(a0)
    8020556a:	4709                	li	a4,2
    8020556c:	04e80563          	beq	a6,a4,802055b6 <fileoutput+0x60>
    80205570:	470d                	li	a4,3
    80205572:	02e80263          	beq	a6,a4,80205596 <fileoutput+0x40>
    80205576:	4705                	li	a4,1
    80205578:	4501                	li	a0,0
    8020557a:	00e80663          	beq	a6,a4,80205586 <fileoutput+0x30>
        break;
    case FD_NONE:
    	return 0;
  }
  return r;
}
    8020557e:	60a2                	ld	ra,8(sp)
    80205580:	6402                	ld	s0,0(sp)
    80205582:	0141                	addi	sp,sp,16
    80205584:	8082                	ret
        r = pipewrite(f->pipe, user, addr, n);
    80205586:	862e                	mv	a2,a1
    80205588:	85c6                	mv	a1,a7
    8020558a:	6b88                	ld	a0,16(a5)
    8020558c:	fffff097          	auipc	ra,0xfffff
    80205590:	624080e7          	jalr	1572(ra) # 80204bb0 <pipewrite>
        break;
    80205594:	b7ed                	j	8020557e <fileoutput+0x28>
        r = (devsw + f->major)->write(user, addr, n);
    80205596:	04051703          	lh	a4,64(a0)
    8020559a:	00371793          	slli	a5,a4,0x3
    8020559e:	8f99                	sub	a5,a5,a4
    802055a0:	078e                	slli	a5,a5,0x3
    802055a2:	00866717          	auipc	a4,0x866
    802055a6:	6be70713          	addi	a4,a4,1726 # 80a6bc60 <devsw>
    802055aa:	97ba                	add	a5,a5,a4
    802055ac:	7b9c                	ld	a5,48(a5)
    802055ae:	8636                	mv	a2,a3
    802055b0:	8546                	mv	a0,a7
    802055b2:	9782                	jalr	a5
        break;
    802055b4:	b7e9                	j	8020557e <fileoutput+0x28>
        r = ewrite(f->ep, user, addr, off, n);
    802055b6:	8736                	mv	a4,a3
    802055b8:	0006069b          	sext.w	a3,a2
    802055bc:	862e                	mv	a2,a1
    802055be:	85c6                	mv	a1,a7
    802055c0:	6d08                	ld	a0,24(a0)
    802055c2:	ffffe097          	auipc	ra,0xffffe
    802055c6:	ae6080e7          	jalr	-1306(ra) # 802030a8 <ewrite>
        break;
    802055ca:	bf55                	j	8020557e <fileoutput+0x28>

00000000802055cc <filestat>:
filestat(struct file *f, uint64 addr)
{
  // struct proc *p = myproc();
  struct stat st;
  
  if(f->type == FD_ENTRY){
    802055cc:	4118                	lw	a4,0(a0)
    802055ce:	4789                	li	a5,2
    802055d0:	04f71d63          	bne	a4,a5,8020562a <filestat+0x5e>
{
    802055d4:	711d                	addi	sp,sp,-96
    802055d6:	ec86                	sd	ra,88(sp)
    802055d8:	e8a2                	sd	s0,80(sp)
    802055da:	e4a6                	sd	s1,72(sp)
    802055dc:	e0ca                	sd	s2,64(sp)
    802055de:	1080                	addi	s0,sp,96
    802055e0:	84aa                	mv	s1,a0
    802055e2:	892e                	mv	s2,a1
    elock(f->ep);
    802055e4:	6d08                	ld	a0,24(a0)
    802055e6:	ffffe097          	auipc	ra,0xffffe
    802055ea:	38c080e7          	jalr	908(ra) # 80203972 <elock>
    estat(f->ep, &st);
    802055ee:	fa840593          	addi	a1,s0,-88
    802055f2:	6c88                	ld	a0,24(s1)
    802055f4:	ffffe097          	auipc	ra,0xffffe
    802055f8:	54e080e7          	jalr	1358(ra) # 80203b42 <estat>
    eunlock(f->ep);
    802055fc:	6c88                	ld	a0,24(s1)
    802055fe:	ffffe097          	auipc	ra,0xffffe
    80205602:	3aa080e7          	jalr	938(ra) # 802039a8 <eunlock>
    // if(copyout(p->pagetable, addr, (char *)&st, sizeof(st)) < 0)
    if(either_copyout(1, addr, (char *)&st, sizeof(st)) < 0)
    80205606:	03800693          	li	a3,56
    8020560a:	fa840613          	addi	a2,s0,-88
    8020560e:	85ca                	mv	a1,s2
    80205610:	4505                	li	a0,1
    80205612:	00006097          	auipc	ra,0x6
    80205616:	854080e7          	jalr	-1964(ra) # 8020ae66 <either_copyout>
    8020561a:	41f5551b          	sraiw	a0,a0,0x1f
      return -1;
    return 0;
  }
  return -1;
}
    8020561e:	60e6                	ld	ra,88(sp)
    80205620:	6446                	ld	s0,80(sp)
    80205622:	64a6                	ld	s1,72(sp)
    80205624:	6906                	ld	s2,64(sp)
    80205626:	6125                	addi	sp,sp,96
    80205628:	8082                	ret
  return -1;
    8020562a:	557d                	li	a0,-1
}
    8020562c:	8082                	ret

000000008020562e <fileoff>:
void fileoff(struct file* f,uint64 off){
    8020562e:	7179                	addi	sp,sp,-48
    80205630:	f406                	sd	ra,40(sp)
    80205632:	f022                	sd	s0,32(sp)
    80205634:	ec26                	sd	s1,24(sp)
    80205636:	e84a                	sd	s2,16(sp)
    80205638:	e44e                	sd	s3,8(sp)
    8020563a:	1800                	addi	s0,sp,48
    8020563c:	84aa                	mv	s1,a0
    8020563e:	892e                	mv	s2,a1
  acquire(&f->lk);
    80205640:	02050993          	addi	s3,a0,32
    80205644:	854e                	mv	a0,s3
    80205646:	00003097          	auipc	ra,0x3
    8020564a:	d30080e7          	jalr	-720(ra) # 80208376 <acquire>
  f->off+=off;
    8020564e:	7c9c                	ld	a5,56(s1)
    80205650:	012785b3          	add	a1,a5,s2
    80205654:	fc8c                	sd	a1,56(s1)
  release(&f->lk);
    80205656:	854e                	mv	a0,s3
    80205658:	00003097          	auipc	ra,0x3
    8020565c:	d72080e7          	jalr	-654(ra) # 802083ca <release>
}
    80205660:	70a2                	ld	ra,40(sp)
    80205662:	7402                	ld	s0,32(sp)
    80205664:	64e2                	ld	s1,24(sp)
    80205666:	6942                	ld	s2,16(sp)
    80205668:	69a2                	ld	s3,8(sp)
    8020566a:	6145                	addi	sp,sp,48
    8020566c:	8082                	ret

000000008020566e <filekstat>:

// Get metadata about file f.
// addr is a user virtual address, pointing to a struct stat.
int
filekstat(struct file *f, uint64 addr)
{
    8020566e:	7171                	addi	sp,sp,-176
    80205670:	f506                	sd	ra,168(sp)
    80205672:	f122                	sd	s0,160(sp)
    80205674:	ed26                	sd	s1,152(sp)
    80205676:	e94a                	sd	s2,144(sp)
    80205678:	e54e                	sd	s3,136(sp)
    8020567a:	1900                	addi	s0,sp,176
    8020567c:	84aa                	mv	s1,a0
    8020567e:	892e                	mv	s2,a1
  //struct proc *p = myproc();
  struct kstat kst;

  if(f->type == FD_ENTRY){
    80205680:	411c                	lw	a5,0(a0)
    80205682:	4709                	li	a4,2
    80205684:	08e78863          	beq	a5,a4,80205714 <filekstat+0xa6>
    kst.st_mtime_nsec = f->t1_sec;
    if(kst.st_mtime_sec == 0x000000003ffffffe)kst.st_mtime_sec = 0;
    if(kst.st_atime_sec == 0x000000003ffffffe)kst.st_atime_sec = 0;
    if(kst.st_mtime_nsec == 0x0000000100000000)kst.st_mtime_sec = 0x0000000100000000;
    if(kst.st_atime_nsec == 0x0000000100000000)kst.st_atime_sec = 0x0000000100000000;
  }else if(f->type == FD_DEVICE){
    80205688:	470d                	li	a4,3
    8020568a:	10e79463          	bne	a5,a4,80205792 <filekstat+0x124>
    if(f->major < 0 || f->major >= getdevnum() || !devsw[f->major].read)
    8020568e:	04051983          	lh	s3,64(a0)
    80205692:	1009c263          	bltz	s3,80205796 <filekstat+0x128>
    80205696:	00002097          	auipc	ra,0x2
    8020569a:	264080e7          	jalr	612(ra) # 802078fa <getdevnum>
    8020569e:	2981                	sext.w	s3,s3
    802056a0:	0ea9dd63          	bge	s3,a0,8020579a <filekstat+0x12c>
    802056a4:	04049703          	lh	a4,64(s1)
    802056a8:	00371793          	slli	a5,a4,0x3
    802056ac:	8f99                	sub	a5,a5,a4
    802056ae:	078e                	slli	a5,a5,0x3
    802056b0:	00866697          	auipc	a3,0x866
    802056b4:	5b068693          	addi	a3,a3,1456 # 80a6bc60 <devsw>
    802056b8:	97b6                	add	a5,a5,a3
    802056ba:	779c                	ld	a5,40(a5)
    802056bc:	c3ed                	beqz	a5,8020579e <filekstat+0x130>
          return -1;
    struct devsw* mydev = devsw + f->major;
    802056be:	00371493          	slli	s1,a4,0x3
    802056c2:	8c99                	sub	s1,s1,a4
    802056c4:	048e                	slli	s1,s1,0x3
    802056c6:	94b6                	add	s1,s1,a3
    acquire(&mydev->lk);
    802056c8:	01048993          	addi	s3,s1,16
    802056cc:	854e                	mv	a0,s3
    802056ce:	00003097          	auipc	ra,0x3
    802056d2:	ca8080e7          	jalr	-856(ra) # 80208376 <acquire>
    devkstat(mydev,&kst);
    802056d6:	f5040593          	addi	a1,s0,-176
    802056da:	8526                	mv	a0,s1
    802056dc:	00002097          	auipc	ra,0x2
    802056e0:	638080e7          	jalr	1592(ra) # 80207d14 <devkstat>
    release(&mydev->lk);
    802056e4:	854e                	mv	a0,s3
    802056e6:	00003097          	auipc	ra,0x3
    802056ea:	ce4080e7          	jalr	-796(ra) # 802083ca <release>
  }else {
    return -1;
  }    
  if(either_copyout(1, addr, (char *)&kst, sizeof(kst)) < 0)
    802056ee:	08000693          	li	a3,128
    802056f2:	f5040613          	addi	a2,s0,-176
    802056f6:	85ca                	mv	a1,s2
    802056f8:	4505                	li	a0,1
    802056fa:	00005097          	auipc	ra,0x5
    802056fe:	76c080e7          	jalr	1900(ra) # 8020ae66 <either_copyout>
    80205702:	41f5551b          	sraiw	a0,a0,0x1f
    // if(copyout2(addr, (char *)&kst, sizeof(kst)) < 0)
      return -1;
  return 0;
}
    80205706:	70aa                	ld	ra,168(sp)
    80205708:	740a                	ld	s0,160(sp)
    8020570a:	64ea                	ld	s1,152(sp)
    8020570c:	694a                	ld	s2,144(sp)
    8020570e:	69aa                	ld	s3,136(sp)
    80205710:	614d                	addi	sp,sp,176
    80205712:	8082                	ret
    elock(f->ep);
    80205714:	6d08                	ld	a0,24(a0)
    80205716:	ffffe097          	auipc	ra,0xffffe
    8020571a:	25c080e7          	jalr	604(ra) # 80203972 <elock>
    ekstat(f->ep, &kst);
    8020571e:	f5040593          	addi	a1,s0,-176
    80205722:	6c88                	ld	a0,24(s1)
    80205724:	fffff097          	auipc	ra,0xfffff
    80205728:	b9c080e7          	jalr	-1124(ra) # 802042c0 <ekstat>
    eunlock(f->ep);
    8020572c:	6c88                	ld	a0,24(s1)
    8020572e:	ffffe097          	auipc	ra,0xffffe
    80205732:	27a080e7          	jalr	634(ra) # 802039a8 <eunlock>
    kst.st_atime_sec = f->t0_nsec;
    80205736:	6cb0                	ld	a2,88(s1)
    80205738:	f8c43c23          	sd	a2,-104(s0)
    kst.st_atime_nsec = f->t0_sec;
    8020573c:	68b8                	ld	a4,80(s1)
    8020573e:	fae43023          	sd	a4,-96(s0)
    kst.st_mtime_sec = f->t1_nsec;
    80205742:	74ac                	ld	a1,104(s1)
    80205744:	fab43423          	sd	a1,-88(s0)
    kst.st_mtime_nsec = f->t1_sec;
    80205748:	70b4                	ld	a3,96(s1)
    8020574a:	fad43823          	sd	a3,-80(s0)
    if(kst.st_mtime_sec == 0x000000003ffffffe)kst.st_mtime_sec = 0;
    8020574e:	400007b7          	lui	a5,0x40000
    80205752:	17f9                	addi	a5,a5,-2
    80205754:	02f58463          	beq	a1,a5,8020577c <filekstat+0x10e>
    if(kst.st_atime_sec == 0x000000003ffffffe)kst.st_atime_sec = 0;
    80205758:	400007b7          	lui	a5,0x40000
    8020575c:	17f9                	addi	a5,a5,-2
    8020575e:	02f60263          	beq	a2,a5,80205782 <filekstat+0x114>
    if(kst.st_mtime_nsec == 0x0000000100000000)kst.st_mtime_sec = 0x0000000100000000;
    80205762:	4785                	li	a5,1
    80205764:	1782                	slli	a5,a5,0x20
    80205766:	02f68163          	beq	a3,a5,80205788 <filekstat+0x11a>
    if(kst.st_atime_nsec == 0x0000000100000000)kst.st_atime_sec = 0x0000000100000000;
    8020576a:	4785                	li	a5,1
    8020576c:	1782                	slli	a5,a5,0x20
    8020576e:	f8f710e3          	bne	a4,a5,802056ee <filekstat+0x80>
    80205772:	4785                	li	a5,1
    80205774:	1782                	slli	a5,a5,0x20
    80205776:	f8f43c23          	sd	a5,-104(s0)
    8020577a:	bf95                	j	802056ee <filekstat+0x80>
    if(kst.st_mtime_sec == 0x000000003ffffffe)kst.st_mtime_sec = 0;
    8020577c:	fa043423          	sd	zero,-88(s0)
    80205780:	bfe1                	j	80205758 <filekstat+0xea>
    if(kst.st_atime_sec == 0x000000003ffffffe)kst.st_atime_sec = 0;
    80205782:	f8043c23          	sd	zero,-104(s0)
    80205786:	bff1                	j	80205762 <filekstat+0xf4>
    if(kst.st_mtime_nsec == 0x0000000100000000)kst.st_mtime_sec = 0x0000000100000000;
    80205788:	4785                	li	a5,1
    8020578a:	1782                	slli	a5,a5,0x20
    8020578c:	faf43423          	sd	a5,-88(s0)
    80205790:	bfe9                	j	8020576a <filekstat+0xfc>
    return -1;
    80205792:	557d                	li	a0,-1
    80205794:	bf8d                	j	80205706 <filekstat+0x98>
          return -1;
    80205796:	557d                	li	a0,-1
    80205798:	b7bd                	j	80205706 <filekstat+0x98>
    8020579a:	557d                	li	a0,-1
    8020579c:	b7ad                	j	80205706 <filekstat+0x98>
    8020579e:	557d                	li	a0,-1
    802057a0:	b79d                	j	80205706 <filekstat+0x98>

00000000802057a2 <fileread>:

// Read from file f.
// addr is a user virtual address.
int
fileread(struct file *f, uint64 addr, int n)
{
    802057a2:	7179                	addi	sp,sp,-48
    802057a4:	f406                	sd	ra,40(sp)
    802057a6:	f022                	sd	s0,32(sp)
    802057a8:	ec26                	sd	s1,24(sp)
    802057aa:	e84a                	sd	s2,16(sp)
    802057ac:	e44e                	sd	s3,8(sp)
    802057ae:	e052                	sd	s4,0(sp)
    802057b0:	1800                	addi	s0,sp,48
  int r = 0;
  if(f->readable == 0){
    802057b2:	00854783          	lbu	a5,8(a0)
    802057b6:	cbed                	beqz	a5,802058a8 <fileread+0x106>
    802057b8:	84aa                	mv	s1,a0
    802057ba:	892e                	mv	s2,a1
    802057bc:	89b2                	mv	s3,a2
    return -1;
  }
  //printf("[file read]\n");
  //print_f_info(f);
  switch (f->type) {
    802057be:	411c                	lw	a5,0(a0)
    802057c0:	4709                	li	a4,2
    802057c2:	0ae78963          	beq	a5,a4,80205874 <fileread+0xd2>
    802057c6:	470d                	li	a4,3
    802057c8:	04e78663          	beq	a5,a4,80205814 <fileread+0x72>
    802057cc:	4705                	li	a4,1
    802057ce:	00e78a63          	beq	a5,a4,802057e2 <fileread+0x40>
        if((r = eread(f->ep, 1, addr, f->off, n)) > 0)
          f->off += r;
        eunlock(f->ep);
        break;
    default:
      panic("fileread");
    802057d2:	0000d517          	auipc	a0,0xd
    802057d6:	da650513          	addi	a0,a0,-602 # 80212578 <rodata_start+0x578>
    802057da:	00003097          	auipc	ra,0x3
    802057de:	f0c080e7          	jalr	-244(ra) # 802086e6 <panic>
        r = piperead(f->pipe, 1, addr, n);
    802057e2:	86b2                	mv	a3,a2
    802057e4:	862e                	mv	a2,a1
    802057e6:	4585                	li	a1,1
    802057e8:	6908                	ld	a0,16(a0)
    802057ea:	fffff097          	auipc	ra,0xfffff
    802057ee:	588080e7          	jalr	1416(ra) # 80204d72 <piperead>
        if(r<0)r = 0;
    802057f2:	fff54913          	not	s2,a0
    802057f6:	43f95913          	srai	s2,s2,0x3f
    802057fa:	01257533          	and	a0,a0,s2
    802057fe:	0005091b          	sext.w	s2,a0
  }
  // printf("[file read] r:%p\n",r);
  return r;
}
    80205802:	854a                	mv	a0,s2
    80205804:	70a2                	ld	ra,40(sp)
    80205806:	7402                	ld	s0,32(sp)
    80205808:	64e2                	ld	s1,24(sp)
    8020580a:	6942                	ld	s2,16(sp)
    8020580c:	69a2                	ld	s3,8(sp)
    8020580e:	6a02                	ld	s4,0(sp)
    80205810:	6145                	addi	sp,sp,48
    80205812:	8082                	ret
        if(f->major < 0 || f->major >= getdevnum() || !devsw[f->major].read)
    80205814:	04051a03          	lh	s4,64(a0)
    80205818:	080a4a63          	bltz	s4,802058ac <fileread+0x10a>
    8020581c:	00002097          	auipc	ra,0x2
    80205820:	0de080e7          	jalr	222(ra) # 802078fa <getdevnum>
    80205824:	2a01                	sext.w	s4,s4
    80205826:	08aa5563          	bge	s4,a0,802058b0 <fileread+0x10e>
    8020582a:	04049703          	lh	a4,64(s1)
    8020582e:	00371793          	slli	a5,a4,0x3
    80205832:	8f99                	sub	a5,a5,a4
    80205834:	078e                	slli	a5,a5,0x3
    80205836:	00866697          	auipc	a3,0x866
    8020583a:	42a68693          	addi	a3,a3,1066 # 80a6bc60 <devsw>
    8020583e:	97b6                	add	a5,a5,a3
    80205840:	779c                	ld	a5,40(a5)
    80205842:	cbad                	beqz	a5,802058b4 <fileread+0x112>
        struct devsw* mydev = devsw + f->major;
    80205844:	00371493          	slli	s1,a4,0x3
    80205848:	8c99                	sub	s1,s1,a4
    8020584a:	048e                	slli	s1,s1,0x3
    8020584c:	94b6                	add	s1,s1,a3
        acquire(&mydev->lk);
    8020584e:	01048a13          	addi	s4,s1,16
    80205852:	8552                	mv	a0,s4
    80205854:	00003097          	auipc	ra,0x3
    80205858:	b22080e7          	jalr	-1246(ra) # 80208376 <acquire>
        r = mydev->read(1, addr, n);
    8020585c:	749c                	ld	a5,40(s1)
    8020585e:	864e                	mv	a2,s3
    80205860:	85ca                	mv	a1,s2
    80205862:	4505                	li	a0,1
    80205864:	9782                	jalr	a5
    80205866:	892a                	mv	s2,a0
        release(&mydev->lk);
    80205868:	8552                	mv	a0,s4
    8020586a:	00003097          	auipc	ra,0x3
    8020586e:	b60080e7          	jalr	-1184(ra) # 802083ca <release>
        break;
    80205872:	bf41                	j	80205802 <fileread+0x60>
        elock(f->ep);
    80205874:	6d08                	ld	a0,24(a0)
    80205876:	ffffe097          	auipc	ra,0xffffe
    8020587a:	0fc080e7          	jalr	252(ra) # 80203972 <elock>
        if((r = eread(f->ep, 1, addr, f->off, n)) > 0)
    8020587e:	874e                	mv	a4,s3
    80205880:	5c94                	lw	a3,56(s1)
    80205882:	864a                	mv	a2,s2
    80205884:	4585                	li	a1,1
    80205886:	6c88                	ld	a0,24(s1)
    80205888:	ffffd097          	auipc	ra,0xffffd
    8020588c:	70a080e7          	jalr	1802(ra) # 80202f92 <eread>
    80205890:	892a                	mv	s2,a0
    80205892:	00a05563          	blez	a0,8020589c <fileread+0xfa>
          f->off += r;
    80205896:	7c9c                	ld	a5,56(s1)
    80205898:	97aa                	add	a5,a5,a0
    8020589a:	fc9c                	sd	a5,56(s1)
        eunlock(f->ep);
    8020589c:	6c88                	ld	a0,24(s1)
    8020589e:	ffffe097          	auipc	ra,0xffffe
    802058a2:	10a080e7          	jalr	266(ra) # 802039a8 <eunlock>
        break;
    802058a6:	bfb1                	j	80205802 <fileread+0x60>
    return -1;
    802058a8:	597d                	li	s2,-1
    802058aa:	bfa1                	j	80205802 <fileread+0x60>
          return -1;
    802058ac:	597d                	li	s2,-1
    802058ae:	bf91                	j	80205802 <fileread+0x60>
    802058b0:	597d                	li	s2,-1
    802058b2:	bf81                	j	80205802 <fileread+0x60>
    802058b4:	597d                	li	s2,-1
    802058b6:	b7b1                	j	80205802 <fileread+0x60>

00000000802058b8 <filewrite>:

// Write to file f.
// addr is a user virtual address.
int
filewrite(struct file *f, uint64 addr, int n)
{
    802058b8:	7179                	addi	sp,sp,-48
    802058ba:	f406                	sd	ra,40(sp)
    802058bc:	f022                	sd	s0,32(sp)
    802058be:	ec26                	sd	s1,24(sp)
    802058c0:	e84a                	sd	s2,16(sp)
    802058c2:	e44e                	sd	s3,8(sp)
    802058c4:	e052                	sd	s4,0(sp)
    802058c6:	1800                	addi	s0,sp,48
    802058c8:	89b2                	mv	s3,a2
  int ret = 0;
  //printf("major:%d off:%p\n",f->major,consolewrite-(char*)(devsw[f->major].write));
  if(!n)return 0;
    802058ca:	c675                	beqz	a2,802059b6 <filewrite+0xfe>
    802058cc:	84aa                	mv	s1,a0
    802058ce:	892e                	mv	s2,a1
  //print_f_info(f);
  //printf("[filewrite] addr:%p n:%p \n",addr,n);
  if(f->writable == 0)
    802058d0:	00954783          	lbu	a5,9(a0)
    802058d4:	c3fd                	beqz	a5,802059ba <filewrite+0x102>
    return -1;
  if(f->type == FD_PIPE){
    802058d6:	411c                	lw	a5,0(a0)
    802058d8:	4705                	li	a4,1
    802058da:	04e78763          	beq	a5,a4,80205928 <filewrite+0x70>
    ret = pipewrite(f->pipe, 1, addr, n);
  } else if(f->type == FD_DEVICE){
    802058de:	470d                	li	a4,3
    802058e0:	04e78e63          	beq	a5,a4,8020593c <filewrite+0x84>
    struct devsw* mydev = devsw + f->major;
    struct spinlock* dlk = &(mydev->lk);
    acquire(dlk);
    ret = mydev->write(1, addr, n);
    release(dlk);
  } else if(f->type == FD_ENTRY){
    802058e4:	4709                	li	a4,2
    802058e6:	0ce79063          	bne	a5,a4,802059a6 <filewrite+0xee>
    elock(f->ep);
    802058ea:	6d08                	ld	a0,24(a0)
    802058ec:	ffffe097          	auipc	ra,0xffffe
    802058f0:	086080e7          	jalr	134(ra) # 80203972 <elock>
    if (ewrite(f->ep, 1, addr, f->off, n) == n) {
    802058f4:	874e                	mv	a4,s3
    802058f6:	5c94                	lw	a3,56(s1)
    802058f8:	864a                	mv	a2,s2
    802058fa:	4585                	li	a1,1
    802058fc:	6c88                	ld	a0,24(s1)
    802058fe:	ffffd097          	auipc	ra,0xffffd
    80205902:	7aa080e7          	jalr	1962(ra) # 802030a8 <ewrite>
      ret = n;
      f->off += n;
    } else {
      ret = -1;
    80205906:	597d                	li	s2,-1
    if (ewrite(f->ep, 1, addr, f->off, n) == n) {
    80205908:	09350a63          	beq	a0,s3,8020599c <filewrite+0xe4>
    }
    eunlock(f->ep);
    8020590c:	6c88                	ld	a0,24(s1)
    8020590e:	ffffe097          	auipc	ra,0xffffe
    80205912:	09a080e7          	jalr	154(ra) # 802039a8 <eunlock>
  } else {
    panic("filewrite");
  }
  return ret;
}
    80205916:	854a                	mv	a0,s2
    80205918:	70a2                	ld	ra,40(sp)
    8020591a:	7402                	ld	s0,32(sp)
    8020591c:	64e2                	ld	s1,24(sp)
    8020591e:	6942                	ld	s2,16(sp)
    80205920:	69a2                	ld	s3,8(sp)
    80205922:	6a02                	ld	s4,0(sp)
    80205924:	6145                	addi	sp,sp,48
    80205926:	8082                	ret
    ret = pipewrite(f->pipe, 1, addr, n);
    80205928:	86b2                	mv	a3,a2
    8020592a:	862e                	mv	a2,a1
    8020592c:	4585                	li	a1,1
    8020592e:	6908                	ld	a0,16(a0)
    80205930:	fffff097          	auipc	ra,0xfffff
    80205934:	280080e7          	jalr	640(ra) # 80204bb0 <pipewrite>
    80205938:	892a                	mv	s2,a0
    8020593a:	bff1                	j	80205916 <filewrite+0x5e>
    if(f->major < 0 || f->major >= getdevnum() || !devsw[f->major].write)
    8020593c:	04051a03          	lh	s4,64(a0)
    80205940:	060a4f63          	bltz	s4,802059be <filewrite+0x106>
    80205944:	00002097          	auipc	ra,0x2
    80205948:	fb6080e7          	jalr	-74(ra) # 802078fa <getdevnum>
    8020594c:	2a01                	sext.w	s4,s4
    8020594e:	06aa5a63          	bge	s4,a0,802059c2 <filewrite+0x10a>
    80205952:	04049703          	lh	a4,64(s1)
    80205956:	00371793          	slli	a5,a4,0x3
    8020595a:	8f99                	sub	a5,a5,a4
    8020595c:	078e                	slli	a5,a5,0x3
    8020595e:	00866697          	auipc	a3,0x866
    80205962:	30268693          	addi	a3,a3,770 # 80a6bc60 <devsw>
    80205966:	97b6                	add	a5,a5,a3
    80205968:	7b9c                	ld	a5,48(a5)
    8020596a:	cfb1                	beqz	a5,802059c6 <filewrite+0x10e>
    struct devsw* mydev = devsw + f->major;
    8020596c:	00371493          	slli	s1,a4,0x3
    80205970:	8c99                	sub	s1,s1,a4
    80205972:	048e                	slli	s1,s1,0x3
    80205974:	94b6                	add	s1,s1,a3
    struct spinlock* dlk = &(mydev->lk);
    80205976:	01048a13          	addi	s4,s1,16
    acquire(dlk);
    8020597a:	8552                	mv	a0,s4
    8020597c:	00003097          	auipc	ra,0x3
    80205980:	9fa080e7          	jalr	-1542(ra) # 80208376 <acquire>
    ret = mydev->write(1, addr, n);
    80205984:	789c                	ld	a5,48(s1)
    80205986:	864e                	mv	a2,s3
    80205988:	85ca                	mv	a1,s2
    8020598a:	4505                	li	a0,1
    8020598c:	9782                	jalr	a5
    8020598e:	892a                	mv	s2,a0
    release(dlk);
    80205990:	8552                	mv	a0,s4
    80205992:	00003097          	auipc	ra,0x3
    80205996:	a38080e7          	jalr	-1480(ra) # 802083ca <release>
    8020599a:	bfb5                	j	80205916 <filewrite+0x5e>
      f->off += n;
    8020599c:	7c9c                	ld	a5,56(s1)
    8020599e:	97ce                	add	a5,a5,s3
    802059a0:	fc9c                	sd	a5,56(s1)
      ret = n;
    802059a2:	894e                	mv	s2,s3
    802059a4:	b7a5                	j	8020590c <filewrite+0x54>
    panic("filewrite");
    802059a6:	0000d517          	auipc	a0,0xd
    802059aa:	be250513          	addi	a0,a0,-1054 # 80212588 <rodata_start+0x588>
    802059ae:	00003097          	auipc	ra,0x3
    802059b2:	d38080e7          	jalr	-712(ra) # 802086e6 <panic>
  if(!n)return 0;
    802059b6:	8932                	mv	s2,a2
    802059b8:	bfb9                	j	80205916 <filewrite+0x5e>
    return -1;
    802059ba:	597d                	li	s2,-1
    802059bc:	bfa9                	j	80205916 <filewrite+0x5e>
      return -1;
    802059be:	597d                	li	s2,-1
    802059c0:	bf99                	j	80205916 <filewrite+0x5e>
    802059c2:	597d                	li	s2,-1
    802059c4:	bf89                	j	80205916 <filewrite+0x5e>
    802059c6:	597d                	li	s2,-1
    802059c8:	b7b9                	j	80205916 <filewrite+0x5e>

00000000802059ca <filesend>:

uint64
filesend(struct file* fin,struct file* fout,uint64 addr,uint64 n){
    802059ca:	bb010113          	addi	sp,sp,-1104
    802059ce:	44113423          	sd	ra,1096(sp)
    802059d2:	44813023          	sd	s0,1088(sp)
    802059d6:	42913c23          	sd	s1,1080(sp)
    802059da:	43213823          	sd	s2,1072(sp)
    802059de:	43313423          	sd	s3,1064(sp)
    802059e2:	43413023          	sd	s4,1056(sp)
    802059e6:	41513c23          	sd	s5,1048(sp)
    802059ea:	41613823          	sd	s6,1040(sp)
    802059ee:	45010413          	addi	s0,sp,1104
    802059f2:	89aa                	mv	s3,a0
    802059f4:	892e                	mv	s2,a1
    802059f6:	8ab2                	mv	s5,a2
    802059f8:	84b6                	mv	s1,a3
  uint64 off = 0;
    802059fa:	fa043c23          	sd	zero,-72(s0)
  uint64 rlen = 0;
  uint64 wlen = 0;
  uint64 ret = 0;
  if(addr){
    802059fe:	ca19                	beqz	a2,80205a14 <filesend+0x4a>
    if(either_copyin(1,&off,addr,sizeof(uint64))<0){
    80205a00:	46a1                	li	a3,8
    80205a02:	fb840593          	addi	a1,s0,-72
    80205a06:	4505                	li	a0,1
    80205a08:	00005097          	auipc	ra,0x5
    80205a0c:	4b4080e7          	jalr	1204(ra) # 8020aebc <either_copyin>
    80205a10:	04054363          	bltz	a0,80205a56 <filesend+0x8c>
      __debug_warn("[filesend]obtain addr bad\n");
      return -1;
    }
  }
  if(fileillegal(fin)||fileillegal(fout)){
    80205a14:	854e                	mv	a0,s3
    80205a16:	00000097          	auipc	ra,0x0
    80205a1a:	930080e7          	jalr	-1744(ra) # 80205346 <fileillegal>
    80205a1e:	e531                	bnez	a0,80205a6a <filesend+0xa0>
    80205a20:	854a                	mv	a0,s2
    80205a22:	00000097          	auipc	ra,0x0
    80205a26:	924080e7          	jalr	-1756(ra) # 80205346 <fileillegal>
    80205a2a:	e121                	bnez	a0,80205a6a <filesend+0xa0>
  }
  //printf("[filesend]want send n:%p\n",n);
  //printf("[filesend]before send fout off:%p\n",fout->off);
  //print_f_info(fin);
  //print_f_info(fout);
  fileiolock(fin);
    80205a2c:	854e                	mv	a0,s3
    80205a2e:	00000097          	auipc	ra,0x0
    80205a32:	a22080e7          	jalr	-1502(ra) # 80205450 <fileiolock>
  fileiolock(fout);
    80205a36:	854a                	mv	a0,s2
    80205a38:	00000097          	auipc	ra,0x0
    80205a3c:	a18080e7          	jalr	-1512(ra) # 80205450 <fileiolock>
  if(!addr)off = fin->off;
    80205a40:	120a9963          	bnez	s5,80205b72 <filesend+0x1a8>
    80205a44:	0389b783          	ld	a5,56(s3)
    80205a48:	faf43c23          	sd	a5,-72(s0)
  while(n){
    80205a4c:	c0ed                	beqz	s1,80205b2e <filesend+0x164>
filesend(struct file* fin,struct file* fout,uint64 addr,uint64 n){
    80205a4e:	4a01                	li	s4,0
    char buf[1024];
    rlen = MIN(n,sizeof(buf));
    80205a50:	40000b13          	li	s6,1024
    80205a54:	a8ad                	j	80205ace <filesend+0x104>
      __debug_warn("[filesend]obtain addr bad\n");
    80205a56:	0000d517          	auipc	a0,0xd
    80205a5a:	b4250513          	addi	a0,a0,-1214 # 80212598 <rodata_start+0x598>
    80205a5e:	00003097          	auipc	ra,0x3
    80205a62:	05e080e7          	jalr	94(ra) # 80208abc <__debug_warn>
      return -1;
    80205a66:	5a7d                	li	s4,-1
    80205a68:	a811                	j	80205a7c <filesend+0xb2>
      __debug_warn("[filesend]fin/fout illegal\n");
    80205a6a:	0000d517          	auipc	a0,0xd
    80205a6e:	b4e50513          	addi	a0,a0,-1202 # 802125b8 <rodata_start+0x5b8>
    80205a72:	00003097          	auipc	ra,0x3
    80205a76:	04a080e7          	jalr	74(ra) # 80208abc <__debug_warn>
      return -1;
    80205a7a:	5a7d                	li	s4,-1
      return -1;
    }
  }
  //printf("[filesend]ret:%p\n",ret);
  return ret;
}
    80205a7c:	8552                	mv	a0,s4
    80205a7e:	44813083          	ld	ra,1096(sp)
    80205a82:	44013403          	ld	s0,1088(sp)
    80205a86:	43813483          	ld	s1,1080(sp)
    80205a8a:	43013903          	ld	s2,1072(sp)
    80205a8e:	42813983          	ld	s3,1064(sp)
    80205a92:	42013a03          	ld	s4,1056(sp)
    80205a96:	41813a83          	ld	s5,1048(sp)
    80205a9a:	41013b03          	ld	s6,1040(sp)
    80205a9e:	45010113          	addi	sp,sp,1104
    80205aa2:	8082                	ret
    n -= rlen;
    80205aa4:	8c89                	sub	s1,s1,a0
    if(!rlen){
    80205aa6:	c549                	beqz	a0,80205b30 <filesend+0x166>
    wlen = fileoutput(fout,0,(uint64)&buf,rlen,fout->off);
    80205aa8:	03893703          	ld	a4,56(s2)
    80205aac:	0005069b          	sext.w	a3,a0
    80205ab0:	bb840613          	addi	a2,s0,-1096
    80205ab4:	4581                	li	a1,0
    80205ab6:	854a                	mv	a0,s2
    80205ab8:	00000097          	auipc	ra,0x0
    80205abc:	a9e080e7          	jalr	-1378(ra) # 80205556 <fileoutput>
    fout->off += wlen;
    80205ac0:	03893783          	ld	a5,56(s2)
    80205ac4:	97aa                	add	a5,a5,a0
    80205ac6:	02f93c23          	sd	a5,56(s2)
    ret += wlen;
    80205aca:	9a2a                	add	s4,s4,a0
  while(n){
    80205acc:	c0b5                	beqz	s1,80205b30 <filesend+0x166>
    rlen = MIN(n,sizeof(buf));
    80205ace:	86a6                	mv	a3,s1
    80205ad0:	009b7363          	bgeu	s6,s1,80205ad6 <filesend+0x10c>
    80205ad4:	86da                	mv	a3,s6
    rlen = fileinput(fin,0,(uint64)&buf,rlen,off);
    80205ad6:	fb843703          	ld	a4,-72(s0)
    80205ada:	2681                	sext.w	a3,a3
    80205adc:	bb840613          	addi	a2,s0,-1096
    80205ae0:	4581                	li	a1,0
    80205ae2:	854e                	mv	a0,s3
    80205ae4:	00000097          	auipc	ra,0x0
    80205ae8:	9fc080e7          	jalr	-1540(ra) # 802054e0 <fileinput>
    off += rlen;
    80205aec:	fb843783          	ld	a5,-72(s0)
    80205af0:	97aa                	add	a5,a5,a0
    80205af2:	faf43c23          	sd	a5,-72(s0)
    if(!addr)fin->off+=rlen;
    80205af6:	fa0a97e3          	bnez	s5,80205aa4 <filesend+0xda>
    80205afa:	0389b783          	ld	a5,56(s3)
    80205afe:	97aa                	add	a5,a5,a0
    80205b00:	02f9bc23          	sd	a5,56(s3)
    n -= rlen;
    80205b04:	8c89                	sub	s1,s1,a0
    if(!rlen){
    80205b06:	c50d                	beqz	a0,80205b30 <filesend+0x166>
    wlen = fileoutput(fout,0,(uint64)&buf,rlen,fout->off);
    80205b08:	03893703          	ld	a4,56(s2)
    80205b0c:	0005069b          	sext.w	a3,a0
    80205b10:	bb840613          	addi	a2,s0,-1096
    80205b14:	4581                	li	a1,0
    80205b16:	854a                	mv	a0,s2
    80205b18:	00000097          	auipc	ra,0x0
    80205b1c:	a3e080e7          	jalr	-1474(ra) # 80205556 <fileoutput>
    fout->off += wlen;
    80205b20:	03893783          	ld	a5,56(s2)
    80205b24:	97aa                	add	a5,a5,a0
    if(!addr)fout->off+=wlen;
    80205b26:	97aa                	add	a5,a5,a0
    80205b28:	02f93c23          	sd	a5,56(s2)
    80205b2c:	bf79                	j	80205aca <filesend+0x100>
  while(n){
    80205b2e:	8a26                	mv	s4,s1
  fileiounlock(fout);
    80205b30:	854a                	mv	a0,s2
    80205b32:	00000097          	auipc	ra,0x0
    80205b36:	966080e7          	jalr	-1690(ra) # 80205498 <fileiounlock>
  fileiounlock(fin);
    80205b3a:	854e                	mv	a0,s3
    80205b3c:	00000097          	auipc	ra,0x0
    80205b40:	95c080e7          	jalr	-1700(ra) # 80205498 <fileiounlock>
  if(addr){
    80205b44:	f20a8ce3          	beqz	s5,80205a7c <filesend+0xb2>
    if(either_copyout(1,addr,&off,sizeof(uint64))<0){
    80205b48:	46a1                	li	a3,8
    80205b4a:	fb840613          	addi	a2,s0,-72
    80205b4e:	85d6                	mv	a1,s5
    80205b50:	4505                	li	a0,1
    80205b52:	00005097          	auipc	ra,0x5
    80205b56:	314080e7          	jalr	788(ra) # 8020ae66 <either_copyout>
    80205b5a:	f20551e3          	bgez	a0,80205a7c <filesend+0xb2>
      __debug_warn("[filesend]obtain addr bad\n");
    80205b5e:	0000d517          	auipc	a0,0xd
    80205b62:	a3a50513          	addi	a0,a0,-1478 # 80212598 <rodata_start+0x598>
    80205b66:	00003097          	auipc	ra,0x3
    80205b6a:	f56080e7          	jalr	-170(ra) # 80208abc <__debug_warn>
      return -1;
    80205b6e:	5a7d                	li	s4,-1
    80205b70:	b731                	j	80205a7c <filesend+0xb2>
  while(n){
    80205b72:	ec049ee3          	bnez	s1,80205a4e <filesend+0x84>
  fileiounlock(fout);
    80205b76:	854a                	mv	a0,s2
    80205b78:	00000097          	auipc	ra,0x0
    80205b7c:	920080e7          	jalr	-1760(ra) # 80205498 <fileiounlock>
  fileiounlock(fin);
    80205b80:	854e                	mv	a0,s3
    80205b82:	00000097          	auipc	ra,0x0
    80205b86:	916080e7          	jalr	-1770(ra) # 80205498 <fileiounlock>
    80205b8a:	8a26                	mv	s4,s1
    80205b8c:	bf75                	j	80205b48 <filesend+0x17e>

0000000080205b8e <dirnext>:
int
dirnext(struct file *f, uint64 addr)
{
  // struct proc *p = myproc();

  if(f->readable == 0 || !(f->ep->attribute & ATTR_DIRECTORY))
    80205b8e:	00854783          	lbu	a5,8(a0)
    80205b92:	cbd5                	beqz	a5,80205c46 <dirnext+0xb8>
{
    80205b94:	7105                	addi	sp,sp,-480
    80205b96:	ef86                	sd	ra,472(sp)
    80205b98:	eba2                	sd	s0,464(sp)
    80205b9a:	e7a6                	sd	s1,456(sp)
    80205b9c:	e3ca                	sd	s2,448(sp)
    80205b9e:	ff4e                	sd	s3,440(sp)
    80205ba0:	1380                	addi	s0,sp,480
    80205ba2:	84aa                	mv	s1,a0
    80205ba4:	89ae                	mv	s3,a1
  if(f->readable == 0 || !(f->ep->attribute & ATTR_DIRECTORY))
    80205ba6:	6d18                	ld	a4,24(a0)
    80205ba8:	10074783          	lbu	a5,256(a4)
    80205bac:	8bc1                	andi	a5,a5,16
    return -1;
    80205bae:	557d                	li	a0,-1
  if(f->readable == 0 || !(f->ep->attribute & ATTR_DIRECTORY))
    80205bb0:	eb81                	bnez	a5,80205bc0 <dirnext+0x32>
  // if(copyout(p->pagetable, addr, (char *)&st, sizeof(st)) < 0)
  if(either_copyout(1, addr, (char *)&st, sizeof(st)) < 0)
    return -1;

  return 1;
}
    80205bb2:	60fe                	ld	ra,472(sp)
    80205bb4:	645e                	ld	s0,464(sp)
    80205bb6:	64be                	ld	s1,456(sp)
    80205bb8:	691e                	ld	s2,448(sp)
    80205bba:	79fa                	ld	s3,440(sp)
    80205bbc:	613d                	addi	sp,sp,480
    80205bbe:	8082                	ret
  int count = 0;
    80205bc0:	e2042223          	sw	zero,-476(s0)
  elock(f->ep);
    80205bc4:	853a                	mv	a0,a4
    80205bc6:	ffffe097          	auipc	ra,0xffffe
    80205bca:	dac080e7          	jalr	-596(ra) # 80203972 <elock>
  while ((ret = enext(f->ep, &de, f->off, &count)) == 0) {  // skip empty entry
    80205bce:	a801                	j	80205bde <dirnext+0x50>
    f->off += count * 32;
    80205bd0:	e2442783          	lw	a5,-476(s0)
    80205bd4:	0057971b          	slliw	a4,a5,0x5
    80205bd8:	7c9c                	ld	a5,56(s1)
    80205bda:	97ba                	add	a5,a5,a4
    80205bdc:	fc9c                	sd	a5,56(s1)
  while ((ret = enext(f->ep, &de, f->off, &count)) == 0) {  // skip empty entry
    80205bde:	e2440693          	addi	a3,s0,-476
    80205be2:	5c90                	lw	a2,56(s1)
    80205be4:	e6040593          	addi	a1,s0,-416
    80205be8:	6c88                	ld	a0,24(s1)
    80205bea:	ffffe097          	auipc	ra,0xffffe
    80205bee:	fa0080e7          	jalr	-96(ra) # 80203b8a <enext>
    80205bf2:	892a                	mv	s2,a0
    80205bf4:	dd71                	beqz	a0,80205bd0 <dirnext+0x42>
  eunlock(f->ep);
    80205bf6:	6c88                	ld	a0,24(s1)
    80205bf8:	ffffe097          	auipc	ra,0xffffe
    80205bfc:	db0080e7          	jalr	-592(ra) # 802039a8 <eunlock>
  if (ret == -1)
    80205c00:	57fd                	li	a5,-1
    return 0;
    80205c02:	4501                	li	a0,0
  if (ret == -1)
    80205c04:	faf907e3          	beq	s2,a5,80205bb2 <dirnext+0x24>
  f->off += count * 32;
    80205c08:	e2442783          	lw	a5,-476(s0)
    80205c0c:	0057971b          	slliw	a4,a5,0x5
    80205c10:	7c9c                	ld	a5,56(s1)
    80205c12:	97ba                	add	a5,a5,a4
    80205c14:	fc9c                	sd	a5,56(s1)
  estat(&de, &st);
    80205c16:	e2840593          	addi	a1,s0,-472
    80205c1a:	e6040513          	addi	a0,s0,-416
    80205c1e:	ffffe097          	auipc	ra,0xffffe
    80205c22:	f24080e7          	jalr	-220(ra) # 80203b42 <estat>
  if(either_copyout(1, addr, (char *)&st, sizeof(st)) < 0)
    80205c26:	03800693          	li	a3,56
    80205c2a:	e2840613          	addi	a2,s0,-472
    80205c2e:	85ce                	mv	a1,s3
    80205c30:	4505                	li	a0,1
    80205c32:	00005097          	auipc	ra,0x5
    80205c36:	234080e7          	jalr	564(ra) # 8020ae66 <either_copyout>
    80205c3a:	87aa                	mv	a5,a0
  return 1;
    80205c3c:	4505                	li	a0,1
  if(either_copyout(1, addr, (char *)&st, sizeof(st)) < 0)
    80205c3e:	f607dae3          	bgez	a5,80205bb2 <dirnext+0x24>
    return -1;
    80205c42:	557d                	li	a0,-1
    80205c44:	b7bd                	j	80205bb2 <dirnext+0x24>
    return -1;
    80205c46:	557d                	li	a0,-1
}
    80205c48:	8082                	ret

0000000080205c4a <findfile>:

struct file*
findfile(char* path)
{
    80205c4a:	7139                	addi	sp,sp,-64
    80205c4c:	fc06                	sd	ra,56(sp)
    80205c4e:	f822                	sd	s0,48(sp)
    80205c50:	f426                	sd	s1,40(sp)
    80205c52:	f04a                	sd	s2,32(sp)
    80205c54:	ec4e                	sd	s3,24(sp)
    80205c56:	0080                	addi	s0,sp,64
    80205c58:	85aa                	mv	a1,a0
  int dev;
  struct dirent* ep = ename(NULL,path,&dev);
    80205c5a:	fcc40613          	addi	a2,s0,-52
    80205c5e:	4501                	li	a0,0
    80205c60:	ffffe097          	auipc	ra,0xffffe
    80205c64:	754080e7          	jalr	1876(ra) # 802043b4 <ename>
    80205c68:	892a                	mv	s2,a0
  struct proc* p = myproc();
    80205c6a:	00005097          	auipc	ra,0x5
    80205c6e:	7e2080e7          	jalr	2018(ra) # 8020b44c <myproc>
  if(ep == NULL)return NULL;
    80205c72:	0a090963          	beqz	s2,80205d24 <findfile+0xda>
    80205c76:	89aa                	mv	s3,a0
  elock(ep);
    80205c78:	854a                	mv	a0,s2
    80205c7a:	ffffe097          	auipc	ra,0xffffe
    80205c7e:	cf8080e7          	jalr	-776(ra) # 80203972 <elock>
  for(int i = 0;i<NOFILEMAX(p);i++){
    80205c82:	0e09b783          	ld	a5,224(s3)
    80205c86:	85be                	mv	a1,a5
    80205c88:	0c800713          	li	a4,200
    80205c8c:	00f75463          	bge	a4,a5,80205c94 <findfile+0x4a>
    80205c90:	0c800593          	li	a1,200
    80205c94:	06f05d63          	blez	a5,80205d0e <findfile+0xc4>
    if(p->ofile[i]->type==FD_ENTRY&&p->ofile[i]->ep==ep){
      eunlock(ep);
      eput(ep);
      return p->ofile[i];
    }
    if(p->ofile[i]->type==FD_DEVICE&&p->ofile[i]->major==dev){
    80205c98:	fcc42503          	lw	a0,-52(s0)
    80205c9c:	0e89b703          	ld	a4,232(s3)
    80205ca0:	4781                	li	a5,0
    if(p->ofile[i]->type==FD_ENTRY&&p->ofile[i]->ep==ep){
    80205ca2:	4809                	li	a6,2
    if(p->ofile[i]->type==FD_DEVICE&&p->ofile[i]->major==dev){
    80205ca4:	488d                	li	a7,3
    80205ca6:	a801                	j	80205cb6 <findfile+0x6c>
    if(p->ofile[i]->type==FD_ENTRY&&p->ofile[i]->ep==ep){
    80205ca8:	6e94                	ld	a3,24(a3)
    80205caa:	05268263          	beq	a3,s2,80205cee <findfile+0xa4>
  for(int i = 0;i<NOFILEMAX(p);i++){
    80205cae:	0785                	addi	a5,a5,1
    80205cb0:	0721                	addi	a4,a4,8
    80205cb2:	04b7de63          	bge	a5,a1,80205d0e <findfile+0xc4>
    if(p->ofile[i]->type==FD_ENTRY&&p->ofile[i]->ep==ep){
    80205cb6:	00379493          	slli	s1,a5,0x3
    80205cba:	6314                	ld	a3,0(a4)
    80205cbc:	4290                	lw	a2,0(a3)
    80205cbe:	ff0605e3          	beq	a2,a6,80205ca8 <findfile+0x5e>
    if(p->ofile[i]->type==FD_DEVICE&&p->ofile[i]->major==dev){
    80205cc2:	ff1616e3          	bne	a2,a7,80205cae <findfile+0x64>
    80205cc6:	04069683          	lh	a3,64(a3)
    80205cca:	fea692e3          	bne	a3,a0,80205cae <findfile+0x64>
      eunlock(ep);
    80205cce:	854a                	mv	a0,s2
    80205cd0:	ffffe097          	auipc	ra,0xffffe
    80205cd4:	cd8080e7          	jalr	-808(ra) # 802039a8 <eunlock>
      eput(ep);
    80205cd8:	854a                	mv	a0,s2
    80205cda:	ffffe097          	auipc	ra,0xffffe
    80205cde:	d1c080e7          	jalr	-740(ra) # 802039f6 <eput>
      return p->ofile[i];
    80205ce2:	0e89b783          	ld	a5,232(s3)
    80205ce6:	94be                	add	s1,s1,a5
    80205ce8:	0004b903          	ld	s2,0(s1)
    80205cec:	a825                	j	80205d24 <findfile+0xda>
      eunlock(ep);
    80205cee:	854a                	mv	a0,s2
    80205cf0:	ffffe097          	auipc	ra,0xffffe
    80205cf4:	cb8080e7          	jalr	-840(ra) # 802039a8 <eunlock>
      eput(ep);
    80205cf8:	854a                	mv	a0,s2
    80205cfa:	ffffe097          	auipc	ra,0xffffe
    80205cfe:	cfc080e7          	jalr	-772(ra) # 802039f6 <eput>
      return p->ofile[i];
    80205d02:	0e89b783          	ld	a5,232(s3)
    80205d06:	94be                	add	s1,s1,a5
    80205d08:	0004b903          	ld	s2,0(s1)
    80205d0c:	a821                	j	80205d24 <findfile+0xda>
    }
  }
  eunlock(ep);
    80205d0e:	854a                	mv	a0,s2
    80205d10:	ffffe097          	auipc	ra,0xffffe
    80205d14:	c98080e7          	jalr	-872(ra) # 802039a8 <eunlock>
  eput(ep);
    80205d18:	854a                	mv	a0,s2
    80205d1a:	ffffe097          	auipc	ra,0xffffe
    80205d1e:	cdc080e7          	jalr	-804(ra) # 802039f6 <eput>
  return NULL;
    80205d22:	4901                	li	s2,0
}
    80205d24:	854a                	mv	a0,s2
    80205d26:	70e2                	ld	ra,56(sp)
    80205d28:	7442                	ld	s0,48(sp)
    80205d2a:	74a2                	ld	s1,40(sp)
    80205d2c:	7902                	ld	s2,32(sp)
    80205d2e:	69e2                	ld	s3,24(sp)
    80205d30:	6121                	addi	sp,sp,64
    80205d32:	8082                	ret

0000000080205d34 <dirent_next>:


int
dirent_next(struct file *f, uint64 addr, int n)
{
    80205d34:	d1010113          	addi	sp,sp,-752
    80205d38:	2e113423          	sd	ra,744(sp)
    80205d3c:	2e813023          	sd	s0,736(sp)
    80205d40:	2c913c23          	sd	s1,728(sp)
    80205d44:	2d213823          	sd	s2,720(sp)
    80205d48:	2d313423          	sd	s3,712(sp)
    80205d4c:	2d413023          	sd	s4,704(sp)
    80205d50:	2b513c23          	sd	s5,696(sp)
    80205d54:	2b613823          	sd	s6,688(sp)
    80205d58:	2b713423          	sd	s7,680(sp)
    80205d5c:	2b813023          	sd	s8,672(sp)
    80205d60:	29913c23          	sd	s9,664(sp)
    80205d64:	1d80                	addi	s0,sp,752
  if(f->readable == 0 || !(f->ep->attribute & ATTR_DIRECTORY))
    80205d66:	00854783          	lbu	a5,8(a0)
    80205d6a:	14078463          	beqz	a5,80205eb2 <dirent_next+0x17e>
    80205d6e:	892a                	mv	s2,a0
    80205d70:	8a2e                	mv	s4,a1
    80205d72:	89b2                	mv	s3,a2
    80205d74:	6d08                	ld	a0,24(a0)
    80205d76:	10054783          	lbu	a5,256(a0)
    80205d7a:	8bc1                	andi	a5,a5,16
    80205d7c:	12078d63          	beqz	a5,80205eb6 <dirent_next+0x182>
    return -1;
  //printf("[dirent next]addr:%p n:%p\n",addr,n);
  struct dirent de;
  struct linux_dirent64 lde;
  int count = 0;
    80205d80:	d0042a23          	sw	zero,-748(s0)
  int ret;
  int copysize = 0;
  elock(f->ep);
    80205d84:	ffffe097          	auipc	ra,0xffffe
    80205d88:	bee080e7          	jalr	-1042(ra) # 80203972 <elock>
  int copysize = 0;
    80205d8c:	4a81                	li	s5,0
    // empty entry
    if(ret == 0) {
      continue;
    }
    // end of file, return 0
    if(ret == -1) {
    80205d8e:	5bfd                	li	s7,-1
    memcpy(lde.d_name, de.filename, sizeof(de.filename));
    lde.d_type = (de.attribute & ATTR_DIRECTORY) ? T_DIR : T_FILE;
    lde.d_ino = 0;
    // Size of this dent, varies from length of filename.
    int size = sizeof(struct linux_dirent64) - sizeof(lde.d_name) + strlen(lde.d_name) + 1;
    size += (sizeof(uint64) - (size % sizeof(uint64))) % sizeof(uint64); // Align to 8.
    80205d90:	5c1d                	li	s8,-25
    lde.d_reclen = size;
    int realsize = lde.d_reclen;
    80205d92:	6b41                	lui	s6,0x10
    80205d94:	1b7d                	addi	s6,s6,-1
    lde.d_off = f->off;
    80205d96:	03893603          	ld	a2,56(s2)
    80205d9a:	d2c43023          	sd	a2,-736(s0)
    ret = enext(f->ep, &de, f->off, &count);
    80205d9e:	d1440693          	addi	a3,s0,-748
    80205da2:	2601                	sext.w	a2,a2
    80205da4:	e3040593          	addi	a1,s0,-464
    80205da8:	01893503          	ld	a0,24(s2)
    80205dac:	ffffe097          	auipc	ra,0xffffe
    80205db0:	dde080e7          	jalr	-546(ra) # 80203b8a <enext>
    f->off += count * 32;
    80205db4:	d1442783          	lw	a5,-748(s0)
    80205db8:	0057971b          	slliw	a4,a5,0x5
    80205dbc:	03893783          	ld	a5,56(s2)
    80205dc0:	97ba                	add	a5,a5,a4
    80205dc2:	02f93c23          	sd	a5,56(s2)
    if(ret == 0) {
    80205dc6:	d961                	beqz	a0,80205d96 <dirent_next+0x62>
    if(ret == -1) {
    80205dc8:	07750d63          	beq	a0,s7,80205e42 <dirent_next+0x10e>
    memcpy(lde.d_name, de.filename, sizeof(de.filename));
    80205dcc:	10000613          	li	a2,256
    80205dd0:	e3040593          	addi	a1,s0,-464
    80205dd4:	d2b40513          	addi	a0,s0,-725
    80205dd8:	ffffb097          	auipc	ra,0xffffb
    80205ddc:	060080e7          	jalr	96(ra) # 80200e38 <memcpy>
    lde.d_type = (de.attribute & ATTR_DIRECTORY) ? T_DIR : T_FILE;
    80205de0:	f3044783          	lbu	a5,-208(s0)
    80205de4:	8bc1                	andi	a5,a5,16
    80205de6:	0017b793          	seqz	a5,a5
    80205dea:	0785                	addi	a5,a5,1
    80205dec:	d2f40523          	sb	a5,-726(s0)
    lde.d_ino = 0;
    80205df0:	d0043c23          	sd	zero,-744(s0)
    int size = sizeof(struct linux_dirent64) - sizeof(lde.d_name) + strlen(lde.d_name) + 1;
    80205df4:	d2b40513          	addi	a0,s0,-725
    80205df8:	ffffb097          	auipc	ra,0xffffb
    80205dfc:	104080e7          	jalr	260(ra) # 80200efc <strlen>
    size += (sizeof(uint64) - (size % sizeof(uint64))) % sizeof(uint64); // Align to 8.
    80205e00:	40ac04bb          	subw	s1,s8,a0
    80205e04:	889d                	andi	s1,s1,7
    int size = sizeof(struct linux_dirent64) - sizeof(lde.d_name) + strlen(lde.d_name) + 1;
    80205e06:	2565                	addiw	a0,a0,25
    size += (sizeof(uint64) - (size % sizeof(uint64))) % sizeof(uint64); // Align to 8.
    80205e08:	9ca9                	addw	s1,s1,a0
    lde.d_reclen = size;
    80205e0a:	03049c93          	slli	s9,s1,0x30
    80205e0e:	030cdc93          	srli	s9,s9,0x30
    80205e12:	d3941423          	sh	s9,-728(s0)
    int realsize = lde.d_reclen;
    80205e16:	009b74b3          	and	s1,s6,s1
    80205e1a:	2481                	sext.w	s1,s1
    // buf size limits
    if(lde.d_reclen > n) {
    80205e1c:	0699cb63          	blt	s3,s1,80205e92 <dirent_next+0x15e>
      break;
    }

    // copy error, return -1
    if(either_copyout(1,addr, (char *)&lde, realsize) < 0){
    80205e20:	86e6                	mv	a3,s9
    80205e22:	d1840613          	addi	a2,s0,-744
    80205e26:	85d2                	mv	a1,s4
    80205e28:	4505                	li	a0,1
    80205e2a:	00005097          	auipc	ra,0x5
    80205e2e:	03c080e7          	jalr	60(ra) # 8020ae66 <either_copyout>
    80205e32:	04054863          	bltz	a0,80205e82 <dirent_next+0x14e>
      eunlock(f->ep);
      return -1;
    }
    
    addr += realsize;
    80205e36:	9a66                	add	s4,s4,s9
    n -= realsize;
    80205e38:	409989bb          	subw	s3,s3,s1
    copysize += realsize;
    80205e3c:	009a8abb          	addw	s5,s5,s1
    80205e40:	bf99                	j	80205d96 <dirent_next+0x62>
      eunlock(f->ep);
    80205e42:	01893503          	ld	a0,24(s2)
    80205e46:	ffffe097          	auipc	ra,0xffffe
    80205e4a:	b62080e7          	jalr	-1182(ra) # 802039a8 <eunlock>
  }
  f->off += count * 32;
  eunlock(f->ep);

  return copysize; 
}
    80205e4e:	8556                	mv	a0,s5
    80205e50:	2e813083          	ld	ra,744(sp)
    80205e54:	2e013403          	ld	s0,736(sp)
    80205e58:	2d813483          	ld	s1,728(sp)
    80205e5c:	2d013903          	ld	s2,720(sp)
    80205e60:	2c813983          	ld	s3,712(sp)
    80205e64:	2c013a03          	ld	s4,704(sp)
    80205e68:	2b813a83          	ld	s5,696(sp)
    80205e6c:	2b013b03          	ld	s6,688(sp)
    80205e70:	2a813b83          	ld	s7,680(sp)
    80205e74:	2a013c03          	ld	s8,672(sp)
    80205e78:	29813c83          	ld	s9,664(sp)
    80205e7c:	2f010113          	addi	sp,sp,752
    80205e80:	8082                	ret
      eunlock(f->ep);
    80205e82:	01893503          	ld	a0,24(s2)
    80205e86:	ffffe097          	auipc	ra,0xffffe
    80205e8a:	b22080e7          	jalr	-1246(ra) # 802039a8 <eunlock>
      return -1;
    80205e8e:	5afd                	li	s5,-1
    80205e90:	bf7d                	j	80205e4e <dirent_next+0x11a>
  f->off += count * 32;
    80205e92:	d1442783          	lw	a5,-748(s0)
    80205e96:	0057971b          	slliw	a4,a5,0x5
    80205e9a:	03893783          	ld	a5,56(s2)
    80205e9e:	97ba                	add	a5,a5,a4
    80205ea0:	02f93c23          	sd	a5,56(s2)
  eunlock(f->ep);
    80205ea4:	01893503          	ld	a0,24(s2)
    80205ea8:	ffffe097          	auipc	ra,0xffffe
    80205eac:	b00080e7          	jalr	-1280(ra) # 802039a8 <eunlock>
  return copysize; 
    80205eb0:	bf79                	j	80205e4e <dirent_next+0x11a>
    return -1;
    80205eb2:	5afd                	li	s5,-1
    80205eb4:	bf69                	j	80205e4e <dirent_next+0x11a>
    80205eb6:	5afd                	li	s5,-1
    80205eb8:	bf59                	j	80205e4e <dirent_next+0x11a>

0000000080205eba <filelseek>:

uint64 
filelseek(struct file *f, uint64 offset, int whence)
{
    80205eba:	7179                	addi	sp,sp,-48
    80205ebc:	f406                	sd	ra,40(sp)
    80205ebe:	f022                	sd	s0,32(sp)
    80205ec0:	ec26                	sd	s1,24(sp)
    80205ec2:	e84a                	sd	s2,16(sp)
    80205ec4:	e44e                	sd	s3,8(sp)
    80205ec6:	1800                	addi	s0,sp,48
    80205ec8:	892a                	mv	s2,a0
    80205eca:	89ae                	mv	s3,a1
    80205ecc:	84b2                	mv	s1,a2
  fileiolock(f);
    80205ece:	fffff097          	auipc	ra,0xfffff
    80205ed2:	582080e7          	jalr	1410(ra) # 80205450 <fileiolock>
  uint64 cur = f->off;
    80205ed6:	03893683          	ld	a3,56(s2)
  uint64 size = f->ep->file_size;
    80205eda:	01893783          	ld	a5,24(s2)
    80205ede:	1087a703          	lw	a4,264(a5) # 40000108 <_entry-0x401ffef8>
  switch (whence)
    80205ee2:	4785                	li	a5,1
    80205ee4:	00f48e63          	beq	s1,a5,80205f00 <filelseek+0x46>
    80205ee8:	4789                	li	a5,2
    80205eea:	02f48a63          	beq	s1,a5,80205f1e <filelseek+0x64>
    80205eee:	5529                	li	a0,-22
    80205ef0:	c889                	beqz	s1,80205f02 <filelseek+0x48>
  }

  f->off = cur;
  fileiounlock(f);
  return cur;
}
    80205ef2:	70a2                	ld	ra,40(sp)
    80205ef4:	7402                	ld	s0,32(sp)
    80205ef6:	64e2                	ld	s1,24(sp)
    80205ef8:	6942                	ld	s2,16(sp)
    80205efa:	69a2                	ld	s3,8(sp)
    80205efc:	6145                	addi	sp,sp,48
    80205efe:	8082                	ret
    cur += offset;
    80205f00:	99b6                	add	s3,s3,a3
  if(cur > 0xffffffff)
    80205f02:	57fd                	li	a5,-1
    80205f04:	9381                	srli	a5,a5,0x20
    return -EFBIG;
    80205f06:	5515                	li	a0,-27
  if(cur > 0xffffffff)
    80205f08:	ff37e5e3          	bltu	a5,s3,80205ef2 <filelseek+0x38>
  f->off = cur;
    80205f0c:	03393c23          	sd	s3,56(s2)
  fileiounlock(f);
    80205f10:	854a                	mv	a0,s2
    80205f12:	fffff097          	auipc	ra,0xfffff
    80205f16:	586080e7          	jalr	1414(ra) # 80205498 <fileiounlock>
  return cur;
    80205f1a:	854e                	mv	a0,s3
    80205f1c:	bfd9                	j	80205ef2 <filelseek+0x38>
  uint64 size = f->ep->file_size;
    80205f1e:	1702                	slli	a4,a4,0x20
    80205f20:	9301                	srli	a4,a4,0x20
    cur = size + offset;
    80205f22:	99ba                	add	s3,s3,a4
    break;
    80205f24:	bff9                	j	80205f02 <filelseek+0x48>
	...

0000000080205f30 <initcode>:
    80205f30:	f9c00513          	li	a0,-100
    80205f34:	00000597          	auipc	a1,0x0
    80205f38:	06558593          	addi	a1,a1,101 # 80205f99 <initcode+0x69>
    80205f3c:	00200613          	li	a2,2
    80205f40:	03800893          	li	a7,56
    80205f44:	00000073          	ecall
    80205f48:	00000513          	li	a0,0
    80205f4c:	01700893          	li	a7,23
    80205f50:	00000073          	ecall
    80205f54:	00000513          	li	a0,0
    80205f58:	01700893          	li	a7,23
    80205f5c:	00000073          	ecall
    80205f60:	00000517          	auipc	a0,0x0
    80205f64:	02c50513          	addi	a0,a0,44 # 80205f8c <initcode+0x5c>
    80205f68:	00000597          	auipc	a1,0x0
    80205f6c:	04b58593          	addi	a1,a1,75 # 80205fb3 <initcode+0x83>
    80205f70:	00000617          	auipc	a2,0x0
    80205f74:	05360613          	addi	a2,a2,83 # 80205fc3 <initcode+0x93>
    80205f78:	0dd00893          	li	a7,221
    80205f7c:	00000073          	ecall
    80205f80:	05d00893          	li	a7,93
    80205f84:	00000073          	ecall
    80205f88:	ff9ff0ef          	jal	ra,80205f80 <initcode+0x50>
    80205f8c:	2f2e                	fld	ft10,200(sp)
    80205f8e:	796d                	lui	s2,0xffffb
    80205f90:	6574                	ld	a3,200(a0)
    80205f92:	732e7473          	csrrci	s0,0x732,28
    80205f96:	0068                	addi	a0,sp,12
    80205f98:	2f00                	fld	fs0,24(a4)
    80205f9a:	6564                	ld	s1,200(a0)
    80205f9c:	2f76                	fld	ft10,344(sp)
    80205f9e:	736e6f63          	bltu	t3,s6,802066dc <localtime+0x1a7>
    80205fa2:	00656c6f          	jal	s8,8025bfa8 <data_start+0x45fa8>
	...
    80205fb2:	5c00                	lw	s0,56(s0)
	...

0000000080205fcc <initcodesize>:
    80205fcc:	009c                	addi	a5,sp,64
	...

0000000080205fd0 <sacrifice_start>:
    80205fd0:	622f2123          	sw	sp,1570(t5)
    80205fd4:	6e69                	lui	t3,0x1a
    80205fd6:	7361622f          	0x7361622f
    80205fda:	0a68                	addi	a0,sp,284
    80205fdc:	2e0a                	fld	ft8,128(sp)
    80205fde:	61756c2f          	0x61756c2f
    80205fe2:	745f 7365 6374      	0x63747365745f
    80205fe8:	2e65646f          	jal	s0,8025c2ce <data_start+0x462ce>
    80205fec:	2e0a6873          	csrrsi	a6,0x2e0,20
    80205ff0:	7375622f          	0x7375622f
    80205ff4:	6279                	lui	tp,0x1e
    80205ff6:	745f786f          	jal	a6,802fdf3a <data_start+0xe7f3a>
    80205ffa:	7365                	lui	t1,0xffff9
    80205ffc:	6374                	ld	a3,192(a4)
    80205ffe:	2e65646f          	jal	s0,8025c2e4 <data_start+0x462e4>
    80206002:	2e0a6873          	csrrsi	a6,0x2e0,20
    80206006:	626d6c2f          	0x626d6c2f
    8020600a:	6e65                	lui	t3,0x19
    8020600c:	745f6863          	bltu	t5,t0,8020675c <localtime+0x227>
    80206010:	7365                	lui	t1,0xffff9
    80206012:	6374                	ld	a3,192(a4)
    80206014:	2e65646f          	jal	s0,8025c2fa <data_start+0x462fa>
    80206018:	650a6873          	csrrsi	a6,0x650,20
    8020601c:	206f6863          	bltu	t5,t1,8020622c <sacrifice_start+0x25c>
    80206020:	2122                	fld	ft2,8(sp)
    80206022:	4554                	lw	a3,12(a0)
    80206024:	46205453          	0x46205453
    80206028:	4e49                	li	t3,18
    8020602a:	5349                	li	t1,-14
    8020602c:	2148                	fld	fa0,128(a0)
    8020602e:	0a22                	slli	s4,s4,0x8
    80206030:	6d6c2023          	sw	s6,1728(s8)
    80206034:	6562                	ld	a0,24(sp)
    80206036:	636e                	ld	t1,216(sp)
    80206038:	5f68                	lw	a0,124(a4)
    8020603a:	6c61                	lui	s8,0x18
    8020603c:	206c                	fld	fa1,192(s0)
    8020603e:	616c                	ld	a1,192(a0)
    80206040:	5f74                	lw	a3,124(a4)
    80206042:	63737973          	csrrci	s2,0x637,6
    80206046:	6c61                	lui	s8,0x18
    80206048:	206c                	fld	fa1,192(s0)
    8020604a:	502d                	c.li	zero,-21
    8020604c:	3120                	fld	fs0,96(a0)
    8020604e:	6e20                	ld	s0,88(a2)
    80206050:	6c75                	lui	s8,0x1d
    80206052:	0a6c                	addi	a1,sp,284
    80206054:	6d6c2023          	sw	s6,1728(s8) # 1d6c0 <_entry-0x801e2940>
    80206058:	6562                	ld	a0,24(sp)
    8020605a:	636e                	ld	t1,216(sp)
    8020605c:	5f68                	lw	a0,124(a4)
    8020605e:	6c61                	lui	s8,0x18
    80206060:	206c                	fld	fa1,192(s0)
    80206062:	616c                	ld	a1,192(a0)
    80206064:	5f74                	lw	a3,124(a4)
    80206066:	63737973          	csrrci	s2,0x637,6
    8020606a:	6c61                	lui	s8,0x18
    8020606c:	206c                	fld	fa1,192(s0)
    8020606e:	502d                	c.li	zero,-21
    80206070:	3120                	fld	fs0,96(a0)
    80206072:	7220                	ld	s0,96(a2)
    80206074:	6165                	addi	sp,sp,112
    80206076:	0a64                	addi	s1,sp,284
    80206078:	6d6c2023          	sw	s6,1728(s8) # 186c0 <_entry-0x801e7940>
    8020607c:	6562                	ld	a0,24(sp)
    8020607e:	636e                	ld	t1,216(sp)
    80206080:	5f68                	lw	a0,124(a4)
    80206082:	6c61                	lui	s8,0x18
    80206084:	206c                	fld	fa1,192(s0)
    80206086:	616c                	ld	a1,192(a0)
    80206088:	5f74                	lw	a3,124(a4)
    8020608a:	63737973          	csrrci	s2,0x637,6
    8020608e:	6c61                	lui	s8,0x18
    80206090:	206c                	fld	fa1,192(s0)
    80206092:	502d                	c.li	zero,-21
    80206094:	3120                	fld	fs0,96(a0)
    80206096:	7720                	ld	s0,104(a4)
    80206098:	6972                	ld	s2,280(sp)
    8020609a:	6574                	ld	a3,200(a0)
    8020609c:	230a                	fld	ft6,128(sp)
    8020609e:	6220                	ld	s0,64(a2)
    802060a0:	7375                	lui	t1,0xffffd
    802060a2:	6279                	lui	tp,0x1e
    802060a4:	6d20786f          	jal	a6,8020d776 <sys_openat+0x88>
    802060a8:	7269646b          	0x7269646b
    802060ac:	2d20                	fld	fs0,88(a0)
    802060ae:	2070                	fld	fa2,192(s0)
    802060b0:	7261762f          	0x7261762f
    802060b4:	706d742f          	0x706d742f
    802060b8:	230a                	fld	ft6,128(sp)
    802060ba:	6220                	ld	s0,64(a2)
    802060bc:	7375                	lui	t1,0xffffd
    802060be:	6279                	lui	tp,0x1e
    802060c0:	7420786f          	jal	a6,8020d802 <sys_openat+0x114>
    802060c4:	6863756f          	jal	a0,8023d74a <data_start+0x2774a>
    802060c8:	2f20                	fld	fs0,88(a4)
    802060ca:	6176                	ld	sp,344(sp)
    802060cc:	2f72                	fld	ft10,280(sp)
    802060ce:	6d74                	ld	a3,216(a0)
    802060d0:	2f70                	fld	fa2,216(a4)
    802060d2:	6d6c                	ld	a1,216(a0)
    802060d4:	6562                	ld	a0,24(sp)
    802060d6:	636e                	ld	t1,216(sp)
    802060d8:	0a68                	addi	a0,sp,284
    802060da:	6d6c2023          	sw	s6,1728(s8) # 186c0 <_entry-0x801e7940>
    802060de:	6562                	ld	a0,24(sp)
    802060e0:	636e                	ld	t1,216(sp)
    802060e2:	5f68                	lw	a0,124(a4)
    802060e4:	6c61                	lui	s8,0x18
    802060e6:	206c                	fld	fa1,192(s0)
    802060e8:	616c                	ld	a1,192(a0)
    802060ea:	5f74                	lw	a3,124(a4)
    802060ec:	63737973          	csrrci	s2,0x637,6
    802060f0:	6c61                	lui	s8,0x18
    802060f2:	206c                	fld	fa1,192(s0)
    802060f4:	502d                	c.li	zero,-21
    802060f6:	3120                	fld	fs0,96(a0)
    802060f8:	7320                	ld	s0,96(a4)
    802060fa:	6174                	ld	a3,192(a0)
    802060fc:	2074                	fld	fa3,192(s0)
    802060fe:	7261762f          	0x7261762f
    80206102:	706d742f          	0x706d742f
    80206106:	626d6c2f          	0x626d6c2f
    8020610a:	6e65                	lui	t3,0x19
    8020610c:	230a6863          	bltu	s4,a6,8020633c <sacrifice_start+0x36c>
    80206110:	6c20                	ld	s0,88(s0)
    80206112:	626d                	lui	tp,0x1b
    80206114:	6e65                	lui	t3,0x19
    80206116:	615f6863          	bltu	t5,s5,80206726 <localtime+0x1f1>
    8020611a:	6c6c                	ld	a1,216(s0)
    8020611c:	6c20                	ld	s0,88(s0)
    8020611e:	7461                	lui	s0,0xffff8
    80206120:	735f 7379 6163      	0x61637379735f
    80206126:	6c6c                	ld	a1,216(s0)
    80206128:	2d20                	fld	fs0,88(a0)
    8020612a:	2050                	fld	fa2,128(s0)
    8020612c:	2031                	0x2031
    8020612e:	7366                	ld	t1,120(sp)
    80206130:	6174                	ld	a3,192(a0)
    80206132:	2074                	fld	fa3,192(s0)
    80206134:	7261762f          	0x7261762f
    80206138:	706d742f          	0x706d742f
    8020613c:	626d6c2f          	0x626d6c2f
    80206140:	6e65                	lui	t3,0x19
    80206142:	230a6863          	bltu	s4,a6,80206372 <sacrifice_start+0x3a2>
    80206146:	6c20                	ld	s0,88(s0)
    80206148:	626d                	lui	tp,0x1b
    8020614a:	6e65                	lui	t3,0x19
    8020614c:	615f6863          	bltu	t5,s5,8020675c <localtime+0x227>
    80206150:	6c6c                	ld	a1,216(s0)
    80206152:	6c20                	ld	s0,88(s0)
    80206154:	7461                	lui	s0,0xffff8
    80206156:	735f 7379 6163      	0x61637379735f
    8020615c:	6c6c                	ld	a1,216(s0)
    8020615e:	2d20                	fld	fs0,88(a0)
    80206160:	2050                	fld	fa2,128(s0)
    80206162:	2031                	0x2031
    80206164:	6e65706f          	j	8025d84a <data_start+0x4784a>
    80206168:	2f20                	fld	fs0,88(a4)
    8020616a:	6176                	ld	sp,344(sp)
    8020616c:	2f72                	fld	ft10,280(sp)
    8020616e:	6d74                	ld	a3,216(a0)
    80206170:	2f70                	fld	fa2,216(a4)
    80206172:	6d6c                	ld	a1,216(a0)
    80206174:	6562                	ld	a0,24(sp)
    80206176:	636e                	ld	t1,216(sp)
    80206178:	0a68                	addi	a0,sp,284
    8020617a:	6d6c2023          	sw	s6,1728(s8) # 186c0 <_entry-0x801e7940>
    8020617e:	6562                	ld	a0,24(sp)
    80206180:	636e                	ld	t1,216(sp)
    80206182:	5f68                	lw	a0,124(a4)
    80206184:	6c61                	lui	s8,0x18
    80206186:	206c                	fld	fa1,192(s0)
    80206188:	616c                	ld	a1,192(a0)
    8020618a:	5f74                	lw	a3,124(a4)
    8020618c:	656c6573          	csrrsi	a0,0x656,24
    80206190:	2d207463          	bgeu	zero,s2,80206458 <sacrifice_start+0x488>
    80206194:	206e                	fld	ft0,216(sp)
    80206196:	3031                	0x3031
    80206198:	2030                	fld	fa2,64(s0)
    8020619a:	502d                	c.li	zero,-21
    8020619c:	3120                	fld	fs0,96(a0)
    8020619e:	6620                	ld	s0,72(a2)
    802061a0:	6c69                	lui	s8,0x1a
    802061a2:	0a65                	addi	s4,s4,25
    802061a4:	6d6c2023          	sw	s6,1728(s8) # 1a6c0 <_entry-0x801e5940>
    802061a8:	6562                	ld	a0,24(sp)
    802061aa:	636e                	ld	t1,216(sp)
    802061ac:	5f68                	lw	a0,124(a4)
    802061ae:	6c61                	lui	s8,0x18
    802061b0:	206c                	fld	fa1,192(s0)
    802061b2:	616c                	ld	a1,192(a0)
    802061b4:	5f74                	lw	a3,124(a4)
    802061b6:	20676973          	csrrsi	s2,0x206,14
    802061ba:	502d                	c.li	zero,-21
    802061bc:	3120                	fld	fs0,96(a0)
    802061be:	6920                	ld	s0,80(a0)
    802061c0:	736e                	ld	t1,248(sp)
    802061c2:	6174                	ld	a3,192(a0)
    802061c4:	6c6c                	ld	a1,216(s0)
    802061c6:	230a                	fld	ft6,128(sp)
    802061c8:	6c20                	ld	s0,88(s0)
    802061ca:	626d                	lui	tp,0x1b
    802061cc:	6e65                	lui	t3,0x19
    802061ce:	615f6863          	bltu	t5,s5,802067de <localtime+0x2a9>
    802061d2:	6c6c                	ld	a1,216(s0)
    802061d4:	6c20                	ld	s0,88(s0)
    802061d6:	7461                	lui	s0,0xffff8
    802061d8:	735f 6769 2d20      	0x2d206769735f
    802061de:	2050                	fld	fa2,128(s0)
    802061e0:	2031                	0x2031
    802061e2:	63746163          	bltu	s0,s7,80206804 <localtime+0x2cf>
    802061e6:	0a68                	addi	a0,sp,284
    802061e8:	6d6c2023          	sw	s6,1728(s8) # 186c0 <_entry-0x801e7940>
    802061ec:	6562                	ld	a0,24(sp)
    802061ee:	636e                	ld	t1,216(sp)
    802061f0:	5f68                	lw	a0,124(a4)
    802061f2:	6c61                	lui	s8,0x18
    802061f4:	206c                	fld	fa1,192(s0)
    802061f6:	616c                	ld	a1,192(a0)
    802061f8:	5f74                	lw	a3,124(a4)
    802061fa:	20676973          	csrrsi	s2,0x206,14
    802061fe:	502d                	c.li	zero,-21
    80206200:	3120                	fld	fs0,96(a0)
    80206202:	7020                	ld	s0,96(s0)
    80206204:	6f72                	ld	t5,280(sp)
    80206206:	2074                	fld	fa3,192(s0)
    80206208:	616c                	ld	a1,192(a0)
    8020620a:	5f74                	lw	a3,124(a4)
    8020620c:	0a676973          	csrrsi	s2,0xa6,14
    80206210:	6d6c2023          	sw	s6,1728(s8) # 186c0 <_entry-0x801e7940>
    80206214:	6562                	ld	a0,24(sp)
    80206216:	636e                	ld	t1,216(sp)
    80206218:	5f68                	lw	a0,124(a4)
    8020621a:	6c61                	lui	s8,0x18
    8020621c:	206c                	fld	fa1,192(s0)
    8020621e:	616c                	ld	a1,192(a0)
    80206220:	5f74                	lw	a3,124(a4)
    80206222:	6970                	ld	a2,208(a0)
    80206224:	6570                	ld	a2,200(a0)
    80206226:	2d20                	fld	fs0,88(a0)
    80206228:	2050                	fld	fa2,128(s0)
    8020622a:	0a31                	addi	s4,s4,12
    8020622c:	6d6c2023          	sw	s6,1728(s8) # 186c0 <_entry-0x801e7940>
    80206230:	6562                	ld	a0,24(sp)
    80206232:	636e                	ld	t1,216(sp)
    80206234:	5f68                	lw	a0,124(a4)
    80206236:	6c61                	lui	s8,0x18
    80206238:	206c                	fld	fa1,192(s0)
    8020623a:	616c                	ld	a1,192(a0)
    8020623c:	5f74                	lw	a3,124(a4)
    8020623e:	7270                	ld	a2,224(a2)
    80206240:	2d20636f          	jal	t1,8020c512 <do_munmap+0x102>
    80206244:	2050                	fld	fa2,128(s0)
    80206246:	2031                	0x2031
    80206248:	6f66                	ld	t5,88(sp)
    8020624a:	6b72                	ld	s6,280(sp)
    8020624c:	230a                	fld	ft6,128(sp)
    8020624e:	6c20                	ld	s0,88(s0)
    80206250:	626d                	lui	tp,0x1b
    80206252:	6e65                	lui	t3,0x19
    80206254:	615f6863          	bltu	t5,s5,80206864 <localtime+0x32f>
    80206258:	6c6c                	ld	a1,216(s0)
    8020625a:	6c20                	ld	s0,88(s0)
    8020625c:	7461                	lui	s0,0xffff8
    8020625e:	705f 6f72 2063      	0x20636f72705f
    80206264:	502d                	c.li	zero,-21
    80206266:	3120                	fld	fs0,96(a0)
    80206268:	6520                	ld	s0,72(a0)
    8020626a:	6578                	ld	a4,200(a0)
    8020626c:	20230a63          	beq	t1,sp,80206480 <sacrifice_start+0x4b0>
    80206270:	7562                	ld	a0,56(sp)
    80206272:	6f627973          	csrrci	s2,0x6f6,4
    80206276:	2078                	fld	fa4,192(s0)
    80206278:	68207063          	bgeu	zero,sp,802068f8 <localtime+0x3c3>
    8020627c:	6c65                	lui	s8,0x19
    8020627e:	6f6c                	ld	a1,216(a4)
    80206280:	2f20                	fld	fs0,88(a4)
    80206282:	6d74                	ld	a3,216(a0)
    80206284:	0a70                	addi	a2,sp,284
    80206286:	6d6c2023          	sw	s6,1728(s8) # 196c0 <_entry-0x801e6940>
    8020628a:	6562                	ld	a0,24(sp)
    8020628c:	636e                	ld	t1,216(sp)
    8020628e:	5f68                	lw	a0,124(a4)
    80206290:	6c61                	lui	s8,0x18
    80206292:	206c                	fld	fa1,192(s0)
    80206294:	616c                	ld	a1,192(a0)
    80206296:	5f74                	lw	a3,124(a4)
    80206298:	7270                	ld	a2,224(a2)
    8020629a:	2d20636f          	jal	t1,8020c56c <do_munmap+0x15c>
    8020629e:	2050                	fld	fa2,128(s0)
    802062a0:	2031                	0x2031
    802062a2:	6c656873          	csrrsi	a6,0x6c6,10
    802062a6:	0a6c                	addi	a1,sp,284
    802062a8:	6d6c2023          	sw	s6,1728(s8) # 186c0 <_entry-0x801e7940>
    802062ac:	6562                	ld	a0,24(sp)
    802062ae:	636e                	ld	t1,216(sp)
    802062b0:	5f68                	lw	a0,124(a4)
    802062b2:	6c61                	lui	s8,0x18
    802062b4:	206c                	fld	fa1,192(s0)
    802062b6:	6d6c                	ld	a1,216(a0)
    802062b8:	6464                	ld	s1,200(s0)
    802062ba:	6c20                	ld	s0,88(s0)
    802062bc:	6261                	lui	tp,0x18
    802062be:	6c65                	lui	s8,0x19
    802062c0:	223d                	addiw	tp,tp,15
    802062c2:	6946                	ld	s2,80(sp)
    802062c4:	656c                	ld	a1,200(a0)
    802062c6:	2f20                	fld	fs0,88(a4)
    802062c8:	6176                	ld	sp,344(sp)
    802062ca:	2f72                	fld	ft10,280(sp)
    802062cc:	6d74                	ld	a3,216(a0)
    802062ce:	2f70                	fld	fa2,216(a4)
    802062d0:	5858                	lw	a4,52(s0)
    802062d2:	2058                	fld	fa4,128(s0)
    802062d4:	74697277          	0x74697277
    802062d8:	2065                	0x2065
    802062da:	6162                	ld	sp,24(sp)
    802062dc:	646e                	ld	s0,216(sp)
    802062de:	74646977          	0x74646977
    802062e2:	3a68                	fld	fa0,240(a2)
    802062e4:	2022                	fld	ft0,8(sp)
    802062e6:	2f3d666f          	jal	a2,802dcdd8 <data_start+0xc6dd8>
    802062ea:	6176                	ld	sp,344(sp)
    802062ec:	2f72                	fld	ft10,280(sp)
    802062ee:	6d74                	ld	a3,216(a0)
    802062f0:	2f70                	fld	fa2,216(a4)
    802062f2:	5858                	lw	a4,52(s0)
    802062f4:	2058                	fld	fa4,128(s0)
    802062f6:	6f6d                	lui	t5,0x1b
    802062f8:	6576                	ld	a0,344(sp)
    802062fa:	313d                	addiw	sp,sp,-17
    802062fc:	206d                	0x206d
    802062fe:	7366                	ld	t1,120(sp)
    80206300:	6e79                	lui	t3,0x1e
    80206302:	20313d63          	0x20313d63
    80206306:	7270                	ld	a2,224(a2)
    80206308:	6e69                	lui	t3,0x1a
    8020630a:	3d74                	fld	fa3,248(a0)
    8020630c:	20230a33          	0x20230a33
    80206310:	6d6c                	ld	a1,216(a0)
    80206312:	6562                	ld	a0,24(sp)
    80206314:	636e                	ld	t1,216(sp)
    80206316:	5f68                	lw	a0,124(a4)
    80206318:	6c61                	lui	s8,0x18
    8020631a:	206c                	fld	fa1,192(s0)
    8020631c:	616c                	ld	a1,192(a0)
    8020631e:	5f74                	lw	a3,124(a4)
    80206320:	6170                	ld	a2,192(a0)
    80206322:	61666567          	0x61666567
    80206326:	6c75                	lui	s8,0x1d
    80206328:	2074                	fld	fa3,192(s0)
    8020632a:	502d                	c.li	zero,-21
    8020632c:	3120                	fld	fs0,96(a0)
    8020632e:	2f20                	fld	fs0,88(a4)
    80206330:	6176                	ld	sp,344(sp)
    80206332:	2f72                	fld	ft10,280(sp)
    80206334:	6d74                	ld	a3,216(a0)
    80206336:	2f70                	fld	fa2,216(a4)
    80206338:	5858                	lw	a4,52(s0)
    8020633a:	0a58                	addi	a4,sp,276
    8020633c:	6d6c2023          	sw	s6,1728(s8) # 1d6c0 <_entry-0x801e2940>
    80206340:	6562                	ld	a0,24(sp)
    80206342:	636e                	ld	t1,216(sp)
    80206344:	5f68                	lw	a0,124(a4)
    80206346:	6c61                	lui	s8,0x18
    80206348:	206c                	fld	fa1,192(s0)
    8020634a:	616c                	ld	a1,192(a0)
    8020634c:	5f74                	lw	a3,124(a4)
    8020634e:	6d6d                	lui	s10,0x1b
    80206350:	7061                	c.lui	zero,0xffff8
    80206352:	2d20                	fld	fs0,88(a0)
    80206354:	2050                	fld	fa2,128(s0)
    80206356:	2031                	0x2031
    80206358:	3135                	addiw	sp,sp,-19
    8020635a:	6b32                	ld	s6,264(sp)
    8020635c:	2f20                	fld	fs0,88(a4)
    8020635e:	6176                	ld	sp,344(sp)
    80206360:	2f72                	fld	ft10,280(sp)
    80206362:	6d74                	ld	a3,216(a0)
    80206364:	2f70                	fld	fa2,216(a4)
    80206366:	5858                	lw	a4,52(s0)
    80206368:	0a58                	addi	a4,sp,276
    8020636a:	75622023          	sw	s6,1856(tp) # 18740 <_entry-0x801e78c0>
    8020636e:	6f627973          	csrrci	s2,0x6f6,4
    80206372:	2078                	fld	fa4,192(s0)
    80206374:	6365                	lui	t1,0x19
    80206376:	6f68                	ld	a0,216(a4)
    80206378:	6620                	ld	s0,72(a2)
    8020637a:	6c69                	lui	s8,0x1a
    8020637c:	2065                	0x2065
    8020637e:	74737973          	csrrci	s2,0x747,6
    80206382:	6d65                	lui	s10,0x19
    80206384:	6c20                	ld	s0,88(s0)
    80206386:	7461                	lui	s0,0xffff8
    80206388:	6e65                	lui	t3,0x19
    8020638a:	230a7963          	bgeu	s4,a6,802065bc <localtime+0x87>
    8020638e:	6c20                	ld	s0,88(s0)
    80206390:	626d                	lui	tp,0x1b
    80206392:	6e65                	lui	t3,0x19
    80206394:	615f6863          	bltu	t5,s5,802069a4 <localtime+0x46f>
    80206398:	6c6c                	ld	a1,216(s0)
    8020639a:	6c20                	ld	s0,88(s0)
    8020639c:	7461                	lui	s0,0xffff8
    8020639e:	665f 2073 762f      	0x762f2073665f
    802063a4:	7261                	lui	tp,0xffff8
    802063a6:	706d742f          	0x706d742f
    802063aa:	230a                	fld	ft6,128(sp)
    802063ac:	6220                	ld	s0,64(a2)
    802063ae:	7375                	lui	t1,0xffffd
    802063b0:	6279                	lui	tp,0x1e
    802063b2:	6520786f          	jal	a6,8020da04 <sys_openat+0x316>
    802063b6:	206f6863          	bltu	t5,t1,802065c6 <localtime+0x91>
    802063ba:	6142                	ld	sp,16(sp)
    802063bc:	646e                	ld	s0,216(sp)
    802063be:	74646977          	0x74646977
    802063c2:	2068                	fld	fa0,192(s0)
    802063c4:	656d                	lui	a0,0x1b
    802063c6:	7361                	lui	t1,0xffff8
    802063c8:	7275                	lui	tp,0xffffd
    802063ca:	6d65                	lui	s10,0x19
    802063cc:	6e65                	lui	t3,0x19
    802063ce:	7374                	ld	a3,224(a4)
    802063d0:	230a                	fld	ft6,128(sp)
    802063d2:	6c20                	ld	s0,88(s0)
    802063d4:	626d                	lui	tp,0x1b
    802063d6:	6e65                	lui	t3,0x19
    802063d8:	615f6863          	bltu	t5,s5,802069e8 <localtime+0x4b3>
    802063dc:	6c6c                	ld	a1,216(s0)
    802063de:	6220                	ld	s0,64(a2)
    802063e0:	69705f77          	0x69705f77
    802063e4:	6570                	ld	a2,200(a0)
    802063e6:	2d20                	fld	fs0,88(a0)
    802063e8:	2050                	fld	fa2,128(s0)
    802063ea:	0a31                	addi	s4,s4,12
    802063ec:	6d6c2023          	sw	s6,1728(s8) # 1a6c0 <_entry-0x801e5940>
    802063f0:	6562                	ld	a0,24(sp)
    802063f2:	636e                	ld	t1,216(sp)
    802063f4:	5f68                	lw	a0,124(a4)
    802063f6:	6c61                	lui	s8,0x18
    802063f8:	206c                	fld	fa1,192(s0)
    802063fa:	7762                	ld	a4,56(sp)
    802063fc:	665f 6c69 5f65      	0x5f656c69665f
    80206402:	6472                	ld	s0,280(sp)
    80206404:	2d20                	fld	fs0,88(a0)
    80206406:	2050                	fld	fa2,128(s0)
    80206408:	2031                	0x2031
    8020640a:	3135                	addiw	sp,sp,-19
    8020640c:	6b32                	ld	s6,264(sp)
    8020640e:	6920                	ld	s0,80(a0)
    80206410:	6e6f5f6f          	jal	t5,802fbaf6 <data_start+0xe5af6>
    80206414:	796c                	ld	a1,240(a0)
    80206416:	2f20                	fld	fs0,88(a4)
    80206418:	6176                	ld	sp,344(sp)
    8020641a:	2f72                	fld	ft10,280(sp)
    8020641c:	6d74                	ld	a3,216(a0)
    8020641e:	2f70                	fld	fa2,216(a4)
    80206420:	5858                	lw	a4,52(s0)
    80206422:	0a58                	addi	a4,sp,276
    80206424:	6d6c2023          	sw	s6,1728(s8) # 186c0 <_entry-0x801e7940>
    80206428:	6562                	ld	a0,24(sp)
    8020642a:	636e                	ld	t1,216(sp)
    8020642c:	5f68                	lw	a0,124(a4)
    8020642e:	6c61                	lui	s8,0x18
    80206430:	206c                	fld	fa1,192(s0)
    80206432:	7762                	ld	a4,56(sp)
    80206434:	665f 6c69 5f65      	0x5f656c69665f
    8020643a:	6472                	ld	s0,280(sp)
    8020643c:	2d20                	fld	fs0,88(a0)
    8020643e:	2050                	fld	fa2,128(s0)
    80206440:	2031                	0x2031
    80206442:	3135                	addiw	sp,sp,-19
    80206444:	6b32                	ld	s6,264(sp)
    80206446:	6f20                	ld	s0,88(a4)
    80206448:	6570                	ld	a2,200(a0)
    8020644a:	326e                	fld	ft4,248(sp)
    8020644c:	736f6c63          	bltu	t5,s6,80206b84 <localtime+0x64f>
    80206450:	2065                	0x2065
    80206452:	7261762f          	0x7261762f
    80206456:	706d742f          	0x706d742f
    8020645a:	5858582f          	0x5858582f
    8020645e:	230a                	fld	ft6,128(sp)
    80206460:	6c20                	ld	s0,88(s0)
    80206462:	626d                	lui	tp,0x1b
    80206464:	6e65                	lui	t3,0x19
    80206466:	615f6863          	bltu	t5,s5,80206a76 <localtime+0x541>
    8020646a:	6c6c                	ld	a1,216(s0)
    8020646c:	6220                	ld	s0,64(a2)
    8020646e:	6d6d5f77          	0x6d6d5f77
    80206472:	7061                	c.lui	zero,0xffff8
    80206474:	725f 2064 502d      	0x502d2064725f
    8020647a:	3120                	fld	fs0,96(a0)
    8020647c:	3520                	fld	fs0,104(a0)
    8020647e:	3231                	addiw	tp,tp,-20
    80206480:	6d6d206b          	0x6d6d206b
    80206484:	7061                	c.lui	zero,0xffff8
    80206486:	6f5f 6c6e 2079      	0x20796c6e6f5f
    8020648c:	7261762f          	0x7261762f
    80206490:	706d742f          	0x706d742f
    80206494:	5858582f          	0x5858582f
    80206498:	230a                	fld	ft6,128(sp)
    8020649a:	6c20                	ld	s0,88(s0)
    8020649c:	626d                	lui	tp,0x1b
    8020649e:	6e65                	lui	t3,0x19
    802064a0:	615f6863          	bltu	t5,s5,80206ab0 <localtime+0x57b>
    802064a4:	6c6c                	ld	a1,216(s0)
    802064a6:	6220                	ld	s0,64(a2)
    802064a8:	6d6d5f77          	0x6d6d5f77
    802064ac:	7061                	c.lui	zero,0xffff8
    802064ae:	725f 2064 502d      	0x502d2064725f
    802064b4:	3120                	fld	fs0,96(a0)
    802064b6:	3520                	fld	fs0,104(a0)
    802064b8:	3231                	addiw	tp,tp,-20
    802064ba:	706f206b          	0x706f206b
    802064be:	6e65                	lui	t3,0x19
    802064c0:	6332                	ld	t1,264(sp)
    802064c2:	6f6c                	ld	a1,216(a4)
    802064c4:	2f206573          	csrrsi	a0,0x2f2,0
    802064c8:	6176                	ld	sp,344(sp)
    802064ca:	2f72                	fld	ft10,280(sp)
    802064cc:	6d74                	ld	a3,216(a0)
    802064ce:	2f70                	fld	fa2,216(a4)
    802064d0:	5858                	lw	a4,52(s0)
    802064d2:	0a58                	addi	a4,sp,276
    802064d4:	75622023          	sw	s6,1856(tp) # 1b740 <_entry-0x801e48c0>
    802064d8:	6f627973          	csrrci	s2,0x6f6,4
    802064dc:	2078                	fld	fa4,192(s0)
    802064de:	6365                	lui	t1,0x19
    802064e0:	6f68                	ld	a0,216(a4)
    802064e2:	6320                	ld	s0,64(a4)
    802064e4:	65746e6f          	jal	t3,8024d33a <data_start+0x3733a>
    802064e8:	7478                	ld	a4,232(s0)
    802064ea:	7320                	ld	s0,96(a4)
    802064ec:	63746977          	0x63746977
    802064f0:	2068                	fld	fa0,192(s0)
    802064f2:	7265766f          	jal	a2,8025dc18 <data_start+0x47c18>
    802064f6:	6568                	ld	a0,200(a0)
    802064f8:	6461                	lui	s0,0x18
    802064fa:	230a                	fld	ft6,128(sp)
    802064fc:	6c20                	ld	s0,88(s0)
    802064fe:	626d                	lui	tp,0x1b
    80206500:	6e65                	lui	t3,0x19
    80206502:	615f6863          	bltu	t5,s5,80206b12 <localtime+0x5dd>
    80206506:	6c6c                	ld	a1,216(s0)
    80206508:	6c20                	ld	s0,88(s0)
    8020650a:	7461                	lui	s0,0xffff8
    8020650c:	635f 7874 2d20      	0x2d207874635f
    80206512:	2050                	fld	fa2,128(s0)
    80206514:	2031                	0x2031
    80206516:	732d                	lui	t1,0xfffeb
    80206518:	3320                	fld	fs0,96(a4)
    8020651a:	2032                	fld	ft0,264(sp)
    8020651c:	2032                	fld	ft0,264(sp)
    8020651e:	2034                	fld	fa3,64(s0)
    80206520:	2038                	fld	fa4,64(s0)
    80206522:	3631                	addiw	a2,a2,-20
    80206524:	3220                	fld	fs0,96(a2)
    80206526:	2034                	fld	fa3,64(s0)
    80206528:	36203233          	0x36203233
    8020652c:	2034                	fld	fa3,64(s0)
    8020652e:	3639                	addiw	a2,a2,-18
    80206530:	0a              	Address 0x0000000080206530 is out of bounds.


0000000080206531 <sacrifice_size>:
    80206531:	0561                	addi	a0,a0,24
	...

0000000080206535 <localtime>:
    80206535:	5a54                	lw	a3,52(a2)
    80206537:	6669                	lui	a2,0x1a
    80206539:	0032                	c.slli	zero,0xc
	...
    8020654b:	0500                	addi	s0,sp,640
    8020654d:	0000                	unimp
    8020654f:	0500                	addi	s0,sp,640
    80206551:	0000                	unimp
    80206553:	0000                	unimp
    80206555:	0000                	unimp
    80206557:	ba00                	fsd	fs0,48(a2)
    80206559:	0000                	unimp
    8020655b:	0500                	addi	s0,sp,640
    8020655d:	0000                	unimp
    8020655f:	1400                	addi	s0,sp,544
    80206561:	0080                	addi	s0,sp,64
    80206563:	0000                	unimp
    80206565:	a69e                	fsd	ft7,328(sp)
    80206567:	a048                	fsd	fa0,128(s0)
    80206569:	bb9f 9015 86a0      	0x86a09015bb9f
    8020656f:	a02a                	fsd	fa0,0(sp)
    80206571:	9aa1                	andi	a3,a3,-24
    80206573:	89cb90f7          	0x89cb90f7
    80206577:	a01a                	fsd	ft6,0(sp)
    80206579:	23d2                	fld	ft7,272(sp)
    8020657b:	70f4                	ld	a3,224(s1)
    8020657d:	61d2                	ld	gp,272(sp)
    8020657f:	1026                	c.slli	zero,0x29
    80206581:	fed6                	sd	s5,376(sp)
    80206583:	5c74                	lw	a3,124(s0)
    80206585:	80d8                	0x80d8
    80206587:	90ad                	srli	s1,s1,0x2b
    80206589:	feda                	sd	s6,376(sp)
    8020658b:	c0db90c3          	fmadd.s	ft1,fs7,fa3,fs8,rtz
    8020658f:	1090                	addi	a2,sp,96
    80206591:	dedc                	sw	a5,60(a3)
    80206593:	90a5                	srli	s1,s1,0x29
    80206595:	a9dd                	j	80206a8b <localtime+0x556>
    80206597:	90ac                	0x90ac
    80206599:	bede                	fsd	fs7,376(sp)
    8020659b:	89df9087          	0x89df9087
    8020659f:	908e                	add	ra,ra,gp
    802065a1:	9ee0                	0x9ee0
    802065a3:	9069                	srli	s0,s0,0x3a
    802065a5:	69e1                	lui	s3,0x18
    802065a7:	9070                	0x9070
    802065a9:	7ee2                	ld	t4,56(sp)
    802065ab:	49e3904b          	fnmsub.s	ft0,ft7,ft10,fs1,rtz
    802065af:	9052                	c.add	zero,s4
    802065b1:	5ee4                	lw	s1,124(a3)
    802065b3:	902d                	srli	s0,s0,0x2b
    802065b5:	29e5                	addiw	s3,s3,25
    802065b7:	9034                	0x9034
    802065b9:	47e6                	lw	a5,88(sp)
    802065bb:	104a                	c.slli	zero,0x32
    802065bd:	105112e7          	0x105112e7
    802065c1:	27e8                	fld	fa0,200(a5)
    802065c3:	102c                	addi	a1,sp,40
    802065c5:	f2e8                	sd	a0,224(a3)
    802065c7:	07ea1033          	0x7ea1033
    802065cb:	100e                	c.slli	zero,0x23
    802065cd:	d2ea                	sw	s10,100(sp)
    802065cf:	1015                	c.nop	-27
    802065d1:	10f0e6eb          	0x10f0e6eb
    802065d5:	b1ec                	fsd	fa1,224(a1)
    802065d7:	c6ed10f7          	0xc6ed10f7
    802065db:	10d2                	slli	ra,ra,0x34
    802065dd:	91ee                	add	gp,gp,s11
    802065df:	10d9                	addi	ra,ra,-10
    802065e1:	90eeafef          	jal	t6,801f06ef <_entry-0xf911>
    802065e5:	71f0                	ld	a2,224(a1)
    802065e7:	8ff110bb          	0x8ff110bb
    802065eb:	90d0                	0x90d0
    802065ed:	7ff2                	ld	t6,312(sp)
    802065ef:	90c1                	srli	s1,s1,0x30
    802065f1:	90b26ff3          	csrrsi	t6,0x90b,4
    802065f5:	5ff4                	lw	a3,124(a5)
    802065f7:	4ff590a3          	sh	t6,1249(a1)
    802065fb:	9094                	0x9094
    802065fd:	3ff6                	fld	ft11,376(sp)
    802065ff:	9085                	srli	s1,s1,0x21
    80206601:	90762ff7          	0x90762ff7
    80206605:	28f8                	fld	fa4,208(s1)
    80206607:	10a2                	slli	ra,ra,0x28
    80206609:	0ff9                	addi	t6,t6,30
    8020660b:	9058                	0x9058
    8020660d:	08fa                	slli	a7,a7,0x1e
    8020660f:	1084                	addi	s1,sp,96
    80206611:	f8fa                	sd	t5,112(sp)
    80206613:	e8fb2083          	lw	ra,-369(s6) # fe8f <_entry-0x801f0171>
    80206617:	1066                	c.slli	zero,0x39
    80206619:	d8fc                	sw	a5,116(s1)
    8020661b:	2065                	0x2065
    8020661d:	c8fd                	beqz	s1,80206713 <localtime+0x1de>
    8020661f:	1048                	addi	a0,sp,36
    80206621:	b8fe                	fsd	ft11,112(sp)
    80206623:	a8ff2047          	fmsub.s	ft0,ft10,fa5,fs5,rdn
    80206627:	102a                	c.slli	zero,0x2a
    80206629:	9800                	0x9800
    8020662b:	2029                	0x2029
    8020662d:	8801                	andi	s0,s0,0
    8020662f:	100c                	addi	a1,sp,32
    80206631:	7802                	ld	a6,32(sp)
    80206633:	7103200b          	0x7103200b
    80206637:	9028                	0x9028
    80206639:	6104                	ld	s1,0(a0)
    8020663b:	5105a027          	fsw	fa6,1280(a1)
    8020663f:	900a                	c.add	zero,sp
    80206641:	4106                	lw	sp,64(sp)
    80206643:	a009                	j	80206645 <localtime+0x110>
    80206645:	90ec3007          	fld	ft0,-1778(s8) # 1790e <_entry-0x801e86f2>
    80206649:	a0438d07          	0xa0438d07
    8020664d:	1009                	c.nop	-30
    8020664f:	90ce                	add	ra,ra,s3
    80206651:	ad09                	j	80206c63 <localtime+0x72e>
    80206653:	f00a20bf e00b90b0 	0xe00b90b0f00a20bf
    8020665b:	d90ca0af          	0xd90ca0af
    8020665f:	10cd                	addi	ra,ra,-13
    80206661:	c00d                	beqz	s0,80206683 <localtime+0x14e>
    80206663:	a091                	j	802066a7 <localtime+0x172>
    80206665:	b90e                	fsd	ft3,176(sp)
    80206667:	a90f10af          	0xa90f10af
    8020666b:	20ae                	fld	ft1,200(sp)
    8020666d:	9910                	0x9910
    8020666f:	1091                	addi	ra,ra,-28
    80206671:	8911                	andi	a0,a0,4
    80206673:	2090                	fld	fa2,0(s1)
    80206675:	7912                	ld	s2,288(sp)
    80206677:	69131073          	csrw	0x691,t1
    8020667b:	2072                	fld	ft0,280(sp)
    8020667d:	5914                	lw	a3,48(a0)
    8020667f:	1055                	c.nop	-11
    80206681:	4915                	li	s2,5
    80206683:	2054                	fld	fa3,128(s0)
    80206685:	3916                	fld	fs2,352(sp)
    80206687:	29171037          	lui	zero,0x29171
    8020668b:	2036                	fld	ft0,328(sp)
    8020668d:	2218                	fld	fa4,0(a2)
    8020668f:	09199053          	fsub.s	ft0,fs3,fa7,rtz
    80206693:	2018                	fld	fa4,0(s0)
    80206695:	021a                	slli	tp,tp,0x6
    80206697:	9035                	srli	s0,s0,0x2d
    80206699:	f21a                	sd	t1,288(sp)
    8020669b:	a034                	fsd	fa3,64(s0)
    8020669d:	9017e21b          	0x9017e21b
    802066a1:	d21c                	sw	a5,32(a2)
    802066a3:	a016                	fsd	ft5,0(sp)
    802066a5:	c11d                	beqz	a0,802066cb <localtime+0x196>
    802066a7:	90f9                	srli	s1,s1,0x3e
    802066a9:	b11e                	fsd	ft7,160(sp)
    802066ab:	a0f8                	fsd	fa4,192(s1)
    802066ad:	a11f 90db 7620      	0x762090dba11f
    802066b3:	8121202b          	0x8121202b
    802066b7:	90bd                	srli	s1,s1,0x2f
    802066b9:	5622                	lw	a2,40(sp)
    802066bb:	200d                	0x200d
    802066bd:	10da6a23          	0x10da6a23
    802066c1:	3524                	fld	fs1,104(a0)
    802066c3:	4a2520ef          	jal	ra,80258b65 <data_start+0x42b65>
    802066c7:	10bc                	addi	a5,sp,104
    802066c9:	1526                	slli	a0,a0,0x29
    802066cb:	20d1                	addiw	ra,ra,20
    802066cd:	109e2a27          	fsw	fs1,276(t3) # 19114 <_entry-0x801e6eec>
    802066d1:	a0edfe27          	0xa0edfe27
    802066d5:	0a29                	addi	s4,s4,10
    802066d7:	1080                	addi	s0,sp,96
    802066d9:	de29                	beqz	a2,80206633 <localtime+0xfe>
    802066db:	ea2aa0cf          	fnmadd.d	ft1,fs5,ft2,ft9,rdn
    802066df:	1062                	c.slli	zero,0x38
    802066e1:	a0b1be2b          	0xa0b1be2b
    802066e5:	d32c                	sw	a1,96(a4)
    802066e7:	907e                	c.add	zero,t6
    802066e9:	9e2d                	addw	a2,a2,a1
    802066eb:	b32ea093          	slti	ra,t4,-1230
    802066ef:	9060                	0x9060
    802066f1:	a0757e2f          	0xa0757e2f
    802066f5:	9330                	0x9330
    802066f7:	9042                	c.add	zero,a6
    802066f9:	6731                	lui	a4,0xc
    802066fb:	2092                	fld	ft1,256(sp)
    802066fd:	7332                	ld	t1,296(sp)
    802066ff:	9024                	0x9024
    80206701:	20744733          	0x20744733
    80206705:	5334                	lw	a3,96(a4)
    80206707:	9006                	c.add	zero,ra
    80206709:	2735                	addiw	a4,a4,13
    8020670b:	2056                	fld	ft0,336(sp)
    8020670d:	3236                	fld	ft4,360(sp)
    8020670f:	90e8                	0x90e8
    80206711:	20380737          	lui	a4,0x20380
    80206715:	1c38                	addi	a4,sp,568
    80206717:	1005                	c.nop	-31
    80206719:	e738                	sd	a4,72(a4)
    8020671b:	201a                	fld	ft0,384(sp)
    8020671d:	fb39                	bnez	a4,80206673 <localtime+0x13e>
    8020671f:	c63a10e7          	0xc63a10e7
    80206723:	20fc                	fld	fa5,192(s1)
    80206725:	10c9db3b          	0x10c9db3b
    80206729:	b03c                	fsd	fa5,96(s0)
    8020672b:	a018                	fsd	fa4,0(s0)
    8020672d:	bb3d                	j	8020646b <sacrifice_start+0x49b>
    8020672f:	8f3e10ab          	0x8f3e10ab
    80206733:	a0fa                	fsd	ft10,64(sp)
    80206735:	108d9b3f a0dc6f40 	0xa0dc6f40108d9b3f
    8020673d:	8441                	srai	s0,s0,0x10
    8020673f:	90a9                	srli	s1,s1,0x2a
    80206741:	4f42                	lw	t5,16(sp)
    80206743:	a0be                	fsd	fa5,64(sp)
    80206745:	908b6443          	fmadd.s	fs0,fs6,fs0,fs2,unknown
    80206749:	2f44                	fld	fs1,152(a4)
    8020674b:	a0a0                	fsd	fs0,64(s1)
    8020674d:	4445                	li	s0,17
    8020674f:	906d                	srli	s0,s0,0x3b
    80206751:	f345                	bnez	a4,802066f1 <localtime+0x1bc>
    80206753:	2d4720d3          	0x2d4720d3
    80206757:	108a                	slli	ra,ra,0x22
    80206759:	20b5d347          	fmsub.s	ft6,fa1,fa1,ft4,unknown
    8020675d:	0d49                	addi	s10,s10,18
    8020675f:	106c                	addi	a1,sp,44
    80206761:	b349                	j	802064e3 <sacrifice_start+0x513>
    80206763:	ed4a2097          	auipc	ra,0xed4a2
    80206767:	104e                	c.slli	zero,0x33
    80206769:	a0b39c4b          	fnmsub.s	fs8,ft7,fa1,fs4,rtz
    8020676d:	d64c                	sw	a1,44(a2)
    8020676f:	906a                	c.add	zero,s10
    80206771:	7c4d                	lui	s8,0xffff3
    80206773:	a095                	j	802067d7 <localtime+0x2a2>
    80206775:	b64e                	fsd	fs3,296(sp)
    80206777:	904c                	0x904c
    80206779:	a0775c4f          	fnmadd.s	fs8,fa4,ft7,fs4,unknown
    8020677d:	9650                	0x9650
    8020677f:	902e                	c.add	zero,a1
    80206781:	3c51                	addiw	s8,s8,-12
    80206783:	a059                	j	80206809 <localtime+0x2d4>
    80206785:	7652                	ld	a2,304(sp)
    80206787:	9010                	0x9010
    80206789:	a03b1c53          	flt.s	s8,fs6,ft3
    8020678d:	5554                	lw	a3,44(a0)
    8020678f:	90f2                	add	ra,ra,t3
    80206791:	fc54                	sd	a3,184(s0)
    80206793:	a01d                	j	802067b9 <localtime+0x284>
    80206795:	3556                	fld	fa0,368(sp)
    80206797:	90d4                	0x90d4
    80206799:	e556                	sd	s5,136(sp)
    8020679b:	203a                	fld	ft0,392(sp)
    8020679d:	1e58                	addi	a4,sp,820
    8020679f:	10f1                	addi	ra,ra,-4
    802067a1:	c558                	sw	a4,12(a0)
    802067a3:	201c                	fld	fa5,0(s0)
    802067a5:	fe59                	bnez	a2,80206743 <localtime+0x20e>
    802067a7:	a45a10d3          	0xa45a10d3
    802067ab:	20fe                	fld	ft1,472(sp)
    802067ad:	10b5de5b          	0x10b5de5b
    802067b1:	845c                	0x845c
    802067b3:	20e0                	fld	fs0,192(s1)
    802067b5:	be5d                	j	8020636b <sacrifice_start+0x39b>
    802067b7:	645e1097          	auipc	ra,0x645e1
    802067bb:	20c2                	fld	ft1,16(sp)
    802067bd:	9e5f 1079 4d60      	0x4d6010799e5f
    802067c3:	a0de                	fsd	fs7,64(sp)
    802067c5:	8761                	srai	a4,a4,0x18
    802067c7:	9095                	srli	s1,s1,0x25
    802067c9:	2d62                	fld	fs10,24(sp)
    802067cb:	a0c0                	fsd	fs0,128(s1)
    802067cd:	90776763          	bltu	a4,t2,802058db <filewrite+0x23>
    802067d1:	0d64                	addi	s1,sp,668
    802067d3:	a0a2                	fsd	fs0,64(sp)
    802067d5:	4765                	li	a4,25
    802067d7:	9059                	srli	s0,s0,0x36
    802067d9:	ed65                	bnez	a0,802068d1 <localtime+0x39c>
    802067db:	a084                	fsd	fs1,0(s1)
    802067dd:	903b2767          	0x903b2767
    802067e1:	a066cd67          	0xa066cd67
    802067e5:	0769                	addi	a4,a4,26
    802067e7:	901d                	srli	s0,s0,0x27
    802067e9:	ad69                	j	80206e83 <localtime+0x94e>
    802067eb:	a048                	fsd	fa0,128(s0)
    802067ed:	e66a                	sd	s10,264(sp)
    802067ef:	90ff                	0x90ff
    802067f1:	2065966b          	0x2065966b
    802067f5:	d06c                	sw	a1,100(s0)
    802067f7:	101c                	addi	a5,sp,32
    802067f9:	766d                	lui	a2,0xffffb
    802067fb:	af6e2047          	fmsub.q	ft0,ft8,fs6,fs5,rdn
    802067ff:	10fe                	slli	ra,ra,0x3f
    80206801:	2029566f          	jal	a2,8029ba03 <data_start+0x85a03>
    80206805:	8f70                	0x8f70
    80206807:	10e0                	addi	s0,sp,108
    80206809:	3671                	addiw	a2,a2,-4
    8020680b:	6f72200b          	0x6f72200b
    8020680f:	10c2                	slli	ra,ra,0x30
    80206811:	20ed1573          	csrrw	a0,0x20e,s10
    80206815:	4f74                	lw	a3,92(a4)
    80206817:	10a4                	addi	s1,sp,104
    80206819:	ff74                	sd	a3,248(a4)
    8020681b:	a009                	j	8020681d <localtime+0x2e8>
    8020681d:	3876                	fld	fa6,376(sp)
    8020681f:	90c0                	0x90c0
    80206821:	de76                	sw	t4,60(sp)
    80206823:	1878a0eb          	0x1878a0eb
    80206827:	90a2                	add	ra,ra,s0
    80206829:	be78                	fsd	fa4,248(a2)
    8020682b:	a0cd                	j	8020690d <localtime+0x3d8>
    8020682d:	f879                	bnez	s0,80206803 <localtime+0x2ce>
    8020682f:	9084                	0x9084
    80206831:	9e7a                	add	t3,t3,t5
    80206833:	d87ba0af          	0xd87ba0af
    80206837:	9066                	c.add	zero,s9
    80206839:	7e7c                	ld	a5,248(a2)
    8020683b:	a091                	j	8020687f <localtime+0x34a>
    8020683d:	b87d                	j	802060fb <sacrifice_start+0x12b>
    8020683f:	9048                	0x9048
    80206841:	5e7e                	lw	t3,252(sp)
    80206843:	987fa073          	csrs	0x987,t6
    80206847:	902a                	c.add	zero,a0
    80206849:	0102                	c.slli64	sp
    8020684b:	0102                	c.slli64	sp
    8020684d:	0302                	c.slli64	t1
    8020684f:	0204                	addi	s1,sp,256
    80206851:	0201                	addi	tp,tp,0
    80206853:	0201                	addi	tp,tp,0
    80206855:	0201                	addi	tp,tp,0
    80206857:	0201                	addi	tp,tp,0
    80206859:	0201                	addi	tp,tp,0
    8020685b:	0201                	addi	tp,tp,0
    8020685d:	0201                	addi	tp,tp,0
    8020685f:	0201                	addi	tp,tp,0
    80206861:	0201                	addi	tp,tp,0
    80206863:	0201                	addi	tp,tp,0
    80206865:	0201                	addi	tp,tp,0
    80206867:	0201                	addi	tp,tp,0
    80206869:	0201                	addi	tp,tp,0
    8020686b:	0201                	addi	tp,tp,0
    8020686d:	0201                	addi	tp,tp,0
    8020686f:	0201                	addi	tp,tp,0
    80206871:	0201                	addi	tp,tp,0
    80206873:	0201                	addi	tp,tp,0
    80206875:	0201                	addi	tp,tp,0
    80206877:	0201                	addi	tp,tp,0
    80206879:	0201                	addi	tp,tp,0
    8020687b:	0201                	addi	tp,tp,0
    8020687d:	0201                	addi	tp,tp,0
    8020687f:	0201                	addi	tp,tp,0
    80206881:	0201                	addi	tp,tp,0
    80206883:	0201                	addi	tp,tp,0
    80206885:	0201                	addi	tp,tp,0
    80206887:	0201                	addi	tp,tp,0
    80206889:	0201                	addi	tp,tp,0
    8020688b:	0201                	addi	tp,tp,0
    8020688d:	0201                	addi	tp,tp,0
    8020688f:	0201                	addi	tp,tp,0
    80206891:	0201                	addi	tp,tp,0
    80206893:	0201                	addi	tp,tp,0
    80206895:	0201                	addi	tp,tp,0
    80206897:	0201                	addi	tp,tp,0
    80206899:	0201                	addi	tp,tp,0
    8020689b:	0201                	addi	tp,tp,0
    8020689d:	0201                	addi	tp,tp,0
    8020689f:	0201                	addi	tp,tp,0
    802068a1:	0201                	addi	tp,tp,0
    802068a3:	0201                	addi	tp,tp,0
    802068a5:	0201                	addi	tp,tp,0
    802068a7:	0201                	addi	tp,tp,0
    802068a9:	0201                	addi	tp,tp,0
    802068ab:	0201                	addi	tp,tp,0
    802068ad:	0201                	addi	tp,tp,0
    802068af:	0201                	addi	tp,tp,0
    802068b1:	0201                	addi	tp,tp,0
    802068b3:	0201                	addi	tp,tp,0
    802068b5:	0201                	addi	tp,tp,0
    802068b7:	0201                	addi	tp,tp,0
    802068b9:	0201                	addi	tp,tp,0
    802068bb:	0201                	addi	tp,tp,0
    802068bd:	0201                	addi	tp,tp,0
    802068bf:	0201                	addi	tp,tp,0
    802068c1:	0201                	addi	tp,tp,0
    802068c3:	0201                	addi	tp,tp,0
    802068c5:	0201                	addi	tp,tp,0
    802068c7:	0201                	addi	tp,tp,0
    802068c9:	0201                	addi	tp,tp,0
    802068cb:	0201                	addi	tp,tp,0
    802068cd:	0201                	addi	tp,tp,0
    802068cf:	0201                	addi	tp,tp,0
    802068d1:	0201                	addi	tp,tp,0
    802068d3:	0201                	addi	tp,tp,0
    802068d5:	0201                	addi	tp,tp,0
    802068d7:	0201                	addi	tp,tp,0
    802068d9:	0201                	addi	tp,tp,0
    802068db:	0201                	addi	tp,tp,0
    802068dd:	0201                	addi	tp,tp,0
    802068df:	0201                	addi	tp,tp,0
    802068e1:	0201                	addi	tp,tp,0
    802068e3:	0201                	addi	tp,tp,0
    802068e5:	0201                	addi	tp,tp,0
    802068e7:	0201                	addi	tp,tp,0
    802068e9:	0201                	addi	tp,tp,0
    802068eb:	0201                	addi	tp,tp,0
    802068ed:	0201                	addi	tp,tp,0
    802068ef:	0201                	addi	tp,tp,0
    802068f1:	0201                	addi	tp,tp,0
    802068f3:	0201                	addi	tp,tp,0
    802068f5:	0201                	addi	tp,tp,0
    802068f7:	0201                	addi	tp,tp,0
    802068f9:	0201                	addi	tp,tp,0
    802068fb:	0201                	addi	tp,tp,0
    802068fd:	0201                	addi	tp,tp,0
    802068ff:	0201                	addi	tp,tp,0
    80206901:	0201                	addi	tp,tp,0
    80206903:	ffff                	0xffff
    80206905:	2691                	addiw	a3,a3,4
    80206907:	0000                	unimp
    80206909:	ffff                	0xffff
    8020690b:	909d                	srli	s1,s1,0x27
    8020690d:	0401                	addi	s0,s0,0
    8020690f:	ffff                	0xffff
    80206911:	0800808f          	0x800808f
    80206915:	ffff                	0xffff
    80206917:	909d                	srli	s1,s1,0x27
    80206919:	0c01                	addi	s8,s8,0
    8020691b:	ffff                	0xffff
    8020691d:	909d                	srli	s1,s1,0x27
    8020691f:	1001                	c.nop	-32
    80206921:	4d4c                	lw	a1,28(a0)
    80206923:	0054                	addi	a3,sp,4
    80206925:	4450                	lw	a2,12(s0)
    80206927:	0054                	addi	a3,sp,4
    80206929:	5350                	lw	a2,36(a4)
    8020692b:	0054                	addi	a3,sp,4
    8020692d:	5750                	lw	a2,44(a4)
    8020692f:	0054                	addi	a3,sp,4
    80206931:	5050                	lw	a2,36(s0)
    80206933:	0054                	addi	a3,sp,4
    80206935:	0000                	unimp
    80206937:	0000                	unimp
    80206939:	0001                	nop
    8020693b:	0000                	unimp
    8020693d:	0100                	addi	s0,sp,128
    8020693f:	5a54                	lw	a3,52(a2)
    80206941:	6669                	lui	a2,0x1a
    80206943:	0032                	c.slli	zero,0xc
	...
    80206955:	0500                	addi	s0,sp,640
    80206957:	0000                	unimp
    80206959:	0500                	addi	s0,sp,640
    8020695b:	0000                	unimp
    8020695d:	0000                	unimp
    8020695f:	0000                	unimp
    80206961:	ba00                	fsd	fs0,48(a2)
    80206963:	0000                	unimp
    80206965:	0500                	addi	s0,sp,640
    80206967:	0000                	unimp
    80206969:	1400                	addi	s0,sp,544
    8020696b:	ffff                	0xffff
    8020696d:	ffff                	0xffff
    8020696f:	045e                	slli	s0,s0,0x17
    80206971:	c01a                	sw	t1,0(sp)
    80206973:	ffff                	0xffff
    80206975:	ffff                	0xffff
    80206977:	a69e                	fsd	ft7,328(sp)
    80206979:	a048                	fsd	fa0,128(s0)
    8020697b:	ffff                	0xffff
    8020697d:	ffff                	0xffff
    8020697f:	bb9f 9015 ffff      	0xffff9015bb9f
    80206985:	ffff                	0xffff
    80206987:	86a0                	0x86a0
    80206989:	a02a                	fsd	fa0,0(sp)
    8020698b:	ffff                	0xffff
    8020698d:	ffff                	0xffff
    8020698f:	9aa1                	andi	a3,a3,-24
    80206991:	ffff90f7          	0xffff90f7
    80206995:	ffff                	0xffff
    80206997:	a01a89cb          	fnmsub.s	fs3,fs5,ft1,fs4,rne
    8020699b:	ffff                	0xffff
    8020699d:	ffff                	0xffff
    8020699f:	23d2                	fld	ft7,272(sp)
    802069a1:	70f4                	ld	a3,224(s1)
    802069a3:	ffff                	0xffff
    802069a5:	ffff                	0xffff
    802069a7:	61d2                	ld	gp,272(sp)
    802069a9:	1026                	c.slli	zero,0x29
    802069ab:	ffff                	0xffff
    802069ad:	ffff                	0xffff
    802069af:	fed6                	sd	s5,376(sp)
    802069b1:	5c74                	lw	a3,124(s0)
    802069b3:	ffff                	0xffff
    802069b5:	ffff                	0xffff
    802069b7:	80d8                	0x80d8
    802069b9:	90ad                	srli	s1,s1,0x2b
    802069bb:	ffff                	0xffff
    802069bd:	ffff                	0xffff
    802069bf:	feda                	sd	s6,376(sp)
    802069c1:	ffff90c3          	fmadd.q	ft1,ft11,ft11,ft11,rtz
    802069c5:	ffff                	0xffff
    802069c7:	1090c0db          	0x1090c0db
    802069cb:	ffff                	0xffff
    802069cd:	ffff                	0xffff
    802069cf:	dedc                	sw	a5,60(a3)
    802069d1:	90a5                	srli	s1,s1,0x29
    802069d3:	ffff                	0xffff
    802069d5:	ffff                	0xffff
    802069d7:	a9dd                	j	80206ecd <localtime+0x998>
    802069d9:	90ac                	0x90ac
    802069db:	ffff                	0xffff
    802069dd:	ffff                	0xffff
    802069df:	bede                	fsd	fs7,376(sp)
    802069e1:	ffff9087          	0xffff9087
    802069e5:	ffff                	0xffff
    802069e7:	89df 908e ffff      	0xffff908e89df
    802069ed:	ffff                	0xffff
    802069ef:	9ee0                	0x9ee0
    802069f1:	9069                	srli	s0,s0,0x3a
    802069f3:	ffff                	0xffff
    802069f5:	ffff                	0xffff
    802069f7:	69e1                	lui	s3,0x18
    802069f9:	9070                	0x9070
    802069fb:	ffff                	0xffff
    802069fd:	ffff                	0xffff
    802069ff:	7ee2                	ld	t4,56(sp)
    80206a01:	ffff904b          	fnmsub.q	ft0,ft11,ft11,ft11,rtz
    80206a05:	ffff                	0xffff
    80206a07:	905249e3          	blt	tp,t0,80206319 <sacrifice_start+0x349>
    80206a0b:	ffff                	0xffff
    80206a0d:	ffff                	0xffff
    80206a0f:	5ee4                	lw	s1,124(a3)
    80206a11:	902d                	srli	s0,s0,0x2b
    80206a13:	ffff                	0xffff
    80206a15:	ffff                	0xffff
    80206a17:	29e5                	addiw	s3,s3,25
    80206a19:	9034                	0x9034
    80206a1b:	ffff                	0xffff
    80206a1d:	ffff                	0xffff
    80206a1f:	47e6                	lw	a5,88(sp)
    80206a21:	104a                	c.slli	zero,0x32
    80206a23:	ffff                	0xffff
    80206a25:	ffff                	0xffff
    80206a27:	105112e7          	0x105112e7
    80206a2b:	ffff                	0xffff
    80206a2d:	ffff                	0xffff
    80206a2f:	27e8                	fld	fa0,200(a5)
    80206a31:	102c                	addi	a1,sp,40
    80206a33:	ffff                	0xffff
    80206a35:	ffff                	0xffff
    80206a37:	f2e8                	sd	a0,224(a3)
    80206a39:	ffff1033          	0xffff1033
    80206a3d:	ffff                	0xffff
    80206a3f:	07ea                	slli	a5,a5,0x1a
    80206a41:	100e                	c.slli	zero,0x23
    80206a43:	ffff                	0xffff
    80206a45:	ffff                	0xffff
    80206a47:	d2ea                	sw	s10,100(sp)
    80206a49:	1015                	c.nop	-27
    80206a4b:	ffff                	0xffff
    80206a4d:	ffff                	0xffff
    80206a4f:	10f0e6eb          	0x10f0e6eb
    80206a53:	ffff                	0xffff
    80206a55:	ffff                	0xffff
    80206a57:	b1ec                	fsd	fa1,224(a1)
    80206a59:	ffff10f7          	0xffff10f7
    80206a5d:	ffff                	0xffff
    80206a5f:	c6ed                	beqz	a3,80206b49 <localtime+0x614>
    80206a61:	10d2                	slli	ra,ra,0x34
    80206a63:	ffff                	0xffff
    80206a65:	ffff                	0xffff
    80206a67:	91ee                	add	gp,gp,s11
    80206a69:	10d9                	addi	ra,ra,-10
    80206a6b:	ffff                	0xffff
    80206a6d:	ffff                	0xffff
    80206a6f:	90eeafef          	jal	t6,801f0b7d <_entry-0xf483>
    80206a73:	ffff                	0xffff
    80206a75:	ffff                	0xffff
    80206a77:	71f0                	ld	a2,224(a1)
    80206a79:	ffff10bb          	0xffff10bb
    80206a7d:	ffff                	0xffff
    80206a7f:	8ff1                	and	a5,a5,a2
    80206a81:	90d0                	0x90d0
    80206a83:	ffff                	0xffff
    80206a85:	ffff                	0xffff
    80206a87:	7ff2                	ld	t6,312(sp)
    80206a89:	90c1                	srli	s1,s1,0x30
    80206a8b:	ffff                	0xffff
    80206a8d:	ffff                	0xffff
    80206a8f:	90b26ff3          	csrrsi	t6,0x90b,4
    80206a93:	ffff                	0xffff
    80206a95:	ffff                	0xffff
    80206a97:	5ff4                	lw	a3,124(a5)
    80206a99:	ffff90a3          	sh	t6,-31(t6)
    80206a9d:	ffff                	0xffff
    80206a9f:	4ff5                	li	t6,29
    80206aa1:	9094                	0x9094
    80206aa3:	ffff                	0xffff
    80206aa5:	ffff                	0xffff
    80206aa7:	3ff6                	fld	ft11,376(sp)
    80206aa9:	9085                	srli	s1,s1,0x21
    80206aab:	ffff                	0xffff
    80206aad:	ffff                	0xffff
    80206aaf:	90762ff7          	0x90762ff7
    80206ab3:	ffff                	0xffff
    80206ab5:	ffff                	0xffff
    80206ab7:	28f8                	fld	fa4,208(s1)
    80206ab9:	10a2                	slli	ra,ra,0x28
    80206abb:	ffff                	0xffff
    80206abd:	ffff                	0xffff
    80206abf:	0ff9                	addi	t6,t6,30
    80206ac1:	9058                	0x9058
    80206ac3:	ffff                	0xffff
    80206ac5:	ffff                	0xffff
    80206ac7:	08fa                	slli	a7,a7,0x1e
    80206ac9:	1084                	addi	s1,sp,96
    80206acb:	ffff                	0xffff
    80206acd:	ffff                	0xffff
    80206acf:	f8fa                	sd	t5,112(sp)
    80206ad1:	ffff2083          	lw	ra,-1(t5) # 1afff <_entry-0x801e5001>
    80206ad5:	ffff                	0xffff
    80206ad7:	1066e8fb          	0x1066e8fb
    80206adb:	ffff                	0xffff
    80206add:	ffff                	0xffff
    80206adf:	d8fc                	sw	a5,116(s1)
    80206ae1:	2065                	0x2065
    80206ae3:	ffff                	0xffff
    80206ae5:	ffff                	0xffff
    80206ae7:	c8fd                	beqz	s1,80206bdd <localtime+0x6a8>
    80206ae9:	1048                	addi	a0,sp,36
    80206aeb:	ffff                	0xffff
    80206aed:	ffff                	0xffff
    80206aef:	b8fe                	fsd	ft11,112(sp)
    80206af1:	ffff2047          	fmsub.q	ft0,ft10,ft11,ft11,rdn
    80206af5:	ffff                	0xffff
    80206af7:	a8ff                	0xa8ff
    80206af9:	102a                	c.slli	zero,0x2a
    80206afb:	0000                	unimp
    80206afd:	0000                	unimp
    80206aff:	9800                	0x9800
    80206b01:	2029                	0x2029
    80206b03:	0000                	unimp
    80206b05:	0000                	unimp
    80206b07:	8801                	andi	s0,s0,0
    80206b09:	100c                	addi	a1,sp,32
    80206b0b:	0000                	unimp
    80206b0d:	0000                	unimp
    80206b0f:	7802                	ld	a6,32(sp)
    80206b11:	0000200b          	0x200b
    80206b15:	0000                	unimp
    80206b17:	90287103          	0x90287103
    80206b1b:	0000                	unimp
    80206b1d:	0000                	unimp
    80206b1f:	6104                	ld	s1,0(a0)
    80206b21:	0000a027          	fsw	ft0,0(ra) # e47e77b7 <kernel_end+0x63d7a7b7>
    80206b25:	0000                	unimp
    80206b27:	5105                	li	sp,-31
    80206b29:	900a                	c.add	zero,sp
    80206b2b:	0000                	unimp
    80206b2d:	0000                	unimp
    80206b2f:	4106                	lw	sp,64(sp)
    80206b31:	a009                	j	80206b33 <localtime+0x5fe>
    80206b33:	0000                	unimp
    80206b35:	0000                	unimp
    80206b37:	90ec3007          	fld	ft0,-1778(s8) # ffffffffffff290e <kernel_end+0xffffffff7f58590e>
    80206b3b:	0000                	unimp
    80206b3d:	0000                	unimp
    80206b3f:	a0438d07          	0xa0438d07
    80206b43:	0000                	unimp
    80206b45:	0000                	unimp
    80206b47:	1009                	c.nop	-30
    80206b49:	90ce                	add	ra,ra,s3
    80206b4b:	0000                	unimp
    80206b4d:	0000                	unimp
    80206b4f:	ad09                	j	80207161 <meminfo+0xe0>
    80206b51:	000020bf f00a0000 	0xf00a0000000020bf
    80206b59:	90b0                	0x90b0
    80206b5b:	0000                	unimp
    80206b5d:	0000                	unimp
    80206b5f:	a0afe00b          	0xa0afe00b
    80206b63:	0000                	unimp
    80206b65:	0000                	unimp
    80206b67:	d90c                	sw	a1,48(a0)
    80206b69:	10cd                	addi	ra,ra,-13
    80206b6b:	0000                	unimp
    80206b6d:	0000                	unimp
    80206b6f:	c00d                	beqz	s0,80206b91 <localtime+0x65c>
    80206b71:	a091                	j	80206bb5 <localtime+0x680>
    80206b73:	0000                	unimp
    80206b75:	0000                	unimp
    80206b77:	b90e                	fsd	ft3,176(sp)
    80206b79:	000010af          	0x10af
    80206b7d:	0000                	unimp
    80206b7f:	20aea90f          	0x20aea90f
    80206b83:	0000                	unimp
    80206b85:	0000                	unimp
    80206b87:	9910                	0x9910
    80206b89:	1091                	addi	ra,ra,-28
    80206b8b:	0000                	unimp
    80206b8d:	0000                	unimp
    80206b8f:	8911                	andi	a0,a0,4
    80206b91:	2090                	fld	fa2,0(s1)
    80206b93:	0000                	unimp
    80206b95:	0000                	unimp
    80206b97:	7912                	ld	s2,288(sp)
    80206b99:	00001073          	csrw	ustatus,zero
    80206b9d:	0000                	unimp
    80206b9f:	20726913          	ori	s2,tp,519
    80206ba3:	0000                	unimp
    80206ba5:	0000                	unimp
    80206ba7:	5914                	lw	a3,48(a0)
    80206ba9:	1055                	c.nop	-11
    80206bab:	0000                	unimp
    80206bad:	0000                	unimp
    80206baf:	4915                	li	s2,5
    80206bb1:	2054                	fld	fa3,128(s0)
    80206bb3:	0000                	unimp
    80206bb5:	0000                	unimp
    80206bb7:	3916                	fld	fs2,352(sp)
    80206bb9:	00001037          	lui	zero,0x1
    80206bbd:	0000                	unimp
    80206bbf:	20362917          	auipc	s2,0x20362
    80206bc3:	0000                	unimp
    80206bc5:	0000                	unimp
    80206bc7:	2218                	fld	fa4,0(a2)
    80206bc9:	00009053          	fadd.s	ft0,ft1,ft0,rtz
    80206bcd:	0000                	unimp
    80206bcf:	0919                	addi	s2,s2,6
    80206bd1:	2018                	fld	fa4,0(s0)
    80206bd3:	0000                	unimp
    80206bd5:	0000                	unimp
    80206bd7:	021a                	slli	tp,tp,0x6
    80206bd9:	9035                	srli	s0,s0,0x2d
    80206bdb:	0000                	unimp
    80206bdd:	0000                	unimp
    80206bdf:	f21a                	sd	t1,288(sp)
    80206be1:	a034                	fsd	fa3,64(s0)
    80206be3:	0000                	unimp
    80206be5:	0000                	unimp
    80206be7:	9017e21b          	0x9017e21b
    80206beb:	0000                	unimp
    80206bed:	0000                	unimp
    80206bef:	d21c                	sw	a5,32(a2)
    80206bf1:	a016                	fsd	ft5,0(sp)
    80206bf3:	0000                	unimp
    80206bf5:	0000                	unimp
    80206bf7:	c11d                	beqz	a0,80206c1d <localtime+0x6e8>
    80206bf9:	90f9                	srli	s1,s1,0x3e
    80206bfb:	0000                	unimp
    80206bfd:	0000                	unimp
    80206bff:	b11e                	fsd	ft7,160(sp)
    80206c01:	a0f8                	fsd	fa4,192(s1)
    80206c03:	0000                	unimp
    80206c05:	0000                	unimp
    80206c07:	a11f 90db 0000      	0x90dba11f
    80206c0d:	0000                	unimp
    80206c0f:	7620                	ld	s0,104(a2)
    80206c11:	0000202b          	0x202b
    80206c15:	0000                	unimp
    80206c17:	8121                	srli	a0,a0,0x8
    80206c19:	90bd                	srli	s1,s1,0x2f
    80206c1b:	0000                	unimp
    80206c1d:	0000                	unimp
    80206c1f:	5622                	lw	a2,40(sp)
    80206c21:	200d                	0x200d
    80206c23:	0000                	unimp
    80206c25:	0000                	unimp
    80206c27:	10da6a23          	0x10da6a23
    80206c2b:	0000                	unimp
    80206c2d:	0000                	unimp
    80206c2f:	3524                	fld	fs1,104(a0)
    80206c31:	000020ef          	jal	ra,80208c31 <__debug_warn+0x175>
    80206c35:	0000                	unimp
    80206c37:	4a25                	li	s4,9
    80206c39:	10bc                	addi	a5,sp,104
    80206c3b:	0000                	unimp
    80206c3d:	0000                	unimp
    80206c3f:	1526                	slli	a0,a0,0x29
    80206c41:	20d1                	addiw	ra,ra,20
    80206c43:	0000                	unimp
    80206c45:	0000                	unimp
    80206c47:	109e2a27          	fsw	fs1,276(t3)
    80206c4b:	0000                	unimp
    80206c4d:	0000                	unimp
    80206c4f:	a0edfe27          	0xa0edfe27
    80206c53:	0000                	unimp
    80206c55:	0000                	unimp
    80206c57:	0a29                	addi	s4,s4,10
    80206c59:	1080                	addi	s0,sp,96
    80206c5b:	0000                	unimp
    80206c5d:	0000                	unimp
    80206c5f:	de29                	beqz	a2,80206bb9 <localtime+0x684>
    80206c61:	0000a0cf          	fnmadd.s	ft1,ft1,ft0,ft0,rdn
    80206c65:	0000                	unimp
    80206c67:	ea2a                	sd	a0,272(sp)
    80206c69:	1062                	c.slli	zero,0x38
    80206c6b:	0000                	unimp
    80206c6d:	0000                	unimp
    80206c6f:	a0b1be2b          	0xa0b1be2b
    80206c73:	0000                	unimp
    80206c75:	0000                	unimp
    80206c77:	d32c                	sw	a1,96(a4)
    80206c79:	907e                	c.add	zero,t6
    80206c7b:	0000                	unimp
    80206c7d:	0000                	unimp
    80206c7f:	9e2d                	addw	a2,a2,a1
    80206c81:	0000a093          	slti	ra,ra,0
    80206c85:	0000                	unimp
    80206c87:	b32e                	fsd	fa1,416(sp)
    80206c89:	9060                	0x9060
    80206c8b:	0000                	unimp
    80206c8d:	0000                	unimp
    80206c8f:	a0757e2f          	0xa0757e2f
    80206c93:	0000                	unimp
    80206c95:	0000                	unimp
    80206c97:	9330                	0x9330
    80206c99:	9042                	c.add	zero,a6
    80206c9b:	0000                	unimp
    80206c9d:	0000                	unimp
    80206c9f:	6731                	lui	a4,0xc
    80206ca1:	2092                	fld	ft1,256(sp)
    80206ca3:	0000                	unimp
    80206ca5:	0000                	unimp
    80206ca7:	7332                	ld	t1,296(sp)
    80206ca9:	9024                	0x9024
    80206cab:	0000                	unimp
    80206cad:	0000                	unimp
    80206caf:	20744733          	0x20744733
    80206cb3:	0000                	unimp
    80206cb5:	0000                	unimp
    80206cb7:	5334                	lw	a3,96(a4)
    80206cb9:	9006                	c.add	zero,ra
    80206cbb:	0000                	unimp
    80206cbd:	0000                	unimp
    80206cbf:	2735                	addiw	a4,a4,13
    80206cc1:	2056                	fld	ft0,336(sp)
    80206cc3:	0000                	unimp
    80206cc5:	0000                	unimp
    80206cc7:	3236                	fld	ft4,360(sp)
    80206cc9:	90e8                	0x90e8
    80206ccb:	0000                	unimp
    80206ccd:	0000                	unimp
    80206ccf:	20380737          	lui	a4,0x20380
    80206cd3:	0000                	unimp
    80206cd5:	0000                	unimp
    80206cd7:	1c38                	addi	a4,sp,568
    80206cd9:	1005                	c.nop	-31
    80206cdb:	0000                	unimp
    80206cdd:	0000                	unimp
    80206cdf:	e738                	sd	a4,72(a4)
    80206ce1:	201a                	fld	ft0,384(sp)
    80206ce3:	0000                	unimp
    80206ce5:	0000                	unimp
    80206ce7:	fb39                	bnez	a4,80206c3d <localtime+0x708>
    80206ce9:	000010e7          	0x10e7
    80206ced:	0000                	unimp
    80206cef:	c63a                	sw	a4,12(sp)
    80206cf1:	20fc                	fld	fa5,192(s1)
    80206cf3:	0000                	unimp
    80206cf5:	0000                	unimp
    80206cf7:	10c9db3b          	0x10c9db3b
    80206cfb:	0000                	unimp
    80206cfd:	0000                	unimp
    80206cff:	b03c                	fsd	fa5,96(s0)
    80206d01:	a018                	fsd	fa4,0(s0)
    80206d03:	0000                	unimp
    80206d05:	0000                	unimp
    80206d07:	bb3d                	j	80206a45 <localtime+0x510>
    80206d09:	000010ab          	0x10ab
    80206d0d:	0000                	unimp
    80206d0f:	8f3e                	mv	t5,a5
    80206d11:	a0fa                	fsd	ft10,64(sp)
    80206d13:	0000                	unimp
    80206d15:	0000                	unimp
    80206d17:	108d9b3f 00000000 	0x108d9b3f
    80206d1f:	6f40                	ld	s0,152(a4)
    80206d21:	a0dc                	fsd	fa5,128(s1)
    80206d23:	0000                	unimp
    80206d25:	0000                	unimp
    80206d27:	8441                	srai	s0,s0,0x10
    80206d29:	90a9                	srli	s1,s1,0x2a
    80206d2b:	0000                	unimp
    80206d2d:	0000                	unimp
    80206d2f:	4f42                	lw	t5,16(sp)
    80206d31:	a0be                	fsd	fa5,64(sp)
    80206d33:	0000                	unimp
    80206d35:	0000                	unimp
    80206d37:	908b6443          	fmadd.s	fs0,fs6,fs0,fs2,unknown
    80206d3b:	0000                	unimp
    80206d3d:	0000                	unimp
    80206d3f:	2f44                	fld	fs1,152(a4)
    80206d41:	a0a0                	fsd	fs0,64(s1)
    80206d43:	0000                	unimp
    80206d45:	0000                	unimp
    80206d47:	4445                	li	s0,17
    80206d49:	906d                	srli	s0,s0,0x3b
    80206d4b:	0000                	unimp
    80206d4d:	0000                	unimp
    80206d4f:	f345                	bnez	a4,80206cef <localtime+0x7ba>
    80206d51:	000020d3          	fadd.s	ft1,ft0,ft0,rdn
    80206d55:	0000                	unimp
    80206d57:	108a2d47          	fmsub.s	fs10,fs4,fs0,ft2,rdn
    80206d5b:	0000                	unimp
    80206d5d:	0000                	unimp
    80206d5f:	20b5d347          	fmsub.s	ft6,fa1,fa1,ft4,unknown
    80206d63:	0000                	unimp
    80206d65:	0000                	unimp
    80206d67:	0d49                	addi	s10,s10,18
    80206d69:	106c                	addi	a1,sp,44
    80206d6b:	0000                	unimp
    80206d6d:	0000                	unimp
    80206d6f:	b349                	j	80206af1 <localtime+0x5bc>
    80206d71:	00002097          	auipc	ra,0x2
    80206d75:	0000                	unimp
    80206d77:	ed4a                	sd	s2,152(sp)
    80206d79:	104e                	c.slli	zero,0x33
    80206d7b:	0000                	unimp
    80206d7d:	0000                	unimp
    80206d7f:	a0b39c4b          	fnmsub.s	fs8,ft7,fa1,fs4,rtz
    80206d83:	0000                	unimp
    80206d85:	0000                	unimp
    80206d87:	d64c                	sw	a1,44(a2)
    80206d89:	906a                	c.add	zero,s10
    80206d8b:	0000                	unimp
    80206d8d:	0000                	unimp
    80206d8f:	7c4d                	lui	s8,0xffff3
    80206d91:	a095                	j	80206df5 <localtime+0x8c0>
    80206d93:	0000                	unimp
    80206d95:	0000                	unimp
    80206d97:	b64e                	fsd	fs3,296(sp)
    80206d99:	904c                	0x904c
    80206d9b:	0000                	unimp
    80206d9d:	0000                	unimp
    80206d9f:	a0775c4f          	fnmadd.s	fs8,fa4,ft7,fs4,unknown
    80206da3:	0000                	unimp
    80206da5:	0000                	unimp
    80206da7:	9650                	0x9650
    80206da9:	902e                	c.add	zero,a1
    80206dab:	0000                	unimp
    80206dad:	0000                	unimp
    80206daf:	3c51                	addiw	s8,s8,-12
    80206db1:	a059                	j	80206e37 <localtime+0x902>
    80206db3:	0000                	unimp
    80206db5:	0000                	unimp
    80206db7:	7652                	ld	a2,304(sp)
    80206db9:	9010                	0x9010
    80206dbb:	0000                	unimp
    80206dbd:	0000                	unimp
    80206dbf:	a03b1c53          	flt.s	s8,fs6,ft3
    80206dc3:	0000                	unimp
    80206dc5:	0000                	unimp
    80206dc7:	5554                	lw	a3,44(a0)
    80206dc9:	90f2                	add	ra,ra,t3
    80206dcb:	0000                	unimp
    80206dcd:	0000                	unimp
    80206dcf:	fc54                	sd	a3,184(s0)
    80206dd1:	a01d                	j	80206df7 <localtime+0x8c2>
    80206dd3:	0000                	unimp
    80206dd5:	0000                	unimp
    80206dd7:	3556                	fld	fa0,368(sp)
    80206dd9:	90d4                	0x90d4
    80206ddb:	0000                	unimp
    80206ddd:	0000                	unimp
    80206ddf:	e556                	sd	s5,136(sp)
    80206de1:	203a                	fld	ft0,392(sp)
    80206de3:	0000                	unimp
    80206de5:	0000                	unimp
    80206de7:	1e58                	addi	a4,sp,820
    80206de9:	10f1                	addi	ra,ra,-4
    80206deb:	0000                	unimp
    80206ded:	0000                	unimp
    80206def:	c558                	sw	a4,12(a0)
    80206df1:	201c                	fld	fa5,0(s0)
    80206df3:	0000                	unimp
    80206df5:	0000                	unimp
    80206df7:	fe59                	bnez	a2,80206d95 <localtime+0x860>
    80206df9:	000010d3          	fadd.s	ft1,ft0,ft0,rtz
    80206dfd:	0000                	unimp
    80206dff:	a45a                	fsd	fs6,8(sp)
    80206e01:	20fe                	fld	ft1,472(sp)
    80206e03:	0000                	unimp
    80206e05:	0000                	unimp
    80206e07:	10b5de5b          	0x10b5de5b
    80206e0b:	0000                	unimp
    80206e0d:	0000                	unimp
    80206e0f:	845c                	0x845c
    80206e11:	20e0                	fld	fs0,192(s1)
    80206e13:	0000                	unimp
    80206e15:	0000                	unimp
    80206e17:	be5d                	j	802069cd <localtime+0x498>
    80206e19:	00001097          	auipc	ra,0x1
    80206e1d:	0000                	unimp
    80206e1f:	645e                	ld	s0,464(sp)
    80206e21:	20c2                	fld	ft1,16(sp)
    80206e23:	0000                	unimp
    80206e25:	0000                	unimp
    80206e27:	9e5f 1079 0000      	0x10799e5f
    80206e2d:	0000                	unimp
    80206e2f:	4d60                	lw	s0,92(a0)
    80206e31:	a0de                	fsd	fs7,64(sp)
    80206e33:	0000                	unimp
    80206e35:	0000                	unimp
    80206e37:	8761                	srai	a4,a4,0x18
    80206e39:	9095                	srli	s1,s1,0x25
    80206e3b:	0000                	unimp
    80206e3d:	0000                	unimp
    80206e3f:	2d62                	fld	fs10,24(sp)
    80206e41:	a0c0                	fsd	fs0,128(s1)
    80206e43:	0000                	unimp
    80206e45:	0000                	unimp
    80206e47:	90776763          	bltu	a4,t2,80205f55 <initcode+0x25>
    80206e4b:	0000                	unimp
    80206e4d:	0000                	unimp
    80206e4f:	0d64                	addi	s1,sp,668
    80206e51:	a0a2                	fsd	fs0,64(sp)
    80206e53:	0000                	unimp
    80206e55:	0000                	unimp
    80206e57:	4765                	li	a4,25
    80206e59:	9059                	srli	s0,s0,0x36
    80206e5b:	0000                	unimp
    80206e5d:	0000                	unimp
    80206e5f:	ed65                	bnez	a0,80206f57 <localtime+0xa22>
    80206e61:	a084                	fsd	fs1,0(s1)
    80206e63:	0000                	unimp
    80206e65:	0000                	unimp
    80206e67:	903b2767          	0x903b2767
    80206e6b:	0000                	unimp
    80206e6d:	0000                	unimp
    80206e6f:	a066cd67          	0xa066cd67
    80206e73:	0000                	unimp
    80206e75:	0000                	unimp
    80206e77:	0769                	addi	a4,a4,26
    80206e79:	901d                	srli	s0,s0,0x27
    80206e7b:	0000                	unimp
    80206e7d:	0000                	unimp
    80206e7f:	ad69                	j	80207519 <meminfo+0x498>
    80206e81:	a048                	fsd	fa0,128(s0)
    80206e83:	0000                	unimp
    80206e85:	0000                	unimp
    80206e87:	e66a                	sd	s10,264(sp)
    80206e89:	90ff                	0x90ff
    80206e8b:	0000                	unimp
    80206e8d:	0000                	unimp
    80206e8f:	2065966b          	0x2065966b
    80206e93:	0000                	unimp
    80206e95:	0000                	unimp
    80206e97:	d06c                	sw	a1,100(s0)
    80206e99:	101c                	addi	a5,sp,32
    80206e9b:	0000                	unimp
    80206e9d:	0000                	unimp
    80206e9f:	766d                	lui	a2,0xffffb
    80206ea1:	00002047          	fmsub.s	ft0,ft0,ft0,ft0,rdn
    80206ea5:	0000                	unimp
    80206ea7:	af6e                	fsd	fs11,408(sp)
    80206ea9:	10fe                	slli	ra,ra,0x3f
    80206eab:	0000                	unimp
    80206ead:	0000                	unimp
    80206eaf:	2029566f          	jal	a2,8029c0b1 <data_start+0x860b1>
    80206eb3:	0000                	unimp
    80206eb5:	0000                	unimp
    80206eb7:	8f70                	0x8f70
    80206eb9:	10e0                	addi	s0,sp,108
    80206ebb:	0000                	unimp
    80206ebd:	0000                	unimp
    80206ebf:	3671                	addiw	a2,a2,-4
    80206ec1:	0000200b          	0x200b
    80206ec5:	0000                	unimp
    80206ec7:	6f72                	ld	t5,280(sp)
    80206ec9:	10c2                	slli	ra,ra,0x30
    80206ecb:	0000                	unimp
    80206ecd:	0000                	unimp
    80206ecf:	20ed1573          	csrrw	a0,0x20e,s10
    80206ed3:	0000                	unimp
    80206ed5:	0000                	unimp
    80206ed7:	4f74                	lw	a3,92(a4)
    80206ed9:	10a4                	addi	s1,sp,104
    80206edb:	0000                	unimp
    80206edd:	0000                	unimp
    80206edf:	ff74                	sd	a3,248(a4)
    80206ee1:	a009                	j	80206ee3 <localtime+0x9ae>
    80206ee3:	0000                	unimp
    80206ee5:	0000                	unimp
    80206ee7:	3876                	fld	fa6,376(sp)
    80206ee9:	90c0                	0x90c0
    80206eeb:	0000                	unimp
    80206eed:	0000                	unimp
    80206eef:	de76                	sw	t4,60(sp)
    80206ef1:	0000a0eb          	0xa0eb
    80206ef5:	0000                	unimp
    80206ef7:	1878                	addi	a4,sp,60
    80206ef9:	90a2                	add	ra,ra,s0
    80206efb:	0000                	unimp
    80206efd:	0000                	unimp
    80206eff:	be78                	fsd	fa4,248(a2)
    80206f01:	a0cd                	j	80206fe3 <localtime+0xaae>
    80206f03:	0000                	unimp
    80206f05:	0000                	unimp
    80206f07:	f879                	bnez	s0,80206edd <localtime+0x9a8>
    80206f09:	9084                	0x9084
    80206f0b:	0000                	unimp
    80206f0d:	0000                	unimp
    80206f0f:	9e7a                	add	t3,t3,t5
    80206f11:	0000a0af          	amoadd.w	ra,zero,(ra)
    80206f15:	0000                	unimp
    80206f17:	9066d87b          	0x9066d87b
    80206f1b:	0000                	unimp
    80206f1d:	0000                	unimp
    80206f1f:	7e7c                	ld	a5,248(a2)
    80206f21:	a091                	j	80206f65 <localtime+0xa30>
    80206f23:	0000                	unimp
    80206f25:	0000                	unimp
    80206f27:	b87d                	j	802067e5 <localtime+0x2b0>
    80206f29:	9048                	0x9048
    80206f2b:	0000                	unimp
    80206f2d:	0000                	unimp
    80206f2f:	5e7e                	lw	t3,252(sp)
    80206f31:	0000a073          	csrs	ustatus,ra
    80206f35:	0000                	unimp
    80206f37:	987f                	0x987f
    80206f39:	902a                	c.add	zero,a0
    80206f3b:	0102                	c.slli64	sp
    80206f3d:	0102                	c.slli64	sp
    80206f3f:	0302                	c.slli64	t1
    80206f41:	0204                	addi	s1,sp,256
    80206f43:	0201                	addi	tp,tp,0
    80206f45:	0201                	addi	tp,tp,0
    80206f47:	0201                	addi	tp,tp,0
    80206f49:	0201                	addi	tp,tp,0
    80206f4b:	0201                	addi	tp,tp,0
    80206f4d:	0201                	addi	tp,tp,0
    80206f4f:	0201                	addi	tp,tp,0
    80206f51:	0201                	addi	tp,tp,0
    80206f53:	0201                	addi	tp,tp,0
    80206f55:	0201                	addi	tp,tp,0
    80206f57:	0201                	addi	tp,tp,0
    80206f59:	0201                	addi	tp,tp,0
    80206f5b:	0201                	addi	tp,tp,0
    80206f5d:	0201                	addi	tp,tp,0
    80206f5f:	0201                	addi	tp,tp,0
    80206f61:	0201                	addi	tp,tp,0
    80206f63:	0201                	addi	tp,tp,0
    80206f65:	0201                	addi	tp,tp,0
    80206f67:	0201                	addi	tp,tp,0
    80206f69:	0201                	addi	tp,tp,0
    80206f6b:	0201                	addi	tp,tp,0
    80206f6d:	0201                	addi	tp,tp,0
    80206f6f:	0201                	addi	tp,tp,0
    80206f71:	0201                	addi	tp,tp,0
    80206f73:	0201                	addi	tp,tp,0
    80206f75:	0201                	addi	tp,tp,0
    80206f77:	0201                	addi	tp,tp,0
    80206f79:	0201                	addi	tp,tp,0
    80206f7b:	0201                	addi	tp,tp,0
    80206f7d:	0201                	addi	tp,tp,0
    80206f7f:	0201                	addi	tp,tp,0
    80206f81:	0201                	addi	tp,tp,0
    80206f83:	0201                	addi	tp,tp,0
    80206f85:	0201                	addi	tp,tp,0
    80206f87:	0201                	addi	tp,tp,0
    80206f89:	0201                	addi	tp,tp,0
    80206f8b:	0201                	addi	tp,tp,0
    80206f8d:	0201                	addi	tp,tp,0
    80206f8f:	0201                	addi	tp,tp,0
    80206f91:	0201                	addi	tp,tp,0
    80206f93:	0201                	addi	tp,tp,0
    80206f95:	0201                	addi	tp,tp,0
    80206f97:	0201                	addi	tp,tp,0
    80206f99:	0201                	addi	tp,tp,0
    80206f9b:	0201                	addi	tp,tp,0
    80206f9d:	0201                	addi	tp,tp,0
    80206f9f:	0201                	addi	tp,tp,0
    80206fa1:	0201                	addi	tp,tp,0
    80206fa3:	0201                	addi	tp,tp,0
    80206fa5:	0201                	addi	tp,tp,0
    80206fa7:	0201                	addi	tp,tp,0
    80206fa9:	0201                	addi	tp,tp,0
    80206fab:	0201                	addi	tp,tp,0
    80206fad:	0201                	addi	tp,tp,0
    80206faf:	0201                	addi	tp,tp,0
    80206fb1:	0201                	addi	tp,tp,0
    80206fb3:	0201                	addi	tp,tp,0
    80206fb5:	0201                	addi	tp,tp,0
    80206fb7:	0201                	addi	tp,tp,0
    80206fb9:	0201                	addi	tp,tp,0
    80206fbb:	0201                	addi	tp,tp,0
    80206fbd:	0201                	addi	tp,tp,0
    80206fbf:	0201                	addi	tp,tp,0
    80206fc1:	0201                	addi	tp,tp,0
    80206fc3:	0201                	addi	tp,tp,0
    80206fc5:	0201                	addi	tp,tp,0
    80206fc7:	0201                	addi	tp,tp,0
    80206fc9:	0201                	addi	tp,tp,0
    80206fcb:	0201                	addi	tp,tp,0
    80206fcd:	0201                	addi	tp,tp,0
    80206fcf:	0201                	addi	tp,tp,0
    80206fd1:	0201                	addi	tp,tp,0
    80206fd3:	0201                	addi	tp,tp,0
    80206fd5:	0201                	addi	tp,tp,0
    80206fd7:	0201                	addi	tp,tp,0
    80206fd9:	0201                	addi	tp,tp,0
    80206fdb:	0201                	addi	tp,tp,0
    80206fdd:	0201                	addi	tp,tp,0
    80206fdf:	0201                	addi	tp,tp,0
    80206fe1:	0201                	addi	tp,tp,0
    80206fe3:	0201                	addi	tp,tp,0
    80206fe5:	0201                	addi	tp,tp,0
    80206fe7:	0201                	addi	tp,tp,0
    80206fe9:	0201                	addi	tp,tp,0
    80206feb:	0201                	addi	tp,tp,0
    80206fed:	0201                	addi	tp,tp,0
    80206fef:	0201                	addi	tp,tp,0
    80206ff1:	0201                	addi	tp,tp,0
    80206ff3:	0201                	addi	tp,tp,0
    80206ff5:	ffff                	0xffff
    80206ff7:	2691                	addiw	a3,a3,4
    80206ff9:	0000                	unimp
    80206ffb:	ffff                	0xffff
    80206ffd:	909d                	srli	s1,s1,0x27
    80206fff:	0401                	addi	s0,s0,0
    80207001:	ffff                	0xffff
    80207003:	0800808f          	0x800808f
    80207007:	ffff                	0xffff
    80207009:	909d                	srli	s1,s1,0x27
    8020700b:	0c01                	addi	s8,s8,0
    8020700d:	ffff                	0xffff
    8020700f:	909d                	srli	s1,s1,0x27
    80207011:	1001                	c.nop	-32
    80207013:	4d4c                	lw	a1,28(a0)
    80207015:	0054                	addi	a3,sp,4
    80207017:	4450                	lw	a2,12(s0)
    80207019:	0054                	addi	a3,sp,4
    8020701b:	5350                	lw	a2,36(a4)
    8020701d:	0054                	addi	a3,sp,4
    8020701f:	5750                	lw	a2,44(a4)
    80207021:	0054                	addi	a3,sp,4
    80207023:	5050                	lw	a2,36(s0)
    80207025:	0054                	addi	a3,sp,4
    80207027:	0000                	unimp
    80207029:	0000                	unimp
    8020702b:	0001                	nop
    8020702d:	0000                	unimp
    8020702f:	0100                	addi	s0,sp,128
    80207031:	500a                	0x500a
    80207033:	50385453          	0x50385453
    80207037:	5444                	lw	s1,44(s0)
    80207039:	4d2c                	lw	a1,88(a0)
    8020703b:	2e322e33          	0x2e322e33
    8020703f:	2c30                	fld	fa2,88(s0)
    80207041:	314d                	addiw	sp,sp,-13
    80207043:	2e31                	addiw	t3,t3,12
    80207045:	2e31                	addiw	t3,t3,12
    80207047:	0a30                	addi	a2,sp,280

0000000080207049 <localtime_size>:
    80207049:	0b14                	addi	a3,sp,400
	...

000000008020704d <mounts>:
    8020704d:	6f72                	ld	t5,280(sp)
    8020704f:	7366746f          	jal	s0,8026e785 <data_start+0x58785>
    80207053:	2f20                	fld	fs0,88(a4)
    80207055:	7220                	ld	s0,96(a2)
    80207057:	20746f6f          	jal	t5,8024da5d <data_start+0x37a5d>
    8020705b:	7772                	ld	a4,312(sp)
    8020705d:	722c                	ld	a1,96(a2)
    8020705f:	6c65                	lui	s8,0x19
    80207061:	7461                	lui	s0,0xffff8
    80207063:	6d69                	lui	s10,0x1a
    80207065:	2c65                	addiw	s8,s8,25
    80207067:	7265                	lui	tp,0xffff9
    80207069:	6f72                	ld	t5,280(sp)
    8020706b:	7372                	ld	t1,312(sp)
    8020706d:	723d                	lui	tp,0xfffef
    8020706f:	6d65                	lui	s10,0x19
    80207071:	746e756f          	jal	a0,802ee7b7 <data_start+0xd87b7>
    80207075:	722d                	lui	tp,0xfffeb
    80207077:	2030206f          	j	80209a79 <vmunmap+0x95>
    8020707b:	0a30                	addi	a2,sp,280

000000008020707d <mounts_size>:
    8020707d:	0030                	addi	a2,sp,8
	...

0000000080207081 <meminfo>:
    80207081:	654d                	lui	a0,0x13
    80207083:	546d                	li	s0,-5
    80207085:	6c61746f          	jal	s0,8021e74b <data_start+0x874b>
    80207089:	203a                	fld	ft0,392(sp)
    8020708b:	2020                	fld	fs0,64(s0)
    8020708d:	2020                	fld	fs0,64(s0)
    8020708f:	2020                	fld	fs0,64(s0)
    80207091:	2020                	fld	fs0,64(s0)
    80207093:	3231                	addiw	tp,tp,-20
    80207095:	3434                	fld	fa3,104(s0)
    80207097:	3639                	addiw	a2,a2,-18
    80207099:	6b20                	ld	s0,80(a4)
    8020709b:	0a42                	slli	s4,s4,0x10
    8020709d:	654d                	lui	a0,0x13
    8020709f:	466d                	li	a2,27
    802070a1:	6572                	ld	a0,280(sp)
    802070a3:	3a65                	addiw	s4,s4,-7
    802070a5:	2020                	fld	fs0,64(s0)
    802070a7:	2020                	fld	fs0,64(s0)
    802070a9:	2020                	fld	fs0,64(s0)
    802070ab:	2020                	fld	fs0,64(s0)
    802070ad:	2020                	fld	fs0,64(s0)
    802070af:	3120                	fld	fs0,96(a0)
    802070b1:	3036                	fld	ft0,360(sp)
    802070b3:	3930                	fld	fa2,112(a0)
    802070b5:	6b20                	ld	s0,80(a4)
    802070b7:	0a42                	slli	s4,s4,0x10
    802070b9:	654d                	lui	a0,0x13
    802070bb:	416d                	li	sp,27
    802070bd:	6176                	ld	sp,344(sp)
    802070bf:	6c69                	lui	s8,0x1a
    802070c1:	6261                	lui	tp,0x18
    802070c3:	656c                	ld	a1,200(a0)
    802070c5:	203a                	fld	ft0,392(sp)
    802070c7:	2020                	fld	fs0,64(s0)
    802070c9:	2020                	fld	fs0,64(s0)
    802070cb:	3720                	fld	fs0,104(a4)
    802070cd:	39383737          	lui	a4,0x39383
    802070d1:	6b20                	ld	s0,80(a4)
    802070d3:	0a42                	slli	s4,s4,0x10
    802070d5:	7542                	ld	a0,48(sp)
    802070d7:	6666                	ld	a2,88(sp)
    802070d9:	7265                	lui	tp,0xffff9
    802070db:	20203a73          	csrrc	s4,hedeleg,zero
    802070df:	2020                	fld	fs0,64(s0)
    802070e1:	2020                	fld	fs0,64(s0)
    802070e3:	2020                	fld	fs0,64(s0)
    802070e5:	2020                	fld	fs0,64(s0)
    802070e7:	3420                	fld	fs0,104(s0)
    802070e9:	36373137          	lui	sp,0x36373
    802070ed:	6b20                	ld	s0,80(a4)
    802070ef:	0a42                	slli	s4,s4,0x10
    802070f1:	68636143          	fmadd.s	ft2,ft6,ft6,fa3,unknown
    802070f5:	6465                	lui	s0,0x19
    802070f7:	203a                	fld	ft0,392(sp)
    802070f9:	2020                	fld	fs0,64(s0)
    802070fb:	2020                	fld	fs0,64(s0)
    802070fd:	2020                	fld	fs0,64(s0)
    802070ff:	2020                	fld	fs0,64(s0)
    80207101:	2020                	fld	fs0,64(s0)
    80207103:	3620                	fld	fs0,104(a2)
    80207105:	3334                	fld	fa3,96(a4)
    80207107:	3836                	fld	fa6,360(sp)
    80207109:	6b20                	ld	s0,80(a4)
    8020710b:	0a42                	slli	s4,s4,0x10
    8020710d:	70617753          	0x70617753
    80207111:	68636143          	fmadd.s	ft2,ft6,ft6,fa3,unknown
    80207115:	6465                	lui	s0,0x19
    80207117:	203a                	fld	ft0,392(sp)
    80207119:	2020                	fld	fs0,64(s0)
    8020711b:	2020                	fld	fs0,64(s0)
    8020711d:	2020                	fld	fs0,64(s0)
    8020711f:	2020                	fld	fs0,64(s0)
    80207121:	2020                	fld	fs0,64(s0)
    80207123:	3020                	fld	fs0,96(s0)
    80207125:	6b20                	ld	s0,80(a4)
    80207127:	0a42                	slli	s4,s4,0x10
    80207129:	6341                	lui	t1,0x10
    8020712b:	6974                	ld	a3,208(a0)
    8020712d:	6576                	ld	a0,344(sp)
    8020712f:	203a                	fld	ft0,392(sp)
    80207131:	2020                	fld	fs0,64(s0)
    80207133:	2020                	fld	fs0,64(s0)
    80207135:	2020                	fld	fs0,64(s0)
    80207137:	2020                	fld	fs0,64(s0)
    80207139:	2020                	fld	fs0,64(s0)
    8020713b:	3320                	fld	fs0,96(a4)
    8020713d:	3231                	addiw	tp,tp,-20
    8020713f:	3031                	0x3031
    80207141:	6b20                	ld	s0,80(a4)
    80207143:	0a42                	slli	s4,s4,0x10
    80207145:	6e49                	lui	t3,0x12
    80207147:	6361                	lui	t1,0x18
    80207149:	6974                	ld	a3,208(a0)
    8020714b:	6576                	ld	a0,344(sp)
    8020714d:	203a                	fld	ft0,392(sp)
    8020714f:	2020                	fld	fs0,64(s0)
    80207151:	2020                	fld	fs0,64(s0)
    80207153:	2020                	fld	fs0,64(s0)
    80207155:	2020                	fld	fs0,64(s0)
    80207157:	3920                	fld	fs0,112(a0)
    80207159:	3630                	fld	fa2,104(a2)
    8020715b:	3839                	addiw	a6,a6,-18
    8020715d:	6b20                	ld	s0,80(a4)
    8020715f:	0a42                	slli	s4,s4,0x10
    80207161:	6341                	lui	t1,0x10
    80207163:	6974                	ld	a3,208(a0)
    80207165:	6576                	ld	a0,344(sp)
    80207167:	6128                	ld	a0,64(a0)
    80207169:	6f6e                	ld	t5,216(sp)
    8020716b:	296e                	fld	fs2,216(sp)
    8020716d:	203a                	fld	ft0,392(sp)
    8020716f:	2020                	fld	fs0,64(s0)
    80207171:	2020                	fld	fs0,64(s0)
    80207173:	2020                	fld	fs0,64(s0)
    80207175:	3120                	fld	fs0,96(a0)
    80207177:	3235                	addiw	tp,tp,-19
    80207179:	6b20                	ld	s0,80(a4)
    8020717b:	0a42                	slli	s4,s4,0x10
    8020717d:	6e49                	lui	t3,0x12
    8020717f:	6361                	lui	t1,0x18
    80207181:	6974                	ld	a3,208(a0)
    80207183:	6576                	ld	a0,344(sp)
    80207185:	6128                	ld	a0,64(a0)
    80207187:	6f6e                	ld	t5,216(sp)
    80207189:	296e                	fld	fs2,216(sp)
    8020718b:	203a                	fld	ft0,392(sp)
    8020718d:	2020                	fld	fs0,64(s0)
    8020718f:	3520                	fld	fs0,104(a0)
    80207191:	3332                	fld	ft6,296(sp)
    80207193:	3835                	addiw	a6,a6,-19
    80207195:	6b20                	ld	s0,80(a4)
    80207197:	0a42                	slli	s4,s4,0x10
    80207199:	6341                	lui	t1,0x10
    8020719b:	6974                	ld	a3,208(a0)
    8020719d:	6576                	ld	a0,344(sp)
    8020719f:	6628                	ld	a0,72(a2)
    802071a1:	6c69                	lui	s8,0x1a
    802071a3:	2965                	addiw	s2,s2,25
    802071a5:	203a                	fld	ft0,392(sp)
    802071a7:	2020                	fld	fs0,64(s0)
    802071a9:	2020                	fld	fs0,64(s0)
    802071ab:	3320                	fld	fs0,96(a4)
    802071ad:	3031                	0x3031
    802071af:	3735                	addiw	a4,a4,-19
    802071b1:	6b20                	ld	s0,80(a4)
    802071b3:	0a42                	slli	s4,s4,0x10
    802071b5:	6e49                	lui	t3,0x12
    802071b7:	6361                	lui	t1,0x18
    802071b9:	6974                	ld	a3,208(a0)
    802071bb:	6576                	ld	a0,344(sp)
    802071bd:	6628                	ld	a0,72(a2)
    802071bf:	6c69                	lui	s8,0x1a
    802071c1:	2965                	addiw	s2,s2,25
    802071c3:	203a                	fld	ft0,392(sp)
    802071c5:	2020                	fld	fs0,64(s0)
    802071c7:	3320                	fld	fs0,96(a4)
    802071c9:	3338                	fld	fa4,96(a4)
    802071cb:	3034                	fld	fa3,96(s0)
    802071cd:	6b20                	ld	s0,80(a4)
    802071cf:	0a42                	slli	s4,s4,0x10
    802071d1:	6e55                	lui	t3,0x15
    802071d3:	7665                	lui	a2,0xffff9
    802071d5:	6369                	lui	t1,0x1a
    802071d7:	6174                	ld	a3,192(a0)
    802071d9:	6c62                	ld	s8,24(sp)
    802071db:	3a65                	addiw	s4,s4,-7
    802071dd:	2020                	fld	fs0,64(s0)
    802071df:	2020                	fld	fs0,64(s0)
    802071e1:	2020                	fld	fs0,64(s0)
    802071e3:	2020                	fld	fs0,64(s0)
    802071e5:	2020                	fld	fs0,64(s0)
    802071e7:	3020                	fld	fs0,96(s0)
    802071e9:	6b20                	ld	s0,80(a4)
    802071eb:	0a42                	slli	s4,s4,0x10
    802071ed:	6c4d                	lui	s8,0x13
    802071ef:	656b636f          	jal	t1,802bd845 <data_start+0xa7845>
    802071f3:	3a64                	fld	fs1,240(a2)
    802071f5:	2020                	fld	fs0,64(s0)
    802071f7:	2020                	fld	fs0,64(s0)
    802071f9:	2020                	fld	fs0,64(s0)
    802071fb:	2020                	fld	fs0,64(s0)
    802071fd:	2020                	fld	fs0,64(s0)
    802071ff:	2020                	fld	fs0,64(s0)
    80207201:	2020                	fld	fs0,64(s0)
    80207203:	3020                	fld	fs0,96(s0)
    80207205:	6b20                	ld	s0,80(a4)
    80207207:	0a42                	slli	s4,s4,0x10
    80207209:	70617753          	0x70617753
    8020720d:	6f54                	ld	a3,152(a4)
    8020720f:	6174                	ld	a3,192(a0)
    80207211:	3a6c                	fld	fa1,240(a2)
    80207213:	2020                	fld	fs0,64(s0)
    80207215:	2020                	fld	fs0,64(s0)
    80207217:	2020                	fld	fs0,64(s0)
    80207219:	2020                	fld	fs0,64(s0)
    8020721b:	3920                	fld	fs0,112(a0)
    8020721d:	3534                	fld	fa3,104(a0)
    8020721f:	3134                	fld	fa3,96(a0)
    80207221:	6b20                	ld	s0,80(a4)
    80207223:	0a42                	slli	s4,s4,0x10
    80207225:	70617753          	0x70617753
    80207229:	7246                	ld	tp,112(sp)
    8020722b:	6565                	lui	a0,0x19
    8020722d:	203a                	fld	ft0,392(sp)
    8020722f:	2020                	fld	fs0,64(s0)
    80207231:	2020                	fld	fs0,64(s0)
    80207233:	2020                	fld	fs0,64(s0)
    80207235:	2020                	fld	fs0,64(s0)
    80207237:	3920                	fld	fs0,112(a0)
    80207239:	3534                	fld	fa3,104(a0)
    8020723b:	3134                	fld	fa3,96(a0)
    8020723d:	6b20                	ld	s0,80(a4)
    8020723f:	0a42                	slli	s4,s4,0x10
    80207241:	6944                	ld	s1,144(a0)
    80207243:	7472                	ld	s0,312(sp)
    80207245:	3a79                	addiw	s4,s4,-2
    80207247:	2020                	fld	fs0,64(s0)
    80207249:	2020                	fld	fs0,64(s0)
    8020724b:	2020                	fld	fs0,64(s0)
    8020724d:	2020                	fld	fs0,64(s0)
    8020724f:	2020                	fld	fs0,64(s0)
    80207251:	2020                	fld	fs0,64(s0)
    80207253:	2020                	fld	fs0,64(s0)
    80207255:	2020                	fld	fs0,64(s0)
    80207257:	3020                	fld	fs0,96(s0)
    80207259:	6b20                	ld	s0,80(a4)
    8020725b:	0a42                	slli	s4,s4,0x10
    8020725d:	74697257          	0x74697257
    80207261:	6265                	lui	tp,0x19
    80207263:	6361                	lui	t1,0x18
    80207265:	20203a6b          	0x20203a6b
    80207269:	2020                	fld	fs0,64(s0)
    8020726b:	2020                	fld	fs0,64(s0)
    8020726d:	2020                	fld	fs0,64(s0)
    8020726f:	2020                	fld	fs0,64(s0)
    80207271:	2020                	fld	fs0,64(s0)
    80207273:	3020                	fld	fs0,96(s0)
    80207275:	6b20                	ld	s0,80(a4)
    80207277:	0a42                	slli	s4,s4,0x10
    80207279:	6e41                	lui	t3,0x10
    8020727b:	61506e6f          	jal	t3,8020e08f <sys_getcwd+0xef>
    8020727f:	3a736567          	0x3a736567
    80207283:	2020                	fld	fs0,64(s0)
    80207285:	2020                	fld	fs0,64(s0)
    80207287:	2020                	fld	fs0,64(s0)
    80207289:	2020                	fld	fs0,64(s0)
    8020728b:	3520                	fld	fs0,104(a0)
    8020728d:	3832                	fld	fa6,296(sp)
    8020728f:	3332                	fld	ft6,296(sp)
    80207291:	6b20                	ld	s0,80(a4)
    80207293:	0a42                	slli	s4,s4,0x10
    80207295:	614d                	addi	sp,sp,176
    80207297:	7070                	ld	a2,224(s0)
    80207299:	6465                	lui	s0,0x19
    8020729b:	203a                	fld	ft0,392(sp)
    8020729d:	2020                	fld	fs0,64(s0)
    8020729f:	2020                	fld	fs0,64(s0)
    802072a1:	2020                	fld	fs0,64(s0)
    802072a3:	2020                	fld	fs0,64(s0)
    802072a5:	2020                	fld	fs0,64(s0)
    802072a7:	3220                	fld	fs0,96(a2)
    802072a9:	3034                	fld	fa3,96(s0)
    802072ab:	3931                	addiw	s2,s2,-20
    802072ad:	6b20                	ld	s0,80(a4)
    802072af:	0a42                	slli	s4,s4,0x10
    802072b1:	656d6853          	0x656d6853
    802072b5:	3a6d                	addiw	s4,s4,-5
    802072b7:	2020                	fld	fs0,64(s0)
    802072b9:	2020                	fld	fs0,64(s0)
    802072bb:	2020                	fld	fs0,64(s0)
    802072bd:	2020                	fld	fs0,64(s0)
    802072bf:	2020                	fld	fs0,64(s0)
    802072c1:	2020                	fld	fs0,64(s0)
    802072c3:	2020                	fld	fs0,64(s0)
    802072c5:	3732                	fld	fa4,296(sp)
    802072c7:	3036                	fld	ft0,360(sp)
    802072c9:	6b20                	ld	s0,80(a4)
    802072cb:	0a42                	slli	s4,s4,0x10
    802072cd:	6365524b          	fnmsub.d	ft4,fa0,fs6,fa2,unknown
    802072d1:	616c                	ld	a1,192(a0)
    802072d3:	6d69                	lui	s10,0x1a
    802072d5:	6261                	lui	tp,0x18
    802072d7:	656c                	ld	a1,200(a0)
    802072d9:	203a                	fld	ft0,392(sp)
    802072db:	2020                	fld	fs0,64(s0)
    802072dd:	2020                	fld	fs0,64(s0)
    802072df:	2020                	fld	fs0,64(s0)
    802072e1:	3436                	fld	fs0,360(sp)
    802072e3:	3634                	fld	fa3,104(a2)
    802072e5:	6b20                	ld	s0,80(a4)
    802072e7:	0a42                	slli	s4,s4,0x10
    802072e9:	62616c53          	0x62616c53
    802072ed:	203a                	fld	ft0,392(sp)
    802072ef:	2020                	fld	fs0,64(s0)
    802072f1:	2020                	fld	fs0,64(s0)
    802072f3:	2020                	fld	fs0,64(s0)
    802072f5:	2020                	fld	fs0,64(s0)
    802072f7:	2020                	fld	fs0,64(s0)
    802072f9:	2020                	fld	fs0,64(s0)
    802072fb:	3120                	fld	fs0,96(a0)
    802072fd:	3234                	fld	fa3,96(a2)
    802072ff:	3031                	0x3031
    80207301:	6b20                	ld	s0,80(a4)
    80207303:	0a42                	slli	s4,s4,0x10
    80207305:	63655253          	0x63655253
    80207309:	616c                	ld	a1,192(a0)
    8020730b:	6d69                	lui	s10,0x1a
    8020730d:	6261                	lui	tp,0x18
    8020730f:	656c                	ld	a1,200(a0)
    80207311:	203a                	fld	ft0,392(sp)
    80207313:	2020                	fld	fs0,64(s0)
    80207315:	2020                	fld	fs0,64(s0)
    80207317:	2020                	fld	fs0,64(s0)
    80207319:	3436                	fld	fs0,360(sp)
    8020731b:	3634                	fld	fa3,104(a2)
    8020731d:	6b20                	ld	s0,80(a4)
    8020731f:	0a42                	slli	s4,s4,0x10
    80207321:	726e5553          	0x726e5553
    80207325:	6365                	lui	t1,0x19
    80207327:	616c                	ld	a1,192(a0)
    80207329:	6d69                	lui	s10,0x1a
    8020732b:	203a                	fld	ft0,392(sp)
    8020732d:	2020                	fld	fs0,64(s0)
    8020732f:	2020                	fld	fs0,64(s0)
    80207331:	2020                	fld	fs0,64(s0)
    80207333:	2020                	fld	fs0,64(s0)
    80207335:	34363737          	lui	a4,0x34363
    80207339:	6b20                	ld	s0,80(a4)
    8020733b:	0a42                	slli	s4,s4,0x10
    8020733d:	6e72654b          	fnmsub.q	fa0,ft4,ft7,fa3,unknown
    80207341:	6c65                	lui	s8,0x19
    80207343:	63617453          	0x63617453
    80207347:	20203a6b          	0x20203a6b
    8020734b:	2020                	fld	fs0,64(s0)
    8020734d:	2020                	fld	fs0,64(s0)
    8020734f:	2020                	fld	fs0,64(s0)
    80207351:	2020                	fld	fs0,64(s0)
    80207353:	3120                	fld	fs0,96(a0)
    80207355:	6b20                	ld	s0,80(a4)
    80207357:	0a42                	slli	s4,s4,0x10
    80207359:	6150                	ld	a2,128(a0)
    8020735b:	61546567          	0x61546567
    8020735f:	6c62                	ld	s8,24(sp)
    80207361:	7365                	lui	t1,0xffff9
    80207363:	203a                	fld	ft0,392(sp)
    80207365:	2020                	fld	fs0,64(s0)
    80207367:	2020                	fld	fs0,64(s0)
    80207369:	2020                	fld	fs0,64(s0)
    8020736b:	2020                	fld	fs0,64(s0)
    8020736d:	38303933          	0x38303933
    80207371:	6b20                	ld	s0,80(a4)
    80207373:	0a42                	slli	s4,s4,0x10
    80207375:	464e                	lw	a2,208(sp)
    80207377:	6e555f53          	0x6e555f53
    8020737b:	62617473          	csrrci	s0,0x626,2
    8020737f:	656c                	ld	a1,200(a0)
    80207381:	203a                	fld	ft0,392(sp)
    80207383:	2020                	fld	fs0,64(s0)
    80207385:	2020                	fld	fs0,64(s0)
    80207387:	2020                	fld	fs0,64(s0)
    80207389:	2020                	fld	fs0,64(s0)
    8020738b:	3020                	fld	fs0,96(s0)
    8020738d:	6b20                	ld	s0,80(a4)
    8020738f:	0a42                	slli	s4,s4,0x10
    80207391:	6f42                	ld	t5,16(sp)
    80207393:	6e75                	lui	t3,0x1d
    80207395:	203a6563          	bltu	s4,gp,8020759f <meminfo+0x51e>
    80207399:	2020                	fld	fs0,64(s0)
    8020739b:	2020                	fld	fs0,64(s0)
    8020739d:	2020                	fld	fs0,64(s0)
    8020739f:	2020                	fld	fs0,64(s0)
    802073a1:	2020                	fld	fs0,64(s0)
    802073a3:	2020                	fld	fs0,64(s0)
    802073a5:	2020                	fld	fs0,64(s0)
    802073a7:	3020                	fld	fs0,96(s0)
    802073a9:	6b20                	ld	s0,80(a4)
    802073ab:	0a42                	slli	s4,s4,0x10
    802073ad:	74697257          	0x74697257
    802073b1:	6265                	lui	tp,0x19
    802073b3:	6361                	lui	t1,0x18
    802073b5:	706d546b          	0x706d546b
    802073b9:	203a                	fld	ft0,392(sp)
    802073bb:	2020                	fld	fs0,64(s0)
    802073bd:	2020                	fld	fs0,64(s0)
    802073bf:	2020                	fld	fs0,64(s0)
    802073c1:	2020                	fld	fs0,64(s0)
    802073c3:	3020                	fld	fs0,96(s0)
    802073c5:	6b20                	ld	s0,80(a4)
    802073c7:	0a42                	slli	s4,s4,0x10
    802073c9:	6d6d6f43          	0x6d6d6f43
    802073cd:	7469                	lui	s0,0xffffa
    802073cf:	694c                	ld	a1,144(a0)
    802073d1:	696d                	lui	s2,0x1b
    802073d3:	3a74                	fld	fa3,240(a2)
    802073d5:	2020                	fld	fs0,64(s0)
    802073d7:	2020                	fld	fs0,64(s0)
    802073d9:	2020                	fld	fs0,64(s0)
    802073db:	3120                	fld	fs0,96(a0)
    802073dd:	3439                	addiw	s0,s0,-18
    802073df:	3730                	fld	fa2,104(a4)
    802073e1:	6b20                	ld	s0,80(a4)
    802073e3:	0a42                	slli	s4,s4,0x10
    802073e5:	6d6d6f43          	0x6d6d6f43
    802073e9:	7469                	lui	s0,0xffffa
    802073eb:	6574                	ld	a3,200(a0)
    802073ed:	5f64                	lw	s1,124(a4)
    802073ef:	5341                	li	t1,-16
    802073f1:	203a                	fld	ft0,392(sp)
    802073f3:	2020                	fld	fs0,64(s0)
    802073f5:	2020                	fld	fs0,64(s0)
    802073f7:	3320                	fld	fs0,96(a4)
    802073f9:	3532                	fld	fa0,296(sp)
    802073fb:	3532                	fld	fa0,296(sp)
    802073fd:	6b20                	ld	s0,80(a4)
    802073ff:	0a42                	slli	s4,s4,0x10
    80207401:	6d56                	ld	s10,336(sp)
    80207403:	6c61                	lui	s8,0x18
    80207405:	6f6c                	ld	a1,216(a4)
    80207407:	746f5463          	bge	t5,t1,80207b4f <devinit+0x193>
    8020740b:	6c61                	lui	s8,0x18
    8020740d:	203a                	fld	ft0,392(sp)
    8020740f:	2020                	fld	fs0,64(s0)
    80207411:	2020                	fld	fs0,64(s0)
    80207413:	35333433          	0x35333433
    80207417:	3739                	addiw	a4,a4,-18
    80207419:	6b20                	ld	s0,80(a4)
    8020741b:	0a42                	slli	s4,s4,0x10
    8020741d:	6d56                	ld	s10,336(sp)
    8020741f:	6c61                	lui	s8,0x18
    80207421:	6f6c                	ld	a1,216(a4)
    80207423:	65735563          	bge	t1,s7,80207a6d <devinit+0xb1>
    80207427:	3a64                	fld	fs1,240(a2)
    80207429:	2020                	fld	fs0,64(s0)
    8020742b:	2020                	fld	fs0,64(s0)
    8020742d:	2020                	fld	fs0,64(s0)
    8020742f:	2020                	fld	fs0,64(s0)
    80207431:	3835                	addiw	a6,a6,-19
    80207433:	3238                	fld	fa4,96(a2)
    80207435:	6b20                	ld	s0,80(a4)
    80207437:	0a42                	slli	s4,s4,0x10
    80207439:	6d56                	ld	s10,336(sp)
    8020743b:	6c61                	lui	s8,0x18
    8020743d:	6f6c                	ld	a1,216(a4)
    8020743f:	75684363          	blt	a6,s6,80207b85 <devinit+0x1c9>
    80207443:	6b6e                	ld	s6,216(sp)
    80207445:	203a                	fld	ft0,392(sp)
    80207447:	2020                	fld	fs0,64(s0)
    80207449:	2020                	fld	fs0,64(s0)
    8020744b:	2020                	fld	fs0,64(s0)
    8020744d:	2020                	fld	fs0,64(s0)
    8020744f:	3020                	fld	fs0,96(s0)
    80207451:	6b20                	ld	s0,80(a4)
    80207453:	0a42                	slli	s4,s4,0x10
    80207455:	6550                	ld	a2,136(a0)
    80207457:	6372                	ld	t1,280(sp)
    80207459:	7570                	ld	a2,232(a0)
    8020745b:	203a                	fld	ft0,392(sp)
    8020745d:	2020                	fld	fs0,64(s0)
    8020745f:	2020                	fld	fs0,64(s0)
    80207461:	2020                	fld	fs0,64(s0)
    80207463:	2020                	fld	fs0,64(s0)
    80207465:	2020                	fld	fs0,64(s0)
    80207467:	2020                	fld	fs0,64(s0)
    80207469:	3439                	addiw	s0,s0,-18
    8020746b:	6b203237          	lui	tp,0x6b203
    8020746f:	0a42                	slli	s4,s4,0x10
    80207471:	6148                	ld	a0,128(a0)
    80207473:	6472                	ld	s0,280(sp)
    80207475:	65726177          	0x65726177
    80207479:	72726f43          	fmadd.d	ft10,ft4,ft7,fa4,unknown
    8020747d:	7075                	c.lui	zero,0xffffd
    8020747f:	6574                	ld	a3,200(a0)
    80207481:	3a64                	fld	fs1,240(a2)
    80207483:	2020                	fld	fs0,64(s0)
    80207485:	2020                	fld	fs0,64(s0)
    80207487:	3020                	fld	fs0,96(s0)
    80207489:	6b20                	ld	s0,80(a4)
    8020748b:	0a42                	slli	s4,s4,0x10
    8020748d:	6e41                	lui	t3,0x10
    8020748f:	75486e6f          	jal	t3,8028dbe3 <data_start+0x77be3>
    80207493:	61506567          	0x61506567
    80207497:	3a736567          	0x3a736567
    8020749b:	2020                	fld	fs0,64(s0)
    8020749d:	2020                	fld	fs0,64(s0)
    8020749f:	2020                	fld	fs0,64(s0)
    802074a1:	2020                	fld	fs0,64(s0)
    802074a3:	3020                	fld	fs0,96(s0)
    802074a5:	6b20                	ld	s0,80(a4)
    802074a7:	0a42                	slli	s4,s4,0x10
    802074a9:	656d6853          	0x656d6853
    802074ad:	486d                	li	a6,27
    802074af:	6775                	lui	a4,0x1d
    802074b1:	5065                	c.li	zero,-7
    802074b3:	6761                	lui	a4,0x18
    802074b5:	7365                	lui	t1,0xffff9
    802074b7:	203a                	fld	ft0,392(sp)
    802074b9:	2020                	fld	fs0,64(s0)
    802074bb:	2020                	fld	fs0,64(s0)
    802074bd:	2020                	fld	fs0,64(s0)
    802074bf:	3020                	fld	fs0,96(s0)
    802074c1:	6b20                	ld	s0,80(a4)
    802074c3:	0a42                	slli	s4,s4,0x10
    802074c5:	656d6853          	0x656d6853
    802074c9:	506d                	c.li	zero,-5
    802074cb:	646d                	lui	s0,0x1b
    802074cd:	614d                	addi	sp,sp,176
    802074cf:	7070                	ld	a2,224(s0)
    802074d1:	6465                	lui	s0,0x19
    802074d3:	203a                	fld	ft0,392(sp)
    802074d5:	2020                	fld	fs0,64(s0)
    802074d7:	2020                	fld	fs0,64(s0)
    802074d9:	2020                	fld	fs0,64(s0)
    802074db:	3020                	fld	fs0,96(s0)
    802074dd:	6b20                	ld	s0,80(a4)
    802074df:	0a42                	slli	s4,s4,0x10
    802074e1:	6946                	ld	s2,80(sp)
    802074e3:	656c                	ld	a1,200(a0)
    802074e5:	7548                	ld	a0,168(a0)
    802074e7:	61506567          	0x61506567
    802074eb:	3a736567          	0x3a736567
    802074ef:	2020                	fld	fs0,64(s0)
    802074f1:	2020                	fld	fs0,64(s0)
    802074f3:	2020                	fld	fs0,64(s0)
    802074f5:	2020                	fld	fs0,64(s0)
    802074f7:	3020                	fld	fs0,96(s0)
    802074f9:	6b20                	ld	s0,80(a4)
    802074fb:	0a42                	slli	s4,s4,0x10
    802074fd:	6946                	ld	s2,80(sp)
    802074ff:	656c                	ld	a1,200(a0)
    80207501:	6d50                	ld	a2,152(a0)
    80207503:	4d64                	lw	s1,92(a0)
    80207505:	7061                	c.lui	zero,0xffff8
    80207507:	6570                	ld	a2,200(a0)
    80207509:	3a64                	fld	fs1,240(a2)
    8020750b:	2020                	fld	fs0,64(s0)
    8020750d:	2020                	fld	fs0,64(s0)
    8020750f:	2020                	fld	fs0,64(s0)
    80207511:	2020                	fld	fs0,64(s0)
    80207513:	3020                	fld	fs0,96(s0)
    80207515:	6b20                	ld	s0,80(a4)
    80207517:	0a42                	slli	s4,s4,0x10
    80207519:	7548                	ld	a0,168(a0)
    8020751b:	61506567          	0x61506567
    8020751f:	5f736567          	0x5f736567
    80207523:	6f54                	ld	a3,152(a4)
    80207525:	6174                	ld	a3,192(a0)
    80207527:	3a6c                	fld	fa1,240(a2)
    80207529:	2020                	fld	fs0,64(s0)
    8020752b:	2020                	fld	fs0,64(s0)
    8020752d:	2020                	fld	fs0,64(s0)
    8020752f:	3020                	fld	fs0,96(s0)
    80207531:	480a                	lw	a6,128(sp)
    80207533:	6775                	lui	a4,0x1d
    80207535:	5065                	c.li	zero,-7
    80207537:	6761                	lui	a4,0x18
    80207539:	7365                	lui	t1,0xffff9
    8020753b:	465f 6572 3a65      	0x3a656572465f
    80207541:	2020                	fld	fs0,64(s0)
    80207543:	2020                	fld	fs0,64(s0)
    80207545:	2020                	fld	fs0,64(s0)
    80207547:	2020                	fld	fs0,64(s0)
    80207549:	0a30                	addi	a2,sp,280
    8020754b:	7548                	ld	a0,168(a0)
    8020754d:	61506567          	0x61506567
    80207551:	5f736567          	0x5f736567
    80207555:	7352                	ld	t1,304(sp)
    80207557:	6476                	ld	s0,344(sp)
    80207559:	203a                	fld	ft0,392(sp)
    8020755b:	2020                	fld	fs0,64(s0)
    8020755d:	2020                	fld	fs0,64(s0)
    8020755f:	2020                	fld	fs0,64(s0)
    80207561:	3020                	fld	fs0,96(s0)
    80207563:	480a                	lw	a6,128(sp)
    80207565:	6775                	lui	a4,0x1d
    80207567:	5065                	c.li	zero,-7
    80207569:	6761                	lui	a4,0x18
    8020756b:	7365                	lui	t1,0xffff9
    8020756d:	535f 7275 3a70      	0x3a707275535f
    80207573:	2020                	fld	fs0,64(s0)
    80207575:	2020                	fld	fs0,64(s0)
    80207577:	2020                	fld	fs0,64(s0)
    80207579:	2020                	fld	fs0,64(s0)
    8020757b:	0a30                	addi	a2,sp,280
    8020757d:	7548                	ld	a0,168(a0)
    8020757f:	61706567          	0x61706567
    80207583:	69736567          	0x69736567
    80207587:	657a                	ld	a0,408(sp)
    80207589:	203a                	fld	ft0,392(sp)
    8020758b:	2020                	fld	fs0,64(s0)
    8020758d:	2020                	fld	fs0,64(s0)
    8020758f:	2020                	fld	fs0,64(s0)
    80207591:	3032                	fld	ft0,296(sp)
    80207593:	3834                	fld	fa3,112(s0)
    80207595:	6b20                	ld	s0,80(a4)
    80207597:	0a42                	slli	s4,s4,0x10
    80207599:	7548                	ld	a0,168(a0)
    8020759b:	6c746567          	0x6c746567
    8020759f:	3a62                	fld	fs4,56(sp)
    802075a1:	2020                	fld	fs0,64(s0)
    802075a3:	2020                	fld	fs0,64(s0)
    802075a5:	2020                	fld	fs0,64(s0)
    802075a7:	2020                	fld	fs0,64(s0)
    802075a9:	2020                	fld	fs0,64(s0)
    802075ab:	2020                	fld	fs0,64(s0)
    802075ad:	2020                	fld	fs0,64(s0)
    802075af:	3020                	fld	fs0,96(s0)
    802075b1:	6b20                	ld	s0,80(a4)
    802075b3:	0a42                	slli	s4,s4,0x10
    802075b5:	6944                	ld	s1,144(a0)
    802075b7:	6572                	ld	a0,280(sp)
    802075b9:	614d7463          	bgeu	s10,s4,80207bc1 <devinit+0x205>
    802075bd:	3470                	fld	fa2,232(s0)
    802075bf:	20203a6b          	0x20203a6b
    802075c3:	2020                	fld	fs0,64(s0)
    802075c5:	2020                	fld	fs0,64(s0)
    802075c7:	3332                	fld	ft6,296(sp)
    802075c9:	34343333          	0x34343333
    802075cd:	6b20                	ld	s0,80(a4)
    802075cf:	0a42                	slli	s4,s4,0x10
    802075d1:	6944                	ld	s1,144(a0)
    802075d3:	6572                	ld	a0,280(sp)
    802075d5:	614d7463          	bgeu	s10,s4,80207bdd <devinit+0x221>
    802075d9:	3270                	fld	fa2,224(a2)
    802075db:	3a4d                	addiw	s4,s4,-13
    802075dd:	2020                	fld	fs0,64(s0)
    802075df:	2020                	fld	fs0,64(s0)
    802075e1:	3120                	fld	fs0,96(a0)
    802075e3:	3638                	fld	fa4,104(a2)
    802075e5:	30383633          	0x30383633
    802075e9:	6b20                	ld	s0,80(a4)
    802075eb:	0a42                	slli	s4,s4,0x10
    802075ed:	6944                	ld	s1,144(a0)
    802075ef:	6572                	ld	a0,280(sp)
    802075f1:	614d7463          	bgeu	s10,s4,80207bf9 <devinit+0x23d>
    802075f5:	3170                	fld	fa2,224(a0)
    802075f7:	20203a47          	fmsub.s	fs4,ft0,ft2,ft4,rup
    802075fb:	2020                	fld	fs0,64(s0)
    802075fd:	2020                	fld	fs0,64(s0)
    802075ff:	2020                	fld	fs0,64(s0)
    80207601:	2020                	fld	fs0,64(s0)
    80207603:	3020                	fld	fs0,96(s0)
    80207605:	6b20                	ld	s0,80(a4)
    80207607:	0a42                	slli	s4,s4,0x10
    80207609:	0a              	Address 0x0000000080207609 is out of bounds.


000000008020760a <meminfo_size>:
    8020760a:	0589                	addi	a1,a1,2
	...

000000008020760e <lat_sig>:
    8020760e:	6d6c                	ld	a1,216(a0)
    80207610:	6562                	ld	a0,24(sp)
    80207612:	636e                	ld	t1,216(sp)
    80207614:	5f68                	lw	a0,124(a4)
    80207616:	6c61                	lui	s8,0x18
    80207618:	206c                	fld	fa1,192(s0)
    8020761a:	616c                	ld	a1,192(a0)
    8020761c:	5f74                	lw	a3,124(a4)
    8020761e:	20676973          	csrrsi	s2,0x206,14
    80207622:	2422                	fld	fs0,8(sp)
    80207624:	2240                	fld	fs0,128(a2)
    80207626:	0a              	Address 0x0000000080207626 is out of bounds.


0000000080207627 <lat_sig_size>:
    80207627:	0019                	c.nop	6
	...

000000008020762b <hello>:
    8020762b:	6d6c                	ld	a1,216(a0)
    8020762d:	6562                	ld	a0,24(sp)
    8020762f:	636e                	ld	t1,216(sp)
    80207631:	5f68                	lw	a0,124(a4)
    80207633:	6c61                	lui	s8,0x18
    80207635:	206c                	fld	fa1,192(s0)
    80207637:	6568                	ld	a0,200(a0)
    80207639:	6c6c                	ld	a1,216(s0)
    8020763b:	2422206f          	j	8022987d <data_start+0x1387d>
    8020763f:	2240                	fld	fs0,128(a2)
    80207641:	0a              	Address 0x0000000080207641 is out of bounds.


0000000080207642 <hello_size>:
    80207642:	00000017          	auipc	zero,0x0

0000000080207646 <sh>:
    80207646:	7562                	ld	a0,56(sp)
    80207648:	6f627973          	csrrci	s2,0x6f6,4
    8020764c:	2078                	fld	fa4,192(s0)
    8020764e:	24206873          	csrrsi	a6,hcause,0
    80207652:	0a40                	addi	s0,sp,276

0000000080207654 <sh_size>:
    80207654:	000e                	c.slli	zero,0x3
	...

0000000080207662 <rtcread>:
  return -1;
}

int
rtcread(int user_dst, uint64 addr, int n)
{
    80207662:	1141                	addi	sp,sp,-16
    80207664:	e422                	sd	s0,8(sp)
    80207666:	0800                	addi	s0,sp,16
  return 0;
}
    80207668:	4501                	li	a0,0
    8020766a:	6422                	ld	s0,8(sp)
    8020766c:	0141                	addi	sp,sp,16
    8020766e:	8082                	ret

0000000080207670 <rtcwrite>:

int
rtcwrite(int user_dst, uint64 addr, int n)
{
    80207670:	1141                	addi	sp,sp,-16
    80207672:	e422                	sd	s0,8(sp)
    80207674:	0800                	addi	s0,sp,16
  return 0;
}
    80207676:	4501                	li	a0,0
    80207678:	6422                	ld	s0,8(sp)
    8020767a:	0141                	addi	sp,sp,16
    8020767c:	8082                	ret

000000008020767e <nullread>:

int
nullread(int user_dst,uint64 addr,int n){
    8020767e:	1141                	addi	sp,sp,-16
    80207680:	e422                	sd	s0,8(sp)
    80207682:	0800                	addi	s0,sp,16
  return 0;
}
    80207684:	4501                	li	a0,0
    80207686:	6422                	ld	s0,8(sp)
    80207688:	0141                	addi	sp,sp,16
    8020768a:	8082                	ret

000000008020768c <nullwrite>:

int
nullwrite(int user_dst,uint64 addr,int n){
    8020768c:	1141                	addi	sp,sp,-16
    8020768e:	e422                	sd	s0,8(sp)
    80207690:	0800                	addi	s0,sp,16
  return n;
}
    80207692:	8532                	mv	a0,a2
    80207694:	6422                	ld	s0,8(sp)
    80207696:	0141                	addi	sp,sp,16
    80207698:	8082                	ret

000000008020769a <zerowrite>:
  }
}
  

int
zerowrite(int user_dst,uint64 addr,int n){
    8020769a:	1141                	addi	sp,sp,-16
    8020769c:	e422                	sd	s0,8(sp)
    8020769e:	0800                	addi	s0,sp,16
  return n;
}
    802076a0:	8532                	mv	a0,a2
    802076a2:	6422                	ld	s0,8(sp)
    802076a4:	0141                	addi	sp,sp,16
    802076a6:	8082                	ret

00000000802076a8 <zeroread>:
zeroread(int user_dst,uint64 addr,int n){
    802076a8:	1101                	addi	sp,sp,-32
    802076aa:	ec06                	sd	ra,24(sp)
    802076ac:	e822                	sd	s0,16(sp)
    802076ae:	e426                	sd	s1,8(sp)
    802076b0:	1000                	addi	s0,sp,32
    802076b2:	87aa                	mv	a5,a0
    802076b4:	852e                	mv	a0,a1
    802076b6:	84b2                	mv	s1,a2
  if(user_dst){
    802076b8:	cb99                	beqz	a5,802076ce <zeroread+0x26>
    return zero_out(addr,n);
    802076ba:	85b2                	mv	a1,a2
    802076bc:	00003097          	auipc	ra,0x3
    802076c0:	710080e7          	jalr	1808(ra) # 8020adcc <zero_out>
}
    802076c4:	60e2                	ld	ra,24(sp)
    802076c6:	6442                	ld	s0,16(sp)
    802076c8:	64a2                	ld	s1,8(sp)
    802076ca:	6105                	addi	sp,sp,32
    802076cc:	8082                	ret
    memset((void*)addr,0,n);
    802076ce:	4581                	li	a1,0
    802076d0:	ffff9097          	auipc	ra,0xffff9
    802076d4:	6a4080e7          	jalr	1700(ra) # 80200d74 <memset>
    return n;
    802076d8:	8526                	mv	a0,s1
    802076da:	b7ed                	j	802076c4 <zeroread+0x1c>

00000000802076dc <consoleread>:

int
consoleread(int user_dst,uint64 addr,int n){
    802076dc:	7109                	addi	sp,sp,-384
    802076de:	fe86                	sd	ra,376(sp)
    802076e0:	faa2                	sd	s0,368(sp)
    802076e2:	f6a6                	sd	s1,360(sp)
    802076e4:	f2ca                	sd	s2,352(sp)
    802076e6:	eece                	sd	s3,344(sp)
    802076e8:	ead2                	sd	s4,336(sp)
    802076ea:	e6d6                	sd	s5,328(sp)
    802076ec:	e2da                	sd	s6,320(sp)
    802076ee:	fe5e                	sd	s7,312(sp)
    802076f0:	fa62                	sd	s8,304(sp)
    802076f2:	f666                	sd	s9,296(sp)
    802076f4:	f26a                	sd	s10,288(sp)
    802076f6:	ee6e                	sd	s11,280(sp)
    802076f8:	0300                	addi	s0,sp,384
    802076fa:	e8a43423          	sd	a0,-376(s0) # 18e88 <_entry-0x801e7178>
    802076fe:	8cb2                	mv	s9,a2
  char readbuf[CONSOLE_BUF_LEN];
  int ret = 0;
  int interp = 0;
  while(n&&!interp){
    80207700:	c65d                	beqz	a2,802077ae <consoleread+0xd2>
    80207702:	8d2e                	mv	s10,a1
  int ret = 0;
    80207704:	4d81                	li	s11,0
    int len = MIN(n,CONSOLE_BUF_LEN);
    int i;
    for(i=0;i<len;i++){
    80207706:	4901                	li	s2,0
      char c = 0;
      while((c=sbi_console_getchar())==255);
    80207708:	0ff00993          	li	s3,255
      c = c==13?10:c;
    8020770c:	4c35                	li	s8,13
      readbuf[i] = c;
      consputc(c);
      if(c == 10){
    8020770e:	4ba9                	li	s7,10
    80207710:	a895                	j	80207784 <consoleread+0xa8>
      readbuf[i] = c;
    80207712:	009a8023          	sb	s1,0(s5)
      consputc(c);
    80207716:	8526                	mv	a0,s1
    80207718:	00001097          	auipc	ra,0x1
    8020771c:	dfc080e7          	jalr	-516(ra) # 80208514 <consputc>
      if(c == 10){
    80207720:	09748563          	beq	s1,s7,802077aa <consoleread+0xce>
    for(i=0;i<len;i++){
    80207724:	2a05                	addiw	s4,s4,1
    80207726:	0a85                	addi	s5,s5,1
    80207728:	076a5c63          	bge	s4,s6,802077a0 <consoleread+0xc4>
	SBI_EXT_HSM_HART_STOP,
	SBI_EXT_HSM_HART_STATUS,
};

static int inline sbi_call(uint64 which, uint64 arg0, uint64 arg1, uint64 arg2) {
    register uint64 a0 asm("a0") = arg0;
    8020772c:	854a                	mv	a0,s2
    register uint64 a1 asm("a1") = arg1;
    8020772e:	85ca                	mv	a1,s2
    register uint64 a2 asm("a2") = arg2;
    80207730:	864a                	mv	a2,s2
    register uint64 a7 asm("a7") = which;
    80207732:	4889                	li	a7,2
    asm volatile("ecall"
    80207734:	00000073          	ecall
      while((c=sbi_console_getchar())==255);
    80207738:	0ff57493          	andi	s1,a0,255
    8020773c:	ff3488e3          	beq	s1,s3,8020772c <consoleread+0x50>
      c = c==13?10:c;
    80207740:	fd8499e3          	bne	s1,s8,80207712 <consoleread+0x36>
      readbuf[i] = c;
    80207744:	4729                	li	a4,10
    80207746:	f9040793          	addi	a5,s0,-112
    8020774a:	97d2                	add	a5,a5,s4
    8020774c:	f0e78023          	sb	a4,-256(a5)
      consputc(c);
    80207750:	855e                	mv	a0,s7
    80207752:	00001097          	auipc	ra,0x1
    80207756:	dc2080e7          	jalr	-574(ra) # 80208514 <consputc>
        interp = 1;
    8020775a:	4485                	li	s1,1
        break;
      }
    }
    if(either_copyout(user_dst,addr,readbuf,i)<0){
    8020775c:	86d2                	mv	a3,s4
    8020775e:	e9040613          	addi	a2,s0,-368
    80207762:	85ea                	mv	a1,s10
    80207764:	e8843503          	ld	a0,-376(s0)
    80207768:	00003097          	auipc	ra,0x3
    8020776c:	6fe080e7          	jalr	1790(ra) # 8020ae66 <either_copyout>
    80207770:	04054063          	bltz	a0,802077b0 <consoleread+0xd4>
      return ret;
    }
    n -= i;
    80207774:	414c8cbb          	subw	s9,s9,s4
    ret += i;
    80207778:	014d8dbb          	addw	s11,s11,s4
    addr += i;
    8020777c:	9d52                	add	s10,s10,s4
  while(n&&!interp){
    8020777e:	020c8963          	beqz	s9,802077b0 <consoleread+0xd4>
    80207782:	e49d                	bnez	s1,802077b0 <consoleread+0xd4>
    int len = MIN(n,CONSOLE_BUF_LEN);
    80207784:	8b66                	mv	s6,s9
    80207786:	10000793          	li	a5,256
    8020778a:	0197d463          	bge	a5,s9,80207792 <consoleread+0xb6>
    8020778e:	10000b13          	li	s6,256
    80207792:	2b01                	sext.w	s6,s6
    for(i=0;i<len;i++){
    80207794:	01905863          	blez	s9,802077a4 <consoleread+0xc8>
    80207798:	e9040a93          	addi	s5,s0,-368
    8020779c:	8a4a                	mv	s4,s2
    8020779e:	b779                	j	8020772c <consoleread+0x50>
    802077a0:	84ca                	mv	s1,s2
    802077a2:	bf6d                	j	8020775c <consoleread+0x80>
    802077a4:	8a4a                	mv	s4,s2
    802077a6:	84ca                	mv	s1,s2
    802077a8:	bf55                	j	8020775c <consoleread+0x80>
        interp = 1;
    802077aa:	4485                	li	s1,1
    802077ac:	bf45                	j	8020775c <consoleread+0x80>
  int ret = 0;
    802077ae:	8db2                	mv	s11,a2
  }
  return ret;
}
    802077b0:	856e                	mv	a0,s11
    802077b2:	70f6                	ld	ra,376(sp)
    802077b4:	7456                	ld	s0,368(sp)
    802077b6:	74b6                	ld	s1,360(sp)
    802077b8:	7916                	ld	s2,352(sp)
    802077ba:	69f6                	ld	s3,344(sp)
    802077bc:	6a56                	ld	s4,336(sp)
    802077be:	6ab6                	ld	s5,328(sp)
    802077c0:	6b16                	ld	s6,320(sp)
    802077c2:	7bf2                	ld	s7,312(sp)
    802077c4:	7c52                	ld	s8,304(sp)
    802077c6:	7cb2                	ld	s9,296(sp)
    802077c8:	7d12                	ld	s10,288(sp)
    802077ca:	6df2                	ld	s11,280(sp)
    802077cc:	6119                	addi	sp,sp,384
    802077ce:	8082                	ret

00000000802077d0 <consolewrite>:

int
consolewrite(int user_dst,uint64 addr,int n){
    802077d0:	710d                	addi	sp,sp,-352
    802077d2:	ee86                	sd	ra,344(sp)
    802077d4:	eaa2                	sd	s0,336(sp)
    802077d6:	e6a6                	sd	s1,328(sp)
    802077d8:	e2ca                	sd	s2,320(sp)
    802077da:	fe4e                	sd	s3,312(sp)
    802077dc:	fa52                	sd	s4,304(sp)
    802077de:	f656                	sd	s5,296(sp)
    802077e0:	f25a                	sd	s6,288(sp)
    802077e2:	ee5e                	sd	s7,280(sp)
    802077e4:	ea62                	sd	s8,272(sp)
    802077e6:	e666                	sd	s9,264(sp)
    802077e8:	e26a                	sd	s10,256(sp)
    802077ea:	1280                	addi	s0,sp,352
    802077ec:	8a32                	mv	s4,a2
  char writebuf[CONSOLE_BUF_LEN];
  int ret = 0;
  while(n){
    802077ee:	c22d                	beqz	a2,80207850 <consolewrite+0x80>
    802077f0:	8baa                	mv	s7,a0
    802077f2:	8aae                	mv	s5,a1
  int ret = 0;
    802077f4:	4b01                	li	s6,0
    int len = MIN(n,CONSOLE_BUF_LEN);
    802077f6:	10000c13          	li	s8,256
    802077fa:	10000d13          	li	s10,256
    if(either_copyin(user_dst,writebuf,addr,len)<0){
      return ret;
    }
    for(int i=0;i<len;i++){
    802077fe:	4c81                	li	s9,0
    80207800:	a099                	j	80207846 <consolewrite+0x76>
    int len = MIN(n,CONSOLE_BUF_LEN);
    80207802:	2981                	sext.w	s3,s3
    if(either_copyin(user_dst,writebuf,addr,len)<0){
    80207804:	86ce                	mv	a3,s3
    80207806:	8656                	mv	a2,s5
    80207808:	ea040593          	addi	a1,s0,-352
    8020780c:	855e                	mv	a0,s7
    8020780e:	00003097          	auipc	ra,0x3
    80207812:	6ae080e7          	jalr	1710(ra) # 8020aebc <either_copyin>
    80207816:	02054e63          	bltz	a0,80207852 <consolewrite+0x82>
    for(int i=0;i<len;i++){
    8020781a:	01405f63          	blez	s4,80207838 <consolewrite+0x68>
    8020781e:	ea040913          	addi	s2,s0,-352
    80207822:	84e6                	mv	s1,s9
      consputc(writebuf[i]);
    80207824:	00094503          	lbu	a0,0(s2) # 1b000 <_entry-0x801e5000>
    80207828:	00001097          	auipc	ra,0x1
    8020782c:	cec080e7          	jalr	-788(ra) # 80208514 <consputc>
    for(int i=0;i<len;i++){
    80207830:	2485                	addiw	s1,s1,1
    80207832:	0905                	addi	s2,s2,1
    80207834:	ff34c8e3          	blt	s1,s3,80207824 <consolewrite+0x54>
    }
    n -= len;
    80207838:	413a0a3b          	subw	s4,s4,s3
    ret += len;
    8020783c:	01698b3b          	addw	s6,s3,s6
    addr += len;
    80207840:	9ace                	add	s5,s5,s3
  while(n){
    80207842:	000a0863          	beqz	s4,80207852 <consolewrite+0x82>
    int len = MIN(n,CONSOLE_BUF_LEN);
    80207846:	89d2                	mv	s3,s4
    80207848:	fb4c5de3          	bge	s8,s4,80207802 <consolewrite+0x32>
    8020784c:	89ea                	mv	s3,s10
    8020784e:	bf55                	j	80207802 <consolewrite+0x32>
  int ret = 0;
    80207850:	8b32                	mv	s6,a2
  }
  return ret;
}
    80207852:	855a                	mv	a0,s6
    80207854:	60f6                	ld	ra,344(sp)
    80207856:	6456                	ld	s0,336(sp)
    80207858:	64b6                	ld	s1,328(sp)
    8020785a:	6916                	ld	s2,320(sp)
    8020785c:	79f2                	ld	s3,312(sp)
    8020785e:	7a52                	ld	s4,304(sp)
    80207860:	7ab2                	ld	s5,296(sp)
    80207862:	7b12                	ld	s6,288(sp)
    80207864:	6bf2                	ld	s7,280(sp)
    80207866:	6c52                	ld	s8,272(sp)
    80207868:	6cb2                	ld	s9,264(sp)
    8020786a:	6d12                	ld	s10,256(sp)
    8020786c:	6135                	addi	sp,sp,352
    8020786e:	8082                	ret

0000000080207870 <loadfile>:
{
    80207870:	715d                	addi	sp,sp,-80
    80207872:	e486                	sd	ra,72(sp)
    80207874:	e0a2                	sd	s0,64(sp)
    80207876:	fc26                	sd	s1,56(sp)
    80207878:	f84a                	sd	s2,48(sp)
    8020787a:	f44e                	sd	s3,40(sp)
    8020787c:	f052                	sd	s4,32(sp)
    8020787e:	ec56                	sd	s5,24(sp)
    80207880:	0880                	addi	s0,sp,80
    80207882:	892a                	mv	s2,a0
    80207884:	8aae                	mv	s5,a1
    80207886:	8a32                	mv	s4,a2
    80207888:	89b6                	mv	s3,a3
  struct dirent* ep = ename(NULL, name, NULL);
    8020788a:	4601                	li	a2,0
    8020788c:	85aa                	mv	a1,a0
    8020788e:	4501                	li	a0,0
    80207890:	ffffd097          	auipc	ra,0xffffd
    80207894:	b24080e7          	jalr	-1244(ra) # 802043b4 <ename>
    80207898:	84aa                	mv	s1,a0
  if(ep){
    8020789a:	cd09                	beqz	a0,802078b4 <loadfile+0x44>
  if(!need)eput(ep);
    8020789c:	04098963          	beqz	s3,802078ee <loadfile+0x7e>
}
    802078a0:	8526                	mv	a0,s1
    802078a2:	60a6                	ld	ra,72(sp)
    802078a4:	6406                	ld	s0,64(sp)
    802078a6:	74e2                	ld	s1,56(sp)
    802078a8:	7942                	ld	s2,48(sp)
    802078aa:	79a2                	ld	s3,40(sp)
    802078ac:	7a02                	ld	s4,32(sp)
    802078ae:	6ae2                	ld	s5,24(sp)
    802078b0:	6161                	addi	sp,sp,80
    802078b2:	8082                	ret
  ep = create(NULL, name, T_FILE, 0, &err);
    802078b4:	fbc40713          	addi	a4,s0,-68
    802078b8:	4681                	li	a3,0
    802078ba:	4609                	li	a2,2
    802078bc:	85ca                	mv	a1,s2
    802078be:	4501                	li	a0,0
    802078c0:	ffffd097          	auipc	ra,0xffffd
    802078c4:	bf6080e7          	jalr	-1034(ra) # 802044b6 <create>
    802078c8:	84aa                	mv	s1,a0
  if(size)ewrite(ep, 0, (uint64)start, 0, size);
    802078ca:	000a1863          	bnez	s4,802078da <loadfile+0x6a>
  eunlock(ep);
    802078ce:	8526                	mv	a0,s1
    802078d0:	ffffc097          	auipc	ra,0xffffc
    802078d4:	0d8080e7          	jalr	216(ra) # 802039a8 <eunlock>
    802078d8:	b7d1                	j	8020789c <loadfile+0x2c>
  if(size)ewrite(ep, 0, (uint64)start, 0, size);
    802078da:	000a071b          	sext.w	a4,s4
    802078de:	4681                	li	a3,0
    802078e0:	8656                	mv	a2,s5
    802078e2:	4581                	li	a1,0
    802078e4:	ffffb097          	auipc	ra,0xffffb
    802078e8:	7c4080e7          	jalr	1988(ra) # 802030a8 <ewrite>
    802078ec:	b7cd                	j	802078ce <loadfile+0x5e>
  if(!need)eput(ep);
    802078ee:	8526                	mv	a0,s1
    802078f0:	ffffc097          	auipc	ra,0xffffc
    802078f4:	106080e7          	jalr	262(ra) # 802039f6 <eput>
  return ep;
    802078f8:	b765                	j	802078a0 <loadfile+0x30>

00000000802078fa <getdevnum>:
int getdevnum(){
    802078fa:	1141                	addi	sp,sp,-16
    802078fc:	e422                	sd	s0,8(sp)
    802078fe:	0800                	addi	s0,sp,16
}
    80207900:	00864517          	auipc	a0,0x864
    80207904:	5a052503          	lw	a0,1440(a0) # 80a6bea0 <devnum>
    80207908:	6422                	ld	s0,8(sp)
    8020790a:	0141                	addi	sp,sp,16
    8020790c:	8082                	ret

000000008020790e <allocdev>:
allocdev(char* name,int (*devread)(int, uint64, int),int (*devwrite)(int, uint64, int)){
    8020790e:	7139                	addi	sp,sp,-64
    80207910:	fc06                	sd	ra,56(sp)
    80207912:	f822                	sd	s0,48(sp)
    80207914:	f426                	sd	s1,40(sp)
    80207916:	f04a                	sd	s2,32(sp)
    80207918:	ec4e                	sd	s3,24(sp)
    8020791a:	e852                	sd	s4,16(sp)
    8020791c:	e456                	sd	s5,8(sp)
    8020791e:	0080                	addi	s0,sp,64
    80207920:	8aaa                	mv	s5,a0
  if(devnum == NDEV){
    80207922:	00864517          	auipc	a0,0x864
    80207926:	57e52503          	lw	a0,1406(a0) # 80a6bea0 <devnum>
    8020792a:	47a9                	li	a5,10
    8020792c:	06f50e63          	beq	a0,a5,802079a8 <allocdev+0x9a>
    80207930:	8a2e                	mv	s4,a1
    80207932:	8932                	mv	s2,a2
  strncpy(devsw[devnum].name,name,DEV_NAME_MAX+1);
    80207934:	00864497          	auipc	s1,0x864
    80207938:	32c48493          	addi	s1,s1,812 # 80a6bc60 <devsw>
    8020793c:	00351793          	slli	a5,a0,0x3
    80207940:	8f89                	sub	a5,a5,a0
    80207942:	078e                	slli	a5,a5,0x3
    80207944:	4635                	li	a2,13
    80207946:	85d6                	mv	a1,s5
    80207948:	00f48533          	add	a0,s1,a5
    8020794c:	ffff9097          	auipc	ra,0xffff9
    80207950:	540080e7          	jalr	1344(ra) # 80200e8c <strncpy>
  initlock(&devsw[devnum].lk,name);
    80207954:	00864997          	auipc	s3,0x864
    80207958:	54c98993          	addi	s3,s3,1356 # 80a6bea0 <devnum>
    8020795c:	0009a503          	lw	a0,0(s3)
    80207960:	00351793          	slli	a5,a0,0x3
    80207964:	8f89                	sub	a5,a5,a0
    80207966:	078e                	slli	a5,a5,0x3
    80207968:	07c1                	addi	a5,a5,16
    8020796a:	85d6                	mv	a1,s5
    8020796c:	00f48533          	add	a0,s1,a5
    80207970:	00001097          	auipc	ra,0x1
    80207974:	9c2080e7          	jalr	-1598(ra) # 80208332 <initlock>
  devsw[devnum].read = devread;
    80207978:	0009a783          	lw	a5,0(s3)
    8020797c:	00379713          	slli	a4,a5,0x3
    80207980:	8f1d                	sub	a4,a4,a5
    80207982:	070e                	slli	a4,a4,0x3
    80207984:	94ba                	add	s1,s1,a4
    80207986:	0344b423          	sd	s4,40(s1)
  devsw[devnum].write = devwrite;
    8020798a:	0324b823          	sd	s2,48(s1)
  devnum++;
    8020798e:	2785                	addiw	a5,a5,1
    80207990:	00f9a023          	sw	a5,0(s3)
  return 0;
    80207994:	4501                	li	a0,0
}
    80207996:	70e2                	ld	ra,56(sp)
    80207998:	7442                	ld	s0,48(sp)
    8020799a:	74a2                	ld	s1,40(sp)
    8020799c:	7902                	ld	s2,32(sp)
    8020799e:	69e2                	ld	s3,24(sp)
    802079a0:	6a42                	ld	s4,16(sp)
    802079a2:	6aa2                	ld	s5,8(sp)
    802079a4:	6121                	addi	sp,sp,64
    802079a6:	8082                	ret
    __debug_warn("[dev]no more space for device\n");
    802079a8:	0000b517          	auipc	a0,0xb
    802079ac:	c3050513          	addi	a0,a0,-976 # 802125d8 <rodata_start+0x5d8>
    802079b0:	00001097          	auipc	ra,0x1
    802079b4:	10c080e7          	jalr	268(ra) # 80208abc <__debug_warn>
    return -1;
    802079b8:	557d                	li	a0,-1
    802079ba:	bff1                	j	80207996 <allocdev+0x88>

00000000802079bc <devinit>:
{
    802079bc:	1101                	addi	sp,sp,-32
    802079be:	ec06                	sd	ra,24(sp)
    802079c0:	e822                	sd	s0,16(sp)
    802079c2:	1000                	addi	s0,sp,32
  int err = 0;
    802079c4:	fe042623          	sw	zero,-20(s0)
  devnum = 0;
    802079c8:	00864797          	auipc	a5,0x864
    802079cc:	4c07ac23          	sw	zero,1240(a5) # 80a6bea0 <devnum>
  dev = create(NULL,"/dev",T_DIR,0, &err);
    802079d0:	fec40713          	addi	a4,s0,-20
    802079d4:	4681                	li	a3,0
    802079d6:	4605                	li	a2,1
    802079d8:	0000b597          	auipc	a1,0xb
    802079dc:	c2058593          	addi	a1,a1,-992 # 802125f8 <rodata_start+0x5f8>
    802079e0:	4501                	li	a0,0
    802079e2:	ffffd097          	auipc	ra,0xffffd
    802079e6:	ad4080e7          	jalr	-1324(ra) # 802044b6 <create>
    802079ea:	00864797          	auipc	a5,0x864
    802079ee:	4aa7bf23          	sd	a0,1214(a5) # 80a6bea8 <dev>
  eunlock(dev);
    802079f2:	ffffc097          	auipc	ra,0xffffc
    802079f6:	fb6080e7          	jalr	-74(ra) # 802039a8 <eunlock>
  loadfile("/etc/passwd", 0, 0, 0);
    802079fa:	4681                	li	a3,0
    802079fc:	4601                	li	a2,0
    802079fe:	4581                	li	a1,0
    80207a00:	0000b517          	auipc	a0,0xb
    80207a04:	c0050513          	addi	a0,a0,-1024 # 80212600 <rodata_start+0x600>
    80207a08:	00000097          	auipc	ra,0x0
    80207a0c:	e68080e7          	jalr	-408(ra) # 80207870 <loadfile>
  loadfile("/etc/adjtime", 0, 0, 0);
    80207a10:	4681                	li	a3,0
    80207a12:	4601                	li	a2,0
    80207a14:	4581                	li	a1,0
    80207a16:	0000b517          	auipc	a0,0xb
    80207a1a:	bfa50513          	addi	a0,a0,-1030 # 80212610 <rodata_start+0x610>
    80207a1e:	00000097          	auipc	ra,0x0
    80207a22:	e52080e7          	jalr	-430(ra) # 80207870 <loadfile>
  loadfile("/etc/group", 0, 0, 0);
    80207a26:	4681                	li	a3,0
    80207a28:	4601                	li	a2,0
    80207a2a:	4581                	li	a1,0
    80207a2c:	0000b517          	auipc	a0,0xb
    80207a30:	bf450513          	addi	a0,a0,-1036 # 80212620 <rodata_start+0x620>
    80207a34:	00000097          	auipc	ra,0x0
    80207a38:	e3c080e7          	jalr	-452(ra) # 80207870 <loadfile>
  loadfile("/bin/ls", 0, 0, 0);
    80207a3c:	4681                	li	a3,0
    80207a3e:	4601                	li	a2,0
    80207a40:	4581                	li	a1,0
    80207a42:	0000b517          	auipc	a0,0xb
    80207a46:	bee50513          	addi	a0,a0,-1042 # 80212630 <rodata_start+0x630>
    80207a4a:	00000097          	auipc	ra,0x0
    80207a4e:	e26080e7          	jalr	-474(ra) # 80207870 <loadfile>
  loadfile("/etc/localtime", localtime, localtime_size, 0);
    80207a52:	4681                	li	a3,0
    80207a54:	fffff617          	auipc	a2,0xfffff
    80207a58:	5f563603          	ld	a2,1525(a2) # 80207049 <localtime_size>
    80207a5c:	fffff597          	auipc	a1,0xfffff
    80207a60:	ad958593          	addi	a1,a1,-1319 # 80206535 <localtime>
    80207a64:	0000b517          	auipc	a0,0xb
    80207a68:	bd450513          	addi	a0,a0,-1068 # 80212638 <rodata_start+0x638>
    80207a6c:	00000097          	auipc	ra,0x0
    80207a70:	e04080e7          	jalr	-508(ra) # 80207870 <loadfile>
  loadfile("/proc/mounts", mounts, mounts_size, 0);
    80207a74:	4681                	li	a3,0
    80207a76:	fffff617          	auipc	a2,0xfffff
    80207a7a:	60763603          	ld	a2,1543(a2) # 8020707d <mounts_size>
    80207a7e:	fffff597          	auipc	a1,0xfffff
    80207a82:	5cf58593          	addi	a1,a1,1487 # 8020704d <mounts>
    80207a86:	0000b517          	auipc	a0,0xb
    80207a8a:	bc250513          	addi	a0,a0,-1086 # 80212648 <rodata_start+0x648>
    80207a8e:	00000097          	auipc	ra,0x0
    80207a92:	de2080e7          	jalr	-542(ra) # 80207870 <loadfile>
  loadfile("/proc/meminfo", meminfo, meminfo_size, 0);
    80207a96:	4681                	li	a3,0
    80207a98:	00000617          	auipc	a2,0x0
    80207a9c:	b7263603          	ld	a2,-1166(a2) # 8020760a <meminfo_size>
    80207aa0:	fffff597          	auipc	a1,0xfffff
    80207aa4:	5e158593          	addi	a1,a1,1505 # 80207081 <meminfo>
    80207aa8:	0000b517          	auipc	a0,0xb
    80207aac:	bb050513          	addi	a0,a0,-1104 # 80212658 <rodata_start+0x658>
    80207ab0:	00000097          	auipc	ra,0x0
    80207ab4:	dc0080e7          	jalr	-576(ra) # 80207870 <loadfile>
  loadfile("/mytest.sh", sacrifice_start, sacrifice_size, 0);
    80207ab8:	4681                	li	a3,0
    80207aba:	fffff617          	auipc	a2,0xfffff
    80207abe:	a7763603          	ld	a2,-1417(a2) # 80206531 <sacrifice_size>
    80207ac2:	ffffe597          	auipc	a1,0xffffe
    80207ac6:	50e58593          	addi	a1,a1,1294 # 80205fd0 <sacrifice_start>
    80207aca:	0000b517          	auipc	a0,0xb
    80207ace:	b9e50513          	addi	a0,a0,-1122 # 80212668 <rodata_start+0x668>
    80207ad2:	00000097          	auipc	ra,0x0
    80207ad6:	d9e080e7          	jalr	-610(ra) # 80207870 <loadfile>
  loadfile("/lat_sig", lat_sig, lat_sig_size, 0);
    80207ada:	4681                	li	a3,0
    80207adc:	00000617          	auipc	a2,0x0
    80207ae0:	b4b63603          	ld	a2,-1205(a2) # 80207627 <lat_sig_size>
    80207ae4:	00000597          	auipc	a1,0x0
    80207ae8:	b2a58593          	addi	a1,a1,-1238 # 8020760e <lat_sig>
    80207aec:	0000b517          	auipc	a0,0xb
    80207af0:	b8c50513          	addi	a0,a0,-1140 # 80212678 <rodata_start+0x678>
    80207af4:	00000097          	auipc	ra,0x0
    80207af8:	d7c080e7          	jalr	-644(ra) # 80207870 <loadfile>
  loadfile("/tmp/hello", hello, hello_size, 0);
    80207afc:	4681                	li	a3,0
    80207afe:	00000617          	auipc	a2,0x0
    80207b02:	b4463603          	ld	a2,-1212(a2) # 80207642 <hello_size>
    80207b06:	00000597          	auipc	a1,0x0
    80207b0a:	b2558593          	addi	a1,a1,-1243 # 8020762b <hello>
    80207b0e:	0000b517          	auipc	a0,0xb
    80207b12:	b7a50513          	addi	a0,a0,-1158 # 80212688 <rodata_start+0x688>
    80207b16:	00000097          	auipc	ra,0x0
    80207b1a:	d5a080e7          	jalr	-678(ra) # 80207870 <loadfile>
  loadfile("/bin/sh", sh, sh_size, 0);
    80207b1e:	4681                	li	a3,0
    80207b20:	00000617          	auipc	a2,0x0
    80207b24:	b3463603          	ld	a2,-1228(a2) # 80207654 <sh_size>
    80207b28:	00000597          	auipc	a1,0x0
    80207b2c:	b1e58593          	addi	a1,a1,-1250 # 80207646 <sh>
    80207b30:	0000b517          	auipc	a0,0xb
    80207b34:	b6850513          	addi	a0,a0,-1176 # 80212698 <rodata_start+0x698>
    80207b38:	00000097          	auipc	ra,0x0
    80207b3c:	d38080e7          	jalr	-712(ra) # 80207870 <loadfile>
  selfexe = loadfile("/proc/self/exe", 0, 0, 1);
    80207b40:	4685                	li	a3,1
    80207b42:	4601                	li	a2,0
    80207b44:	4581                	li	a1,0
    80207b46:	0000b517          	auipc	a0,0xb
    80207b4a:	b5a50513          	addi	a0,a0,-1190 # 802126a0 <rodata_start+0x6a0>
    80207b4e:	00000097          	auipc	ra,0x0
    80207b52:	d22080e7          	jalr	-734(ra) # 80207870 <loadfile>
    80207b56:	00864797          	auipc	a5,0x864
    80207b5a:	34a7b123          	sd	a0,834(a5) # 80a6be98 <selfexe>
  __debug_info("devinit\n");
    80207b5e:	0000b517          	auipc	a0,0xb
    80207b62:	b5250513          	addi	a0,a0,-1198 # 802126b0 <rodata_start+0x6b0>
    80207b66:	00001097          	auipc	ra,0x1
    80207b6a:	d90080e7          	jalr	-624(ra) # 802088f6 <__debug_info>
  memset(devsw,0,NDEV*sizeof(struct devsw));
    80207b6e:	23000613          	li	a2,560
    80207b72:	4581                	li	a1,0
    80207b74:	00864517          	auipc	a0,0x864
    80207b78:	0ec50513          	addi	a0,a0,236 # 80a6bc60 <devsw>
    80207b7c:	ffff9097          	auipc	ra,0xffff9
    80207b80:	1f8080e7          	jalr	504(ra) # 80200d74 <memset>
  allocdev("console",consoleread,consolewrite);
    80207b84:	00000617          	auipc	a2,0x0
    80207b88:	c4c60613          	addi	a2,a2,-948 # 802077d0 <consolewrite>
    80207b8c:	00000597          	auipc	a1,0x0
    80207b90:	b5058593          	addi	a1,a1,-1200 # 802076dc <consoleread>
    80207b94:	0000b517          	auipc	a0,0xb
    80207b98:	b2c50513          	addi	a0,a0,-1236 # 802126c0 <rodata_start+0x6c0>
    80207b9c:	00000097          	auipc	ra,0x0
    80207ba0:	d72080e7          	jalr	-654(ra) # 8020790e <allocdev>
  allocdev("tty",consoleread,consolewrite);
    80207ba4:	00000617          	auipc	a2,0x0
    80207ba8:	c2c60613          	addi	a2,a2,-980 # 802077d0 <consolewrite>
    80207bac:	00000597          	auipc	a1,0x0
    80207bb0:	b3058593          	addi	a1,a1,-1232 # 802076dc <consoleread>
    80207bb4:	0000b517          	auipc	a0,0xb
    80207bb8:	b1450513          	addi	a0,a0,-1260 # 802126c8 <rodata_start+0x6c8>
    80207bbc:	00000097          	auipc	ra,0x0
    80207bc0:	d52080e7          	jalr	-686(ra) # 8020790e <allocdev>
  allocdev("null",nullread,nullwrite);
    80207bc4:	00000617          	auipc	a2,0x0
    80207bc8:	ac860613          	addi	a2,a2,-1336 # 8020768c <nullwrite>
    80207bcc:	00000597          	auipc	a1,0x0
    80207bd0:	ab258593          	addi	a1,a1,-1358 # 8020767e <nullread>
    80207bd4:	0000b517          	auipc	a0,0xb
    80207bd8:	afc50513          	addi	a0,a0,-1284 # 802126d0 <rodata_start+0x6d0>
    80207bdc:	00000097          	auipc	ra,0x0
    80207be0:	d32080e7          	jalr	-718(ra) # 8020790e <allocdev>
  allocdev("zero",zeroread,zerowrite);
    80207be4:	00000617          	auipc	a2,0x0
    80207be8:	ab660613          	addi	a2,a2,-1354 # 8020769a <zerowrite>
    80207bec:	00000597          	auipc	a1,0x0
    80207bf0:	abc58593          	addi	a1,a1,-1348 # 802076a8 <zeroread>
    80207bf4:	0000b517          	auipc	a0,0xb
    80207bf8:	ae450513          	addi	a0,a0,-1308 # 802126d8 <rodata_start+0x6d8>
    80207bfc:	00000097          	auipc	ra,0x0
    80207c00:	d12080e7          	jalr	-750(ra) # 8020790e <allocdev>
  allocdev("rtc",rtcread,rtcwrite);
    80207c04:	00000617          	auipc	a2,0x0
    80207c08:	a6c60613          	addi	a2,a2,-1428 # 80207670 <rtcwrite>
    80207c0c:	00000597          	auipc	a1,0x0
    80207c10:	a5658593          	addi	a1,a1,-1450 # 80207662 <rtcread>
    80207c14:	0000b517          	auipc	a0,0xb
    80207c18:	acc50513          	addi	a0,a0,-1332 # 802126e0 <rodata_start+0x6e0>
    80207c1c:	00000097          	auipc	ra,0x0
    80207c20:	cf2080e7          	jalr	-782(ra) # 8020790e <allocdev>
}
    80207c24:	4501                	li	a0,0
    80207c26:	60e2                	ld	ra,24(sp)
    80207c28:	6442                	ld	s0,16(sp)
    80207c2a:	6105                	addi	sp,sp,32
    80207c2c:	8082                	ret

0000000080207c2e <devlookup>:
{
    80207c2e:	7179                	addi	sp,sp,-48
    80207c30:	f406                	sd	ra,40(sp)
    80207c32:	f022                	sd	s0,32(sp)
    80207c34:	ec26                	sd	s1,24(sp)
    80207c36:	e84a                	sd	s2,16(sp)
    80207c38:	e44e                	sd	s3,8(sp)
    80207c3a:	e052                	sd	s4,0(sp)
    80207c3c:	1800                	addi	s0,sp,48
    80207c3e:	89aa                	mv	s3,a0
  for(int i = 0;i < NDEV;i++){
    80207c40:	00864917          	auipc	s2,0x864
    80207c44:	02090913          	addi	s2,s2,32 # 80a6bc60 <devsw>
    80207c48:	4481                	li	s1,0
    80207c4a:	4a29                	li	s4,10
    if(strncmp(name,devsw[i].name,DEV_NAME_MAX+1)==0){
    80207c4c:	4635                	li	a2,13
    80207c4e:	85ca                	mv	a1,s2
    80207c50:	854e                	mv	a0,s3
    80207c52:	ffff9097          	auipc	ra,0xffff9
    80207c56:	1fe080e7          	jalr	510(ra) # 80200e50 <strncmp>
    80207c5a:	c519                	beqz	a0,80207c68 <devlookup+0x3a>
  for(int i = 0;i < NDEV;i++){
    80207c5c:	2485                	addiw	s1,s1,1
    80207c5e:	03890913          	addi	s2,s2,56
    80207c62:	ff4495e3          	bne	s1,s4,80207c4c <devlookup+0x1e>
  return -1;
    80207c66:	54fd                	li	s1,-1
}
    80207c68:	8526                	mv	a0,s1
    80207c6a:	70a2                	ld	ra,40(sp)
    80207c6c:	7402                	ld	s0,32(sp)
    80207c6e:	64e2                	ld	s1,24(sp)
    80207c70:	6942                	ld	s2,16(sp)
    80207c72:	69a2                	ld	s3,8(sp)
    80207c74:	6a02                	ld	s4,0(sp)
    80207c76:	6145                	addi	sp,sp,48
    80207c78:	8082                	ret

0000000080207c7a <getrandom>:

char
getrandom(){
    80207c7a:	1141                	addi	sp,sp,-16
    80207c7c:	e422                	sd	s0,8(sp)
    80207c7e:	0800                	addi	s0,sp,16
  randomseed++;
    80207c80:	00864797          	auipc	a5,0x864
    80207c84:	21078793          	addi	a5,a5,528 # 80a6be90 <randomseed>
    80207c88:	6388                	ld	a0,0(a5)
    80207c8a:	0505                	addi	a0,a0,1
    80207c8c:	e388                	sd	a0,0(a5)
  return randomseed*0x1938e1%0x100;
    80207c8e:	0055179b          	slliw	a5,a0,0x5
    80207c92:	9d1d                	subw	a0,a0,a5
}
    80207c94:	0ff57513          	andi	a0,a0,255
    80207c98:	6422                	ld	s0,8(sp)
    80207c9a:	0141                	addi	sp,sp,16
    80207c9c:	8082                	ret

0000000080207c9e <urandomread>:

int
urandomread(int user_dst,uint64 addr,int n){
    80207c9e:	7139                	addi	sp,sp,-64
    80207ca0:	fc06                	sd	ra,56(sp)
    80207ca2:	f822                	sd	s0,48(sp)
    80207ca4:	f426                	sd	s1,40(sp)
    80207ca6:	f04a                	sd	s2,32(sp)
    80207ca8:	ec4e                	sd	s3,24(sp)
    80207caa:	e852                	sd	s4,16(sp)
    80207cac:	0080                	addi	s0,sp,64
  int ret = 0;
  while(n){
    80207cae:	ca31                	beqz	a2,80207d02 <urandomread+0x64>
    80207cb0:	8a2a                	mv	s4,a0
    80207cb2:	84ae                	mv	s1,a1
    80207cb4:	fff6099b          	addiw	s3,a2,-1
    80207cb8:	1982                	slli	s3,s3,0x20
    80207cba:	0209d993          	srli	s3,s3,0x20
    80207cbe:	00158793          	addi	a5,a1,1
    80207cc2:	99be                	add	s3,s3,a5
  int ret = 0;
    80207cc4:	4901                	li	s2,0
    char c= getrandom();
    80207cc6:	00000097          	auipc	ra,0x0
    80207cca:	fb4080e7          	jalr	-76(ra) # 80207c7a <getrandom>
    80207cce:	fca407a3          	sb	a0,-49(s0)
    if(either_copyout(user_dst, addr, &c, 1)<0){
    80207cd2:	4685                	li	a3,1
    80207cd4:	fcf40613          	addi	a2,s0,-49
    80207cd8:	85a6                	mv	a1,s1
    80207cda:	8552                	mv	a0,s4
    80207cdc:	00003097          	auipc	ra,0x3
    80207ce0:	18a080e7          	jalr	394(ra) # 8020ae66 <either_copyout>
    80207ce4:	00054663          	bltz	a0,80207cf0 <urandomread+0x52>
      return ret;
    }
    n -= 1;
    ret += 1;
    80207ce8:	2905                	addiw	s2,s2,1
    addr += 1;
    80207cea:	0485                	addi	s1,s1,1
  while(n){
    80207cec:	fd349de3          	bne	s1,s3,80207cc6 <urandomread+0x28>
  }
  return ret;
}
    80207cf0:	854a                	mv	a0,s2
    80207cf2:	70e2                	ld	ra,56(sp)
    80207cf4:	7442                	ld	s0,48(sp)
    80207cf6:	74a2                	ld	s1,40(sp)
    80207cf8:	7902                	ld	s2,32(sp)
    80207cfa:	69e2                	ld	s3,24(sp)
    80207cfc:	6a42                	ld	s4,16(sp)
    80207cfe:	6121                	addi	sp,sp,64
    80207d00:	8082                	ret
  int ret = 0;
    80207d02:	8932                	mv	s2,a2
    80207d04:	b7f5                	j	80207cf0 <urandomread+0x52>

0000000080207d06 <urandomwrite>:

int
urandomwrite(int user_dst,uint64 addr,int n){
    80207d06:	1141                	addi	sp,sp,-16
    80207d08:	e422                	sd	s0,8(sp)
    80207d0a:	0800                	addi	s0,sp,16
  return n;
}
    80207d0c:	8532                	mv	a0,a2
    80207d0e:	6422                	ld	s0,8(sp)
    80207d10:	0141                	addi	sp,sp,16
    80207d12:	8082                	ret

0000000080207d14 <devkstat>:

int 
devkstat(struct devsw* mydev, struct kstat* st){
    80207d14:	1101                	addi	sp,sp,-32
    80207d16:	ec06                	sd	ra,24(sp)
    80207d18:	e822                	sd	s0,16(sp)
    80207d1a:	e426                	sd	s1,8(sp)
    80207d1c:	1000                	addi	s0,sp,32
    80207d1e:	84ae                	mv	s1,a1
    st->st_dev = mydev-devsw;
    80207d20:	00864797          	auipc	a5,0x864
    80207d24:	f4078793          	addi	a5,a5,-192 # 80a6bc60 <devsw>
    80207d28:	40f507b3          	sub	a5,a0,a5
    80207d2c:	878d                	srai	a5,a5,0x3
    80207d2e:	0000d717          	auipc	a4,0xd
    80207d32:	5ca73703          	ld	a4,1482(a4) # 802152f8 <erodata+0x8>
    80207d36:	02e787b3          	mul	a5,a5,a4
    80207d3a:	e19c                	sd	a5,0(a1)
    st->st_size = 0;
    80207d3c:	0205b823          	sd	zero,48(a1)
    st->st_blksize = 128;
    80207d40:	08000793          	li	a5,128
    80207d44:	dd9c                	sw	a5,56(a1)
    st->st_blocks = 0;
    80207d46:	0405b023          	sd	zero,64(a1)
    st->st_atime_nsec = 0;
    80207d4a:	0405b823          	sd	zero,80(a1)
    st->st_atime_sec = 0;
    80207d4e:	0405b423          	sd	zero,72(a1)
    st->st_ctime_nsec = 0;
    80207d52:	0605b823          	sd	zero,112(a1)
    st->st_ctime_sec = 0;
    80207d56:	0605b423          	sd	zero,104(a1)
    st->st_mtime_nsec = 0;
    80207d5a:	0605b023          	sd	zero,96(a1)
    st->st_mtime_sec = 0;
    80207d5e:	0405bc23          	sd	zero,88(a1)
    st->st_uid = 0;
    80207d62:	0005ac23          	sw	zero,24(a1)
    st->st_gid = 0;
    80207d66:	0005ae23          	sw	zero,28(a1)
    st->st_rdev = 0;
    80207d6a:	0205b023          	sd	zero,32(a1)
    st->st_nlink = 1;
    80207d6e:	4785                	li	a5,1
    80207d70:	c9dc                	sw	a5,20(a1)
    st->st_ino = hashpath(mydev->name);
    80207d72:	ffffc097          	auipc	ra,0xffffc
    80207d76:	504080e7          	jalr	1284(ra) # 80204276 <hashpath>
    80207d7a:	e488                	sd	a0,8(s1)
    st->st_mode = S_IFCHR;
    80207d7c:	6789                	lui	a5,0x2
    80207d7e:	c89c                	sw	a5,16(s1)
  return 0;
}
    80207d80:	4501                	li	a0,0
    80207d82:	60e2                	ld	ra,24(sp)
    80207d84:	6442                	ld	s0,16(sp)
    80207d86:	64a2                	ld	s1,8(sp)
    80207d88:	6105                	addi	sp,sp,32
    80207d8a:	8082                	ret

0000000080207d8c <swtch>:
    80207d8c:	00153023          	sd	ra,0(a0)
    80207d90:	00253423          	sd	sp,8(a0)
    80207d94:	e900                	sd	s0,16(a0)
    80207d96:	ed04                	sd	s1,24(a0)
    80207d98:	03253023          	sd	s2,32(a0)
    80207d9c:	03353423          	sd	s3,40(a0)
    80207da0:	03453823          	sd	s4,48(a0)
    80207da4:	03553c23          	sd	s5,56(a0)
    80207da8:	05653023          	sd	s6,64(a0)
    80207dac:	05753423          	sd	s7,72(a0)
    80207db0:	05853823          	sd	s8,80(a0)
    80207db4:	05953c23          	sd	s9,88(a0)
    80207db8:	07a53023          	sd	s10,96(a0)
    80207dbc:	07b53423          	sd	s11,104(a0)
    80207dc0:	0005b083          	ld	ra,0(a1)
    80207dc4:	0085b103          	ld	sp,8(a1)
    80207dc8:	6980                	ld	s0,16(a1)
    80207dca:	6d84                	ld	s1,24(a1)
    80207dcc:	0205b903          	ld	s2,32(a1)
    80207dd0:	0285b983          	ld	s3,40(a1)
    80207dd4:	0305ba03          	ld	s4,48(a1)
    80207dd8:	0385ba83          	ld	s5,56(a1)
    80207ddc:	0405bb03          	ld	s6,64(a1)
    80207de0:	0485bb83          	ld	s7,72(a1)
    80207de4:	0505bc03          	ld	s8,80(a1)
    80207de8:	0585bc83          	ld	s9,88(a1)
    80207dec:	0605bd03          	ld	s10,96(a1)
    80207df0:	0685bd83          	ld	s11,104(a1)
    80207df4:	8082                	ret

0000000080207df6 <send_signal>:
// the list, we must make sure that there's no sigaction for 
// the same signum in the sigaction list. 


void send_signal(int signum)
{
    80207df6:	1101                	addi	sp,sp,-32
    80207df8:	ec06                	sd	ra,24(sp)
    80207dfa:	e822                	sd	s0,16(sp)
    80207dfc:	e426                	sd	s1,8(sp)
    80207dfe:	1000                	addi	s0,sp,32
    80207e00:	84aa                	mv	s1,a0
	struct proc* p = myproc();
    80207e02:	00003097          	auipc	ra,0x3
    80207e06:	64a080e7          	jalr	1610(ra) # 8020b44c <myproc>
	p->killed = signum;
    80207e0a:	dd04                	sw	s1,56(a0)
	p->sig_pending.__val[0] |= 1ul << signum;
    80207e0c:	4785                	li	a5,1
    80207e0e:	009797b3          	sll	a5,a5,s1
    80207e12:	19853483          	ld	s1,408(a0)
    80207e16:	8cdd                	or	s1,s1,a5
    80207e18:	18953c23          	sd	s1,408(a0)
	// sighandle();
}
    80207e1c:	60e2                	ld	ra,24(sp)
    80207e1e:	6442                	ld	s0,16(sp)
    80207e20:	64a2                	ld	s1,8(sp)
    80207e22:	6105                	addi	sp,sp,32
    80207e24:	8082                	ret

0000000080207e26 <set_sigaction>:

int set_sigaction(
	int signum, 
	struct sigaction const *act, 
	struct sigaction *oldact 
) {
    80207e26:	7179                	addi	sp,sp,-48
    80207e28:	f406                	sd	ra,40(sp)
    80207e2a:	f022                	sd	s0,32(sp)
    80207e2c:	ec26                	sd	s1,24(sp)
    80207e2e:	e84a                	sd	s2,16(sp)
    80207e30:	e44e                	sd	s3,8(sp)
    80207e32:	e052                	sd	s4,0(sp)
    80207e34:	1800                	addi	s0,sp,48
    80207e36:	84aa                	mv	s1,a0
    80207e38:	892e                	mv	s2,a1
    80207e3a:	89b2                	mv	s3,a2
	struct proc *p = myproc();
    80207e3c:	00003097          	auipc	ra,0x3
    80207e40:	610080e7          	jalr	1552(ra) # 8020b44c <myproc>
    80207e44:	8a2a                	mv	s4,a0
	ksigaction_t const* tmp = p->sig_act;
    80207e46:	18853783          	ld	a5,392(a0)
	while (NULL != tmp) {
    80207e4a:	c791                	beqz	a5,80207e56 <set_sigaction+0x30>
		if (tmp->signum == signum) {
    80207e4c:	5398                	lw	a4,32(a5)
    80207e4e:	02970563          	beq	a4,s1,80207e78 <set_sigaction+0x52>
		tmp = tmp->next;
    80207e52:	639c                	ld	a5,0(a5)
	while (NULL != tmp) {
    80207e54:	ffe5                	bnez	a5,80207e4c <set_sigaction+0x26>

	ksigaction_t *tmp = __search_sig(p, signum);
	// printf("pid %d search %d find %p\n", p->pid, signum, tmp);

	if (NULL != oldact && NULL != tmp) {
    80207e56:	04098563          	beqz	s3,80207ea0 <set_sigaction+0x7a>
		// for (int i = 0; i < len; i ++) {
		// 	oldact->sa_mask.__val[i] = tmp->sigact.sa_mask.__val[i];
		// }
	}

	if (NULL != act) {
    80207e5a:	02090a63          	beqz	s2,80207e8e <set_sigaction+0x68>
		if (NULL == tmp) {
			// insert a new action into the proc 
			// ksigaction_t *new = kmalloc(sizeof(ksigaction_t));
            		ksigaction_t *new = kmalloc(sizeof(ksigaction_t));
    80207e5e:	02800513          	li	a0,40
    80207e62:	00001097          	auipc	ra,0x1
    80207e66:	5a6080e7          	jalr	1446(ra) # 80209408 <kmalloc>
    80207e6a:	87aa                	mv	a5,a0
	ksig->next = p->sig_act;
    80207e6c:	188a3703          	ld	a4,392(s4)
    80207e70:	e118                	sd	a4,0(a0)
	p->sig_act = ksig;
    80207e72:	18aa3423          	sd	a0,392(s4)
}
    80207e76:	a801                	j	80207e86 <set_sigaction+0x60>
	if (NULL != oldact && NULL != tmp) {
    80207e78:	02098763          	beqz	s3,80207ea6 <set_sigaction+0x80>
		oldact->__sigaction_handler = tmp->sigact.__sigaction_handler;
    80207e7c:	6798                	ld	a4,8(a5)
    80207e7e:	00e9b023          	sd	a4,0(s3)
	if (NULL != act) {
    80207e82:	00090663          	beqz	s2,80207e8e <set_sigaction+0x68>
			__insert_sig(p, new);
			tmp = new;
		}

		// tmp->sigact.sa_flags = act->sa_flags;
		tmp->sigact.__sigaction_handler = act->__sigaction_handler;
    80207e86:	00093703          	ld	a4,0(s2)
    80207e8a:	e798                	sd	a4,8(a5)
		// for (int i = 0; i < len; i ++) {
		// 	tmp->sigact.sa_mask.__val[i] = act->sa_mask.__val[i];
		// }
		tmp->signum = signum;
    80207e8c:	d384                	sw	s1,32(a5)
	}


	return 0;
}
    80207e8e:	4501                	li	a0,0
    80207e90:	70a2                	ld	ra,40(sp)
    80207e92:	7402                	ld	s0,32(sp)
    80207e94:	64e2                	ld	s1,24(sp)
    80207e96:	6942                	ld	s2,16(sp)
    80207e98:	69a2                	ld	s3,8(sp)
    80207e9a:	6a02                	ld	s4,0(sp)
    80207e9c:	6145                	addi	sp,sp,48
    80207e9e:	8082                	ret
	if (NULL != act) {
    80207ea0:	fe0907e3          	beqz	s2,80207e8e <set_sigaction+0x68>
    80207ea4:	bf6d                	j	80207e5e <set_sigaction+0x38>
    80207ea6:	fe0910e3          	bnez	s2,80207e86 <set_sigaction+0x60>
    80207eaa:	b7d5                	j	80207e8e <set_sigaction+0x68>

0000000080207eac <sigprocmask>:

int sigprocmask(
	int how, 
	__sigset_t *set, 
	__sigset_t *oldset
) {
    80207eac:	7179                	addi	sp,sp,-48
    80207eae:	f406                	sd	ra,40(sp)
    80207eb0:	f022                	sd	s0,32(sp)
    80207eb2:	ec26                	sd	s1,24(sp)
    80207eb4:	e84a                	sd	s2,16(sp)
    80207eb6:	e44e                	sd	s3,8(sp)
    80207eb8:	1800                	addi	s0,sp,48
    80207eba:	84aa                	mv	s1,a0
    80207ebc:	89ae                	mv	s3,a1
    80207ebe:	8932                	mv	s2,a2
	struct proc *p = myproc();
    80207ec0:	00003097          	auipc	ra,0x3
    80207ec4:	58c080e7          	jalr	1420(ra) # 8020b44c <myproc>


	for (int i = 0; i < SIGSET_LEN; i ++) {
		if (NULL != oldset) {
    80207ec8:	00090663          	beqz	s2,80207ed4 <sigprocmask+0x28>
			oldset->__val[i] = p->sig_set.__val[i];
    80207ecc:	19053783          	ld	a5,400(a0)
    80207ed0:	00f93023          	sd	a5,0(s2)
		}

		switch (how) {
    80207ed4:	4785                	li	a5,1
    80207ed6:	02f48c63          	beq	s1,a5,80207f0e <sigprocmask+0x62>
    80207eda:	4789                	li	a5,2
    80207edc:	04f48363          	beq	s1,a5,80207f22 <sigprocmask+0x76>
    80207ee0:	cc99                	beqz	s1,80207efe <sigprocmask+0x52>
				// panic("invalid how\n");
		}
	}

	// SIGTERM cannot be masked 
	p->sig_set.__val[0] &= 1ul << SIGTERM;
    80207ee2:	19053783          	ld	a5,400(a0)
    80207ee6:	6721                	lui	a4,0x8
    80207ee8:	8ff9                	and	a5,a5,a4
    80207eea:	18f53823          	sd	a5,400(a0)

	return 0;
}
    80207eee:	4501                	li	a0,0
    80207ef0:	70a2                	ld	ra,40(sp)
    80207ef2:	7402                	ld	s0,32(sp)
    80207ef4:	64e2                	ld	s1,24(sp)
    80207ef6:	6942                	ld	s2,16(sp)
    80207ef8:	69a2                	ld	s3,8(sp)
    80207efa:	6145                	addi	sp,sp,48
    80207efc:	8082                	ret
				p->sig_set.__val[i] |= set->__val[i];
    80207efe:	19053783          	ld	a5,400(a0)
    80207f02:	0009b703          	ld	a4,0(s3)
    80207f06:	8fd9                	or	a5,a5,a4
    80207f08:	18f53823          	sd	a5,400(a0)
				break;
    80207f0c:	bfd9                	j	80207ee2 <sigprocmask+0x36>
				p->sig_set.__val[i] &= ~(set->__val[i]);
    80207f0e:	0009b783          	ld	a5,0(s3)
    80207f12:	fff7c713          	not	a4,a5
    80207f16:	19053783          	ld	a5,400(a0)
    80207f1a:	8ff9                	and	a5,a5,a4
    80207f1c:	18f53823          	sd	a5,400(a0)
				break;
    80207f20:	b7c9                	j	80207ee2 <sigprocmask+0x36>
				p->sig_set.__val[i] = set->__val[i];
    80207f22:	0009b783          	ld	a5,0(s3)
    80207f26:	18f53823          	sd	a5,400(a0)
				break;
    80207f2a:	bf65                	j	80207ee2 <sigprocmask+0x36>

0000000080207f2c <sighandle>:

extern char sig_trampoline[];
extern char sig_handler[];
extern char default_sigaction[];

void sighandle(void) {
    80207f2c:	7179                	addi	sp,sp,-48
    80207f2e:	f406                	sd	ra,40(sp)
    80207f30:	f022                	sd	s0,32(sp)
    80207f32:	ec26                	sd	s1,24(sp)
    80207f34:	e84a                	sd	s2,16(sp)
    80207f36:	e44e                	sd	s3,8(sp)
    80207f38:	e052                	sd	s4,0(sp)
    80207f3a:	1800                	addi	s0,sp,48
	struct proc *p = myproc();
    80207f3c:	00003097          	auipc	ra,0x3
    80207f40:	510080e7          	jalr	1296(ra) # 8020b44c <myproc>

	int signum = 0;
	if (p->killed) {
    80207f44:	03852903          	lw	s2,56(a0)
    80207f48:	10090163          	beqz	s2,8020804a <sighandle+0x11e>
    80207f4c:	89aa                	mv	s3,a0
		signum = p->killed;

		const int len = sizeof(unsigned long) * 8;
		int i = (unsigned long)(p->killed) / len;
    80207f4e:	40695593          	srai	a1,s2,0x6
		int bit = (unsigned long)(p->killed) % len;
    80207f52:	03f97613          	andi	a2,s2,63
		p->sig_pending.__val[i] &= ~(1ul << bit++);
    80207f56:	00160793          	addi	a5,a2,1
    80207f5a:	00359713          	slli	a4,a1,0x3
    80207f5e:	972a                	add	a4,a4,a0
    80207f60:	4685                	li	a3,1
    80207f62:	00c696b3          	sll	a3,a3,a2
    80207f66:	fff6c693          	not	a3,a3
    80207f6a:	19873603          	ld	a2,408(a4) # 8198 <_entry-0x801f7e68>
    80207f6e:	8ef1                	and	a3,a3,a2
    80207f70:	18d73c23          	sd	a3,408(a4)
		p->killed = 0;
    80207f74:	02052c23          	sw	zero,56(a0)

		for (; i < SIGSET_LEN; i ++) {
			while (bit < len) {
    80207f78:	03f00513          	li	a0,63
    80207f7c:	04000613          	li	a2,64
		for (; i < SIGSET_LEN; i ++) {
    80207f80:	4805                	li	a6,1
    80207f82:	02b04463          	bgtz	a1,80207faa <sighandle+0x7e>
			while (bit < len) {
    80207f86:	0cf54a63          	blt	a0,a5,8020805a <sighandle+0x12e>
				if (p->sig_pending.__val[i] & (1ul << bit)) {
    80207f8a:	00f6d733          	srl	a4,a3,a5
    80207f8e:	8b05                	andi	a4,a4,1
    80207f90:	eb01                	bnez	a4,80207fa0 <sighandle+0x74>
					p->killed = i * len + bit; // p->killed
					goto start_handle;
				}
				bit ++;
    80207f92:	2785                	addiw	a5,a5,1
			while (bit < len) {
    80207f94:	0cc78363          	beq	a5,a2,8020805a <sighandle+0x12e>
				if (p->sig_pending.__val[i] & (1ul << bit)) {
    80207f98:	00f6d733          	srl	a4,a3,a5
    80207f9c:	8b05                	andi	a4,a4,1
    80207f9e:	db75                	beqz	a4,80207f92 <sighandle+0x66>
					p->killed = i * len + bit; // p->killed
    80207fa0:	0065959b          	slliw	a1,a1,0x6
    80207fa4:	9fad                	addw	a5,a5,a1
    80207fa6:	02f9ac23          	sw	a5,56(s3)
	ksigaction_t const* tmp = p->sig_act;
    80207faa:	1889b483          	ld	s1,392(s3)
	while (NULL != tmp) {
    80207fae:	12048363          	beqz	s1,802080d4 <sighandle+0x1a8>
		if (tmp->signum == signum) {
    80207fb2:	509c                	lw	a5,32(s1)
    80207fb4:	0b278763          	beq	a5,s2,80208062 <sighandle+0x136>
		tmp = tmp->next;
    80207fb8:	6084                	ld	s1,0(s1)
	while (NULL != tmp) {
    80207fba:	fce5                	bnez	s1,80207fb2 <sighandle+0x86>

	// fast skip 
	// if (NULL == sigact && SIGCHLD == signum) {
	// 	return ;
	// }
	if (SIGCHLD == signum && 
    80207fbc:	47c5                	li	a5,17
    80207fbe:	08f90663          	beq	s2,a5,8020804a <sighandle+0x11e>
		(NULL == sigact || NULL == sigact->sigact.__sigaction_handler.sa_handler)) {
			return;
	}

	frame = kmalloc(sizeof(struct sig_frame));
    80207fc2:	4561                	li	a0,24
    80207fc4:	00001097          	auipc	ra,0x1
    80207fc8:	444080e7          	jalr	1092(ra) # 80209408 <kmalloc>
    80207fcc:	8a2a                	mv	s4,a0
	frame->tf = kmalloc(sizeof(struct trapframe));
    80207fce:	12000513          	li	a0,288
    80207fd2:	00001097          	auipc	ra,0x1
    80207fd6:	436080e7          	jalr	1078(ra) # 80209408 <kmalloc>
    80207fda:	00aa3423          	sd	a0,8(s4)
	// 		p->sig_set.__val[i] &= sigact->sigact.sa_mask.__val[i];
	// 	}
	// }

	// store proc's trapframe 
	*(frame->tf) = *(p->trapframe);
    80207fde:	0689b783          	ld	a5,104(s3)
    80207fe2:	12078813          	addi	a6,a5,288 # 2120 <_entry-0x801fdee0>
    80207fe6:	638c                	ld	a1,0(a5)
    80207fe8:	6790                	ld	a2,8(a5)
    80207fea:	6b94                	ld	a3,16(a5)
    80207fec:	6f98                	ld	a4,24(a5)
    80207fee:	e10c                	sd	a1,0(a0)
    80207ff0:	e510                	sd	a2,8(a0)
    80207ff2:	e914                	sd	a3,16(a0)
    80207ff4:	ed18                	sd	a4,24(a0)
    80207ff6:	02078793          	addi	a5,a5,32
    80207ffa:	02050513          	addi	a0,a0,32
    80207ffe:	ff0794e3          	bne	a5,a6,80207fe6 <sighandle+0xba>
	tf->epc = (uint64)(SIG_TRAMPOLINE + ((uint64)sig_handler - (uint64)sig_trampoline));
    80208002:	00009597          	auipc	a1,0x9
    80208006:	ffe58593          	addi	a1,a1,-2 # 80211000 <_sig_trampoline>
    8020800a:	020007b7          	lui	a5,0x2000
    8020800e:	00009717          	auipc	a4,0x9
    80208012:	ff270713          	addi	a4,a4,-14 # 80211000 <_sig_trampoline>
    80208016:	17fd                	addi	a5,a5,-1
    80208018:	07b6                	slli	a5,a5,0xd
    8020801a:	973e                	add	a4,a4,a5
    8020801c:	8f0d                	sub	a4,a4,a1
	tf->sp = p->trapframe->sp;
    8020801e:	0689b683          	ld	a3,104(s3)
		//__debug_info("do signal_handler\n");
		tf->a1 = (uint64)(sigact->sigact.__sigaction_handler.sa_handler);
	}
	else {
		// use the default handler 
		tf->a1 = (uint64)(SIG_TRAMPOLINE + ((uint64)default_sigaction - (uint64)sig_trampoline));
    80208022:	02000637          	lui	a2,0x2000
    80208026:	00009797          	auipc	a5,0x9
    8020802a:	fe478793          	addi	a5,a5,-28 # 8021100a <default_sigaction>
    8020802e:	167d                	addi	a2,a2,-1
    80208030:	0636                	slli	a2,a2,0xd
    80208032:	97b2                	add	a5,a5,a2
    80208034:	8f8d                	sub	a5,a5,a1
	}
	*(p->trapframe) = *tf;
    80208036:	ee98                	sd	a4,24(a3)
    80208038:	0726b823          	sd	s2,112(a3)
    8020803c:	febc                	sd	a5,120(a3)

	// insert sig_frame into proc's sig_frame list 
	frame->next = p->sig_frame;
    8020803e:	1a09b783          	ld	a5,416(s3)
    80208042:	00fa3823          	sd	a5,16(s4)
	p->sig_frame = frame;
    80208046:	1b49b023          	sd	s4,416(s3)
}
    8020804a:	70a2                	ld	ra,40(sp)
    8020804c:	7402                	ld	s0,32(sp)
    8020804e:	64e2                	ld	s1,24(sp)
    80208050:	6942                	ld	s2,16(sp)
    80208052:	69a2                	ld	s3,8(sp)
    80208054:	6a02                	ld	s4,0(sp)
    80208056:	6145                	addi	sp,sp,48
    80208058:	8082                	ret
		for (; i < SIGSET_LEN; i ++) {
    8020805a:	2585                	addiw	a1,a1,1
    8020805c:	f30595e3          	bne	a1,a6,80207f86 <sighandle+0x5a>
    80208060:	b7a9                	j	80207faa <sighandle+0x7e>
	if (SIGCHLD == signum && 
    80208062:	47c5                	li	a5,17
    80208064:	0cf91d63          	bne	s2,a5,8020813e <sighandle+0x212>
		(NULL == sigact || NULL == sigact->sigact.__sigaction_handler.sa_handler)) {
    80208068:	649c                	ld	a5,8(s1)
    8020806a:	d3e5                	beqz	a5,8020804a <sighandle+0x11e>
	frame = kmalloc(sizeof(struct sig_frame));
    8020806c:	4561                	li	a0,24
    8020806e:	00001097          	auipc	ra,0x1
    80208072:	39a080e7          	jalr	922(ra) # 80209408 <kmalloc>
    80208076:	8a2a                	mv	s4,a0
	frame->tf = kmalloc(sizeof(struct trapframe));
    80208078:	12000513          	li	a0,288
    8020807c:	00001097          	auipc	ra,0x1
    80208080:	38c080e7          	jalr	908(ra) # 80209408 <kmalloc>
    80208084:	87aa                	mv	a5,a0
    80208086:	00aa3423          	sd	a0,8(s4)
	*(frame->tf) = *(p->trapframe);
    8020808a:	0689b703          	ld	a4,104(s3)
    8020808e:	12070813          	addi	a6,a4,288
    80208092:	6308                	ld	a0,0(a4)
    80208094:	670c                	ld	a1,8(a4)
    80208096:	6b10                	ld	a2,16(a4)
    80208098:	6f14                	ld	a3,24(a4)
    8020809a:	e388                	sd	a0,0(a5)
    8020809c:	e78c                	sd	a1,8(a5)
    8020809e:	eb90                	sd	a2,16(a5)
    802080a0:	ef94                	sd	a3,24(a5)
    802080a2:	02070713          	addi	a4,a4,32
    802080a6:	02078793          	addi	a5,a5,32
    802080aa:	ff0714e3          	bne	a4,a6,80208092 <sighandle+0x166>
	tf->epc = (uint64)(SIG_TRAMPOLINE + ((uint64)sig_handler - (uint64)sig_trampoline));
    802080ae:	00009597          	auipc	a1,0x9
    802080b2:	f5258593          	addi	a1,a1,-174 # 80211000 <_sig_trampoline>
    802080b6:	020006b7          	lui	a3,0x2000
    802080ba:	00009717          	auipc	a4,0x9
    802080be:	f4670713          	addi	a4,a4,-186 # 80211000 <_sig_trampoline>
    802080c2:	16fd                	addi	a3,a3,-1
    802080c4:	06b6                	slli	a3,a3,0xd
    802080c6:	9736                	add	a4,a4,a3
    802080c8:	8f0d                	sub	a4,a4,a1
	tf->sp = p->trapframe->sp;
    802080ca:	0689b683          	ld	a3,104(s3)
	if (NULL != sigact && sigact->sigact.__sigaction_handler.sa_handler) {
    802080ce:	649c                	ld	a5,8(s1)
    802080d0:	f3bd                	bnez	a5,80208036 <sighandle+0x10a>
    802080d2:	bf81                	j	80208022 <sighandle+0xf6>
	if (SIGCHLD == signum && 
    802080d4:	47c5                	li	a5,17
    802080d6:	f6f90ae3          	beq	s2,a5,8020804a <sighandle+0x11e>
	frame = kmalloc(sizeof(struct sig_frame));
    802080da:	4561                	li	a0,24
    802080dc:	00001097          	auipc	ra,0x1
    802080e0:	32c080e7          	jalr	812(ra) # 80209408 <kmalloc>
    802080e4:	8a2a                	mv	s4,a0
	frame->tf = kmalloc(sizeof(struct trapframe));
    802080e6:	12000513          	li	a0,288
    802080ea:	00001097          	auipc	ra,0x1
    802080ee:	31e080e7          	jalr	798(ra) # 80209408 <kmalloc>
    802080f2:	87aa                	mv	a5,a0
    802080f4:	00aa3423          	sd	a0,8(s4)
	*(frame->tf) = *(p->trapframe);
    802080f8:	0689b703          	ld	a4,104(s3)
    802080fc:	12070813          	addi	a6,a4,288
    80208100:	6308                	ld	a0,0(a4)
    80208102:	670c                	ld	a1,8(a4)
    80208104:	6b10                	ld	a2,16(a4)
    80208106:	6f14                	ld	a3,24(a4)
    80208108:	e388                	sd	a0,0(a5)
    8020810a:	e78c                	sd	a1,8(a5)
    8020810c:	eb90                	sd	a2,16(a5)
    8020810e:	ef94                	sd	a3,24(a5)
    80208110:	02070713          	addi	a4,a4,32
    80208114:	02078793          	addi	a5,a5,32
    80208118:	ff0714e3          	bne	a4,a6,80208100 <sighandle+0x1d4>
	tf->epc = (uint64)(SIG_TRAMPOLINE + ((uint64)sig_handler - (uint64)sig_trampoline));
    8020811c:	00009597          	auipc	a1,0x9
    80208120:	ee458593          	addi	a1,a1,-284 # 80211000 <_sig_trampoline>
    80208124:	020007b7          	lui	a5,0x2000
    80208128:	00009717          	auipc	a4,0x9
    8020812c:	ed870713          	addi	a4,a4,-296 # 80211000 <_sig_trampoline>
    80208130:	17fd                	addi	a5,a5,-1
    80208132:	07b6                	slli	a5,a5,0xd
    80208134:	973e                	add	a4,a4,a5
    80208136:	8f0d                	sub	a4,a4,a1
	tf->sp = p->trapframe->sp;
    80208138:	0689b683          	ld	a3,104(s3)
	if (NULL != sigact && sigact->sigact.__sigaction_handler.sa_handler) {
    8020813c:	b5dd                	j	80208022 <sighandle+0xf6>
	frame = kmalloc(sizeof(struct sig_frame));
    8020813e:	4561                	li	a0,24
    80208140:	00001097          	auipc	ra,0x1
    80208144:	2c8080e7          	jalr	712(ra) # 80209408 <kmalloc>
    80208148:	8a2a                	mv	s4,a0
	frame->tf = kmalloc(sizeof(struct trapframe));
    8020814a:	12000513          	li	a0,288
    8020814e:	00001097          	auipc	ra,0x1
    80208152:	2ba080e7          	jalr	698(ra) # 80209408 <kmalloc>
    80208156:	87aa                	mv	a5,a0
    80208158:	00aa3423          	sd	a0,8(s4)
	*(frame->tf) = *(p->trapframe);
    8020815c:	0689b703          	ld	a4,104(s3)
    80208160:	12070813          	addi	a6,a4,288
    80208164:	6308                	ld	a0,0(a4)
    80208166:	670c                	ld	a1,8(a4)
    80208168:	6b10                	ld	a2,16(a4)
    8020816a:	6f14                	ld	a3,24(a4)
    8020816c:	e388                	sd	a0,0(a5)
    8020816e:	e78c                	sd	a1,8(a5)
    80208170:	eb90                	sd	a2,16(a5)
    80208172:	ef94                	sd	a3,24(a5)
    80208174:	02070713          	addi	a4,a4,32
    80208178:	02078793          	addi	a5,a5,32 # 2000020 <_entry-0x7e1fffe0>
    8020817c:	ff0714e3          	bne	a4,a6,80208164 <sighandle+0x238>
	tf->epc = (uint64)(SIG_TRAMPOLINE + ((uint64)sig_handler - (uint64)sig_trampoline));
    80208180:	00009597          	auipc	a1,0x9
    80208184:	e8058593          	addi	a1,a1,-384 # 80211000 <_sig_trampoline>
    80208188:	020007b7          	lui	a5,0x2000
    8020818c:	00009717          	auipc	a4,0x9
    80208190:	e7470713          	addi	a4,a4,-396 # 80211000 <_sig_trampoline>
    80208194:	17fd                	addi	a5,a5,-1
    80208196:	07b6                	slli	a5,a5,0xd
    80208198:	973e                	add	a4,a4,a5
    8020819a:	8f0d                	sub	a4,a4,a1
	tf->sp = p->trapframe->sp;
    8020819c:	0689b683          	ld	a3,104(s3)
	if (NULL != sigact && sigact->sigact.__sigaction_handler.sa_handler) {
    802081a0:	b73d                	j	802080ce <sighandle+0x1a2>

00000000802081a2 <sigframefree>:

void sigframefree(struct sig_frame *head) {
	while (NULL != head) {
    802081a2:	c52d                	beqz	a0,8020820c <sigframefree+0x6a>
void sigframefree(struct sig_frame *head) {
    802081a4:	7179                	addi	sp,sp,-48
    802081a6:	f406                	sd	ra,40(sp)
    802081a8:	f022                	sd	s0,32(sp)
    802081aa:	ec26                	sd	s1,24(sp)
    802081ac:	e84a                	sd	s2,16(sp)
    802081ae:	e44e                	sd	s3,8(sp)
    802081b0:	1800                	addi	s0,sp,48
    802081b2:	84aa                	mv	s1,a0
		struct sig_frame *next = head->next;
		if(next == head)
		{
		  __debug_warn("[sigframefree] loop!\n");
    802081b4:	0000a997          	auipc	s3,0xa
    802081b8:	53498993          	addi	s3,s3,1332 # 802126e8 <rodata_start+0x6e8>
    802081bc:	a00d                	j	802081de <sigframefree+0x3c>
    802081be:	854e                	mv	a0,s3
    802081c0:	00001097          	auipc	ra,0x1
    802081c4:	8fc080e7          	jalr	-1796(ra) # 80208abc <__debug_warn>
		}
		//__debug_info("[sigframefree] free trapframe %p\n", head->tf);
		kfree(head->tf);
    802081c8:	6488                	ld	a0,8(s1)
    802081ca:	00001097          	auipc	ra,0x1
    802081ce:	488080e7          	jalr	1160(ra) # 80209652 <kfree>
		//__debug_info("[sigframefree] free %p\n", head);
		kfree(head);
    802081d2:	8526                	mv	a0,s1
    802081d4:	00001097          	auipc	ra,0x1
    802081d8:	47e080e7          	jalr	1150(ra) # 80209652 <kfree>
		head = next;
    802081dc:	84ca                	mv	s1,s2
		struct sig_frame *next = head->next;
    802081de:	0104b903          	ld	s2,16(s1)
		if(next == head)
    802081e2:	fc990ee3          	beq	s2,s1,802081be <sigframefree+0x1c>
		kfree(head->tf);
    802081e6:	6488                	ld	a0,8(s1)
    802081e8:	00001097          	auipc	ra,0x1
    802081ec:	46a080e7          	jalr	1130(ra) # 80209652 <kfree>
		kfree(head);
    802081f0:	8526                	mv	a0,s1
    802081f2:	00001097          	auipc	ra,0x1
    802081f6:	460080e7          	jalr	1120(ra) # 80209652 <kfree>
	while (NULL != head) {
    802081fa:	fe0911e3          	bnez	s2,802081dc <sigframefree+0x3a>
	}
}
    802081fe:	70a2                	ld	ra,40(sp)
    80208200:	7402                	ld	s0,32(sp)
    80208202:	64e2                	ld	s1,24(sp)
    80208204:	6942                	ld	s2,16(sp)
    80208206:	69a2                	ld	s3,8(sp)
    80208208:	6145                	addi	sp,sp,48
    8020820a:	8082                	ret
    8020820c:	8082                	ret

000000008020820e <sigaction_free>:

void sigaction_free(ksigaction_t *head) {
    8020820e:	1101                	addi	sp,sp,-32
    80208210:	ec06                	sd	ra,24(sp)
    80208212:	e822                	sd	s0,16(sp)
    80208214:	e426                	sd	s1,8(sp)
    80208216:	1000                	addi	s0,sp,32
    80208218:	84aa                	mv	s1,a0
	while (NULL != head) {
    8020821a:	c901                	beqz	a0,8020822a <sigaction_free+0x1c>
		ksigaction_t *next = head->next;
    8020821c:	8526                	mv	a0,s1
    8020821e:	6084                	ld	s1,0(s1)
		kfree(head);
    80208220:	00001097          	auipc	ra,0x1
    80208224:	432080e7          	jalr	1074(ra) # 80209652 <kfree>
	while (NULL != head) {
    80208228:	f8f5                	bnez	s1,8020821c <sigaction_free+0xe>
		head = next;
	}
}
    8020822a:	60e2                	ld	ra,24(sp)
    8020822c:	6442                	ld	s0,16(sp)
    8020822e:	64a2                	ld	s1,8(sp)
    80208230:	6105                	addi	sp,sp,32
    80208232:	8082                	ret

0000000080208234 <sigaction_copy>:

int sigaction_copy(ksigaction_t **pdst, ksigaction_t const *src) {
    80208234:	1101                	addi	sp,sp,-32
    80208236:	ec06                	sd	ra,24(sp)
    80208238:	e822                	sd	s0,16(sp)
    8020823a:	e426                	sd	s1,8(sp)
    8020823c:	e04a                	sd	s2,0(sp)
    8020823e:	1000                	addi	s0,sp,32
    80208240:	892a                	mv	s2,a0
    80208242:	84ae                	mv	s1,a1
	ksigaction_t *tmp = NULL;

	*pdst = NULL;
    80208244:	00053023          	sd	zero,0(a0)
	if (NULL == src) {
    80208248:	c1b5                	beqz	a1,802082ac <sigaction_copy+0x78>
		return 0;
	}

	while (NULL != src) {
		tmp = kmalloc(sizeof(ksigaction_t));
    8020824a:	02800513          	li	a0,40
    8020824e:	00001097          	auipc	ra,0x1
    80208252:	1ba080e7          	jalr	442(ra) # 80209408 <kmalloc>
		if (NULL == tmp) {
    80208256:	c505                	beqz	a0,8020827e <sigaction_copy+0x4a>
			sigaction_free(*pdst);
			*pdst = NULL;
			return -1;
		}

		*tmp = *src;
    80208258:	608c                	ld	a1,0(s1)
    8020825a:	6490                	ld	a2,8(s1)
    8020825c:	6894                	ld	a3,16(s1)
    8020825e:	6c98                	ld	a4,24(s1)
    80208260:	709c                	ld	a5,32(s1)
    80208262:	e10c                	sd	a1,0(a0)
    80208264:	e510                	sd	a2,8(a0)
    80208266:	e914                	sd	a3,16(a0)
    80208268:	ed18                	sd	a4,24(a0)
    8020826a:	f11c                	sd	a5,32(a0)
		tmp->next = *pdst;
    8020826c:	00093783          	ld	a5,0(s2)
    80208270:	e11c                	sd	a5,0(a0)
		*pdst = tmp;
    80208272:	00a93023          	sd	a0,0(s2)

		src = src->next;
    80208276:	6084                	ld	s1,0(s1)
	while (NULL != src) {
    80208278:	f8e9                	bnez	s1,8020824a <sigaction_copy+0x16>
	}

	return 0;
    8020827a:	4501                	li	a0,0
    8020827c:	a015                	j	802082a0 <sigaction_copy+0x6c>
			__debug_warn("[sigaction_copy] fail to alloc\n");
    8020827e:	0000a517          	auipc	a0,0xa
    80208282:	48250513          	addi	a0,a0,1154 # 80212700 <rodata_start+0x700>
    80208286:	00001097          	auipc	ra,0x1
    8020828a:	836080e7          	jalr	-1994(ra) # 80208abc <__debug_warn>
			sigaction_free(*pdst);
    8020828e:	00093503          	ld	a0,0(s2)
    80208292:	00000097          	auipc	ra,0x0
    80208296:	f7c080e7          	jalr	-132(ra) # 8020820e <sigaction_free>
			*pdst = NULL;
    8020829a:	00093023          	sd	zero,0(s2)
			return -1;
    8020829e:	557d                	li	a0,-1
}
    802082a0:	60e2                	ld	ra,24(sp)
    802082a2:	6442                	ld	s0,16(sp)
    802082a4:	64a2                	ld	s1,8(sp)
    802082a6:	6902                	ld	s2,0(sp)
    802082a8:	6105                	addi	sp,sp,32
    802082aa:	8082                	ret
		return 0;
    802082ac:	4501                	li	a0,0
    802082ae:	bfcd                	j	802082a0 <sigaction_copy+0x6c>

00000000802082b0 <sigreturn>:

void sigreturn(void) {
    802082b0:	1101                	addi	sp,sp,-32
    802082b2:	ec06                	sd	ra,24(sp)
    802082b4:	e822                	sd	s0,16(sp)
    802082b6:	e426                	sd	s1,8(sp)
    802082b8:	e04a                	sd	s2,0(sp)
    802082ba:	1000                	addi	s0,sp,32
	struct proc *p = myproc();
    802082bc:	00003097          	auipc	ra,0x3
    802082c0:	190080e7          	jalr	400(ra) # 8020b44c <myproc>
    802082c4:	84aa                	mv	s1,a0

	if (NULL == p->sig_frame) {	// it's not in a sighandler!
    802082c6:	1a053783          	ld	a5,416(a0)
    802082ca:	cfb1                	beqz	a5,80208326 <sigreturn+0x76>
		exit(-1);
	}

	struct sig_frame *frame = p->sig_frame;
    802082cc:	1a04b903          	ld	s2,416(s1)
	// for (int i = 0; i < SIGSET_LEN; i ++) {
	// 	p->sig_set.__val[i] = frame->mask.__val[i];
	// }
	*(p->trapframe) = *(frame->tf);
    802082d0:	00893683          	ld	a3,8(s2)
    802082d4:	87b6                	mv	a5,a3
    802082d6:	74b8                	ld	a4,104(s1)
    802082d8:	12068693          	addi	a3,a3,288 # 2000120 <_entry-0x7e1ffee0>
    802082dc:	0007b803          	ld	a6,0(a5) # 2000000 <_entry-0x7e200000>
    802082e0:	6788                	ld	a0,8(a5)
    802082e2:	6b8c                	ld	a1,16(a5)
    802082e4:	6f90                	ld	a2,24(a5)
    802082e6:	01073023          	sd	a6,0(a4)
    802082ea:	e708                	sd	a0,8(a4)
    802082ec:	eb0c                	sd	a1,16(a4)
    802082ee:	ef10                	sd	a2,24(a4)
    802082f0:	02078793          	addi	a5,a5,32
    802082f4:	02070713          	addi	a4,a4,32
    802082f8:	fed792e3          	bne	a5,a3,802082dc <sigreturn+0x2c>
	kfree(frame->tf);
    802082fc:	00893503          	ld	a0,8(s2)
    80208300:	00001097          	auipc	ra,0x1
    80208304:	352080e7          	jalr	850(ra) # 80209652 <kfree>

	// remove this frame from list 
	p->sig_frame = frame->next;
    80208308:	01093783          	ld	a5,16(s2)
    8020830c:	1af4b023          	sd	a5,416(s1)
	kfree(frame);
    80208310:	854a                	mv	a0,s2
    80208312:	00001097          	auipc	ra,0x1
    80208316:	340080e7          	jalr	832(ra) # 80209652 <kfree>
}
    8020831a:	60e2                	ld	ra,24(sp)
    8020831c:	6442                	ld	s0,16(sp)
    8020831e:	64a2                	ld	s1,8(sp)
    80208320:	6902                	ld	s2,0(sp)
    80208322:	6105                	addi	sp,sp,32
    80208324:	8082                	ret
		exit(-1);
    80208326:	557d                	li	a0,-1
    80208328:	ffffa097          	auipc	ra,0xffffa
    8020832c:	00c080e7          	jalr	12(ra) # 80202334 <exit>
    80208330:	bf71                	j	802082cc <sigreturn+0x1c>

0000000080208332 <initlock>:



void
initlock(struct spinlock *lk, char *name)
{
    80208332:	1141                	addi	sp,sp,-16
    80208334:	e422                	sd	s0,8(sp)
    80208336:	0800                	addi	s0,sp,16
  lk->name = name;
    80208338:	e50c                	sd	a1,8(a0)
  lk->locked = 0;
    8020833a:	00052023          	sw	zero,0(a0)
  lk->cpu = 0;
    8020833e:	00053823          	sd	zero,16(a0)
}
    80208342:	6422                	ld	s0,8(sp)
    80208344:	0141                	addi	sp,sp,16
    80208346:	8082                	ret

0000000080208348 <holding>:
// Interrupts must be off.
int
holding(struct spinlock *lk)
{
  int r;
  r = (lk->locked && lk->cpu == mycpu());
    80208348:	411c                	lw	a5,0(a0)
    8020834a:	e399                	bnez	a5,80208350 <holding+0x8>
    8020834c:	4501                	li	a0,0
  return r;
}
    8020834e:	8082                	ret
{
    80208350:	1101                	addi	sp,sp,-32
    80208352:	ec06                	sd	ra,24(sp)
    80208354:	e822                	sd	s0,16(sp)
    80208356:	e426                	sd	s1,8(sp)
    80208358:	1000                	addi	s0,sp,32
  r = (lk->locked && lk->cpu == mycpu());
    8020835a:	6904                	ld	s1,16(a0)
    8020835c:	00003097          	auipc	ra,0x3
    80208360:	0d4080e7          	jalr	212(ra) # 8020b430 <mycpu>
    80208364:	40a48533          	sub	a0,s1,a0
    80208368:	00153513          	seqz	a0,a0
}
    8020836c:	60e2                	ld	ra,24(sp)
    8020836e:	6442                	ld	s0,16(sp)
    80208370:	64a2                	ld	s1,8(sp)
    80208372:	6105                	addi	sp,sp,32
    80208374:	8082                	ret

0000000080208376 <acquire>:
{
    80208376:	1101                	addi	sp,sp,-32
    80208378:	ec06                	sd	ra,24(sp)
    8020837a:	e822                	sd	s0,16(sp)
    8020837c:	e426                	sd	s1,8(sp)
    8020837e:	1000                	addi	s0,sp,32
    80208380:	84aa                	mv	s1,a0
  push_off(); // disable interrupts to avoid deadlock.
    80208382:	ffff9097          	auipc	ra,0xffff9
    80208386:	c80080e7          	jalr	-896(ra) # 80201002 <push_off>
  if(holding(lk))
    8020838a:	8526                	mv	a0,s1
    8020838c:	00000097          	auipc	ra,0x0
    80208390:	fbc080e7          	jalr	-68(ra) # 80208348 <holding>
  while(__sync_lock_test_and_set(&lk->locked, 1) != 0)
    80208394:	4705                	li	a4,1
  if(holding(lk))
    80208396:	e115                	bnez	a0,802083ba <acquire+0x44>
  while(__sync_lock_test_and_set(&lk->locked, 1) != 0)
    80208398:	87ba                	mv	a5,a4
    8020839a:	0cf4a7af          	amoswap.w.aq	a5,a5,(s1)
    8020839e:	2781                	sext.w	a5,a5
    802083a0:	ffe5                	bnez	a5,80208398 <acquire+0x22>
  __sync_synchronize();
    802083a2:	0ff0000f          	fence
  lk->cpu = mycpu();
    802083a6:	00003097          	auipc	ra,0x3
    802083aa:	08a080e7          	jalr	138(ra) # 8020b430 <mycpu>
    802083ae:	e888                	sd	a0,16(s1)
}
    802083b0:	60e2                	ld	ra,24(sp)
    802083b2:	6442                	ld	s0,16(sp)
    802083b4:	64a2                	ld	s1,8(sp)
    802083b6:	6105                	addi	sp,sp,32
    802083b8:	8082                	ret
    panic("acquire");
    802083ba:	0000a517          	auipc	a0,0xa
    802083be:	36650513          	addi	a0,a0,870 # 80212720 <rodata_start+0x720>
    802083c2:	00000097          	auipc	ra,0x0
    802083c6:	324080e7          	jalr	804(ra) # 802086e6 <panic>

00000000802083ca <release>:
{
    802083ca:	1101                	addi	sp,sp,-32
    802083cc:	ec06                	sd	ra,24(sp)
    802083ce:	e822                	sd	s0,16(sp)
    802083d0:	e426                	sd	s1,8(sp)
    802083d2:	1000                	addi	s0,sp,32
    802083d4:	84aa                	mv	s1,a0
  if(!holding(lk))
    802083d6:	00000097          	auipc	ra,0x0
    802083da:	f72080e7          	jalr	-142(ra) # 80208348 <holding>
    802083de:	c115                	beqz	a0,80208402 <release+0x38>
  lk->cpu = 0;
    802083e0:	0004b823          	sd	zero,16(s1)
  __sync_synchronize();
    802083e4:	0ff0000f          	fence
  __sync_lock_release(&lk->locked);
    802083e8:	0f50000f          	fence	iorw,ow
    802083ec:	0804a02f          	amoswap.w	zero,zero,(s1)
  pop_off();
    802083f0:	ffff9097          	auipc	ra,0xffff9
    802083f4:	c5e080e7          	jalr	-930(ra) # 8020104e <pop_off>
}
    802083f8:	60e2                	ld	ra,24(sp)
    802083fa:	6442                	ld	s0,16(sp)
    802083fc:	64a2                	ld	s1,8(sp)
    802083fe:	6105                	addi	sp,sp,32
    80208400:	8082                	ret
    panic("release");
    80208402:	0000a517          	auipc	a0,0xa
    80208406:	32650513          	addi	a0,a0,806 # 80212728 <rodata_start+0x728>
    8020840a:	00000097          	auipc	ra,0x0
    8020840e:	2dc080e7          	jalr	732(ra) # 802086e6 <panic>

0000000080208412 <initsleeplock>:

extern int fat32_init_flag;

void
initsleeplock(struct sleeplock *lk, char *name)
{
    80208412:	1101                	addi	sp,sp,-32
    80208414:	ec06                	sd	ra,24(sp)
    80208416:	e822                	sd	s0,16(sp)
    80208418:	e426                	sd	s1,8(sp)
    8020841a:	e04a                	sd	s2,0(sp)
    8020841c:	1000                	addi	s0,sp,32
    8020841e:	84aa                	mv	s1,a0
    80208420:	892e                	mv	s2,a1
  initlock(&lk->lk, "sleep lock");
    80208422:	0000a597          	auipc	a1,0xa
    80208426:	30e58593          	addi	a1,a1,782 # 80212730 <rodata_start+0x730>
    8020842a:	0521                	addi	a0,a0,8
    8020842c:	00000097          	auipc	ra,0x0
    80208430:	f06080e7          	jalr	-250(ra) # 80208332 <initlock>
  lk->name = name;
    80208434:	0324b023          	sd	s2,32(s1)
  lk->locked = 0;
    80208438:	0004a023          	sw	zero,0(s1)
  lk->pid = 0;
    8020843c:	0204a423          	sw	zero,40(s1)
}
    80208440:	60e2                	ld	ra,24(sp)
    80208442:	6442                	ld	s0,16(sp)
    80208444:	64a2                	ld	s1,8(sp)
    80208446:	6902                	ld	s2,0(sp)
    80208448:	6105                	addi	sp,sp,32
    8020844a:	8082                	ret

000000008020844c <acquiresleep>:

void
acquiresleep(struct sleeplock *lk)
{
    8020844c:	1101                	addi	sp,sp,-32
    8020844e:	ec06                	sd	ra,24(sp)
    80208450:	e822                	sd	s0,16(sp)
    80208452:	e426                	sd	s1,8(sp)
    80208454:	e04a                	sd	s2,0(sp)
    80208456:	1000                	addi	s0,sp,32
    80208458:	84aa                	mv	s1,a0
  acquire(&lk->lk);
    8020845a:	00850913          	addi	s2,a0,8
    8020845e:	854a                	mv	a0,s2
    80208460:	00000097          	auipc	ra,0x0
    80208464:	f16080e7          	jalr	-234(ra) # 80208376 <acquire>
  while (lk->locked) {
    80208468:	409c                	lw	a5,0(s1)
    8020846a:	cb89                	beqz	a5,8020847c <acquiresleep+0x30>
    sleep(lk, &lk->lk);
    8020846c:	85ca                	mv	a1,s2
    8020846e:	8526                	mv	a0,s1
    80208470:	ffff9097          	auipc	ra,0xffff9
    80208474:	7b2080e7          	jalr	1970(ra) # 80201c22 <sleep>
  while (lk->locked) {
    80208478:	409c                	lw	a5,0(s1)
    8020847a:	fbed                	bnez	a5,8020846c <acquiresleep+0x20>
  }
  lk->locked = 1;
    8020847c:	4785                	li	a5,1
    8020847e:	c09c                	sw	a5,0(s1)
  //lk->pid = myproc()->pid;
  release(&lk->lk);
    80208480:	854a                	mv	a0,s2
    80208482:	00000097          	auipc	ra,0x0
    80208486:	f48080e7          	jalr	-184(ra) # 802083ca <release>
}
    8020848a:	60e2                	ld	ra,24(sp)
    8020848c:	6442                	ld	s0,16(sp)
    8020848e:	64a2                	ld	s1,8(sp)
    80208490:	6902                	ld	s2,0(sp)
    80208492:	6105                	addi	sp,sp,32
    80208494:	8082                	ret

0000000080208496 <releasesleep>:

void
releasesleep(struct sleeplock *lk)
{
    80208496:	1101                	addi	sp,sp,-32
    80208498:	ec06                	sd	ra,24(sp)
    8020849a:	e822                	sd	s0,16(sp)
    8020849c:	e426                	sd	s1,8(sp)
    8020849e:	e04a                	sd	s2,0(sp)
    802084a0:	1000                	addi	s0,sp,32
    802084a2:	84aa                	mv	s1,a0
  acquire(&lk->lk);
    802084a4:	00850913          	addi	s2,a0,8
    802084a8:	854a                	mv	a0,s2
    802084aa:	00000097          	auipc	ra,0x0
    802084ae:	ecc080e7          	jalr	-308(ra) # 80208376 <acquire>
  lk->locked = 0;
    802084b2:	0004a023          	sw	zero,0(s1)
  lk->pid = 0;
    802084b6:	0204a423          	sw	zero,40(s1)
  wakeup(lk);
    802084ba:	8526                	mv	a0,s1
    802084bc:	ffffa097          	auipc	ra,0xffffa
    802084c0:	870080e7          	jalr	-1936(ra) # 80201d2c <wakeup>
  release(&lk->lk);
    802084c4:	854a                	mv	a0,s2
    802084c6:	00000097          	auipc	ra,0x0
    802084ca:	f04080e7          	jalr	-252(ra) # 802083ca <release>
}
    802084ce:	60e2                	ld	ra,24(sp)
    802084d0:	6442                	ld	s0,16(sp)
    802084d2:	64a2                	ld	s1,8(sp)
    802084d4:	6902                	ld	s2,0(sp)
    802084d6:	6105                	addi	sp,sp,32
    802084d8:	8082                	ret

00000000802084da <holdingsleep>:

int
holdingsleep(struct sleeplock *lk)
{
    802084da:	1101                	addi	sp,sp,-32
    802084dc:	ec06                	sd	ra,24(sp)
    802084de:	e822                	sd	s0,16(sp)
    802084e0:	e426                	sd	s1,8(sp)
    802084e2:	e04a                	sd	s2,0(sp)
    802084e4:	1000                	addi	s0,sp,32
    802084e6:	84aa                	mv	s1,a0
  int r;
  
  acquire(&lk->lk);
    802084e8:	00850913          	addi	s2,a0,8
    802084ec:	854a                	mv	a0,s2
    802084ee:	00000097          	auipc	ra,0x0
    802084f2:	e88080e7          	jalr	-376(ra) # 80208376 <acquire>
  //r = lk->locked && (lk->pid == myproc()->pid);
  r = lk->locked && 1;
    802084f6:	4084                	lw	s1,0(s1)
    802084f8:	009034b3          	snez	s1,s1
  release(&lk->lk);
    802084fc:	854a                	mv	a0,s2
    802084fe:	00000097          	auipc	ra,0x0
    80208502:	ecc080e7          	jalr	-308(ra) # 802083ca <release>
  return r;
}
    80208506:	8526                	mv	a0,s1
    80208508:	60e2                	ld	ra,24(sp)
    8020850a:	6442                	ld	s0,16(sp)
    8020850c:	64a2                	ld	s1,8(sp)
    8020850e:	6902                	ld	s2,0(sp)
    80208510:	6105                	addi	sp,sp,32
    80208512:	8082                	ret

0000000080208514 <consputc>:
static struct {
  struct spinlock lock;
  int locking;
} pr;

void consputc(int c) {
    80208514:	1141                	addi	sp,sp,-16
    80208516:	e422                	sd	s0,8(sp)
    80208518:	0800                	addi	s0,sp,16
  if(c == BACKSPACE){
    8020851a:	10000793          	li	a5,256
    8020851e:	00f50a63          	beq	a0,a5,80208532 <consputc+0x1e>
    register uint64 a1 asm("a1") = arg1;
    80208522:	4581                	li	a1,0
    register uint64 a2 asm("a2") = arg2;
    80208524:	4601                	li	a2,0
    register uint64 a7 asm("a7") = which;
    80208526:	4885                	li	a7,1
    asm volatile("ecall"
    80208528:	00000073          	ecall
    sbi_console_putchar(' ');
    sbi_console_putchar('\b');
  } else {
    sbi_console_putchar(c);
  }
}
    8020852c:	6422                	ld	s0,8(sp)
    8020852e:	0141                	addi	sp,sp,16
    80208530:	8082                	ret
    register uint64 a0 asm("a0") = arg0;
    80208532:	4521                	li	a0,8
    register uint64 a1 asm("a1") = arg1;
    80208534:	4581                	li	a1,0
    register uint64 a2 asm("a2") = arg2;
    80208536:	4601                	li	a2,0
    register uint64 a7 asm("a7") = which;
    80208538:	4885                	li	a7,1
    asm volatile("ecall"
    8020853a:	00000073          	ecall
    register uint64 a0 asm("a0") = arg0;
    8020853e:	02000513          	li	a0,32
    asm volatile("ecall"
    80208542:	00000073          	ecall
    register uint64 a0 asm("a0") = arg0;
    80208546:	4521                	li	a0,8
    asm volatile("ecall"
    80208548:	00000073          	ecall
	return ret;
}

static inline void sbi_console_putchar(int c) {
    sbi_call(SBI_CONSOLE_PUTCHAR, c, 0, 0);
}
    8020854c:	b7c5                	j	8020852c <consputc+0x18>

000000008020854e <printint>:
    }
}

static void
printint(int xx, int base, int sign)
{
    8020854e:	7179                	addi	sp,sp,-48
    80208550:	f406                	sd	ra,40(sp)
    80208552:	f022                	sd	s0,32(sp)
    80208554:	ec26                	sd	s1,24(sp)
    80208556:	e84a                	sd	s2,16(sp)
    80208558:	1800                	addi	s0,sp,48
  char buf[16];
  int i;
  uint x;

  if(sign && (sign = xx < 0))
    8020855a:	c219                	beqz	a2,80208560 <printint+0x12>
    8020855c:	08054663          	bltz	a0,802085e8 <printint+0x9a>
    x = -xx;
  else
    x = xx;
    80208560:	2501                	sext.w	a0,a0
    80208562:	4881                	li	a7,0
    80208564:	fd040693          	addi	a3,s0,-48

  i = 0;
    80208568:	4701                	li	a4,0
  do {
    buf[i++] = digits[x % base];
    8020856a:	2581                	sext.w	a1,a1
    8020856c:	0000a617          	auipc	a2,0xa
    80208570:	37c60613          	addi	a2,a2,892 # 802128e8 <digits>
    80208574:	883a                	mv	a6,a4
    80208576:	2705                	addiw	a4,a4,1
    80208578:	02b577bb          	remuw	a5,a0,a1
    8020857c:	1782                	slli	a5,a5,0x20
    8020857e:	9381                	srli	a5,a5,0x20
    80208580:	97b2                	add	a5,a5,a2
    80208582:	0007c783          	lbu	a5,0(a5)
    80208586:	00f68023          	sb	a5,0(a3)
  } while((x /= base) != 0);
    8020858a:	0005079b          	sext.w	a5,a0
    8020858e:	02b5553b          	divuw	a0,a0,a1
    80208592:	0685                	addi	a3,a3,1
    80208594:	feb7f0e3          	bgeu	a5,a1,80208574 <printint+0x26>

  if(sign)
    80208598:	00088b63          	beqz	a7,802085ae <printint+0x60>
    buf[i++] = '-';
    8020859c:	fe040793          	addi	a5,s0,-32
    802085a0:	973e                	add	a4,a4,a5
    802085a2:	02d00793          	li	a5,45
    802085a6:	fef70823          	sb	a5,-16(a4)
    802085aa:	0028071b          	addiw	a4,a6,2

  while(--i >= 0)
    802085ae:	02e05763          	blez	a4,802085dc <printint+0x8e>
    802085b2:	fd040793          	addi	a5,s0,-48
    802085b6:	00e784b3          	add	s1,a5,a4
    802085ba:	fff78913          	addi	s2,a5,-1
    802085be:	993a                	add	s2,s2,a4
    802085c0:	377d                	addiw	a4,a4,-1
    802085c2:	1702                	slli	a4,a4,0x20
    802085c4:	9301                	srli	a4,a4,0x20
    802085c6:	40e90933          	sub	s2,s2,a4
    consputc(buf[i]);
    802085ca:	fff4c503          	lbu	a0,-1(s1)
    802085ce:	00000097          	auipc	ra,0x0
    802085d2:	f46080e7          	jalr	-186(ra) # 80208514 <consputc>
  while(--i >= 0)
    802085d6:	14fd                	addi	s1,s1,-1
    802085d8:	ff2499e3          	bne	s1,s2,802085ca <printint+0x7c>
}
    802085dc:	70a2                	ld	ra,40(sp)
    802085de:	7402                	ld	s0,32(sp)
    802085e0:	64e2                	ld	s1,24(sp)
    802085e2:	6942                	ld	s2,16(sp)
    802085e4:	6145                	addi	sp,sp,48
    802085e6:	8082                	ret
    x = -xx;
    802085e8:	40a0053b          	negw	a0,a0
  if(sign && (sign = xx < 0))
    802085ec:	4885                	li	a7,1
    x = -xx;
    802085ee:	bf9d                	j	80208564 <printint+0x16>

00000000802085f0 <printptr>:


static void
printptr(uint64 x)
{
    802085f0:	7179                	addi	sp,sp,-48
    802085f2:	f406                	sd	ra,40(sp)
    802085f4:	f022                	sd	s0,32(sp)
    802085f6:	ec26                	sd	s1,24(sp)
    802085f8:	e84a                	sd	s2,16(sp)
    802085fa:	e44e                	sd	s3,8(sp)
    802085fc:	1800                	addi	s0,sp,48
    802085fe:	84aa                	mv	s1,a0
  int i;
  consputc('0');
    80208600:	03000513          	li	a0,48
    80208604:	00000097          	auipc	ra,0x0
    80208608:	f10080e7          	jalr	-240(ra) # 80208514 <consputc>
  consputc('x');
    8020860c:	07800513          	li	a0,120
    80208610:	00000097          	auipc	ra,0x0
    80208614:	f04080e7          	jalr	-252(ra) # 80208514 <consputc>
    80208618:	4941                	li	s2,16
  for (i = 0; i < (sizeof(uint64) * 2); i++, x <<= 4)
    consputc(digits[x >> (sizeof(uint64) * 8 - 4)]);
    8020861a:	0000a997          	auipc	s3,0xa
    8020861e:	2ce98993          	addi	s3,s3,718 # 802128e8 <digits>
    80208622:	03c4d793          	srli	a5,s1,0x3c
    80208626:	97ce                	add	a5,a5,s3
    80208628:	0007c503          	lbu	a0,0(a5)
    8020862c:	00000097          	auipc	ra,0x0
    80208630:	ee8080e7          	jalr	-280(ra) # 80208514 <consputc>
  for (i = 0; i < (sizeof(uint64) * 2); i++, x <<= 4)
    80208634:	0492                	slli	s1,s1,0x4
    80208636:	397d                	addiw	s2,s2,-1
    80208638:	fe0915e3          	bnez	s2,80208622 <printptr+0x32>
}
    8020863c:	70a2                	ld	ra,40(sp)
    8020863e:	7402                	ld	s0,32(sp)
    80208640:	64e2                	ld	s1,24(sp)
    80208642:	6942                	ld	s2,16(sp)
    80208644:	69a2                	ld	s3,8(sp)
    80208646:	6145                	addi	sp,sp,48
    80208648:	8082                	ret

000000008020864a <printstring>:
void printstring(const char* s) {
    8020864a:	1101                	addi	sp,sp,-32
    8020864c:	ec06                	sd	ra,24(sp)
    8020864e:	e822                	sd	s0,16(sp)
    80208650:	e426                	sd	s1,8(sp)
    80208652:	1000                	addi	s0,sp,32
    80208654:	84aa                	mv	s1,a0
    while (*s)
    80208656:	00054503          	lbu	a0,0(a0)
    8020865a:	c909                	beqz	a0,8020866c <printstring+0x22>
        consputc(*s++);
    8020865c:	0485                	addi	s1,s1,1
    8020865e:	00000097          	auipc	ra,0x0
    80208662:	eb6080e7          	jalr	-330(ra) # 80208514 <consputc>
    while (*s)
    80208666:	0004c503          	lbu	a0,0(s1)
    8020866a:	f96d                	bnez	a0,8020865c <printstring+0x12>
}
    8020866c:	60e2                	ld	ra,24(sp)
    8020866e:	6442                	ld	s0,16(sp)
    80208670:	64a2                	ld	s1,8(sp)
    80208672:	6105                	addi	sp,sp,32
    80208674:	8082                	ret

0000000080208676 <backtrace>:
  for(;;)
    ;
}

void backtrace()
{
    80208676:	7179                	addi	sp,sp,-48
    80208678:	f406                	sd	ra,40(sp)
    8020867a:	f022                	sd	s0,32(sp)
    8020867c:	ec26                	sd	s1,24(sp)
    8020867e:	e84a                	sd	s2,16(sp)
    80208680:	e44e                	sd	s3,8(sp)
    80208682:	1800                	addi	s0,sp,48
  asm volatile("mv %0, s0" : "=r" (x) );
    80208684:	8922                	mv	s2,s0
  uint64 *fp = (uint64 *)r_fp();
    80208686:	84ca                	mv	s1,s2
  uint64 *bottom = (uint64 *)PGROUNDUP((uint64)fp);
    80208688:	6785                	lui	a5,0x1
    8020868a:	17fd                	addi	a5,a5,-1
    8020868c:	993e                	add	s2,s2,a5
    8020868e:	77fd                	lui	a5,0xfffff
    80208690:	00f97933          	and	s2,s2,a5
  printf("backtrace:\n");
    80208694:	0000a517          	auipc	a0,0xa
    80208698:	0ac50513          	addi	a0,a0,172 # 80212740 <rodata_start+0x740>
    8020869c:	00000097          	auipc	ra,0x0
    802086a0:	094080e7          	jalr	148(ra) # 80208730 <printf>
  while (fp < bottom) {
    802086a4:	0324f263          	bgeu	s1,s2,802086c8 <backtrace+0x52>
    uint64 ra = *(fp - 1);
    printf("%p\n", ra - 4);
    802086a8:	0000b997          	auipc	s3,0xb
    802086ac:	d3898993          	addi	s3,s3,-712 # 802133e0 <digits+0xaf8>
    802086b0:	ff84b583          	ld	a1,-8(s1)
    802086b4:	15f1                	addi	a1,a1,-4
    802086b6:	854e                	mv	a0,s3
    802086b8:	00000097          	auipc	ra,0x0
    802086bc:	078080e7          	jalr	120(ra) # 80208730 <printf>
    fp = (uint64 *)*(fp - 2);
    802086c0:	ff04b483          	ld	s1,-16(s1)
  while (fp < bottom) {
    802086c4:	ff24e6e3          	bltu	s1,s2,802086b0 <backtrace+0x3a>
  }
  printf("!TEST FINISH!\n");
    802086c8:	0000a517          	auipc	a0,0xa
    802086cc:	08850513          	addi	a0,a0,136 # 80212750 <rodata_start+0x750>
    802086d0:	00000097          	auipc	ra,0x0
    802086d4:	060080e7          	jalr	96(ra) # 80208730 <printf>
}
    802086d8:	70a2                	ld	ra,40(sp)
    802086da:	7402                	ld	s0,32(sp)
    802086dc:	64e2                	ld	s1,24(sp)
    802086de:	6942                	ld	s2,16(sp)
    802086e0:	69a2                	ld	s3,8(sp)
    802086e2:	6145                	addi	sp,sp,48
    802086e4:	8082                	ret

00000000802086e6 <panic>:
{
    802086e6:	1101                	addi	sp,sp,-32
    802086e8:	ec06                	sd	ra,24(sp)
    802086ea:	e822                	sd	s0,16(sp)
    802086ec:	e426                	sd	s1,8(sp)
    802086ee:	1000                	addi	s0,sp,32
    802086f0:	84aa                	mv	s1,a0
  printf("panic: ");
    802086f2:	0000a517          	auipc	a0,0xa
    802086f6:	06e50513          	addi	a0,a0,110 # 80212760 <rodata_start+0x760>
    802086fa:	00000097          	auipc	ra,0x0
    802086fe:	036080e7          	jalr	54(ra) # 80208730 <printf>
  printf(s);
    80208702:	8526                	mv	a0,s1
    80208704:	00000097          	auipc	ra,0x0
    80208708:	02c080e7          	jalr	44(ra) # 80208730 <printf>
  printf("\n");
    8020870c:	0000a517          	auipc	a0,0xa
    80208710:	5dc50513          	addi	a0,a0,1500 # 80212ce8 <digits+0x400>
    80208714:	00000097          	auipc	ra,0x0
    80208718:	01c080e7          	jalr	28(ra) # 80208730 <printf>
  backtrace();
    8020871c:	00000097          	auipc	ra,0x0
    80208720:	f5a080e7          	jalr	-166(ra) # 80208676 <backtrace>
  panicked = 1; // freeze uart output from other CPUs
    80208724:	4785                	li	a5,1
    80208726:	00863717          	auipc	a4,0x863
    8020872a:	7af72523          	sw	a5,1962(a4) # 80a6bed0 <panicked>
  for(;;)
    8020872e:	a001                	j	8020872e <panic+0x48>

0000000080208730 <printf>:
{
    80208730:	7135                	addi	sp,sp,-160
    80208732:	ec86                	sd	ra,88(sp)
    80208734:	e8a2                	sd	s0,80(sp)
    80208736:	e4a6                	sd	s1,72(sp)
    80208738:	e0ca                	sd	s2,64(sp)
    8020873a:	fc4e                	sd	s3,56(sp)
    8020873c:	f852                	sd	s4,48(sp)
    8020873e:	f456                	sd	s5,40(sp)
    80208740:	f05a                	sd	s6,32(sp)
    80208742:	ec5e                	sd	s7,24(sp)
    80208744:	e862                	sd	s8,16(sp)
    80208746:	1080                	addi	s0,sp,96
    80208748:	89aa                	mv	s3,a0
    8020874a:	e40c                	sd	a1,8(s0)
    8020874c:	e810                	sd	a2,16(s0)
    8020874e:	ec14                	sd	a3,24(s0)
    80208750:	f018                	sd	a4,32(s0)
    80208752:	f41c                	sd	a5,40(s0)
    80208754:	03043823          	sd	a6,48(s0)
    80208758:	03143c23          	sd	a7,56(s0)
  locking = pr.locking;
    8020875c:	00863b97          	auipc	s7,0x863
    80208760:	76cbab83          	lw	s7,1900(s7) # 80a6bec8 <pr+0x18>
  if(locking)
    80208764:	020b9763          	bnez	s7,80208792 <printf+0x62>
  if (fmt == 0)
    80208768:	02098e63          	beqz	s3,802087a4 <printf+0x74>
  va_start(ap, fmt);
    8020876c:	00840793          	addi	a5,s0,8
    80208770:	faf43423          	sd	a5,-88(s0)
  for(i = 0; (c = fmt[i] & 0xff) != 0; i++){
    80208774:	0009c503          	lbu	a0,0(s3)
    80208778:	14050863          	beqz	a0,802088c8 <printf+0x198>
    8020877c:	4481                	li	s1,0
    if(c != '%'){
    8020877e:	02500a13          	li	s4,37
    switch(c){
    80208782:	4ad5                	li	s5,21
    80208784:	0000a917          	auipc	s2,0xa
    80208788:	00490913          	addi	s2,s2,4 # 80212788 <rodata_start+0x788>
      for(; *s; s++)
    8020878c:	02800c13          	li	s8,40
    80208790:	a82d                	j	802087ca <printf+0x9a>
    acquire(&pr.lock);
    80208792:	00863517          	auipc	a0,0x863
    80208796:	71e50513          	addi	a0,a0,1822 # 80a6beb0 <pr>
    8020879a:	00000097          	auipc	ra,0x0
    8020879e:	bdc080e7          	jalr	-1060(ra) # 80208376 <acquire>
    802087a2:	b7d9                	j	80208768 <printf+0x38>
    panic("null fmt");
    802087a4:	0000a517          	auipc	a0,0xa
    802087a8:	fcc50513          	addi	a0,a0,-52 # 80212770 <rodata_start+0x770>
    802087ac:	00000097          	auipc	ra,0x0
    802087b0:	f3a080e7          	jalr	-198(ra) # 802086e6 <panic>
      consputc(c);
    802087b4:	00000097          	auipc	ra,0x0
    802087b8:	d60080e7          	jalr	-672(ra) # 80208514 <consputc>
  for(i = 0; (c = fmt[i] & 0xff) != 0; i++){
    802087bc:	2485                	addiw	s1,s1,1
    802087be:	009987b3          	add	a5,s3,s1
    802087c2:	0007c503          	lbu	a0,0(a5) # fffffffffffff000 <kernel_end+0xffffffff7f592000>
    802087c6:	10050163          	beqz	a0,802088c8 <printf+0x198>
    if(c != '%'){
    802087ca:	ff4515e3          	bne	a0,s4,802087b4 <printf+0x84>
    c = fmt[++i] & 0xff;
    802087ce:	2485                	addiw	s1,s1,1
    802087d0:	009987b3          	add	a5,s3,s1
    802087d4:	0007c783          	lbu	a5,0(a5)
    802087d8:	00078b1b          	sext.w	s6,a5
    if(c == 0)
    802087dc:	c7f5                	beqz	a5,802088c8 <printf+0x198>
    switch(c){
    802087de:	0d478463          	beq	a5,s4,802088a6 <printf+0x176>
    802087e2:	f9d7871b          	addiw	a4,a5,-99
    802087e6:	0ff77713          	andi	a4,a4,255
    802087ea:	0ceae463          	bltu	s5,a4,802088b2 <printf+0x182>
    802087ee:	f9d7879b          	addiw	a5,a5,-99
    802087f2:	0ff7f713          	andi	a4,a5,255
    802087f6:	0aeaee63          	bltu	s5,a4,802088b2 <printf+0x182>
    802087fa:	00271793          	slli	a5,a4,0x2
    802087fe:	97ca                	add	a5,a5,s2
    80208800:	439c                	lw	a5,0(a5)
    80208802:	97ca                	add	a5,a5,s2
    80208804:	8782                	jr	a5
      consputc(va_arg(ap, int));
    80208806:	fa843783          	ld	a5,-88(s0)
    8020880a:	00878713          	addi	a4,a5,8
    8020880e:	fae43423          	sd	a4,-88(s0)
    80208812:	4388                	lw	a0,0(a5)
    80208814:	00000097          	auipc	ra,0x0
    80208818:	d00080e7          	jalr	-768(ra) # 80208514 <consputc>
      break;
    8020881c:	b745                	j	802087bc <printf+0x8c>
      printint(va_arg(ap, int), 10, 1);
    8020881e:	fa843783          	ld	a5,-88(s0)
    80208822:	00878713          	addi	a4,a5,8
    80208826:	fae43423          	sd	a4,-88(s0)
    8020882a:	4605                	li	a2,1
    8020882c:	45a9                	li	a1,10
    8020882e:	4388                	lw	a0,0(a5)
    80208830:	00000097          	auipc	ra,0x0
    80208834:	d1e080e7          	jalr	-738(ra) # 8020854e <printint>
      break;
    80208838:	b751                	j	802087bc <printf+0x8c>
      printint(va_arg(ap, int), 16, 1);
    8020883a:	fa843783          	ld	a5,-88(s0)
    8020883e:	00878713          	addi	a4,a5,8
    80208842:	fae43423          	sd	a4,-88(s0)
    80208846:	4605                	li	a2,1
    80208848:	45c1                	li	a1,16
    8020884a:	4388                	lw	a0,0(a5)
    8020884c:	00000097          	auipc	ra,0x0
    80208850:	d02080e7          	jalr	-766(ra) # 8020854e <printint>
      break;
    80208854:	b7a5                	j	802087bc <printf+0x8c>
      printptr(va_arg(ap, uint64));
    80208856:	fa843783          	ld	a5,-88(s0)
    8020885a:	00878713          	addi	a4,a5,8
    8020885e:	fae43423          	sd	a4,-88(s0)
    80208862:	6388                	ld	a0,0(a5)
    80208864:	00000097          	auipc	ra,0x0
    80208868:	d8c080e7          	jalr	-628(ra) # 802085f0 <printptr>
      break;
    8020886c:	bf81                	j	802087bc <printf+0x8c>
      if((s = va_arg(ap, char*)) == 0)
    8020886e:	fa843783          	ld	a5,-88(s0)
    80208872:	00878713          	addi	a4,a5,8
    80208876:	fae43423          	sd	a4,-88(s0)
    8020887a:	0007bb03          	ld	s6,0(a5)
    8020887e:	000b0e63          	beqz	s6,8020889a <printf+0x16a>
      for(; *s; s++)
    80208882:	000b4503          	lbu	a0,0(s6)
    80208886:	d91d                	beqz	a0,802087bc <printf+0x8c>
        consputc(*s);
    80208888:	00000097          	auipc	ra,0x0
    8020888c:	c8c080e7          	jalr	-884(ra) # 80208514 <consputc>
      for(; *s; s++)
    80208890:	0b05                	addi	s6,s6,1
    80208892:	000b4503          	lbu	a0,0(s6)
    80208896:	f96d                	bnez	a0,80208888 <printf+0x158>
    80208898:	b715                	j	802087bc <printf+0x8c>
        s = "(null)";
    8020889a:	0000ab17          	auipc	s6,0xa
    8020889e:	eceb0b13          	addi	s6,s6,-306 # 80212768 <rodata_start+0x768>
      for(; *s; s++)
    802088a2:	8562                	mv	a0,s8
    802088a4:	b7d5                	j	80208888 <printf+0x158>
      consputc('%');
    802088a6:	8552                	mv	a0,s4
    802088a8:	00000097          	auipc	ra,0x0
    802088ac:	c6c080e7          	jalr	-916(ra) # 80208514 <consputc>
      break;
    802088b0:	b731                	j	802087bc <printf+0x8c>
      consputc('%');
    802088b2:	8552                	mv	a0,s4
    802088b4:	00000097          	auipc	ra,0x0
    802088b8:	c60080e7          	jalr	-928(ra) # 80208514 <consputc>
      consputc(c);
    802088bc:	855a                	mv	a0,s6
    802088be:	00000097          	auipc	ra,0x0
    802088c2:	c56080e7          	jalr	-938(ra) # 80208514 <consputc>
      break;
    802088c6:	bddd                	j	802087bc <printf+0x8c>
  if(locking)
    802088c8:	000b9e63          	bnez	s7,802088e4 <printf+0x1b4>
}
    802088cc:	60e6                	ld	ra,88(sp)
    802088ce:	6446                	ld	s0,80(sp)
    802088d0:	64a6                	ld	s1,72(sp)
    802088d2:	6906                	ld	s2,64(sp)
    802088d4:	79e2                	ld	s3,56(sp)
    802088d6:	7a42                	ld	s4,48(sp)
    802088d8:	7aa2                	ld	s5,40(sp)
    802088da:	7b02                	ld	s6,32(sp)
    802088dc:	6be2                	ld	s7,24(sp)
    802088de:	6c42                	ld	s8,16(sp)
    802088e0:	610d                	addi	sp,sp,160
    802088e2:	8082                	ret
    release(&pr.lock);
    802088e4:	00863517          	auipc	a0,0x863
    802088e8:	5cc50513          	addi	a0,a0,1484 # 80a6beb0 <pr>
    802088ec:	00000097          	auipc	ra,0x0
    802088f0:	ade080e7          	jalr	-1314(ra) # 802083ca <release>
}
    802088f4:	bfe1                	j	802088cc <printf+0x19c>

00000000802088f6 <__debug_info>:

void
__debug_info(char *fmt, ...){
    802088f6:	7135                	addi	sp,sp,-160
    802088f8:	ec86                	sd	ra,88(sp)
    802088fa:	e8a2                	sd	s0,80(sp)
    802088fc:	e4a6                	sd	s1,72(sp)
    802088fe:	e0ca                	sd	s2,64(sp)
    80208900:	fc4e                	sd	s3,56(sp)
    80208902:	f852                	sd	s4,48(sp)
    80208904:	f456                	sd	s5,40(sp)
    80208906:	f05a                	sd	s6,32(sp)
    80208908:	ec5e                	sd	s7,24(sp)
    8020890a:	e862                	sd	s8,16(sp)
    8020890c:	1080                	addi	s0,sp,96
    8020890e:	89aa                	mv	s3,a0
    80208910:	e40c                	sd	a1,8(s0)
    80208912:	e810                	sd	a2,16(s0)
    80208914:	ec14                	sd	a3,24(s0)
    80208916:	f018                	sd	a4,32(s0)
    80208918:	f41c                	sd	a5,40(s0)
    8020891a:	03043823          	sd	a6,48(s0)
    8020891e:	03143c23          	sd	a7,56(s0)
#ifdef DEBUG
  va_list ap;
  int i, c;
  int locking;
  char *s;
  locking = pr.locking;
    80208922:	00863b97          	auipc	s7,0x863
    80208926:	5a6bab83          	lw	s7,1446(s7) # 80a6bec8 <pr+0x18>
  if(locking)
    8020892a:	020b9763          	bnez	s7,80208958 <__debug_info+0x62>
    acquire(&pr.lock);
  
  if (fmt == 0)
    8020892e:	02098e63          	beqz	s3,8020896a <__debug_info+0x74>
    panic("null fmt");

  va_start(ap, fmt);
    80208932:	00840793          	addi	a5,s0,8
    80208936:	faf43423          	sd	a5,-88(s0)
  for(i = 0; (c = fmt[i] & 0xff) != 0; i++){
    8020893a:	0009c503          	lbu	a0,0(s3)
    8020893e:	14050863          	beqz	a0,80208a8e <__debug_info+0x198>
    80208942:	4481                	li	s1,0
    if(c != '%'){
    80208944:	02500a13          	li	s4,37
      continue;
    }
    c = fmt[++i] & 0xff;
    if(c == 0)
      break;
    switch(c){
    80208948:	4ad5                	li	s5,21
    8020894a:	0000a917          	auipc	s2,0xa
    8020894e:	e9690913          	addi	s2,s2,-362 # 802127e0 <rodata_start+0x7e0>
      printptr(va_arg(ap, uint64));
      break;
    case 's':
      if((s = va_arg(ap, char*)) == 0)
        s = "(null)";
      for(; *s; s++)
    80208952:	02800c13          	li	s8,40
    80208956:	a82d                	j	80208990 <__debug_info+0x9a>
    acquire(&pr.lock);
    80208958:	00863517          	auipc	a0,0x863
    8020895c:	55850513          	addi	a0,a0,1368 # 80a6beb0 <pr>
    80208960:	00000097          	auipc	ra,0x0
    80208964:	a16080e7          	jalr	-1514(ra) # 80208376 <acquire>
    80208968:	b7d9                	j	8020892e <__debug_info+0x38>
    panic("null fmt");
    8020896a:	0000a517          	auipc	a0,0xa
    8020896e:	e0650513          	addi	a0,a0,-506 # 80212770 <rodata_start+0x770>
    80208972:	00000097          	auipc	ra,0x0
    80208976:	d74080e7          	jalr	-652(ra) # 802086e6 <panic>
      consputc(c);
    8020897a:	00000097          	auipc	ra,0x0
    8020897e:	b9a080e7          	jalr	-1126(ra) # 80208514 <consputc>
  for(i = 0; (c = fmt[i] & 0xff) != 0; i++){
    80208982:	2485                	addiw	s1,s1,1
    80208984:	009987b3          	add	a5,s3,s1
    80208988:	0007c503          	lbu	a0,0(a5)
    8020898c:	10050163          	beqz	a0,80208a8e <__debug_info+0x198>
    if(c != '%'){
    80208990:	ff4515e3          	bne	a0,s4,8020897a <__debug_info+0x84>
    c = fmt[++i] & 0xff;
    80208994:	2485                	addiw	s1,s1,1
    80208996:	009987b3          	add	a5,s3,s1
    8020899a:	0007c783          	lbu	a5,0(a5)
    8020899e:	00078b1b          	sext.w	s6,a5
    if(c == 0)
    802089a2:	c7f5                	beqz	a5,80208a8e <__debug_info+0x198>
    switch(c){
    802089a4:	0d478463          	beq	a5,s4,80208a6c <__debug_info+0x176>
    802089a8:	f9d7871b          	addiw	a4,a5,-99
    802089ac:	0ff77713          	andi	a4,a4,255
    802089b0:	0ceae463          	bltu	s5,a4,80208a78 <__debug_info+0x182>
    802089b4:	f9d7879b          	addiw	a5,a5,-99
    802089b8:	0ff7f713          	andi	a4,a5,255
    802089bc:	0aeaee63          	bltu	s5,a4,80208a78 <__debug_info+0x182>
    802089c0:	00271793          	slli	a5,a4,0x2
    802089c4:	97ca                	add	a5,a5,s2
    802089c6:	439c                	lw	a5,0(a5)
    802089c8:	97ca                	add	a5,a5,s2
    802089ca:	8782                	jr	a5
      consputc(va_arg(ap, int));
    802089cc:	fa843783          	ld	a5,-88(s0)
    802089d0:	00878713          	addi	a4,a5,8
    802089d4:	fae43423          	sd	a4,-88(s0)
    802089d8:	4388                	lw	a0,0(a5)
    802089da:	00000097          	auipc	ra,0x0
    802089de:	b3a080e7          	jalr	-1222(ra) # 80208514 <consputc>
      break;
    802089e2:	b745                	j	80208982 <__debug_info+0x8c>
      printint(va_arg(ap, int), 10, 1);
    802089e4:	fa843783          	ld	a5,-88(s0)
    802089e8:	00878713          	addi	a4,a5,8
    802089ec:	fae43423          	sd	a4,-88(s0)
    802089f0:	4605                	li	a2,1
    802089f2:	45a9                	li	a1,10
    802089f4:	4388                	lw	a0,0(a5)
    802089f6:	00000097          	auipc	ra,0x0
    802089fa:	b58080e7          	jalr	-1192(ra) # 8020854e <printint>
      break;
    802089fe:	b751                	j	80208982 <__debug_info+0x8c>
      printint(va_arg(ap, int), 16, 1);
    80208a00:	fa843783          	ld	a5,-88(s0)
    80208a04:	00878713          	addi	a4,a5,8
    80208a08:	fae43423          	sd	a4,-88(s0)
    80208a0c:	4605                	li	a2,1
    80208a0e:	45c1                	li	a1,16
    80208a10:	4388                	lw	a0,0(a5)
    80208a12:	00000097          	auipc	ra,0x0
    80208a16:	b3c080e7          	jalr	-1220(ra) # 8020854e <printint>
      break;
    80208a1a:	b7a5                	j	80208982 <__debug_info+0x8c>
      printptr(va_arg(ap, uint64));
    80208a1c:	fa843783          	ld	a5,-88(s0)
    80208a20:	00878713          	addi	a4,a5,8
    80208a24:	fae43423          	sd	a4,-88(s0)
    80208a28:	6388                	ld	a0,0(a5)
    80208a2a:	00000097          	auipc	ra,0x0
    80208a2e:	bc6080e7          	jalr	-1082(ra) # 802085f0 <printptr>
      break;
    80208a32:	bf81                	j	80208982 <__debug_info+0x8c>
      if((s = va_arg(ap, char*)) == 0)
    80208a34:	fa843783          	ld	a5,-88(s0)
    80208a38:	00878713          	addi	a4,a5,8
    80208a3c:	fae43423          	sd	a4,-88(s0)
    80208a40:	0007bb03          	ld	s6,0(a5)
    80208a44:	000b0e63          	beqz	s6,80208a60 <__debug_info+0x16a>
      for(; *s; s++)
    80208a48:	000b4503          	lbu	a0,0(s6)
    80208a4c:	d91d                	beqz	a0,80208982 <__debug_info+0x8c>
        consputc(*s);
    80208a4e:	00000097          	auipc	ra,0x0
    80208a52:	ac6080e7          	jalr	-1338(ra) # 80208514 <consputc>
      for(; *s; s++)
    80208a56:	0b05                	addi	s6,s6,1
    80208a58:	000b4503          	lbu	a0,0(s6)
    80208a5c:	f96d                	bnez	a0,80208a4e <__debug_info+0x158>
    80208a5e:	b715                	j	80208982 <__debug_info+0x8c>
        s = "(null)";
    80208a60:	0000ab17          	auipc	s6,0xa
    80208a64:	d08b0b13          	addi	s6,s6,-760 # 80212768 <rodata_start+0x768>
      for(; *s; s++)
    80208a68:	8562                	mv	a0,s8
    80208a6a:	b7d5                	j	80208a4e <__debug_info+0x158>
      break;
    case '%':
      consputc('%');
    80208a6c:	8552                	mv	a0,s4
    80208a6e:	00000097          	auipc	ra,0x0
    80208a72:	aa6080e7          	jalr	-1370(ra) # 80208514 <consputc>
      break;
    80208a76:	b731                	j	80208982 <__debug_info+0x8c>
    default:
      // Print unknown % sequence to draw attention.
      consputc('%');
    80208a78:	8552                	mv	a0,s4
    80208a7a:	00000097          	auipc	ra,0x0
    80208a7e:	a9a080e7          	jalr	-1382(ra) # 80208514 <consputc>
      consputc(c);
    80208a82:	855a                	mv	a0,s6
    80208a84:	00000097          	auipc	ra,0x0
    80208a88:	a90080e7          	jalr	-1392(ra) # 80208514 <consputc>
      break;
    80208a8c:	bddd                	j	80208982 <__debug_info+0x8c>
    }
    
  }
  if(locking)
    80208a8e:	000b9e63          	bnez	s7,80208aaa <__debug_info+0x1b4>
    release(&pr.lock);
#endif    
}
    80208a92:	60e6                	ld	ra,88(sp)
    80208a94:	6446                	ld	s0,80(sp)
    80208a96:	64a6                	ld	s1,72(sp)
    80208a98:	6906                	ld	s2,64(sp)
    80208a9a:	79e2                	ld	s3,56(sp)
    80208a9c:	7a42                	ld	s4,48(sp)
    80208a9e:	7aa2                	ld	s5,40(sp)
    80208aa0:	7b02                	ld	s6,32(sp)
    80208aa2:	6be2                	ld	s7,24(sp)
    80208aa4:	6c42                	ld	s8,16(sp)
    80208aa6:	610d                	addi	sp,sp,160
    80208aa8:	8082                	ret
    release(&pr.lock);
    80208aaa:	00863517          	auipc	a0,0x863
    80208aae:	40650513          	addi	a0,a0,1030 # 80a6beb0 <pr>
    80208ab2:	00000097          	auipc	ra,0x0
    80208ab6:	918080e7          	jalr	-1768(ra) # 802083ca <release>
}
    80208aba:	bfe1                	j	80208a92 <__debug_info+0x19c>

0000000080208abc <__debug_warn>:

void
__debug_warn(char *fmt, ...){
    80208abc:	7135                	addi	sp,sp,-160
    80208abe:	ec86                	sd	ra,88(sp)
    80208ac0:	e8a2                	sd	s0,80(sp)
    80208ac2:	e4a6                	sd	s1,72(sp)
    80208ac4:	e0ca                	sd	s2,64(sp)
    80208ac6:	fc4e                	sd	s3,56(sp)
    80208ac8:	f852                	sd	s4,48(sp)
    80208aca:	f456                	sd	s5,40(sp)
    80208acc:	f05a                	sd	s6,32(sp)
    80208ace:	ec5e                	sd	s7,24(sp)
    80208ad0:	e862                	sd	s8,16(sp)
    80208ad2:	1080                	addi	s0,sp,96
    80208ad4:	89aa                	mv	s3,a0
    80208ad6:	e40c                	sd	a1,8(s0)
    80208ad8:	e810                	sd	a2,16(s0)
    80208ada:	ec14                	sd	a3,24(s0)
    80208adc:	f018                	sd	a4,32(s0)
    80208ade:	f41c                	sd	a5,40(s0)
    80208ae0:	03043823          	sd	a6,48(s0)
    80208ae4:	03143c23          	sd	a7,56(s0)
#ifdef WARNING
  va_list ap;
  int i, c;
  int locking;
  char *s;
  locking = pr.locking;
    80208ae8:	00863b97          	auipc	s7,0x863
    80208aec:	3e0bab83          	lw	s7,992(s7) # 80a6bec8 <pr+0x18>
  if(locking)
    80208af0:	020b9f63          	bnez	s7,80208b2e <__debug_warn+0x72>
    acquire(&pr.lock);
  
  if (fmt == 0)
    80208af4:	04098663          	beqz	s3,80208b40 <__debug_warn+0x84>
    panic("null fmt");
  printstring(warningstr);
    80208af8:	0080d517          	auipc	a0,0x80d
    80208afc:	52050513          	addi	a0,a0,1312 # 80a16018 <warningstr>
    80208b00:	00000097          	auipc	ra,0x0
    80208b04:	b4a080e7          	jalr	-1206(ra) # 8020864a <printstring>
  va_start(ap, fmt);
    80208b08:	00840793          	addi	a5,s0,8
    80208b0c:	faf43423          	sd	a5,-88(s0)
  for(i = 0; (c = fmt[i] & 0xff) != 0; i++){
    80208b10:	0009c503          	lbu	a0,0(s3)
    80208b14:	14050863          	beqz	a0,80208c64 <__debug_warn+0x1a8>
    80208b18:	4481                	li	s1,0
    if(c != '%'){
    80208b1a:	02500a13          	li	s4,37
      continue;
    }
    c = fmt[++i] & 0xff;
    if(c == 0)
      break;
    switch(c){
    80208b1e:	4ad5                	li	s5,21
    80208b20:	0000a917          	auipc	s2,0xa
    80208b24:	d1890913          	addi	s2,s2,-744 # 80212838 <rodata_start+0x838>
      printptr(va_arg(ap, uint64));
      break;
    case 's':
      if((s = va_arg(ap, char*)) == 0)
        s = "(null)";
      for(; *s; s++)
    80208b28:	02800c13          	li	s8,40
    80208b2c:	a82d                	j	80208b66 <__debug_warn+0xaa>
    acquire(&pr.lock);
    80208b2e:	00863517          	auipc	a0,0x863
    80208b32:	38250513          	addi	a0,a0,898 # 80a6beb0 <pr>
    80208b36:	00000097          	auipc	ra,0x0
    80208b3a:	840080e7          	jalr	-1984(ra) # 80208376 <acquire>
    80208b3e:	bf5d                	j	80208af4 <__debug_warn+0x38>
    panic("null fmt");
    80208b40:	0000a517          	auipc	a0,0xa
    80208b44:	c3050513          	addi	a0,a0,-976 # 80212770 <rodata_start+0x770>
    80208b48:	00000097          	auipc	ra,0x0
    80208b4c:	b9e080e7          	jalr	-1122(ra) # 802086e6 <panic>
      consputc(c);
    80208b50:	00000097          	auipc	ra,0x0
    80208b54:	9c4080e7          	jalr	-1596(ra) # 80208514 <consputc>
  for(i = 0; (c = fmt[i] & 0xff) != 0; i++){
    80208b58:	2485                	addiw	s1,s1,1
    80208b5a:	009987b3          	add	a5,s3,s1
    80208b5e:	0007c503          	lbu	a0,0(a5)
    80208b62:	10050163          	beqz	a0,80208c64 <__debug_warn+0x1a8>
    if(c != '%'){
    80208b66:	ff4515e3          	bne	a0,s4,80208b50 <__debug_warn+0x94>
    c = fmt[++i] & 0xff;
    80208b6a:	2485                	addiw	s1,s1,1
    80208b6c:	009987b3          	add	a5,s3,s1
    80208b70:	0007c783          	lbu	a5,0(a5)
    80208b74:	00078b1b          	sext.w	s6,a5
    if(c == 0)
    80208b78:	c7f5                	beqz	a5,80208c64 <__debug_warn+0x1a8>
    switch(c){
    80208b7a:	0d478463          	beq	a5,s4,80208c42 <__debug_warn+0x186>
    80208b7e:	f9d7871b          	addiw	a4,a5,-99
    80208b82:	0ff77713          	andi	a4,a4,255
    80208b86:	0ceae463          	bltu	s5,a4,80208c4e <__debug_warn+0x192>
    80208b8a:	f9d7879b          	addiw	a5,a5,-99
    80208b8e:	0ff7f713          	andi	a4,a5,255
    80208b92:	0aeaee63          	bltu	s5,a4,80208c4e <__debug_warn+0x192>
    80208b96:	00271793          	slli	a5,a4,0x2
    80208b9a:	97ca                	add	a5,a5,s2
    80208b9c:	439c                	lw	a5,0(a5)
    80208b9e:	97ca                	add	a5,a5,s2
    80208ba0:	8782                	jr	a5
      consputc(va_arg(ap, int));
    80208ba2:	fa843783          	ld	a5,-88(s0)
    80208ba6:	00878713          	addi	a4,a5,8
    80208baa:	fae43423          	sd	a4,-88(s0)
    80208bae:	4388                	lw	a0,0(a5)
    80208bb0:	00000097          	auipc	ra,0x0
    80208bb4:	964080e7          	jalr	-1692(ra) # 80208514 <consputc>
      break;
    80208bb8:	b745                	j	80208b58 <__debug_warn+0x9c>
      printint(va_arg(ap, int), 10, 1);
    80208bba:	fa843783          	ld	a5,-88(s0)
    80208bbe:	00878713          	addi	a4,a5,8
    80208bc2:	fae43423          	sd	a4,-88(s0)
    80208bc6:	4605                	li	a2,1
    80208bc8:	45a9                	li	a1,10
    80208bca:	4388                	lw	a0,0(a5)
    80208bcc:	00000097          	auipc	ra,0x0
    80208bd0:	982080e7          	jalr	-1662(ra) # 8020854e <printint>
      break;
    80208bd4:	b751                	j	80208b58 <__debug_warn+0x9c>
      printint(va_arg(ap, int), 16, 1);
    80208bd6:	fa843783          	ld	a5,-88(s0)
    80208bda:	00878713          	addi	a4,a5,8
    80208bde:	fae43423          	sd	a4,-88(s0)
    80208be2:	4605                	li	a2,1
    80208be4:	45c1                	li	a1,16
    80208be6:	4388                	lw	a0,0(a5)
    80208be8:	00000097          	auipc	ra,0x0
    80208bec:	966080e7          	jalr	-1690(ra) # 8020854e <printint>
      break;
    80208bf0:	b7a5                	j	80208b58 <__debug_warn+0x9c>
      printptr(va_arg(ap, uint64));
    80208bf2:	fa843783          	ld	a5,-88(s0)
    80208bf6:	00878713          	addi	a4,a5,8
    80208bfa:	fae43423          	sd	a4,-88(s0)
    80208bfe:	6388                	ld	a0,0(a5)
    80208c00:	00000097          	auipc	ra,0x0
    80208c04:	9f0080e7          	jalr	-1552(ra) # 802085f0 <printptr>
      break;
    80208c08:	bf81                	j	80208b58 <__debug_warn+0x9c>
      if((s = va_arg(ap, char*)) == 0)
    80208c0a:	fa843783          	ld	a5,-88(s0)
    80208c0e:	00878713          	addi	a4,a5,8
    80208c12:	fae43423          	sd	a4,-88(s0)
    80208c16:	0007bb03          	ld	s6,0(a5)
    80208c1a:	000b0e63          	beqz	s6,80208c36 <__debug_warn+0x17a>
      for(; *s; s++)
    80208c1e:	000b4503          	lbu	a0,0(s6)
    80208c22:	d91d                	beqz	a0,80208b58 <__debug_warn+0x9c>
        consputc(*s);
    80208c24:	00000097          	auipc	ra,0x0
    80208c28:	8f0080e7          	jalr	-1808(ra) # 80208514 <consputc>
      for(; *s; s++)
    80208c2c:	0b05                	addi	s6,s6,1
    80208c2e:	000b4503          	lbu	a0,0(s6)
    80208c32:	f96d                	bnez	a0,80208c24 <__debug_warn+0x168>
    80208c34:	b715                	j	80208b58 <__debug_warn+0x9c>
        s = "(null)";
    80208c36:	0000ab17          	auipc	s6,0xa
    80208c3a:	b32b0b13          	addi	s6,s6,-1230 # 80212768 <rodata_start+0x768>
      for(; *s; s++)
    80208c3e:	8562                	mv	a0,s8
    80208c40:	b7d5                	j	80208c24 <__debug_warn+0x168>
      break;
    case '%':
      consputc('%');
    80208c42:	8552                	mv	a0,s4
    80208c44:	00000097          	auipc	ra,0x0
    80208c48:	8d0080e7          	jalr	-1840(ra) # 80208514 <consputc>
      break;
    80208c4c:	b731                	j	80208b58 <__debug_warn+0x9c>
    default:
      // Print unknown % sequence to draw attention.
      consputc('%');
    80208c4e:	8552                	mv	a0,s4
    80208c50:	00000097          	auipc	ra,0x0
    80208c54:	8c4080e7          	jalr	-1852(ra) # 80208514 <consputc>
      consputc(c);
    80208c58:	855a                	mv	a0,s6
    80208c5a:	00000097          	auipc	ra,0x0
    80208c5e:	8ba080e7          	jalr	-1862(ra) # 80208514 <consputc>
      break;
    80208c62:	bddd                	j	80208b58 <__debug_warn+0x9c>
    }
    
  }
  if(locking)
    80208c64:	000b9e63          	bnez	s7,80208c80 <__debug_warn+0x1c4>
    release(&pr.lock);
#endif
}
    80208c68:	60e6                	ld	ra,88(sp)
    80208c6a:	6446                	ld	s0,80(sp)
    80208c6c:	64a6                	ld	s1,72(sp)
    80208c6e:	6906                	ld	s2,64(sp)
    80208c70:	79e2                	ld	s3,56(sp)
    80208c72:	7a42                	ld	s4,48(sp)
    80208c74:	7aa2                	ld	s5,40(sp)
    80208c76:	7b02                	ld	s6,32(sp)
    80208c78:	6be2                	ld	s7,24(sp)
    80208c7a:	6c42                	ld	s8,16(sp)
    80208c7c:	610d                	addi	sp,sp,160
    80208c7e:	8082                	ret
    release(&pr.lock);
    80208c80:	00863517          	auipc	a0,0x863
    80208c84:	23050513          	addi	a0,a0,560 # 80a6beb0 <pr>
    80208c88:	fffff097          	auipc	ra,0xfffff
    80208c8c:	742080e7          	jalr	1858(ra) # 802083ca <release>
}
    80208c90:	bfe1                	j	80208c68 <__debug_warn+0x1ac>

0000000080208c92 <__debug_error>:

void
__debug_error(char *fmt, ...){
    80208c92:	7135                	addi	sp,sp,-160
    80208c94:	ec86                	sd	ra,88(sp)
    80208c96:	e8a2                	sd	s0,80(sp)
    80208c98:	e4a6                	sd	s1,72(sp)
    80208c9a:	e0ca                	sd	s2,64(sp)
    80208c9c:	fc4e                	sd	s3,56(sp)
    80208c9e:	f852                	sd	s4,48(sp)
    80208ca0:	f456                	sd	s5,40(sp)
    80208ca2:	f05a                	sd	s6,32(sp)
    80208ca4:	ec5e                	sd	s7,24(sp)
    80208ca6:	e862                	sd	s8,16(sp)
    80208ca8:	1080                	addi	s0,sp,96
    80208caa:	8a2a                	mv	s4,a0
    80208cac:	e40c                	sd	a1,8(s0)
    80208cae:	e810                	sd	a2,16(s0)
    80208cb0:	ec14                	sd	a3,24(s0)
    80208cb2:	f018                	sd	a4,32(s0)
    80208cb4:	f41c                	sd	a5,40(s0)
    80208cb6:	03043823          	sd	a6,48(s0)
    80208cba:	03143c23          	sd	a7,56(s0)
#ifdef ERROR
  va_list ap;
  int i, c;
  int locking;
  char *s;
  locking = pr.locking;
    80208cbe:	00863b17          	auipc	s6,0x863
    80208cc2:	20ab2b03          	lw	s6,522(s6) # 80a6bec8 <pr+0x18>
  if(locking)
    80208cc6:	020b1f63          	bnez	s6,80208d04 <__debug_error+0x72>
    acquire(&pr.lock);
  
  if (fmt == 0)
    80208cca:	040a0663          	beqz	s4,80208d16 <__debug_error+0x84>
    panic("null fmt");

  printstring(errorstr);
    80208cce:	0080d517          	auipc	a0,0x80d
    80208cd2:	37250513          	addi	a0,a0,882 # 80a16040 <errorstr>
    80208cd6:	00000097          	auipc	ra,0x0
    80208cda:	974080e7          	jalr	-1676(ra) # 8020864a <printstring>
  va_start(ap, fmt);
    80208cde:	00840793          	addi	a5,s0,8
    80208ce2:	faf43423          	sd	a5,-88(s0)
  for(i = 0; (c = fmt[i] & 0xff) != 0; i++){
    80208ce6:	000a4503          	lbu	a0,0(s4)
    80208cea:	14050863          	beqz	a0,80208e3a <__debug_error+0x1a8>
    80208cee:	4981                	li	s3,0
    if(c != '%'){
    80208cf0:	02500a93          	li	s5,37
      continue;
    }
    c = fmt[++i] & 0xff;
    if(c == 0)
      break;
    switch(c){
    80208cf4:	4955                	li	s2,21
    80208cf6:	0000a497          	auipc	s1,0xa
    80208cfa:	b9a48493          	addi	s1,s1,-1126 # 80212890 <rodata_start+0x890>
      printptr(va_arg(ap, uint64));
      break;
    case 's':
      if((s = va_arg(ap, char*)) == 0)
        s = "(null)";
      for(; *s; s++)
    80208cfe:	02800c13          	li	s8,40
    80208d02:	a82d                	j	80208d3c <__debug_error+0xaa>
    acquire(&pr.lock);
    80208d04:	00863517          	auipc	a0,0x863
    80208d08:	1ac50513          	addi	a0,a0,428 # 80a6beb0 <pr>
    80208d0c:	fffff097          	auipc	ra,0xfffff
    80208d10:	66a080e7          	jalr	1642(ra) # 80208376 <acquire>
    80208d14:	bf5d                	j	80208cca <__debug_error+0x38>
    panic("null fmt");
    80208d16:	0000a517          	auipc	a0,0xa
    80208d1a:	a5a50513          	addi	a0,a0,-1446 # 80212770 <rodata_start+0x770>
    80208d1e:	00000097          	auipc	ra,0x0
    80208d22:	9c8080e7          	jalr	-1592(ra) # 802086e6 <panic>
      consputc(c);
    80208d26:	fffff097          	auipc	ra,0xfffff
    80208d2a:	7ee080e7          	jalr	2030(ra) # 80208514 <consputc>
  for(i = 0; (c = fmt[i] & 0xff) != 0; i++){
    80208d2e:	2985                	addiw	s3,s3,1
    80208d30:	013a07b3          	add	a5,s4,s3
    80208d34:	0007c503          	lbu	a0,0(a5)
    80208d38:	10050163          	beqz	a0,80208e3a <__debug_error+0x1a8>
    if(c != '%'){
    80208d3c:	ff5515e3          	bne	a0,s5,80208d26 <__debug_error+0x94>
    c = fmt[++i] & 0xff;
    80208d40:	2985                	addiw	s3,s3,1
    80208d42:	013a07b3          	add	a5,s4,s3
    80208d46:	0007c783          	lbu	a5,0(a5)
    80208d4a:	00078b9b          	sext.w	s7,a5
    if(c == 0)
    80208d4e:	c7f5                	beqz	a5,80208e3a <__debug_error+0x1a8>
    switch(c){
    80208d50:	0d578463          	beq	a5,s5,80208e18 <__debug_error+0x186>
    80208d54:	f9d7871b          	addiw	a4,a5,-99
    80208d58:	0ff77713          	andi	a4,a4,255
    80208d5c:	0ce96463          	bltu	s2,a4,80208e24 <__debug_error+0x192>
    80208d60:	f9d7879b          	addiw	a5,a5,-99
    80208d64:	0ff7f713          	andi	a4,a5,255
    80208d68:	0ae96e63          	bltu	s2,a4,80208e24 <__debug_error+0x192>
    80208d6c:	00271793          	slli	a5,a4,0x2
    80208d70:	97a6                	add	a5,a5,s1
    80208d72:	439c                	lw	a5,0(a5)
    80208d74:	97a6                	add	a5,a5,s1
    80208d76:	8782                	jr	a5
      consputc(va_arg(ap, int));
    80208d78:	fa843783          	ld	a5,-88(s0)
    80208d7c:	00878713          	addi	a4,a5,8
    80208d80:	fae43423          	sd	a4,-88(s0)
    80208d84:	4388                	lw	a0,0(a5)
    80208d86:	fffff097          	auipc	ra,0xfffff
    80208d8a:	78e080e7          	jalr	1934(ra) # 80208514 <consputc>
      break;
    80208d8e:	b745                	j	80208d2e <__debug_error+0x9c>
      printint(va_arg(ap, int), 10, 1);
    80208d90:	fa843783          	ld	a5,-88(s0)
    80208d94:	00878713          	addi	a4,a5,8
    80208d98:	fae43423          	sd	a4,-88(s0)
    80208d9c:	4605                	li	a2,1
    80208d9e:	45a9                	li	a1,10
    80208da0:	4388                	lw	a0,0(a5)
    80208da2:	fffff097          	auipc	ra,0xfffff
    80208da6:	7ac080e7          	jalr	1964(ra) # 8020854e <printint>
      break;
    80208daa:	b751                	j	80208d2e <__debug_error+0x9c>
      printint(va_arg(ap, int), 16, 1);
    80208dac:	fa843783          	ld	a5,-88(s0)
    80208db0:	00878713          	addi	a4,a5,8
    80208db4:	fae43423          	sd	a4,-88(s0)
    80208db8:	4605                	li	a2,1
    80208dba:	45c1                	li	a1,16
    80208dbc:	4388                	lw	a0,0(a5)
    80208dbe:	fffff097          	auipc	ra,0xfffff
    80208dc2:	790080e7          	jalr	1936(ra) # 8020854e <printint>
      break;
    80208dc6:	b7a5                	j	80208d2e <__debug_error+0x9c>
      printptr(va_arg(ap, uint64));
    80208dc8:	fa843783          	ld	a5,-88(s0)
    80208dcc:	00878713          	addi	a4,a5,8
    80208dd0:	fae43423          	sd	a4,-88(s0)
    80208dd4:	6388                	ld	a0,0(a5)
    80208dd6:	00000097          	auipc	ra,0x0
    80208dda:	81a080e7          	jalr	-2022(ra) # 802085f0 <printptr>
      break;
    80208dde:	bf81                	j	80208d2e <__debug_error+0x9c>
      if((s = va_arg(ap, char*)) == 0)
    80208de0:	fa843783          	ld	a5,-88(s0)
    80208de4:	00878713          	addi	a4,a5,8
    80208de8:	fae43423          	sd	a4,-88(s0)
    80208dec:	0007bb83          	ld	s7,0(a5)
    80208df0:	000b8e63          	beqz	s7,80208e0c <__debug_error+0x17a>
      for(; *s; s++)
    80208df4:	000bc503          	lbu	a0,0(s7)
    80208df8:	d91d                	beqz	a0,80208d2e <__debug_error+0x9c>
        consputc(*s);
    80208dfa:	fffff097          	auipc	ra,0xfffff
    80208dfe:	71a080e7          	jalr	1818(ra) # 80208514 <consputc>
      for(; *s; s++)
    80208e02:	0b85                	addi	s7,s7,1
    80208e04:	000bc503          	lbu	a0,0(s7)
    80208e08:	f96d                	bnez	a0,80208dfa <__debug_error+0x168>
    80208e0a:	b715                	j	80208d2e <__debug_error+0x9c>
        s = "(null)";
    80208e0c:	0000ab97          	auipc	s7,0xa
    80208e10:	95cb8b93          	addi	s7,s7,-1700 # 80212768 <rodata_start+0x768>
      for(; *s; s++)
    80208e14:	8562                	mv	a0,s8
    80208e16:	b7d5                	j	80208dfa <__debug_error+0x168>
      break;
    case '%':
      consputc('%');
    80208e18:	8556                	mv	a0,s5
    80208e1a:	fffff097          	auipc	ra,0xfffff
    80208e1e:	6fa080e7          	jalr	1786(ra) # 80208514 <consputc>
      break;
    80208e22:	b731                	j	80208d2e <__debug_error+0x9c>
    default:
      // Print unknown % sequence to draw attention.
      consputc('%');
    80208e24:	8556                	mv	a0,s5
    80208e26:	fffff097          	auipc	ra,0xfffff
    80208e2a:	6ee080e7          	jalr	1774(ra) # 80208514 <consputc>
      consputc(c);
    80208e2e:	855e                	mv	a0,s7
    80208e30:	fffff097          	auipc	ra,0xfffff
    80208e34:	6e4080e7          	jalr	1764(ra) # 80208514 <consputc>
      break;
    80208e38:	bddd                	j	80208d2e <__debug_error+0x9c>
    }
    
  }
  if(locking)
    80208e3a:	000b1c63          	bnez	s6,80208e52 <__debug_error+0x1c0>
    release(&pr.lock);
  
  backtrace();
    80208e3e:	00000097          	auipc	ra,0x0
    80208e42:	838080e7          	jalr	-1992(ra) # 80208676 <backtrace>
  panicked = 1; // freeze uart output from other CPUs
    80208e46:	4785                	li	a5,1
    80208e48:	00863717          	auipc	a4,0x863
    80208e4c:	08f72423          	sw	a5,136(a4) # 80a6bed0 <panicked>
  for(;;)
    80208e50:	a001                	j	80208e50 <__debug_error+0x1be>
    release(&pr.lock);
    80208e52:	00863517          	auipc	a0,0x863
    80208e56:	05e50513          	addi	a0,a0,94 # 80a6beb0 <pr>
    80208e5a:	fffff097          	auipc	ra,0xfffff
    80208e5e:	570080e7          	jalr	1392(ra) # 802083ca <release>
    80208e62:	bff1                	j	80208e3e <__debug_error+0x1ac>

0000000080208e64 <printfinit>:
#endif
}

void
printfinit(void)
{
    80208e64:	1101                	addi	sp,sp,-32
    80208e66:	ec06                	sd	ra,24(sp)
    80208e68:	e822                	sd	s0,16(sp)
    80208e6a:	e426                	sd	s1,8(sp)
    80208e6c:	1000                	addi	s0,sp,32
  initlock(&pr.lock, "pr");
    80208e6e:	00863497          	auipc	s1,0x863
    80208e72:	04248493          	addi	s1,s1,66 # 80a6beb0 <pr>
    80208e76:	0000a597          	auipc	a1,0xa
    80208e7a:	90a58593          	addi	a1,a1,-1782 # 80212780 <rodata_start+0x780>
    80208e7e:	8526                	mv	a0,s1
    80208e80:	fffff097          	auipc	ra,0xfffff
    80208e84:	4b2080e7          	jalr	1202(ra) # 80208332 <initlock>
  pr.locking = 1;   // changed, used to be 1
    80208e88:	4785                	li	a5,1
    80208e8a:	cc9c                	sw	a5,24(s1)
}
    80208e8c:	60e2                	ld	ra,24(sp)
    80208e8e:	6442                	ld	s0,16(sp)
    80208e90:	64a2                	ld	s1,8(sp)
    80208e92:	6105                	addi	sp,sp,32
    80208e94:	8082                	ret

0000000080208e96 <print_logo>:
    printf(" /  .'.  \\ \\-'\\   /   \\  `-' /        \\       / |  |'->  `|  |_)  |  |'->\\-'\\   /    |  `---.,------.)\\  '-'(_ .'\n");
    printf("`--'   '--'    `-'     `----'          `-----'  `--'      `--'    `--'       `-'     `------'`------'  `-----'   \n");
*/
}
#else
void print_logo() {
    80208e96:	1141                	addi	sp,sp,-16
    80208e98:	e422                	sd	s0,8(sp)
    80208e9a:	0800                	addi	s0,sp,16
    printf("   \\   \\ |    \\   '   /, | .-.  '  (,------. (_|  | |  |  (|  '--.   |  |'.'|  |  |  |_|( OO )\n");
    printf("  .'    \\_)    \\     /__)' \\  |  |  '------'   |  | |  |   |  .--'   |  |   |  |  |  | | `-' /\n");
    printf(" /  .'.  \\      \\   /    \\  `'  /              '  '-'  '-. |  `---.  |  |   |  | ('  '-'(_.-'\n");
    printf("'--'   '--'      `-'      `----'                `-----'--' `------'  `--'   `--'   `-----'\n");
*/
}
    80208e9c:	6422                	ld	s0,8(sp)
    80208e9e:	0141                	addi	sp,sp,16
    80208ea0:	8082                	ret

0000000080208ea2 <__mul_alloc_no_lock>:
	__debug_info("[multiple] %d [single] %d\n", multiple.npage, single.npage);
}


// Allocate n pages 
static void *__mul_alloc_no_lock(uint64 n) {
    80208ea2:	1141                	addi	sp,sp,-16
    80208ea4:	e422                	sd	s0,8(sp)
    80208ea6:	0800                	addi	s0,sp,16
    80208ea8:	872a                	mv	a4,a0
	struct run *pa;
	struct run **pprev;

	pa = multiple.freelist;
    80208eaa:	00863517          	auipc	a0,0x863
    80208eae:	04653503          	ld	a0,70(a0) # 80a6bef0 <multiple+0x18>
	pprev = &(multiple.freelist);

	while (NULL != pa) {
    80208eb2:	cd05                	beqz	a0,80208eea <__mul_alloc_no_lock+0x48>
	pprev = &(multiple.freelist);
    80208eb4:	00863697          	auipc	a3,0x863
    80208eb8:	03c68693          	addi	a3,a3,60 # 80a6bef0 <multiple+0x18>
		if (pa->npage >= n) {
    80208ebc:	651c                	ld	a5,8(a0)
    80208ebe:	00e7f663          	bgeu	a5,a4,80208eca <__mul_alloc_no_lock+0x28>

			multiple.npage -= n;
			break;
		}

		pprev = &(pa->next);
    80208ec2:	86aa                	mv	a3,a0
		pa = pa->next;
    80208ec4:	6108                	ld	a0,0(a0)
	while (NULL != pa) {
    80208ec6:	f97d                	bnez	a0,80208ebc <__mul_alloc_no_lock+0x1a>
    80208ec8:	a00d                	j	80208eea <__mul_alloc_no_lock+0x48>
				(uint64)pa + PGSIZE * (pa->npage - n)
    80208eca:	8f99                	sub	a5,a5,a4
    80208ecc:	00c79613          	slli	a2,a5,0xc
    80208ed0:	962a                	add	a2,a2,a0
			if (pa == ret) {	// this block is used up, remove it
    80208ed2:	00a60f63          	beq	a2,a0,80208ef0 <__mul_alloc_no_lock+0x4e>
				pa->npage -= n;
    80208ed6:	e51c                	sd	a5,8(a0)
				pa = ret;
    80208ed8:	8532                	mv	a0,a2
			multiple.npage -= n;
    80208eda:	00863697          	auipc	a3,0x863
    80208ede:	ffe68693          	addi	a3,a3,-2 # 80a6bed8 <multiple>
    80208ee2:	729c                	ld	a5,32(a3)
    80208ee4:	40e78733          	sub	a4,a5,a4
    80208ee8:	f298                	sd	a4,32(a3)
	}

	return (void*)pa;
}
    80208eea:	6422                	ld	s0,8(sp)
    80208eec:	0141                	addi	sp,sp,16
    80208eee:	8082                	ret
				*pprev = pa->next;
    80208ef0:	611c                	ld	a5,0(a0)
    80208ef2:	e29c                	sd	a5,0(a3)
    80208ef4:	b7dd                	j	80208eda <__mul_alloc_no_lock+0x38>

0000000080208ef6 <__mul_free_no_lock>:

// free n pages
static void __mul_free_no_lock(uint64 start, uint64 n) {
    80208ef6:	1141                	addi	sp,sp,-16
    80208ef8:	e422                	sd	s0,8(sp)
    80208efa:	0800                	addi	s0,sp,16
	if (NULL == multiple.freelist) {
    80208efc:	00863797          	auipc	a5,0x863
    80208f00:	ff47b783          	ld	a5,-12(a5) # 80a6bef0 <multiple+0x18>
    80208f04:	c7a1                	beqz	a5,80208f4c <__mul_free_no_lock+0x56>
	}

	struct run *prev = NULL;
	struct run *next = multiple.freelist;
	while (NULL != next) {
		if ((uint64)next > start) {
    80208f06:	06f56963          	bltu	a0,a5,80208f78 <__mul_free_no_lock+0x82>
			break;
		}
		else {
			prev = next;
			next = next->next;
    80208f0a:	873e                	mv	a4,a5
    80208f0c:	639c                	ld	a5,0(a5)
	while (NULL != next) {
    80208f0e:	c399                	beqz	a5,80208f14 <__mul_free_no_lock+0x1e>
		if ((uint64)next > start) {
    80208f10:	fef57de3          	bgeu	a0,a5,80208f0a <__mul_free_no_lock+0x14>
		}
	}

	struct run *pa = (struct run*)start;
    80208f14:	86aa                	mv	a3,a0
	pa->next = next;
    80208f16:	e11c                	sd	a5,0(a0)
	pa->npage = n;
    80208f18:	e50c                	sd	a1,8(a0)

	// merge with previous 
	if (NULL != prev) {
		if (((uint64)prev + prev->npage * PGSIZE) == (uint64)pa) {
    80208f1a:	00873803          	ld	a6,8(a4)
    80208f1e:	00c81613          	slli	a2,a6,0xc
    80208f22:	963a                	add	a2,a2,a4
    80208f24:	02a60f63          	beq	a2,a0,80208f62 <__mul_free_no_lock+0x6c>
			prev->npage += n;
			pa = prev;
		}
		else {
			prev->next = pa;
    80208f28:	e308                	sd	a0,0(a4)
		multiple.freelist = pa;
		pa->npage = n;
	}

	// merge with next 
	if (NULL != next) {
    80208f2a:	c799                	beqz	a5,80208f38 <__mul_free_no_lock+0x42>
		if (((uint64)pa + pa->npage * PGSIZE) == (uint64)next) {
    80208f2c:	6690                	ld	a2,8(a3)
    80208f2e:	00c61713          	slli	a4,a2,0xc
    80208f32:	9736                	add	a4,a4,a3
    80208f34:	02e78c63          	beq	a5,a4,80208f6c <__mul_free_no_lock+0x76>
			pa->npage += next->npage;
			pa->next = next->next;
		}
	}

	multiple.npage += n;
    80208f38:	00863717          	auipc	a4,0x863
    80208f3c:	fa070713          	addi	a4,a4,-96 # 80a6bed8 <multiple>
    80208f40:	731c                	ld	a5,32(a4)
    80208f42:	95be                	add	a1,a1,a5
    80208f44:	f30c                	sd	a1,32(a4)
}
    80208f46:	6422                	ld	s0,8(sp)
    80208f48:	0141                	addi	sp,sp,16
    80208f4a:	8082                	ret
		multiple.freelist = (struct run*)start;
    80208f4c:	00863797          	auipc	a5,0x863
    80208f50:	f8c78793          	addi	a5,a5,-116 # 80a6bed8 <multiple>
    80208f54:	ef88                	sd	a0,24(a5)
		multiple.freelist->npage = n;
    80208f56:	e50c                	sd	a1,8(a0)
		multiple.freelist->next = NULL;
    80208f58:	6f98                	ld	a4,24(a5)
    80208f5a:	00073023          	sd	zero,0(a4)
		multiple.npage = n;
    80208f5e:	f38c                	sd	a1,32(a5)
		return ;
    80208f60:	b7dd                	j	80208f46 <__mul_free_no_lock+0x50>
			prev->npage += n;
    80208f62:	982e                	add	a6,a6,a1
    80208f64:	01073423          	sd	a6,8(a4)
			pa = prev;
    80208f68:	86ba                	mv	a3,a4
    80208f6a:	b7c1                	j	80208f2a <__mul_free_no_lock+0x34>
			pa->npage += next->npage;
    80208f6c:	6798                	ld	a4,8(a5)
    80208f6e:	963a                	add	a2,a2,a4
    80208f70:	e690                	sd	a2,8(a3)
			pa->next = next->next;
    80208f72:	639c                	ld	a5,0(a5)
    80208f74:	e29c                	sd	a5,0(a3)
    80208f76:	b7c9                	j	80208f38 <__mul_free_no_lock+0x42>
	struct run *pa = (struct run*)start;
    80208f78:	86aa                	mv	a3,a0
	pa->next = next;
    80208f7a:	e11c                	sd	a5,0(a0)
		multiple.freelist = pa;
    80208f7c:	00863717          	auipc	a4,0x863
    80208f80:	f6a73a23          	sd	a0,-140(a4) # 80a6bef0 <multiple+0x18>
		pa->npage = n;
    80208f84:	e50c                	sd	a1,8(a0)
	if (NULL != next) {
    80208f86:	b75d                	j	80208f2c <__mul_free_no_lock+0x36>

0000000080208f88 <print_free_page_n>:
{
    80208f88:	1141                	addi	sp,sp,-16
    80208f8a:	e406                	sd	ra,8(sp)
    80208f8c:	e022                	sd	s0,0(sp)
    80208f8e:	0800                	addi	s0,sp,16
	__debug_info("[multiple] %d [single] %d\n", multiple.npage, single.npage);
    80208f90:	00863797          	auipc	a5,0x863
    80208f94:	f4878793          	addi	a5,a5,-184 # 80a6bed8 <multiple>
    80208f98:	67b0                	ld	a2,72(a5)
    80208f9a:	738c                	ld	a1,32(a5)
    80208f9c:	0000a517          	auipc	a0,0xa
    80208fa0:	96450513          	addi	a0,a0,-1692 # 80212900 <digits+0x18>
    80208fa4:	00000097          	auipc	ra,0x0
    80208fa8:	952080e7          	jalr	-1710(ra) # 802088f6 <__debug_info>
}
    80208fac:	60a2                	ld	ra,8(sp)
    80208fae:	6402                	ld	s0,0(sp)
    80208fb0:	0141                	addi	sp,sp,16
    80208fb2:	8082                	ret

0000000080208fb4 <kpminit>:
		start += PGSIZE;
	}
	__leave_sin_cs 
}

void kpminit(void) {
    80208fb4:	7139                	addi	sp,sp,-64
    80208fb6:	fc06                	sd	ra,56(sp)
    80208fb8:	f822                	sd	s0,48(sp)
    80208fba:	f426                	sd	s1,40(sp)
    80208fbc:	f04a                	sd	s2,32(sp)
    80208fbe:	ec4e                	sd	s3,24(sp)
    80208fc0:	e852                	sd	s4,16(sp)
    80208fc2:	e456                	sd	s5,8(sp)
    80208fc4:	0080                	addi	s0,sp,64
	// init multiple 
	multiple.freelist = NULL;
    80208fc6:	00863917          	auipc	s2,0x863
    80208fca:	f1290913          	addi	s2,s2,-238 # 80a6bed8 <multiple>
    80208fce:	00093c23          	sd	zero,24(s2)
	multiple.npage = 0;
    80208fd2:	02093023          	sd	zero,32(s2)
	initlock(&multiple.lock, "multi-lock");
    80208fd6:	0000a597          	auipc	a1,0xa
    80208fda:	94a58593          	addi	a1,a1,-1718 # 80212920 <digits+0x38>
    80208fde:	854a                	mv	a0,s2
    80208fe0:	fffff097          	auipc	ra,0xfffff
    80208fe4:	352080e7          	jalr	850(ra) # 80208332 <initlock>

	// init single 
	single.freelist = NULL;
    80208fe8:	04093023          	sd	zero,64(s2)
	single.npage = 0;
    80208fec:	04093423          	sd	zero,72(s2)
	initlock(&single.lock, "single-lock");
    80208ff0:	00863a17          	auipc	s4,0x863
    80208ff4:	f10a0a13          	addi	s4,s4,-240 # 80a6bf00 <single>
    80208ff8:	0000a597          	auipc	a1,0xa
    80208ffc:	93858593          	addi	a1,a1,-1736 # 80212930 <digits+0x48>
    80209000:	8552                	mv	a0,s4
    80209002:	fffff097          	auipc	ra,0xfffff
    80209006:	330080e7          	jalr	816(ra) # 80208332 <initlock>

	__mul_freerange((uint64)kernel_end, START_SINGLE);
    8020900a:	0080d497          	auipc	s1,0x80d
    8020900e:	03e48493          	addi	s1,s1,62 # 80a16048 <START_SINGLE>
	uint64 start = PGROUNDUP(pa_start);
    80209012:	7afd                	lui	s5,0xfffff
    80209014:	00865997          	auipc	s3,0x865
    80209018:	feb98993          	addi	s3,s3,-21 # 80a6dfff <kernel_end+0xfff>
    8020901c:	0159f7b3          	and	a5,s3,s5
	uint64 npage = (pa_end - start) / PGSIZE;
    80209020:	0004b983          	ld	s3,0(s1)
    80209024:	40f989b3          	sub	s3,s3,a5
    80209028:	00c9d993          	srli	s3,s3,0xc
	__enter_mul_cs 
    8020902c:	854a                	mv	a0,s2
    8020902e:	fffff097          	auipc	ra,0xfffff
    80209032:	348080e7          	jalr	840(ra) # 80208376 <acquire>
	__mul_free_no_lock(pa_start, npage);
    80209036:	85ce                	mv	a1,s3
    80209038:	00864517          	auipc	a0,0x864
    8020903c:	fc850513          	addi	a0,a0,-56 # 80a6d000 <kernel_end>
    80209040:	00000097          	auipc	ra,0x0
    80209044:	eb6080e7          	jalr	-330(ra) # 80208ef6 <__mul_free_no_lock>
	__leave_mul_cs 
    80209048:	854a                	mv	a0,s2
    8020904a:	fffff097          	auipc	ra,0xfffff
    8020904e:	380080e7          	jalr	896(ra) # 802083ca <release>
	uint64 start = PGROUNDUP(pa_start);
    80209052:	6084                	ld	s1,0(s1)
    80209054:	6785                	lui	a5,0x1
    80209056:	17fd                	addi	a5,a5,-1
    80209058:	94be                	add	s1,s1,a5
    8020905a:	0154f4b3          	and	s1,s1,s5
	__enter_sin_cs 
    8020905e:	8552                	mv	a0,s4
    80209060:	fffff097          	auipc	ra,0xfffff
    80209064:	316080e7          	jalr	790(ra) # 80208376 <acquire>
	while (start < pa_end) {
    80209068:	47c5                	li	a5,17
    8020906a:	07ee                	slli	a5,a5,0x1b
    8020906c:	00f4ff63          	bgeu	s1,a5,8020908a <kpminit+0xd6>
	page->next = single.freelist;
    80209070:	87ca                	mv	a5,s2
		start += PGSIZE;
    80209072:	6605                	lui	a2,0x1
	while (start < pa_end) {
    80209074:	46c5                	li	a3,17
    80209076:	06ee                	slli	a3,a3,0x1b
	page->next = single.freelist;
    80209078:	63b8                	ld	a4,64(a5)
    8020907a:	e098                	sd	a4,0(s1)
	single.freelist = page;
    8020907c:	e3a4                	sd	s1,64(a5)
	single.npage += 1;
    8020907e:	67b8                	ld	a4,72(a5)
    80209080:	0705                	addi	a4,a4,1
    80209082:	e7b8                	sd	a4,72(a5)
		start += PGSIZE;
    80209084:	94b2                	add	s1,s1,a2
	while (start < pa_end) {
    80209086:	fed4e9e3          	bltu	s1,a3,80209078 <kpminit+0xc4>
	__leave_sin_cs 
    8020908a:	00863497          	auipc	s1,0x863
    8020908e:	e4e48493          	addi	s1,s1,-434 # 80a6bed8 <multiple>
    80209092:	00863517          	auipc	a0,0x863
    80209096:	e6e50513          	addi	a0,a0,-402 # 80a6bf00 <single>
    8020909a:	fffff097          	auipc	ra,0xfffff
    8020909e:	330080e7          	jalr	816(ra) # 802083ca <release>
	__sin_freerange(START_SINGLE, PHYSTOP);

	__debug_info("kpminit kernel_end: %p, start_single: %p, phystop: %p, npage %d\n", 
    802090a2:	7098                	ld	a4,32(s1)
    802090a4:	64bc                	ld	a5,72(s1)
    802090a6:	973e                	add	a4,a4,a5
    802090a8:	46c5                	li	a3,17
    802090aa:	06ee                	slli	a3,a3,0x1b
    802090ac:	0080d617          	auipc	a2,0x80d
    802090b0:	f9c63603          	ld	a2,-100(a2) # 80a16048 <START_SINGLE>
    802090b4:	00864597          	auipc	a1,0x864
    802090b8:	f4c58593          	addi	a1,a1,-180 # 80a6d000 <kernel_end>
    802090bc:	0000a517          	auipc	a0,0xa
    802090c0:	88450513          	addi	a0,a0,-1916 # 80212940 <digits+0x58>
    802090c4:	00000097          	auipc	ra,0x0
    802090c8:	832080e7          	jalr	-1998(ra) # 802088f6 <__debug_info>
			kernel_end, (void*)START_SINGLE, (void*)PHYSTOP, multiple.npage + single.npage);
}
    802090cc:	70e2                	ld	ra,56(sp)
    802090ce:	7442                	ld	s0,48(sp)
    802090d0:	74a2                	ld	s1,40(sp)
    802090d2:	7902                	ld	s2,32(sp)
    802090d4:	69e2                	ld	s3,24(sp)
    802090d6:	6a42                	ld	s4,16(sp)
    802090d8:	6aa2                	ld	s5,8(sp)
    802090da:	6121                	addi	sp,sp,64
    802090dc:	8082                	ret

00000000802090de <allocpage_n>:

void *allocpage_n(uint64 n) {
    802090de:	7179                	addi	sp,sp,-48
    802090e0:	f406                	sd	ra,40(sp)
    802090e2:	f022                	sd	s0,32(sp)
    802090e4:	ec26                	sd	s1,24(sp)
    802090e6:	e84a                	sd	s2,16(sp)
    802090e8:	e44e                	sd	s3,8(sp)
    802090ea:	1800                	addi	s0,sp,48
    802090ec:	892a                	mv	s2,a0
	//__debug_assert("allocpage_n", n > 1, "n = %d\n", n);

	void *ret;
	__enter_mul_cs 
    802090ee:	00863997          	auipc	s3,0x863
    802090f2:	dea98993          	addi	s3,s3,-534 # 80a6bed8 <multiple>
    802090f6:	854e                	mv	a0,s3
    802090f8:	fffff097          	auipc	ra,0xfffff
    802090fc:	27e080e7          	jalr	638(ra) # 80208376 <acquire>
	ret = __mul_alloc_no_lock(n);
    80209100:	854a                	mv	a0,s2
    80209102:	00000097          	auipc	ra,0x0
    80209106:	da0080e7          	jalr	-608(ra) # 80208ea2 <__mul_alloc_no_lock>
    8020910a:	84aa                	mv	s1,a0
	__leave_mul_cs 
    8020910c:	854e                	mv	a0,s3
    8020910e:	fffff097          	auipc	ra,0xfffff
    80209112:	2bc080e7          	jalr	700(ra) # 802083ca <release>

	#ifdef DEBUG
	if (NULL != ret) {
    80209116:	c889                	beqz	s1,80209128 <allocpage_n+0x4a>
		memset(ret, 0x5, n * PGSIZE);
    80209118:	00c9161b          	slliw	a2,s2,0xc
    8020911c:	4595                	li	a1,5
    8020911e:	8526                	mv	a0,s1
    80209120:	ffff8097          	auipc	ra,0xffff8
    80209124:	c54080e7          	jalr	-940(ra) # 80200d74 <memset>
	}
	#endif 
	//__debug_info("allocpage_n", "%p %d page(s)\n", ret, n);

	return ret;
}
    80209128:	8526                	mv	a0,s1
    8020912a:	70a2                	ld	ra,40(sp)
    8020912c:	7402                	ld	s0,32(sp)
    8020912e:	64e2                	ld	s1,24(sp)
    80209130:	6942                	ld	s2,16(sp)
    80209132:	69a2                	ld	s3,8(sp)
    80209134:	6145                	addi	sp,sp,48
    80209136:	8082                	ret

0000000080209138 <freepage_n>:

void freepage_n(uint64 start, uint64 n) {
    80209138:	7179                	addi	sp,sp,-48
    8020913a:	f406                	sd	ra,40(sp)
    8020913c:	f022                	sd	s0,32(sp)
    8020913e:	ec26                	sd	s1,24(sp)
    80209140:	e84a                	sd	s2,16(sp)
    80209142:	e44e                	sd	s3,8(sp)
    80209144:	1800                	addi	s0,sp,48
    80209146:	84aa                	mv	s1,a0
    80209148:	892e                	mv	s2,a1
		(start >= (uint64)kernel_end && start < START_SINGLE) && 
		(0 == start % PGSIZE) && n > 1, 
		"start = %p, n = %d\n", start, n
	);
*/
	__enter_mul_cs 
    8020914a:	00863997          	auipc	s3,0x863
    8020914e:	d8e98993          	addi	s3,s3,-626 # 80a6bed8 <multiple>
    80209152:	854e                	mv	a0,s3
    80209154:	fffff097          	auipc	ra,0xfffff
    80209158:	222080e7          	jalr	546(ra) # 80208376 <acquire>
	__mul_free_no_lock(start, n);
    8020915c:	85ca                	mv	a1,s2
    8020915e:	8526                	mv	a0,s1
    80209160:	00000097          	auipc	ra,0x0
    80209164:	d96080e7          	jalr	-618(ra) # 80208ef6 <__mul_free_no_lock>
	__leave_mul_cs 
    80209168:	854e                	mv	a0,s3
    8020916a:	fffff097          	auipc	ra,0xfffff
    8020916e:	260080e7          	jalr	608(ra) # 802083ca <release>

	//__debug_info("freepage_n", "%p %d page(s)\n", start, n);
}
    80209172:	70a2                	ld	ra,40(sp)
    80209174:	7402                	ld	s0,32(sp)
    80209176:	64e2                	ld	s1,24(sp)
    80209178:	6942                	ld	s2,16(sp)
    8020917a:	69a2                	ld	s3,8(sp)
    8020917c:	6145                	addi	sp,sp,48
    8020917e:	8082                	ret

0000000080209180 <_allocpage>:

uint64 _allocpage(void) {
    80209180:	1101                	addi	sp,sp,-32
    80209182:	ec06                	sd	ra,24(sp)
    80209184:	e822                	sd	s0,16(sp)
    80209186:	e426                	sd	s1,8(sp)
    80209188:	e04a                	sd	s2,0(sp)
    8020918a:	1000                	addi	s0,sp,32
	struct run *ret;

	__enter_sin_cs 
    8020918c:	00863517          	auipc	a0,0x863
    80209190:	d7450513          	addi	a0,a0,-652 # 80a6bf00 <single>
    80209194:	fffff097          	auipc	ra,0xfffff
    80209198:	1e2080e7          	jalr	482(ra) # 80208376 <acquire>
	struct run *ret = single.freelist;
    8020919c:	00863497          	auipc	s1,0x863
    802091a0:	d7c4b483          	ld	s1,-644(s1) # 80a6bf18 <single+0x18>
	if (NULL != ret) {
    802091a4:	c0a1                	beqz	s1,802091e4 <_allocpage+0x64>
		single.freelist = ret->next;
    802091a6:	6098                	ld	a4,0(s1)
    802091a8:	00863797          	auipc	a5,0x863
    802091ac:	d3078793          	addi	a5,a5,-720 # 80a6bed8 <multiple>
    802091b0:	e3b8                	sd	a4,64(a5)
		single.npage -= 1;
    802091b2:	67b8                	ld	a4,72(a5)
    802091b4:	177d                	addi	a4,a4,-1
    802091b6:	e7b8                	sd	a4,72(a5)
	ret = __sin_alloc_no_lock();
	__leave_sin_cs 
    802091b8:	00863517          	auipc	a0,0x863
    802091bc:	d4850513          	addi	a0,a0,-696 # 80a6bf00 <single>
    802091c0:	fffff097          	auipc	ra,0xfffff
    802091c4:	20a080e7          	jalr	522(ra) # 802083ca <release>
		__leave_mul_cs 
	}
	
	#ifdef DEBUG
	if (NULL != ret) {
		memset(ret, 5, PGSIZE);
    802091c8:	6605                	lui	a2,0x1
    802091ca:	4595                	li	a1,5
    802091cc:	8526                	mv	a0,s1
    802091ce:	ffff8097          	auipc	ra,0xffff8
    802091d2:	ba6080e7          	jalr	-1114(ra) # 80200d74 <memset>
	#endif 
	
	//__debug_info("allocpage %p\n", ret);

	return (uint64)ret;
}
    802091d6:	8526                	mv	a0,s1
    802091d8:	60e2                	ld	ra,24(sp)
    802091da:	6442                	ld	s0,16(sp)
    802091dc:	64a2                	ld	s1,8(sp)
    802091de:	6902                	ld	s2,0(sp)
    802091e0:	6105                	addi	sp,sp,32
    802091e2:	8082                	ret
	__leave_sin_cs 
    802091e4:	00863917          	auipc	s2,0x863
    802091e8:	cf490913          	addi	s2,s2,-780 # 80a6bed8 <multiple>
    802091ec:	00863517          	auipc	a0,0x863
    802091f0:	d1450513          	addi	a0,a0,-748 # 80a6bf00 <single>
    802091f4:	fffff097          	auipc	ra,0xfffff
    802091f8:	1d6080e7          	jalr	470(ra) # 802083ca <release>
		__enter_mul_cs 
    802091fc:	854a                	mv	a0,s2
    802091fe:	fffff097          	auipc	ra,0xfffff
    80209202:	178080e7          	jalr	376(ra) # 80208376 <acquire>
		ret = __mul_alloc_no_lock(1);
    80209206:	4505                	li	a0,1
    80209208:	00000097          	auipc	ra,0x0
    8020920c:	c9a080e7          	jalr	-870(ra) # 80208ea2 <__mul_alloc_no_lock>
    80209210:	84aa                	mv	s1,a0
		__leave_mul_cs 
    80209212:	854a                	mv	a0,s2
    80209214:	fffff097          	auipc	ra,0xfffff
    80209218:	1b6080e7          	jalr	438(ra) # 802083ca <release>
	if (NULL != ret) {
    8020921c:	dccd                	beqz	s1,802091d6 <_allocpage+0x56>
    8020921e:	b76d                	j	802091c8 <_allocpage+0x48>

0000000080209220 <_freepage>:

void _freepage(uint64 pa) {
    80209220:	7179                	addi	sp,sp,-48
    80209222:	f406                	sd	ra,40(sp)
    80209224:	f022                	sd	s0,32(sp)
    80209226:	ec26                	sd	s1,24(sp)
    80209228:	e84a                	sd	s2,16(sp)
    8020922a:	e44e                	sd	s3,8(sp)
    8020922c:	1800                	addi	s0,sp,48
    8020922e:	84aa                	mv	s1,a0
		(start >= (uint64)kernel_end && start < PHYSTOP) && 
		0 == start % PGSIZE, 
		"start = %p\n", start
	);
*/
	if (start < START_SINGLE) {
    80209230:	0080d797          	auipc	a5,0x80d
    80209234:	e187b783          	ld	a5,-488(a5) # 80a16048 <START_SINGLE>
    80209238:	02f57d63          	bgeu	a0,a5,80209272 <_freepage+0x52>
		__enter_mul_cs 
    8020923c:	00863917          	auipc	s2,0x863
    80209240:	c9c90913          	addi	s2,s2,-868 # 80a6bed8 <multiple>
    80209244:	854a                	mv	a0,s2
    80209246:	fffff097          	auipc	ra,0xfffff
    8020924a:	130080e7          	jalr	304(ra) # 80208376 <acquire>
		__mul_free_no_lock(start, 1);
    8020924e:	4585                	li	a1,1
    80209250:	8526                	mv	a0,s1
    80209252:	00000097          	auipc	ra,0x0
    80209256:	ca4080e7          	jalr	-860(ra) # 80208ef6 <__mul_free_no_lock>
		__leave_mul_cs 
    8020925a:	854a                	mv	a0,s2
    8020925c:	fffff097          	auipc	ra,0xfffff
    80209260:	16e080e7          	jalr	366(ra) # 802083ca <release>
		__sin_free_no_lock(start);
		__leave_sin_cs 
	}

	//__debug_info("freepage", "%p\n", start);
}
    80209264:	70a2                	ld	ra,40(sp)
    80209266:	7402                	ld	s0,32(sp)
    80209268:	64e2                	ld	s1,24(sp)
    8020926a:	6942                	ld	s2,16(sp)
    8020926c:	69a2                	ld	s3,8(sp)
    8020926e:	6145                	addi	sp,sp,48
    80209270:	8082                	ret
		__enter_sin_cs 
    80209272:	00863917          	auipc	s2,0x863
    80209276:	c6690913          	addi	s2,s2,-922 # 80a6bed8 <multiple>
    8020927a:	00863997          	auipc	s3,0x863
    8020927e:	c8698993          	addi	s3,s3,-890 # 80a6bf00 <single>
    80209282:	854e                	mv	a0,s3
    80209284:	fffff097          	auipc	ra,0xfffff
    80209288:	0f2080e7          	jalr	242(ra) # 80208376 <acquire>
	page->next = single.freelist;
    8020928c:	04093783          	ld	a5,64(s2)
    80209290:	e09c                	sd	a5,0(s1)
	single.freelist = page;
    80209292:	04993023          	sd	s1,64(s2)
	single.npage += 1;
    80209296:	04893783          	ld	a5,72(s2)
    8020929a:	0785                	addi	a5,a5,1
    8020929c:	04f93423          	sd	a5,72(s2)
		__leave_sin_cs 
    802092a0:	854e                	mv	a0,s3
    802092a2:	fffff097          	auipc	ra,0xfffff
    802092a6:	128080e7          	jalr	296(ra) # 802083ca <release>
}
    802092aa:	bf6d                	j	80209264 <_freepage+0x44>

00000000802092ac <idlepages>:

uint64 idlepages(void) {
    802092ac:	1141                	addi	sp,sp,-16
    802092ae:	e422                	sd	s0,8(sp)
    802092b0:	0800                	addi	s0,sp,16
	return multiple.npage + single.npage;
    802092b2:	00863797          	auipc	a5,0x863
    802092b6:	c2678793          	addi	a5,a5,-986 # 80a6bed8 <multiple>
    802092ba:	7388                	ld	a0,32(a5)
    802092bc:	67bc                	ld	a5,72(a5)
}
    802092be:	953e                	add	a0,a0,a5
    802092c0:	6422                	ld	s0,8(sp)
    802092c2:	0141                	addi	sp,sp,16
    802092c4:	8082                	ret

00000000802092c6 <pm_dump>:

void pm_dump(void) {
    802092c6:	1101                	addi	sp,sp,-32
    802092c8:	ec06                	sd	ra,24(sp)
    802092ca:	e822                	sd	s0,16(sp)
    802092cc:	e426                	sd	s1,8(sp)
    802092ce:	e04a                	sd	s2,0(sp)
    802092d0:	1000                	addi	s0,sp,32
	__enter_mul_cs 
    802092d2:	00863917          	auipc	s2,0x863
    802092d6:	c0690913          	addi	s2,s2,-1018 # 80a6bed8 <multiple>
    802092da:	854a                	mv	a0,s2
    802092dc:	fffff097          	auipc	ra,0xfffff
    802092e0:	09a080e7          	jalr	154(ra) # 80208376 <acquire>
	struct run *pa = multiple.freelist;
    802092e4:	01893483          	ld	s1,24(s2)
	printf("multiple avail: %d\n", multiple.npage);
    802092e8:	02093583          	ld	a1,32(s2)
    802092ec:	00009517          	auipc	a0,0x9
    802092f0:	69c50513          	addi	a0,a0,1692 # 80212988 <digits+0xa0>
    802092f4:	fffff097          	auipc	ra,0xfffff
    802092f8:	43c080e7          	jalr	1084(ra) # 80208730 <printf>
	while (NULL != pa) {
    802092fc:	cc91                	beqz	s1,80209318 <pm_dump+0x52>
		printf("\t%p %d\n", pa, pa->npage);
    802092fe:	00009917          	auipc	s2,0x9
    80209302:	6a290913          	addi	s2,s2,1698 # 802129a0 <digits+0xb8>
    80209306:	6490                	ld	a2,8(s1)
    80209308:	85a6                	mv	a1,s1
    8020930a:	854a                	mv	a0,s2
    8020930c:	fffff097          	auipc	ra,0xfffff
    80209310:	424080e7          	jalr	1060(ra) # 80208730 <printf>
		pa = pa->next;
    80209314:	6084                	ld	s1,0(s1)
	while (NULL != pa) {
    80209316:	f8e5                	bnez	s1,80209306 <pm_dump+0x40>
	}
	__leave_mul_cs 
    80209318:	00863917          	auipc	s2,0x863
    8020931c:	bc090913          	addi	s2,s2,-1088 # 80a6bed8 <multiple>
    80209320:	854a                	mv	a0,s2
    80209322:	fffff097          	auipc	ra,0xfffff
    80209326:	0a8080e7          	jalr	168(ra) # 802083ca <release>

	__enter_sin_cs 
    8020932a:	00863497          	auipc	s1,0x863
    8020932e:	bd648493          	addi	s1,s1,-1066 # 80a6bf00 <single>
    80209332:	8526                	mv	a0,s1
    80209334:	fffff097          	auipc	ra,0xfffff
    80209338:	042080e7          	jalr	66(ra) # 80208376 <acquire>
	printf("single avail: %d\n", single.npage);
    8020933c:	04893583          	ld	a1,72(s2)
    80209340:	00009517          	auipc	a0,0x9
    80209344:	66850513          	addi	a0,a0,1640 # 802129a8 <digits+0xc0>
    80209348:	fffff097          	auipc	ra,0xfffff
    8020934c:	3e8080e7          	jalr	1000(ra) # 80208730 <printf>
	__leave_sin_cs 
    80209350:	8526                	mv	a0,s1
    80209352:	fffff097          	auipc	ra,0xfffff
    80209356:	078080e7          	jalr	120(ra) # 802083ca <release>
}
    8020935a:	60e2                	ld	ra,24(sp)
    8020935c:	6442                	ld	s0,16(sp)
    8020935e:	64a2                	ld	s1,8(sp)
    80209360:	6902                	ld	s2,0(sp)
    80209362:	6105                	addi	sp,sp,32
    80209364:	8082                	ret

0000000080209366 <kmallocinit>:
#define ROUNDUP16(n) \
	(((n) + 15) & ~0x0f)

// as kmalloc() use allocpage() and freepage, 
// kmallocinit() should be called at least after kpminit() 
void kmallocinit(void) {
    80209366:	1101                	addi	sp,sp,-32
    80209368:	ec06                	sd	ra,24(sp)
    8020936a:	e822                	sd	s0,16(sp)
    8020936c:	e426                	sd	s1,8(sp)
    8020936e:	1000                	addi	s0,sp,32
	// init adam 
	initlock(&(kmem_adam.lock), "kmem_adam");
    80209370:	00863497          	auipc	s1,0x863
    80209374:	bb848493          	addi	s1,s1,-1096 # 80a6bf28 <kmem_adam>
    80209378:	00009597          	auipc	a1,0x9
    8020937c:	64858593          	addi	a1,a1,1608 # 802129c0 <digits+0xd8>
    80209380:	8526                	mv	a0,s1
    80209382:	fffff097          	auipc	ra,0xfffff
    80209386:	fb0080e7          	jalr	-80(ra) # 80208332 <initlock>
	kmem_adam.list = NULL;
    8020938a:	0204b023          	sd	zero,32(s1)
	kmem_adam.next = NULL;
    8020938e:	0204b423          	sd	zero,40(s1)
	kmem_adam.npages = 0;
    80209392:	00049e23          	sh	zero,28(s1)
	kmem_adam.nobjs = 0;
    80209396:	00049f23          	sh	zero,30(s1)
	kmem_adam.obj_size = 
    8020939a:	03000793          	li	a5,48
    8020939e:	cc9c                	sw	a5,24(s1)
			ROUNDUP16(sizeof(struct kmem_allocator));

	// init kmem_table 
	for (uint8 i = 0; i < KMEM_TABLE_SIZE; i++) {
    802093a0:	00863797          	auipc	a5,0x863
    802093a4:	bb878793          	addi	a5,a5,-1096 # 80a6bf58 <kmem_table>
    802093a8:	00863717          	auipc	a4,0x863
    802093ac:	c3870713          	addi	a4,a4,-968 # 80a6bfe0 <kmem_table_lock>
		kmem_table[i] = NULL;
    802093b0:	0007b023          	sd	zero,0(a5)
	for (uint8 i = 0; i < KMEM_TABLE_SIZE; i++) {
    802093b4:	07a1                	addi	a5,a5,8
    802093b6:	fee79de3          	bne	a5,a4,802093b0 <kmallocinit+0x4a>
	}
	int hash = _hash(kmem_adam.obj_size);
	kmem_table[hash] = &kmem_adam;
    802093ba:	00863797          	auipc	a5,0x863
    802093be:	b6e78793          	addi	a5,a5,-1170 # 80a6bf28 <kmem_adam>
    802093c2:	f3dc                	sd	a5,160(a5)
	initlock(&kmem_table_lock, "kmem_table");
    802093c4:	00009597          	auipc	a1,0x9
    802093c8:	60c58593          	addi	a1,a1,1548 # 802129d0 <digits+0xe8>
    802093cc:	00863517          	auipc	a0,0x863
    802093d0:	c1450513          	addi	a0,a0,-1004 # 80a6bfe0 <kmem_table_lock>
    802093d4:	fffff097          	auipc	ra,0xfffff
    802093d8:	f5e080e7          	jalr	-162(ra) # 80208332 <initlock>
	printf("kmallocinit KMEM_NODE_FIX: %p\n", KMEM_NODE_FIX);
    802093dc:	45e9                	li	a1,26
    802093de:	00009517          	auipc	a0,0x9
    802093e2:	60250513          	addi	a0,a0,1538 # 802129e0 <digits+0xf8>
    802093e6:	fffff097          	auipc	ra,0xfffff
    802093ea:	34a080e7          	jalr	842(ra) # 80208730 <printf>
	__debug_info("kmalloc init\n");
    802093ee:	00009517          	auipc	a0,0x9
    802093f2:	61250513          	addi	a0,a0,1554 # 80212a00 <digits+0x118>
    802093f6:	fffff097          	auipc	ra,0xfffff
    802093fa:	500080e7          	jalr	1280(ra) # 802088f6 <__debug_info>
}
    802093fe:	60e2                	ld	ra,24(sp)
    80209400:	6442                	ld	s0,16(sp)
    80209402:	64a2                	ld	s1,8(sp)
    80209404:	6105                	addi	sp,sp,32
    80209406:	8082                	ret

0000000080209408 <kmalloc>:
	// leave critical section 

	return tmp;
}

void *kmalloc(uint size) {
    80209408:	7179                	addi	sp,sp,-48
    8020940a:	f406                	sd	ra,40(sp)
    8020940c:	f022                	sd	s0,32(sp)
    8020940e:	ec26                	sd	s1,24(sp)
    80209410:	e84a                	sd	s2,16(sp)
    80209412:	e44e                	sd	s3,8(sp)
    80209414:	1800                	addi	s0,sp,48
	// border check for `size`
	if (KMEM_OBJ_MIN_SIZE > size) {
    80209416:	47fd                	li	a5,31
    80209418:	08a7fd63          	bgeu	a5,a0,802094b2 <kmalloc+0xaa>
    8020941c:	89aa                	mv	s3,a0
		//__debug_warn("kmalloc size %d too small, reset to %d\n", size, KMEM_OBJ_MIN_SIZE);
		size = KMEM_OBJ_MIN_SIZE;
	}
	else if (KMEM_OBJ_MAX_SIZE < size) {
    8020941e:	6785                	lui	a5,0x1
    80209420:	fd078793          	addi	a5,a5,-48 # fd0 <_entry-0x801ff030>
    80209424:	06a7ec63          	bltu	a5,a0,8020949c <kmalloc+0x94>
		__debug_error("kmalloc size %d out of border\n", size);
		return NULL;
	}
	struct kmem_allocator *alloc = get_allocator(size);
    80209428:	02099513          	slli	a0,s3,0x20
    8020942c:	9101                	srli	a0,a0,0x20
    8020942e:	00000097          	auipc	ra,0x0
    80209432:	13a080e7          	jalr	314(ra) # 80209568 <get_allocator>
    80209436:	84aa                	mv	s1,a0

	// if failed to alloc 
	if (NULL == alloc) {
    80209438:	c141                	beqz	a0,802094b8 <kmalloc+0xb0>
		__debug_error("kmalloc fail to get allocator\n");
		return NULL;
	}

	// enter critical section `alloc`
	acquire(&(alloc->lock));
    8020943a:	fffff097          	auipc	ra,0xfffff
    8020943e:	f3c080e7          	jalr	-196(ra) # 80208376 <acquire>

	// if no page available 
	if (NULL == alloc->list) {
    80209442:	0204b903          	ld	s2,32(s1)
    80209446:	08090363          	beqz	s2,802094cc <kmalloc+0xc4>
		tmp->table[capa - 1] = TABLE_END;

		alloc->list = tmp;
	}

	alloc->nobjs++;
    8020944a:	01e4d783          	lhu	a5,30(s1)
    8020944e:	2785                	addiw	a5,a5,1
    80209450:	00f49f23          	sh	a5,30(s1)

	// now the allocator should be ready 
	struct kmem_node *node = alloc->list;
    80209454:	709c                	ld	a5,32(s1)
	void *ret;		// the address to be returned 
	ret = (void*)(node->config.obj_addr + 
			((uint64)node->avail) * node->config.obj_size);
    80209456:	0187c703          	lbu	a4,24(a5)
    8020945a:	0087b903          	ld	s2,8(a5)
    8020945e:	03270933          	mul	s2,a4,s2
	ret = (void*)(node->config.obj_addr + 
    80209462:	6b94                	ld	a3,16(a5)
    80209464:	9936                	add	s2,s2,a3
	// update `avail` and `cnt`
	node->cnt += 1;
    80209466:	0197c683          	lbu	a3,25(a5)
    8020946a:	2685                	addiw	a3,a3,1
    8020946c:	00d78ca3          	sb	a3,25(a5)
	node->avail = node->table[node->avail];
    80209470:	973e                	add	a4,a4,a5
    80209472:	01a74703          	lbu	a4,26(a4)
    80209476:	00e78c23          	sb	a4,24(a5)

	// if kmem_node is fully allocated 
	if (TABLE_END == node->avail) {
    8020947a:	0ff00693          	li	a3,255
    8020947e:	0ed70263          	beq	a4,a3,80209562 <kmalloc+0x15a>
		alloc->list = node->next;
	}

	release(&(alloc->lock));
    80209482:	8526                	mv	a0,s1
    80209484:	fffff097          	auipc	ra,0xfffff
    80209488:	f46080e7          	jalr	-186(ra) # 802083ca <release>
	// leave critical section `alloc`

	return ret;
}
    8020948c:	854a                	mv	a0,s2
    8020948e:	70a2                	ld	ra,40(sp)
    80209490:	7402                	ld	s0,32(sp)
    80209492:	64e2                	ld	s1,24(sp)
    80209494:	6942                	ld	s2,16(sp)
    80209496:	69a2                	ld	s3,8(sp)
    80209498:	6145                	addi	sp,sp,48
    8020949a:	8082                	ret
		__debug_error("kmalloc size %d out of border\n", size);
    8020949c:	85aa                	mv	a1,a0
    8020949e:	00009517          	auipc	a0,0x9
    802094a2:	57250513          	addi	a0,a0,1394 # 80212a10 <digits+0x128>
    802094a6:	fffff097          	auipc	ra,0xfffff
    802094aa:	7ec080e7          	jalr	2028(ra) # 80208c92 <__debug_error>
		return NULL;
    802094ae:	4901                	li	s2,0
    802094b0:	bff1                	j	8020948c <kmalloc+0x84>
		size = KMEM_OBJ_MIN_SIZE;
    802094b2:	02000993          	li	s3,32
    802094b6:	bf8d                	j	80209428 <kmalloc+0x20>
		__debug_error("kmalloc fail to get allocator\n");
    802094b8:	00009517          	auipc	a0,0x9
    802094bc:	57850513          	addi	a0,a0,1400 # 80212a30 <digits+0x148>
    802094c0:	fffff097          	auipc	ra,0xfffff
    802094c4:	7d2080e7          	jalr	2002(ra) # 80208c92 <__debug_error>
		return NULL;
    802094c8:	8926                	mv	s2,s1
    802094ca:	b7c9                	j	8020948c <kmalloc+0x84>
		struct kmem_node *tmp = (struct kmem_node*)allocpage();
    802094cc:	00000097          	auipc	ra,0x0
    802094d0:	cb4080e7          	jalr	-844(ra) # 80209180 <_allocpage>
    802094d4:	86aa                	mv	a3,a0
		if (NULL == tmp) {
    802094d6:	c925                	beqz	a0,80209546 <kmalloc+0x13e>
		alloc->npages++;
    802094d8:	01c4d783          	lhu	a5,28(s1)
    802094dc:	2785                	addiw	a5,a5,1
    802094de:	00f49e23          	sh	a5,28(s1)
		uint roundup_size = ROUNDUP16(size);
    802094e2:	29bd                	addiw	s3,s3,15
    802094e4:	ff09f993          	andi	s3,s3,-16
    802094e8:	0009871b          	sext.w	a4,s3
		uint8 capa = _calc_capa(roundup_size);
    802094ec:	2985                	addiw	s3,s3,1
    802094ee:	6785                	lui	a5,0x1
    802094f0:	3781                	addiw	a5,a5,-32
    802094f2:	0337d9bb          	divuw	s3,a5,s3
		tmp->next = NULL;
    802094f6:	00053023          	sd	zero,0(a0)
		tmp->config.obj_size = roundup_size;
    802094fa:	02071793          	slli	a5,a4,0x20
    802094fe:	9381                	srli	a5,a5,0x20
    80209500:	e51c                	sd	a5,8(a0)
		tmp->config.obj_addr = (uint64)tmp + ROUNDUP16(KMEM_NODE_FIX + capa);
    80209502:	0ff9f793          	andi	a5,s3,255
    80209506:	02978793          	addi	a5,a5,41 # 1029 <_entry-0x801fefd7>
    8020950a:	9bc1                	andi	a5,a5,-16
    8020950c:	97aa                	add	a5,a5,a0
    8020950e:	e91c                	sd	a5,16(a0)
		tmp->avail = 0;
    80209510:	00050c23          	sb	zero,24(a0)
		tmp->cnt = 0;
    80209514:	00050ca3          	sb	zero,25(a0)
		for (uint8 i = 0; i < capa - 1; i ++) {
    80209518:	0ff9f993          	andi	s3,s3,255
    8020951c:	39fd                	addiw	s3,s3,-1
    8020951e:	01305e63          	blez	s3,8020953a <kmalloc+0x132>
    80209522:	4781                	li	a5,0
    80209524:	4701                	li	a4,0
			tmp->table[i] = i + 1;
    80209526:	2785                	addiw	a5,a5,1
    80209528:	0ff7f793          	andi	a5,a5,255
    8020952c:	9736                	add	a4,a4,a3
    8020952e:	00f70d23          	sb	a5,26(a4)
		for (uint8 i = 0; i < capa - 1; i ++) {
    80209532:	0007871b          	sext.w	a4,a5
    80209536:	ff3748e3          	blt	a4,s3,80209526 <kmalloc+0x11e>
		tmp->table[capa - 1] = TABLE_END;
    8020953a:	99aa                	add	s3,s3,a0
    8020953c:	57fd                	li	a5,-1
    8020953e:	00f98d23          	sb	a5,26(s3)
		alloc->list = tmp;
    80209542:	f088                	sd	a0,32(s1)
    80209544:	b719                	j	8020944a <kmalloc+0x42>
			release(&(alloc->lock));
    80209546:	8526                	mv	a0,s1
    80209548:	fffff097          	auipc	ra,0xfffff
    8020954c:	e82080e7          	jalr	-382(ra) # 802083ca <release>
			__debug_warn("kmalloc fail to allocate a node\n");
    80209550:	00009517          	auipc	a0,0x9
    80209554:	50050513          	addi	a0,a0,1280 # 80212a50 <digits+0x168>
    80209558:	fffff097          	auipc	ra,0xfffff
    8020955c:	564080e7          	jalr	1380(ra) # 80208abc <__debug_warn>
			return NULL;
    80209560:	b735                	j	8020948c <kmalloc+0x84>
		alloc->list = node->next;
    80209562:	639c                	ld	a5,0(a5)
    80209564:	f09c                	sd	a5,32(s1)
    80209566:	bf31                	j	80209482 <kmalloc+0x7a>

0000000080209568 <get_allocator>:
static struct kmem_allocator *get_allocator(uint64 raw_size) {
    80209568:	7179                	addi	sp,sp,-48
    8020956a:	f406                	sd	ra,40(sp)
    8020956c:	f022                	sd	s0,32(sp)
    8020956e:	ec26                	sd	s1,24(sp)
    80209570:	e84a                	sd	s2,16(sp)
    80209572:	e44e                	sd	s3,8(sp)
    80209574:	1800                	addi	s0,sp,48
	uint64 roundup_size = ROUNDUP16(raw_size);
    80209576:	00f50913          	addi	s2,a0,15
    8020957a:	ff097913          	andi	s2,s2,-16
	uint64 hash = _hash(roundup_size);
    8020957e:	49c5                	li	s3,17
    80209580:	033979b3          	remu	s3,s2,s3
	for (struct kmem_allocator *tmp = kmem_table[hash]; 
    80209584:	00399713          	slli	a4,s3,0x3
    80209588:	00863797          	auipc	a5,0x863
    8020958c:	9a078793          	addi	a5,a5,-1632 # 80a6bf28 <kmem_adam>
    80209590:	97ba                	add	a5,a5,a4
    80209592:	7b84                	ld	s1,48(a5)
    80209594:	c499                	beqz	s1,802095a2 <get_allocator+0x3a>
		if (roundup_size == tmp->obj_size) {
    80209596:	0184e783          	lwu	a5,24(s1)
    8020959a:	09278463          	beq	a5,s2,80209622 <get_allocator+0xba>
			NULL != tmp; tmp = tmp->next) {
    8020959e:	7484                	ld	s1,40(s1)
	for (struct kmem_allocator *tmp = kmem_table[hash]; 
    802095a0:	f8fd                	bnez	s1,80209596 <get_allocator+0x2e>
	acquire(&kmem_table_lock);
    802095a2:	00863517          	auipc	a0,0x863
    802095a6:	a3e50513          	addi	a0,a0,-1474 # 80a6bfe0 <kmem_table_lock>
    802095aa:	fffff097          	auipc	ra,0xfffff
    802095ae:	dcc080e7          	jalr	-564(ra) # 80208376 <acquire>
	if (NULL != kmem_table[hash] && 
    802095b2:	00399713          	slli	a4,s3,0x3
    802095b6:	00863797          	auipc	a5,0x863
    802095ba:	97278793          	addi	a5,a5,-1678 # 80a6bf28 <kmem_adam>
    802095be:	97ba                	add	a5,a5,a4
    802095c0:	7b9c                	ld	a5,48(a5)
    802095c2:	c789                	beqz	a5,802095cc <get_allocator+0x64>
			kmem_table[hash]->obj_size == roundup_size) {
    802095c4:	0187e783          	lwu	a5,24(a5)
	if (NULL != kmem_table[hash] && 
    802095c8:	07278563          	beq	a5,s2,80209632 <get_allocator+0xca>
	struct kmem_allocator *tmp = _malloc_allocator();
    802095cc:	03000513          	li	a0,48
    802095d0:	00000097          	auipc	ra,0x0
    802095d4:	e38080e7          	jalr	-456(ra) # 80209408 <kmalloc>
    802095d8:	84aa                	mv	s1,a0
	if (NULL != tmp) {
    802095da:	cd05                	beqz	a0,80209612 <get_allocator+0xaa>
		initlock(&(tmp->lock), "kmem_alloc");
    802095dc:	00009597          	auipc	a1,0x9
    802095e0:	49c58593          	addi	a1,a1,1180 # 80212a78 <digits+0x190>
    802095e4:	fffff097          	auipc	ra,0xfffff
    802095e8:	d4e080e7          	jalr	-690(ra) # 80208332 <initlock>
		tmp->list = NULL;
    802095ec:	0204b023          	sd	zero,32(s1)
		tmp->obj_size = roundup_size;
    802095f0:	0124ac23          	sw	s2,24(s1)
		tmp->npages = 0;
    802095f4:	00049e23          	sh	zero,28(s1)
		tmp->nobjs = 0;
    802095f8:	00049f23          	sh	zero,30(s1)
		tmp->next = kmem_table[hash];
    802095fc:	098e                	slli	s3,s3,0x3
    802095fe:	00863797          	auipc	a5,0x863
    80209602:	92a78793          	addi	a5,a5,-1750 # 80a6bf28 <kmem_adam>
    80209606:	99be                	add	s3,s3,a5
    80209608:	0309b783          	ld	a5,48(s3)
    8020960c:	f49c                	sd	a5,40(s1)
		kmem_table[hash] = tmp;
    8020960e:	0299b823          	sd	s1,48(s3)
	release(&kmem_table_lock);
    80209612:	00863517          	auipc	a0,0x863
    80209616:	9ce50513          	addi	a0,a0,-1586 # 80a6bfe0 <kmem_table_lock>
    8020961a:	fffff097          	auipc	ra,0xfffff
    8020961e:	db0080e7          	jalr	-592(ra) # 802083ca <release>
}
    80209622:	8526                	mv	a0,s1
    80209624:	70a2                	ld	ra,40(sp)
    80209626:	7402                	ld	s0,32(sp)
    80209628:	64e2                	ld	s1,24(sp)
    8020962a:	6942                	ld	s2,16(sp)
    8020962c:	69a2                	ld	s3,8(sp)
    8020962e:	6145                	addi	sp,sp,48
    80209630:	8082                	ret
		release(&kmem_table_lock);
    80209632:	00863517          	auipc	a0,0x863
    80209636:	9ae50513          	addi	a0,a0,-1618 # 80a6bfe0 <kmem_table_lock>
    8020963a:	fffff097          	auipc	ra,0xfffff
    8020963e:	d90080e7          	jalr	-624(ra) # 802083ca <release>
		return kmem_table[hash];
    80209642:	098e                	slli	s3,s3,0x3
    80209644:	00863797          	auipc	a5,0x863
    80209648:	8e478793          	addi	a5,a5,-1820 # 80a6bf28 <kmem_adam>
    8020964c:	97ce                	add	a5,a5,s3
    8020964e:	7b84                	ld	s1,48(a5)
    80209650:	bfc9                	j	80209622 <get_allocator+0xba>

0000000080209652 <kfree>:

// `addr` must be an address that's allocated before, pass an unallocated 
// address may cause undetectable troubles. 
void kfree(void *addr) {
    80209652:	7179                	addi	sp,sp,-48
    80209654:	f406                	sd	ra,40(sp)
    80209656:	f022                	sd	s0,32(sp)
    80209658:	ec26                	sd	s1,24(sp)
    8020965a:	e84a                	sd	s2,16(sp)
    8020965c:	e44e                	sd	s3,8(sp)
    8020965e:	e052                	sd	s4,0(sp)
    80209660:	1800                	addi	s0,sp,48
    80209662:	892a                	mv	s2,a0
	struct kmem_node *node = (struct kmem_node*)PGROUNDDOWN((uint64)addr);
    80209664:	74fd                	lui	s1,0xfffff
    80209666:	8ce9                	and	s1,s1,a0
    80209668:	8a26                	mv	s4,s1
	uint8 avail = ((uint64)addr - node->config.obj_addr) / node->config.obj_size;
    8020966a:	6488                	ld	a0,8(s1)
    8020966c:	689c                	ld	a5,16(s1)
    8020966e:	40f90933          	sub	s2,s2,a5
    80209672:	02a95933          	divu	s2,s2,a0
    80209676:	0ff97913          	andi	s2,s2,255

	struct kmem_allocator *alloc = get_allocator(node->config.obj_size);
    8020967a:	00000097          	auipc	ra,0x0
    8020967e:	eee080e7          	jalr	-274(ra) # 80209568 <get_allocator>
    80209682:	89aa                	mv	s3,a0

	//__debug_info("kfree alloc: %p, addr: %p\n", alloc, addr);
	// enter critical section `alloc`
	acquire(&(alloc->lock));
    80209684:	fffff097          	auipc	ra,0xfffff
    80209688:	cf2080e7          	jalr	-782(ra) # 80208376 <acquire>

	alloc->nobjs--;
    8020968c:	01e9d783          	lhu	a5,30(s3)
    80209690:	37fd                	addiw	a5,a5,-1
    80209692:	00f99f23          	sh	a5,30(s3)

	// if `node` used to be fully allocated, then re-link it to `alloc`
	if (TABLE_END == node->avail) {
    80209696:	0184c703          	lbu	a4,24(s1) # fffffffffffff018 <kernel_end+0xffffffff7f592018>
    8020969a:	0ff00793          	li	a5,255
    8020969e:	06f70563          	beq	a4,a5,80209708 <kfree+0xb6>
		alloc->list = node;
		//__debug_info("kfree pickup\n");
	}

	// node should be on alloc->list 
	node->table[avail] = node->avail;
    802096a2:	009907b3          	add	a5,s2,s1
    802096a6:	0184c703          	lbu	a4,24(s1)
    802096aa:	00e78d23          	sb	a4,26(a5)
	node->avail = avail;
    802096ae:	01248c23          	sb	s2,24(s1)
	node->cnt -= 1;
    802096b2:	0194c783          	lbu	a5,25(s1)
    802096b6:	37fd                	addiw	a5,a5,-1
    802096b8:	0ff7f793          	andi	a5,a5,255
    802096bc:	00f48ca3          	sb	a5,25(s1)

	// if kmem_node has no allocated obj 
	if (0 == node->cnt) {
    802096c0:	e79d                	bnez	a5,802096ee <kfree+0x9c>
		//__debug_info("kfree drop\n");
		struct kmem_node **pprev = &(alloc->list);
		struct kmem_node *tmp = alloc->list;
    802096c2:	0209b783          	ld	a5,32(s3)

		while (NULL != tmp && node != tmp) {
    802096c6:	c7b9                	beqz	a5,80209714 <kfree+0xc2>
    802096c8:	06fa0663          	beq	s4,a5,80209734 <kfree+0xe2>
			pprev = &(tmp->next);
			tmp = tmp->next;
    802096cc:	873e                	mv	a4,a5
    802096ce:	639c                	ld	a5,0(a5)
		while (NULL != tmp && node != tmp) {
    802096d0:	c3b1                	beqz	a5,80209714 <kfree+0xc2>
    802096d2:	fefa1de3          	bne	s4,a5,802096cc <kfree+0x7a>
			printf("%p -> ", it);
		}
		printf("\n");
		#endif 

		*pprev = tmp->next;
    802096d6:	639c                	ld	a5,0(a5)
    802096d8:	e31c                	sd	a5,0(a4)
		//__debug_info("kfree alloc->list = %p\n", alloc->list);
		//__debug_info("kfree tmp = %p\n", tmp);

		freepage(node);
    802096da:	8526                	mv	a0,s1
    802096dc:	00000097          	auipc	ra,0x0
    802096e0:	b44080e7          	jalr	-1212(ra) # 80209220 <_freepage>
		alloc->npages--;
    802096e4:	01c9d783          	lhu	a5,28(s3)
    802096e8:	37fd                	addiw	a5,a5,-1
    802096ea:	00f99e23          	sh	a5,28(s3)
	}

	release(&(alloc->lock));
    802096ee:	854e                	mv	a0,s3
    802096f0:	fffff097          	auipc	ra,0xfffff
    802096f4:	cda080e7          	jalr	-806(ra) # 802083ca <release>
	// leave critical section `alloc`
}
    802096f8:	70a2                	ld	ra,40(sp)
    802096fa:	7402                	ld	s0,32(sp)
    802096fc:	64e2                	ld	s1,24(sp)
    802096fe:	6942                	ld	s2,16(sp)
    80209700:	69a2                	ld	s3,8(sp)
    80209702:	6a02                	ld	s4,0(sp)
    80209704:	6145                	addi	sp,sp,48
    80209706:	8082                	ret
		node->next = alloc->list;
    80209708:	0209b783          	ld	a5,32(s3)
    8020970c:	e09c                	sd	a5,0(s1)
		alloc->list = node;
    8020970e:	0299b023          	sd	s1,32(s3)
    80209712:	bf41                	j	802096a2 <kfree+0x50>
			__debug_error("free NULL == tmp\n");
    80209714:	00009517          	auipc	a0,0x9
    80209718:	37450513          	addi	a0,a0,884 # 80212a88 <digits+0x1a0>
    8020971c:	fffff097          	auipc	ra,0xfffff
    80209720:	576080e7          	jalr	1398(ra) # 80208c92 <__debug_error>
			panic("kfree(): linked list broken!\n");
    80209724:	00009517          	auipc	a0,0x9
    80209728:	37c50513          	addi	a0,a0,892 # 80212aa0 <digits+0x1b8>
    8020972c:	fffff097          	auipc	ra,0xfffff
    80209730:	fba080e7          	jalr	-70(ra) # 802086e6 <panic>
		struct kmem_node **pprev = &(alloc->list);
    80209734:	02098713          	addi	a4,s3,32
    80209738:	bf79                	j	802096d6 <kfree+0x84>

000000008020973a <kvminithart>:

// Switch h/w page table register to the kernel's page table,
// and enable paging.
void
kvminithart()
{
    8020973a:	1141                	addi	sp,sp,-16
    8020973c:	e406                	sd	ra,8(sp)
    8020973e:	e022                	sd	s0,0(sp)
    80209740:	0800                	addi	s0,sp,16
  w_satp(MAKE_SATP(kernel_pagetable));
    80209742:	00863797          	auipc	a5,0x863
    80209746:	8b67b783          	ld	a5,-1866(a5) # 80a6bff8 <kernel_pagetable>
    8020974a:	83b1                	srli	a5,a5,0xc
    8020974c:	577d                	li	a4,-1
    8020974e:	177e                	slli	a4,a4,0x3f
    80209750:	8fd9                	or	a5,a5,a4
  asm volatile("csrw satp, %0" : : "r" (x));
    80209752:	18079073          	csrw	satp,a5
  asm volatile("sfence.vma");
    80209756:	12000073          	sfence.vma
  // reg_info();
  sfence_vma();
  //printf("[kvm]readtime:%p\n",*(uint64*)(PLIC_V));
  __debug_info("kvminithart\n");
    8020975a:	00009517          	auipc	a0,0x9
    8020975e:	36650513          	addi	a0,a0,870 # 80212ac0 <digits+0x1d8>
    80209762:	fffff097          	auipc	ra,0xfffff
    80209766:	194080e7          	jalr	404(ra) # 802088f6 <__debug_info>
}
    8020976a:	60a2                	ld	ra,8(sp)
    8020976c:	6402                	ld	s0,0(sp)
    8020976e:	0141                	addi	sp,sp,16
    80209770:	8082                	ret

0000000080209772 <walk>:
  }
}

pte_t *
walk(pagetable_t pagetable, uint64 va, int alloc)
{
    80209772:	715d                	addi	sp,sp,-80
    80209774:	e486                	sd	ra,72(sp)
    80209776:	e0a2                	sd	s0,64(sp)
    80209778:	fc26                	sd	s1,56(sp)
    8020977a:	f84a                	sd	s2,48(sp)
    8020977c:	f44e                	sd	s3,40(sp)
    8020977e:	f052                	sd	s4,32(sp)
    80209780:	ec56                	sd	s5,24(sp)
    80209782:	e85a                	sd	s6,16(sp)
    80209784:	e45e                	sd	s7,8(sp)
    80209786:	0880                	addi	s0,sp,80
    80209788:	84aa                	mv	s1,a0
    8020978a:	89ae                	mv	s3,a1
    8020978c:	8b32                	mv	s6,a2
  if(va >= MAXVA)
    8020978e:	57fd                	li	a5,-1
    80209790:	83e9                	srli	a5,a5,0x1a
    80209792:	4af9                	li	s5,30
    panic("walk");

  for(int level = 2; level > 0; level--) {
    80209794:	4bb1                	li	s7,12
  if(va >= MAXVA)
    80209796:	04b7f363          	bgeu	a5,a1,802097dc <walk+0x6a>
    panic("walk");
    8020979a:	00009517          	auipc	a0,0x9
    8020979e:	33650513          	addi	a0,a0,822 # 80212ad0 <digits+0x1e8>
    802097a2:	fffff097          	auipc	ra,0xfffff
    802097a6:	f44080e7          	jalr	-188(ra) # 802086e6 <panic>
    pte_t *pte = &pagetable[PX(level, va)];
    if(*pte & PTE_V) {
      pagetable = (pagetable_t)PTE2PA(*pte);
    } else {
      if(!alloc || (pagetable = (pde_t*)allocpage()) == NULL)
    802097aa:	060b0863          	beqz	s6,8020981a <walk+0xa8>
    802097ae:	00000097          	auipc	ra,0x0
    802097b2:	9d2080e7          	jalr	-1582(ra) # 80209180 <_allocpage>
    802097b6:	8a2a                	mv	s4,a0
    802097b8:	84aa                	mv	s1,a0
    802097ba:	c135                	beqz	a0,8020981e <walk+0xac>
        return NULL;
      
      memset(pagetable, 0, PGSIZE);
    802097bc:	6605                	lui	a2,0x1
    802097be:	4581                	li	a1,0
    802097c0:	ffff7097          	auipc	ra,0xffff7
    802097c4:	5b4080e7          	jalr	1460(ra) # 80200d74 <memset>
      *pte = PA2PTE(pagetable) | PTE_V;
    802097c8:	00ca5a13          	srli	s4,s4,0xc
    802097cc:	0a2a                	slli	s4,s4,0xa
    802097ce:	001a6a13          	ori	s4,s4,1
    802097d2:	01493023          	sd	s4,0(s2)
  for(int level = 2; level > 0; level--) {
    802097d6:	3add                	addiw	s5,s5,-9
    802097d8:	037a8063          	beq	s5,s7,802097f8 <walk+0x86>
    pte_t *pte = &pagetable[PX(level, va)];
    802097dc:	0159d933          	srl	s2,s3,s5
    802097e0:	1ff97913          	andi	s2,s2,511
    802097e4:	090e                	slli	s2,s2,0x3
    802097e6:	9926                	add	s2,s2,s1
    if(*pte & PTE_V) {
    802097e8:	00093483          	ld	s1,0(s2)
    802097ec:	0014f793          	andi	a5,s1,1
    802097f0:	dfcd                	beqz	a5,802097aa <walk+0x38>
      pagetable = (pagetable_t)PTE2PA(*pte);
    802097f2:	80a9                	srli	s1,s1,0xa
    802097f4:	04b2                	slli	s1,s1,0xc
    802097f6:	b7c5                	j	802097d6 <walk+0x64>
    }
  }
  return &pagetable[PX(0, va)];
    802097f8:	00c9d513          	srli	a0,s3,0xc
    802097fc:	1ff57513          	andi	a0,a0,511
    80209800:	050e                	slli	a0,a0,0x3
    80209802:	9526                	add	a0,a0,s1
}
    80209804:	60a6                	ld	ra,72(sp)
    80209806:	6406                	ld	s0,64(sp)
    80209808:	74e2                	ld	s1,56(sp)
    8020980a:	7942                	ld	s2,48(sp)
    8020980c:	79a2                	ld	s3,40(sp)
    8020980e:	7a02                	ld	s4,32(sp)
    80209810:	6ae2                	ld	s5,24(sp)
    80209812:	6b42                	ld	s6,16(sp)
    80209814:	6ba2                	ld	s7,8(sp)
    80209816:	6161                	addi	sp,sp,80
    80209818:	8082                	ret
        return NULL;
    8020981a:	4501                	li	a0,0
    8020981c:	b7e5                	j	80209804 <walk+0x92>
    8020981e:	4501                	li	a0,0
    80209820:	b7d5                	j	80209804 <walk+0x92>

0000000080209822 <mappages>:
{
    80209822:	715d                	addi	sp,sp,-80
    80209824:	e486                	sd	ra,72(sp)
    80209826:	e0a2                	sd	s0,64(sp)
    80209828:	fc26                	sd	s1,56(sp)
    8020982a:	f84a                	sd	s2,48(sp)
    8020982c:	f44e                	sd	s3,40(sp)
    8020982e:	f052                	sd	s4,32(sp)
    80209830:	ec56                	sd	s5,24(sp)
    80209832:	e85a                	sd	s6,16(sp)
    80209834:	e45e                	sd	s7,8(sp)
    80209836:	0880                	addi	s0,sp,80
    80209838:	8b2a                	mv	s6,a0
    8020983a:	8aba                	mv	s5,a4
  a = PGROUNDDOWN(va);
    8020983c:	777d                	lui	a4,0xfffff
    8020983e:	00e5f7b3          	and	a5,a1,a4
  last = PGROUNDDOWN(va + size - 1);
    80209842:	167d                	addi	a2,a2,-1
    80209844:	00b609b3          	add	s3,a2,a1
    80209848:	00e9f9b3          	and	s3,s3,a4
  a = PGROUNDDOWN(va);
    8020984c:	893e                	mv	s2,a5
    8020984e:	40f68a33          	sub	s4,a3,a5
    a += PGSIZE;
    80209852:	6b85                	lui	s7,0x1
    80209854:	a821                	j	8020986c <mappages+0x4a>
      *pte = PA2PTE(pa) | perm | PTE_V | PTE_A | PTE_D;
    80209856:	80b1                	srli	s1,s1,0xc
    80209858:	00a49793          	slli	a5,s1,0xa
    8020985c:	0157e7b3          	or	a5,a5,s5
    80209860:	0c17e793          	ori	a5,a5,193
    80209864:	e11c                	sd	a5,0(a0)
      return 0;
    80209866:	4501                	li	a0,0
    80209868:	a81d                	j	8020989e <mappages+0x7c>
    a += PGSIZE;
    8020986a:	995e                	add	s2,s2,s7
  for(;;){
    8020986c:	012a04b3          	add	s1,s4,s2
    if((pte = walk(pagetable, a, 1)) == NULL)
    80209870:	4605                	li	a2,1
    80209872:	85ca                	mv	a1,s2
    80209874:	855a                	mv	a0,s6
    80209876:	00000097          	auipc	ra,0x0
    8020987a:	efc080e7          	jalr	-260(ra) # 80209772 <walk>
    8020987e:	cd19                	beqz	a0,8020989c <mappages+0x7a>
    if(*pte & PTE_V){
    80209880:	611c                	ld	a5,0(a0)
    80209882:	8b85                	andi	a5,a5,1
    80209884:	fbe9                	bnez	a5,80209856 <mappages+0x34>
    *pte = PA2PTE(pa) | perm | PTE_V | PTE_A | PTE_D;
    80209886:	80b1                	srli	s1,s1,0xc
    80209888:	04aa                	slli	s1,s1,0xa
    8020988a:	0154e4b3          	or	s1,s1,s5
    8020988e:	0c14e493          	ori	s1,s1,193
    80209892:	e104                	sd	s1,0(a0)
    if(a == last)
    80209894:	fd391be3          	bne	s2,s3,8020986a <mappages+0x48>
  return 0;
    80209898:	4501                	li	a0,0
    8020989a:	a011                	j	8020989e <mappages+0x7c>
      return -1;
    8020989c:	557d                	li	a0,-1
}
    8020989e:	60a6                	ld	ra,72(sp)
    802098a0:	6406                	ld	s0,64(sp)
    802098a2:	74e2                	ld	s1,56(sp)
    802098a4:	7942                	ld	s2,48(sp)
    802098a6:	79a2                	ld	s3,40(sp)
    802098a8:	7a02                	ld	s4,32(sp)
    802098aa:	6ae2                	ld	s5,24(sp)
    802098ac:	6b42                	ld	s6,16(sp)
    802098ae:	6ba2                	ld	s7,8(sp)
    802098b0:	6161                	addi	sp,sp,80
    802098b2:	8082                	ret

00000000802098b4 <kvmmap>:
{
    802098b4:	1141                	addi	sp,sp,-16
    802098b6:	e406                	sd	ra,8(sp)
    802098b8:	e022                	sd	s0,0(sp)
    802098ba:	0800                	addi	s0,sp,16
    802098bc:	8736                	mv	a4,a3
  if(mappages(kernel_pagetable, va, sz, pa, perm) != 0)
    802098be:	86ae                	mv	a3,a1
    802098c0:	85aa                	mv	a1,a0
    802098c2:	00862517          	auipc	a0,0x862
    802098c6:	73653503          	ld	a0,1846(a0) # 80a6bff8 <kernel_pagetable>
    802098ca:	00000097          	auipc	ra,0x0
    802098ce:	f58080e7          	jalr	-168(ra) # 80209822 <mappages>
    802098d2:	e509                	bnez	a0,802098dc <kvmmap+0x28>
}
    802098d4:	60a2                	ld	ra,8(sp)
    802098d6:	6402                	ld	s0,0(sp)
    802098d8:	0141                	addi	sp,sp,16
    802098da:	8082                	ret
    panic("kvmmap");
    802098dc:	00009517          	auipc	a0,0x9
    802098e0:	1fc50513          	addi	a0,a0,508 # 80212ad8 <digits+0x1f0>
    802098e4:	fffff097          	auipc	ra,0xfffff
    802098e8:	e02080e7          	jalr	-510(ra) # 802086e6 <panic>

00000000802098ec <kvminit>:
{
    802098ec:	1101                	addi	sp,sp,-32
    802098ee:	ec06                	sd	ra,24(sp)
    802098f0:	e822                	sd	s0,16(sp)
    802098f2:	e426                	sd	s1,8(sp)
    802098f4:	1000                	addi	s0,sp,32
  kernel_pagetable = (pagetable_t) allocpage();
    802098f6:	00000097          	auipc	ra,0x0
    802098fa:	88a080e7          	jalr	-1910(ra) # 80209180 <_allocpage>
    802098fe:	00862797          	auipc	a5,0x862
    80209902:	6ea7bd23          	sd	a0,1786(a5) # 80a6bff8 <kernel_pagetable>
  memset(kernel_pagetable, 0, PGSIZE);
    80209906:	6605                	lui	a2,0x1
    80209908:	4581                	li	a1,0
    8020990a:	ffff7097          	auipc	ra,0xffff7
    8020990e:	46a080e7          	jalr	1130(ra) # 80200d74 <memset>
  kvmmap(CLINT_V, CLINT, 0x10000, PTE_R | PTE_W);
    80209912:	4699                	li	a3,6
    80209914:	6641                	lui	a2,0x10
    80209916:	020005b7          	lui	a1,0x2000
    8020991a:	01f81537          	lui	a0,0x1f81
    8020991e:	0536                	slli	a0,a0,0xd
    80209920:	00000097          	auipc	ra,0x0
    80209924:	f94080e7          	jalr	-108(ra) # 802098b4 <kvmmap>
  kvmmap(PLIC_V, PLIC, 0x400000, PTE_R | PTE_W);
    80209928:	4699                	li	a3,6
    8020992a:	00400637          	lui	a2,0x400
    8020992e:	0c0005b7          	lui	a1,0xc000
    80209932:	00fc3537          	lui	a0,0xfc3
    80209936:	053a                	slli	a0,a0,0xe
    80209938:	00000097          	auipc	ra,0x0
    8020993c:	f7c080e7          	jalr	-132(ra) # 802098b4 <kvmmap>
  kvmmap(RAMDISK, RAMDISK, 0x5000000, PTE_R | PTE_W);
    80209940:	4699                	li	a3,6
    80209942:	05000637          	lui	a2,0x5000
    80209946:	45a5                	li	a1,9
    80209948:	05f2                	slli	a1,a1,0x1c
    8020994a:	852e                	mv	a0,a1
    8020994c:	00000097          	auipc	ra,0x0
    80209950:	f68080e7          	jalr	-152(ra) # 802098b4 <kvmmap>
  kvmmap(KERNBASE, KERNBASE, (uint64)etext - KERNBASE, PTE_R|PTE_X);
    80209954:	00006497          	auipc	s1,0x6
    80209958:	6ac48493          	addi	s1,s1,1708 # 80210000 <_trampoline>
    8020995c:	46a9                	li	a3,10
    8020995e:	bff00613          	li	a2,-1025
    80209962:	0656                	slli	a2,a2,0x15
    80209964:	9626                	add	a2,a2,s1
    80209966:	40100593          	li	a1,1025
    8020996a:	05d6                	slli	a1,a1,0x15
    8020996c:	852e                	mv	a0,a1
    8020996e:	00000097          	auipc	ra,0x0
    80209972:	f46080e7          	jalr	-186(ra) # 802098b4 <kvmmap>
  kvmmap((uint64)etext, (uint64)etext, PHYSTOP - (uint64)etext, PTE_R | PTE_W);
    80209976:	4699                	li	a3,6
    80209978:	4645                	li	a2,17
    8020997a:	066e                	slli	a2,a2,0x1b
    8020997c:	8e05                	sub	a2,a2,s1
    8020997e:	85a6                	mv	a1,s1
    80209980:	8526                	mv	a0,s1
    80209982:	00000097          	auipc	ra,0x0
    80209986:	f32080e7          	jalr	-206(ra) # 802098b4 <kvmmap>
  kvmmap(TRAMPOLINE, (uint64)trampoline, PGSIZE, PTE_R | PTE_X);
    8020998a:	46a9                	li	a3,10
    8020998c:	6605                	lui	a2,0x1
    8020998e:	00006597          	auipc	a1,0x6
    80209992:	67258593          	addi	a1,a1,1650 # 80210000 <_trampoline>
    80209996:	04000537          	lui	a0,0x4000
    8020999a:	157d                	addi	a0,a0,-1
    8020999c:	0532                	slli	a0,a0,0xc
    8020999e:	00000097          	auipc	ra,0x0
    802099a2:	f16080e7          	jalr	-234(ra) # 802098b4 <kvmmap>
  kvmmap(SIG_TRAMPOLINE, (uint64)sig_trampoline, PGSIZE, PTE_R | PTE_X | PTE_U);
    802099a6:	46e9                	li	a3,26
    802099a8:	6605                	lui	a2,0x1
    802099aa:	00007597          	auipc	a1,0x7
    802099ae:	65658593          	addi	a1,a1,1622 # 80211000 <_sig_trampoline>
    802099b2:	02000537          	lui	a0,0x2000
    802099b6:	157d                	addi	a0,a0,-1
    802099b8:	0536                	slli	a0,a0,0xd
    802099ba:	00000097          	auipc	ra,0x0
    802099be:	efa080e7          	jalr	-262(ra) # 802098b4 <kvmmap>
  __debug_info("kvminit\n");
    802099c2:	00009517          	auipc	a0,0x9
    802099c6:	11e50513          	addi	a0,a0,286 # 80212ae0 <digits+0x1f8>
    802099ca:	fffff097          	auipc	ra,0xfffff
    802099ce:	f2c080e7          	jalr	-212(ra) # 802088f6 <__debug_info>
  print_free_page_n();
    802099d2:	fffff097          	auipc	ra,0xfffff
    802099d6:	5b6080e7          	jalr	1462(ra) # 80208f88 <print_free_page_n>
}
    802099da:	60e2                	ld	ra,24(sp)
    802099dc:	6442                	ld	s0,16(sp)
    802099de:	64a2                	ld	s1,8(sp)
    802099e0:	6105                	addi	sp,sp,32
    802099e2:	8082                	ret

00000000802099e4 <vmunmap>:
{
    802099e4:	711d                	addi	sp,sp,-96
    802099e6:	ec86                	sd	ra,88(sp)
    802099e8:	e8a2                	sd	s0,80(sp)
    802099ea:	e4a6                	sd	s1,72(sp)
    802099ec:	e0ca                	sd	s2,64(sp)
    802099ee:	fc4e                	sd	s3,56(sp)
    802099f0:	f852                	sd	s4,48(sp)
    802099f2:	f456                	sd	s5,40(sp)
    802099f4:	f05a                	sd	s6,32(sp)
    802099f6:	ec5e                	sd	s7,24(sp)
    802099f8:	e862                	sd	s8,16(sp)
    802099fa:	e466                	sd	s9,8(sp)
    802099fc:	1080                	addi	s0,sp,96
  if((va % PGSIZE) != 0)
    802099fe:	03459793          	slli	a5,a1,0x34
    80209a02:	ef85                	bnez	a5,80209a3a <vmunmap+0x56>
    80209a04:	8aaa                	mv	s5,a0
    80209a06:	89ae                	mv	s3,a1
    80209a08:	8b36                	mv	s6,a3
  for(a = va; a < va + npages*PGSIZE; a += PGSIZE){
    80209a0a:	0632                	slli	a2,a2,0xc
    80209a0c:	00b60a33          	add	s4,a2,a1
    if(PTE_FLAGS(*pte) == PTE_V)
    80209a10:	4c05                	li	s8,1
        printf("NULL pte:%p\n",pte);
    80209a12:	00009c97          	auipc	s9,0x9
    80209a16:	136c8c93          	addi	s9,s9,310 # 80212b48 <digits+0x260>
  for(a = va; a < va + npages*PGSIZE; a += PGSIZE){
    80209a1a:	6b85                	lui	s7,0x1
    80209a1c:	0745ef63          	bltu	a1,s4,80209a9a <vmunmap+0xb6>
}
    80209a20:	60e6                	ld	ra,88(sp)
    80209a22:	6446                	ld	s0,80(sp)
    80209a24:	64a6                	ld	s1,72(sp)
    80209a26:	6906                	ld	s2,64(sp)
    80209a28:	79e2                	ld	s3,56(sp)
    80209a2a:	7a42                	ld	s4,48(sp)
    80209a2c:	7aa2                	ld	s5,40(sp)
    80209a2e:	7b02                	ld	s6,32(sp)
    80209a30:	6be2                	ld	s7,24(sp)
    80209a32:	6c42                	ld	s8,16(sp)
    80209a34:	6ca2                	ld	s9,8(sp)
    80209a36:	6125                	addi	sp,sp,96
    80209a38:	8082                	ret
    panic("vmunmap: not aligned");
    80209a3a:	00009517          	auipc	a0,0x9
    80209a3e:	0b650513          	addi	a0,a0,182 # 80212af0 <digits+0x208>
    80209a42:	fffff097          	auipc	ra,0xfffff
    80209a46:	ca4080e7          	jalr	-860(ra) # 802086e6 <panic>
      panic("vmunmap: walk");
    80209a4a:	00009517          	auipc	a0,0x9
    80209a4e:	0be50513          	addi	a0,a0,190 # 80212b08 <digits+0x220>
    80209a52:	fffff097          	auipc	ra,0xfffff
    80209a56:	c94080e7          	jalr	-876(ra) # 802086e6 <panic>
      panic("vmunmap: not mapped");
    80209a5a:	00009517          	auipc	a0,0x9
    80209a5e:	0be50513          	addi	a0,a0,190 # 80212b18 <digits+0x230>
    80209a62:	fffff097          	auipc	ra,0xfffff
    80209a66:	c84080e7          	jalr	-892(ra) # 802086e6 <panic>
      panic("vmunmap: not a leaf");
    80209a6a:	00009517          	auipc	a0,0x9
    80209a6e:	0c650513          	addi	a0,a0,198 # 80212b30 <digits+0x248>
    80209a72:	fffff097          	auipc	ra,0xfffff
    80209a76:	c74080e7          	jalr	-908(ra) # 802086e6 <panic>
        printf("NULL pte:%p\n",pte);
    80209a7a:	85aa                	mv	a1,a0
    80209a7c:	8566                	mv	a0,s9
    80209a7e:	fffff097          	auipc	ra,0xfffff
    80209a82:	cb2080e7          	jalr	-846(ra) # 80208730 <printf>
      freepage((void*)pa);
    80209a86:	854a                	mv	a0,s2
    80209a88:	fffff097          	auipc	ra,0xfffff
    80209a8c:	798080e7          	jalr	1944(ra) # 80209220 <_freepage>
    *pte = 0;
    80209a90:	0004b023          	sd	zero,0(s1)
  for(a = va; a < va + npages*PGSIZE; a += PGSIZE){
    80209a94:	99de                	add	s3,s3,s7
    80209a96:	f949f5e3          	bgeu	s3,s4,80209a20 <vmunmap+0x3c>
    if((pte = walk(pagetable, a, 0)) == 0)
    80209a9a:	4601                	li	a2,0
    80209a9c:	85ce                	mv	a1,s3
    80209a9e:	8556                	mv	a0,s5
    80209aa0:	00000097          	auipc	ra,0x0
    80209aa4:	cd2080e7          	jalr	-814(ra) # 80209772 <walk>
    80209aa8:	84aa                	mv	s1,a0
    80209aaa:	d145                	beqz	a0,80209a4a <vmunmap+0x66>
    if((*pte & PTE_V) == 0)
    80209aac:	611c                	ld	a5,0(a0)
    80209aae:	0017f713          	andi	a4,a5,1
    80209ab2:	d745                	beqz	a4,80209a5a <vmunmap+0x76>
    if(PTE_FLAGS(*pte) == PTE_V)
    80209ab4:	3ff7f713          	andi	a4,a5,1023
    80209ab8:	fb8709e3          	beq	a4,s8,80209a6a <vmunmap+0x86>
    if(do_free){
    80209abc:	fc0b0ae3          	beqz	s6,80209a90 <vmunmap+0xac>
      uint64 pa = PTE2PA(*pte);
    80209ac0:	83a9                	srli	a5,a5,0xa
    80209ac2:	00c79913          	slli	s2,a5,0xc
      if(pa==NULL){
    80209ac6:	fc0910e3          	bnez	s2,80209a86 <vmunmap+0xa2>
    80209aca:	bf45                	j	80209a7a <vmunmap+0x96>

0000000080209acc <walkaddr>:
walkaddr(pagetable_t pagetable, uint64 va)
{
  pte_t *pte;
  uint64 pa;

  if(va >= MAXVA)
    80209acc:	57fd                	li	a5,-1
    80209ace:	83e9                	srli	a5,a5,0x1a
    80209ad0:	00b7f463          	bgeu	a5,a1,80209ad8 <walkaddr+0xc>
    return NULL;
    80209ad4:	4501                	li	a0,0
    return NULL;
  if((*pte & PTE_U) == 0)
    return NULL;
  pa = PTE2PA(*pte);
  return pa;
}
    80209ad6:	8082                	ret
{
    80209ad8:	1141                	addi	sp,sp,-16
    80209ada:	e406                	sd	ra,8(sp)
    80209adc:	e022                	sd	s0,0(sp)
    80209ade:	0800                	addi	s0,sp,16
  pte = walk(pagetable, va, 0);
    80209ae0:	4601                	li	a2,0
    80209ae2:	00000097          	auipc	ra,0x0
    80209ae6:	c90080e7          	jalr	-880(ra) # 80209772 <walk>
  if(pte == 0)
    80209aea:	c105                	beqz	a0,80209b0a <walkaddr+0x3e>
  if((*pte & PTE_V) == 0)
    80209aec:	611c                	ld	a5,0(a0)
  if((*pte & PTE_U) == 0)
    80209aee:	0117f693          	andi	a3,a5,17
    80209af2:	4745                	li	a4,17
    return NULL;
    80209af4:	4501                	li	a0,0
  if((*pte & PTE_U) == 0)
    80209af6:	00e68663          	beq	a3,a4,80209b02 <walkaddr+0x36>
}
    80209afa:	60a2                	ld	ra,8(sp)
    80209afc:	6402                	ld	s0,0(sp)
    80209afe:	0141                	addi	sp,sp,16
    80209b00:	8082                	ret
  pa = PTE2PA(*pte);
    80209b02:	00a7d513          	srli	a0,a5,0xa
    80209b06:	0532                	slli	a0,a0,0xc
  return pa;
    80209b08:	bfcd                	j	80209afa <walkaddr+0x2e>
    return NULL;
    80209b0a:	4501                	li	a0,0
    80209b0c:	b7fd                	j	80209afa <walkaddr+0x2e>

0000000080209b0e <experm>:
experm(pagetable_t pagetable, uint64 va,uint64 perm)
{
  pte_t *pte;
  uint64 pa;

  if(va >= MAXVA)
    80209b0e:	57fd                	li	a5,-1
    80209b10:	83e9                	srli	a5,a5,0x1a
    80209b12:	00b7f463          	bgeu	a5,a1,80209b1a <experm+0xc>
    return NULL;
    80209b16:	4501                	li	a0,0
  if((*pte & PTE_U) == 0)
    return NULL;
  *pte |= perm;
  pa = PTE2PA(*pte);
  return pa;
}
    80209b18:	8082                	ret
{
    80209b1a:	1101                	addi	sp,sp,-32
    80209b1c:	ec06                	sd	ra,24(sp)
    80209b1e:	e822                	sd	s0,16(sp)
    80209b20:	e426                	sd	s1,8(sp)
    80209b22:	1000                	addi	s0,sp,32
    80209b24:	84b2                	mv	s1,a2
  pte = walk(pagetable, va, 0);
    80209b26:	4601                	li	a2,0
    80209b28:	00000097          	auipc	ra,0x0
    80209b2c:	c4a080e7          	jalr	-950(ra) # 80209772 <walk>
    80209b30:	87aa                	mv	a5,a0
  if(pte == 0)
    80209b32:	c11d                	beqz	a0,80209b58 <experm+0x4a>
  if((*pte & PTE_V) == 0)
    80209b34:	6110                	ld	a2,0(a0)
  if((*pte & PTE_U) == 0)
    80209b36:	01167693          	andi	a3,a2,17
    80209b3a:	4745                	li	a4,17
    return NULL;
    80209b3c:	4501                	li	a0,0
  if((*pte & PTE_U) == 0)
    80209b3e:	00e68763          	beq	a3,a4,80209b4c <experm+0x3e>
}
    80209b42:	60e2                	ld	ra,24(sp)
    80209b44:	6442                	ld	s0,16(sp)
    80209b46:	64a2                	ld	s1,8(sp)
    80209b48:	6105                	addi	sp,sp,32
    80209b4a:	8082                	ret
  *pte |= perm;
    80209b4c:	8e45                	or	a2,a2,s1
    80209b4e:	e390                	sd	a2,0(a5)
  pa = PTE2PA(*pte);
    80209b50:	8229                	srli	a2,a2,0xa
    80209b52:	00c61513          	slli	a0,a2,0xc
  return pa;
    80209b56:	b7f5                	j	80209b42 <experm+0x34>
    return NULL;
    80209b58:	4501                	li	a0,0
    80209b5a:	b7e5                	j	80209b42 <experm+0x34>

0000000080209b5c <kwalkaddr>:


uint64
kwalkaddr(pagetable_t kpt, uint64 va)
{
    80209b5c:	1101                	addi	sp,sp,-32
    80209b5e:	ec06                	sd	ra,24(sp)
    80209b60:	e822                	sd	s0,16(sp)
    80209b62:	e426                	sd	s1,8(sp)
    80209b64:	1000                	addi	s0,sp,32
  uint64 off = va % PGSIZE;
    80209b66:	03459793          	slli	a5,a1,0x34
    80209b6a:	0347d493          	srli	s1,a5,0x34
  pte_t *pte;
  uint64 pa;
  
  pte = walk(kpt, va, 0);
    80209b6e:	4601                	li	a2,0
    80209b70:	00000097          	auipc	ra,0x0
    80209b74:	c02080e7          	jalr	-1022(ra) # 80209772 <walk>
  if(pte == 0)
    80209b78:	cd09                	beqz	a0,80209b92 <kwalkaddr+0x36>
    panic("kvmpa");
  if((*pte & PTE_V) == 0)
    80209b7a:	6108                	ld	a0,0(a0)
    80209b7c:	00157793          	andi	a5,a0,1
    80209b80:	c38d                	beqz	a5,80209ba2 <kwalkaddr+0x46>
    panic("kvmpa");
  pa = PTE2PA(*pte);
    80209b82:	8129                	srli	a0,a0,0xa
    80209b84:	0532                	slli	a0,a0,0xc
  return pa+off;
}
    80209b86:	9526                	add	a0,a0,s1
    80209b88:	60e2                	ld	ra,24(sp)
    80209b8a:	6442                	ld	s0,16(sp)
    80209b8c:	64a2                	ld	s1,8(sp)
    80209b8e:	6105                	addi	sp,sp,32
    80209b90:	8082                	ret
    panic("kvmpa");
    80209b92:	00009517          	auipc	a0,0x9
    80209b96:	fc650513          	addi	a0,a0,-58 # 80212b58 <digits+0x270>
    80209b9a:	fffff097          	auipc	ra,0xfffff
    80209b9e:	b4c080e7          	jalr	-1204(ra) # 802086e6 <panic>
    panic("kvmpa");
    80209ba2:	00009517          	auipc	a0,0x9
    80209ba6:	fb650513          	addi	a0,a0,-74 # 80212b58 <digits+0x270>
    80209baa:	fffff097          	auipc	ra,0xfffff
    80209bae:	b3c080e7          	jalr	-1220(ra) # 802086e6 <panic>

0000000080209bb2 <kvmpa>:
{
    80209bb2:	1141                	addi	sp,sp,-16
    80209bb4:	e406                	sd	ra,8(sp)
    80209bb6:	e022                	sd	s0,0(sp)
    80209bb8:	0800                	addi	s0,sp,16
    80209bba:	85aa                	mv	a1,a0
  return kwalkaddr(kernel_pagetable, va);
    80209bbc:	00862517          	auipc	a0,0x862
    80209bc0:	43c53503          	ld	a0,1084(a0) # 80a6bff8 <kernel_pagetable>
    80209bc4:	00000097          	auipc	ra,0x0
    80209bc8:	f98080e7          	jalr	-104(ra) # 80209b5c <kwalkaddr>
}
    80209bcc:	60a2                	ld	ra,8(sp)
    80209bce:	6402                	ld	s0,0(sp)
    80209bd0:	0141                	addi	sp,sp,16
    80209bd2:	8082                	ret

0000000080209bd4 <kwalkaddr1>:



uint64
kwalkaddr1(pagetable_t kpt, uint64 va)
{
    80209bd4:	1101                	addi	sp,sp,-32
    80209bd6:	ec06                	sd	ra,24(sp)
    80209bd8:	e822                	sd	s0,16(sp)
    80209bda:	e426                	sd	s1,8(sp)
    80209bdc:	1000                	addi	s0,sp,32
    80209bde:	84ae                	mv	s1,a1
  uint64 off = va % PGSIZE;
  pte_t *pte;
  uint64 pa;
  
  pte = walk(kpt, va, 0);
    80209be0:	4601                	li	a2,0
    80209be2:	00000097          	auipc	ra,0x0
    80209be6:	b90080e7          	jalr	-1136(ra) # 80209772 <walk>
  if(pte == 0)
    80209bea:	c10d                	beqz	a0,80209c0c <kwalkaddr1+0x38>
    return NULL;
  if((*pte & PTE_V) == 0)
    80209bec:	611c                	ld	a5,0(a0)
    80209bee:	0017f513          	andi	a0,a5,1
    80209bf2:	c901                	beqz	a0,80209c02 <kwalkaddr1+0x2e>
    return NULL;
  pa = PTE2PA(*pte);
    80209bf4:	00a7d513          	srli	a0,a5,0xa
    80209bf8:	0532                	slli	a0,a0,0xc
  uint64 off = va % PGSIZE;
    80209bfa:	03449593          	slli	a1,s1,0x34
    80209bfe:	91d1                	srli	a1,a1,0x34
  return pa+off;
    80209c00:	952e                	add	a0,a0,a1
}
    80209c02:	60e2                	ld	ra,24(sp)
    80209c04:	6442                	ld	s0,16(sp)
    80209c06:	64a2                	ld	s1,8(sp)
    80209c08:	6105                	addi	sp,sp,32
    80209c0a:	8082                	ret
    return NULL;
    80209c0c:	4501                	li	a0,0
    80209c0e:	bfd5                	j	80209c02 <kwalkaddr1+0x2e>

0000000080209c10 <uvmdealloc>:
// process size.  Returns the new process size.
uint64
uvmdealloc(pagetable_t pagetable, uint64 start, uint64 end)
{
  
  if(start>=end)return -1;
    80209c10:	04c5f063          	bgeu	a1,a2,80209c50 <uvmdealloc+0x40>
  if(PGROUNDUP(start) < PGROUNDUP(end)){
    80209c14:	6785                	lui	a5,0x1
    80209c16:	17fd                	addi	a5,a5,-1
    80209c18:	95be                	add	a1,a1,a5
    80209c1a:	777d                	lui	a4,0xfffff
    80209c1c:	8df9                	and	a1,a1,a4
    80209c1e:	963e                	add	a2,a2,a5
    80209c20:	8e79                	and	a2,a2,a4
    int npages = (PGROUNDUP(end) - PGROUNDUP(start)) / PGSIZE;
    vmunmap(pagetable, PGROUNDUP(start), npages, 1);
  }

  return 0;
    80209c22:	4781                	li	a5,0
  if(PGROUNDUP(start) < PGROUNDUP(end)){
    80209c24:	00c5e463          	bltu	a1,a2,80209c2c <uvmdealloc+0x1c>
}
    80209c28:	853e                	mv	a0,a5
    80209c2a:	8082                	ret
{
    80209c2c:	1141                	addi	sp,sp,-16
    80209c2e:	e406                	sd	ra,8(sp)
    80209c30:	e022                	sd	s0,0(sp)
    80209c32:	0800                	addi	s0,sp,16
    int npages = (PGROUNDUP(end) - PGROUNDUP(start)) / PGSIZE;
    80209c34:	8e0d                	sub	a2,a2,a1
    80209c36:	8231                	srli	a2,a2,0xc
    vmunmap(pagetable, PGROUNDUP(start), npages, 1);
    80209c38:	4685                	li	a3,1
    80209c3a:	2601                	sext.w	a2,a2
    80209c3c:	00000097          	auipc	ra,0x0
    80209c40:	da8080e7          	jalr	-600(ra) # 802099e4 <vmunmap>
  return 0;
    80209c44:	4781                	li	a5,0
}
    80209c46:	853e                	mv	a0,a5
    80209c48:	60a2                	ld	ra,8(sp)
    80209c4a:	6402                	ld	s0,0(sp)
    80209c4c:	0141                	addi	sp,sp,16
    80209c4e:	8082                	ret
  if(start>=end)return -1;
    80209c50:	57fd                	li	a5,-1
    80209c52:	bfd9                	j	80209c28 <uvmdealloc+0x18>

0000000080209c54 <uvmalloc>:
  if(start>=end)return -1;
    80209c54:	0ac5fd63          	bgeu	a1,a2,80209d0e <uvmalloc+0xba>
{
    80209c58:	7139                	addi	sp,sp,-64
    80209c5a:	fc06                	sd	ra,56(sp)
    80209c5c:	f822                	sd	s0,48(sp)
    80209c5e:	f426                	sd	s1,40(sp)
    80209c60:	f04a                	sd	s2,32(sp)
    80209c62:	ec4e                	sd	s3,24(sp)
    80209c64:	e852                	sd	s4,16(sp)
    80209c66:	e456                	sd	s5,8(sp)
    80209c68:	e05a                	sd	s6,0(sp)
    80209c6a:	0080                	addi	s0,sp,64
    80209c6c:	8a2a                	mv	s4,a0
    80209c6e:	8b2e                	mv	s6,a1
    80209c70:	89b2                	mv	s3,a2
    80209c72:	8ab6                	mv	s5,a3
  for(a = start; a < end; a += PGSIZE){
    80209c74:	892e                	mv	s2,a1
    mem = allocpage();
    80209c76:	fffff097          	auipc	ra,0xfffff
    80209c7a:	50a080e7          	jalr	1290(ra) # 80209180 <_allocpage>
    80209c7e:	84aa                	mv	s1,a0
    if(mem == NULL){
    80209c80:	c51d                	beqz	a0,80209cae <uvmalloc+0x5a>
    memset(mem, 0, PGSIZE);
    80209c82:	6605                	lui	a2,0x1
    80209c84:	4581                	li	a1,0
    80209c86:	ffff7097          	auipc	ra,0xffff7
    80209c8a:	0ee080e7          	jalr	238(ra) # 80200d74 <memset>
    if (mappages(pagetable, a, PGSIZE, (uint64)mem, perm) != 0) {
    80209c8e:	8756                	mv	a4,s5
    80209c90:	86a6                	mv	a3,s1
    80209c92:	6605                	lui	a2,0x1
    80209c94:	85ca                	mv	a1,s2
    80209c96:	8552                	mv	a0,s4
    80209c98:	00000097          	auipc	ra,0x0
    80209c9c:	b8a080e7          	jalr	-1142(ra) # 80209822 <mappages>
    80209ca0:	e129                	bnez	a0,80209ce2 <uvmalloc+0x8e>
  for(a = start; a < end; a += PGSIZE){
    80209ca2:	6785                	lui	a5,0x1
    80209ca4:	993e                	add	s2,s2,a5
    80209ca6:	fd3968e3          	bltu	s2,s3,80209c76 <uvmalloc+0x22>
  return 0;
    80209caa:	4501                	li	a0,0
    80209cac:	a00d                	j	80209cce <uvmalloc+0x7a>
      uvmdealloc(pagetable, start, a);
    80209cae:	864a                	mv	a2,s2
    80209cb0:	85da                	mv	a1,s6
    80209cb2:	8552                	mv	a0,s4
    80209cb4:	00000097          	auipc	ra,0x0
    80209cb8:	f5c080e7          	jalr	-164(ra) # 80209c10 <uvmdealloc>
      printf("uvmalloc kalloc failed\n");
    80209cbc:	00009517          	auipc	a0,0x9
    80209cc0:	ea450513          	addi	a0,a0,-348 # 80212b60 <digits+0x278>
    80209cc4:	fffff097          	auipc	ra,0xfffff
    80209cc8:	a6c080e7          	jalr	-1428(ra) # 80208730 <printf>
      return -1;
    80209ccc:	557d                	li	a0,-1
}
    80209cce:	70e2                	ld	ra,56(sp)
    80209cd0:	7442                	ld	s0,48(sp)
    80209cd2:	74a2                	ld	s1,40(sp)
    80209cd4:	7902                	ld	s2,32(sp)
    80209cd6:	69e2                	ld	s3,24(sp)
    80209cd8:	6a42                	ld	s4,16(sp)
    80209cda:	6aa2                	ld	s5,8(sp)
    80209cdc:	6b02                	ld	s6,0(sp)
    80209cde:	6121                	addi	sp,sp,64
    80209ce0:	8082                	ret
      freepage(mem);
    80209ce2:	8526                	mv	a0,s1
    80209ce4:	fffff097          	auipc	ra,0xfffff
    80209ce8:	53c080e7          	jalr	1340(ra) # 80209220 <_freepage>
      uvmdealloc(pagetable, start, a);
    80209cec:	864a                	mv	a2,s2
    80209cee:	85da                	mv	a1,s6
    80209cf0:	8552                	mv	a0,s4
    80209cf2:	00000097          	auipc	ra,0x0
    80209cf6:	f1e080e7          	jalr	-226(ra) # 80209c10 <uvmdealloc>
      printf("[uvmalloc]map user page failed\n");
    80209cfa:	00009517          	auipc	a0,0x9
    80209cfe:	e7e50513          	addi	a0,a0,-386 # 80212b78 <digits+0x290>
    80209d02:	fffff097          	auipc	ra,0xfffff
    80209d06:	a2e080e7          	jalr	-1490(ra) # 80208730 <printf>
      return -1;
    80209d0a:	557d                	li	a0,-1
    80209d0c:	b7c9                	j	80209cce <uvmalloc+0x7a>
  if(start>=end)return -1;
    80209d0e:	557d                	li	a0,-1
}
    80209d10:	8082                	ret

0000000080209d12 <freewalk>:

// Recursively free page-table pages.
// All leaf mappings must already have been removed.
void
freewalk(pagetable_t pagetable)
{
    80209d12:	715d                	addi	sp,sp,-80
    80209d14:	e486                	sd	ra,72(sp)
    80209d16:	e0a2                	sd	s0,64(sp)
    80209d18:	fc26                	sd	s1,56(sp)
    80209d1a:	f84a                	sd	s2,48(sp)
    80209d1c:	f44e                	sd	s3,40(sp)
    80209d1e:	f052                	sd	s4,32(sp)
    80209d20:	ec56                	sd	s5,24(sp)
    80209d22:	e85a                	sd	s6,16(sp)
    80209d24:	e45e                	sd	s7,8(sp)
    80209d26:	e062                	sd	s8,0(sp)
    80209d28:	0880                	addi	s0,sp,80
    80209d2a:	8baa                	mv	s7,a0
    80209d2c:	892a                	mv	s2,a0
    80209d2e:	4481                	li	s1,0
  //printf("[freewalk]enter %p\n",pagetable);
  // there are 2^9 = 512 PTEs in a page table.
  for(int i = 0; i < 512; i++){
    pte_t pte = pagetable[i];
    if(pagetable[i]==kernel_pagetable[i])continue;
    80209d30:	00862a17          	auipc	s4,0x862
    80209d34:	2c8a0a13          	addi	s4,s4,712 # 80a6bff8 <kernel_pagetable>
    if((pte & PTE_V) && (pte & (PTE_R|PTE_W|PTE_X) ) == 0){
    80209d38:	4a85                	li	s5,1
      uint64 child = PTE2PA(pte);
      freewalk((pagetable_t)child);
      pagetable[i] = 0;
    } 
    else if(pte & PTE_V){
      __debug_warn("freewalk: leaf %d\n",i);
    80209d3a:	00009b17          	auipc	s6,0x9
    80209d3e:	e5eb0b13          	addi	s6,s6,-418 # 80212b98 <digits+0x2b0>
  for(int i = 0; i < 512; i++){
    80209d42:	20000993          	li	s3,512
    80209d46:	a01d                	j	80209d6c <freewalk+0x5a>
      uint64 child = PTE2PA(pte);
    80209d48:	8129                	srli	a0,a0,0xa
      freewalk((pagetable_t)child);
    80209d4a:	0532                	slli	a0,a0,0xc
    80209d4c:	00000097          	auipc	ra,0x0
    80209d50:	fc6080e7          	jalr	-58(ra) # 80209d12 <freewalk>
      pagetable[i] = 0;
    80209d54:	00093023          	sd	zero,0(s2)
    80209d58:	a031                	j	80209d64 <freewalk+0x52>
      __debug_warn("freewalk: leaf %d\n",i);
    80209d5a:	855a                	mv	a0,s6
    80209d5c:	fffff097          	auipc	ra,0xfffff
    80209d60:	d60080e7          	jalr	-672(ra) # 80208abc <__debug_warn>
  for(int i = 0; i < 512; i++){
    80209d64:	0485                	addi	s1,s1,1
    80209d66:	0921                	addi	s2,s2,8
    80209d68:	03348563          	beq	s1,s3,80209d92 <freewalk+0x80>
    80209d6c:	0004859b          	sext.w	a1,s1
    pte_t pte = pagetable[i];
    80209d70:	00093503          	ld	a0,0(s2)
    if(pagetable[i]==kernel_pagetable[i])continue;
    80209d74:	000a3783          	ld	a5,0(s4)
    80209d78:	00349713          	slli	a4,s1,0x3
    80209d7c:	97ba                	add	a5,a5,a4
    80209d7e:	639c                	ld	a5,0(a5)
    80209d80:	fea782e3          	beq	a5,a0,80209d64 <freewalk+0x52>
    if((pte & PTE_V) && (pte & (PTE_R|PTE_W|PTE_X) ) == 0){
    80209d84:	00f57793          	andi	a5,a0,15
    80209d88:	fd5780e3          	beq	a5,s5,80209d48 <freewalk+0x36>
    else if(pte & PTE_V){
    80209d8c:	8905                	andi	a0,a0,1
    80209d8e:	d979                	beqz	a0,80209d64 <freewalk+0x52>
    80209d90:	b7e9                	j	80209d5a <freewalk+0x48>
      //pagetable[i]=0;
    }
  }
  freepage((void*)pagetable);
    80209d92:	855e                	mv	a0,s7
    80209d94:	fffff097          	auipc	ra,0xfffff
    80209d98:	48c080e7          	jalr	1164(ra) # 80209220 <_freepage>
}
    80209d9c:	60a6                	ld	ra,72(sp)
    80209d9e:	6406                	ld	s0,64(sp)
    80209da0:	74e2                	ld	s1,56(sp)
    80209da2:	7942                	ld	s2,48(sp)
    80209da4:	79a2                	ld	s3,40(sp)
    80209da6:	7a02                	ld	s4,32(sp)
    80209da8:	6ae2                	ld	s5,24(sp)
    80209daa:	6b42                	ld	s6,16(sp)
    80209dac:	6ba2                	ld	s7,8(sp)
    80209dae:	6c02                	ld	s8,0(sp)
    80209db0:	6161                	addi	sp,sp,80
    80209db2:	8082                	ret

0000000080209db4 <kvmcreate>:

// create an empty user page table.
// returns 0 if out of memory.
pagetable_t
kvmcreate()
{
    80209db4:	1101                	addi	sp,sp,-32
    80209db6:	ec06                	sd	ra,24(sp)
    80209db8:	e822                	sd	s0,16(sp)
    80209dba:	e426                	sd	s1,8(sp)
    80209dbc:	e04a                	sd	s2,0(sp)
    80209dbe:	1000                	addi	s0,sp,32
  pagetable_t pagetable;
  pagetable = (pagetable_t) allocpage();
    80209dc0:	fffff097          	auipc	ra,0xfffff
    80209dc4:	3c0080e7          	jalr	960(ra) # 80209180 <_allocpage>
  if(pagetable == NULL)
    return NULL;
    80209dc8:	4901                	li	s2,0
  if(pagetable == NULL)
    80209dca:	c11d                	beqz	a0,80209df0 <kvmcreate+0x3c>
    80209dcc:	84aa                	mv	s1,a0
  pagetable = (pagetable_t) allocpage();
    80209dce:	892a                	mv	s2,a0
  memset(pagetable, 0, PGSIZE);
    80209dd0:	6605                	lui	a2,0x1
    80209dd2:	4581                	li	a1,0
    80209dd4:	ffff7097          	auipc	ra,0xffff7
    80209dd8:	fa0080e7          	jalr	-96(ra) # 80200d74 <memset>
  memmove(pagetable, kernel_pagetable, PGSIZE);
    80209ddc:	6605                	lui	a2,0x1
    80209dde:	00862597          	auipc	a1,0x862
    80209de2:	21a5b583          	ld	a1,538(a1) # 80a6bff8 <kernel_pagetable>
    80209de6:	8526                	mv	a0,s1
    80209de8:	ffff7097          	auipc	ra,0xffff7
    80209dec:	fec080e7          	jalr	-20(ra) # 80200dd4 <memmove>
  return pagetable;
}
    80209df0:	854a                	mv	a0,s2
    80209df2:	60e2                	ld	ra,24(sp)
    80209df4:	6442                	ld	s0,16(sp)
    80209df6:	64a2                	ld	s1,8(sp)
    80209df8:	6902                	ld	s2,0(sp)
    80209dfa:	6105                	addi	sp,sp,32
    80209dfc:	8082                	ret

0000000080209dfe <uvmfree>:

// Free user memory pages,
// then free page-table pages.
void
uvmfree(struct proc *p)
{
    80209dfe:	1101                	addi	sp,sp,-32
    80209e00:	ec06                	sd	ra,24(sp)
    80209e02:	e822                	sd	s0,16(sp)
    80209e04:	e426                	sd	s1,8(sp)
    80209e06:	1000                	addi	s0,sp,32
    80209e08:	84aa                	mv	s1,a0
  free_vma_list(p);
    80209e0a:	00002097          	auipc	ra,0x2
    80209e0e:	c0e080e7          	jalr	-1010(ra) # 8020ba18 <free_vma_list>
  // vmunmap(pagetable, 0, PGROUNDUP(sz)/PGSIZE, 1);
  freewalk(p->pagetable);
    80209e12:	70a8                	ld	a0,96(s1)
    80209e14:	00000097          	auipc	ra,0x0
    80209e18:	efe080e7          	jalr	-258(ra) # 80209d12 <freewalk>
}
    80209e1c:	60e2                	ld	ra,24(sp)
    80209e1e:	6442                	ld	s0,16(sp)
    80209e20:	64a2                	ld	s1,8(sp)
    80209e22:	6105                	addi	sp,sp,32
    80209e24:	8082                	ret

0000000080209e26 <uvmprotect>:


int 
uvmprotect(uint64 va, uint64 len, int perm)
{
    80209e26:	7139                	addi	sp,sp,-64
    80209e28:	fc06                	sd	ra,56(sp)
    80209e2a:	f822                	sd	s0,48(sp)
    80209e2c:	f426                	sd	s1,40(sp)
    80209e2e:	f04a                	sd	s2,32(sp)
    80209e30:	ec4e                	sd	s3,24(sp)
    80209e32:	e852                	sd	s4,16(sp)
    80209e34:	e456                	sd	s5,8(sp)
    80209e36:	e05a                	sd	s6,0(sp)
    80209e38:	0080                	addi	s0,sp,64
    80209e3a:	89aa                	mv	s3,a0
    80209e3c:	892e                	mv	s2,a1
    80209e3e:	8ab2                	mv	s5,a2
  int fence = 0;
  uint64 i;
  pte_t *pte = NULL;
  struct proc *p = myproc();
    80209e40:	00001097          	auipc	ra,0x1
    80209e44:	60c080e7          	jalr	1548(ra) # 8020b44c <myproc>
  if(va % PGSIZE != 0)
    80209e48:	03499793          	slli	a5,s3,0x34
    80209e4c:	efb9                	bnez	a5,80209eaa <uvmprotect+0x84>
    80209e4e:	8a2a                	mv	s4,a0
  {
    __debug_warn("[uvmprotect] va is illegal\n");
    return -EINVAL;
  }

  if(len % PGSIZE)
    80209e50:	03491793          	slli	a5,s2,0x34
    80209e54:	0347d493          	srli	s1,a5,0x34
    80209e58:	e3bd                	bnez	a5,80209ebe <uvmprotect+0x98>
  {
    __debug_warn("[uvmprotect] len is illegal\n");
    return -EINVAL;
  }
  
  struct vma *vma = (struct vma*)find_map_fix(p, va, len);
    80209e5a:	864a                	mv	a2,s2
    80209e5c:	85ce                	mv	a1,s3
    80209e5e:	00002097          	auipc	ra,0x2
    80209e62:	58e080e7          	jalr	1422(ra) # 8020c3ec <find_map_fix>
  if(!vma) vma = part_locate_vma(p->vma, va, va + len);
    80209e66:	c535                	beqz	a0,80209ed2 <uvmprotect+0xac>
  {
    __debug_warn("[uvmprotect] memory illegal\n");
    return -EINVAL;
  }
  
  if(vma->type == MMAP && vma->fd != -1)
    80209e68:	4118                	lw	a4,0(a0)
    80209e6a:	4799                	li	a5,6
    80209e6c:	08f70763          	beq	a4,a5,80209efa <uvmprotect+0xd4>
    {
      return -EINVAL;
    }
  }
  
  for(i = 0; i < len; i += PGSIZE)
    80209e70:	6b05                	lui	s6,0x1
      return -ENOMEM;
    }
  }
  if(fence)
    sfence_vma();
  return 0;
    80209e72:	4501                	li	a0,0
  for(i = 0; i < len; i += PGSIZE)
    80209e74:	0c090863          	beqz	s2,80209f44 <uvmprotect+0x11e>
    pte = walk(p->pagetable, va + i, 0);
    80209e78:	4601                	li	a2,0
    80209e7a:	009985b3          	add	a1,s3,s1
    80209e7e:	060a3503          	ld	a0,96(s4)
    80209e82:	00000097          	auipc	ra,0x0
    80209e86:	8f0080e7          	jalr	-1808(ra) # 80209772 <walk>
    if(pte == NULL)
    80209e8a:	c545                	beqz	a0,80209f32 <uvmprotect+0x10c>
    if(*pte & PTE_V)
    80209e8c:	611c                	ld	a5,0(a0)
    80209e8e:	0017f713          	andi	a4,a5,1
    80209e92:	c379                	beqz	a4,80209f58 <uvmprotect+0x132>
      *pte = (*pte & ~(PTE_W | PTE_R | PTE_X)) | perm;
    80209e94:	9bc5                	andi	a5,a5,-15
    80209e96:	0157e7b3          	or	a5,a5,s5
    80209e9a:	e11c                	sd	a5,0(a0)
  for(i = 0; i < len; i += PGSIZE)
    80209e9c:	94da                	add	s1,s1,s6
    80209e9e:	fd24ede3          	bltu	s1,s2,80209e78 <uvmprotect+0x52>
    80209ea2:	12000073          	sfence.vma
  return 0;
    80209ea6:	4501                	li	a0,0
}
    80209ea8:	a871                	j	80209f44 <uvmprotect+0x11e>
    __debug_warn("[uvmprotect] va is illegal\n");
    80209eaa:	00009517          	auipc	a0,0x9
    80209eae:	d0650513          	addi	a0,a0,-762 # 80212bb0 <digits+0x2c8>
    80209eb2:	fffff097          	auipc	ra,0xfffff
    80209eb6:	c0a080e7          	jalr	-1014(ra) # 80208abc <__debug_warn>
    return -EINVAL;
    80209eba:	5529                	li	a0,-22
    80209ebc:	a061                	j	80209f44 <uvmprotect+0x11e>
    __debug_warn("[uvmprotect] len is illegal\n");
    80209ebe:	00009517          	auipc	a0,0x9
    80209ec2:	d1250513          	addi	a0,a0,-750 # 80212bd0 <digits+0x2e8>
    80209ec6:	fffff097          	auipc	ra,0xfffff
    80209eca:	bf6080e7          	jalr	-1034(ra) # 80208abc <__debug_warn>
    return -EINVAL;
    80209ece:	5529                	li	a0,-22
    80209ed0:	a895                	j	80209f44 <uvmprotect+0x11e>
  if(!vma) vma = part_locate_vma(p->vma, va, va + len);
    80209ed2:	01298633          	add	a2,s3,s2
    80209ed6:	85ce                	mv	a1,s3
    80209ed8:	170a3503          	ld	a0,368(s4)
    80209edc:	00001097          	auipc	ra,0x1
    80209ee0:	784080e7          	jalr	1924(ra) # 8020b660 <part_locate_vma>
  if(vma == NULL)
    80209ee4:	f151                	bnez	a0,80209e68 <uvmprotect+0x42>
    __debug_warn("[uvmprotect] memory illegal\n");
    80209ee6:	00009517          	auipc	a0,0x9
    80209eea:	d0a50513          	addi	a0,a0,-758 # 80212bf0 <digits+0x308>
    80209eee:	fffff097          	auipc	ra,0xfffff
    80209ef2:	bce080e7          	jalr	-1074(ra) # 80208abc <__debug_warn>
    return -EINVAL;
    80209ef6:	5529                	li	a0,-22
    80209ef8:	a0b1                	j	80209f44 <uvmprotect+0x11e>
  if(vma->type == MMAP && vma->fd != -1)
    80209efa:	555c                	lw	a5,44(a0)
    80209efc:	577d                	li	a4,-1
    80209efe:	f6e789e3          	beq	a5,a4,80209e70 <uvmprotect+0x4a>
    struct file *f = p->ofile[vma->fd];
    80209f02:	0e8a3703          	ld	a4,232(s4)
    80209f06:	078e                	slli	a5,a5,0x3
    80209f08:	97ba                	add	a5,a5,a4
    80209f0a:	639c                	ld	a5,0(a5)
    if(f == NULL)
    80209f0c:	cb89                	beqz	a5,80209f1e <uvmprotect+0xf8>
    if(!(f->writable) && (perm & PTE_W))
    80209f0e:	0097c783          	lbu	a5,9(a5) # 1009 <_entry-0x801feff7>
    80209f12:	ffb9                	bnez	a5,80209e70 <uvmprotect+0x4a>
    80209f14:	004af793          	andi	a5,s5,4
    80209f18:	dfa1                	beqz	a5,80209e70 <uvmprotect+0x4a>
      return -EINVAL;
    80209f1a:	5529                	li	a0,-22
    80209f1c:	a025                	j	80209f44 <uvmprotect+0x11e>
      __debug_warn("[uvmprotect] something wrong in MMAP memoryn\n");
    80209f1e:	00009517          	auipc	a0,0x9
    80209f22:	cf250513          	addi	a0,a0,-782 # 80212c10 <digits+0x328>
    80209f26:	fffff097          	auipc	ra,0xfffff
    80209f2a:	b96080e7          	jalr	-1130(ra) # 80208abc <__debug_warn>
      return -EINVAL;
    80209f2e:	5529                	li	a0,-22
    80209f30:	a811                	j	80209f44 <uvmprotect+0x11e>
      __debug_warn("[uvmprotect] page not mapped\n");
    80209f32:	00009517          	auipc	a0,0x9
    80209f36:	d0e50513          	addi	a0,a0,-754 # 80212c40 <digits+0x358>
    80209f3a:	fffff097          	auipc	ra,0xfffff
    80209f3e:	b82080e7          	jalr	-1150(ra) # 80208abc <__debug_warn>
      return -ENOMEM;
    80209f42:	5551                	li	a0,-12
}
    80209f44:	70e2                	ld	ra,56(sp)
    80209f46:	7442                	ld	s0,48(sp)
    80209f48:	74a2                	ld	s1,40(sp)
    80209f4a:	7902                	ld	s2,32(sp)
    80209f4c:	69e2                	ld	s3,24(sp)
    80209f4e:	6a42                	ld	s4,16(sp)
    80209f50:	6aa2                	ld	s5,8(sp)
    80209f52:	6b02                	ld	s6,0(sp)
    80209f54:	6121                	addi	sp,sp,64
    80209f56:	8082                	ret
      __debug_warn("[uvmprotect] page is invalid\n");
    80209f58:	00009517          	auipc	a0,0x9
    80209f5c:	d0850513          	addi	a0,a0,-760 # 80212c60 <digits+0x378>
    80209f60:	fffff097          	auipc	ra,0xfffff
    80209f64:	b5c080e7          	jalr	-1188(ra) # 80208abc <__debug_warn>
      return -ENOMEM;
    80209f68:	5551                	li	a0,-12
    80209f6a:	bfe9                	j	80209f44 <uvmprotect+0x11e>

0000000080209f6c <handle_page_fault>:

int handle_page_fault(int kind, uint64 stval)
{
    80209f6c:	7179                	addi	sp,sp,-48
    80209f6e:	f406                	sd	ra,40(sp)
    80209f70:	f022                	sd	s0,32(sp)
    80209f72:	ec26                	sd	s1,24(sp)
    80209f74:	e84a                	sd	s2,16(sp)
    80209f76:	e44e                	sd	s3,8(sp)
    80209f78:	e052                	sd	s4,0(sp)
    80209f7a:	1800                	addi	s0,sp,48
    80209f7c:	89aa                	mv	s3,a0
    80209f7e:	892e                	mv	s2,a1
  struct proc *p = myproc();
    80209f80:	00001097          	auipc	ra,0x1
    80209f84:	4cc080e7          	jalr	1228(ra) # 8020b44c <myproc>
    80209f88:	84aa                	mv	s1,a0
  struct vma *vma1 = addr_locate_vma(p->vma, stval - 1);
    80209f8a:	fff90593          	addi	a1,s2,-1
    80209f8e:	17053503          	ld	a0,368(a0)
    80209f92:	00001097          	auipc	ra,0x1
    80209f96:	6a0080e7          	jalr	1696(ra) # 8020b632 <addr_locate_vma>
    80209f9a:	8a2a                	mv	s4,a0
  struct vma *vma2 = addr_locate_vma(p->vma, stval + 1);
    80209f9c:	00190593          	addi	a1,s2,1
    80209fa0:	1704b503          	ld	a0,368(s1)
    80209fa4:	00001097          	auipc	ra,0x1
    80209fa8:	68e080e7          	jalr	1678(ra) # 8020b632 <addr_locate_vma>
  if(vma2)
    80209fac:	c91d                	beqz	a0,80209fe2 <handle_page_fault+0x76>
  {
    if(vma2->type == STACK)
    80209fae:	4118                	lw	a4,0(a0)
    80209fb0:	479d                	li	a5,7
    {
      vma1 = vma2;
    }
    else 
    {
      return -1;
    80209fb2:	557d                	li	a0,-1
    if(vma2->type == STACK)
    80209fb4:	00f71f63          	bne	a4,a5,80209fd2 <handle_page_fault+0x66>
  else if(!vma1)
  {
    return -1;
  }

  pte_t *pte = walk(p->pagetable, stval, 0);
    80209fb8:	4601                	li	a2,0
    80209fba:	85ca                	mv	a1,s2
    80209fbc:	70a8                	ld	a0,96(s1)
    80209fbe:	fffff097          	auipc	ra,0xfffff
    80209fc2:	7b4080e7          	jalr	1972(ra) # 80209772 <walk>
    80209fc6:	87aa                	mv	a5,a0
    {
      return -1;
    }
  }

  return 0;
    80209fc8:	4501                	li	a0,0
  if(pte)
    80209fca:	c781                	beqz	a5,80209fd2 <handle_page_fault+0x66>
    if(kind == 1 && (*pte && PTE_W))
    80209fcc:	4705                	li	a4,1
    80209fce:	00e98e63          	beq	s3,a4,80209fea <handle_page_fault+0x7e>
    80209fd2:	70a2                	ld	ra,40(sp)
    80209fd4:	7402                	ld	s0,32(sp)
    80209fd6:	64e2                	ld	s1,24(sp)
    80209fd8:	6942                	ld	s2,16(sp)
    80209fda:	69a2                	ld	s3,8(sp)
    80209fdc:	6a02                	ld	s4,0(sp)
    80209fde:	6145                	addi	sp,sp,48
    80209fe0:	8082                	ret
  else if(!vma1)
    80209fe2:	fc0a1be3          	bnez	s4,80209fb8 <handle_page_fault+0x4c>
    return -1;
    80209fe6:	557d                	li	a0,-1
    80209fe8:	b7ed                	j	80209fd2 <handle_page_fault+0x66>
    if(kind == 1 && (*pte && PTE_W))
    80209fea:	6388                	ld	a0,0(a5)
    80209fec:	00a03533          	snez	a0,a0
    80209ff0:	40a00533          	neg	a0,a0
    80209ff4:	bff9                	j	80209fd2 <handle_page_fault+0x66>

0000000080209ff6 <plicinit>:

//
// the riscv Platform Level Interrupt Controller (PLIC).
//

void plicinit(void) {
    80209ff6:	1141                	addi	sp,sp,-16
    80209ff8:	e406                	sd	ra,8(sp)
    80209ffa:	e022                	sd	s0,0(sp)
    80209ffc:	0800                	addi	s0,sp,16
    // set desired IRQ priorities non-zero (otherwise disabled).
    //writed(1,PLIC_V + VIRTIO0_IRQ * 4);
    //writed(1, PLIC_V + DISK_IRQ * sizeof(uint32));
    writed(1, PLIC_V + UART1_IRQ * sizeof(uint32));
    80209ffe:	00fc37b7          	lui	a5,0xfc3
    8020a002:	07ba                	slli	a5,a5,0xe
    8020a004:	4705                	li	a4,1
    8020a006:	cbd8                	sw	a4,20(a5)
    //writed(1, PLIC_V + UART1_IRQ * sizeof(uint32));
#ifdef	DEBUG
     printf("plicinit\n");
    8020a008:	00009517          	auipc	a0,0x9
    8020a00c:	c7850513          	addi	a0,a0,-904 # 80212c80 <digits+0x398>
    8020a010:	ffffe097          	auipc	ra,0xffffe
    8020a014:	720080e7          	jalr	1824(ra) # 80208730 <printf>
#endif 
}
    8020a018:	60a2                	ld	ra,8(sp)
    8020a01a:	6402                	ld	s0,0(sp)
    8020a01c:	0141                	addi	sp,sp,16
    8020a01e:	8082                	ret

000000008020a020 <plicinithart>:

void plicinithart(void) {
    8020a020:	1141                	addi	sp,sp,-16
    8020a022:	e406                	sd	ra,8(sp)
    8020a024:	e022                	sd	s0,0(sp)
    8020a026:	0800                	addi	s0,sp,16
    int hart = cpuid();
    8020a028:	00001097          	auipc	ra,0x1
    8020a02c:	3f8080e7          	jalr	1016(ra) # 8020b420 <cpuid>
    // set uart's enable bit for this hart's S-mode.
    *(uint32 *)PLIC_SENABLE(hart) = (1 << UART1_IRQ);
    8020a030:	0085171b          	slliw	a4,a0,0x8
    8020a034:	01f867b7          	lui	a5,0x1f86
    8020a038:	0785                	addi	a5,a5,1
    8020a03a:	07b6                	slli	a5,a5,0xd
    8020a03c:	97ba                	add	a5,a5,a4
    8020a03e:	02000713          	li	a4,32
    8020a042:	c398                	sw	a4,0(a5)
    // set this hart's S-mode priority threshold to 0.
    *(uint32 *)PLIC_SPRIORITY(hart) = 0;
    8020a044:	00d5151b          	slliw	a0,a0,0xd
    8020a048:	1f8617b7          	lui	a5,0x1f861
    8020a04c:	07a6                	slli	a5,a5,0x9
    8020a04e:	953e                	add	a0,a0,a5
    8020a050:	00052023          	sw	zero,0(a0)
#ifdef DEBUG
     printf("plichartinit\n");
    8020a054:	00009517          	auipc	a0,0x9
    8020a058:	c3c50513          	addi	a0,a0,-964 # 80212c90 <digits+0x3a8>
    8020a05c:	ffffe097          	auipc	ra,0xffffe
    8020a060:	6d4080e7          	jalr	1748(ra) # 80208730 <printf>
#endif 
}
    8020a064:	60a2                	ld	ra,8(sp)
    8020a066:	6402                	ld	s0,0(sp)
    8020a068:	0141                	addi	sp,sp,16
    8020a06a:	8082                	ret

000000008020a06c <plic_claim>:

// ask the PLIC what interrupt we should serve.
int plic_claim(void) {
    8020a06c:	1141                	addi	sp,sp,-16
    8020a06e:	e406                	sd	ra,8(sp)
    8020a070:	e022                	sd	s0,0(sp)
    8020a072:	0800                	addi	s0,sp,16
    int hart = cpuid();
    8020a074:	00001097          	auipc	ra,0x1
    8020a078:	3ac080e7          	jalr	940(ra) # 8020b420 <cpuid>
    int irq = *(uint32 *)PLIC_SCLAIM(hart);
    8020a07c:	00d5179b          	slliw	a5,a0,0xd
    8020a080:	1f861537          	lui	a0,0x1f861
    8020a084:	0526                	slli	a0,a0,0x9
    8020a086:	953e                	add	a0,a0,a5
    return irq;
}
    8020a088:	4148                	lw	a0,4(a0)
    8020a08a:	60a2                	ld	ra,8(sp)
    8020a08c:	6402                	ld	s0,0(sp)
    8020a08e:	0141                	addi	sp,sp,16
    8020a090:	8082                	ret

000000008020a092 <plic_complete>:

// tell the PLIC we've served this IRQ.
void plic_complete(int irq) {
    8020a092:	1101                	addi	sp,sp,-32
    8020a094:	ec06                	sd	ra,24(sp)
    8020a096:	e822                	sd	s0,16(sp)
    8020a098:	e426                	sd	s1,8(sp)
    8020a09a:	1000                	addi	s0,sp,32
    8020a09c:	84aa                	mv	s1,a0
    int hart = cpuid();
    8020a09e:	00001097          	auipc	ra,0x1
    8020a0a2:	382080e7          	jalr	898(ra) # 8020b420 <cpuid>
    *(uint32 *)PLIC_SCLAIM(hart) = irq;
    8020a0a6:	00d5151b          	slliw	a0,a0,0xd
    8020a0aa:	1f8617b7          	lui	a5,0x1f861
    8020a0ae:	07a6                	slli	a5,a5,0x9
    8020a0b0:	97aa                	add	a5,a5,a0
    8020a0b2:	c3c4                	sw	s1,4(a5)
}
    8020a0b4:	60e2                	ld	ra,24(sp)
    8020a0b6:	6442                	ld	s0,16(sp)
    8020a0b8:	64a2                	ld	s1,8(sp)
    8020a0ba:	6105                	addi	sp,sp,32
    8020a0bc:	8082                	ret

000000008020a0be <timerinit>:
#include "include/proc.h"

struct spinlock tickslock;
uint ticks;

void timerinit() {
    8020a0be:	1141                	addi	sp,sp,-16
    8020a0c0:	e406                	sd	ra,8(sp)
    8020a0c2:	e022                	sd	s0,0(sp)
    8020a0c4:	0800                	addi	s0,sp,16
    initlock(&tickslock, "time");
    8020a0c6:	00008597          	auipc	a1,0x8
    8020a0ca:	55258593          	addi	a1,a1,1362 # 80212618 <rodata_start+0x618>
    8020a0ce:	00862517          	auipc	a0,0x862
    8020a0d2:	f3250513          	addi	a0,a0,-206 # 80a6c000 <tickslock>
    8020a0d6:	ffffe097          	auipc	ra,0xffffe
    8020a0da:	25c080e7          	jalr	604(ra) # 80208332 <initlock>
    ticks = 0;
    8020a0de:	00862797          	auipc	a5,0x862
    8020a0e2:	f207ad23          	sw	zero,-198(a5) # 80a6c018 <ticks>
    #ifdef DEBUG
    printf("timerinit\n");
    8020a0e6:	00009517          	auipc	a0,0x9
    8020a0ea:	bba50513          	addi	a0,a0,-1094 # 80212ca0 <digits+0x3b8>
    8020a0ee:	ffffe097          	auipc	ra,0xffffe
    8020a0f2:	642080e7          	jalr	1602(ra) # 80208730 <printf>
    #endif
}
    8020a0f6:	60a2                	ld	ra,8(sp)
    8020a0f8:	6402                	ld	s0,0(sp)
    8020a0fa:	0141                	addi	sp,sp,16
    8020a0fc:	8082                	ret

000000008020a0fe <set_next_timeout>:

void
set_next_timeout() {
    8020a0fe:	1141                	addi	sp,sp,-16
    8020a100:	e422                	sd	s0,8(sp)
    8020a102:	0800                	addi	s0,sp,16
  asm volatile("rdtime %0" : "=r" (x) );
    8020a104:	c0102573          	rdtime	a0
    // if comment the `printf` line below
    // the timer will not work.

    // this bug seems to disappear automatically
    // printf("");
    set_timer(r_time() + INTERVAL);
    8020a108:	00bec7b7          	lui	a5,0xbec
    8020a10c:	c2078793          	addi	a5,a5,-992 # bebc20 <_entry-0x7f6143e0>
    8020a110:	953e                	add	a0,a0,a5
	register uint64 a1 asm ("a1") = (uint64)(arg1);
    8020a112:	4581                	li	a1,0
	register uint64 a2 asm ("a2") = (uint64)(arg2);
    8020a114:	4601                	li	a2,0
	register uint64 a3 asm ("a3") = (uint64)(arg3);
    8020a116:	4681                	li	a3,0
	register uint64 a4 asm ("a4") = (uint64)(arg4);
    8020a118:	4701                	li	a4,0
	register uint64 a5 asm ("a5") = (uint64)(arg5);
    8020a11a:	4781                	li	a5,0
	register uint64 a6 asm ("a6") = (uint64)(fid);
    8020a11c:	4801                	li	a6,0
	register uint64 a7 asm ("a7") = (uint64)(ext);
    8020a11e:	544958b7          	lui	a7,0x54495
    8020a122:	d4588893          	addi	a7,a7,-699 # 54494d45 <_entry-0x2bd6b2bb>
	asm volatile ("ecall"
    8020a126:	00000073          	ecall
}
    8020a12a:	6422                	ld	s0,8(sp)
    8020a12c:	0141                	addi	sp,sp,16
    8020a12e:	8082                	ret

000000008020a130 <timer_tick>:

void timer_tick() {
    8020a130:	1101                	addi	sp,sp,-32
    8020a132:	ec06                	sd	ra,24(sp)
    8020a134:	e822                	sd	s0,16(sp)
    8020a136:	e426                	sd	s1,8(sp)
    8020a138:	1000                	addi	s0,sp,32
    acquire(&tickslock);
    8020a13a:	00862497          	auipc	s1,0x862
    8020a13e:	ec648493          	addi	s1,s1,-314 # 80a6c000 <tickslock>
    8020a142:	8526                	mv	a0,s1
    8020a144:	ffffe097          	auipc	ra,0xffffe
    8020a148:	232080e7          	jalr	562(ra) # 80208376 <acquire>
    ticks++;
    8020a14c:	00862517          	auipc	a0,0x862
    8020a150:	ecc50513          	addi	a0,a0,-308 # 80a6c018 <ticks>
    8020a154:	411c                	lw	a5,0(a0)
    8020a156:	2785                	addiw	a5,a5,1
    8020a158:	c11c                	sw	a5,0(a0)
    wakeup(&ticks);
    8020a15a:	ffff8097          	auipc	ra,0xffff8
    8020a15e:	bd2080e7          	jalr	-1070(ra) # 80201d2c <wakeup>
    release(&tickslock);
    8020a162:	8526                	mv	a0,s1
    8020a164:	ffffe097          	auipc	ra,0xffffe
    8020a168:	266080e7          	jalr	614(ra) # 802083ca <release>
    set_next_timeout();
    8020a16c:	00000097          	auipc	ra,0x0
    8020a170:	f92080e7          	jalr	-110(ra) # 8020a0fe <set_next_timeout>
}
    8020a174:	60e2                	ld	ra,24(sp)
    8020a176:	6442                	ld	s0,16(sp)
    8020a178:	64a2                	ld	s1,8(sp)
    8020a17a:	6105                	addi	sp,sp,32
    8020a17c:	8082                	ret

000000008020a17e <get_ticks>:

uint64 get_ticks()
{
    8020a17e:	1101                	addi	sp,sp,-32
    8020a180:	ec06                	sd	ra,24(sp)
    8020a182:	e822                	sd	s0,16(sp)
    8020a184:	e426                	sd	s1,8(sp)
    8020a186:	e04a                	sd	s2,0(sp)
    8020a188:	1000                	addi	s0,sp,32
    acquire(&tickslock);
    8020a18a:	00862497          	auipc	s1,0x862
    8020a18e:	e7648493          	addi	s1,s1,-394 # 80a6c000 <tickslock>
    8020a192:	8526                	mv	a0,s1
    8020a194:	ffffe097          	auipc	ra,0xffffe
    8020a198:	1e2080e7          	jalr	482(ra) # 80208376 <acquire>
    uint64 ret = ticks;
    8020a19c:	00862917          	auipc	s2,0x862
    8020a1a0:	e7c96903          	lwu	s2,-388(s2) # 80a6c018 <ticks>
    release(&tickslock);
    8020a1a4:	8526                	mv	a0,s1
    8020a1a6:	ffffe097          	auipc	ra,0xffffe
    8020a1aa:	224080e7          	jalr	548(ra) # 802083ca <release>
    return ret;
}
    8020a1ae:	854a                	mv	a0,s2
    8020a1b0:	60e2                	ld	ra,24(sp)
    8020a1b2:	6442                	ld	s0,16(sp)
    8020a1b4:	64a2                	ld	s1,8(sp)
    8020a1b6:	6902                	ld	s2,0(sp)
    8020a1b8:	6105                	addi	sp,sp,32
    8020a1ba:	8082                	ret

000000008020a1bc <get_time_ms>:

uint64 get_time_ms() {
    8020a1bc:	1141                	addi	sp,sp,-16
    8020a1be:	e422                	sd	s0,8(sp)
    8020a1c0:	0800                	addi	s0,sp,16
    8020a1c2:	c0102573          	rdtime	a0
    uint64 time = r_time();
    return time / (TICK_FREQ / MSEC_PER_SEC);
}
    8020a1c6:	3e800793          	li	a5,1000
    8020a1ca:	02f55533          	divu	a0,a0,a5
    8020a1ce:	6422                	ld	s0,8(sp)
    8020a1d0:	0141                	addi	sp,sp,16
    8020a1d2:	8082                	ret

000000008020a1d4 <get_time_us>:

uint64 get_time_us() {
    8020a1d4:	1141                	addi	sp,sp,-16
    8020a1d6:	e422                	sd	s0,8(sp)
    8020a1d8:	0800                	addi	s0,sp,16
    8020a1da:	c0102573          	rdtime	a0
    return r_time() * USEC_PER_SEC / TICK_FREQ;
    8020a1de:	000f47b7          	lui	a5,0xf4
    8020a1e2:	24078793          	addi	a5,a5,576 # f4240 <_entry-0x8010bdc0>
    8020a1e6:	02f50533          	mul	a0,a0,a5
}
    8020a1ea:	02f55533          	divu	a0,a0,a5
    8020a1ee:	6422                	ld	s0,8(sp)
    8020a1f0:	0141                	addi	sp,sp,16
    8020a1f2:	8082                	ret

000000008020a1f4 <get_timeval>:

struct timeval get_timeval(){
    8020a1f4:	1101                	addi	sp,sp,-32
    8020a1f6:	ec22                	sd	s0,24(sp)
    8020a1f8:	1000                	addi	s0,sp,32
    8020a1fa:	c01027f3          	rdtime	a5
   uint64 time = r_time();
   return (struct timeval){
     .sec = time / (TICK_FREQ),
     .usec = time / (TICK_FREQ / MSEC_PER_SEC),
   };
}
    8020a1fe:	000f4537          	lui	a0,0xf4
    8020a202:	24050513          	addi	a0,a0,576 # f4240 <_entry-0x8010bdc0>
    8020a206:	02a7d533          	divu	a0,a5,a0
    8020a20a:	3e800593          	li	a1,1000
    8020a20e:	02b7d5b3          	divu	a1,a5,a1
    8020a212:	6462                	ld	s0,24(sp)
    8020a214:	6105                	addi	sp,sp,32
    8020a216:	8082                	ret

000000008020a218 <main>:
}
*/

void
main(unsigned long hartid, unsigned long dtb_pa)
{
    8020a218:	7139                	addi	sp,sp,-64
    8020a21a:	fc06                	sd	ra,56(sp)
    8020a21c:	f822                	sd	s0,48(sp)
    8020a21e:	f426                	sd	s1,40(sp)
    8020a220:	f04a                	sd	s2,32(sp)
    8020a222:	ec4e                	sd	s3,24(sp)
    8020a224:	e852                	sd	s4,16(sp)
    8020a226:	e456                	sd	s5,8(sp)
    8020a228:	0080                	addi	s0,sp,64
    8020a22a:	84aa                	mv	s1,a0
  asm volatile("mv tp, %0" : : "r" (hartid));
    8020a22c:	822a                	mv	tp,a0
  inithartid(hartid);
  booted[hartid]=1;
    8020a22e:	00251713          	slli	a4,a0,0x2
    8020a232:	00862797          	auipc	a5,0x862
    8020a236:	dee78793          	addi	a5,a5,-530 # 80a6c020 <booted>
    8020a23a:	97ba                	add	a5,a5,a4
    8020a23c:	4705                	li	a4,1
    8020a23e:	c398                	sw	a4,0(a5)
  
  if (__first_boot_magic == 0x5a5a) { /* boot hart not fixed 1 */
    8020a240:	0080c697          	auipc	a3,0x80c
    8020a244:	e106b683          	ld	a3,-496(a3) # 80a16050 <__first_boot_magic>
    8020a248:	6799                	lui	a5,0x6
    8020a24a:	a5a78793          	addi	a5,a5,-1446 # 5a5a <_entry-0x801fa5a6>
    started=1;
  }
  else
  {
    // hart 1
    while (started == 0)
    8020a24e:	00862717          	auipc	a4,0x862
    8020a252:	e3a70713          	addi	a4,a4,-454 # 80a6c088 <started>
  if (__first_boot_magic == 0x5a5a) { /* boot hart not fixed 1 */
    8020a256:	04f68563          	beq	a3,a5,8020a2a0 <main+0x88>
    while (started == 0)
    8020a25a:	431c                	lw	a5,0(a4)
    8020a25c:	2781                	sext.w	a5,a5
    8020a25e:	dff5                	beqz	a5,8020a25a <main+0x42>
    ;
    printf("hart %d enter main()...\n", hartid);
    8020a260:	85a6                	mv	a1,s1
    8020a262:	00009517          	auipc	a0,0x9
    8020a266:	a8e50513          	addi	a0,a0,-1394 # 80212cf0 <digits+0x408>
    8020a26a:	ffffe097          	auipc	ra,0xffffe
    8020a26e:	4c6080e7          	jalr	1222(ra) # 80208730 <printf>
    kvminithart();
    8020a272:	fffff097          	auipc	ra,0xfffff
    8020a276:	4c8080e7          	jalr	1224(ra) # 8020973a <kvminithart>
    trapinithart();  // install kernel trap vector, including interrupt handler
    8020a27a:	00000097          	auipc	ra,0x0
    8020a27e:	244080e7          	jalr	580(ra) # 8020a4be <trapinithart>
    __sync_synchronize();
    8020a282:	0ff0000f          	fence
  }
  printf("hart %d scheduler!\n", hartid);
    8020a286:	85a6                	mv	a1,s1
    8020a288:	00009517          	auipc	a0,0x9
    8020a28c:	a8850513          	addi	a0,a0,-1400 # 80212d10 <digits+0x428>
    8020a290:	ffffe097          	auipc	ra,0xffffe
    8020a294:	4a0080e7          	jalr	1184(ra) # 80208730 <printf>
  scheduler();
    8020a298:	ffff7097          	auipc	ra,0xffff7
    8020a29c:	44a080e7          	jalr	1098(ra) # 802016e2 <scheduler>
    __first_boot_magic = 0;
    8020a2a0:	0080c797          	auipc	a5,0x80c
    8020a2a4:	da07b823          	sd	zero,-592(a5) # 80a16050 <__first_boot_magic>
    cpuinit();
    8020a2a8:	00001097          	auipc	ra,0x1
    8020a2ac:	152080e7          	jalr	338(ra) # 8020b3fa <cpuinit>
    printfinit();
    8020a2b0:	fffff097          	auipc	ra,0xfffff
    8020a2b4:	bb4080e7          	jalr	-1100(ra) # 80208e64 <printfinit>
    printf("hart %d enter main() from %p...\n", hartid,_entry);
    8020a2b8:	ffff6617          	auipc	a2,0xffff6
    8020a2bc:	d4860613          	addi	a2,a2,-696 # 80200000 <_entry>
    8020a2c0:	85a6                	mv	a1,s1
    8020a2c2:	00009517          	auipc	a0,0x9
    8020a2c6:	9ee50513          	addi	a0,a0,-1554 # 80212cb0 <digits+0x3c8>
    8020a2ca:	ffffe097          	auipc	ra,0xffffe
    8020a2ce:	466080e7          	jalr	1126(ra) # 80208730 <printf>
    8020a2d2:	4905                	li	s2,1
	register uint64 a7 asm ("a7") = (uint64)(ext);
    8020a2d4:	004859b7          	lui	s3,0x485
    8020a2d8:	34d98993          	addi	s3,s3,845 # 48534d <_entry-0x7fd7acb3>
        printf("cpu#%d state:%d\r\n", i, sbi_hsm_hart_status(i));
    8020a2dc:	00009a97          	auipc	s5,0x9
    8020a2e0:	9fca8a93          	addi	s5,s5,-1540 # 80212cd8 <digits+0x3f0>
    for(int i = 1; i < NCPU; i++) {
    8020a2e4:	4a15                	li	s4,5
    8020a2e6:	a811                	j	8020a2fa <main+0xe2>
        printf("cpu#%d state:%d\r\n", i, sbi_hsm_hart_status(i));
    8020a2e8:	859a                	mv	a1,t1
    8020a2ea:	8556                	mv	a0,s5
    8020a2ec:	ffffe097          	auipc	ra,0xffffe
    8020a2f0:	444080e7          	jalr	1092(ra) # 80208730 <printf>
    for(int i = 1; i < NCPU; i++) {
    8020a2f4:	0905                	addi	s2,s2,1
    8020a2f6:	03490463          	beq	s2,s4,8020a31e <main+0x106>
    8020a2fa:	0009031b          	sext.w	t1,s2
	register uint64 a0 asm ("a0") = (uint64)(arg0);
    8020a2fe:	854a                	mv	a0,s2
	register uint64 a1 asm ("a1") = (uint64)(arg1);
    8020a300:	4581                	li	a1,0
	register uint64 a2 asm ("a2") = (uint64)(arg2);
    8020a302:	4601                	li	a2,0
	register uint64 a3 asm ("a3") = (uint64)(arg3);
    8020a304:	4681                	li	a3,0
	register uint64 a4 asm ("a4") = (uint64)(arg4);
    8020a306:	4701                	li	a4,0
	register uint64 a5 asm ("a5") = (uint64)(arg5);
    8020a308:	4781                	li	a5,0
	register uint64 a6 asm ("a6") = (uint64)(fid);
    8020a30a:	4809                	li	a6,2
	register uint64 a7 asm ("a7") = (uint64)(ext);
    8020a30c:	88ce                	mv	a7,s3
	asm volatile ("ecall"
    8020a30e:	00000073          	ecall
}

static inline int sbi_hsm_hart_status(unsigned long hart){
    struct sbiret ret;
    ret = a_sbi_ecall(0x48534D, 2, hart, 0, 0, 0, 0, 0);
    return (ret.error != 0 ? (int)ret.error : (int)ret.value);
    8020a312:	0005861b          	sext.w	a2,a1
    8020a316:	d969                	beqz	a0,8020a2e8 <main+0xd0>
    8020a318:	0005061b          	sext.w	a2,a0
    8020a31c:	b7f1                	j	8020a2e8 <main+0xd0>
    kpminit();
    8020a31e:	fffff097          	auipc	ra,0xfffff
    8020a322:	c96080e7          	jalr	-874(ra) # 80208fb4 <kpminit>
    kmallocinit();
    8020a326:	fffff097          	auipc	ra,0xfffff
    8020a32a:	040080e7          	jalr	64(ra) # 80209366 <kmallocinit>
    kvminit();       // create kernel page table
    8020a32e:	fffff097          	auipc	ra,0xfffff
    8020a332:	5be080e7          	jalr	1470(ra) # 802098ec <kvminit>
    kvminithart();   // turn on paging
    8020a336:	fffff097          	auipc	ra,0xfffff
    8020a33a:	404080e7          	jalr	1028(ra) # 8020973a <kvminithart>
    timerinit();     // init a lock for timer
    8020a33e:	00000097          	auipc	ra,0x0
    8020a342:	d80080e7          	jalr	-640(ra) # 8020a0be <timerinit>
    trapinithart();  // install kernel trap vector, including interrupt handler
    8020a346:	00000097          	auipc	ra,0x0
    8020a34a:	178080e7          	jalr	376(ra) # 8020a4be <trapinithart>
    procinit();
    8020a34e:	ffff7097          	auipc	ra,0xffff7
    8020a352:	f7e080e7          	jalr	-130(ra) # 802012cc <procinit>
    plicinit();
    8020a356:	00000097          	auipc	ra,0x0
    8020a35a:	ca0080e7          	jalr	-864(ra) # 80209ff6 <plicinit>
    binit();
    8020a35e:	ffff6097          	auipc	ra,0xffff6
    8020a362:	cde080e7          	jalr	-802(ra) # 8020003c <binit>
    disk_init();
    8020a366:	ffff7097          	auipc	ra,0xffff7
    8020a36a:	9a0080e7          	jalr	-1632(ra) # 80200d06 <disk_init>
    fs_init();
    8020a36e:	ffff9097          	auipc	ra,0xffff9
    8020a372:	afe080e7          	jalr	-1282(ra) # 80202e6c <fs_init>
    logbufinit();
    8020a376:	00005097          	auipc	ra,0x5
    8020a37a:	16a080e7          	jalr	362(ra) # 8020f4e0 <logbufinit>
    devinit();
    8020a37e:	ffffd097          	auipc	ra,0xffffd
    8020a382:	63e080e7          	jalr	1598(ra) # 802079bc <devinit>
    fileinit();
    8020a386:	ffffb097          	auipc	ra,0xffffb
    8020a38a:	e6c080e7          	jalr	-404(ra) # 802051f2 <fileinit>
      userinit();
    8020a38e:	ffff8097          	auipc	ra,0xffff8
    8020a392:	a14080e7          	jalr	-1516(ra) # 80201da2 <userinit>
    __sync_synchronize();
    8020a396:	0ff0000f          	fence
    for(int i = 1; i < NCPU; i++) {
    8020a39a:	00862e17          	auipc	t3,0x862
    8020a39e:	c86e0e13          	addi	t3,t3,-890 # 80a6c020 <booted>
    __sync_synchronize();
    8020a3a2:	4305                	li	t1,1
          start_hart(i, (uint64)_entry, 0);
    8020a3a4:	ffff6f17          	auipc	t5,0xffff6
    8020a3a8:	c5cf0f13          	addi	t5,t5,-932 # 80200000 <_entry>
	register uint64 a7 asm ("a7") = (uint64)(ext);
    8020a3ac:	004858b7          	lui	a7,0x485
    8020a3b0:	34d88893          	addi	a7,a7,845 # 48534d <_entry-0x7fd7acb3>
    for(int i = 1; i < NCPU; i++) {
    8020a3b4:	4e95                	li	t4,5
    8020a3b6:	a029                	j	8020a3c0 <main+0x1a8>
    8020a3b8:	0305                	addi	t1,t1,1
    8020a3ba:	0e11                	addi	t3,t3,4
    8020a3bc:	03d30063          	beq	t1,t4,8020a3dc <main+0x1c4>
        if(hartid!=i&&booted[i]==0){
    8020a3c0:	fe648ce3          	beq	s1,t1,8020a3b8 <main+0x1a0>
    8020a3c4:	004e2783          	lw	a5,4(t3)
    8020a3c8:	fbe5                	bnez	a5,8020a3b8 <main+0x1a0>
	register uint64 a0 asm ("a0") = (uint64)(arg0);
    8020a3ca:	851a                	mv	a0,t1
	register uint64 a1 asm ("a1") = (uint64)(arg1);
    8020a3cc:	85fa                	mv	a1,t5
	register uint64 a2 asm ("a2") = (uint64)(arg2);
    8020a3ce:	4601                	li	a2,0
	register uint64 a3 asm ("a3") = (uint64)(arg3);
    8020a3d0:	4681                	li	a3,0
	register uint64 a4 asm ("a4") = (uint64)(arg4);
    8020a3d2:	4701                	li	a4,0
	register uint64 a6 asm ("a6") = (uint64)(fid);
    8020a3d4:	4801                	li	a6,0
	asm volatile ("ecall"
    8020a3d6:	00000073          	ecall
}
    8020a3da:	bff9                	j	8020a3b8 <main+0x1a0>
    started=1;
    8020a3dc:	4785                	li	a5,1
    8020a3de:	00862717          	auipc	a4,0x862
    8020a3e2:	caf72523          	sw	a5,-854(a4) # 80a6c088 <started>
    8020a3e6:	b545                	j	8020a286 <main+0x6e>

000000008020a3e8 <__get_boot_hartid>:
}

int
__get_boot_hartid(int a0)
{
    8020a3e8:	1141                	addi	sp,sp,-16
    8020a3ea:	e422                	sd	s0,8(sp)
    8020a3ec:	0800                	addi	s0,sp,16
    8020a3ee:	8eaa                	mv	t4,a0
    8020a3f0:	4301                	li	t1,0
	register uint64 a7 asm ("a7") = (uint64)(ext);
    8020a3f2:	004858b7          	lui	a7,0x485
    8020a3f6:	34d88893          	addi	a7,a7,845 # 48534d <_entry-0x7fd7acb3>
    int i;
    for (i = 0; i < 5; i++)
    8020a3fa:	4e15                	li	t3,5
    8020a3fc:	a029                	j	8020a406 <__get_boot_hartid+0x1e>
    {
        if (sbi_hsm_hart_status(i) == 0)
    8020a3fe:	c585                	beqz	a1,8020a426 <__get_boot_hartid+0x3e>
    for (i = 0; i < 5; i++)
    8020a400:	0305                	addi	t1,t1,1
    8020a402:	03c30363          	beq	t1,t3,8020a428 <__get_boot_hartid+0x40>
    8020a406:	00030f1b          	sext.w	t5,t1
	register uint64 a0 asm ("a0") = (uint64)(arg0);
    8020a40a:	851a                	mv	a0,t1
	register uint64 a1 asm ("a1") = (uint64)(arg1);
    8020a40c:	4581                	li	a1,0
	register uint64 a2 asm ("a2") = (uint64)(arg2);
    8020a40e:	4601                	li	a2,0
	register uint64 a3 asm ("a3") = (uint64)(arg3);
    8020a410:	4681                	li	a3,0
	register uint64 a4 asm ("a4") = (uint64)(arg4);
    8020a412:	4701                	li	a4,0
	register uint64 a5 asm ("a5") = (uint64)(arg5);
    8020a414:	4781                	li	a5,0
	register uint64 a6 asm ("a6") = (uint64)(fid);
    8020a416:	4809                	li	a6,2
	asm volatile ("ecall"
    8020a418:	00000073          	ecall
    return (ret.error != 0 ? (int)ret.error : (int)ret.value);
    8020a41c:	2581                	sext.w	a1,a1
    8020a41e:	d165                	beqz	a0,8020a3fe <__get_boot_hartid+0x16>
    8020a420:	0005059b          	sext.w	a1,a0
    8020a424:	bfe9                	j	8020a3fe <__get_boot_hartid+0x16>
    8020a426:	8efa                	mv	t4,t5
        {
            return i;
        }
    }
    return a0;
}
    8020a428:	8576                	mv	a0,t4
    8020a42a:	6422                	ld	s0,8(sp)
    8020a42c:	0141                	addi	sp,sp,16
    8020a42e:	8082                	ret

000000008020a430 <kernelvec>:
    8020a430:	7111                	addi	sp,sp,-256
    8020a432:	e006                	sd	ra,0(sp)
    8020a434:	e40a                	sd	sp,8(sp)
    8020a436:	e80e                	sd	gp,16(sp)
    8020a438:	ec12                	sd	tp,24(sp)
    8020a43a:	f016                	sd	t0,32(sp)
    8020a43c:	f41a                	sd	t1,40(sp)
    8020a43e:	f81e                	sd	t2,48(sp)
    8020a440:	fc22                	sd	s0,56(sp)
    8020a442:	e0a6                	sd	s1,64(sp)
    8020a444:	e4aa                	sd	a0,72(sp)
    8020a446:	e8ae                	sd	a1,80(sp)
    8020a448:	ecb2                	sd	a2,88(sp)
    8020a44a:	f0b6                	sd	a3,96(sp)
    8020a44c:	f4ba                	sd	a4,104(sp)
    8020a44e:	f8be                	sd	a5,112(sp)
    8020a450:	fcc2                	sd	a6,120(sp)
    8020a452:	e146                	sd	a7,128(sp)
    8020a454:	e54a                	sd	s2,136(sp)
    8020a456:	e94e                	sd	s3,144(sp)
    8020a458:	ed52                	sd	s4,152(sp)
    8020a45a:	f156                	sd	s5,160(sp)
    8020a45c:	f55a                	sd	s6,168(sp)
    8020a45e:	f95e                	sd	s7,176(sp)
    8020a460:	fd62                	sd	s8,184(sp)
    8020a462:	e1e6                	sd	s9,192(sp)
    8020a464:	e5ea                	sd	s10,200(sp)
    8020a466:	e9ee                	sd	s11,208(sp)
    8020a468:	edf2                	sd	t3,216(sp)
    8020a46a:	f1f6                	sd	t4,224(sp)
    8020a46c:	f5fa                	sd	t5,232(sp)
    8020a46e:	f9fe                	sd	t6,240(sp)
    8020a470:	184000ef          	jal	ra,8020a5f4 <kerneltrap>
    8020a474:	6082                	ld	ra,0(sp)
    8020a476:	6122                	ld	sp,8(sp)
    8020a478:	61c2                	ld	gp,16(sp)
    8020a47a:	7282                	ld	t0,32(sp)
    8020a47c:	7322                	ld	t1,40(sp)
    8020a47e:	73c2                	ld	t2,48(sp)
    8020a480:	7462                	ld	s0,56(sp)
    8020a482:	6486                	ld	s1,64(sp)
    8020a484:	6526                	ld	a0,72(sp)
    8020a486:	65c6                	ld	a1,80(sp)
    8020a488:	6666                	ld	a2,88(sp)
    8020a48a:	7686                	ld	a3,96(sp)
    8020a48c:	7726                	ld	a4,104(sp)
    8020a48e:	77c6                	ld	a5,112(sp)
    8020a490:	7866                	ld	a6,120(sp)
    8020a492:	688a                	ld	a7,128(sp)
    8020a494:	692a                	ld	s2,136(sp)
    8020a496:	69ca                	ld	s3,144(sp)
    8020a498:	6a6a                	ld	s4,152(sp)
    8020a49a:	7a8a                	ld	s5,160(sp)
    8020a49c:	7b2a                	ld	s6,168(sp)
    8020a49e:	7bca                	ld	s7,176(sp)
    8020a4a0:	7c6a                	ld	s8,184(sp)
    8020a4a2:	6c8e                	ld	s9,192(sp)
    8020a4a4:	6d2e                	ld	s10,200(sp)
    8020a4a6:	6dce                	ld	s11,208(sp)
    8020a4a8:	6e6e                	ld	t3,216(sp)
    8020a4aa:	7e8e                	ld	t4,224(sp)
    8020a4ac:	7f2e                	ld	t5,232(sp)
    8020a4ae:	7fce                	ld	t6,240(sp)
    8020a4b0:	6111                	addi	sp,sp,256
    8020a4b2:	10200073          	sret
	...

000000008020a4be <trapinithart>:
// }

// set up to take exceptions and traps while in the kernel.
void
trapinithart(void)
{
    8020a4be:	1141                	addi	sp,sp,-16
    8020a4c0:	e406                	sd	ra,8(sp)
    8020a4c2:	e022                	sd	s0,0(sp)
    8020a4c4:	0800                	addi	s0,sp,16
  asm volatile("csrw stvec, %0" : : "r" (x));
    8020a4c6:	00000797          	auipc	a5,0x0
    8020a4ca:	f6a78793          	addi	a5,a5,-150 # 8020a430 <kernelvec>
    8020a4ce:	10579073          	csrw	stvec,a5
  asm volatile("csrr %0, sstatus" : "=r" (x) );
    8020a4d2:	100027f3          	csrr	a5,sstatus
  w_stvec((uint64)kernelvec);
  w_sstatus(r_sstatus() | SSTATUS_SIE);
    8020a4d6:	0027e793          	ori	a5,a5,2
  asm volatile("csrw sstatus, %0" : : "r" (x));
    8020a4da:	10079073          	csrw	sstatus,a5
  asm volatile("csrr %0, sie" : "=r" (x) );
    8020a4de:	104027f3          	csrr	a5,sie
  // enable supervisor-mode timer interrupts.
  w_sie(r_sie() | SIE_SEIE | SIE_SSIE | SIE_STIE);
    8020a4e2:	2227e793          	ori	a5,a5,546
  asm volatile("csrw sie, %0" : : "r" (x));
    8020a4e6:	10479073          	csrw	sie,a5
  set_next_timeout();
    8020a4ea:	00000097          	auipc	ra,0x0
    8020a4ee:	c14080e7          	jalr	-1004(ra) # 8020a0fe <set_next_timeout>
  __debug_info("trapinithart\n");
    8020a4f2:	00009517          	auipc	a0,0x9
    8020a4f6:	83650513          	addi	a0,a0,-1994 # 80212d28 <digits+0x440>
    8020a4fa:	ffffe097          	auipc	ra,0xffffe
    8020a4fe:	3fc080e7          	jalr	1020(ra) # 802088f6 <__debug_info>
}
    8020a502:	60a2                	ld	ra,8(sp)
    8020a504:	6402                	ld	s0,0(sp)
    8020a506:	0141                	addi	sp,sp,16
    8020a508:	8082                	ret

000000008020a50a <usertrapret>:
  usertrapret();
}


void
usertrapret(){
    8020a50a:	1141                	addi	sp,sp,-16
    8020a50c:	e406                	sd	ra,8(sp)
    8020a50e:	e022                	sd	s0,0(sp)
    8020a510:	0800                	addi	s0,sp,16
  struct proc *p = myproc();
    8020a512:	00001097          	auipc	ra,0x1
    8020a516:	f3a080e7          	jalr	-198(ra) # 8020b44c <myproc>
  asm volatile("csrr %0, sstatus" : "=r" (x) );
    8020a51a:	100027f3          	csrr	a5,sstatus
  w_sstatus(r_sstatus() & ~SSTATUS_SIE);
    8020a51e:	9bf5                	andi	a5,a5,-3
  asm volatile("csrw sstatus, %0" : : "r" (x));
    8020a520:	10079073          	csrw	sstatus,a5
  // we're about to switch the destination of traps from
  // kerneltrap() to usertrap(), so turn off interrupts until
  // we're back in user space, where usertrap() is correct.
  intr_off();
  // send syscalls, interrupts, and exceptions to trampoline.S
  w_stvec(TRAMPOLINE + (uservec - trampoline));
    8020a524:	00006617          	auipc	a2,0x6
    8020a528:	adc60613          	addi	a2,a2,-1316 # 80210000 <_trampoline>
    8020a52c:	00006697          	auipc	a3,0x6
    8020a530:	ad468693          	addi	a3,a3,-1324 # 80210000 <_trampoline>
    8020a534:	8e91                	sub	a3,a3,a2
    8020a536:	040007b7          	lui	a5,0x4000
    8020a53a:	17fd                	addi	a5,a5,-1
    8020a53c:	07b2                	slli	a5,a5,0xc
    8020a53e:	96be                	add	a3,a3,a5
  asm volatile("csrw stvec, %0" : : "r" (x));
    8020a540:	10569073          	csrw	stvec,a3

  // set up trapframe values that uservec will need when
  // the process next re-enters the kernel.
  p->trapframe->kernel_satp = r_satp();         // kernel page table
    8020a544:	7538                	ld	a4,104(a0)
  asm volatile("csrr %0, satp" : "=r" (x) );
    8020a546:	180026f3          	csrr	a3,satp
    8020a54a:	e314                	sd	a3,0(a4)
  p->trapframe->kernel_sp = p->kstack + PGSIZE; // process's kernel stack
    8020a54c:	7538                	ld	a4,104(a0)
    8020a54e:	6934                	ld	a3,80(a0)
    8020a550:	6585                	lui	a1,0x1
    8020a552:	96ae                	add	a3,a3,a1
    8020a554:	e714                	sd	a3,8(a4)
  p->trapframe->kernel_trap = (uint64)usertrap;
    8020a556:	7538                	ld	a4,104(a0)
    8020a558:	00000697          	auipc	a3,0x0
    8020a55c:	42668693          	addi	a3,a3,1062 # 8020a97e <usertrap>
    8020a560:	eb14                	sd	a3,16(a4)
  p->trapframe->kernel_hartid = r_tp();         // hartid for cpuid()
    8020a562:	7538                	ld	a4,104(a0)
  asm volatile("mv %0, tp" : "=r" (x) );
    8020a564:	8692                	mv	a3,tp
    8020a566:	f314                	sd	a3,32(a4)
  asm volatile("csrr %0, sstatus" : "=r" (x) );
    8020a568:	100026f3          	csrr	a3,sstatus
  // set up the registers that trampoline.S's sret will use
  // to get to user space.
  
  // set S Previous Privilege mode to User.
  unsigned long x = r_sstatus();
  x &= ~SSTATUS_SPP; // clear SPP to 0 for user mode
    8020a56c:	eff6f693          	andi	a3,a3,-257
  x |= SSTATUS_SPIE; // enable interrupts in user mode
    8020a570:	0206e693          	ori	a3,a3,32
  asm volatile("csrw sstatus, %0" : : "r" (x));
    8020a574:	10069073          	csrw	sstatus,a3
  w_sstatus(x);

  // set S Exception Program Counter to the saved user pc.
  w_sepc(p->trapframe->epc);
    8020a578:	7538                	ld	a4,104(a0)
  asm volatile("csrw sepc, %0" : : "r" (x));
    8020a57a:	6f18                	ld	a4,24(a4)
    8020a57c:	14171073          	csrw	sepc,a4

  // tell trampoline.S the user page table to switch to.
  // printf("[usertrapret]p->pagetable: %p\n", p->pagetable);
  uint64 satp = MAKE_SATP(p->pagetable);
    8020a580:	712c                	ld	a1,96(a0)
    8020a582:	81b1                	srli	a1,a1,0xc

  // jump to trampoline.S at the top of memory, which 
  // switches to the user page table, restores user registers,
  // and switches to user mode with sret.

  uint64 fn = TRAMPOLINE + (userret - trampoline);
    8020a584:	00006717          	auipc	a4,0x6
    8020a588:	b0c70713          	addi	a4,a4,-1268 # 80210090 <userret>
    8020a58c:	8f11                	sub	a4,a4,a2
    8020a58e:	97ba                	add	a5,a5,a4
  
  ((void (*)(uint64,uint64))fn)(TRAPFRAME, satp);
    8020a590:	577d                	li	a4,-1
    8020a592:	177e                	slli	a4,a4,0x3f
    8020a594:	8dd9                	or	a1,a1,a4
    8020a596:	7ffff537          	lui	a0,0x7ffff
    8020a59a:	9782                	jalr	a5
}
    8020a59c:	60a2                	ld	ra,8(sp)
    8020a59e:	6402                	ld	s0,0(sp)
    8020a5a0:	0141                	addi	sp,sp,16
    8020a5a2:	8082                	ret

000000008020a5a4 <devintr>:
// Check if it's an external/software interrupt, 
// and handle it. 
// returns  2 if timer interrupt, 
//          1 if other device, 
//          0 if not recognized. 
int devintr(void) {
    8020a5a4:	1141                	addi	sp,sp,-16
    8020a5a6:	e406                	sd	ra,8(sp)
    8020a5a8:	e022                	sd	s0,0(sp)
    8020a5aa:	0800                	addi	s0,sp,16
  asm volatile("csrr %0, scause" : "=r" (x) );
    8020a5ac:	14202773          	csrr	a4,scause
	uint64 scause = r_scause();
	//printf("devintr scause:%p\n",scause);

	// handle external interrupt 
	if ((0x8000000000000000L & scause) && 9 == (scause & 0xff)) 
    8020a5b0:	00074c63          	bltz	a4,8020a5c8 <devintr+0x24>
		sbi_set_mie();
		#endif 

		return 1;
	}
	else if (0x8000000000000005L == scause) {
    8020a5b4:	57fd                	li	a5,-1
    8020a5b6:	17fe                	slli	a5,a5,0x3f
    8020a5b8:	0795                	addi	a5,a5,5
		timer_tick();
                //proc_tick();
		return 2;
	}
	else { return 0;}
    8020a5ba:	4501                	li	a0,0
	else if (0x8000000000000005L == scause) {
    8020a5bc:	02f70663          	beq	a4,a5,8020a5e8 <devintr+0x44>
}
    8020a5c0:	60a2                	ld	ra,8(sp)
    8020a5c2:	6402                	ld	s0,0(sp)
    8020a5c4:	0141                	addi	sp,sp,16
    8020a5c6:	8082                	ret
	if ((0x8000000000000000L & scause) && 9 == (scause & 0xff)) 
    8020a5c8:	0ff77793          	andi	a5,a4,255
    8020a5cc:	46a5                	li	a3,9
    8020a5ce:	fed793e3          	bne	a5,a3,8020a5b4 <devintr+0x10>
		printf("irq:%d\n",irq);
    8020a5d2:	4581                	li	a1,0
    8020a5d4:	00008517          	auipc	a0,0x8
    8020a5d8:	76450513          	addi	a0,a0,1892 # 80212d38 <digits+0x450>
    8020a5dc:	ffffe097          	auipc	ra,0xffffe
    8020a5e0:	154080e7          	jalr	340(ra) # 80208730 <printf>
		return 1;
    8020a5e4:	4505                	li	a0,1
    8020a5e6:	bfe9                	j	8020a5c0 <devintr+0x1c>
		timer_tick();
    8020a5e8:	00000097          	auipc	ra,0x0
    8020a5ec:	b48080e7          	jalr	-1208(ra) # 8020a130 <timer_tick>
		return 2;
    8020a5f0:	4509                	li	a0,2
    8020a5f2:	b7f9                	j	8020a5c0 <devintr+0x1c>

000000008020a5f4 <kerneltrap>:
kerneltrap() {
    8020a5f4:	7179                	addi	sp,sp,-48
    8020a5f6:	f406                	sd	ra,40(sp)
    8020a5f8:	f022                	sd	s0,32(sp)
    8020a5fa:	ec26                	sd	s1,24(sp)
    8020a5fc:	e84a                	sd	s2,16(sp)
    8020a5fe:	e44e                	sd	s3,8(sp)
    8020a600:	1800                	addi	s0,sp,48
  asm volatile("csrr %0, sepc" : "=r" (x) );
    8020a602:	14102973          	csrr	s2,sepc
  asm volatile("csrr %0, sstatus" : "=r" (x) );
    8020a606:	100024f3          	csrr	s1,sstatus
  asm volatile("csrr %0, scause" : "=r" (x) );
    8020a60a:	142029f3          	csrr	s3,scause
  if((sstatus & SSTATUS_SPP) == 0)
    8020a60e:	1004f793          	andi	a5,s1,256
    8020a612:	cb85                	beqz	a5,8020a642 <kerneltrap+0x4e>
  asm volatile("csrr %0, sstatus" : "=r" (x) );
    8020a614:	100027f3          	csrr	a5,sstatus
  return (x & SSTATUS_SIE) != 0;
    8020a618:	8b89                	andi	a5,a5,2
  if(intr_get() != 0)
    8020a61a:	ef85                	bnez	a5,8020a652 <kerneltrap+0x5e>
  if((which_dev = devintr()) == 0){
    8020a61c:	00000097          	auipc	ra,0x0
    8020a620:	f88080e7          	jalr	-120(ra) # 8020a5a4 <devintr>
    8020a624:	cd1d                	beqz	a0,8020a662 <kerneltrap+0x6e>
  if(which_dev == 2 && myproc() != 0 && myproc()->state == RUNNING) {
    8020a626:	4789                	li	a5,2
    8020a628:	08f50b63          	beq	a0,a5,8020a6be <kerneltrap+0xca>
  asm volatile("csrw sepc, %0" : : "r" (x));
    8020a62c:	14191073          	csrw	sepc,s2
  asm volatile("csrw sstatus, %0" : : "r" (x));
    8020a630:	10049073          	csrw	sstatus,s1
}
    8020a634:	70a2                	ld	ra,40(sp)
    8020a636:	7402                	ld	s0,32(sp)
    8020a638:	64e2                	ld	s1,24(sp)
    8020a63a:	6942                	ld	s2,16(sp)
    8020a63c:	69a2                	ld	s3,8(sp)
    8020a63e:	6145                	addi	sp,sp,48
    8020a640:	8082                	ret
    panic("kerneltrap: not from supervisor mode");
    8020a642:	00008517          	auipc	a0,0x8
    8020a646:	6fe50513          	addi	a0,a0,1790 # 80212d40 <digits+0x458>
    8020a64a:	ffffe097          	auipc	ra,0xffffe
    8020a64e:	09c080e7          	jalr	156(ra) # 802086e6 <panic>
    panic("kerneltrap: interrupts enabled");
    8020a652:	00008517          	auipc	a0,0x8
    8020a656:	71650513          	addi	a0,a0,1814 # 80212d68 <digits+0x480>
    8020a65a:	ffffe097          	auipc	ra,0xffffe
    8020a65e:	08c080e7          	jalr	140(ra) # 802086e6 <panic>
    printf("\nscause %p\n", scause);
    8020a662:	85ce                	mv	a1,s3
    8020a664:	00008517          	auipc	a0,0x8
    8020a668:	72450513          	addi	a0,a0,1828 # 80212d88 <digits+0x4a0>
    8020a66c:	ffffe097          	auipc	ra,0xffffe
    8020a670:	0c4080e7          	jalr	196(ra) # 80208730 <printf>
  asm volatile("csrr %0, sepc" : "=r" (x) );
    8020a674:	141025f3          	csrr	a1,sepc
  asm volatile("csrr %0, stval" : "=r" (x) );
    8020a678:	14302673          	csrr	a2,stval
  asm volatile("mv %0, tp" : "=r" (x) );
    8020a67c:	8692                	mv	a3,tp
    printf("sepc=%p stval=%p hart=%d\n", r_sepc(), r_stval(), r_tp());
    8020a67e:	00008517          	auipc	a0,0x8
    8020a682:	71a50513          	addi	a0,a0,1818 # 80212d98 <digits+0x4b0>
    8020a686:	ffffe097          	auipc	ra,0xffffe
    8020a68a:	0aa080e7          	jalr	170(ra) # 80208730 <printf>
    struct proc *p = myproc();
    8020a68e:	00001097          	auipc	ra,0x1
    8020a692:	dbe080e7          	jalr	-578(ra) # 8020b44c <myproc>
    if (p != 0) {
    8020a696:	cd01                	beqz	a0,8020a6ae <kerneltrap+0xba>
      printf("pid: %d, name: %s\n", p->pid, p->name);
    8020a698:	10050613          	addi	a2,a0,256
    8020a69c:	412c                	lw	a1,64(a0)
    8020a69e:	00008517          	auipc	a0,0x8
    8020a6a2:	71a50513          	addi	a0,a0,1818 # 80212db8 <digits+0x4d0>
    8020a6a6:	ffffe097          	auipc	ra,0xffffe
    8020a6aa:	08a080e7          	jalr	138(ra) # 80208730 <printf>
    panic("kerneltrap");
    8020a6ae:	00008517          	auipc	a0,0x8
    8020a6b2:	72250513          	addi	a0,a0,1826 # 80212dd0 <digits+0x4e8>
    8020a6b6:	ffffe097          	auipc	ra,0xffffe
    8020a6ba:	030080e7          	jalr	48(ra) # 802086e6 <panic>
  if(which_dev == 2 && myproc() != 0 && myproc()->state == RUNNING) {
    8020a6be:	00001097          	auipc	ra,0x1
    8020a6c2:	d8e080e7          	jalr	-626(ra) # 8020b44c <myproc>
    8020a6c6:	d13d                	beqz	a0,8020a62c <kerneltrap+0x38>
    8020a6c8:	00001097          	auipc	ra,0x1
    8020a6cc:	d84080e7          	jalr	-636(ra) # 8020b44c <myproc>
    8020a6d0:	5118                	lw	a4,32(a0)
    8020a6d2:	478d                	li	a5,3
    8020a6d4:	f4f71ce3          	bne	a4,a5,8020a62c <kerneltrap+0x38>
    yield();
    8020a6d8:	ffff8097          	auipc	ra,0xffff8
    8020a6dc:	aca080e7          	jalr	-1334(ra) # 802021a2 <yield>
    8020a6e0:	b7b1                	j	8020a62c <kerneltrap+0x38>

000000008020a6e2 <handle_excp>:

// be noticed that syscall is not handled here 
int handle_excp(uint64 scause) {
    8020a6e2:	1141                	addi	sp,sp,-16
    8020a6e4:	e406                	sd	ra,8(sp)
    8020a6e6:	e022                	sd	s0,0(sp)
    8020a6e8:	0800                	addi	s0,sp,16
	// later implementation may handle more cases, such as lazy allocation, mmap, etc.
	switch (scause) {
    8020a6ea:	4735                	li	a4,13
    8020a6ec:	02e50263          	beq	a0,a4,8020a710 <handle_excp+0x2e>
    8020a6f0:	87aa                	mv	a5,a0
    8020a6f2:	473d                	li	a4,15
    8020a6f4:	5579                	li	a0,-2
    8020a6f6:	00e79963          	bne	a5,a4,8020a708 <handle_excp+0x26>
  asm volatile("csrr %0, stval" : "=r" (x) );
    8020a6fa:	143025f3          	csrr	a1,stval
	case EXCP_STORE_PAGE: 
	#ifndef QEMU 
	case EXCP_STORE_ACCESS: 
	#endif 
		return handle_page_fault(1, r_stval());
    8020a6fe:	4505                	li	a0,1
    8020a700:	00000097          	auipc	ra,0x0
    8020a704:	86c080e7          	jalr	-1940(ra) # 80209f6c <handle_page_fault>
	#endif 
		return handle_page_fault(0, r_stval());
	default: 
    return -2;
	}
}
    8020a708:	60a2                	ld	ra,8(sp)
    8020a70a:	6402                	ld	s0,0(sp)
    8020a70c:	0141                	addi	sp,sp,16
    8020a70e:	8082                	ret
    8020a710:	143025f3          	csrr	a1,stval
		return handle_page_fault(0, r_stval());
    8020a714:	4501                	li	a0,0
    8020a716:	00000097          	auipc	ra,0x0
    8020a71a:	856080e7          	jalr	-1962(ra) # 80209f6c <handle_page_fault>
    8020a71e:	b7ed                	j	8020a708 <handle_excp+0x26>

000000008020a720 <trapframedump>:


void trapframedump(struct trapframe *tf)
{
    8020a720:	1101                	addi	sp,sp,-32
    8020a722:	ec06                	sd	ra,24(sp)
    8020a724:	e822                	sd	s0,16(sp)
    8020a726:	e426                	sd	s1,8(sp)
    8020a728:	1000                	addi	s0,sp,32
    8020a72a:	84aa                	mv	s1,a0
  printf("a0: %p\t", tf->a0);
    8020a72c:	792c                	ld	a1,112(a0)
    8020a72e:	00008517          	auipc	a0,0x8
    8020a732:	6b250513          	addi	a0,a0,1714 # 80212de0 <digits+0x4f8>
    8020a736:	ffffe097          	auipc	ra,0xffffe
    8020a73a:	ffa080e7          	jalr	-6(ra) # 80208730 <printf>
  printf("a1: %p\t", tf->a1);
    8020a73e:	7cac                	ld	a1,120(s1)
    8020a740:	00008517          	auipc	a0,0x8
    8020a744:	6a850513          	addi	a0,a0,1704 # 80212de8 <digits+0x500>
    8020a748:	ffffe097          	auipc	ra,0xffffe
    8020a74c:	fe8080e7          	jalr	-24(ra) # 80208730 <printf>
  printf("a2: %p\t", tf->a2);
    8020a750:	60cc                	ld	a1,128(s1)
    8020a752:	00008517          	auipc	a0,0x8
    8020a756:	69e50513          	addi	a0,a0,1694 # 80212df0 <digits+0x508>
    8020a75a:	ffffe097          	auipc	ra,0xffffe
    8020a75e:	fd6080e7          	jalr	-42(ra) # 80208730 <printf>
  printf("a3: %p\n", tf->a3);
    8020a762:	64cc                	ld	a1,136(s1)
    8020a764:	00008517          	auipc	a0,0x8
    8020a768:	69450513          	addi	a0,a0,1684 # 80212df8 <digits+0x510>
    8020a76c:	ffffe097          	auipc	ra,0xffffe
    8020a770:	fc4080e7          	jalr	-60(ra) # 80208730 <printf>
  printf("a4: %p\t", tf->a4);
    8020a774:	68cc                	ld	a1,144(s1)
    8020a776:	00008517          	auipc	a0,0x8
    8020a77a:	68a50513          	addi	a0,a0,1674 # 80212e00 <digits+0x518>
    8020a77e:	ffffe097          	auipc	ra,0xffffe
    8020a782:	fb2080e7          	jalr	-78(ra) # 80208730 <printf>
  printf("a5: %p\t", tf->a5);
    8020a786:	6ccc                	ld	a1,152(s1)
    8020a788:	00008517          	auipc	a0,0x8
    8020a78c:	68050513          	addi	a0,a0,1664 # 80212e08 <digits+0x520>
    8020a790:	ffffe097          	auipc	ra,0xffffe
    8020a794:	fa0080e7          	jalr	-96(ra) # 80208730 <printf>
  printf("a6: %p\t", tf->a6);
    8020a798:	70cc                	ld	a1,160(s1)
    8020a79a:	00008517          	auipc	a0,0x8
    8020a79e:	67650513          	addi	a0,a0,1654 # 80212e10 <digits+0x528>
    8020a7a2:	ffffe097          	auipc	ra,0xffffe
    8020a7a6:	f8e080e7          	jalr	-114(ra) # 80208730 <printf>
  printf("a7: %p\n", tf->a7);
    8020a7aa:	74cc                	ld	a1,168(s1)
    8020a7ac:	00008517          	auipc	a0,0x8
    8020a7b0:	66c50513          	addi	a0,a0,1644 # 80212e18 <digits+0x530>
    8020a7b4:	ffffe097          	auipc	ra,0xffffe
    8020a7b8:	f7c080e7          	jalr	-132(ra) # 80208730 <printf>
  printf("t0: %p\t", tf->t0);
    8020a7bc:	64ac                	ld	a1,72(s1)
    8020a7be:	00008517          	auipc	a0,0x8
    8020a7c2:	66250513          	addi	a0,a0,1634 # 80212e20 <digits+0x538>
    8020a7c6:	ffffe097          	auipc	ra,0xffffe
    8020a7ca:	f6a080e7          	jalr	-150(ra) # 80208730 <printf>
  printf("t1: %p\t", tf->t1);
    8020a7ce:	68ac                	ld	a1,80(s1)
    8020a7d0:	00008517          	auipc	a0,0x8
    8020a7d4:	65850513          	addi	a0,a0,1624 # 80212e28 <digits+0x540>
    8020a7d8:	ffffe097          	auipc	ra,0xffffe
    8020a7dc:	f58080e7          	jalr	-168(ra) # 80208730 <printf>
  printf("t2: %p\t", tf->t2);
    8020a7e0:	6cac                	ld	a1,88(s1)
    8020a7e2:	00008517          	auipc	a0,0x8
    8020a7e6:	64e50513          	addi	a0,a0,1614 # 80212e30 <digits+0x548>
    8020a7ea:	ffffe097          	auipc	ra,0xffffe
    8020a7ee:	f46080e7          	jalr	-186(ra) # 80208730 <printf>
  printf("t3: %p\n", tf->t3);
    8020a7f2:	1004b583          	ld	a1,256(s1)
    8020a7f6:	00008517          	auipc	a0,0x8
    8020a7fa:	64250513          	addi	a0,a0,1602 # 80212e38 <digits+0x550>
    8020a7fe:	ffffe097          	auipc	ra,0xffffe
    8020a802:	f32080e7          	jalr	-206(ra) # 80208730 <printf>
  printf("t4: %p\t", tf->t4);
    8020a806:	1084b583          	ld	a1,264(s1)
    8020a80a:	00008517          	auipc	a0,0x8
    8020a80e:	63650513          	addi	a0,a0,1590 # 80212e40 <digits+0x558>
    8020a812:	ffffe097          	auipc	ra,0xffffe
    8020a816:	f1e080e7          	jalr	-226(ra) # 80208730 <printf>
  printf("t5: %p\t", tf->t5);
    8020a81a:	1104b583          	ld	a1,272(s1)
    8020a81e:	00008517          	auipc	a0,0x8
    8020a822:	62a50513          	addi	a0,a0,1578 # 80212e48 <digits+0x560>
    8020a826:	ffffe097          	auipc	ra,0xffffe
    8020a82a:	f0a080e7          	jalr	-246(ra) # 80208730 <printf>
  printf("t6: %p\t", tf->t6);
    8020a82e:	1184b583          	ld	a1,280(s1)
    8020a832:	00008517          	auipc	a0,0x8
    8020a836:	61e50513          	addi	a0,a0,1566 # 80212e50 <digits+0x568>
    8020a83a:	ffffe097          	auipc	ra,0xffffe
    8020a83e:	ef6080e7          	jalr	-266(ra) # 80208730 <printf>
  printf("s0: %p\n", tf->s0);
    8020a842:	70ac                	ld	a1,96(s1)
    8020a844:	00008517          	auipc	a0,0x8
    8020a848:	61450513          	addi	a0,a0,1556 # 80212e58 <digits+0x570>
    8020a84c:	ffffe097          	auipc	ra,0xffffe
    8020a850:	ee4080e7          	jalr	-284(ra) # 80208730 <printf>
  printf("s1: %p\t", tf->s1);
    8020a854:	74ac                	ld	a1,104(s1)
    8020a856:	00008517          	auipc	a0,0x8
    8020a85a:	60a50513          	addi	a0,a0,1546 # 80212e60 <digits+0x578>
    8020a85e:	ffffe097          	auipc	ra,0xffffe
    8020a862:	ed2080e7          	jalr	-302(ra) # 80208730 <printf>
  printf("s2: %p\t", tf->s2);
    8020a866:	78cc                	ld	a1,176(s1)
    8020a868:	00008517          	auipc	a0,0x8
    8020a86c:	60050513          	addi	a0,a0,1536 # 80212e68 <digits+0x580>
    8020a870:	ffffe097          	auipc	ra,0xffffe
    8020a874:	ec0080e7          	jalr	-320(ra) # 80208730 <printf>
  printf("s3: %p\t", tf->s3);
    8020a878:	7ccc                	ld	a1,184(s1)
    8020a87a:	00008517          	auipc	a0,0x8
    8020a87e:	5f650513          	addi	a0,a0,1526 # 80212e70 <digits+0x588>
    8020a882:	ffffe097          	auipc	ra,0xffffe
    8020a886:	eae080e7          	jalr	-338(ra) # 80208730 <printf>
  printf("s4: %p\n", tf->s4);
    8020a88a:	60ec                	ld	a1,192(s1)
    8020a88c:	00008517          	auipc	a0,0x8
    8020a890:	5ec50513          	addi	a0,a0,1516 # 80212e78 <digits+0x590>
    8020a894:	ffffe097          	auipc	ra,0xffffe
    8020a898:	e9c080e7          	jalr	-356(ra) # 80208730 <printf>
  printf("s5: %p\t", tf->s5);
    8020a89c:	64ec                	ld	a1,200(s1)
    8020a89e:	00008517          	auipc	a0,0x8
    8020a8a2:	5e250513          	addi	a0,a0,1506 # 80212e80 <digits+0x598>
    8020a8a6:	ffffe097          	auipc	ra,0xffffe
    8020a8aa:	e8a080e7          	jalr	-374(ra) # 80208730 <printf>
  printf("s6: %p\t", tf->s6);
    8020a8ae:	68ec                	ld	a1,208(s1)
    8020a8b0:	00008517          	auipc	a0,0x8
    8020a8b4:	5d850513          	addi	a0,a0,1496 # 80212e88 <digits+0x5a0>
    8020a8b8:	ffffe097          	auipc	ra,0xffffe
    8020a8bc:	e78080e7          	jalr	-392(ra) # 80208730 <printf>
  printf("s7: %p\t", tf->s7);
    8020a8c0:	6cec                	ld	a1,216(s1)
    8020a8c2:	00008517          	auipc	a0,0x8
    8020a8c6:	5ce50513          	addi	a0,a0,1486 # 80212e90 <digits+0x5a8>
    8020a8ca:	ffffe097          	auipc	ra,0xffffe
    8020a8ce:	e66080e7          	jalr	-410(ra) # 80208730 <printf>
  printf("s8: %p\n", tf->s8);
    8020a8d2:	70ec                	ld	a1,224(s1)
    8020a8d4:	00008517          	auipc	a0,0x8
    8020a8d8:	5c450513          	addi	a0,a0,1476 # 80212e98 <digits+0x5b0>
    8020a8dc:	ffffe097          	auipc	ra,0xffffe
    8020a8e0:	e54080e7          	jalr	-428(ra) # 80208730 <printf>
  printf("s9: %p\t", tf->s9);
    8020a8e4:	74ec                	ld	a1,232(s1)
    8020a8e6:	00008517          	auipc	a0,0x8
    8020a8ea:	5ba50513          	addi	a0,a0,1466 # 80212ea0 <digits+0x5b8>
    8020a8ee:	ffffe097          	auipc	ra,0xffffe
    8020a8f2:	e42080e7          	jalr	-446(ra) # 80208730 <printf>
  printf("s10: %p\t", tf->s10);
    8020a8f6:	78ec                	ld	a1,240(s1)
    8020a8f8:	00008517          	auipc	a0,0x8
    8020a8fc:	5b050513          	addi	a0,a0,1456 # 80212ea8 <digits+0x5c0>
    8020a900:	ffffe097          	auipc	ra,0xffffe
    8020a904:	e30080e7          	jalr	-464(ra) # 80208730 <printf>
  printf("s11: %p\t", tf->s11);
    8020a908:	7cec                	ld	a1,248(s1)
    8020a90a:	00008517          	auipc	a0,0x8
    8020a90e:	5ae50513          	addi	a0,a0,1454 # 80212eb8 <digits+0x5d0>
    8020a912:	ffffe097          	auipc	ra,0xffffe
    8020a916:	e1e080e7          	jalr	-482(ra) # 80208730 <printf>
  printf("ra: %p\n", tf->ra);
    8020a91a:	748c                	ld	a1,40(s1)
    8020a91c:	00008517          	auipc	a0,0x8
    8020a920:	5ac50513          	addi	a0,a0,1452 # 80212ec8 <digits+0x5e0>
    8020a924:	ffffe097          	auipc	ra,0xffffe
    8020a928:	e0c080e7          	jalr	-500(ra) # 80208730 <printf>
  printf("sp: %p\t", tf->sp);
    8020a92c:	788c                	ld	a1,48(s1)
    8020a92e:	00008517          	auipc	a0,0x8
    8020a932:	5a250513          	addi	a0,a0,1442 # 80212ed0 <digits+0x5e8>
    8020a936:	ffffe097          	auipc	ra,0xffffe
    8020a93a:	dfa080e7          	jalr	-518(ra) # 80208730 <printf>
  printf("gp: %p\t", tf->gp);
    8020a93e:	7c8c                	ld	a1,56(s1)
    8020a940:	00008517          	auipc	a0,0x8
    8020a944:	59850513          	addi	a0,a0,1432 # 80212ed8 <digits+0x5f0>
    8020a948:	ffffe097          	auipc	ra,0xffffe
    8020a94c:	de8080e7          	jalr	-536(ra) # 80208730 <printf>
  printf("tp: %p\t", tf->tp);
    8020a950:	60ac                	ld	a1,64(s1)
    8020a952:	00008517          	auipc	a0,0x8
    8020a956:	58e50513          	addi	a0,a0,1422 # 80212ee0 <digits+0x5f8>
    8020a95a:	ffffe097          	auipc	ra,0xffffe
    8020a95e:	dd6080e7          	jalr	-554(ra) # 80208730 <printf>
  printf("epc: %p\n", tf->epc);
    8020a962:	6c8c                	ld	a1,24(s1)
    8020a964:	00008517          	auipc	a0,0x8
    8020a968:	58450513          	addi	a0,a0,1412 # 80212ee8 <digits+0x600>
    8020a96c:	ffffe097          	auipc	ra,0xffffe
    8020a970:	dc4080e7          	jalr	-572(ra) # 80208730 <printf>
}
    8020a974:	60e2                	ld	ra,24(sp)
    8020a976:	6442                	ld	s0,16(sp)
    8020a978:	64a2                	ld	s1,8(sp)
    8020a97a:	6105                	addi	sp,sp,32
    8020a97c:	8082                	ret

000000008020a97e <usertrap>:
{
    8020a97e:	7179                	addi	sp,sp,-48
    8020a980:	f406                	sd	ra,40(sp)
    8020a982:	f022                	sd	s0,32(sp)
    8020a984:	ec26                	sd	s1,24(sp)
    8020a986:	e84a                	sd	s2,16(sp)
    8020a988:	e44e                	sd	s3,8(sp)
    8020a98a:	1800                	addi	s0,sp,48
  asm volatile("csrr %0, sstatus" : "=r" (x) );
    8020a98c:	100027f3          	csrr	a5,sstatus
  if((r_sstatus() & SSTATUS_SPP) != 0)
    8020a990:	1007f793          	andi	a5,a5,256
    8020a994:	efbd                	bnez	a5,8020aa12 <usertrap+0x94>
  asm volatile("csrw stvec, %0" : : "r" (x));
    8020a996:	00000797          	auipc	a5,0x0
    8020a99a:	a9a78793          	addi	a5,a5,-1382 # 8020a430 <kernelvec>
    8020a99e:	10579073          	csrw	stvec,a5
  struct proc *p = myproc();
    8020a9a2:	00001097          	auipc	ra,0x1
    8020a9a6:	aaa080e7          	jalr	-1366(ra) # 8020b44c <myproc>
    8020a9aa:	84aa                	mv	s1,a0
  p->trapframe->epc = r_sepc();
    8020a9ac:	753c                	ld	a5,104(a0)
  asm volatile("csrr %0, sepc" : "=r" (x) );
    8020a9ae:	14102773          	csrr	a4,sepc
    8020a9b2:	ef98                	sd	a4,24(a5)
  asm volatile("csrr %0, scause" : "=r" (x) );
    8020a9b4:	142029f3          	csrr	s3,scause
  if(cause == EXCP_ENV_CALL){
    8020a9b8:	47a1                	li	a5,8
    8020a9ba:	06f99a63          	bne	s3,a5,8020aa2e <usertrap+0xb0>
    if(p->killed == SIGTERM)
    8020a9be:	5d18                	lw	a4,56(a0)
    8020a9c0:	47bd                	li	a5,15
    8020a9c2:	06f70063          	beq	a4,a5,8020aa22 <usertrap+0xa4>
    p->trapframe->epc += 4;
    8020a9c6:	74b8                	ld	a4,104(s1)
    8020a9c8:	6f1c                	ld	a5,24(a4)
    8020a9ca:	0791                	addi	a5,a5,4
    8020a9cc:	ef1c                	sd	a5,24(a4)
  asm volatile("csrr %0, sstatus" : "=r" (x) );
    8020a9ce:	100027f3          	csrr	a5,sstatus
  w_sstatus(r_sstatus() | SSTATUS_SIE);
    8020a9d2:	0027e793          	ori	a5,a5,2
  asm volatile("csrw sstatus, %0" : : "r" (x));
    8020a9d6:	10079073          	csrw	sstatus,a5
    syscall();
    8020a9da:	00005097          	auipc	ra,0x5
    8020a9de:	484080e7          	jalr	1156(ra) # 8020fe5e <syscall>
  if (p->killed) {
    8020a9e2:	5c9c                	lw	a5,56(s1)
    8020a9e4:	cf81                	beqz	a5,8020a9fc <usertrap+0x7e>
    8020a9e6:	4901                	li	s2,0
		if (SIGTERM == p->killed)
    8020a9e8:	473d                	li	a4,15
    8020a9ea:	0ae78f63          	beq	a5,a4,8020aaa8 <usertrap+0x12a>
		sighandle();
    8020a9ee:	ffffd097          	auipc	ra,0xffffd
    8020a9f2:	53e080e7          	jalr	1342(ra) # 80207f2c <sighandle>
  if(which_dev == 2){
    8020a9f6:	4789                	li	a5,2
    8020a9f8:	0ef90063          	beq	s2,a5,8020aad8 <usertrap+0x15a>
  usertrapret();
    8020a9fc:	00000097          	auipc	ra,0x0
    8020aa00:	b0e080e7          	jalr	-1266(ra) # 8020a50a <usertrapret>
}
    8020aa04:	70a2                	ld	ra,40(sp)
    8020aa06:	7402                	ld	s0,32(sp)
    8020aa08:	64e2                	ld	s1,24(sp)
    8020aa0a:	6942                	ld	s2,16(sp)
    8020aa0c:	69a2                	ld	s3,8(sp)
    8020aa0e:	6145                	addi	sp,sp,48
    8020aa10:	8082                	ret
    panic("usertrap: not from user mode");
    8020aa12:	00008517          	auipc	a0,0x8
    8020aa16:	4e650513          	addi	a0,a0,1254 # 80212ef8 <digits+0x610>
    8020aa1a:	ffffe097          	auipc	ra,0xffffe
    8020aa1e:	ccc080e7          	jalr	-820(ra) # 802086e6 <panic>
      exit(-1);
    8020aa22:	557d                	li	a0,-1
    8020aa24:	ffff8097          	auipc	ra,0xffff8
    8020aa28:	910080e7          	jalr	-1776(ra) # 80202334 <exit>
    8020aa2c:	bf69                	j	8020a9c6 <usertrap+0x48>
  else if((which_dev = devintr()) != 0){
    8020aa2e:	00000097          	auipc	ra,0x0
    8020aa32:	b76080e7          	jalr	-1162(ra) # 8020a5a4 <devintr>
    8020aa36:	892a                	mv	s2,a0
    8020aa38:	c501                	beqz	a0,8020aa40 <usertrap+0xc2>
  if (p->killed) {
    8020aa3a:	5c9c                	lw	a5,56(s1)
    8020aa3c:	dfcd                	beqz	a5,8020a9f6 <usertrap+0x78>
    8020aa3e:	b76d                	j	8020a9e8 <usertrap+0x6a>
  else if((ret = handle_excp(cause)) != -2)
    8020aa40:	854e                	mv	a0,s3
    8020aa42:	00000097          	auipc	ra,0x0
    8020aa46:	ca0080e7          	jalr	-864(ra) # 8020a6e2 <handle_excp>
    8020aa4a:	57f9                	li	a5,-2
    8020aa4c:	00f50b63          	beq	a0,a5,8020aa62 <usertrap+0xe4>
    if(ret == -1)
    8020aa50:	57fd                	li	a5,-1
    8020aa52:	f8f518e3          	bne	a0,a5,8020a9e2 <usertrap+0x64>
      send_signal(SIGSEGV);
    8020aa56:	452d                	li	a0,11
    8020aa58:	ffffd097          	auipc	ra,0xffffd
    8020aa5c:	39e080e7          	jalr	926(ra) # 80207df6 <send_signal>
    8020aa60:	b749                	j	8020a9e2 <usertrap+0x64>
  else if(cause == 3){
    8020aa62:	478d                	li	a5,3
    8020aa64:	04f98863          	beq	s3,a5,8020aab4 <usertrap+0x136>
  asm volatile("csrr %0, scause" : "=r" (x) );
    8020aa68:	142025f3          	csrr	a1,scause
  	printf("\nusertrap(): unexpected scause %p pid=%d %s\n", r_scause(), p->pid, p->name);
    8020aa6c:	10048693          	addi	a3,s1,256
    8020aa70:	40b0                	lw	a2,64(s1)
    8020aa72:	00008517          	auipc	a0,0x8
    8020aa76:	4ae50513          	addi	a0,a0,1198 # 80212f20 <digits+0x638>
    8020aa7a:	ffffe097          	auipc	ra,0xffffe
    8020aa7e:	cb6080e7          	jalr	-842(ra) # 80208730 <printf>
  asm volatile("csrr %0, sepc" : "=r" (x) );
    8020aa82:	141025f3          	csrr	a1,sepc
  asm volatile("csrr %0, stval" : "=r" (x) );
    8020aa86:	14302673          	csrr	a2,stval
        printf("            sepc=%p stval=%p\n", r_sepc(), r_stval());
    8020aa8a:	00008517          	auipc	a0,0x8
    8020aa8e:	4c650513          	addi	a0,a0,1222 # 80212f50 <digits+0x668>
    8020aa92:	ffffe097          	auipc	ra,0xffffe
    8020aa96:	c9e080e7          	jalr	-866(ra) # 80208730 <printf>
        trapframedump(p->trapframe);
    8020aa9a:	74a8                	ld	a0,104(s1)
    8020aa9c:	00000097          	auipc	ra,0x0
    8020aaa0:	c84080e7          	jalr	-892(ra) # 8020a720 <trapframedump>
        p->killed = SIGTERM;
    8020aaa4:	47bd                	li	a5,15
    8020aaa6:	dc9c                	sw	a5,56(s1)
			exit(-1);
    8020aaa8:	557d                	li	a0,-1
    8020aaaa:	ffff8097          	auipc	ra,0xffff8
    8020aaae:	88a080e7          	jalr	-1910(ra) # 80202334 <exit>
    8020aab2:	bf35                	j	8020a9ee <usertrap+0x70>
    printf("ebreak\n");
    8020aab4:	00008517          	auipc	a0,0x8
    8020aab8:	46450513          	addi	a0,a0,1124 # 80212f18 <digits+0x630>
    8020aabc:	ffffe097          	auipc	ra,0xffffe
    8020aac0:	c74080e7          	jalr	-908(ra) # 80208730 <printf>
    trapframedump(p->trapframe);
    8020aac4:	74a8                	ld	a0,104(s1)
    8020aac6:	00000097          	auipc	ra,0x0
    8020aaca:	c5a080e7          	jalr	-934(ra) # 8020a720 <trapframedump>
    p->trapframe->epc += 2;
    8020aace:	74b8                	ld	a4,104(s1)
    8020aad0:	6f1c                	ld	a5,24(a4)
    8020aad2:	0789                	addi	a5,a5,2
    8020aad4:	ef1c                	sd	a5,24(a4)
    8020aad6:	b731                	j	8020a9e2 <usertrap+0x64>
    yield();
    8020aad8:	ffff7097          	auipc	ra,0xffff7
    8020aadc:	6ca080e7          	jalr	1738(ra) # 802021a2 <yield>
    p->ivswtch += 1;
    8020aae0:	1c84a783          	lw	a5,456(s1)
    8020aae4:	2785                	addiw	a5,a5,1
    8020aae6:	1cf4a423          	sw	a5,456(s1)
    8020aaea:	bf09                	j	8020a9fc <usertrap+0x7e>

000000008020aaec <copyout>:
int
copyout(pagetable_t pagetable, uint64 dstva, char *src, uint64 len)
{
  uint64 n, va0, pa0;

  while(len > 0){
    8020aaec:	c6bd                	beqz	a3,8020ab5a <copyout+0x6e>
{
    8020aaee:	715d                	addi	sp,sp,-80
    8020aaf0:	e486                	sd	ra,72(sp)
    8020aaf2:	e0a2                	sd	s0,64(sp)
    8020aaf4:	fc26                	sd	s1,56(sp)
    8020aaf6:	f84a                	sd	s2,48(sp)
    8020aaf8:	f44e                	sd	s3,40(sp)
    8020aafa:	f052                	sd	s4,32(sp)
    8020aafc:	ec56                	sd	s5,24(sp)
    8020aafe:	e85a                	sd	s6,16(sp)
    8020ab00:	e45e                	sd	s7,8(sp)
    8020ab02:	e062                	sd	s8,0(sp)
    8020ab04:	0880                	addi	s0,sp,80
    8020ab06:	8b2a                	mv	s6,a0
    8020ab08:	8c2e                	mv	s8,a1
    8020ab0a:	8a32                	mv	s4,a2
    8020ab0c:	89b6                	mv	s3,a3
    va0 = PGROUNDDOWN(dstva);
    8020ab0e:	7bfd                	lui	s7,0xfffff
    pa0 = walkaddr(pagetable, va0);
    if(pa0 == NULL)
      return -1;
    n = PGSIZE - (dstva - va0);
    8020ab10:	6a85                	lui	s5,0x1
    8020ab12:	a015                	j	8020ab36 <copyout+0x4a>
    if(n > len)
      n = len;
    memmove((void *)(pa0 + (dstva - va0)), src, n);
    8020ab14:	9562                	add	a0,a0,s8
    8020ab16:	0004861b          	sext.w	a2,s1
    8020ab1a:	85d2                	mv	a1,s4
    8020ab1c:	41250533          	sub	a0,a0,s2
    8020ab20:	ffff6097          	auipc	ra,0xffff6
    8020ab24:	2b4080e7          	jalr	692(ra) # 80200dd4 <memmove>

    len -= n;
    8020ab28:	409989b3          	sub	s3,s3,s1
    src += n;
    8020ab2c:	9a26                	add	s4,s4,s1
    dstva = va0 + PGSIZE;
    8020ab2e:	01590c33          	add	s8,s2,s5
  while(len > 0){
    8020ab32:	02098263          	beqz	s3,8020ab56 <copyout+0x6a>
    va0 = PGROUNDDOWN(dstva);
    8020ab36:	017c7933          	and	s2,s8,s7
    pa0 = walkaddr(pagetable, va0);
    8020ab3a:	85ca                	mv	a1,s2
    8020ab3c:	855a                	mv	a0,s6
    8020ab3e:	fffff097          	auipc	ra,0xfffff
    8020ab42:	f8e080e7          	jalr	-114(ra) # 80209acc <walkaddr>
    if(pa0 == NULL)
    8020ab46:	cd01                	beqz	a0,8020ab5e <copyout+0x72>
    n = PGSIZE - (dstva - va0);
    8020ab48:	418904b3          	sub	s1,s2,s8
    8020ab4c:	94d6                	add	s1,s1,s5
    if(n > len)
    8020ab4e:	fc99f3e3          	bgeu	s3,s1,8020ab14 <copyout+0x28>
    8020ab52:	84ce                	mv	s1,s3
    8020ab54:	b7c1                	j	8020ab14 <copyout+0x28>
  }
  return 0;
    8020ab56:	4501                	li	a0,0
    8020ab58:	a021                	j	8020ab60 <copyout+0x74>
    8020ab5a:	4501                	li	a0,0
}
    8020ab5c:	8082                	ret
      return -1;
    8020ab5e:	557d                	li	a0,-1
}
    8020ab60:	60a6                	ld	ra,72(sp)
    8020ab62:	6406                	ld	s0,64(sp)
    8020ab64:	74e2                	ld	s1,56(sp)
    8020ab66:	7942                	ld	s2,48(sp)
    8020ab68:	79a2                	ld	s3,40(sp)
    8020ab6a:	7a02                	ld	s4,32(sp)
    8020ab6c:	6ae2                	ld	s5,24(sp)
    8020ab6e:	6b42                	ld	s6,16(sp)
    8020ab70:	6ba2                	ld	s7,8(sp)
    8020ab72:	6c02                	ld	s8,0(sp)
    8020ab74:	6161                	addi	sp,sp,80
    8020ab76:	8082                	ret

000000008020ab78 <copyout2>:

int
copyout2(uint64 dstva, char *src, uint64 len)
{
    8020ab78:	7179                	addi	sp,sp,-48
    8020ab7a:	f406                	sd	ra,40(sp)
    8020ab7c:	f022                	sd	s0,32(sp)
    8020ab7e:	ec26                	sd	s1,24(sp)
    8020ab80:	e84a                	sd	s2,16(sp)
    8020ab82:	e44e                	sd	s3,8(sp)
    8020ab84:	1800                	addi	s0,sp,48
    8020ab86:	84aa                	mv	s1,a0
    8020ab88:	89ae                	mv	s3,a1
    8020ab8a:	8932                	mv	s2,a2
  uint64 sz = myproc()->sz;
    8020ab8c:	00001097          	auipc	ra,0x1
    8020ab90:	8c0080e7          	jalr	-1856(ra) # 8020b44c <myproc>
    8020ab94:	6d3c                	ld	a5,88(a0)
  if (dstva + len > sz || dstva >= sz) {
    8020ab96:	01248733          	add	a4,s1,s2
    8020ab9a:	02e7e463          	bltu	a5,a4,8020abc2 <copyout2+0x4a>
    8020ab9e:	02f4f463          	bgeu	s1,a5,8020abc6 <copyout2+0x4e>
    return -1;
  }
  memmove((void *)dstva, src, len);
    8020aba2:	0009061b          	sext.w	a2,s2
    8020aba6:	85ce                	mv	a1,s3
    8020aba8:	8526                	mv	a0,s1
    8020abaa:	ffff6097          	auipc	ra,0xffff6
    8020abae:	22a080e7          	jalr	554(ra) # 80200dd4 <memmove>
  return 0;
    8020abb2:	4501                	li	a0,0
}
    8020abb4:	70a2                	ld	ra,40(sp)
    8020abb6:	7402                	ld	s0,32(sp)
    8020abb8:	64e2                	ld	s1,24(sp)
    8020abba:	6942                	ld	s2,16(sp)
    8020abbc:	69a2                	ld	s3,8(sp)
    8020abbe:	6145                	addi	sp,sp,48
    8020abc0:	8082                	ret
    return -1;
    8020abc2:	557d                	li	a0,-1
    8020abc4:	bfc5                	j	8020abb4 <copyout2+0x3c>
    8020abc6:	557d                	li	a0,-1
    8020abc8:	b7f5                	j	8020abb4 <copyout2+0x3c>

000000008020abca <copyin>:
int
copyin(pagetable_t pagetable, char *dst, uint64 srcva, uint64 len)
{
  uint64 n, va0, pa0;

  while(len > 0){
    8020abca:	c6bd                	beqz	a3,8020ac38 <copyin+0x6e>
{
    8020abcc:	715d                	addi	sp,sp,-80
    8020abce:	e486                	sd	ra,72(sp)
    8020abd0:	e0a2                	sd	s0,64(sp)
    8020abd2:	fc26                	sd	s1,56(sp)
    8020abd4:	f84a                	sd	s2,48(sp)
    8020abd6:	f44e                	sd	s3,40(sp)
    8020abd8:	f052                	sd	s4,32(sp)
    8020abda:	ec56                	sd	s5,24(sp)
    8020abdc:	e85a                	sd	s6,16(sp)
    8020abde:	e45e                	sd	s7,8(sp)
    8020abe0:	e062                	sd	s8,0(sp)
    8020abe2:	0880                	addi	s0,sp,80
    8020abe4:	8b2a                	mv	s6,a0
    8020abe6:	8a2e                	mv	s4,a1
    8020abe8:	8c32                	mv	s8,a2
    8020abea:	89b6                	mv	s3,a3
    va0 = PGROUNDDOWN(srcva);
    8020abec:	7bfd                	lui	s7,0xfffff
    pa0 = walkaddr(pagetable, va0);
    if(pa0 == NULL)
      return -1;
    n = PGSIZE - (srcva - va0);
    8020abee:	6a85                	lui	s5,0x1
    8020abf0:	a015                	j	8020ac14 <copyin+0x4a>
    if(n > len)
      n = len;
    memmove(dst, (void *)(pa0 + (srcva - va0)), n);
    8020abf2:	9562                	add	a0,a0,s8
    8020abf4:	0004861b          	sext.w	a2,s1
    8020abf8:	412505b3          	sub	a1,a0,s2
    8020abfc:	8552                	mv	a0,s4
    8020abfe:	ffff6097          	auipc	ra,0xffff6
    8020ac02:	1d6080e7          	jalr	470(ra) # 80200dd4 <memmove>

    len -= n;
    8020ac06:	409989b3          	sub	s3,s3,s1
    dst += n;
    8020ac0a:	9a26                	add	s4,s4,s1
    srcva = va0 + PGSIZE;
    8020ac0c:	01590c33          	add	s8,s2,s5
  while(len > 0){
    8020ac10:	02098263          	beqz	s3,8020ac34 <copyin+0x6a>
    va0 = PGROUNDDOWN(srcva);
    8020ac14:	017c7933          	and	s2,s8,s7
    pa0 = walkaddr(pagetable, va0);
    8020ac18:	85ca                	mv	a1,s2
    8020ac1a:	855a                	mv	a0,s6
    8020ac1c:	fffff097          	auipc	ra,0xfffff
    8020ac20:	eb0080e7          	jalr	-336(ra) # 80209acc <walkaddr>
    if(pa0 == NULL)
    8020ac24:	cd01                	beqz	a0,8020ac3c <copyin+0x72>
    n = PGSIZE - (srcva - va0);
    8020ac26:	418904b3          	sub	s1,s2,s8
    8020ac2a:	94d6                	add	s1,s1,s5
    if(n > len)
    8020ac2c:	fc99f3e3          	bgeu	s3,s1,8020abf2 <copyin+0x28>
    8020ac30:	84ce                	mv	s1,s3
    8020ac32:	b7c1                	j	8020abf2 <copyin+0x28>
  }
  return 0;
    8020ac34:	4501                	li	a0,0
    8020ac36:	a021                	j	8020ac3e <copyin+0x74>
    8020ac38:	4501                	li	a0,0
}
    8020ac3a:	8082                	ret
      return -1;
    8020ac3c:	557d                	li	a0,-1
}
    8020ac3e:	60a6                	ld	ra,72(sp)
    8020ac40:	6406                	ld	s0,64(sp)
    8020ac42:	74e2                	ld	s1,56(sp)
    8020ac44:	7942                	ld	s2,48(sp)
    8020ac46:	79a2                	ld	s3,40(sp)
    8020ac48:	7a02                	ld	s4,32(sp)
    8020ac4a:	6ae2                	ld	s5,24(sp)
    8020ac4c:	6b42                	ld	s6,16(sp)
    8020ac4e:	6ba2                	ld	s7,8(sp)
    8020ac50:	6c02                	ld	s8,0(sp)
    8020ac52:	6161                	addi	sp,sp,80
    8020ac54:	8082                	ret

000000008020ac56 <copyin2>:

int
copyin2(char *dst, uint64 srcva, uint64 len)
{
    8020ac56:	7179                	addi	sp,sp,-48
    8020ac58:	f406                	sd	ra,40(sp)
    8020ac5a:	f022                	sd	s0,32(sp)
    8020ac5c:	ec26                	sd	s1,24(sp)
    8020ac5e:	e84a                	sd	s2,16(sp)
    8020ac60:	e44e                	sd	s3,8(sp)
    8020ac62:	1800                	addi	s0,sp,48
    8020ac64:	89aa                	mv	s3,a0
    8020ac66:	84ae                	mv	s1,a1
    8020ac68:	8932                	mv	s2,a2
  uint64 sz = myproc()->sz;
    8020ac6a:	00000097          	auipc	ra,0x0
    8020ac6e:	7e2080e7          	jalr	2018(ra) # 8020b44c <myproc>
    8020ac72:	6d3c                	ld	a5,88(a0)
  if (srcva + len > sz || srcva >= sz) {
    8020ac74:	01248733          	add	a4,s1,s2
    8020ac78:	02e7e463          	bltu	a5,a4,8020aca0 <copyin2+0x4a>
    8020ac7c:	02f4f463          	bgeu	s1,a5,8020aca4 <copyin2+0x4e>
    return -1;
  }
  memmove(dst, (void *)srcva, len);
    8020ac80:	0009061b          	sext.w	a2,s2
    8020ac84:	85a6                	mv	a1,s1
    8020ac86:	854e                	mv	a0,s3
    8020ac88:	ffff6097          	auipc	ra,0xffff6
    8020ac8c:	14c080e7          	jalr	332(ra) # 80200dd4 <memmove>
  return 0;
    8020ac90:	4501                	li	a0,0
}
    8020ac92:	70a2                	ld	ra,40(sp)
    8020ac94:	7402                	ld	s0,32(sp)
    8020ac96:	64e2                	ld	s1,24(sp)
    8020ac98:	6942                	ld	s2,16(sp)
    8020ac9a:	69a2                	ld	s3,8(sp)
    8020ac9c:	6145                	addi	sp,sp,48
    8020ac9e:	8082                	ret
    return -1;
    8020aca0:	557d                	li	a0,-1
    8020aca2:	bfc5                	j	8020ac92 <copyin2+0x3c>
    8020aca4:	557d                	li	a0,-1
    8020aca6:	b7f5                	j	8020ac92 <copyin2+0x3c>

000000008020aca8 <copyinstr>:
copyinstr(pagetable_t pagetable, char *dst, uint64 srcva, uint64 max)
{
  uint64 n, va0, pa0;
  int got_null = 0;

  while(got_null == 0 && max > 0){
    8020aca8:	c6c5                	beqz	a3,8020ad50 <copyinstr+0xa8>
{
    8020acaa:	715d                	addi	sp,sp,-80
    8020acac:	e486                	sd	ra,72(sp)
    8020acae:	e0a2                	sd	s0,64(sp)
    8020acb0:	fc26                	sd	s1,56(sp)
    8020acb2:	f84a                	sd	s2,48(sp)
    8020acb4:	f44e                	sd	s3,40(sp)
    8020acb6:	f052                	sd	s4,32(sp)
    8020acb8:	ec56                	sd	s5,24(sp)
    8020acba:	e85a                	sd	s6,16(sp)
    8020acbc:	e45e                	sd	s7,8(sp)
    8020acbe:	0880                	addi	s0,sp,80
    8020acc0:	8a2a                	mv	s4,a0
    8020acc2:	8b2e                	mv	s6,a1
    8020acc4:	8bb2                	mv	s7,a2
    8020acc6:	84b6                	mv	s1,a3
    va0 = PGROUNDDOWN(srcva);
    8020acc8:	7afd                	lui	s5,0xfffff
    pa0 = walkaddr(pagetable, va0);
    if(pa0 == NULL)
      return -1;
    n = PGSIZE - (srcva - va0);
    8020acca:	6985                	lui	s3,0x1
    8020accc:	a035                	j	8020acf8 <copyinstr+0x50>
      n = max;

    char *p = (char *) (pa0 + (srcva - va0));
    while(n > 0){
      if(*p == '\0'){
        *dst = '\0';
    8020acce:	00078023          	sb	zero,0(a5)
    8020acd2:	4785                	li	a5,1
      dst++;
    }

    srcva = va0 + PGSIZE;
  }
  if(got_null){
    8020acd4:	0017b793          	seqz	a5,a5
    8020acd8:	40f00533          	neg	a0,a5
    return 0;
  } else {
    return -1;
  }
}
    8020acdc:	60a6                	ld	ra,72(sp)
    8020acde:	6406                	ld	s0,64(sp)
    8020ace0:	74e2                	ld	s1,56(sp)
    8020ace2:	7942                	ld	s2,48(sp)
    8020ace4:	79a2                	ld	s3,40(sp)
    8020ace6:	7a02                	ld	s4,32(sp)
    8020ace8:	6ae2                	ld	s5,24(sp)
    8020acea:	6b42                	ld	s6,16(sp)
    8020acec:	6ba2                	ld	s7,8(sp)
    8020acee:	6161                	addi	sp,sp,80
    8020acf0:	8082                	ret
    srcva = va0 + PGSIZE;
    8020acf2:	01390bb3          	add	s7,s2,s3
  while(got_null == 0 && max > 0){
    8020acf6:	c8a9                	beqz	s1,8020ad48 <copyinstr+0xa0>
    va0 = PGROUNDDOWN(srcva);
    8020acf8:	015bf933          	and	s2,s7,s5
    pa0 = walkaddr(pagetable, va0);
    8020acfc:	85ca                	mv	a1,s2
    8020acfe:	8552                	mv	a0,s4
    8020ad00:	fffff097          	auipc	ra,0xfffff
    8020ad04:	dcc080e7          	jalr	-564(ra) # 80209acc <walkaddr>
    if(pa0 == NULL)
    8020ad08:	c131                	beqz	a0,8020ad4c <copyinstr+0xa4>
    n = PGSIZE - (srcva - va0);
    8020ad0a:	41790833          	sub	a6,s2,s7
    8020ad0e:	984e                	add	a6,a6,s3
    if(n > max)
    8020ad10:	0104f363          	bgeu	s1,a6,8020ad16 <copyinstr+0x6e>
    8020ad14:	8826                	mv	a6,s1
    char *p = (char *) (pa0 + (srcva - va0));
    8020ad16:	955e                	add	a0,a0,s7
    8020ad18:	41250533          	sub	a0,a0,s2
    while(n > 0){
    8020ad1c:	fc080be3          	beqz	a6,8020acf2 <copyinstr+0x4a>
    8020ad20:	985a                	add	a6,a6,s6
    8020ad22:	87da                	mv	a5,s6
      if(*p == '\0'){
    8020ad24:	41650633          	sub	a2,a0,s6
    8020ad28:	14fd                	addi	s1,s1,-1
    8020ad2a:	9b26                	add	s6,s6,s1
    8020ad2c:	00f60733          	add	a4,a2,a5
    8020ad30:	00074703          	lbu	a4,0(a4)
    8020ad34:	df49                	beqz	a4,8020acce <copyinstr+0x26>
        *dst = *p;
    8020ad36:	00e78023          	sb	a4,0(a5)
      --max;
    8020ad3a:	40fb04b3          	sub	s1,s6,a5
      dst++;
    8020ad3e:	0785                	addi	a5,a5,1
    while(n > 0){
    8020ad40:	ff0796e3          	bne	a5,a6,8020ad2c <copyinstr+0x84>
      dst++;
    8020ad44:	8b42                	mv	s6,a6
    8020ad46:	b775                	j	8020acf2 <copyinstr+0x4a>
    8020ad48:	4781                	li	a5,0
    8020ad4a:	b769                	j	8020acd4 <copyinstr+0x2c>
      return -1;
    8020ad4c:	557d                	li	a0,-1
    8020ad4e:	b779                	j	8020acdc <copyinstr+0x34>
  int got_null = 0;
    8020ad50:	4781                	li	a5,0
  if(got_null){
    8020ad52:	0017b793          	seqz	a5,a5
    8020ad56:	40f00533          	neg	a0,a5
}
    8020ad5a:	8082                	ret

000000008020ad5c <copyinstr2>:

int
copyinstr2(char *dst, uint64 srcva, uint64 max)
{
    8020ad5c:	7179                	addi	sp,sp,-48
    8020ad5e:	f406                	sd	ra,40(sp)
    8020ad60:	f022                	sd	s0,32(sp)
    8020ad62:	ec26                	sd	s1,24(sp)
    8020ad64:	e84a                	sd	s2,16(sp)
    8020ad66:	e44e                	sd	s3,8(sp)
    8020ad68:	1800                	addi	s0,sp,48
    8020ad6a:	89aa                	mv	s3,a0
    8020ad6c:	84ae                	mv	s1,a1
    8020ad6e:	8932                	mv	s2,a2
  int got_null = 0;
  uint64 sz = myproc()->sz;
    8020ad70:	00000097          	auipc	ra,0x0
    8020ad74:	6dc080e7          	jalr	1756(ra) # 8020b44c <myproc>
    8020ad78:	6d34                	ld	a3,88(a0)
  while(srcva < sz && max > 0){
    8020ad7a:	04d4f363          	bgeu	s1,a3,8020adc0 <copyinstr2+0x64>
    8020ad7e:	04090363          	beqz	s2,8020adc4 <copyinstr2+0x68>
    8020ad82:	01298633          	add	a2,s3,s2
    8020ad86:	8e85                	sub	a3,a3,s1
    8020ad88:	96ce                	add	a3,a3,s3
    8020ad8a:	87ce                	mv	a5,s3
    char *p = (char *)srcva;
    if(*p == '\0'){
    8020ad8c:	413485b3          	sub	a1,s1,s3
    8020ad90:	00b78733          	add	a4,a5,a1
    8020ad94:	00074703          	lbu	a4,0(a4)
    8020ad98:	cb11                	beqz	a4,8020adac <copyinstr2+0x50>
      *dst = '\0';
      got_null = 1;
      break;
    } else {
      *dst = *p;
    8020ad9a:	00e78023          	sb	a4,0(a5)
    }
    --max;
    srcva++;
    dst++;
    8020ad9e:	0785                	addi	a5,a5,1
  while(srcva < sz && max > 0){
    8020ada0:	02d78463          	beq	a5,a3,8020adc8 <copyinstr2+0x6c>
    8020ada4:	fec796e3          	bne	a5,a2,8020ad90 <copyinstr2+0x34>
  }
  if(got_null){
    return 0;
  } else {
    return -1;
    8020ada8:	557d                	li	a0,-1
    8020adaa:	a021                	j	8020adb2 <copyinstr2+0x56>
      *dst = '\0';
    8020adac:	00078023          	sb	zero,0(a5)
    return 0;
    8020adb0:	4501                	li	a0,0
  }
}
    8020adb2:	70a2                	ld	ra,40(sp)
    8020adb4:	7402                	ld	s0,32(sp)
    8020adb6:	64e2                	ld	s1,24(sp)
    8020adb8:	6942                	ld	s2,16(sp)
    8020adba:	69a2                	ld	s3,8(sp)
    8020adbc:	6145                	addi	sp,sp,48
    8020adbe:	8082                	ret
    return -1;
    8020adc0:	557d                	li	a0,-1
    8020adc2:	bfc5                	j	8020adb2 <copyinstr2+0x56>
    8020adc4:	557d                	li	a0,-1
    8020adc6:	b7f5                	j	8020adb2 <copyinstr2+0x56>
    8020adc8:	557d                	li	a0,-1
    8020adca:	b7e5                	j	8020adb2 <copyinstr2+0x56>

000000008020adcc <zero_out>:
// Copy from kernel to user.
// Copy len bytes from src to virtual address dstva in a given page table.
// Return 0 on success, -1 on error.
int
zero_out(uint64 dstva, uint64 len)
{
    8020adcc:	715d                	addi	sp,sp,-80
    8020adce:	e486                	sd	ra,72(sp)
    8020add0:	e0a2                	sd	s0,64(sp)
    8020add2:	fc26                	sd	s1,56(sp)
    8020add4:	f84a                	sd	s2,48(sp)
    8020add6:	f44e                	sd	s3,40(sp)
    8020add8:	f052                	sd	s4,32(sp)
    8020adda:	ec56                	sd	s5,24(sp)
    8020addc:	e85a                	sd	s6,16(sp)
    8020adde:	e45e                	sd	s7,8(sp)
    8020ade0:	e062                	sd	s8,0(sp)
    8020ade2:	0880                	addi	s0,sp,80
    8020ade4:	8c2a                	mv	s8,a0
    8020ade6:	89ae                	mv	s3,a1
  uint64 n, va0, pa0;
  uint64 ret = 0;
  pagetable_t pagetable = myproc()->pagetable;
    8020ade8:	00000097          	auipc	ra,0x0
    8020adec:	664080e7          	jalr	1636(ra) # 8020b44c <myproc>
    8020adf0:	06053b03          	ld	s6,96(a0)
  while(len > 0){
    8020adf4:	04098a63          	beqz	s3,8020ae48 <zero_out+0x7c>
  uint64 ret = 0;
    8020adf8:	4a01                	li	s4,0
    va0 = PGROUNDDOWN(dstva);
    8020adfa:	7bfd                	lui	s7,0xfffff
    pa0 = walkaddr(pagetable, va0);
    if(pa0 == NULL){
      return ret;
    }
    n = PGSIZE - (dstva - va0);
    8020adfc:	6a85                	lui	s5,0x1
    8020adfe:	a02d                	j	8020ae28 <zero_out+0x5c>
      return ret;
    8020ae00:	000a051b          	sext.w	a0,s4
    8020ae04:	a0a9                	j	8020ae4e <zero_out+0x82>
    if(n > len)
      n = len;
    memset((void *)(pa0 + (dstva - va0)), 0, n);
    8020ae06:	9562                	add	a0,a0,s8
    8020ae08:	0004861b          	sext.w	a2,s1
    8020ae0c:	4581                	li	a1,0
    8020ae0e:	41250533          	sub	a0,a0,s2
    8020ae12:	ffff6097          	auipc	ra,0xffff6
    8020ae16:	f62080e7          	jalr	-158(ra) # 80200d74 <memset>

    len -= n;
    8020ae1a:	409989b3          	sub	s3,s3,s1
    ret += n;
    8020ae1e:	9a26                	add	s4,s4,s1
    dstva = va0 + PGSIZE;
    8020ae20:	01590c33          	add	s8,s2,s5
  while(len > 0){
    8020ae24:	02098363          	beqz	s3,8020ae4a <zero_out+0x7e>
    va0 = PGROUNDDOWN(dstva);
    8020ae28:	017c7933          	and	s2,s8,s7
    pa0 = walkaddr(pagetable, va0);
    8020ae2c:	85ca                	mv	a1,s2
    8020ae2e:	855a                	mv	a0,s6
    8020ae30:	fffff097          	auipc	ra,0xfffff
    8020ae34:	c9c080e7          	jalr	-868(ra) # 80209acc <walkaddr>
    if(pa0 == NULL){
    8020ae38:	d561                	beqz	a0,8020ae00 <zero_out+0x34>
    n = PGSIZE - (dstva - va0);
    8020ae3a:	418904b3          	sub	s1,s2,s8
    8020ae3e:	94d6                	add	s1,s1,s5
    if(n > len)
    8020ae40:	fc99f3e3          	bgeu	s3,s1,8020ae06 <zero_out+0x3a>
    8020ae44:	84ce                	mv	s1,s3
    8020ae46:	b7c1                	j	8020ae06 <zero_out+0x3a>
  uint64 ret = 0;
    8020ae48:	8a4e                	mv	s4,s3
  }

  return ret;
    8020ae4a:	000a051b          	sext.w	a0,s4
}
    8020ae4e:	60a6                	ld	ra,72(sp)
    8020ae50:	6406                	ld	s0,64(sp)
    8020ae52:	74e2                	ld	s1,56(sp)
    8020ae54:	7942                	ld	s2,48(sp)
    8020ae56:	79a2                	ld	s3,40(sp)
    8020ae58:	7a02                	ld	s4,32(sp)
    8020ae5a:	6ae2                	ld	s5,24(sp)
    8020ae5c:	6b42                	ld	s6,16(sp)
    8020ae5e:	6ba2                	ld	s7,8(sp)
    8020ae60:	6c02                	ld	s8,0(sp)
    8020ae62:	6161                	addi	sp,sp,80
    8020ae64:	8082                	ret

000000008020ae66 <either_copyout>:
// Copy to either a user address, or kernel address,
// depending on usr_dst.
// Returns 0 on success, -1 on error.
int
either_copyout(int user_dst, uint64 dst, void *src, uint64 len)
{
    8020ae66:	7179                	addi	sp,sp,-48
    8020ae68:	f406                	sd	ra,40(sp)
    8020ae6a:	f022                	sd	s0,32(sp)
    8020ae6c:	ec26                	sd	s1,24(sp)
    8020ae6e:	e84a                	sd	s2,16(sp)
    8020ae70:	e44e                	sd	s3,8(sp)
    8020ae72:	e052                	sd	s4,0(sp)
    8020ae74:	1800                	addi	s0,sp,48
    8020ae76:	84aa                	mv	s1,a0
    8020ae78:	892e                	mv	s2,a1
    8020ae7a:	89b2                	mv	s3,a2
    8020ae7c:	8a36                	mv	s4,a3
  struct proc *p = myproc();
    8020ae7e:	00000097          	auipc	ra,0x0
    8020ae82:	5ce080e7          	jalr	1486(ra) # 8020b44c <myproc>
  if(user_dst){
    8020ae86:	c08d                	beqz	s1,8020aea8 <either_copyout+0x42>
    return copyout(p->pagetable, dst, src, len);
    8020ae88:	86d2                	mv	a3,s4
    8020ae8a:	864e                	mv	a2,s3
    8020ae8c:	85ca                	mv	a1,s2
    8020ae8e:	7128                	ld	a0,96(a0)
    8020ae90:	00000097          	auipc	ra,0x0
    8020ae94:	c5c080e7          	jalr	-932(ra) # 8020aaec <copyout>
  } else {
    memmove((char *)dst, src, len);
    return 0;
  }
}
    8020ae98:	70a2                	ld	ra,40(sp)
    8020ae9a:	7402                	ld	s0,32(sp)
    8020ae9c:	64e2                	ld	s1,24(sp)
    8020ae9e:	6942                	ld	s2,16(sp)
    8020aea0:	69a2                	ld	s3,8(sp)
    8020aea2:	6a02                	ld	s4,0(sp)
    8020aea4:	6145                	addi	sp,sp,48
    8020aea6:	8082                	ret
    memmove((char *)dst, src, len);
    8020aea8:	000a061b          	sext.w	a2,s4
    8020aeac:	85ce                	mv	a1,s3
    8020aeae:	854a                	mv	a0,s2
    8020aeb0:	ffff6097          	auipc	ra,0xffff6
    8020aeb4:	f24080e7          	jalr	-220(ra) # 80200dd4 <memmove>
    return 0;
    8020aeb8:	8526                	mv	a0,s1
    8020aeba:	bff9                	j	8020ae98 <either_copyout+0x32>

000000008020aebc <either_copyin>:
// Copy from either a user address, or kernel address,
// depending on usr_src.
// Returns 0 on success, -1 on error.
int
either_copyin( int user_src,void *dst, uint64 src, uint64 len)
{
    8020aebc:	7179                	addi	sp,sp,-48
    8020aebe:	f406                	sd	ra,40(sp)
    8020aec0:	f022                	sd	s0,32(sp)
    8020aec2:	ec26                	sd	s1,24(sp)
    8020aec4:	e84a                	sd	s2,16(sp)
    8020aec6:	e44e                	sd	s3,8(sp)
    8020aec8:	e052                	sd	s4,0(sp)
    8020aeca:	1800                	addi	s0,sp,48
    8020aecc:	84aa                	mv	s1,a0
    8020aece:	892e                	mv	s2,a1
    8020aed0:	89b2                	mv	s3,a2
    8020aed2:	8a36                	mv	s4,a3
  struct proc *p = myproc();
    8020aed4:	00000097          	auipc	ra,0x0
    8020aed8:	578080e7          	jalr	1400(ra) # 8020b44c <myproc>
  if(user_src){
    8020aedc:	c08d                	beqz	s1,8020aefe <either_copyin+0x42>
    return copyin(p->pagetable, dst, src, len);
    8020aede:	86d2                	mv	a3,s4
    8020aee0:	864e                	mv	a2,s3
    8020aee2:	85ca                	mv	a1,s2
    8020aee4:	7128                	ld	a0,96(a0)
    8020aee6:	00000097          	auipc	ra,0x0
    8020aeea:	ce4080e7          	jalr	-796(ra) # 8020abca <copyin>
  } else {
    memmove(dst, (char*)src, len);
    return 0;
  }
}
    8020aeee:	70a2                	ld	ra,40(sp)
    8020aef0:	7402                	ld	s0,32(sp)
    8020aef2:	64e2                	ld	s1,24(sp)
    8020aef4:	6942                	ld	s2,16(sp)
    8020aef6:	69a2                	ld	s3,8(sp)
    8020aef8:	6a02                	ld	s4,0(sp)
    8020aefa:	6145                	addi	sp,sp,48
    8020aefc:	8082                	ret
    memmove(dst, (char*)src, len);
    8020aefe:	000a061b          	sext.w	a2,s4
    8020af02:	85ce                	mv	a1,s3
    8020af04:	854a                	mv	a0,s2
    8020af06:	ffff6097          	auipc	ra,0xffff6
    8020af0a:	ece080e7          	jalr	-306(ra) # 80200dd4 <memmove>
    return 0;
    8020af0e:	8526                	mv	a0,s1
    8020af10:	bff9                	j	8020aeee <either_copyin+0x32>

000000008020af12 <__poll_func>:

static void __poll_func(struct file *f, struct wait_queue *wq, struct poll_table *pt)
{
	struct poll_wait_queue *pwq = container_of(pt, struct poll_wait_queue, pt);
	struct poll_wait_node *pwn;
	if (pwq->index >= ON_STACK_PWN_NUM)	// we can allocate pages
    8020af12:	4e1c                	lw	a5,24(a2)
    8020af14:	475d                	li	a4,23
    8020af16:	00f75363          	bge	a4,a5,8020af1c <__poll_func+0xa>
    8020af1a:	8082                	ret
{
    8020af1c:	7179                	addi	sp,sp,-48
    8020af1e:	f406                	sd	ra,40(sp)
    8020af20:	f022                	sd	s0,32(sp)
    8020af22:	ec26                	sd	s1,24(sp)
    8020af24:	e84a                	sd	s2,16(sp)
    8020af26:	e44e                	sd	s3,8(sp)
    8020af28:	e052                	sd	s4,0(sp)
    8020af2a:	1800                	addi	s0,sp,48
    8020af2c:	89ae                	mv	s3,a1
    8020af2e:	84b2                	mv	s1,a2
		return;

	pwn = &pwq->nodes[pwq->index++];
    8020af30:	0017871b          	addiw	a4,a5,1
    8020af34:	ce18                	sw	a4,24(a2)
	pwn->node.chan = pwq;
    8020af36:	00579713          	slli	a4,a5,0x5
    8020af3a:	9732                	add	a4,a4,a2
    8020af3c:	f710                	sd	a2,40(a4)
	pwn->queue = wq;
    8020af3e:	f30c                	sd	a1,32(a4)
	wait_queue_add_locked(wq, &pwn->node);
    8020af40:	0785                	addi	a5,a5,1
    8020af42:	00579913          	slli	s2,a5,0x5
    8020af46:	00890a13          	addi	s4,s2,8
    8020af4a:	9a32                	add	s4,s4,a2
	list_del(&node->list);
}

static inline void wait_queue_add_locked(struct wait_queue *wq, struct wait_node *node)
{
	acquire(&wq->lock);
    8020af4c:	852e                	mv	a0,a1
    8020af4e:	ffffd097          	auipc	ra,0xffffd
    8020af52:	428080e7          	jalr	1064(ra) # 80208376 <acquire>
	list_add_before(&wq->head, &node->list);
    8020af56:	0941                	addi	s2,s2,16
    8020af58:	9926                	add	s2,s2,s1
	__list_insert(node, beforeme->prev, beforeme);
    8020af5a:	0189b783          	ld	a5,24(s3) # 1018 <_entry-0x801fefe8>
	prev->next = next->prev = node;
    8020af5e:	0129bc23          	sd	s2,24(s3)
    8020af62:	0127b423          	sd	s2,8(a5)
    8020af66:	01898713          	addi	a4,s3,24
	node->next = next;
    8020af6a:	00ea3823          	sd	a4,16(s4)
	node->prev = prev;
    8020af6e:	00fa3423          	sd	a5,8(s4)
	release(&wq->lock);
    8020af72:	854e                	mv	a0,s3
    8020af74:	ffffd097          	auipc	ra,0xffffd
    8020af78:	456080e7          	jalr	1110(ra) # 802083ca <release>
}
    8020af7c:	70a2                	ld	ra,40(sp)
    8020af7e:	7402                	ld	s0,32(sp)
    8020af80:	64e2                	ld	s1,24(sp)
    8020af82:	6942                	ld	s2,16(sp)
    8020af84:	69a2                	ld	s3,8(sp)
    8020af86:	6a02                	ld	s4,0(sp)
    8020af88:	6145                	addi	sp,sp,48
    8020af8a:	8082                	ret

000000008020af8c <ppoll>:
	return ret;
}


int ppoll(struct pollfd *pfds, int nfds, struct timespec *timeout, __sigset_t *sigmask)
{
    8020af8c:	1141                	addi	sp,sp,-16
    8020af8e:	e422                	sd	s0,8(sp)
    8020af90:	0800                	addi	s0,sp,16
    8020af92:	86aa                	mv	a3,a0
    8020af94:	852e                	mv	a0,a1
	// uint64 expire;
	
	// if (timeout)
	// 	expire	= now + convert_from_timespec(timeout);

	for (int i = 0; i < nfds; i++) {
    8020af96:	02b05163          	blez	a1,8020afb8 <ppoll+0x2c>
    8020af9a:	00668793          	addi	a5,a3,6
    8020af9e:	fff5871b          	addiw	a4,a1,-1
    8020afa2:	1702                	slli	a4,a4,0x20
    8020afa4:	9301                	srli	a4,a4,0x20
    8020afa6:	070e                	slli	a4,a4,0x3
    8020afa8:	06b9                	addi	a3,a3,14
    8020afaa:	9736                	add	a4,a4,a3
		pfds[i].revents = POLLIN|POLLOUT;
    8020afac:	4695                	li	a3,5
    8020afae:	00d79023          	sh	a3,0(a5)
	for (int i = 0; i < nfds; i++) {
    8020afb2:	07a1                	addi	a5,a5,8
    8020afb4:	fee79de3          	bne	a5,a4,8020afae <ppoll+0x22>
	}
	return nfds;
}
    8020afb8:	6422                	ld	s0,8(sp)
    8020afba:	0141                	addi	sp,sp,16
    8020afbc:	8082                	ret

000000008020afbe <pselect>:
}


int pselect(int nfds, struct fdset *readfds, struct fdset *writefds, struct fdset *exceptfds,
			struct timespec *timeout, __sigset_t *sigmask)
{
    8020afbe:	a5010113          	addi	sp,sp,-1456 # 36372a50 <_entry-0x49e8d5b0>
    8020afc2:	5a113423          	sd	ra,1448(sp)
    8020afc6:	5a813023          	sd	s0,1440(sp)
    8020afca:	58913c23          	sd	s1,1432(sp)
    8020afce:	59213823          	sd	s2,1424(sp)
    8020afd2:	59313423          	sd	s3,1416(sp)
    8020afd6:	59413023          	sd	s4,1408(sp)
    8020afda:	57513c23          	sd	s5,1400(sp)
    8020afde:	57613823          	sd	s6,1392(sp)
    8020afe2:	57713423          	sd	s7,1384(sp)
    8020afe6:	57813023          	sd	s8,1376(sp)
    8020afea:	55913c23          	sd	s9,1368(sp)
    8020afee:	55a13823          	sd	s10,1360(sp)
    8020aff2:	55b13423          	sd	s11,1352(sp)
    8020aff6:	5b010413          	addi	s0,sp,1456
    8020affa:	a6a43c23          	sd	a0,-1416(s0)
    8020affe:	a6b43823          	sd	a1,-1424(s0)
    8020b002:	a6c43423          	sd	a2,-1432(s0)
    8020b006:	a6d43023          	sd	a3,-1440(s0)
    8020b00a:	84ba                	mv	s1,a4
	struct fdset rfds, wfds, exfds;
	uint64 expire;
	struct poll_wait_queue wait;
	struct proc* p = myproc();
    8020b00c:	00000097          	auipc	ra,0x0
    8020b010:	440080e7          	jalr	1088(ra) # 8020b44c <myproc>
    8020b014:	8d2a                	mv	s10,a0
	
	/*
	__debug_info("pselect timeout={%ds, %dns}\n", 
				timeout ? timeout->tv_sec : -1, timeout ? timeout->tv_nsec : -1);
*/
	if (timeout) {
    8020b016:	c0f1                	beqz	s1,8020b0da <pselect+0x11c>
	tv->usec = (time % TICK_FREQ) * 1000 / (TICK_FREQ / 1000);
}

static inline uint64 convert_from_timespec(const struct timespec *ts)
{
	uint64 time = ts->tv_sec * TICK_FREQ
    8020b018:	6098                	ld	a4,0(s1)
    8020b01a:	000f47b7          	lui	a5,0xf4
    8020b01e:	24078793          	addi	a5,a5,576 # f4240 <_entry-0x8010bdc0>
    8020b022:	02f70733          	mul	a4,a4,a5
					+ ts->tv_nsec * (TICK_FREQ / 1000 / 100) / 10 / 1000;
    8020b026:	649c                	ld	a5,8(s1)
    8020b028:	3e800693          	li	a3,1000
    8020b02c:	02d7c7b3          	div	a5,a5,a3
    8020b030:	973e                	add	a4,a4,a5
    8020b032:	a4e43823          	sd	a4,-1456(s0)
		expire = convert_from_timespec(timeout);
		if (expire == 0)
			immediate = 1;			// don't sleep
    8020b036:	4785                	li	a5,1
    8020b038:	a4f43c23          	sd	a5,-1448(s0)
		if (expire == 0)
    8020b03c:	cb01                	beqz	a4,8020b04c <pselect+0x8e>
  asm volatile("rdtime %0" : "=r" (x) );
    8020b03e:	c01027f3          	rdtime	a5
		else 
			//expire += readtime();	// overflow?
			expire += r_time();	// overflow?
    8020b042:	97ba                	add	a5,a5,a4
    8020b044:	a4f43823          	sd	a5,-1456(s0)
	int immediate = 0;
    8020b048:	a4043c23          	sd	zero,-1448(s0)
	if (rarg)
    8020b04c:	a7043583          	ld	a1,-1424(s0)
    8020b050:	c9d1                	beqz	a1,8020b0e4 <pselect+0x126>
		memmove(rfds, rarg, sizeof(struct fdset));
    8020b052:	08000613          	li	a2,128
    8020b056:	f1040513          	addi	a0,s0,-240
    8020b05a:	ffff6097          	auipc	ra,0xffff6
    8020b05e:	d7a080e7          	jalr	-646(ra) # 80200dd4 <memmove>
	if (warg)
    8020b062:	a6843583          	ld	a1,-1432(s0)
    8020b066:	c9c9                	beqz	a1,8020b0f8 <pselect+0x13a>
		memmove(wfds, warg, sizeof(struct fdset));
    8020b068:	08000613          	li	a2,128
    8020b06c:	e9040513          	addi	a0,s0,-368
    8020b070:	ffff6097          	auipc	ra,0xffff6
    8020b074:	d64080e7          	jalr	-668(ra) # 80200dd4 <memmove>
	if (exarg)
    8020b078:	a6043583          	ld	a1,-1440(s0)
    8020b07c:	c9c1                	beqz	a1,8020b10c <pselect+0x14e>
		memmove(exfds, exarg, sizeof(struct fdset));
    8020b07e:	08000613          	li	a2,128
    8020b082:	e1040513          	addi	a0,s0,-496
    8020b086:	ffff6097          	auipc	ra,0xffff6
    8020b08a:	d4e080e7          	jalr	-690(ra) # 80200dd4 <memmove>
	pwq->pt.func = __poll_func;
    8020b08e:	00000797          	auipc	a5,0x0
    8020b092:	e8478793          	addi	a5,a5,-380 # 8020af12 <__poll_func>
    8020b096:	aef43823          	sd	a5,-1296(s0)
	pwq->pt.key = 0;
    8020b09a:	ae042c23          	sw	zero,-1288(s0)
	pwq->error = 0;
    8020b09e:	b0043023          	sd	zero,-1280(s0)
	pwq->index = 0;
    8020b0a2:	b0042423          	sw	zero,-1272(s0)

	// Since the node is on stack, if we want other process to get us, we should use pa.
	// pwait = (struct poll_wait_queue *)kwalkaddr(myproc()->pagetable, (uint64)&wait);
	// pwait = &wait;
	poll_init(&wait);
	if (immediate)
    8020b0a6:	a5843783          	ld	a5,-1448(s0)
    8020b0aa:	c399                	beqz	a5,8020b0b0 <pselect+0xf2>
		wait.pt.func = NULL;		// we won't be inserted into any queue in later poll()s
    8020b0ac:	ae043823          	sd	zero,-1296(s0)

	int ret = 0;
	for (;;)
	{
		int i = 0;	// fd iterator
		for (int idx = 0; idx <= (nfds - 1) / NFDBIT; idx++)
    8020b0b0:	a7843783          	ld	a5,-1416(s0)
    8020b0b4:	37fd                	addiw	a5,a5,-1
    8020b0b6:	8399                	srli	a5,a5,0x6
    8020b0b8:	0785                	addi	a5,a5,1
    8020b0ba:	078e                	slli	a5,a5,0x3
    8020b0bc:	a8f43023          	sd	a5,-1408(s0)
    8020b0c0:	ac043423          	sd	zero,-1336(s0)
			if (all == 0) {				// no fd in this part
				i += NFDBIT;
				continue;
			}

			for (int b = 0; b < NFDBIT; b++, i++) {
    8020b0c4:	aa043823          	sd	zero,-1360(s0)
				uint64 bit = 1L << b;
				if (!(bit & all))		// no fd in this bit
					continue;
	
				struct file *fp = p->ofile[i];
				if (i<0||i>=NOFILEMAX(p)||!fp)				// bad fd
    8020b0c8:	0c800793          	li	a5,200
    8020b0cc:	a8f43823          	sd	a5,-1392(s0)
	return fp->poll(fp, pt);
    8020b0d0:	af040793          	addi	a5,s0,-1296
    8020b0d4:	a8f43423          	sd	a5,-1400(s0)
    8020b0d8:	a495                	j	8020b33c <pselect+0x37e>
	int immediate = 0;
    8020b0da:	a4043c23          	sd	zero,-1448(s0)
		expire = 0;					// infinity
    8020b0de:	a4043823          	sd	zero,-1456(s0)
    8020b0e2:	b7ad                	j	8020b04c <pselect+0x8e>
		memset(rfds, 0, sizeof(struct fdset));
    8020b0e4:	08000613          	li	a2,128
    8020b0e8:	4581                	li	a1,0
    8020b0ea:	f1040513          	addi	a0,s0,-240
    8020b0ee:	ffff6097          	auipc	ra,0xffff6
    8020b0f2:	c86080e7          	jalr	-890(ra) # 80200d74 <memset>
    8020b0f6:	b7b5                	j	8020b062 <pselect+0xa4>
		memset(wfds, 0, sizeof(struct fdset));
    8020b0f8:	08000613          	li	a2,128
    8020b0fc:	4581                	li	a1,0
    8020b0fe:	e9040513          	addi	a0,s0,-368
    8020b102:	ffff6097          	auipc	ra,0xffff6
    8020b106:	c72080e7          	jalr	-910(ra) # 80200d74 <memset>
    8020b10a:	b7bd                	j	8020b078 <pselect+0xba>
		memset(exfds, 0, sizeof(struct fdset));
    8020b10c:	08000613          	li	a2,128
    8020b110:	4581                	li	a1,0
    8020b112:	e1040513          	addi	a0,s0,-496
    8020b116:	ffff6097          	auipc	ra,0xffff6
    8020b11a:	c5e080e7          	jalr	-930(ra) # 80200d74 <memset>
    8020b11e:	bf85                	j	8020b08e <pselect+0xd0>
				i += NFDBIT;
    8020b120:	0409091b          	addiw	s2,s2,64
		for (int idx = 0; idx <= (nfds - 1) / NFDBIT; idx++)
    8020b124:	0b21                	addi	s6,s6,8
    8020b126:	a8043783          	ld	a5,-1408(s0)
    8020b12a:	18fb0c63          	beq	s6,a5,8020b2c2 <pselect+0x304>
			r = rfds.fd_bits[idx];		// extract fd bits
    8020b12e:	f1040793          	addi	a5,s0,-240
    8020b132:	97da                	add	a5,a5,s6
    8020b134:	6398                	ld	a4,0(a5)
    8020b136:	ace43c23          	sd	a4,-1320(s0)
			w = wfds.fd_bits[idx];
    8020b13a:	e9040793          	addi	a5,s0,-368
    8020b13e:	97da                	add	a5,a5,s6
    8020b140:	6394                	ld	a3,0(a5)
    8020b142:	acd43823          	sd	a3,-1328(s0)
			ex = exfds.fd_bits[idx];
    8020b146:	e1040793          	addi	a5,s0,-496
    8020b14a:	97da                	add	a5,a5,s6
    8020b14c:	639c                	ld	a5,0(a5)
    8020b14e:	aaf43c23          	sd	a5,-1352(s0)
			all = r | w | ex;
    8020b152:	00d76ab3          	or	s5,a4,a3
    8020b156:	00faeab3          	or	s5,s5,a5
			if (all == 0) {				// no fd in this part
    8020b15a:	fc0a83e3          	beqz	s5,8020b120 <pselect+0x162>
				if (i >= nfds)			// reach end
    8020b15e:	a7843783          	ld	a5,-1416(s0)
    8020b162:	12f95363          	bge	s2,a5,8020b288 <pselect+0x2ca>
    8020b166:	8a4a                	mv	s4,s2
    8020b168:	41278cbb          	subw	s9,a5,s2
			for (int b = 0; b < NFDBIT; b++, i++) {
    8020b16c:	ab043483          	ld	s1,-1360(s0)
			uint64 rres = 0, wres = 0, exres = 0;
    8020b170:	a8043c23          	sd	zero,-1384(s0)
    8020b174:	aa043023          	sd	zero,-1376(s0)
    8020b178:	aa043423          	sd	zero,-1368(s0)
				uint64 bit = 1L << b;
    8020b17c:	4c05                	li	s8,1
			for (int b = 0; b < NFDBIT; b++, i++) {
    8020b17e:	04000b93          	li	s7,64
    8020b182:	a08d                	j	8020b1e4 <pselect+0x226>
				
				//__debug_info("pselect", "fd=%d\n", i);
				
				wait.pt.key = POLLEX_SET;
				if (r & bit)
					wait.pt.key |= POLLIN_SET;
    8020b184:	47ed                	li	a5,27
    8020b186:	aef42c23          	sw	a5,-1288(s0)
    8020b18a:	a871                	j	8020b226 <pselect+0x268>
					wait.pt.key |= POLLOUT_SET;

				uint32 mask = file_poll(fp, &wait.pt);
				//__debug_info("pselect", "mask=%d\n", mask);

				if ((mask & POLLIN_SET) && (r & bit)) {
    8020b18c:	0c0d8463          	beqz	s11,8020b254 <pselect+0x296>
					rres |= bit;
    8020b190:	aa843703          	ld	a4,-1368(s0)
    8020b194:	01376733          	or	a4,a4,s3
    8020b198:	aae43423          	sd	a4,-1368(s0)
					ret++;
    8020b19c:	ac843703          	ld	a4,-1336(s0)
    8020b1a0:	2705                	addiw	a4,a4,1
    8020b1a2:	ace43423          	sd	a4,-1336(s0)
					wait.pt.func = NULL;
    8020b1a6:	ab043703          	ld	a4,-1360(s0)
    8020b1aa:	aee43823          	sd	a4,-1296(s0)
    8020b1ae:	a05d                	j	8020b254 <pselect+0x296>
				}
				if ((mask & POLLOUT_SET) && (w & bit)) {
    8020b1b0:	ac043703          	ld	a4,-1344(s0)
    8020b1b4:	c35d                	beqz	a4,8020b25a <pselect+0x29c>
					wres |= bit;
    8020b1b6:	aa043703          	ld	a4,-1376(s0)
    8020b1ba:	01376733          	or	a4,a4,s3
    8020b1be:	aae43023          	sd	a4,-1376(s0)
					ret++;
    8020b1c2:	ac843703          	ld	a4,-1336(s0)
    8020b1c6:	2705                	addiw	a4,a4,1
    8020b1c8:	ace43423          	sd	a4,-1336(s0)
					wait.pt.func = NULL;
    8020b1cc:	ab043703          	ld	a4,-1360(s0)
    8020b1d0:	aee43823          	sd	a4,-1296(s0)
    8020b1d4:	a059                	j	8020b25a <pselect+0x29c>
			for (int b = 0; b < NFDBIT; b++, i++) {
    8020b1d6:	2485                	addiw	s1,s1,1
    8020b1d8:	2905                	addiw	s2,s2,1
    8020b1da:	0b748d63          	beq	s1,s7,8020b294 <pselect+0x2d6>
				if (i >= nfds)			// reach end
    8020b1de:	0a05                	addi	s4,s4,1
    8020b1e0:	0b948a63          	beq	s1,s9,8020b294 <pselect+0x2d6>
				uint64 bit = 1L << b;
    8020b1e4:	009c19b3          	sll	s3,s8,s1
				if (!(bit & all))		// no fd in this bit
    8020b1e8:	013af7b3          	and	a5,s5,s3
    8020b1ec:	d7ed                	beqz	a5,8020b1d6 <pselect+0x218>
				if (i<0||i>=NOFILEMAX(p)||!fp)				// bad fd
    8020b1ee:	fe0944e3          	bltz	s2,8020b1d6 <pselect+0x218>
    8020b1f2:	0e0d3783          	ld	a5,224(s10) # 1a0e0 <_entry-0x801e5f20>
    8020b1f6:	0c800713          	li	a4,200
    8020b1fa:	00f75463          	bge	a4,a5,8020b202 <pselect+0x244>
    8020b1fe:	a9043783          	ld	a5,-1392(s0)
    8020b202:	fcfa5ae3          	bge	s4,a5,8020b1d6 <pselect+0x218>
				struct file *fp = p->ofile[i];
    8020b206:	0e8d3783          	ld	a5,232(s10)
    8020b20a:	003a1713          	slli	a4,s4,0x3
    8020b20e:	97ba                	add	a5,a5,a4
    8020b210:	6388                	ld	a0,0(a5)
				if (i<0||i>=NOFILEMAX(p)||!fp)				// bad fd
    8020b212:	d171                	beqz	a0,8020b1d6 <pselect+0x218>
				if (r & bit)
    8020b214:	ad843783          	ld	a5,-1320(s0)
    8020b218:	0137fdb3          	and	s11,a5,s3
    8020b21c:	f60d94e3          	bnez	s11,8020b184 <pselect+0x1c6>
				wait.pt.key = POLLEX_SET;
    8020b220:	4789                	li	a5,2
    8020b222:	aef42c23          	sw	a5,-1288(s0)
				if (w & bit)
    8020b226:	ad043783          	ld	a5,-1328(s0)
    8020b22a:	0137f7b3          	and	a5,a5,s3
    8020b22e:	acf43023          	sd	a5,-1344(s0)
    8020b232:	c799                	beqz	a5,8020b240 <pselect+0x282>
					wait.pt.key |= POLLOUT_SET;
    8020b234:	af842783          	lw	a5,-1288(s0)
    8020b238:	00c7e793          	ori	a5,a5,12
    8020b23c:	aef42c23          	sw	a5,-1288(s0)
	if (!fp->poll)
    8020b240:	653c                	ld	a5,72(a0)
    8020b242:	16078863          	beqz	a5,8020b3b2 <pselect+0x3f4>
	return fp->poll(fp, pt);
    8020b246:	a8843583          	ld	a1,-1400(s0)
    8020b24a:	9782                	jalr	a5
    8020b24c:	0005079b          	sext.w	a5,a0
				if ((mask & POLLIN_SET) && (r & bit)) {
    8020b250:	8965                	andi	a0,a0,25
    8020b252:	fd0d                	bnez	a0,8020b18c <pselect+0x1ce>
				if ((mask & POLLOUT_SET) && (w & bit)) {
    8020b254:	00c7f713          	andi	a4,a5,12
    8020b258:	ff21                	bnez	a4,8020b1b0 <pselect+0x1f2>
				}
				if ((mask & POLLEX_SET) && (ex & bit)) {
    8020b25a:	8b89                	andi	a5,a5,2
    8020b25c:	dfad                	beqz	a5,8020b1d6 <pselect+0x218>
    8020b25e:	ab843783          	ld	a5,-1352(s0)
    8020b262:	0137f7b3          	and	a5,a5,s3
    8020b266:	dba5                	beqz	a5,8020b1d6 <pselect+0x218>
					exres |= bit;
    8020b268:	a9843783          	ld	a5,-1384(s0)
    8020b26c:	0137e7b3          	or	a5,a5,s3
    8020b270:	a8f43c23          	sd	a5,-1384(s0)
					ret++;
    8020b274:	ac843783          	ld	a5,-1336(s0)
    8020b278:	2785                	addiw	a5,a5,1
    8020b27a:	acf43423          	sd	a5,-1336(s0)
					wait.pt.func = NULL;
    8020b27e:	ab043783          	ld	a5,-1360(s0)
    8020b282:	aef43823          	sd	a5,-1296(s0)
    8020b286:	bf81                	j	8020b1d6 <pselect+0x218>
			uint64 rres = 0, wres = 0, exres = 0;
    8020b288:	a8043c23          	sd	zero,-1384(s0)
    8020b28c:	aa043023          	sd	zero,-1376(s0)
    8020b290:	aa043423          	sd	zero,-1368(s0)
				}
			}
			if (readfds)
    8020b294:	a7043783          	ld	a5,-1424(s0)
    8020b298:	c789                	beqz	a5,8020b2a2 <pselect+0x2e4>
				readfds->fd_bits[idx] = rres;
    8020b29a:	97da                	add	a5,a5,s6
    8020b29c:	aa843703          	ld	a4,-1368(s0)
    8020b2a0:	e398                	sd	a4,0(a5)
			if (writefds)
    8020b2a2:	a6843783          	ld	a5,-1432(s0)
    8020b2a6:	c789                	beqz	a5,8020b2b0 <pselect+0x2f2>
				writefds->fd_bits[idx] = wres;
    8020b2a8:	97da                	add	a5,a5,s6
    8020b2aa:	aa043703          	ld	a4,-1376(s0)
    8020b2ae:	e398                	sd	a4,0(a5)
			if (exceptfds)
    8020b2b0:	a6043783          	ld	a5,-1440(s0)
    8020b2b4:	e60788e3          	beqz	a5,8020b124 <pselect+0x166>
				exceptfds->fd_bits[idx] = exres;
    8020b2b8:	97da                	add	a5,a5,s6
    8020b2ba:	a9843703          	ld	a4,-1384(s0)
    8020b2be:	e398                	sd	a4,0(a5)
    8020b2c0:	b595                	j	8020b124 <pselect+0x166>
		}
		wait.pt.func = NULL;		// only need to be called once for each file
    8020b2c2:	ae043823          	sd	zero,-1296(s0)

		if (ret > 0 || immediate)	// got results or don't sleep-wait
    8020b2c6:	ac843783          	ld	a5,-1336(s0)
    8020b2ca:	06f04f63          	bgtz	a5,8020b348 <pselect+0x38a>
    8020b2ce:	a5843783          	ld	a5,-1448(s0)
    8020b2d2:	ebbd                	bnez	a5,8020b348 <pselect+0x38a>
			break;
		if (wait.error) {
    8020b2d4:	b0043783          	ld	a5,-1280(s0)
    8020b2d8:	e7ad                	bnez	a5,8020b342 <pselect+0x384>
	struct proc *p = myproc();
    8020b2da:	00000097          	auipc	ra,0x0
    8020b2de:	172080e7          	jalr	370(ra) # 8020b44c <myproc>
    8020b2e2:	892a                	mv	s2,a0
	struct proc *volatile vp = p;
    8020b2e4:	aea43423          	sd	a0,-1304(s0)
	acquire(&p->lock);	// Hold this for sleep().
    8020b2e8:	00850493          	addi	s1,a0,8
    8020b2ec:	8526                	mv	a0,s1
    8020b2ee:	ffffd097          	auipc	ra,0xffffd
    8020b2f2:	088080e7          	jalr	136(ra) # 80208376 <acquire>
	p->sleep_expire = expire;
    8020b2f6:	a5043783          	ld	a5,-1456(s0)
    8020b2fa:	10f93c23          	sd	a5,280(s2)
	sleep(pwq, &p->lock);
    8020b2fe:	85a6                	mv	a1,s1
    8020b300:	af040513          	addi	a0,s0,-1296
    8020b304:	ffff7097          	auipc	ra,0xffff7
    8020b308:	91e080e7          	jalr	-1762(ra) # 80201c22 <sleep>
	if (vp->sleep_expire == 0)
    8020b30c:	ae843783          	ld	a5,-1304(s0)
    8020b310:	1187b783          	ld	a5,280(a5)
    8020b314:	c7d1                	beqz	a5,8020b3a0 <pselect+0x3e2>
		p->sleep_expire = 0;
    8020b316:	10093c23          	sd	zero,280(s2)
	release(&p->lock);
    8020b31a:	8526                	mv	a0,s1
    8020b31c:	ffffd097          	auipc	ra,0xffffd
    8020b320:	0ae080e7          	jalr	174(ra) # 802083ca <release>
		}

		// at this point, maybe we are already waken up by some
		if (poll_sched_timeout(&wait, expire))
			immediate = 1;
		if (myproc()->killed) {
    8020b324:	00000097          	auipc	ra,0x0
    8020b328:	128080e7          	jalr	296(ra) # 8020b44c <myproc>
    8020b32c:	5d1c                	lw	a5,56(a0)
    8020b32e:	c799                	beqz	a5,8020b33c <pselect+0x37e>
			immediate = 1;
			wait.error = -EINTR;
    8020b330:	57f1                	li	a5,-4
    8020b332:	b0f43023          	sd	a5,-1280(s0)
			immediate = 1;
    8020b336:	4785                	li	a5,1
    8020b338:	a4f43c23          	sd	a5,-1448(s0)
		for (int idx = 0; idx <= (nfds - 1) / NFDBIT; idx++)
    8020b33c:	4b01                	li	s6,0
		int i = 0;	// fd iterator
    8020b33e:	4901                	li	s2,0
    8020b340:	b3fd                	j	8020b12e <pselect+0x170>
			ret = wait.error;
    8020b342:	2781                	sext.w	a5,a5
    8020b344:	acf43423          	sd	a5,-1336(s0)
	for (int i = 0; i < pwq->index; i++) {
    8020b348:	b0842783          	lw	a5,-1272(s0)
    8020b34c:	06f05863          	blez	a5,8020b3bc <pselect+0x3fe>
    8020b350:	b1040493          	addi	s1,s0,-1264
    8020b354:	4981                	li	s3,0
    8020b356:	a829                	j	8020b370 <pselect+0x3b2>
		release(&wq->lock);
    8020b358:	854a                	mv	a0,s2
    8020b35a:	ffffd097          	auipc	ra,0xffffd
    8020b35e:	070080e7          	jalr	112(ra) # 802083ca <release>
	for (int i = 0; i < pwq->index; i++) {
    8020b362:	2985                	addiw	s3,s3,1
    8020b364:	02048493          	addi	s1,s1,32
    8020b368:	b0842783          	lw	a5,-1272(s0)
    8020b36c:	04f9d863          	bge	s3,a5,8020b3bc <pselect+0x3fe>
		struct wait_queue *wq = pwn->queue;
    8020b370:	0004b903          	ld	s2,0(s1)
		acquire(&wq->lock);
    8020b374:	854a                	mv	a0,s2
    8020b376:	ffffd097          	auipc	ra,0xffffd
    8020b37a:	000080e7          	jalr	ra # 80208376 <acquire>
	__list_link(node->prev, node->next);
    8020b37e:	6898                	ld	a4,16(s1)
    8020b380:	6c9c                	ld	a5,24(s1)
	prev->next = next;
    8020b382:	e71c                	sd	a5,8(a4)
	next->prev = prev;
    8020b384:	e398                	sd	a4,0(a5)
	return head->next == head;
    8020b386:	02093783          	ld	a5,32(s2)
	return list_empty(&wq->head);
    8020b38a:	01890713          	addi	a4,s2,24
		if (!wait_queue_empty(wq)) {
    8020b38e:	fce785e3          	beq	a5,a4,8020b358 <pselect+0x39a>
			wakeup(node->chan);
    8020b392:	ff87b503          	ld	a0,-8(a5)
    8020b396:	ffff7097          	auipc	ra,0xffff7
    8020b39a:	996080e7          	jalr	-1642(ra) # 80201d2c <wakeup>
    8020b39e:	bf6d                	j	8020b358 <pselect+0x39a>
	release(&p->lock);
    8020b3a0:	8526                	mv	a0,s1
    8020b3a2:	ffffd097          	auipc	ra,0xffffd
    8020b3a6:	028080e7          	jalr	40(ra) # 802083ca <release>
			immediate = 1;
    8020b3aa:	4785                	li	a5,1
    8020b3ac:	a4f43c23          	sd	a5,-1448(s0)
    8020b3b0:	bf95                	j	8020b324 <pselect+0x366>
		return POLLIN|POLLOUT;
    8020b3b2:	4795                	li	a5,5
				if ((mask & POLLIN_SET) && (r & bit)) {
    8020b3b4:	de0d8ee3          	beqz	s11,8020b1b0 <pselect+0x1f2>
		return POLLIN|POLLOUT;
    8020b3b8:	4795                	li	a5,5
    8020b3ba:	bbd9                	j	8020b190 <pselect+0x1d2>

	poll_end(&wait);

	//__debug_info("pselect", "return %d\n", ret);
	return ret;
}
    8020b3bc:	ac843503          	ld	a0,-1336(s0)
    8020b3c0:	5a813083          	ld	ra,1448(sp)
    8020b3c4:	5a013403          	ld	s0,1440(sp)
    8020b3c8:	59813483          	ld	s1,1432(sp)
    8020b3cc:	59013903          	ld	s2,1424(sp)
    8020b3d0:	58813983          	ld	s3,1416(sp)
    8020b3d4:	58013a03          	ld	s4,1408(sp)
    8020b3d8:	57813a83          	ld	s5,1400(sp)
    8020b3dc:	57013b03          	ld	s6,1392(sp)
    8020b3e0:	56813b83          	ld	s7,1384(sp)
    8020b3e4:	56013c03          	ld	s8,1376(sp)
    8020b3e8:	55813c83          	ld	s9,1368(sp)
    8020b3ec:	55013d03          	ld	s10,1360(sp)
    8020b3f0:	54813d83          	ld	s11,1352(sp)
    8020b3f4:	5b010113          	addi	sp,sp,1456
    8020b3f8:	8082                	ret

000000008020b3fa <cpuinit>:

// #define DEBUG1
struct cpu cpus[NCPU];

void
cpuinit(void){
    8020b3fa:	1141                	addi	sp,sp,-16
    8020b3fc:	e406                	sd	ra,8(sp)
    8020b3fe:	e022                	sd	s0,0(sp)
    8020b400:	0800                	addi	s0,sp,16
  memset(cpus, 0, sizeof(cpus));
    8020b402:	28000613          	li	a2,640
    8020b406:	4581                	li	a1,0
    8020b408:	00861517          	auipc	a0,0x861
    8020b40c:	c8850513          	addi	a0,a0,-888 # 80a6c090 <cpus>
    8020b410:	ffff6097          	auipc	ra,0xffff6
    8020b414:	964080e7          	jalr	-1692(ra) # 80200d74 <memset>
}
    8020b418:	60a2                	ld	ra,8(sp)
    8020b41a:	6402                	ld	s0,0(sp)
    8020b41c:	0141                	addi	sp,sp,16
    8020b41e:	8082                	ret

000000008020b420 <cpuid>:
// Must be called with interrupts disabled,
// to prevent race with process being moved
// to a different CPU.
int
cpuid()
{
    8020b420:	1141                	addi	sp,sp,-16
    8020b422:	e422                	sd	s0,8(sp)
    8020b424:	0800                	addi	s0,sp,16
  asm volatile("mv %0, tp" : "=r" (x) );
    8020b426:	8512                	mv	a0,tp
  int id = r_tp();
  return id;
}
    8020b428:	2501                	sext.w	a0,a0
    8020b42a:	6422                	ld	s0,8(sp)
    8020b42c:	0141                	addi	sp,sp,16
    8020b42e:	8082                	ret

000000008020b430 <mycpu>:

// Return this CPU's cpu struct.
// Interrupts must be disabled.
struct cpu*
mycpu(void) {
    8020b430:	1141                	addi	sp,sp,-16
    8020b432:	e422                	sd	s0,8(sp)
    8020b434:	0800                	addi	s0,sp,16
    8020b436:	8792                	mv	a5,tp
  int id = cpuid();
  struct cpu *c = &cpus[id];
    8020b438:	2781                	sext.w	a5,a5
    8020b43a:	079e                	slli	a5,a5,0x7
  
  return c;
}
    8020b43c:	00861517          	auipc	a0,0x861
    8020b440:	c5450513          	addi	a0,a0,-940 # 80a6c090 <cpus>
    8020b444:	953e                	add	a0,a0,a5
    8020b446:	6422                	ld	s0,8(sp)
    8020b448:	0141                	addi	sp,sp,16
    8020b44a:	8082                	ret

000000008020b44c <myproc>:

// Return the current struct proc *, or zero if none.
struct proc*
myproc(void) {
    8020b44c:	1101                	addi	sp,sp,-32
    8020b44e:	ec06                	sd	ra,24(sp)
    8020b450:	e822                	sd	s0,16(sp)
    8020b452:	e426                	sd	s1,8(sp)
    8020b454:	1000                	addi	s0,sp,32
  push_off();
    8020b456:	ffff6097          	auipc	ra,0xffff6
    8020b45a:	bac080e7          	jalr	-1108(ra) # 80201002 <push_off>
    8020b45e:	8792                	mv	a5,tp
  struct cpu *c = mycpu();
  struct proc *p = c->proc;
    8020b460:	2781                	sext.w	a5,a5
    8020b462:	079e                	slli	a5,a5,0x7
    8020b464:	00861717          	auipc	a4,0x861
    8020b468:	c2c70713          	addi	a4,a4,-980 # 80a6c090 <cpus>
    8020b46c:	97ba                	add	a5,a5,a4
    8020b46e:	6384                	ld	s1,0(a5)
  pop_off();
    8020b470:	ffff6097          	auipc	ra,0xffff6
    8020b474:	bde080e7          	jalr	-1058(ra) # 8020104e <pop_off>
  return p;
}
    8020b478:	8526                	mv	a0,s1
    8020b47a:	60e2                	ld	ra,24(sp)
    8020b47c:	6442                	ld	s0,16(sp)
    8020b47e:	64a2                	ld	s1,8(sp)
    8020b480:	6105                	addi	sp,sp,32
    8020b482:	8082                	ret

000000008020b484 <alloc_vma>:
  uint64 sz,
  int perm,
  int alloc,
  uint64 pa
)
{
    8020b484:	711d                	addi	sp,sp,-96
    8020b486:	ec86                	sd	ra,88(sp)
    8020b488:	e8a2                	sd	s0,80(sp)
    8020b48a:	e4a6                	sd	s1,72(sp)
    8020b48c:	e0ca                	sd	s2,64(sp)
    8020b48e:	fc4e                	sd	s3,56(sp)
    8020b490:	f852                	sd	s4,48(sp)
    8020b492:	f456                	sd	s5,40(sp)
    8020b494:	f05a                	sd	s6,32(sp)
    8020b496:	ec5e                	sd	s7,24(sp)
    8020b498:	e862                	sd	s8,16(sp)
    8020b49a:	e466                	sd	s9,8(sp)
    8020b49c:	e06a                	sd	s10,0(sp)
    8020b49e:	1080                	addi	s0,sp,96
    8020b4a0:	8aaa                	mv	s5,a0
  if(p == NULL)
    8020b4a2:	c945                	beqz	a0,8020b552 <alloc_vma+0xce>
    8020b4a4:	8bae                	mv	s7,a1
    8020b4a6:	8a36                	mv	s4,a3
    8020b4a8:	8b3a                	mv	s6,a4
    8020b4aa:	8cbe                	mv	s9,a5
    8020b4ac:	8c42                	mv	s8,a6
  {
    __debug_warn("[alloc_vma] proc is null\n");
    return NULL;
  }

  uint64 start = PGROUNDDOWN(addr);
    8020b4ae:	77fd                	lui	a5,0xfffff
    8020b4b0:	00f679b3          	and	s3,a2,a5
  uint64 end = addr + sz;
  end = PGROUNDUP(end);
    8020b4b4:	6905                	lui	s2,0x1
    8020b4b6:	197d                	addi	s2,s2,-1
    8020b4b8:	9936                	add	s2,s2,a3
    8020b4ba:	9932                	add	s2,s2,a2
    8020b4bc:	00f97933          	and	s2,s2,a5

  struct vma *vma_head = p->vma;
    8020b4c0:	17053783          	ld	a5,368(a0)
  struct vma *nvma = vma_head->next;
    8020b4c4:	63a4                	ld	s1,64(a5)

  while(nvma != vma_head)
    8020b4c6:	00978b63          	beq	a5,s1,8020b4dc <alloc_vma+0x58>
  {
    if(end <= nvma->addr)
    8020b4ca:	6490                	ld	a2,8(s1)
    8020b4cc:	01267863          	bgeu	a2,s2,8020b4dc <alloc_vma+0x58>
    {
      break;
    }
    else if (start >= nvma->end)
    8020b4d0:	6c90                	ld	a2,24(s1)
    8020b4d2:	08c9ea63          	bltu	s3,a2,8020b566 <alloc_vma+0xe2>
    {
      nvma = nvma->next;
    8020b4d6:	60a4                	ld	s1,64(s1)
  while(nvma != vma_head)
    8020b4d8:	fe9799e3          	bne	a5,s1,8020b4ca <alloc_vma+0x46>
    {
      __debug_warn("[alloc_vma] vma address overflow\n");
      return NULL;
    }
  }
  struct vma *vma = (struct vma*)kmalloc(sizeof(struct vma));
    8020b4dc:	04800513          	li	a0,72
    8020b4e0:	ffffe097          	auipc	ra,0xffffe
    8020b4e4:	f28080e7          	jalr	-216(ra) # 80209408 <kmalloc>
    8020b4e8:	8d2a                	mv	s10,a0
  if(vma == NULL)
    8020b4ea:	c941                	beqz	a0,8020b57a <alloc_vma+0xf6>
  {
    __debug_warn("[alloc_vma] vma kmalloc failed\n");
    return NULL;
  }
  
  if(sz != 0)
    8020b4ec:	000a0763          	beqz	s4,8020b4fa <alloc_vma+0x76>
  {
    if(alloc == 1)
    8020b4f0:	4785                	li	a5,1
    8020b4f2:	08fc8d63          	beq	s9,a5,8020b58c <alloc_vma+0x108>
      {
        __debug_warn("[alloc_vma] uvmalloc start = %p, end = %p fail\n", start, end);
        goto bad;
      }
    }
    else if(pa != 0)
    8020b4f6:	0c0c1063          	bnez	s8,8020b5b6 <alloc_vma+0x132>
        goto bad;
      }
    }
  }
  
  vma->addr = start;
    8020b4fa:	013d3423          	sd	s3,8(s10)
  vma->sz = sz;
    8020b4fe:	014d3823          	sd	s4,16(s10)
  vma->end = end;
    8020b502:	012d3c23          	sd	s2,24(s10)
  vma->perm = perm;
    8020b506:	016d2223          	sw	s6,4(s10)
  vma->fd = -1;
    8020b50a:	57fd                	li	a5,-1
    8020b50c:	02fd2623          	sw	a5,44(s10)
  vma->f_off = 0;
    8020b510:	020d3823          	sd	zero,48(s10)
  vma->flags = 0;
    8020b514:	020d2423          	sw	zero,40(s10)
  vma->mmap = 0;
    8020b518:	020d3023          	sd	zero,32(s10)
  vma->type = type;
    8020b51c:	017d2023          	sw	s7,0(s10)

  vma->prev = nvma->prev;
    8020b520:	7c9c                	ld	a5,56(s1)
    8020b522:	02fd3c23          	sd	a5,56(s10)
  vma->next = nvma;
    8020b526:	049d3023          	sd	s1,64(s10)
  nvma->prev->next = vma;
    8020b52a:	7c9c                	ld	a5,56(s1)
    8020b52c:	05a7b023          	sd	s10,64(a5) # fffffffffffff040 <kernel_end+0xffffffff7f592040>
  nvma->prev = vma;
    8020b530:	03a4bc23          	sd	s10,56(s1)
  return vma;

bad:
  kfree(vma);
  return NULL;
}
    8020b534:	856a                	mv	a0,s10
    8020b536:	60e6                	ld	ra,88(sp)
    8020b538:	6446                	ld	s0,80(sp)
    8020b53a:	64a6                	ld	s1,72(sp)
    8020b53c:	6906                	ld	s2,64(sp)
    8020b53e:	79e2                	ld	s3,56(sp)
    8020b540:	7a42                	ld	s4,48(sp)
    8020b542:	7aa2                	ld	s5,40(sp)
    8020b544:	7b02                	ld	s6,32(sp)
    8020b546:	6be2                	ld	s7,24(sp)
    8020b548:	6c42                	ld	s8,16(sp)
    8020b54a:	6ca2                	ld	s9,8(sp)
    8020b54c:	6d02                	ld	s10,0(sp)
    8020b54e:	6125                	addi	sp,sp,96
    8020b550:	8082                	ret
    __debug_warn("[alloc_vma] proc is null\n");
    8020b552:	00008517          	auipc	a0,0x8
    8020b556:	a1e50513          	addi	a0,a0,-1506 # 80212f70 <digits+0x688>
    8020b55a:	ffffd097          	auipc	ra,0xffffd
    8020b55e:	562080e7          	jalr	1378(ra) # 80208abc <__debug_warn>
    return NULL;
    8020b562:	8d56                	mv	s10,s5
    8020b564:	bfc1                	j	8020b534 <alloc_vma+0xb0>
      __debug_warn("[alloc_vma] vma address overflow\n");
    8020b566:	00008517          	auipc	a0,0x8
    8020b56a:	a2a50513          	addi	a0,a0,-1494 # 80212f90 <digits+0x6a8>
    8020b56e:	ffffd097          	auipc	ra,0xffffd
    8020b572:	54e080e7          	jalr	1358(ra) # 80208abc <__debug_warn>
      return NULL;
    8020b576:	4d01                	li	s10,0
    8020b578:	bf75                	j	8020b534 <alloc_vma+0xb0>
    __debug_warn("[alloc_vma] vma kmalloc failed\n");
    8020b57a:	00008517          	auipc	a0,0x8
    8020b57e:	a3e50513          	addi	a0,a0,-1474 # 80212fb8 <digits+0x6d0>
    8020b582:	ffffd097          	auipc	ra,0xffffd
    8020b586:	53a080e7          	jalr	1338(ra) # 80208abc <__debug_warn>
    return NULL;
    8020b58a:	b76d                	j	8020b534 <alloc_vma+0xb0>
      if(uvmalloc(p->pagetable, start, end, perm) != 0)
    8020b58c:	86da                	mv	a3,s6
    8020b58e:	864a                	mv	a2,s2
    8020b590:	85ce                	mv	a1,s3
    8020b592:	060ab503          	ld	a0,96(s5) # 1060 <_entry-0x801fefa0>
    8020b596:	ffffe097          	auipc	ra,0xffffe
    8020b59a:	6be080e7          	jalr	1726(ra) # 80209c54 <uvmalloc>
    8020b59e:	dd31                	beqz	a0,8020b4fa <alloc_vma+0x76>
        __debug_warn("[alloc_vma] uvmalloc start = %p, end = %p fail\n", start, end);
    8020b5a0:	864a                	mv	a2,s2
    8020b5a2:	85ce                	mv	a1,s3
    8020b5a4:	00008517          	auipc	a0,0x8
    8020b5a8:	a3450513          	addi	a0,a0,-1484 # 80212fd8 <digits+0x6f0>
    8020b5ac:	ffffd097          	auipc	ra,0xffffd
    8020b5b0:	510080e7          	jalr	1296(ra) # 80208abc <__debug_warn>
        goto bad;
    8020b5b4:	a025                	j	8020b5dc <alloc_vma+0x158>
      if(mappages(p->pagetable, start, sz, pa, perm) != 0)
    8020b5b6:	875a                	mv	a4,s6
    8020b5b8:	86e2                	mv	a3,s8
    8020b5ba:	8652                	mv	a2,s4
    8020b5bc:	85ce                	mv	a1,s3
    8020b5be:	060ab503          	ld	a0,96(s5)
    8020b5c2:	ffffe097          	auipc	ra,0xffffe
    8020b5c6:	260080e7          	jalr	608(ra) # 80209822 <mappages>
    8020b5ca:	d905                	beqz	a0,8020b4fa <alloc_vma+0x76>
        __debug_warn("[alloc_vma] mappages failed\n");
    8020b5cc:	00008517          	auipc	a0,0x8
    8020b5d0:	a3c50513          	addi	a0,a0,-1476 # 80213008 <digits+0x720>
    8020b5d4:	ffffd097          	auipc	ra,0xffffd
    8020b5d8:	4e8080e7          	jalr	1256(ra) # 80208abc <__debug_warn>
  kfree(vma);
    8020b5dc:	856a                	mv	a0,s10
    8020b5de:	ffffe097          	auipc	ra,0xffffe
    8020b5e2:	074080e7          	jalr	116(ra) # 80209652 <kfree>
  return NULL;
    8020b5e6:	4d01                	li	s10,0
    8020b5e8:	b7b1                	j	8020b534 <alloc_vma+0xb0>

000000008020b5ea <type_locate_vma>:


struct vma* type_locate_vma(struct vma *head, enum segtype type)
{
    8020b5ea:	1141                	addi	sp,sp,-16
    8020b5ec:	e422                	sd	s0,8(sp)
    8020b5ee:	0800                	addi	s0,sp,16
    8020b5f0:	87aa                	mv	a5,a0
  struct vma *vma = NULL;

  if(type == LOAD)
    8020b5f2:	4705                	li	a4,1
    8020b5f4:	00e58f63          	beq	a1,a4,8020b612 <type_locate_vma+0x28>
      vma = vma->prev;
    }
  }
  else
  {
    vma = head->next;
    8020b5f8:	6128                	ld	a0,64(a0)
    while(vma != head)
    8020b5fa:	02a78a63          	beq	a5,a0,8020b62e <type_locate_vma+0x44>
    {
      if(vma->type == type)
    8020b5fe:	4118                	lw	a4,0(a0)
    8020b600:	00b70663          	beq	a4,a1,8020b60c <type_locate_vma+0x22>
      {
        return vma;
      }
      vma = vma->next;
    8020b604:	6128                	ld	a0,64(a0)
    while(vma != head)
    8020b606:	fea79ce3          	bne	a5,a0,8020b5fe <type_locate_vma+0x14>
    }
  }
 
  return NULL;
    8020b60a:	4501                	li	a0,0
}
    8020b60c:	6422                	ld	s0,8(sp)
    8020b60e:	0141                	addi	sp,sp,16
    8020b610:	8082                	ret
    vma = head->prev;
    8020b612:	7d08                	ld	a0,56(a0)
    while(vma != head)
    8020b614:	00a78b63          	beq	a5,a0,8020b62a <type_locate_vma+0x40>
      if(vma->type == type)
    8020b618:	4685                	li	a3,1
    8020b61a:	4118                	lw	a4,0(a0)
    8020b61c:	fed708e3          	beq	a4,a3,8020b60c <type_locate_vma+0x22>
      vma = vma->prev;
    8020b620:	7d08                	ld	a0,56(a0)
    while(vma != head)
    8020b622:	fea79ce3          	bne	a5,a0,8020b61a <type_locate_vma+0x30>
  return NULL;
    8020b626:	4501                	li	a0,0
    8020b628:	b7d5                	j	8020b60c <type_locate_vma+0x22>
    8020b62a:	4501                	li	a0,0
    8020b62c:	b7c5                	j	8020b60c <type_locate_vma+0x22>
    8020b62e:	4501                	li	a0,0
    8020b630:	bff1                	j	8020b60c <type_locate_vma+0x22>

000000008020b632 <addr_locate_vma>:

struct vma *addr_locate_vma(struct vma*head, uint64 addr)
{
    8020b632:	1141                	addi	sp,sp,-16
    8020b634:	e422                	sd	s0,8(sp)
    8020b636:	0800                	addi	s0,sp,16
    8020b638:	872a                	mv	a4,a0
  struct vma *vma = head->next;
    8020b63a:	6128                	ld	a0,64(a0)
  while(vma != head)
    8020b63c:	00a71763          	bne	a4,a0,8020b64a <addr_locate_vma+0x18>
    {
      return vma;
    }
    vma = vma->next;
  }
  return NULL;
    8020b640:	4501                	li	a0,0
    8020b642:	a821                	j	8020b65a <addr_locate_vma+0x28>
    vma = vma->next;
    8020b644:	6128                	ld	a0,64(a0)
  while(vma != head)
    8020b646:	00a70963          	beq	a4,a0,8020b658 <addr_locate_vma+0x26>
    if(vma->addr <= addr && addr < vma->end)
    8020b64a:	651c                	ld	a5,8(a0)
    8020b64c:	fef5ece3          	bltu	a1,a5,8020b644 <addr_locate_vma+0x12>
    8020b650:	6d1c                	ld	a5,24(a0)
    8020b652:	fef5f9e3          	bgeu	a1,a5,8020b644 <addr_locate_vma+0x12>
    8020b656:	a011                	j	8020b65a <addr_locate_vma+0x28>
  return NULL;
    8020b658:	4501                	li	a0,0
}
    8020b65a:	6422                	ld	s0,8(sp)
    8020b65c:	0141                	addi	sp,sp,16
    8020b65e:	8082                	ret

000000008020b660 <part_locate_vma>:

struct vma *part_locate_vma(struct vma *head, uint64 start, uint64 end)
{
    8020b660:	7179                	addi	sp,sp,-48
    8020b662:	f406                	sd	ra,40(sp)
    8020b664:	f022                	sd	s0,32(sp)
    8020b666:	ec26                	sd	s1,24(sp)
    8020b668:	e84a                	sd	s2,16(sp)
    8020b66a:	e44e                	sd	s3,8(sp)
    8020b66c:	e052                	sd	s4,0(sp)
    8020b66e:	1800                	addi	s0,sp,48
    8020b670:	89aa                	mv	s3,a0
    8020b672:	8a2e                	mv	s4,a1
    8020b674:	8932                	mv	s2,a2
  struct vma *a = addr_locate_vma(head, start);
    8020b676:	00000097          	auipc	ra,0x0
    8020b67a:	fbc080e7          	jalr	-68(ra) # 8020b632 <addr_locate_vma>
    8020b67e:	84aa                	mv	s1,a0
  struct vma *b = addr_locate_vma(head, end-1);
    8020b680:	fff90593          	addi	a1,s2,-1 # fff <_entry-0x801ff001>
    8020b684:	854e                	mv	a0,s3
    8020b686:	00000097          	auipc	ra,0x0
    8020b68a:	fac080e7          	jalr	-84(ra) # 8020b632 <addr_locate_vma>
  if(!a || !b || a != b)
    8020b68e:	cc81                	beqz	s1,8020b6a6 <part_locate_vma+0x46>
    8020b690:	c919                	beqz	a0,8020b6a6 <part_locate_vma+0x46>
    8020b692:	00a49a63          	bne	s1,a0,8020b6a6 <part_locate_vma+0x46>
  {
    __debug_warn("[part_locate_vma] start = %p, end = %p, not found\n", start, end);
    return NULL;
  }
  return a;
}
    8020b696:	70a2                	ld	ra,40(sp)
    8020b698:	7402                	ld	s0,32(sp)
    8020b69a:	64e2                	ld	s1,24(sp)
    8020b69c:	6942                	ld	s2,16(sp)
    8020b69e:	69a2                	ld	s3,8(sp)
    8020b6a0:	6a02                	ld	s4,0(sp)
    8020b6a2:	6145                	addi	sp,sp,48
    8020b6a4:	8082                	ret
    __debug_warn("[part_locate_vma] start = %p, end = %p, not found\n", start, end);
    8020b6a6:	864a                	mv	a2,s2
    8020b6a8:	85d2                	mv	a1,s4
    8020b6aa:	00008517          	auipc	a0,0x8
    8020b6ae:	97e50513          	addi	a0,a0,-1666 # 80213028 <digits+0x740>
    8020b6b2:	ffffd097          	auipc	ra,0xffffd
    8020b6b6:	40a080e7          	jalr	1034(ra) # 80208abc <__debug_warn>
    return NULL;
    8020b6ba:	4501                	li	a0,0
    8020b6bc:	bfe9                	j	8020b696 <part_locate_vma+0x36>

000000008020b6be <alloc_mmap_vma>:

struct vma* alloc_mmap_vma(struct proc *p, int flags, uint64 addr, uint64 sz, int perm, int fd ,uint64 f_off)
{
    8020b6be:	715d                	addi	sp,sp,-80
    8020b6c0:	e486                	sd	ra,72(sp)
    8020b6c2:	e0a2                	sd	s0,64(sp)
    8020b6c4:	fc26                	sd	s1,56(sp)
    8020b6c6:	f84a                	sd	s2,48(sp)
    8020b6c8:	f44e                	sd	s3,40(sp)
    8020b6ca:	f052                	sd	s4,32(sp)
    8020b6cc:	ec56                	sd	s5,24(sp)
    8020b6ce:	e85a                	sd	s6,16(sp)
    8020b6d0:	e45e                	sd	s7,8(sp)
    8020b6d2:	0880                	addi	s0,sp,80
    8020b6d4:	892a                	mv	s2,a0
    8020b6d6:	89ae                	mv	s3,a1
    8020b6d8:	84b2                	mv	s1,a2
    8020b6da:	8b36                	mv	s6,a3
    8020b6dc:	8bba                	mv	s7,a4
    8020b6de:	8abe                	mv	s5,a5
    8020b6e0:	8a42                	mv	s4,a6
  struct vma *vma = NULL;

  struct vma *mvma = type_locate_vma(p->vma, MMAP);
    8020b6e2:	4599                	li	a1,6
    8020b6e4:	17053503          	ld	a0,368(a0)
    8020b6e8:	00000097          	auipc	ra,0x0
    8020b6ec:	f02080e7          	jalr	-254(ra) # 8020b5ea <type_locate_vma>
  if(addr == 0)
    8020b6f0:	e491                	bnez	s1,8020b6fc <alloc_mmap_vma+0x3e>
  {
    addr = PGROUNDDOWN(mvma->addr - sz);
    8020b6f2:	6504                	ld	s1,8(a0)
    8020b6f4:	416484b3          	sub	s1,s1,s6
    8020b6f8:	767d                	lui	a2,0xfffff
    8020b6fa:	8cf1                	and	s1,s1,a2
    // __debug_info("[alloc_mmap_vma] addr = %p\n", addr);
  }

  vma = alloc_vma(p, MMAP, addr, sz, perm, 1, NULL);
    8020b6fc:	4801                	li	a6,0
    8020b6fe:	4785                	li	a5,1
    8020b700:	875e                	mv	a4,s7
    8020b702:	86da                	mv	a3,s6
    8020b704:	8626                	mv	a2,s1
    8020b706:	4599                	li	a1,6
    8020b708:	854a                	mv	a0,s2
    8020b70a:	00000097          	auipc	ra,0x0
    8020b70e:	d7a080e7          	jalr	-646(ra) # 8020b484 <alloc_vma>
    8020b712:	84aa                	mv	s1,a0
  if(vma == NULL)
    8020b714:	c11d                	beqz	a0,8020b73a <alloc_mmap_vma+0x7c>
  {
    __debug_warn("[alloc_mmap_vma] alloc failed\n");
    return NULL;
  }

  vma->fd = fd;
    8020b716:	03552623          	sw	s5,44(a0)
  vma->f_off = f_off;
    8020b71a:	03453823          	sd	s4,48(a0)
  vma->flags = flags;
    8020b71e:	03352423          	sw	s3,40(a0)
  return vma;
}
    8020b722:	8526                	mv	a0,s1
    8020b724:	60a6                	ld	ra,72(sp)
    8020b726:	6406                	ld	s0,64(sp)
    8020b728:	74e2                	ld	s1,56(sp)
    8020b72a:	7942                	ld	s2,48(sp)
    8020b72c:	79a2                	ld	s3,40(sp)
    8020b72e:	7a02                	ld	s4,32(sp)
    8020b730:	6ae2                	ld	s5,24(sp)
    8020b732:	6b42                	ld	s6,16(sp)
    8020b734:	6ba2                	ld	s7,8(sp)
    8020b736:	6161                	addi	sp,sp,80
    8020b738:	8082                	ret
    __debug_warn("[alloc_mmap_vma] alloc failed\n");
    8020b73a:	00008517          	auipc	a0,0x8
    8020b73e:	92650513          	addi	a0,a0,-1754 # 80213060 <digits+0x778>
    8020b742:	ffffd097          	auipc	ra,0xffffd
    8020b746:	37a080e7          	jalr	890(ra) # 80208abc <__debug_warn>
    return NULL;
    8020b74a:	bfe1                	j	8020b722 <alloc_mmap_vma+0x64>

000000008020b74c <alloc_stack_vma>:

struct vma *alloc_stack_vma(struct proc *p, uint64 addr, int perm)
{
    8020b74c:	7179                	addi	sp,sp,-48
    8020b74e:	f406                	sd	ra,40(sp)
    8020b750:	f022                	sd	s0,32(sp)
    8020b752:	ec26                	sd	s1,24(sp)
    8020b754:	e84a                	sd	s2,16(sp)
    8020b756:	e44e                	sd	s3,8(sp)
    8020b758:	e052                	sd	s4,0(sp)
    8020b75a:	1800                	addi	s0,sp,48
    8020b75c:	89aa                	mv	s3,a0
    8020b75e:	84ae                	mv	s1,a1
    8020b760:	8a32                	mv	s4,a2
  struct vma *vma = type_locate_vma(p->vma, STACK);
    8020b762:	459d                	li	a1,7
    8020b764:	17053503          	ld	a0,368(a0)
    8020b768:	00000097          	auipc	ra,0x0
    8020b76c:	e82080e7          	jalr	-382(ra) # 8020b5ea <type_locate_vma>
  uint64 start = PGROUNDDOWN(addr);
    8020b770:	75fd                	lui	a1,0xfffff
    8020b772:	8de5                	and	a1,a1,s1
  uint64 end = vma->addr;
    8020b774:	6510                	ld	a2,8(a0)
  vma->addr = start;
    8020b776:	e50c                	sd	a1,8(a0)
  if(start < USER_STACK_TOP)
    8020b778:	6ffff7b7          	lui	a5,0x6ffff
    8020b77c:	02f5e863          	bltu	a1,a5,8020b7ac <alloc_stack_vma+0x60>
    8020b780:	892a                	mv	s2,a0
  {
    __debug_warn("[alloc_stack_vma] stack address illegal\n");
    return NULL;
  }
  vma->sz += (end - start);
    8020b782:	691c                	ld	a5,16(a0)
    8020b784:	97b2                	add	a5,a5,a2
    8020b786:	8f8d                	sub	a5,a5,a1
    8020b788:	e91c                	sd	a5,16(a0)
  if(uvmalloc(p->pagetable, start, end, perm) != 0)
    8020b78a:	86d2                	mv	a3,s4
    8020b78c:	0609b503          	ld	a0,96(s3)
    8020b790:	ffffe097          	auipc	ra,0xffffe
    8020b794:	4c4080e7          	jalr	1220(ra) # 80209c54 <uvmalloc>
    8020b798:	e505                	bnez	a0,8020b7c0 <alloc_stack_vma+0x74>
  {
    __debug_warn("[alloc_stack_vma] stack vma alloc fail\n");
    return NULL;
  }
  return vma;
}
    8020b79a:	854a                	mv	a0,s2
    8020b79c:	70a2                	ld	ra,40(sp)
    8020b79e:	7402                	ld	s0,32(sp)
    8020b7a0:	64e2                	ld	s1,24(sp)
    8020b7a2:	6942                	ld	s2,16(sp)
    8020b7a4:	69a2                	ld	s3,8(sp)
    8020b7a6:	6a02                	ld	s4,0(sp)
    8020b7a8:	6145                	addi	sp,sp,48
    8020b7aa:	8082                	ret
    __debug_warn("[alloc_stack_vma] stack address illegal\n");
    8020b7ac:	00008517          	auipc	a0,0x8
    8020b7b0:	8d450513          	addi	a0,a0,-1836 # 80213080 <digits+0x798>
    8020b7b4:	ffffd097          	auipc	ra,0xffffd
    8020b7b8:	308080e7          	jalr	776(ra) # 80208abc <__debug_warn>
    return NULL;
    8020b7bc:	4901                	li	s2,0
    8020b7be:	bff1                	j	8020b79a <alloc_stack_vma+0x4e>
    __debug_warn("[alloc_stack_vma] stack vma alloc fail\n");
    8020b7c0:	00008517          	auipc	a0,0x8
    8020b7c4:	8f050513          	addi	a0,a0,-1808 # 802130b0 <digits+0x7c8>
    8020b7c8:	ffffd097          	auipc	ra,0xffffd
    8020b7cc:	2f4080e7          	jalr	756(ra) # 80208abc <__debug_warn>
    return NULL;
    8020b7d0:	4901                	li	s2,0
    8020b7d2:	b7e1                	j	8020b79a <alloc_stack_vma+0x4e>

000000008020b7d4 <alloc_addr_heap_vma>:
 
struct vma *alloc_addr_heap_vma(struct proc *p, uint64 addr, int perm)
{
    8020b7d4:	7139                	addi	sp,sp,-64
    8020b7d6:	fc06                	sd	ra,56(sp)
    8020b7d8:	f822                	sd	s0,48(sp)
    8020b7da:	f426                	sd	s1,40(sp)
    8020b7dc:	f04a                	sd	s2,32(sp)
    8020b7de:	ec4e                	sd	s3,24(sp)
    8020b7e0:	e852                	sd	s4,16(sp)
    8020b7e2:	e456                	sd	s5,8(sp)
    8020b7e4:	0080                	addi	s0,sp,64
    8020b7e6:	89aa                	mv	s3,a0
    8020b7e8:	84ae                	mv	s1,a1
    8020b7ea:	8a32                	mv	s4,a2
  struct vma *vma = type_locate_vma(p->vma, HEAP);
    8020b7ec:	17053a83          	ld	s5,368(a0)
    8020b7f0:	4595                	li	a1,5
    8020b7f2:	8556                	mv	a0,s5
    8020b7f4:	00000097          	auipc	ra,0x0
    8020b7f8:	df6080e7          	jalr	-522(ra) # 8020b5ea <type_locate_vma>
    8020b7fc:	892a                	mv	s2,a0
  struct vma *lvma = type_locate_vma(p->vma, LOAD);
    8020b7fe:	4585                	li	a1,1
    8020b800:	8556                	mv	a0,s5
    8020b802:	00000097          	auipc	ra,0x0
    8020b806:	de8080e7          	jalr	-536(ra) # 8020b5ea <type_locate_vma>
  addr = PGROUNDUP(addr);
    8020b80a:	6585                	lui	a1,0x1
    8020b80c:	15fd                	addi	a1,a1,-1
    8020b80e:	94ae                	add	s1,s1,a1
    8020b810:	75fd                	lui	a1,0xfffff
    8020b812:	8ced                	and	s1,s1,a1
  if(vma == NULL)
    8020b814:	04090363          	beqz	s2,8020b85a <alloc_addr_heap_vma+0x86>
    vma = alloc_vma(p, HEAP, start, sz, perm, 1, NULL);
    return vma;
  }
  else
  {
    if(lvma->end > addr)
    8020b818:	6d1c                	ld	a5,24(a0)
    8020b81a:	06f4e163          	bltu	s1,a5,8020b87c <alloc_addr_heap_vma+0xa8>
    {
      __debug_warn("[alloc_addr_heap_vma] addr %p illegal\n", addr);
      return vma;
    }
    if(vma->end > addr)
    8020b81e:	01893583          	ld	a1,24(s2)
    8020b822:	08b4f063          	bgeu	s1,a1,8020b8a2 <alloc_addr_heap_vma+0xce>
    {
      if(uvmdealloc(p->pagetable, addr, vma->end) != 0)
    8020b826:	862e                	mv	a2,a1
    8020b828:	85a6                	mv	a1,s1
    8020b82a:	0609b503          	ld	a0,96(s3)
    8020b82e:	ffffe097          	auipc	ra,0xffffe
    8020b832:	3e2080e7          	jalr	994(ra) # 80209c10 <uvmdealloc>
    8020b836:	ed29                	bnez	a0,8020b890 <alloc_addr_heap_vma+0xbc>
      {
        __debug_warn("[alloc_addr_heap_vma] uvmdealloc fail\n");
        return vma;
      }
      vma->end = addr;
    8020b838:	00993c23          	sd	s1,24(s2)
      vma->sz = (vma->end - vma->addr);
    8020b83c:	00893783          	ld	a5,8(s2)
    8020b840:	8c9d                	sub	s1,s1,a5
    8020b842:	00993823          	sd	s1,16(s2)
    }
    vma->end = addr;
    vma->sz = (vma->end - vma->addr);
    return vma;
  }
}
    8020b846:	854a                	mv	a0,s2
    8020b848:	70e2                	ld	ra,56(sp)
    8020b84a:	7442                	ld	s0,48(sp)
    8020b84c:	74a2                	ld	s1,40(sp)
    8020b84e:	7902                	ld	s2,32(sp)
    8020b850:	69e2                	ld	s3,24(sp)
    8020b852:	6a42                	ld	s4,16(sp)
    8020b854:	6aa2                	ld	s5,8(sp)
    8020b856:	6121                	addi	sp,sp,64
    8020b858:	8082                	ret
    uint64 start = lvma->end;
    8020b85a:	6d10                	ld	a2,24(a0)
    uint64 sz = 0;
    8020b85c:	4681                	li	a3,0
    if(start < addr)sz = addr - start ;
    8020b85e:	00967463          	bgeu	a2,s1,8020b866 <alloc_addr_heap_vma+0x92>
    8020b862:	40c486b3          	sub	a3,s1,a2
    vma = alloc_vma(p, HEAP, start, sz, perm, 1, NULL);
    8020b866:	4801                	li	a6,0
    8020b868:	4785                	li	a5,1
    8020b86a:	8752                	mv	a4,s4
    8020b86c:	4595                	li	a1,5
    8020b86e:	854e                	mv	a0,s3
    8020b870:	00000097          	auipc	ra,0x0
    8020b874:	c14080e7          	jalr	-1004(ra) # 8020b484 <alloc_vma>
    8020b878:	892a                	mv	s2,a0
    return vma;
    8020b87a:	b7f1                	j	8020b846 <alloc_addr_heap_vma+0x72>
      __debug_warn("[alloc_addr_heap_vma] addr %p illegal\n", addr);
    8020b87c:	85a6                	mv	a1,s1
    8020b87e:	00008517          	auipc	a0,0x8
    8020b882:	85a50513          	addi	a0,a0,-1958 # 802130d8 <digits+0x7f0>
    8020b886:	ffffd097          	auipc	ra,0xffffd
    8020b88a:	236080e7          	jalr	566(ra) # 80208abc <__debug_warn>
      return vma;
    8020b88e:	bf65                	j	8020b846 <alloc_addr_heap_vma+0x72>
        __debug_warn("[alloc_addr_heap_vma] uvmdealloc fail\n");
    8020b890:	00008517          	auipc	a0,0x8
    8020b894:	87050513          	addi	a0,a0,-1936 # 80213100 <digits+0x818>
    8020b898:	ffffd097          	auipc	ra,0xffffd
    8020b89c:	224080e7          	jalr	548(ra) # 80208abc <__debug_warn>
        return vma;
    8020b8a0:	b75d                	j	8020b846 <alloc_addr_heap_vma+0x72>
    if(uvmalloc(p->pagetable, vma->end, addr, perm) != 0)
    8020b8a2:	86d2                	mv	a3,s4
    8020b8a4:	8626                	mv	a2,s1
    8020b8a6:	0609b503          	ld	a0,96(s3)
    8020b8aa:	ffffe097          	auipc	ra,0xffffe
    8020b8ae:	3aa080e7          	jalr	938(ra) # 80209c54 <uvmalloc>
    8020b8b2:	e909                	bnez	a0,8020b8c4 <alloc_addr_heap_vma+0xf0>
    vma->end = addr;
    8020b8b4:	00993c23          	sd	s1,24(s2)
    vma->sz = (vma->end - vma->addr);
    8020b8b8:	00893783          	ld	a5,8(s2)
    8020b8bc:	8c9d                	sub	s1,s1,a5
    8020b8be:	00993823          	sd	s1,16(s2)
    return vma;
    8020b8c2:	b751                	j	8020b846 <alloc_addr_heap_vma+0x72>
      __debug_warn("[alloc_addr_heap_vma] uvmalloc fail\n");
    8020b8c4:	00008517          	auipc	a0,0x8
    8020b8c8:	86450513          	addi	a0,a0,-1948 # 80213128 <digits+0x840>
    8020b8cc:	ffffd097          	auipc	ra,0xffffd
    8020b8d0:	1f0080e7          	jalr	496(ra) # 80208abc <__debug_warn>
      return vma;
    8020b8d4:	bf8d                	j	8020b846 <alloc_addr_heap_vma+0x72>

000000008020b8d6 <alloc_sz_heap_vma>:

struct vma *alloc_sz_heap_vma(struct proc *p, uint64 sz, int perm)
{
    8020b8d6:	7139                	addi	sp,sp,-64
    8020b8d8:	fc06                	sd	ra,56(sp)
    8020b8da:	f822                	sd	s0,48(sp)
    8020b8dc:	f426                	sd	s1,40(sp)
    8020b8de:	f04a                	sd	s2,32(sp)
    8020b8e0:	ec4e                	sd	s3,24(sp)
    8020b8e2:	e852                	sd	s4,16(sp)
    8020b8e4:	e456                	sd	s5,8(sp)
    8020b8e6:	0080                	addi	s0,sp,64
    8020b8e8:	8aaa                	mv	s5,a0
    8020b8ea:	84ae                	mv	s1,a1
    8020b8ec:	89b2                	mv	s3,a2
  struct vma *vma = type_locate_vma(p->vma, HEAP);
    8020b8ee:	17053903          	ld	s2,368(a0)
    8020b8f2:	4595                	li	a1,5
    8020b8f4:	854a                	mv	a0,s2
    8020b8f6:	00000097          	auipc	ra,0x0
    8020b8fa:	cf4080e7          	jalr	-780(ra) # 8020b5ea <type_locate_vma>
    8020b8fe:	8a2a                	mv	s4,a0
  struct vma *lvma = type_locate_vma(p->vma, LOAD);
    8020b900:	4585                	li	a1,1
    8020b902:	854a                	mv	a0,s2
    8020b904:	00000097          	auipc	ra,0x0
    8020b908:	ce6080e7          	jalr	-794(ra) # 8020b5ea <type_locate_vma>
  if(vma == NULL)
    8020b90c:	060a0263          	beqz	s4,8020b970 <alloc_sz_heap_vma+0x9a>
    }
    vma = alloc_vma(p, HEAP, start, sz, perm, 1, NULL);
    return vma;
  }
  
  if(sz != 0)
    8020b910:	c4b1                	beqz	s1,8020b95c <alloc_sz_heap_vma+0x86>
  {
    if(vma->end + sz < lvma->end)
    8020b912:	018a3583          	ld	a1,24(s4)
    8020b916:	009587b3          	add	a5,a1,s1
    8020b91a:	6d18                	ld	a4,24(a0)
    8020b91c:	08e7e463          	bltu	a5,a4,8020b9a4 <alloc_sz_heap_vma+0xce>
    {
      __debug_warn("[alloc_sz_heap_vma] addr illegal\n");
      return NULL;
    }
    
    if(vma->end + sz > vma->end)
    8020b920:	0af5f663          	bgeu	a1,a5,8020b9cc <alloc_sz_heap_vma+0xf6>
    {
      if(uvmalloc(p->pagetable, vma->end, PGROUNDUP(vma->end + sz), perm) != 0)
    8020b924:	6605                	lui	a2,0x1
    8020b926:	167d                	addi	a2,a2,-1
    8020b928:	97b2                	add	a5,a5,a2
    8020b92a:	86ce                	mv	a3,s3
    8020b92c:	767d                	lui	a2,0xfffff
    8020b92e:	8e7d                	and	a2,a2,a5
    8020b930:	060ab503          	ld	a0,96(s5)
    8020b934:	ffffe097          	auipc	ra,0xffffe
    8020b938:	320080e7          	jalr	800(ra) # 80209c54 <uvmalloc>
    8020b93c:	ed35                	bnez	a0,8020b9b8 <alloc_sz_heap_vma+0xe2>
      {
        __debug_warn("[alloc_addr_heap_vma] uvmdealloc fail\n");
        return NULL;
      }
    }
    vma->end = PGROUNDUP(vma->end + sz);
    8020b93e:	6585                	lui	a1,0x1
    8020b940:	15fd                	addi	a1,a1,-1
    8020b942:	94ae                	add	s1,s1,a1
    8020b944:	018a3583          	ld	a1,24(s4)
    8020b948:	94ae                	add	s1,s1,a1
    8020b94a:	77fd                	lui	a5,0xfffff
    8020b94c:	8cfd                	and	s1,s1,a5
    8020b94e:	009a3c23          	sd	s1,24(s4)
    vma->sz = vma->end - vma->addr;
    8020b952:	008a3783          	ld	a5,8(s4)
    8020b956:	8c9d                	sub	s1,s1,a5
    8020b958:	009a3823          	sd	s1,16(s4)
  }
  return vma;
}
    8020b95c:	8552                	mv	a0,s4
    8020b95e:	70e2                	ld	ra,56(sp)
    8020b960:	7442                	ld	s0,48(sp)
    8020b962:	74a2                	ld	s1,40(sp)
    8020b964:	7902                	ld	s2,32(sp)
    8020b966:	69e2                	ld	s3,24(sp)
    8020b968:	6a42                	ld	s4,16(sp)
    8020b96a:	6aa2                	ld	s5,8(sp)
    8020b96c:	6121                	addi	sp,sp,64
    8020b96e:	8082                	ret
    uint64 start = lvma->end;
    8020b970:	6d10                	ld	a2,24(a0)
    if(start + sz < start)
    8020b972:	00c487b3          	add	a5,s1,a2
    8020b976:	00c7ee63          	bltu	a5,a2,8020b992 <alloc_sz_heap_vma+0xbc>
    vma = alloc_vma(p, HEAP, start, sz, perm, 1, NULL);
    8020b97a:	4801                	li	a6,0
    8020b97c:	4785                	li	a5,1
    8020b97e:	874e                	mv	a4,s3
    8020b980:	86a6                	mv	a3,s1
    8020b982:	4595                	li	a1,5
    8020b984:	8556                	mv	a0,s5
    8020b986:	00000097          	auipc	ra,0x0
    8020b98a:	afe080e7          	jalr	-1282(ra) # 8020b484 <alloc_vma>
    8020b98e:	8a2a                	mv	s4,a0
    return vma;
    8020b990:	b7f1                	j	8020b95c <alloc_sz_heap_vma+0x86>
      __debug_warn("[alloc_sz_heap_vma] addr illegal\n");
    8020b992:	00007517          	auipc	a0,0x7
    8020b996:	7be50513          	addi	a0,a0,1982 # 80213150 <digits+0x868>
    8020b99a:	ffffd097          	auipc	ra,0xffffd
    8020b99e:	122080e7          	jalr	290(ra) # 80208abc <__debug_warn>
      return NULL;
    8020b9a2:	bf6d                	j	8020b95c <alloc_sz_heap_vma+0x86>
      __debug_warn("[alloc_sz_heap_vma] addr illegal\n");
    8020b9a4:	00007517          	auipc	a0,0x7
    8020b9a8:	7ac50513          	addi	a0,a0,1964 # 80213150 <digits+0x868>
    8020b9ac:	ffffd097          	auipc	ra,0xffffd
    8020b9b0:	110080e7          	jalr	272(ra) # 80208abc <__debug_warn>
      return NULL;
    8020b9b4:	4a01                	li	s4,0
    8020b9b6:	b75d                	j	8020b95c <alloc_sz_heap_vma+0x86>
        __debug_warn("[alloc_addr_heap_vma] uvmalloc fail\n");
    8020b9b8:	00007517          	auipc	a0,0x7
    8020b9bc:	77050513          	addi	a0,a0,1904 # 80213128 <digits+0x840>
    8020b9c0:	ffffd097          	auipc	ra,0xffffd
    8020b9c4:	0fc080e7          	jalr	252(ra) # 80208abc <__debug_warn>
        return NULL;
    8020b9c8:	4a01                	li	s4,0
    8020b9ca:	bf49                	j	8020b95c <alloc_sz_heap_vma+0x86>
      if(uvmdealloc(p->pagetable, PGROUNDDOWN(vma->end + sz), vma->end) != 0)
    8020b9cc:	862e                	mv	a2,a1
    8020b9ce:	75fd                	lui	a1,0xfffff
    8020b9d0:	8dfd                	and	a1,a1,a5
    8020b9d2:	060ab503          	ld	a0,96(s5)
    8020b9d6:	ffffe097          	auipc	ra,0xffffe
    8020b9da:	23a080e7          	jalr	570(ra) # 80209c10 <uvmdealloc>
    8020b9de:	d125                	beqz	a0,8020b93e <alloc_sz_heap_vma+0x68>
        __debug_warn("[alloc_addr_heap_vma] uvmdealloc fail\n");
    8020b9e0:	00007517          	auipc	a0,0x7
    8020b9e4:	72050513          	addi	a0,a0,1824 # 80213100 <digits+0x818>
    8020b9e8:	ffffd097          	auipc	ra,0xffffd
    8020b9ec:	0d4080e7          	jalr	212(ra) # 80208abc <__debug_warn>
        return NULL;
    8020b9f0:	4a01                	li	s4,0
    8020b9f2:	b7ad                	j	8020b95c <alloc_sz_heap_vma+0x86>

000000008020b9f4 <alloc_load_vma>:

struct vma *alloc_load_vma(struct proc *p, uint64 addr, uint64 sz, int perm)
{
    8020b9f4:	1141                	addi	sp,sp,-16
    8020b9f6:	e406                	sd	ra,8(sp)
    8020b9f8:	e022                	sd	s0,0(sp)
    8020b9fa:	0800                	addi	s0,sp,16
    8020b9fc:	8736                	mv	a4,a3
  return alloc_vma(p, LOAD, addr, sz, perm, 1, NULL);
    8020b9fe:	4801                	li	a6,0
    8020ba00:	4785                	li	a5,1
    8020ba02:	86b2                	mv	a3,a2
    8020ba04:	862e                	mv	a2,a1
    8020ba06:	4585                	li	a1,1
    8020ba08:	00000097          	auipc	ra,0x0
    8020ba0c:	a7c080e7          	jalr	-1412(ra) # 8020b484 <alloc_vma>
}
    8020ba10:	60a2                	ld	ra,8(sp)
    8020ba12:	6402                	ld	s0,0(sp)
    8020ba14:	0141                	addi	sp,sp,16
    8020ba16:	8082                	ret

000000008020ba18 <free_vma_list>:

int free_vma_list(struct proc *p)
{
    8020ba18:	715d                	addi	sp,sp,-80
    8020ba1a:	e486                	sd	ra,72(sp)
    8020ba1c:	e0a2                	sd	s0,64(sp)
    8020ba1e:	fc26                	sd	s1,56(sp)
    8020ba20:	f84a                	sd	s2,48(sp)
    8020ba22:	f44e                	sd	s3,40(sp)
    8020ba24:	f052                	sd	s4,32(sp)
    8020ba26:	ec56                	sd	s5,24(sp)
    8020ba28:	e85a                	sd	s6,16(sp)
    8020ba2a:	e45e                	sd	s7,8(sp)
    8020ba2c:	0880                	addi	s0,sp,80
  struct vma *vma_head = p->vma;
    8020ba2e:	17053b83          	ld	s7,368(a0)
  if(vma_head == NULL)
    8020ba32:	080b8263          	beqz	s7,8020bab6 <free_vma_list+0x9e>
    8020ba36:	8a2a                	mv	s4,a0
  {
    return 1;
  }
  struct vma *vma = vma_head->next;
    8020ba38:	040bb983          	ld	s3,64(s7) # fffffffffffff040 <kernel_end+0xffffffff7f592040>
  
  while(vma != vma_head)
    8020ba3c:	073b8663          	beq	s7,s3,8020baa8 <free_vma_list+0x90>
    for(a = vma->addr; a < vma->end; a += PGSIZE){
      if((pte = walk(p->pagetable, a, 0)) == 0)
        continue;
      if((*pte & PTE_V) == 0)
        continue;
      if(PTE_FLAGS(*pte) == PTE_V)
    8020ba40:	4b05                	li	s6,1
    for(a = vma->addr; a < vma->end; a += PGSIZE){
    8020ba42:	6a85                	lui	s5,0x1
    8020ba44:	a899                	j	8020ba9a <free_vma_list+0x82>
        continue;
      uint64 pa = PTE2PA(*pte);
    8020ba46:	8129                	srli	a0,a0,0xa
      //__debug_warn("[free single vma]free:%p\n",pa);
      freepage((void*)pa);
    8020ba48:	0532                	slli	a0,a0,0xc
    8020ba4a:	ffffd097          	auipc	ra,0xffffd
    8020ba4e:	7d6080e7          	jalr	2006(ra) # 80209220 <_freepage>
      //__debug_warn("[free vma list]free end\n");
      *pte = 0;
    8020ba52:	0004b023          	sd	zero,0(s1)
    for(a = vma->addr; a < vma->end; a += PGSIZE){
    8020ba56:	9956                	add	s2,s2,s5
    8020ba58:	0189b783          	ld	a5,24(s3)
    8020ba5c:	02f97563          	bgeu	s2,a5,8020ba86 <free_vma_list+0x6e>
      if((pte = walk(p->pagetable, a, 0)) == 0)
    8020ba60:	4601                	li	a2,0
    8020ba62:	85ca                	mv	a1,s2
    8020ba64:	060a3503          	ld	a0,96(s4)
    8020ba68:	ffffe097          	auipc	ra,0xffffe
    8020ba6c:	d0a080e7          	jalr	-758(ra) # 80209772 <walk>
    8020ba70:	84aa                	mv	s1,a0
    8020ba72:	d175                	beqz	a0,8020ba56 <free_vma_list+0x3e>
      if((*pte & PTE_V) == 0)
    8020ba74:	6108                	ld	a0,0(a0)
    8020ba76:	00157793          	andi	a5,a0,1
    8020ba7a:	dff1                	beqz	a5,8020ba56 <free_vma_list+0x3e>
      if(PTE_FLAGS(*pte) == PTE_V)
    8020ba7c:	3ff57793          	andi	a5,a0,1023
    8020ba80:	fd6793e3          	bne	a5,s6,8020ba46 <free_vma_list+0x2e>
    8020ba84:	bfc9                	j	8020ba56 <free_vma_list+0x3e>
    }
    vma = vma->next;
    8020ba86:	0409b983          	ld	s3,64(s3)
    kfree(vma->prev);
    8020ba8a:	0389b503          	ld	a0,56(s3)
    8020ba8e:	ffffe097          	auipc	ra,0xffffe
    8020ba92:	bc4080e7          	jalr	-1084(ra) # 80209652 <kfree>
  while(vma != vma_head)
    8020ba96:	013b8963          	beq	s7,s3,8020baa8 <free_vma_list+0x90>
    for(a = vma->addr; a < vma->end; a += PGSIZE){
    8020ba9a:	0089b903          	ld	s2,8(s3)
    8020ba9e:	0189b783          	ld	a5,24(s3)
    8020baa2:	faf96fe3          	bltu	s2,a5,8020ba60 <free_vma_list+0x48>
    8020baa6:	b7c5                	j	8020ba86 <free_vma_list+0x6e>
  }
  kfree(vma);
    8020baa8:	854e                	mv	a0,s3
    8020baaa:	ffffe097          	auipc	ra,0xffffe
    8020baae:	ba8080e7          	jalr	-1112(ra) # 80209652 <kfree>
  p->vma = NULL;
    8020bab2:	160a3823          	sd	zero,368(s4)
  return 1;
}
    8020bab6:	4505                	li	a0,1
    8020bab8:	60a6                	ld	ra,72(sp)
    8020baba:	6406                	ld	s0,64(sp)
    8020babc:	74e2                	ld	s1,56(sp)
    8020babe:	7942                	ld	s2,48(sp)
    8020bac0:	79a2                	ld	s3,40(sp)
    8020bac2:	7a02                	ld	s4,32(sp)
    8020bac4:	6ae2                	ld	s5,24(sp)
    8020bac6:	6b42                	ld	s6,16(sp)
    8020bac8:	6ba2                	ld	s7,8(sp)
    8020baca:	6161                	addi	sp,sp,80
    8020bacc:	8082                	ret

000000008020bace <vma_list_init>:
{
    8020bace:	1101                	addi	sp,sp,-32
    8020bad0:	ec06                	sd	ra,24(sp)
    8020bad2:	e822                	sd	s0,16(sp)
    8020bad4:	e426                	sd	s1,8(sp)
    8020bad6:	e04a                	sd	s2,0(sp)
    8020bad8:	1000                	addi	s0,sp,32
    8020bada:	892a                	mv	s2,a0
  if(p == NULL)
    8020badc:	cd35                	beqz	a0,8020bb58 <vma_list_init+0x8a>
  struct vma *vma = (struct vma*)kmalloc(sizeof(struct vma));
    8020bade:	04800513          	li	a0,72
    8020bae2:	ffffe097          	auipc	ra,0xffffe
    8020bae6:	926080e7          	jalr	-1754(ra) # 80209408 <kmalloc>
    8020baea:	84aa                	mv	s1,a0
  if(vma == NULL)
    8020baec:	c141                	beqz	a0,8020bb6c <vma_list_init+0x9e>
  vma->next = vma->prev = vma;
    8020baee:	fd08                	sd	a0,56(a0)
    8020baf0:	e128                	sd	a0,64(a0)
  vma->type = NONE;
    8020baf2:	00052023          	sw	zero,0(a0)
  p->vma = vma;
    8020baf6:	16a93823          	sd	a0,368(s2)
  if(alloc_vma(p, TRAP, TRAPFRAME, PGSIZE, PTE_R | PTE_W , 0, (uint64)p->trapframe) == NULL)
    8020bafa:	06893803          	ld	a6,104(s2)
    8020bafe:	4781                	li	a5,0
    8020bb00:	4719                	li	a4,6
    8020bb02:	6685                	lui	a3,0x1
    8020bb04:	7ffff637          	lui	a2,0x7ffff
    8020bb08:	45a1                	li	a1,8
    8020bb0a:	854a                	mv	a0,s2
    8020bb0c:	00000097          	auipc	ra,0x0
    8020bb10:	978080e7          	jalr	-1672(ra) # 8020b484 <alloc_vma>
    8020bb14:	c52d                	beqz	a0,8020bb7e <vma_list_init+0xb0>
  if(alloc_vma(p, STACK, PGROUNDDOWN(USER_STACK_BOTTOM - 10 * PGSIZE), 10 * PGSIZE, PTE_R|PTE_W|PTE_U, 1, NULL) == NULL)
    8020bb16:	4801                	li	a6,0
    8020bb18:	4785                	li	a5,1
    8020bb1a:	4759                	li	a4,22
    8020bb1c:	66a9                	lui	a3,0xa
    8020bb1e:	7fff4637          	lui	a2,0x7fff4
    8020bb22:	459d                	li	a1,7
    8020bb24:	854a                	mv	a0,s2
    8020bb26:	00000097          	auipc	ra,0x0
    8020bb2a:	95e080e7          	jalr	-1698(ra) # 8020b484 <alloc_vma>
    8020bb2e:	c53d                	beqz	a0,8020bb9c <vma_list_init+0xce>
  if(alloc_mmap_vma(p, 0, USER_MMAP_START, 0, 0, 0, 0) == NULL)
    8020bb30:	4801                	li	a6,0
    8020bb32:	4781                	li	a5,0
    8020bb34:	4701                	li	a4,0
    8020bb36:	4681                	li	a3,0
    8020bb38:	6fffe637          	lui	a2,0x6fffe
    8020bb3c:	4581                	li	a1,0
    8020bb3e:	854a                	mv	a0,s2
    8020bb40:	00000097          	auipc	ra,0x0
    8020bb44:	b7e080e7          	jalr	-1154(ra) # 8020b6be <alloc_mmap_vma>
    8020bb48:	c13d                	beqz	a0,8020bbae <vma_list_init+0xe0>
}
    8020bb4a:	8526                	mv	a0,s1
    8020bb4c:	60e2                	ld	ra,24(sp)
    8020bb4e:	6442                	ld	s0,16(sp)
    8020bb50:	64a2                	ld	s1,8(sp)
    8020bb52:	6902                	ld	s2,0(sp)
    8020bb54:	6105                	addi	sp,sp,32
    8020bb56:	8082                	ret
    __debug_warn("[vma_list_init] proc is NULL\n");
    8020bb58:	00007517          	auipc	a0,0x7
    8020bb5c:	62050513          	addi	a0,a0,1568 # 80213178 <digits+0x890>
    8020bb60:	ffffd097          	auipc	ra,0xffffd
    8020bb64:	f5c080e7          	jalr	-164(ra) # 80208abc <__debug_warn>
    return NULL;
    8020bb68:	84ca                	mv	s1,s2
    8020bb6a:	b7c5                	j	8020bb4a <vma_list_init+0x7c>
    __debug_warn("[vma_list_init] vma kmalloc failed\n");
    8020bb6c:	00007517          	auipc	a0,0x7
    8020bb70:	62c50513          	addi	a0,a0,1580 # 80213198 <digits+0x8b0>
    8020bb74:	ffffd097          	auipc	ra,0xffffd
    8020bb78:	f48080e7          	jalr	-184(ra) # 80208abc <__debug_warn>
    return NULL;
    8020bb7c:	b7f9                	j	8020bb4a <vma_list_init+0x7c>
    __debug_warn("[vma_list_init] TRAPFRAME vma init fail\n");
    8020bb7e:	00007517          	auipc	a0,0x7
    8020bb82:	64250513          	addi	a0,a0,1602 # 802131c0 <digits+0x8d8>
    8020bb86:	ffffd097          	auipc	ra,0xffffd
    8020bb8a:	f36080e7          	jalr	-202(ra) # 80208abc <__debug_warn>
  free_vma_list(p);
    8020bb8e:	854a                	mv	a0,s2
    8020bb90:	00000097          	auipc	ra,0x0
    8020bb94:	e88080e7          	jalr	-376(ra) # 8020ba18 <free_vma_list>
  return NULL;
    8020bb98:	4481                	li	s1,0
    8020bb9a:	bf45                	j	8020bb4a <vma_list_init+0x7c>
    __debug_warn("[vma_list_init] stack vma init fail\n");
    8020bb9c:	00007517          	auipc	a0,0x7
    8020bba0:	65450513          	addi	a0,a0,1620 # 802131f0 <digits+0x908>
    8020bba4:	ffffd097          	auipc	ra,0xffffd
    8020bba8:	f18080e7          	jalr	-232(ra) # 80208abc <__debug_warn>
    goto bad;
    8020bbac:	b7cd                	j	8020bb8e <vma_list_init+0xc0>
    __debug_warn("[vma_list_init] mmap vma init fail\n");
    8020bbae:	00007517          	auipc	a0,0x7
    8020bbb2:	66a50513          	addi	a0,a0,1642 # 80213218 <digits+0x930>
    8020bbb6:	ffffd097          	auipc	ra,0xffffd
    8020bbba:	f06080e7          	jalr	-250(ra) # 80208abc <__debug_warn>
    goto bad;
    8020bbbe:	bfc1                	j	8020bb8e <vma_list_init+0xc0>

000000008020bbc0 <addr_sz_locate_vma>:

struct vma *addr_sz_locate_vma(struct vma*head, uint64 addr, uint64 sz)
{
    8020bbc0:	1101                	addi	sp,sp,-32
    8020bbc2:	ec06                	sd	ra,24(sp)
    8020bbc4:	e822                	sd	s0,16(sp)
    8020bbc6:	e426                	sd	s1,8(sp)
    8020bbc8:	1000                	addi	s0,sp,32
    8020bbca:	84aa                	mv	s1,a0
  if(head == NULL)
    8020bbcc:	c511                	beqz	a0,8020bbd8 <addr_sz_locate_vma+0x18>
  {
    __debug_warn("[addr_sz_locate_vma] head is nil\n");
    return NULL;
  }
  struct vma *vma = head->next;
    8020bbce:	6128                	ld	a0,64(a0)
  while(vma != head)
    8020bbd0:	02a49163          	bne	s1,a0,8020bbf2 <addr_sz_locate_vma+0x32>
    {
      return vma;
    }
    vma = vma->next;
  }
  return NULL;
    8020bbd4:	4501                	li	a0,0
    8020bbd6:	a035                	j	8020bc02 <addr_sz_locate_vma+0x42>
    __debug_warn("[addr_sz_locate_vma] head is nil\n");
    8020bbd8:	00007517          	auipc	a0,0x7
    8020bbdc:	66850513          	addi	a0,a0,1640 # 80213240 <digits+0x958>
    8020bbe0:	ffffd097          	auipc	ra,0xffffd
    8020bbe4:	edc080e7          	jalr	-292(ra) # 80208abc <__debug_warn>
    return NULL;
    8020bbe8:	8526                	mv	a0,s1
    8020bbea:	a821                	j	8020bc02 <addr_sz_locate_vma+0x42>
    vma = vma->next;
    8020bbec:	6128                	ld	a0,64(a0)
  while(vma != head)
    8020bbee:	00a48963          	beq	s1,a0,8020bc00 <addr_sz_locate_vma+0x40>
    if(vma->addr == addr && vma->sz == sz)
    8020bbf2:	651c                	ld	a5,8(a0)
    8020bbf4:	feb79ce3          	bne	a5,a1,8020bbec <addr_sz_locate_vma+0x2c>
    8020bbf8:	691c                	ld	a5,16(a0)
    8020bbfa:	fec799e3          	bne	a5,a2,8020bbec <addr_sz_locate_vma+0x2c>
    8020bbfe:	a011                	j	8020bc02 <addr_sz_locate_vma+0x42>
  return NULL;
    8020bc00:	4501                	li	a0,0
}
    8020bc02:	60e2                	ld	ra,24(sp)
    8020bc04:	6442                	ld	s0,16(sp)
    8020bc06:	64a2                	ld	s1,8(sp)
    8020bc08:	6105                	addi	sp,sp,32
    8020bc0a:	8082                	ret

000000008020bc0c <free_vma>:

int free_vma(struct proc *p, struct vma *del)
{
    8020bc0c:	1101                	addi	sp,sp,-32
    8020bc0e:	ec06                	sd	ra,24(sp)
    8020bc10:	e822                	sd	s0,16(sp)
    8020bc12:	e426                	sd	s1,8(sp)
    8020bc14:	1000                	addi	s0,sp,32
  if(del == NULL)
    8020bc16:	cd9d                	beqz	a1,8020bc54 <free_vma+0x48>
    8020bc18:	84ae                	mv	s1,a1
  {
    __debug_warn("[free_vma] del is nil\n");
    return 0;
  }
  if(del->prev == NULL || del->next == NULL)
    8020bc1a:	7d9c                	ld	a5,56(a1)
    8020bc1c:	c7b1                	beqz	a5,8020bc68 <free_vma+0x5c>
    8020bc1e:	61b8                	ld	a4,64(a1)
    8020bc20:	c721                	beqz	a4,8020bc68 <free_vma+0x5c>
    return 0;
  }
  
  struct vma *prev = del->prev;
  struct vma *next = del->next;
  prev->next = next;
    8020bc22:	e3b8                	sd	a4,64(a5)
  next->prev = prev;
    8020bc24:	ff1c                	sd	a5,56(a4)
  del->next = del->prev = NULL;
    8020bc26:	0205bc23          	sd	zero,56(a1) # fffffffffffff038 <kernel_end+0xffffffff7f592038>
    8020bc2a:	0405b023          	sd	zero,64(a1)
  if(uvmdealloc(p->pagetable, del->addr, del->end) != 0)
    8020bc2e:	6d90                	ld	a2,24(a1)
    8020bc30:	658c                	ld	a1,8(a1)
    8020bc32:	7128                	ld	a0,96(a0)
    8020bc34:	ffffe097          	auipc	ra,0xffffe
    8020bc38:	fdc080e7          	jalr	-36(ra) # 80209c10 <uvmdealloc>
    8020bc3c:	e121                	bnez	a0,8020bc7c <free_vma+0x70>
  {
    __debug_warn("[free_vma] uvmdealloc fail\n");
    return 0;
  }
  kfree(del);
    8020bc3e:	8526                	mv	a0,s1
    8020bc40:	ffffe097          	auipc	ra,0xffffe
    8020bc44:	a12080e7          	jalr	-1518(ra) # 80209652 <kfree>
  return 1;
    8020bc48:	4505                	li	a0,1
}
    8020bc4a:	60e2                	ld	ra,24(sp)
    8020bc4c:	6442                	ld	s0,16(sp)
    8020bc4e:	64a2                	ld	s1,8(sp)
    8020bc50:	6105                	addi	sp,sp,32
    8020bc52:	8082                	ret
    __debug_warn("[free_vma] del is nil\n");
    8020bc54:	00007517          	auipc	a0,0x7
    8020bc58:	61450513          	addi	a0,a0,1556 # 80213268 <digits+0x980>
    8020bc5c:	ffffd097          	auipc	ra,0xffffd
    8020bc60:	e60080e7          	jalr	-416(ra) # 80208abc <__debug_warn>
    return 0;
    8020bc64:	4501                	li	a0,0
    8020bc66:	b7d5                	j	8020bc4a <free_vma+0x3e>
    __debug_warn("[free_vma] del is illegal\n");
    8020bc68:	00007517          	auipc	a0,0x7
    8020bc6c:	61850513          	addi	a0,a0,1560 # 80213280 <digits+0x998>
    8020bc70:	ffffd097          	auipc	ra,0xffffd
    8020bc74:	e4c080e7          	jalr	-436(ra) # 80208abc <__debug_warn>
    return 0;
    8020bc78:	4501                	li	a0,0
    8020bc7a:	bfc1                	j	8020bc4a <free_vma+0x3e>
    __debug_warn("[free_vma] uvmdealloc fail\n");
    8020bc7c:	00007517          	auipc	a0,0x7
    8020bc80:	62450513          	addi	a0,a0,1572 # 802132a0 <digits+0x9b8>
    8020bc84:	ffffd097          	auipc	ra,0xffffd
    8020bc88:	e38080e7          	jalr	-456(ra) # 80208abc <__debug_warn>
    return 0;
    8020bc8c:	4501                	li	a0,0
    8020bc8e:	bf75                	j	8020bc4a <free_vma+0x3e>

000000008020bc90 <vma_copy>:

struct vma* vma_copy(struct proc *np, struct vma *head)
{
    8020bc90:	7139                	addi	sp,sp,-64
    8020bc92:	fc06                	sd	ra,56(sp)
    8020bc94:	f822                	sd	s0,48(sp)
    8020bc96:	f426                	sd	s1,40(sp)
    8020bc98:	f04a                	sd	s2,32(sp)
    8020bc9a:	ec4e                	sd	s3,24(sp)
    8020bc9c:	e852                	sd	s4,16(sp)
    8020bc9e:	e456                	sd	s5,8(sp)
    8020bca0:	e05a                	sd	s6,0(sp)
    8020bca2:	0080                	addi	s0,sp,64
    8020bca4:	8b2a                	mv	s6,a0
    8020bca6:	8aae                	mv	s5,a1
  struct vma *nvma_head = (struct vma *)kmalloc(sizeof(struct vma));
    8020bca8:	04800513          	li	a0,72
    8020bcac:	ffffd097          	auipc	ra,0xffffd
    8020bcb0:	75c080e7          	jalr	1884(ra) # 80209408 <kmalloc>
  if(nvma_head == NULL)
    8020bcb4:	cd11                	beqz	a0,8020bcd0 <vma_copy+0x40>
    8020bcb6:	89aa                	mv	s3,a0
  {
    __debug_warn("[vma_copy] nvma_head kmalloc failed\n");
    goto err;
  }
  nvma_head->next = nvma_head->prev = nvma_head;
    8020bcb8:	fd08                	sd	a0,56(a0)
    8020bcba:	e128                	sd	a0,64(a0)
  nvma_head->type = NONE;
    8020bcbc:	00052023          	sw	zero,0(a0)
  np->vma = nvma_head;
    8020bcc0:	16ab3823          	sd	a0,368(s6) # 1170 <_entry-0x801fee90>
  struct vma *pvma = head->next;
    8020bcc4:	040ab903          	ld	s2,64(s5) # 1040 <_entry-0x801fefc0>
  while(pvma != head)
    8020bcc8:	0d2a8163          	beq	s5,s2,8020bd8a <vma_copy+0xfa>
  {
    struct vma *nvma = NULL;
    if(pvma->type == TRAP)
    8020bccc:	4a21                	li	s4,8
    8020bcce:	a895                	j	8020bd42 <vma_copy+0xb2>
    __debug_warn("[vma_copy] nvma_head kmalloc failed\n");
    8020bcd0:	00007517          	auipc	a0,0x7
    8020bcd4:	5f050513          	addi	a0,a0,1520 # 802132c0 <digits+0x9d8>
    8020bcd8:	ffffd097          	auipc	ra,0xffffd
    8020bcdc:	de4080e7          	jalr	-540(ra) # 80208abc <__debug_warn>
    goto err;
    8020bce0:	a069                	j	8020bd6a <vma_copy+0xda>
    {
      if((nvma = alloc_vma(np, TRAP, TRAPFRAME, PGSIZE, PTE_R | PTE_W , 0, (uint64)np->trapframe)) == NULL)
    8020bce2:	068b3803          	ld	a6,104(s6)
    8020bce6:	4781                	li	a5,0
    8020bce8:	4719                	li	a4,6
    8020bcea:	6685                	lui	a3,0x1
    8020bcec:	7ffff637          	lui	a2,0x7ffff
    8020bcf0:	85d2                	mv	a1,s4
    8020bcf2:	855a                	mv	a0,s6
    8020bcf4:	fffff097          	auipc	ra,0xfffff
    8020bcf8:	790080e7          	jalr	1936(ra) # 8020b484 <alloc_vma>
    8020bcfc:	ed1d                	bnez	a0,8020bd3a <vma_copy+0xaa>
      {
        __debug_warn("[vma_list_init] TRAPFRAME vma init fail\n");
    8020bcfe:	00007517          	auipc	a0,0x7
    8020bd02:	4c250513          	addi	a0,a0,1218 # 802131c0 <digits+0x8d8>
    8020bd06:	ffffd097          	auipc	ra,0xffffd
    8020bd0a:	db6080e7          	jalr	-586(ra) # 80208abc <__debug_warn>
        goto err;
    8020bd0e:	a8b1                	j	8020bd6a <vma_copy+0xda>
      if(nvma == NULL)
      {
        __debug_warn("[vma_copy] nvma kmalloc failed\n");
        goto err;
      }
      memmove(nvma, pvma, sizeof(struct vma));
    8020bd10:	04800613          	li	a2,72
    8020bd14:	85ca                	mv	a1,s2
    8020bd16:	ffff5097          	auipc	ra,0xffff5
    8020bd1a:	0be080e7          	jalr	190(ra) # 80200dd4 <memmove>
      nvma->next = nvma->prev = NULL;
    8020bd1e:	0204bc23          	sd	zero,56(s1)
    8020bd22:	0404b023          	sd	zero,64(s1)
      nvma->prev = nvma_head->prev;
    8020bd26:	0389b783          	ld	a5,56(s3)
    8020bd2a:	fc9c                	sd	a5,56(s1)
      nvma->next = nvma_head;
    8020bd2c:	0534b023          	sd	s3,64(s1)
      nvma_head->prev->next = nvma;
    8020bd30:	0389b783          	ld	a5,56(s3)
    8020bd34:	e3a4                	sd	s1,64(a5)
      nvma_head->prev = nvma;
    8020bd36:	0299bc23          	sd	s1,56(s3)
    }
    pvma = pvma->next;
    8020bd3a:	04093903          	ld	s2,64(s2)
  while(pvma != head)
    8020bd3e:	052a8663          	beq	s5,s2,8020bd8a <vma_copy+0xfa>
    if(pvma->type == TRAP)
    8020bd42:	00092783          	lw	a5,0(s2)
    8020bd46:	f9478ee3          	beq	a5,s4,8020bce2 <vma_copy+0x52>
      nvma = (struct vma *)kmalloc(sizeof(struct vma));
    8020bd4a:	04800513          	li	a0,72
    8020bd4e:	ffffd097          	auipc	ra,0xffffd
    8020bd52:	6ba080e7          	jalr	1722(ra) # 80209408 <kmalloc>
    8020bd56:	84aa                	mv	s1,a0
      if(nvma == NULL)
    8020bd58:	fd45                	bnez	a0,8020bd10 <vma_copy+0x80>
        __debug_warn("[vma_copy] nvma kmalloc failed\n");
    8020bd5a:	00007517          	auipc	a0,0x7
    8020bd5e:	58e50513          	addi	a0,a0,1422 # 802132e8 <digits+0xa00>
    8020bd62:	ffffd097          	auipc	ra,0xffffd
    8020bd66:	d5a080e7          	jalr	-678(ra) # 80208abc <__debug_warn>
  }
  
  return nvma_head;
  
err:
  np->vma = NULL;
    8020bd6a:	160b3823          	sd	zero,368(s6)
  __debug_warn("[vm_copy] failed\n");
    8020bd6e:	00007517          	auipc	a0,0x7
    8020bd72:	59a50513          	addi	a0,a0,1434 # 80213308 <digits+0xa20>
    8020bd76:	ffffd097          	auipc	ra,0xffffd
    8020bd7a:	d46080e7          	jalr	-698(ra) # 80208abc <__debug_warn>
  free_vma_list(np);
    8020bd7e:	855a                	mv	a0,s6
    8020bd80:	00000097          	auipc	ra,0x0
    8020bd84:	c98080e7          	jalr	-872(ra) # 8020ba18 <free_vma_list>
  return NULL;
    8020bd88:	4981                	li	s3,0
}
    8020bd8a:	854e                	mv	a0,s3
    8020bd8c:	70e2                	ld	ra,56(sp)
    8020bd8e:	7442                	ld	s0,48(sp)
    8020bd90:	74a2                	ld	s1,40(sp)
    8020bd92:	7902                	ld	s2,32(sp)
    8020bd94:	69e2                	ld	s3,24(sp)
    8020bd96:	6a42                	ld	s4,16(sp)
    8020bd98:	6aa2                	ld	s5,8(sp)
    8020bd9a:	6b02                	ld	s6,0(sp)
    8020bd9c:	6121                	addi	sp,sp,64
    8020bd9e:	8082                	ret

000000008020bda0 <vma_deep_mapping>:

int vma_deep_mapping(pagetable_t old, pagetable_t new, const struct vma *vma)
{
    8020bda0:	715d                	addi	sp,sp,-80
    8020bda2:	e486                	sd	ra,72(sp)
    8020bda4:	e0a2                	sd	s0,64(sp)
    8020bda6:	fc26                	sd	s1,56(sp)
    8020bda8:	f84a                	sd	s2,48(sp)
    8020bdaa:	f44e                	sd	s3,40(sp)
    8020bdac:	f052                	sd	s4,32(sp)
    8020bdae:	ec56                	sd	s5,24(sp)
    8020bdb0:	e85a                	sd	s6,16(sp)
    8020bdb2:	e45e                	sd	s7,8(sp)
    8020bdb4:	0880                	addi	s0,sp,80
    8020bdb6:	8b2a                	mv	s6,a0
    8020bdb8:	8aae                	mv	s5,a1
    8020bdba:	8a32                	mv	s4,a2
  uint64 start = vma->addr;
    8020bdbc:	00863983          	ld	s3,8(a2) # 7ffff008 <_entry-0x200ff8>
  pte_t *pte;
  uint64 pa;
  char *mem;
  long flags;
  
  while(start < vma->end)
    8020bdc0:	6e1c                	ld	a5,24(a2)
    8020bdc2:	0ef9f263          	bgeu	s3,a5,8020bea6 <vma_deep_mapping+0x106>
  {
    if((pte = walk(old, start, 0)) == NULL)
    8020bdc6:	4601                	li	a2,0
    8020bdc8:	85ce                	mv	a1,s3
    8020bdca:	855a                	mv	a0,s6
    8020bdcc:	ffffe097          	auipc	ra,0xffffe
    8020bdd0:	9a6080e7          	jalr	-1626(ra) # 80209772 <walk>
    8020bdd4:	c921                	beqz	a0,8020be24 <vma_deep_mapping+0x84>
    {
      panic("uvmcopy: pte should exist");
    }
    if((*pte & PTE_V) == 0)
    8020bdd6:	6118                	ld	a4,0(a0)
    8020bdd8:	00177793          	andi	a5,a4,1
    8020bddc:	cfa1                	beqz	a5,8020be34 <vma_deep_mapping+0x94>
    {
      panic("uvmcopy: page not present");
    }
    pa = PTE2PA(*pte);
    8020bdde:	00a75593          	srli	a1,a4,0xa
    8020bde2:	00c59b93          	slli	s7,a1,0xc
    flags = PTE_FLAGS(*pte);
    8020bde6:	3ff77493          	andi	s1,a4,1023

    mem = (char *)allocpage();
    8020bdea:	ffffd097          	auipc	ra,0xffffd
    8020bdee:	396080e7          	jalr	918(ra) # 80209180 <_allocpage>
    8020bdf2:	892a                	mv	s2,a0

    if(mem == NULL)
    8020bdf4:	c921                	beqz	a0,8020be44 <vma_deep_mapping+0xa4>
    {
      __debug_warn("[vma deep mapping] alloc page fail\n");
      goto err;
    }

    memmove(mem, (char *)pa, PGSIZE);
    8020bdf6:	6605                	lui	a2,0x1
    8020bdf8:	85de                	mv	a1,s7
    8020bdfa:	ffff5097          	auipc	ra,0xffff5
    8020bdfe:	fda080e7          	jalr	-38(ra) # 80200dd4 <memmove>

    if(mappages(new, start, PGSIZE, (uint64)mem, flags) != 0)
    8020be02:	8726                	mv	a4,s1
    8020be04:	86ca                	mv	a3,s2
    8020be06:	6605                	lui	a2,0x1
    8020be08:	85ce                	mv	a1,s3
    8020be0a:	8556                	mv	a0,s5
    8020be0c:	ffffe097          	auipc	ra,0xffffe
    8020be10:	a16080e7          	jalr	-1514(ra) # 80209822 <mappages>
    8020be14:	e53d                	bnez	a0,8020be82 <vma_deep_mapping+0xe2>
      __debug_warn("[vma_deep_mapping] start = %p, end = %p\n", vma->addr, vma->end);
      freepage(mem);
      goto err;
    }

    start += PGSIZE;
    8020be16:	6785                	lui	a5,0x1
    8020be18:	99be                	add	s3,s3,a5
  while(start < vma->end)
    8020be1a:	018a3783          	ld	a5,24(s4)
    8020be1e:	faf9e4e3          	bltu	s3,a5,8020bdc6 <vma_deep_mapping+0x26>
    8020be22:	a0a9                	j	8020be6c <vma_deep_mapping+0xcc>
      panic("uvmcopy: pte should exist");
    8020be24:	00007517          	auipc	a0,0x7
    8020be28:	4fc50513          	addi	a0,a0,1276 # 80213320 <digits+0xa38>
    8020be2c:	ffffd097          	auipc	ra,0xffffd
    8020be30:	8ba080e7          	jalr	-1862(ra) # 802086e6 <panic>
      panic("uvmcopy: page not present");
    8020be34:	00007517          	auipc	a0,0x7
    8020be38:	50c50513          	addi	a0,a0,1292 # 80213340 <digits+0xa58>
    8020be3c:	ffffd097          	auipc	ra,0xffffd
    8020be40:	8aa080e7          	jalr	-1878(ra) # 802086e6 <panic>
      __debug_warn("[vma deep mapping] alloc page fail\n");
    8020be44:	00007517          	auipc	a0,0x7
    8020be48:	51c50513          	addi	a0,a0,1308 # 80213360 <digits+0xa78>
    8020be4c:	ffffd097          	auipc	ra,0xffffd
    8020be50:	c70080e7          	jalr	-912(ra) # 80208abc <__debug_warn>
  }
  return 0;
  
err:
  vmunmap(new, vma->addr, (start - vma->addr) / PGSIZE, 1);
    8020be54:	008a3583          	ld	a1,8(s4)
    8020be58:	40b98633          	sub	a2,s3,a1
    8020be5c:	4685                	li	a3,1
    8020be5e:	8231                	srli	a2,a2,0xc
    8020be60:	8556                	mv	a0,s5
    8020be62:	ffffe097          	auipc	ra,0xffffe
    8020be66:	b82080e7          	jalr	-1150(ra) # 802099e4 <vmunmap>
  return -1;
    8020be6a:	557d                	li	a0,-1
}
    8020be6c:	60a6                	ld	ra,72(sp)
    8020be6e:	6406                	ld	s0,64(sp)
    8020be70:	74e2                	ld	s1,56(sp)
    8020be72:	7942                	ld	s2,48(sp)
    8020be74:	79a2                	ld	s3,40(sp)
    8020be76:	7a02                	ld	s4,32(sp)
    8020be78:	6ae2                	ld	s5,24(sp)
    8020be7a:	6b42                	ld	s6,16(sp)
    8020be7c:	6ba2                	ld	s7,8(sp)
    8020be7e:	6161                	addi	sp,sp,80
    8020be80:	8082                	ret
      __debug_warn("[vma_deep_mapping] start = %p, end = %p\n", vma->addr, vma->end);
    8020be82:	018a3603          	ld	a2,24(s4)
    8020be86:	008a3583          	ld	a1,8(s4)
    8020be8a:	00007517          	auipc	a0,0x7
    8020be8e:	4fe50513          	addi	a0,a0,1278 # 80213388 <digits+0xaa0>
    8020be92:	ffffd097          	auipc	ra,0xffffd
    8020be96:	c2a080e7          	jalr	-982(ra) # 80208abc <__debug_warn>
      freepage(mem);
    8020be9a:	854a                	mv	a0,s2
    8020be9c:	ffffd097          	auipc	ra,0xffffd
    8020bea0:	384080e7          	jalr	900(ra) # 80209220 <_freepage>
      goto err;
    8020bea4:	bf45                	j	8020be54 <vma_deep_mapping+0xb4>
  return 0;
    8020bea6:	4501                	li	a0,0
    8020bea8:	b7d1                	j	8020be6c <vma_deep_mapping+0xcc>

000000008020beaa <vma_shallow_mapping>:

int vma_shallow_mapping(pagetable_t old, pagetable_t new, const struct vma *vma)
{
    8020beaa:	7179                	addi	sp,sp,-48
    8020beac:	f406                	sd	ra,40(sp)
    8020beae:	f022                	sd	s0,32(sp)
    8020beb0:	ec26                	sd	s1,24(sp)
    8020beb2:	e84a                	sd	s2,16(sp)
    8020beb4:	e44e                	sd	s3,8(sp)
    8020beb6:	e052                	sd	s4,0(sp)
    8020beb8:	1800                	addi	s0,sp,48
    8020beba:	8a2a                	mv	s4,a0
    8020bebc:	89ae                	mv	s3,a1
    8020bebe:	8932                	mv	s2,a2
  uint64 start = vma->addr;
    8020bec0:	6604                	ld	s1,8(a2)
  uint64 pa;
  pte_t *pte;
  long flags;

  while(start < vma->end)
    8020bec2:	6e1c                	ld	a5,24(a2)
    8020bec4:	0af4f263          	bgeu	s1,a5,8020bf68 <vma_shallow_mapping+0xbe>
  {
    if((pte = walk(old, start, 0)) == NULL)
    8020bec8:	4601                	li	a2,0
    8020beca:	85a6                	mv	a1,s1
    8020becc:	8552                	mv	a0,s4
    8020bece:	ffffe097          	auipc	ra,0xffffe
    8020bed2:	8a4080e7          	jalr	-1884(ra) # 80209772 <walk>
    8020bed6:	c90d                	beqz	a0,8020bf08 <vma_shallow_mapping+0x5e>
    {
      panic("uvmcopy: pte should exist");
    }
    if((*pte & PTE_V) == 0)
    8020bed8:	6118                	ld	a4,0(a0)
    8020beda:	00177793          	andi	a5,a4,1
    8020bede:	cf8d                	beqz	a5,8020bf18 <vma_shallow_mapping+0x6e>
    {
      panic("uvmcopy: page not present");
    }
    pa = PTE2PA(*pte);
    8020bee0:	00a75693          	srli	a3,a4,0xa
    flags = PTE_FLAGS(*pte);

    if(mappages(new, start, PGSIZE, pa, flags) != 0)
    8020bee4:	3ff77713          	andi	a4,a4,1023
    8020bee8:	06b2                	slli	a3,a3,0xc
    8020beea:	6605                	lui	a2,0x1
    8020beec:	85a6                	mv	a1,s1
    8020beee:	854e                	mv	a0,s3
    8020bef0:	ffffe097          	auipc	ra,0xffffe
    8020bef4:	932080e7          	jalr	-1742(ra) # 80209822 <mappages>
    8020bef8:	e905                	bnez	a0,8020bf28 <vma_shallow_mapping+0x7e>
    {
      __debug_warn("[vma_shallow_mapping] start = %p, end = %p\n", vma->addr, vma->end);
      goto err;
    }
    start +=PGSIZE;
    8020befa:	6785                	lui	a5,0x1
    8020befc:	94be                	add	s1,s1,a5
  while(start < vma->end)
    8020befe:	01893783          	ld	a5,24(s2)
    8020bf02:	fcf4e3e3          	bltu	s1,a5,8020bec8 <vma_shallow_mapping+0x1e>
    8020bf06:	a889                	j	8020bf58 <vma_shallow_mapping+0xae>
      panic("uvmcopy: pte should exist");
    8020bf08:	00007517          	auipc	a0,0x7
    8020bf0c:	41850513          	addi	a0,a0,1048 # 80213320 <digits+0xa38>
    8020bf10:	ffffc097          	auipc	ra,0xffffc
    8020bf14:	7d6080e7          	jalr	2006(ra) # 802086e6 <panic>
      panic("uvmcopy: page not present");
    8020bf18:	00007517          	auipc	a0,0x7
    8020bf1c:	42850513          	addi	a0,a0,1064 # 80213340 <digits+0xa58>
    8020bf20:	ffffc097          	auipc	ra,0xffffc
    8020bf24:	7c6080e7          	jalr	1990(ra) # 802086e6 <panic>
      __debug_warn("[vma_shallow_mapping] start = %p, end = %p\n", vma->addr, vma->end);
    8020bf28:	01893603          	ld	a2,24(s2)
    8020bf2c:	00893583          	ld	a1,8(s2)
    8020bf30:	00007517          	auipc	a0,0x7
    8020bf34:	48850513          	addi	a0,a0,1160 # 802133b8 <digits+0xad0>
    8020bf38:	ffffd097          	auipc	ra,0xffffd
    8020bf3c:	b84080e7          	jalr	-1148(ra) # 80208abc <__debug_warn>
  }
  return 0;

err:
  vmunmap(new, vma->addr, (start - vma->addr) / PGSIZE, 1);
    8020bf40:	00893583          	ld	a1,8(s2)
    8020bf44:	40b48633          	sub	a2,s1,a1
    8020bf48:	4685                	li	a3,1
    8020bf4a:	8231                	srli	a2,a2,0xc
    8020bf4c:	854e                	mv	a0,s3
    8020bf4e:	ffffe097          	auipc	ra,0xffffe
    8020bf52:	a96080e7          	jalr	-1386(ra) # 802099e4 <vmunmap>
  return -1;
    8020bf56:	557d                	li	a0,-1
}
    8020bf58:	70a2                	ld	ra,40(sp)
    8020bf5a:	7402                	ld	s0,32(sp)
    8020bf5c:	64e2                	ld	s1,24(sp)
    8020bf5e:	6942                	ld	s2,16(sp)
    8020bf60:	69a2                	ld	s3,8(sp)
    8020bf62:	6a02                	ld	s4,0(sp)
    8020bf64:	6145                	addi	sp,sp,48
    8020bf66:	8082                	ret
  return 0;
    8020bf68:	4501                	li	a0,0
    8020bf6a:	b7fd                	j	8020bf58 <vma_shallow_mapping+0xae>

000000008020bf6c <growproc>:

// Grow or shrink user memory by n bytes.
// Return 0 on success, -1 on failure.
uint64
growproc(int n)
{
    8020bf6c:	1101                	addi	sp,sp,-32
    8020bf6e:	ec06                	sd	ra,24(sp)
    8020bf70:	e822                	sd	s0,16(sp)
    8020bf72:	e426                	sd	s1,8(sp)
    8020bf74:	1000                	addi	s0,sp,32
    8020bf76:	84aa                	mv	s1,a0
  struct proc *p = myproc();
    8020bf78:	fffff097          	auipc	ra,0xfffff
    8020bf7c:	4d4080e7          	jalr	1236(ra) # 8020b44c <myproc>
  //printf("[growproc]proc name:%s\n",p->name);
  //printf("[growproc]want grow to %p\n",n);
  struct vma* vma = alloc_addr_heap_vma(p, n, PTE_R|PTE_W|PTE_U);
    8020bf80:	4659                	li	a2,22
    8020bf82:	85a6                	mv	a1,s1
    8020bf84:	00000097          	auipc	ra,0x0
    8020bf88:	850080e7          	jalr	-1968(ra) # 8020b7d4 <alloc_addr_heap_vma>
  if(vma == NULL){
    8020bf8c:	c519                	beqz	a0,8020bf9a <growproc+0x2e>
    __debug_warn("[growproc]alloc heap not found\n");
    return 0;
  }
  //printf("[growproc]actually grow to %p\n",vma->end);
  return vma->end;
    8020bf8e:	6d08                	ld	a0,24(a0)
}
    8020bf90:	60e2                	ld	ra,24(sp)
    8020bf92:	6442                	ld	s0,16(sp)
    8020bf94:	64a2                	ld	s1,8(sp)
    8020bf96:	6105                	addi	sp,sp,32
    8020bf98:	8082                	ret
    __debug_warn("[growproc]alloc heap not found\n");
    8020bf9a:	00007517          	auipc	a0,0x7
    8020bf9e:	44e50513          	addi	a0,a0,1102 # 802133e8 <digits+0xb00>
    8020bfa2:	ffffd097          	auipc	ra,0xffffd
    8020bfa6:	b1a080e7          	jalr	-1254(ra) # 80208abc <__debug_warn>
    return 0;
    8020bfaa:	4501                	li	a0,0
    8020bfac:	b7d5                	j	8020bf90 <growproc+0x24>

000000008020bfae <growprocsize>:

uint64 growprocsize(uint64 sz)
{
    8020bfae:	1101                	addi	sp,sp,-32
    8020bfb0:	ec06                	sd	ra,24(sp)
    8020bfb2:	e822                	sd	s0,16(sp)
    8020bfb4:	e426                	sd	s1,8(sp)
    8020bfb6:	1000                	addi	s0,sp,32
    8020bfb8:	84aa                	mv	s1,a0
  struct proc *p = myproc();
    8020bfba:	fffff097          	auipc	ra,0xfffff
    8020bfbe:	492080e7          	jalr	1170(ra) # 8020b44c <myproc>
  struct vma *vma = alloc_sz_heap_vma(p, sz, PTE_R|PTE_W|PTE_U);
    8020bfc2:	4659                	li	a2,22
    8020bfc4:	85a6                	mv	a1,s1
    8020bfc6:	00000097          	auipc	ra,0x0
    8020bfca:	910080e7          	jalr	-1776(ra) # 8020b8d6 <alloc_sz_heap_vma>
  if(vma == NULL)
    8020bfce:	cd09                	beqz	a0,8020bfe8 <growprocsize+0x3a>
  {
    __debug_warn("[growproc] alloc heap failed\n");
    return 0;
  }
  return vma->end - PGROUNDUP(sz);
    8020bfd0:	6785                	lui	a5,0x1
    8020bfd2:	17fd                	addi	a5,a5,-1
    8020bfd4:	94be                	add	s1,s1,a5
    8020bfd6:	77fd                	lui	a5,0xfffff
    8020bfd8:	8cfd                	and	s1,s1,a5
    8020bfda:	6d08                	ld	a0,24(a0)
    8020bfdc:	8d05                	sub	a0,a0,s1
}
    8020bfde:	60e2                	ld	ra,24(sp)
    8020bfe0:	6442                	ld	s0,16(sp)
    8020bfe2:	64a2                	ld	s1,8(sp)
    8020bfe4:	6105                	addi	sp,sp,32
    8020bfe6:	8082                	ret
    __debug_warn("[growproc] alloc heap failed\n");
    8020bfe8:	00007517          	auipc	a0,0x7
    8020bfec:	42050513          	addi	a0,a0,1056 # 80213408 <digits+0xb20>
    8020bff0:	ffffd097          	auipc	ra,0xffffd
    8020bff4:	acc080e7          	jalr	-1332(ra) # 80208abc <__debug_warn>
    return 0;
    8020bff8:	4501                	li	a0,0
    8020bffa:	b7d5                	j	8020bfde <growprocsize+0x30>

000000008020bffc <print_vma_info>:
  [MMAP]  "MMAP",
};


void print_vma_info(struct proc* p)
{
    8020bffc:	7139                	addi	sp,sp,-64
    8020bffe:	fc06                	sd	ra,56(sp)
    8020c000:	f822                	sd	s0,48(sp)
    8020c002:	f426                	sd	s1,40(sp)
    8020c004:	f04a                	sd	s2,32(sp)
    8020c006:	ec4e                	sd	s3,24(sp)
    8020c008:	e852                	sd	s4,16(sp)
    8020c00a:	e456                	sd	s5,8(sp)
    8020c00c:	e05a                	sd	s6,0(sp)
    8020c00e:	0080                	addi	s0,sp,64
    8020c010:	89aa                	mv	s3,a0
  struct vma * head = p->vma;
    8020c012:	17053a03          	ld	s4,368(a0)
  struct vma * pvma = head->next;
    8020c016:	040a3483          	ld	s1,64(s4)
  __debug_info("\t\tva\t\t\tpa\t\t\tsz\t\t\tend\t\ttype\n");
    8020c01a:	00007517          	auipc	a0,0x7
    8020c01e:	40e50513          	addi	a0,a0,1038 # 80213428 <digits+0xb40>
    8020c022:	ffffd097          	auipc	ra,0xffffd
    8020c026:	8d4080e7          	jalr	-1836(ra) # 802088f6 <__debug_info>
  while(pvma != head){
    8020c02a:	049a0463          	beq	s4,s1,8020c072 <print_vma_info+0x76>
    __debug_info("[vma_info]%p\t%p\t%p\t%p\t%s\n", 
    8020c02e:	00007b17          	auipc	s6,0x7
    8020c032:	4aab0b13          	addi	s6,s6,1194 # 802134d8 <vma_type>
    8020c036:	00007a97          	auipc	s5,0x7
    8020c03a:	412a8a93          	addi	s5,s5,1042 # 80213448 <digits+0xb60>
    8020c03e:	0084b903          	ld	s2,8(s1)
    8020c042:	85ca                	mv	a1,s2
    8020c044:	0609b503          	ld	a0,96(s3)
    8020c048:	ffffe097          	auipc	ra,0xffffe
    8020c04c:	b8c080e7          	jalr	-1140(ra) # 80209bd4 <kwalkaddr1>
    8020c050:	862a                	mv	a2,a0
    8020c052:	0004e783          	lwu	a5,0(s1)
    8020c056:	078e                	slli	a5,a5,0x3
    8020c058:	97da                	add	a5,a5,s6
    8020c05a:	639c                	ld	a5,0(a5)
    8020c05c:	6c98                	ld	a4,24(s1)
    8020c05e:	6894                	ld	a3,16(s1)
    8020c060:	85ca                	mv	a1,s2
    8020c062:	8556                	mv	a0,s5
    8020c064:	ffffd097          	auipc	ra,0xffffd
    8020c068:	892080e7          	jalr	-1902(ra) # 802088f6 <__debug_info>
                pvma->addr, kwalkaddr1(p->pagetable,pvma->addr),pvma->sz, pvma->end, vma_type[pvma->type]);
    pvma = pvma->next;
    8020c06c:	60a4                	ld	s1,64(s1)
  while(pvma != head){
    8020c06e:	fc9a18e3          	bne	s4,s1,8020c03e <print_vma_info+0x42>
  }
}
    8020c072:	70e2                	ld	ra,56(sp)
    8020c074:	7442                	ld	s0,48(sp)
    8020c076:	74a2                	ld	s1,40(sp)
    8020c078:	7902                	ld	s2,32(sp)
    8020c07a:	69e2                	ld	s3,24(sp)
    8020c07c:	6a42                	ld	s4,16(sp)
    8020c07e:	6aa2                	ld	s5,8(sp)
    8020c080:	6b02                	ld	s6,0(sp)
    8020c082:	6121                	addi	sp,sp,64
    8020c084:	8082                	ret

000000008020c086 <print_single_vma>:

void print_single_vma(pagetable_t pagetable,struct vma* v)
{
    8020c086:	1141                	addi	sp,sp,-16
    8020c088:	e406                	sd	ra,8(sp)
    8020c08a:	e022                	sd	s0,0(sp)
    8020c08c:	0800                	addi	s0,sp,16
  __debug_info("[vma_info]va %p\tsz %p\tend %p\tname %s\n", 
    8020c08e:	0005e783          	lwu	a5,0(a1)
    8020c092:	00379713          	slli	a4,a5,0x3
    8020c096:	00007797          	auipc	a5,0x7
    8020c09a:	44278793          	addi	a5,a5,1090 # 802134d8 <vma_type>
    8020c09e:	97ba                	add	a5,a5,a4
    8020c0a0:	6398                	ld	a4,0(a5)
    8020c0a2:	6d94                	ld	a3,24(a1)
    8020c0a4:	6990                	ld	a2,16(a1)
    8020c0a6:	658c                	ld	a1,8(a1)
    8020c0a8:	00007517          	auipc	a0,0x7
    8020c0ac:	3c050513          	addi	a0,a0,960 # 80213468 <digits+0xb80>
    8020c0b0:	ffffd097          	auipc	ra,0xffffd
    8020c0b4:	846080e7          	jalr	-1978(ra) # 802088f6 <__debug_info>
                v->addr,v->sz, v->end, vma_type[v->type]);

}
    8020c0b8:	60a2                	ld	ra,8(sp)
    8020c0ba:	6402                	ld	s0,0(sp)
    8020c0bc:	0141                	addi	sp,sp,16
    8020c0be:	8082                	ret

000000008020c0c0 <do_mmap_fix>:
#include "include/kalloc.h"
#include "include/string.h"
#include "include/errno.h"

map_fix* do_mmap_fix(uint64 start, uint64 len, int flags, int fd, off_t offset)
{
    8020c0c0:	715d                	addi	sp,sp,-80
    8020c0c2:	e486                	sd	ra,72(sp)
    8020c0c4:	e0a2                	sd	s0,64(sp)
    8020c0c6:	fc26                	sd	s1,56(sp)
    8020c0c8:	f84a                	sd	s2,48(sp)
    8020c0ca:	f44e                	sd	s3,40(sp)
    8020c0cc:	f052                	sd	s4,32(sp)
    8020c0ce:	ec56                	sd	s5,24(sp)
    8020c0d0:	e85a                	sd	s6,16(sp)
    8020c0d2:	e45e                	sd	s7,8(sp)
    8020c0d4:	0880                	addi	s0,sp,80
    8020c0d6:	8b2a                	mv	s6,a0
    8020c0d8:	8aae                	mv	s5,a1
    8020c0da:	8a32                	mv	s4,a2
    8020c0dc:	8936                	mv	s2,a3
    8020c0de:	89ba                	mv	s3,a4
    struct proc* p = myproc();
    8020c0e0:	fffff097          	auipc	ra,0xfffff
    8020c0e4:	36c080e7          	jalr	876(ra) # 8020b44c <myproc>
    8020c0e8:	84aa                	mv	s1,a0
    struct file* f = fd < 0 ? NULL : p->ofile[fd];
    8020c0ea:	4b81                	li	s7,0
    8020c0ec:	00094863          	bltz	s2,8020c0fc <do_mmap_fix+0x3c>
    8020c0f0:	757c                	ld	a5,232(a0)
    8020c0f2:	00391713          	slli	a4,s2,0x3
    8020c0f6:	97ba                	add	a5,a5,a4
    8020c0f8:	0007bb83          	ld	s7,0(a5)
    map_fix* mf = kmalloc(sizeof(map_fix));
    8020c0fc:	04800513          	li	a0,72
    8020c100:	ffffd097          	auipc	ra,0xffffd
    8020c104:	308080e7          	jalr	776(ra) # 80209408 <kmalloc>
        .sz = len,
        .mmap = (uint64)f,
        .fd = fd,
        .flags = flags,
        .f_off = offset,
        .next = p->mf,
    8020c108:	1804b703          	ld	a4,384(s1)
    *mf = (map_fix){
    8020c10c:	00053023          	sd	zero,0(a0)
    8020c110:	00053c23          	sd	zero,24(a0)
    8020c114:	02053c23          	sd	zero,56(a0)
    8020c118:	4699                	li	a3,6
    8020c11a:	c114                	sw	a3,0(a0)
    8020c11c:	01653423          	sd	s6,8(a0)
    8020c120:	01553823          	sd	s5,16(a0)
    8020c124:	03753023          	sd	s7,32(a0)
    8020c128:	03452423          	sw	s4,40(a0)
    8020c12c:	03252623          	sw	s2,44(a0)
    8020c130:	03353823          	sd	s3,48(a0)
    8020c134:	e138                	sd	a4,64(a0)
        .type = MMAP
    };
    p->mf = mf;
    8020c136:	18a4b023          	sd	a0,384(s1)
    return mf;
}
    8020c13a:	60a6                	ld	ra,72(sp)
    8020c13c:	6406                	ld	s0,64(sp)
    8020c13e:	74e2                	ld	s1,56(sp)
    8020c140:	7942                	ld	s2,48(sp)
    8020c142:	79a2                	ld	s3,40(sp)
    8020c144:	7a02                	ld	s4,32(sp)
    8020c146:	6ae2                	ld	s5,24(sp)
    8020c148:	6b42                	ld	s6,16(sp)
    8020c14a:	6ba2                	ld	s7,8(sp)
    8020c14c:	6161                	addi	sp,sp,80
    8020c14e:	8082                	ret

000000008020c150 <do_mmap>:

uint64 do_mmap(uint64 start, uint64 len, int prot, int flags, int fd, off_t offset)
{
    8020c150:	7119                	addi	sp,sp,-128
    8020c152:	fc86                	sd	ra,120(sp)
    8020c154:	f8a2                	sd	s0,112(sp)
    8020c156:	f4a6                	sd	s1,104(sp)
    8020c158:	f0ca                	sd	s2,96(sp)
    8020c15a:	ecce                	sd	s3,88(sp)
    8020c15c:	e8d2                	sd	s4,80(sp)
    8020c15e:	e4d6                	sd	s5,72(sp)
    8020c160:	e0da                	sd	s6,64(sp)
    8020c162:	fc5e                	sd	s7,56(sp)
    8020c164:	f862                	sd	s8,48(sp)
    8020c166:	f466                	sd	s9,40(sp)
    8020c168:	f06a                	sd	s10,32(sp)
    8020c16a:	ec6e                	sd	s11,24(sp)
    8020c16c:	0100                	addi	s0,sp,128
    8020c16e:	8aaa                	mv	s5,a0
    8020c170:	8a2e                	mv	s4,a1
    8020c172:	8932                	mv	s2,a2
    8020c174:	84b6                	mv	s1,a3
    8020c176:	8cba                	mv	s9,a4
    8020c178:	89be                	mv	s3,a5
    struct proc *p = myproc();
    8020c17a:	fffff097          	auipc	ra,0xfffff
    8020c17e:	2d2080e7          	jalr	722(ra) # 8020b44c <myproc>
    8020c182:	8b2a                	mv	s6,a0
    struct vma *vma = NULL;

    if(flags & MAP_ANONYMOUS)
    8020c184:	0204f793          	andi	a5,s1,32
    8020c188:	10079c63          	bnez	a5,8020c2a0 <do_mmap+0x150>
    {
        fd = -1;
        goto ignore_fd;
    }

    if(fd < 0)
    8020c18c:	0e0cc463          	bltz	s9,8020c274 <do_mmap+0x124>
    {
        __debug_warn("[do_mmap] fd illegal, fd = %d\n", fd);
        return -1;
    }

    if(fd > NOFILEMAX(p))
    8020c190:	7170                	ld	a2,224(a0)
    8020c192:	0c800793          	li	a5,200
    8020c196:	00c7d463          	bge	a5,a2,8020c19e <do_mmap+0x4e>
    8020c19a:	0c800613          	li	a2,200
    8020c19e:	0f964663          	blt	a2,s9,8020c28a <do_mmap+0x13a>
        __debug_warn("[do_mmap] fd illegal, fd(%d) > NOFILEMAX(%d)\n", fd, NOFILEMAX(p));
        return -1;
    }

ignore_fd:
    if(offset < 0)
    8020c1a2:	1009c163          	bltz	s3,8020c2a4 <do_mmap+0x154>
    {
        __debug_warn("[do_mmap] offset illegal, offset = %d\n", offset);
        return -1;
    }
    if(start % PGSIZE != 0)
    8020c1a6:	034a9793          	slli	a5,s5,0x34
    8020c1aa:	10079863          	bnez	a5,8020c2ba <do_mmap+0x16a>
        return -1;
    }
    // print_vma_info(p);
    // __debug_info("[dp_mmap] start = %p, len = %p, flags = %p, fd = %d, offset = %d\n", start, len, flags, fd, offset);
    int perm = PTE_U;
    if(prot & PROT_READ) 
    8020c1ae:	00197793          	andi	a5,s2,1
    int perm = PTE_U;
    8020c1b2:	4bc1                	li	s7,16
    if(prot & PROT_READ) 
    8020c1b4:	c399                	beqz	a5,8020c1ba <do_mmap+0x6a>
        perm  |= (PTE_R | PTE_A);
    8020c1b6:	05200b93          	li	s7,82
    if(prot & PROT_WRITE)
    8020c1ba:	00297793          	andi	a5,s2,2
    8020c1be:	c399                	beqz	a5,8020c1c4 <do_mmap+0x74>
        perm  |= (PTE_W | PTE_D);
    8020c1c0:	084beb93          	ori	s7,s7,132
    if(prot & PROT_EXEC)
    8020c1c4:	00497913          	andi	s2,s2,4
    8020c1c8:	00090463          	beqz	s2,8020c1d0 <do_mmap+0x80>
        perm  |= (PTE_X | PTE_A);
    8020c1cc:	048beb93          	ori	s7,s7,72

    struct file *f = fd == -1 ? NULL : p->ofile[fd];
    8020c1d0:	57fd                	li	a5,-1
    8020c1d2:	10fc8863          	beq	s9,a5,8020c2e2 <do_mmap+0x192>
    8020c1d6:	0e8b3783          	ld	a5,232(s6)
    8020c1da:	003c9713          	slli	a4,s9,0x3
    8020c1de:	97ba                	add	a5,a5,a4
    8020c1e0:	0007bc03          	ld	s8,0(a5)
    if(fd != -1 && f == NULL)
    8020c1e4:	0e0c0563          	beqz	s8,8020c2ce <do_mmap+0x17e>
    {
        __debug_warn("[do_mmap] mmap file illegal\n");
        return -1;
    }

    if((flags & MAP_FIXED) && start != 0)
    8020c1e8:	0104f793          	andi	a5,s1,16
    8020c1ec:	c399                	beqz	a5,8020c1f2 <do_mmap+0xa2>
    8020c1ee:	0e0a9c63          	bnez	s5,8020c2e6 <do_mmap+0x196>
    {
        vma = (struct vma *)do_mmap_fix(start, len, flags, fd, offset);
        goto skip_vma;
    }

    vma = alloc_mmap_vma(p, flags, start, len, perm, fd, offset);
    8020c1f2:	884e                	mv	a6,s3
    8020c1f4:	87e6                	mv	a5,s9
    8020c1f6:	875e                	mv	a4,s7
    8020c1f8:	86d2                	mv	a3,s4
    8020c1fa:	8656                	mv	a2,s5
    8020c1fc:	85a6                	mv	a1,s1
    8020c1fe:	855a                	mv	a0,s6
    8020c200:	fffff097          	auipc	ra,0xfffff
    8020c204:	4be080e7          	jalr	1214(ra) # 8020b6be <alloc_mmap_vma>
    8020c208:	892a                	mv	s2,a0
    start = vma->addr;
    8020c20a:	00853a83          	ld	s5,8(a0)
    }

    uint64 mmap_sz ;
skip_vma:
    mmap_sz = 0;
    if(fd != -1)
    8020c20e:	57fd                	li	a5,-1
    8020c210:	0efc8663          	beq	s9,a5,8020c2fc <do_mmap+0x1ac>
    {
        mmap_sz = f->ep->file_size - offset;
    8020c214:	018c3783          	ld	a5,24(s8) # 18018 <_entry-0x801e7fe8>
    8020c218:	1087ac83          	lw	s9,264(a5)
        if(len < mmap_sz)
            mmap_sz = len;
        f->off = offset;
    8020c21c:	033c3c23          	sd	s3,56(s8)
        vma->mmap |= MMAP_ANONY_FLAG;
        vma->f_off = 0;
        return start;
    }

    vma->mmap = (uint64)filedup(f);
    8020c220:	8562                	mv	a0,s8
    8020c222:	ffff9097          	auipc	ra,0xffff9
    8020c226:	042080e7          	jalr	66(ra) # 80205264 <filedup>
    if(!(flags & MAP_SHARED))
    8020c22a:	8885                	andi	s1,s1,1
    8020c22c:	16048c63          	beqz	s1,8020c3a4 <do_mmap+0x254>
        mmap_sz = f->ep->file_size - offset;
    8020c230:	1c82                	slli	s9,s9,0x20
    8020c232:	020cdc93          	srli	s9,s9,0x20
    8020c236:	413c89b3          	sub	s3,s9,s3
    8020c23a:	0149f363          	bgeu	s3,s4,8020c240 <do_mmap+0xf0>
    8020c23e:	8a4e                	mv	s4,s3
    {
        return start;
    }
    vma->mmap |= MMAP_SHARE_FLAG;
    8020c240:	00156513          	ori	a0,a0,1
    8020c244:	02a93023          	sd	a0,32(s2)
    
    // read and copy file to memory
    uint64 end_pagespace = mmap_sz % PGSIZE;
    8020c248:	6785                	lui	a5,0x1
    8020c24a:	17fd                	addi	a5,a5,-1
    8020c24c:	00fa7d33          	and	s10,s4,a5
    int page_n = PGROUNDUP(mmap_sz) >> PGSHIFT;
    8020c250:	9a3e                	add	s4,s4,a5
    8020c252:	00ca5a13          	srli	s4,s4,0xc
    8020c256:	2a01                	sext.w	s4,s4
    uint64 va = start;

    for(int i = 0; i < page_n; ++i)
    8020c258:	0b405e63          	blez	s4,8020c314 <do_mmap+0x1c4>
    uint64 va = start;
    8020c25c:	8956                	mv	s2,s5
    for(int i = 0; i < page_n; ++i)
    8020c25e:	4981                	li	s3,0
        if(pa == NULL)
        {
            __debug_warn("[do_mmap] va = %p, pa not found\n", va);
            return -1;
        }
        if(i != page_n - 1)
    8020c260:	fffa0c9b          	addiw	s9,s4,-1
        {
            fileread(f, va, PGSIZE);
        }
        else 
        {
            fileread(f, va, end_pagespace);
    8020c264:	000d0d9b          	sext.w	s11,s10
            memset((void *)(pa + end_pagespace), 0, PGSIZE - end_pagespace);
    8020c268:	6785                	lui	a5,0x1
    8020c26a:	41a787bb          	subw	a5,a5,s10
    8020c26e:	f8f43423          	sd	a5,-120(s0)
    8020c272:	a229                	j	8020c37c <do_mmap+0x22c>
        __debug_warn("[do_mmap] fd illegal, fd = %d\n", fd);
    8020c274:	85e6                	mv	a1,s9
    8020c276:	00007517          	auipc	a0,0x7
    8020c27a:	2aa50513          	addi	a0,a0,682 # 80213520 <vma_type+0x48>
    8020c27e:	ffffd097          	auipc	ra,0xffffd
    8020c282:	83e080e7          	jalr	-1986(ra) # 80208abc <__debug_warn>
        return -1;
    8020c286:	5afd                	li	s5,-1
    8020c288:	a071                	j	8020c314 <do_mmap+0x1c4>
        __debug_warn("[do_mmap] fd illegal, fd(%d) > NOFILEMAX(%d)\n", fd, NOFILEMAX(p));
    8020c28a:	85e6                	mv	a1,s9
    8020c28c:	00007517          	auipc	a0,0x7
    8020c290:	2b450513          	addi	a0,a0,692 # 80213540 <vma_type+0x68>
    8020c294:	ffffd097          	auipc	ra,0xffffd
    8020c298:	828080e7          	jalr	-2008(ra) # 80208abc <__debug_warn>
        return -1;
    8020c29c:	5afd                	li	s5,-1
    8020c29e:	a89d                	j	8020c314 <do_mmap+0x1c4>
        fd = -1;
    8020c2a0:	5cfd                	li	s9,-1
    8020c2a2:	b701                	j	8020c1a2 <do_mmap+0x52>
        __debug_warn("[do_mmap] offset illegal, offset = %d\n", offset);
    8020c2a4:	85ce                	mv	a1,s3
    8020c2a6:	00007517          	auipc	a0,0x7
    8020c2aa:	2ca50513          	addi	a0,a0,714 # 80213570 <vma_type+0x98>
    8020c2ae:	ffffd097          	auipc	ra,0xffffd
    8020c2b2:	80e080e7          	jalr	-2034(ra) # 80208abc <__debug_warn>
        return -1;
    8020c2b6:	5afd                	li	s5,-1
    8020c2b8:	a8b1                	j	8020c314 <do_mmap+0x1c4>
        __debug_warn("[do_mmap] mmap start address not aligned\n");
    8020c2ba:	00007517          	auipc	a0,0x7
    8020c2be:	2de50513          	addi	a0,a0,734 # 80213598 <vma_type+0xc0>
    8020c2c2:	ffffc097          	auipc	ra,0xffffc
    8020c2c6:	7fa080e7          	jalr	2042(ra) # 80208abc <__debug_warn>
        return -1;
    8020c2ca:	5afd                	li	s5,-1
    8020c2cc:	a0a1                	j	8020c314 <do_mmap+0x1c4>
        __debug_warn("[do_mmap] mmap file illegal\n");
    8020c2ce:	00007517          	auipc	a0,0x7
    8020c2d2:	2fa50513          	addi	a0,a0,762 # 802135c8 <vma_type+0xf0>
    8020c2d6:	ffffc097          	auipc	ra,0xffffc
    8020c2da:	7e6080e7          	jalr	2022(ra) # 80208abc <__debug_warn>
        return -1;
    8020c2de:	5afd                	li	s5,-1
    8020c2e0:	a815                	j	8020c314 <do_mmap+0x1c4>
    struct file *f = fd == -1 ? NULL : p->ofile[fd];
    8020c2e2:	4c01                	li	s8,0
    8020c2e4:	b711                	j	8020c1e8 <do_mmap+0x98>
        vma = (struct vma *)do_mmap_fix(start, len, flags, fd, offset);
    8020c2e6:	874e                	mv	a4,s3
    8020c2e8:	86e6                	mv	a3,s9
    8020c2ea:	8626                	mv	a2,s1
    8020c2ec:	85d2                	mv	a1,s4
    8020c2ee:	8556                	mv	a0,s5
    8020c2f0:	00000097          	auipc	ra,0x0
    8020c2f4:	dd0080e7          	jalr	-560(ra) # 8020c0c0 <do_mmap_fix>
    8020c2f8:	892a                	mv	s2,a0
        goto skip_vma;
    8020c2fa:	bf11                	j	8020c20e <do_mmap+0xbe>
        if (flags & MAP_SHARED) {
    8020c2fc:	8885                	andi	s1,s1,1
    8020c2fe:	e89d                	bnez	s1,8020c334 <do_mmap+0x1e4>
        vma->mmap = NULL;
    8020c300:	02093023          	sd	zero,32(s2)
        vma->mmap |= MMAP_ANONY_FLAG;
    8020c304:	02093783          	ld	a5,32(s2)
    8020c308:	0027e793          	ori	a5,a5,2
    8020c30c:	02f93023          	sd	a5,32(s2)
        vma->f_off = 0;
    8020c310:	02093823          	sd	zero,48(s2)
        }
        va += PGSIZE;
    }

    return start;
}
    8020c314:	8556                	mv	a0,s5
    8020c316:	70e6                	ld	ra,120(sp)
    8020c318:	7446                	ld	s0,112(sp)
    8020c31a:	74a6                	ld	s1,104(sp)
    8020c31c:	7906                	ld	s2,96(sp)
    8020c31e:	69e6                	ld	s3,88(sp)
    8020c320:	6a46                	ld	s4,80(sp)
    8020c322:	6aa6                	ld	s5,72(sp)
    8020c324:	6b06                	ld	s6,64(sp)
    8020c326:	7be2                	ld	s7,56(sp)
    8020c328:	7c42                	ld	s8,48(sp)
    8020c32a:	7ca2                	ld	s9,40(sp)
    8020c32c:	7d02                	ld	s10,32(sp)
    8020c32e:	6de2                	ld	s11,24(sp)
    8020c330:	6109                	addi	sp,sp,128
    8020c332:	8082                	ret
            vma->mmap |= MMAP_SHARE_FLAG;
    8020c334:	4785                	li	a5,1
    8020c336:	02f93023          	sd	a5,32(s2)
    8020c33a:	b7e9                	j	8020c304 <do_mmap+0x1b4>
            __debug_warn("[do_mmap] va = %p, pa not found\n", va);
    8020c33c:	85ca                	mv	a1,s2
    8020c33e:	00007517          	auipc	a0,0x7
    8020c342:	2aa50513          	addi	a0,a0,682 # 802135e8 <vma_type+0x110>
    8020c346:	ffffc097          	auipc	ra,0xffffc
    8020c34a:	776080e7          	jalr	1910(ra) # 80208abc <__debug_warn>
            return -1;
    8020c34e:	5afd                	li	s5,-1
    8020c350:	b7d1                	j	8020c314 <do_mmap+0x1c4>
            fileread(f, va, end_pagespace);
    8020c352:	866e                	mv	a2,s11
    8020c354:	85ca                	mv	a1,s2
    8020c356:	8562                	mv	a0,s8
    8020c358:	ffff9097          	auipc	ra,0xffff9
    8020c35c:	44a080e7          	jalr	1098(ra) # 802057a2 <fileread>
            memset((void *)(pa + end_pagespace), 0, PGSIZE - end_pagespace);
    8020c360:	f8843603          	ld	a2,-120(s0)
    8020c364:	4581                	li	a1,0
    8020c366:	009d0533          	add	a0,s10,s1
    8020c36a:	ffff5097          	auipc	ra,0xffff5
    8020c36e:	a0a080e7          	jalr	-1526(ra) # 80200d74 <memset>
        va += PGSIZE;
    8020c372:	6785                	lui	a5,0x1
    8020c374:	993e                	add	s2,s2,a5
    for(int i = 0; i < page_n; ++i)
    8020c376:	2985                	addiw	s3,s3,1
    8020c378:	f93a0ee3          	beq	s4,s3,8020c314 <do_mmap+0x1c4>
        uint64 pa = experm(p->pagetable, va, perm);
    8020c37c:	865e                	mv	a2,s7
    8020c37e:	85ca                	mv	a1,s2
    8020c380:	060b3503          	ld	a0,96(s6)
    8020c384:	ffffd097          	auipc	ra,0xffffd
    8020c388:	78a080e7          	jalr	1930(ra) # 80209b0e <experm>
    8020c38c:	84aa                	mv	s1,a0
        if(pa == NULL)
    8020c38e:	d55d                	beqz	a0,8020c33c <do_mmap+0x1ec>
        if(i != page_n - 1)
    8020c390:	fd3c81e3          	beq	s9,s3,8020c352 <do_mmap+0x202>
            fileread(f, va, PGSIZE);
    8020c394:	6605                	lui	a2,0x1
    8020c396:	85ca                	mv	a1,s2
    8020c398:	8562                	mv	a0,s8
    8020c39a:	ffff9097          	auipc	ra,0xffff9
    8020c39e:	408080e7          	jalr	1032(ra) # 802057a2 <fileread>
    8020c3a2:	bfc1                	j	8020c372 <do_mmap+0x222>
    vma->mmap = (uint64)filedup(f);
    8020c3a4:	02a93023          	sd	a0,32(s2)
    8020c3a8:	b7b5                	j	8020c314 <do_mmap+0x1c4>

000000008020c3aa <do_munmap_fix>:

map_fix* do_munmap_fix(struct proc* p,uint64 start, uint64 len){
    8020c3aa:	1141                	addi	sp,sp,-16
    8020c3ac:	e422                	sd	s0,8(sp)
    8020c3ae:	0800                	addi	s0,sp,16
    map_fix* i = p->mf;
    8020c3b0:	18053783          	ld	a5,384(a0)
    map_fix* last = NULL;
    while(i){
    8020c3b4:	cb95                	beqz	a5,8020c3e8 <do_munmap_fix+0x3e>
    8020c3b6:	882a                	mv	a6,a0
    map_fix* last = NULL;
    8020c3b8:	4681                	li	a3,0
    8020c3ba:	a029                	j	8020c3c4 <do_munmap_fix+0x1a>
        if(i->addr==start&&i->sz == len){
            goto success;
        }
        last = i;
        i = i->next;
    8020c3bc:	63a8                	ld	a0,64(a5)
    while(i){
    8020c3be:	86be                	mv	a3,a5
    8020c3c0:	cd01                	beqz	a0,8020c3d8 <do_munmap_fix+0x2e>
        i = i->next;
    8020c3c2:	87aa                	mv	a5,a0
        if(i->addr==start&&i->sz == len){
    8020c3c4:	6798                	ld	a4,8(a5)
    8020c3c6:	feb71be3          	bne	a4,a1,8020c3bc <do_munmap_fix+0x12>
    8020c3ca:	6b98                	ld	a4,16(a5)
    8020c3cc:	fec718e3          	bne	a4,a2,8020c3bc <do_munmap_fix+0x12>
    }
    return NULL;
success:
    if(last)last->next = i->next;
    8020c3d0:	c699                	beqz	a3,8020c3de <do_munmap_fix+0x34>
    8020c3d2:	63b8                	ld	a4,64(a5)
    8020c3d4:	e2b8                	sd	a4,64(a3)
    8020c3d6:	853e                	mv	a0,a5
    else p->mf = i->next;
    return i;
}
    8020c3d8:	6422                	ld	s0,8(sp)
    8020c3da:	0141                	addi	sp,sp,16
    8020c3dc:	8082                	ret
    else p->mf = i->next;
    8020c3de:	63b8                	ld	a4,64(a5)
    8020c3e0:	18e83023          	sd	a4,384(a6)
    8020c3e4:	853e                	mv	a0,a5
    8020c3e6:	bfcd                	j	8020c3d8 <do_munmap_fix+0x2e>
    return NULL;
    8020c3e8:	853e                	mv	a0,a5
    8020c3ea:	b7fd                	j	8020c3d8 <do_munmap_fix+0x2e>

000000008020c3ec <find_map_fix>:

map_fix * find_map_fix(struct proc *p, uint64 start, uint64 len)
{
    8020c3ec:	1141                	addi	sp,sp,-16
    8020c3ee:	e422                	sd	s0,8(sp)
    8020c3f0:	0800                	addi	s0,sp,16
  map_fix *i = p->mf;
    8020c3f2:	18053503          	ld	a0,384(a0)
  while(i)
    8020c3f6:	e501                	bnez	a0,8020c3fe <find_map_fix+0x12>
    8020c3f8:	a809                	j	8020c40a <find_map_fix+0x1e>
  {
    if(i->addr == start && len <= i->sz)
    {
      return i;
    }
    i = i->next;
    8020c3fa:	6128                	ld	a0,64(a0)
  while(i)
    8020c3fc:	c519                	beqz	a0,8020c40a <find_map_fix+0x1e>
    if(i->addr == start && len <= i->sz)
    8020c3fe:	651c                	ld	a5,8(a0)
    8020c400:	feb79de3          	bne	a5,a1,8020c3fa <find_map_fix+0xe>
    8020c404:	691c                	ld	a5,16(a0)
    8020c406:	fec7eae3          	bltu	a5,a2,8020c3fa <find_map_fix+0xe>
  }
  return NULL;
}
    8020c40a:	6422                	ld	s0,8(sp)
    8020c40c:	0141                	addi	sp,sp,16
    8020c40e:	8082                	ret

000000008020c410 <do_munmap>:

uint64 do_munmap(struct proc* np,uint64 start, uint64 len)
{
    8020c410:	7159                	addi	sp,sp,-112
    8020c412:	f486                	sd	ra,104(sp)
    8020c414:	f0a2                	sd	s0,96(sp)
    8020c416:	eca6                	sd	s1,88(sp)
    8020c418:	e8ca                	sd	s2,80(sp)
    8020c41a:	e4ce                	sd	s3,72(sp)
    8020c41c:	e0d2                	sd	s4,64(sp)
    8020c41e:	fc56                	sd	s5,56(sp)
    8020c420:	f85a                	sd	s6,48(sp)
    8020c422:	f45e                	sd	s7,40(sp)
    8020c424:	f062                	sd	s8,32(sp)
    8020c426:	ec66                	sd	s9,24(sp)
    8020c428:	e86a                	sd	s10,16(sp)
    8020c42a:	e46e                	sd	s11,8(sp)
    8020c42c:	1880                	addi	s0,sp,112
    8020c42e:	8a2a                	mv	s4,a0
    8020c430:	84ae                	mv	s1,a1
    8020c432:	8932                	mv	s2,a2
    struct proc *p = np?np:myproc();
    8020c434:	cd25                	beqz	a0,8020c4ac <do_munmap+0x9c>
    map_fix* mf = do_munmap_fix(p,start,len);
    8020c436:	864a                	mv	a2,s2
    8020c438:	85a6                	mv	a1,s1
    8020c43a:	8552                	mv	a0,s4
    8020c43c:	00000097          	auipc	ra,0x0
    8020c440:	f6e080e7          	jalr	-146(ra) # 8020c3aa <do_munmap_fix>
    8020c444:	8baa                	mv	s7,a0
    struct vma *vma = mf ? mf : addr_sz_locate_vma(p->vma, start, len);
    8020c446:	8caa                	mv	s9,a0
    8020c448:	c925                	beqz	a0,8020c4b8 <do_munmap+0xa8>

    if(vma == NULL || vma->type != MMAP)
    8020c44a:	000ca703          	lw	a4,0(s9)
    8020c44e:	4799                	li	a5,6
    8020c450:	06f71e63          	bne	a4,a5,8020c4cc <do_munmap+0xbc>
    {
        __debug_warn("[do_munmap] munmap address/sz illegal\n");
        return -1;
    }

    if(vma->fd == -1||(vma->mmap & MAP_PRIVATE))
    8020c454:	02cca703          	lw	a4,44(s9)
    8020c458:	57fd                	li	a5,-1
    8020c45a:	12f70463          	beq	a4,a5,8020c582 <do_munmap+0x172>
    8020c45e:	020cb783          	ld	a5,32(s9)
    8020c462:	0027f713          	andi	a4,a5,2
    8020c466:	10071e63          	bnez	a4,8020c582 <do_munmap+0x172>
    {
        goto ignore_wb;
    }

    struct file *f = (struct file *)MMAP_FILE(vma->mmap);
    8020c46a:	ffc7f713          	andi	a4,a5,-4
    if(f == NULL)
    8020c46e:	10070a63          	beqz	a4,8020c582 <do_munmap+0x172>
    struct file *f = (struct file *)MMAP_FILE(vma->mmap);
    8020c472:	8d3a                	mv	s10,a4
        goto ignore_wb;
    }

    uint64 pa, size, total_size = len;
    uint64 va = start;
    int page_n = (vma->end - vma->addr) >> PGSHIFT;
    8020c474:	018cb783          	ld	a5,24(s9)
    8020c478:	008cb683          	ld	a3,8(s9)
    8020c47c:	8f95                	sub	a5,a5,a3
    8020c47e:	83b1                	srli	a5,a5,0xc

    f->off = vma->f_off;
    8020c480:	030cb683          	ld	a3,48(s9)
    8020c484:	ff14                	sd	a3,56(a4)

    for(int i = 0; i < page_n; ++i)
    8020c486:	0007871b          	sext.w	a4,a5
    8020c48a:	0ee05c63          	blez	a4,8020c582 <do_munmap+0x172>
    8020c48e:	fff78c1b          	addiw	s8,a5,-1
    8020c492:	1c02                	slli	s8,s8,0x20
    8020c494:	020c5c13          	srli	s8,s8,0x20
    8020c498:	0c32                	slli	s8,s8,0xc
    8020c49a:	6785                	lui	a5,0x1
    8020c49c:	97a6                	add	a5,a5,s1
    8020c49e:	9c3e                	add	s8,s8,a5
    {
        size = total_size >= PGSIZE ? PGSIZE : total_size;
    8020c4a0:	6b05                	lui	s6,0x1
            __debug_warn("[do_munmap] page not valid\n");
            return -1;
        }
        if((*pte & PTE_U) == 0)
        {
            __debug_warn("[do_munmap] page is not user mode\n");
    8020c4a2:	00007d97          	auipc	s11,0x7
    8020c4a6:	1b6d8d93          	addi	s11,s11,438 # 80213658 <vma_type+0x180>
    8020c4aa:	a841                	j	8020c53a <do_munmap+0x12a>
    struct proc *p = np?np:myproc();
    8020c4ac:	fffff097          	auipc	ra,0xfffff
    8020c4b0:	fa0080e7          	jalr	-96(ra) # 8020b44c <myproc>
    8020c4b4:	8a2a                	mv	s4,a0
    8020c4b6:	b741                	j	8020c436 <do_munmap+0x26>
    struct vma *vma = mf ? mf : addr_sz_locate_vma(p->vma, start, len);
    8020c4b8:	864a                	mv	a2,s2
    8020c4ba:	85a6                	mv	a1,s1
    8020c4bc:	170a3503          	ld	a0,368(s4)
    8020c4c0:	fffff097          	auipc	ra,0xfffff
    8020c4c4:	700080e7          	jalr	1792(ra) # 8020bbc0 <addr_sz_locate_vma>
    8020c4c8:	8caa                	mv	s9,a0
    if(vma == NULL || vma->type != MMAP)
    8020c4ca:	f141                	bnez	a0,8020c44a <do_munmap+0x3a>
        __debug_warn("[do_munmap] munmap address/sz illegal\n");
    8020c4cc:	00007517          	auipc	a0,0x7
    8020c4d0:	14450513          	addi	a0,a0,324 # 80213610 <vma_type+0x138>
    8020c4d4:	ffffc097          	auipc	ra,0xffffc
    8020c4d8:	5e8080e7          	jalr	1512(ra) # 80208abc <__debug_warn>
        return -1;
    8020c4dc:	557d                	li	a0,-1
        kfree(mf);
    }

    return 0;

}
    8020c4de:	70a6                	ld	ra,104(sp)
    8020c4e0:	7406                	ld	s0,96(sp)
    8020c4e2:	64e6                	ld	s1,88(sp)
    8020c4e4:	6946                	ld	s2,80(sp)
    8020c4e6:	69a6                	ld	s3,72(sp)
    8020c4e8:	6a06                	ld	s4,64(sp)
    8020c4ea:	7ae2                	ld	s5,56(sp)
    8020c4ec:	7b42                	ld	s6,48(sp)
    8020c4ee:	7ba2                	ld	s7,40(sp)
    8020c4f0:	7c02                	ld	s8,32(sp)
    8020c4f2:	6ce2                	ld	s9,24(sp)
    8020c4f4:	6d42                	ld	s10,16(sp)
    8020c4f6:	6da2                	ld	s11,8(sp)
    8020c4f8:	6165                	addi	sp,sp,112
    8020c4fa:	8082                	ret
            __debug_warn("[do_munmap] page not valid\n");
    8020c4fc:	00007517          	auipc	a0,0x7
    8020c500:	13c50513          	addi	a0,a0,316 # 80213638 <vma_type+0x160>
    8020c504:	ffffc097          	auipc	ra,0xffffc
    8020c508:	5b8080e7          	jalr	1464(ra) # 80208abc <__debug_warn>
            return -1;
    8020c50c:	557d                	li	a0,-1
    8020c50e:	bfc1                	j	8020c4de <do_munmap+0xce>
            __debug_warn("[do_munmap] page is not user mode\n");
    8020c510:	856e                	mv	a0,s11
    8020c512:	ffffc097          	auipc	ra,0xffffc
    8020c516:	5aa080e7          	jalr	1450(ra) # 80208abc <__debug_warn>
    8020c51a:	a099                	j	8020c560 <do_munmap+0x150>
                __debug_warn("[do_munmap] page' pa is 0\n");
    8020c51c:	00007517          	auipc	a0,0x7
    8020c520:	16450513          	addi	a0,a0,356 # 80213680 <vma_type+0x1a8>
    8020c524:	ffffc097          	auipc	ra,0xffffc
    8020c528:	598080e7          	jalr	1432(ra) # 80208abc <__debug_warn>
                return -1;
    8020c52c:	557d                	li	a0,-1
    8020c52e:	bf45                	j	8020c4de <do_munmap+0xce>
        va += PGSIZE;
    8020c530:	94da                	add	s1,s1,s6
        total_size -= size;
    8020c532:	41590933          	sub	s2,s2,s5
    for(int i = 0; i < page_n; ++i)
    8020c536:	049c0663          	beq	s8,s1,8020c582 <do_munmap+0x172>
        size = total_size >= PGSIZE ? PGSIZE : total_size;
    8020c53a:	8aca                	mv	s5,s2
    8020c53c:	012b7363          	bgeu	s6,s2,8020c542 <do_munmap+0x132>
    8020c540:	8ada                	mv	s5,s6
        pte_t * pte = walk(p->pagetable, va, 0);
    8020c542:	4601                	li	a2,0
    8020c544:	85a6                	mv	a1,s1
    8020c546:	060a3503          	ld	a0,96(s4)
    8020c54a:	ffffd097          	auipc	ra,0xffffd
    8020c54e:	228080e7          	jalr	552(ra) # 80209772 <walk>
    8020c552:	89aa                	mv	s3,a0
        if((*pte & PTE_V) == 0)
    8020c554:	611c                	ld	a5,0(a0)
    8020c556:	0017f713          	andi	a4,a5,1
    8020c55a:	d34d                	beqz	a4,8020c4fc <do_munmap+0xec>
        if((*pte & PTE_U) == 0)
    8020c55c:	8bc1                	andi	a5,a5,16
    8020c55e:	dbcd                	beqz	a5,8020c510 <do_munmap+0x100>
        if(*pte & PTE_D){       // write back when PTE_D bit is 1
    8020c560:	0009b783          	ld	a5,0(s3)
    8020c564:	0807f713          	andi	a4,a5,128
    8020c568:	d761                	beqz	a4,8020c530 <do_munmap+0x120>
            pa = PTE2PA(*pte);
    8020c56a:	83a9                	srli	a5,a5,0xa
    8020c56c:	07b2                	slli	a5,a5,0xc
            if(!pa){
    8020c56e:	d7dd                	beqz	a5,8020c51c <do_munmap+0x10c>
            filewrite(f, va, size);
    8020c570:	000a861b          	sext.w	a2,s5
    8020c574:	85a6                	mv	a1,s1
    8020c576:	856a                	mv	a0,s10
    8020c578:	ffff9097          	auipc	ra,0xffff9
    8020c57c:	340080e7          	jalr	832(ra) # 802058b8 <filewrite>
    8020c580:	bf45                	j	8020c530 <do_munmap+0x120>
    if(!mf && free_vma(p, vma) == 0)
    8020c582:	000b8963          	beqz	s7,8020c594 <do_munmap+0x184>
        kfree(mf);
    8020c586:	855e                	mv	a0,s7
    8020c588:	ffffd097          	auipc	ra,0xffffd
    8020c58c:	0ca080e7          	jalr	202(ra) # 80209652 <kfree>
    return 0;
    8020c590:	4501                	li	a0,0
    8020c592:	b7b1                	j	8020c4de <do_munmap+0xce>
    if(!mf && free_vma(p, vma) == 0)
    8020c594:	85e6                	mv	a1,s9
    8020c596:	8552                	mv	a0,s4
    8020c598:	fffff097          	auipc	ra,0xfffff
    8020c59c:	674080e7          	jalr	1652(ra) # 8020bc0c <free_vma>
    8020c5a0:	87aa                	mv	a5,a0
    return 0;
    8020c5a2:	4501                	li	a0,0
    if(!mf && free_vma(p, vma) == 0)
    8020c5a4:	ff8d                	bnez	a5,8020c4de <do_munmap+0xce>
        __debug_warn("[do_munmap] free vma failed\n");
    8020c5a6:	00007517          	auipc	a0,0x7
    8020c5aa:	0fa50513          	addi	a0,a0,250 # 802136a0 <vma_type+0x1c8>
    8020c5ae:	ffffc097          	auipc	ra,0xffffc
    8020c5b2:	50e080e7          	jalr	1294(ra) # 80208abc <__debug_warn>
        return -1;
    8020c5b6:	557d                	li	a0,-1
    8020c5b8:	b71d                	j	8020c4de <do_munmap+0xce>

000000008020c5ba <free_map_fix>:

void
free_map_fix(struct proc* p){
    8020c5ba:	1101                	addi	sp,sp,-32
    8020c5bc:	ec06                	sd	ra,24(sp)
    8020c5be:	e822                	sd	s0,16(sp)
    8020c5c0:	e426                	sd	s1,8(sp)
    8020c5c2:	e04a                	sd	s2,0(sp)
    8020c5c4:	1000                	addi	s0,sp,32
    8020c5c6:	892a                	mv	s2,a0
    map_fix* mf = p->mf;
    8020c5c8:	18053483          	ld	s1,384(a0)
	map_fix* i = mf;
    map_fix* next;
    while(i){
    8020c5cc:	c899                	beqz	s1,8020c5e2 <free_map_fix+0x28>
        next = i->next;
    8020c5ce:	87a6                	mv	a5,s1
    8020c5d0:	60a4                	ld	s1,64(s1)
        do_munmap(p,i->addr,i->sz);
    8020c5d2:	6b90                	ld	a2,16(a5)
    8020c5d4:	678c                	ld	a1,8(a5)
    8020c5d6:	854a                	mv	a0,s2
    8020c5d8:	00000097          	auipc	ra,0x0
    8020c5dc:	e38080e7          	jalr	-456(ra) # 8020c410 <do_munmap>
    while(i){
    8020c5e0:	f4fd                	bnez	s1,8020c5ce <free_map_fix+0x14>
        i = next;
    }
}
    8020c5e2:	60e2                	ld	ra,24(sp)
    8020c5e4:	6442                	ld	s0,16(sp)
    8020c5e6:	64a2                	ld	s1,8(sp)
    8020c5e8:	6902                	ld	s2,0(sp)
    8020c5ea:	6105                	addi	sp,sp,32
    8020c5ec:	8082                	ret

000000008020c5ee <do_msync>:


int do_msync(uint64 addr, uint64 len, int flags)
{
    8020c5ee:	711d                	addi	sp,sp,-96
    8020c5f0:	ec86                	sd	ra,88(sp)
    8020c5f2:	e8a2                	sd	s0,80(sp)
    8020c5f4:	e4a6                	sd	s1,72(sp)
    8020c5f6:	e0ca                	sd	s2,64(sp)
    8020c5f8:	fc4e                	sd	s3,56(sp)
    8020c5fa:	f852                	sd	s4,48(sp)
    8020c5fc:	f456                	sd	s5,40(sp)
    8020c5fe:	f05a                	sd	s6,32(sp)
    8020c600:	ec5e                	sd	s7,24(sp)
    8020c602:	e862                	sd	s8,16(sp)
    8020c604:	e466                	sd	s9,8(sp)
    8020c606:	1080                	addi	s0,sp,96
    8020c608:	84aa                	mv	s1,a0
    8020c60a:	892e                	mv	s2,a1
    struct proc *p = myproc();
    8020c60c:	fffff097          	auipc	ra,0xfffff
    8020c610:	e40080e7          	jalr	-448(ra) # 8020b44c <myproc>
    8020c614:	8b2a                	mv	s6,a0
    struct vma *s = part_locate_vma(p->vma, addr, addr + len);
    8020c616:	01248633          	add	a2,s1,s2
    8020c61a:	85a6                	mv	a1,s1
    8020c61c:	17053503          	ld	a0,368(a0)
    8020c620:	fffff097          	auipc	ra,0xfffff
    8020c624:	040080e7          	jalr	64(ra) # 8020b660 <part_locate_vma>
    
    if(s == NULL)
    8020c628:	c97d                	beqz	a0,8020c71e <do_msync+0x130>
    8020c62a:	87aa                	mv	a5,a0
    {
        return -EFAULT;
    }

    // private mapping and anonymous mapping can not be synchronized
    if(s->type != MMAP || MMAP_ANONY(s->mmap) || !MMAP_SHARE(s->mmap))
    8020c62c:	4114                	lw	a3,0(a0)
    8020c62e:	4719                	li	a4,6
    {
        return 0;
    8020c630:	4501                	li	a0,0
    if(s->type != MMAP || MMAP_ANONY(s->mmap) || !MMAP_SHARE(s->mmap))
    8020c632:	04e69e63          	bne	a3,a4,8020c68e <do_msync+0xa0>
    8020c636:	0207bc03          	ld	s8,32(a5) # 1020 <_entry-0x801fefe0>
    8020c63a:	003c7693          	andi	a3,s8,3
    8020c63e:	4705                	li	a4,1
    8020c640:	04e69763          	bne	a3,a4,8020c68e <do_msync+0xa0>
	// 	return -1;
	// }

    // print_vma_info(p);

    struct file *f = MMAP_FILE(s->mmap);
    8020c644:	ffcc7c13          	andi	s8,s8,-4
    uint64 pa, size, total_size = len;
    uint64 va = addr;
    int page_n = (s->end - s->addr) >> PGSHIFT;
    8020c648:	6f98                	ld	a4,24(a5)
    8020c64a:	6794                	ld	a3,8(a5)
    8020c64c:	8f15                	sub	a4,a4,a3
    8020c64e:	8331                	srli	a4,a4,0xc

    f->off = s->f_off;
    8020c650:	7b9c                	ld	a5,48(a5)
    8020c652:	02fc3c23          	sd	a5,56(s8)


    for(int i = 0; i < page_n; ++i)
    8020c656:	0007079b          	sext.w	a5,a4
    8020c65a:	0cf05463          	blez	a5,8020c722 <do_msync+0x134>
    8020c65e:	fff70b9b          	addiw	s7,a4,-1
    8020c662:	1b82                	slli	s7,s7,0x20
    8020c664:	020bdb93          	srli	s7,s7,0x20
    8020c668:	0bb2                	slli	s7,s7,0xc
    8020c66a:	6785                	lui	a5,0x1
    8020c66c:	97a6                	add	a5,a5,s1
    8020c66e:	9bbe                	add	s7,s7,a5
    {
        size = total_size >= PGSIZE ? PGSIZE : total_size;
    8020c670:	6a85                	lui	s5,0x1
            __debug_warn("[do_msync] page not valid\n");
            return -1;
        }
        if((*pte & PTE_U) == 0)
        {
            __debug_warn("[do_msync] page is not user mode\n");
    8020c672:	00007c97          	auipc	s9,0x7
    8020c676:	06ec8c93          	addi	s9,s9,110 # 802136e0 <vma_type+0x208>
    8020c67a:	a8a1                	j	8020c6d2 <do_msync+0xe4>
            __debug_warn("[do_msync] page not valid\n");
    8020c67c:	00007517          	auipc	a0,0x7
    8020c680:	04450513          	addi	a0,a0,68 # 802136c0 <vma_type+0x1e8>
    8020c684:	ffffc097          	auipc	ra,0xffffc
    8020c688:	438080e7          	jalr	1080(ra) # 80208abc <__debug_warn>
            return -1;
    8020c68c:	557d                	li	a0,-1
        va += PGSIZE;
        total_size -= size;
    }

    return 0;
}
    8020c68e:	60e6                	ld	ra,88(sp)
    8020c690:	6446                	ld	s0,80(sp)
    8020c692:	64a6                	ld	s1,72(sp)
    8020c694:	6906                	ld	s2,64(sp)
    8020c696:	79e2                	ld	s3,56(sp)
    8020c698:	7a42                	ld	s4,48(sp)
    8020c69a:	7aa2                	ld	s5,40(sp)
    8020c69c:	7b02                	ld	s6,32(sp)
    8020c69e:	6be2                	ld	s7,24(sp)
    8020c6a0:	6c42                	ld	s8,16(sp)
    8020c6a2:	6ca2                	ld	s9,8(sp)
    8020c6a4:	6125                	addi	sp,sp,96
    8020c6a6:	8082                	ret
            __debug_warn("[do_msync] page is not user mode\n");
    8020c6a8:	8566                	mv	a0,s9
    8020c6aa:	ffffc097          	auipc	ra,0xffffc
    8020c6ae:	412080e7          	jalr	1042(ra) # 80208abc <__debug_warn>
    8020c6b2:	a099                	j	8020c6f8 <do_msync+0x10a>
                __debug_warn("[do_msync] page' pa is 0\n");
    8020c6b4:	00007517          	auipc	a0,0x7
    8020c6b8:	05450513          	addi	a0,a0,84 # 80213708 <vma_type+0x230>
    8020c6bc:	ffffc097          	auipc	ra,0xffffc
    8020c6c0:	400080e7          	jalr	1024(ra) # 80208abc <__debug_warn>
                return -1;
    8020c6c4:	557d                	li	a0,-1
    8020c6c6:	b7e1                	j	8020c68e <do_msync+0xa0>
        va += PGSIZE;
    8020c6c8:	94d6                	add	s1,s1,s5
        total_size -= size;
    8020c6ca:	41490933          	sub	s2,s2,s4
    for(int i = 0; i < page_n; ++i)
    8020c6ce:	05748663          	beq	s1,s7,8020c71a <do_msync+0x12c>
        size = total_size >= PGSIZE ? PGSIZE : total_size;
    8020c6d2:	8a4a                	mv	s4,s2
    8020c6d4:	012af363          	bgeu	s5,s2,8020c6da <do_msync+0xec>
    8020c6d8:	8a56                	mv	s4,s5
        pte_t * pte = walk(p->pagetable, va, 0);
    8020c6da:	4601                	li	a2,0
    8020c6dc:	85a6                	mv	a1,s1
    8020c6de:	060b3503          	ld	a0,96(s6) # 1060 <_entry-0x801fefa0>
    8020c6e2:	ffffd097          	auipc	ra,0xffffd
    8020c6e6:	090080e7          	jalr	144(ra) # 80209772 <walk>
    8020c6ea:	89aa                	mv	s3,a0
        if((*pte & PTE_V) == 0)
    8020c6ec:	611c                	ld	a5,0(a0)
    8020c6ee:	0017f713          	andi	a4,a5,1
    8020c6f2:	d749                	beqz	a4,8020c67c <do_msync+0x8e>
        if((*pte & PTE_U) == 0)
    8020c6f4:	8bc1                	andi	a5,a5,16
    8020c6f6:	dbcd                	beqz	a5,8020c6a8 <do_msync+0xba>
        if(*pte & PTE_D){       // write back when PTE_D bit is 1
    8020c6f8:	0009b783          	ld	a5,0(s3)
    8020c6fc:	0807f713          	andi	a4,a5,128
    8020c700:	d761                	beqz	a4,8020c6c8 <do_msync+0xda>
            pa = PTE2PA(*pte);
    8020c702:	83a9                	srli	a5,a5,0xa
    8020c704:	07b2                	slli	a5,a5,0xc
            if(!pa){
    8020c706:	d7dd                	beqz	a5,8020c6b4 <do_msync+0xc6>
            filewrite(f, va, size);
    8020c708:	000a061b          	sext.w	a2,s4
    8020c70c:	85a6                	mv	a1,s1
    8020c70e:	8562                	mv	a0,s8
    8020c710:	ffff9097          	auipc	ra,0xffff9
    8020c714:	1a8080e7          	jalr	424(ra) # 802058b8 <filewrite>
    8020c718:	bf45                	j	8020c6c8 <do_msync+0xda>
    return 0;
    8020c71a:	4501                	li	a0,0
    8020c71c:	bf8d                	j	8020c68e <do_msync+0xa0>
        return -EFAULT;
    8020c71e:	5549                	li	a0,-14
    8020c720:	b7bd                	j	8020c68e <do_msync+0xa0>
    return 0;
    8020c722:	4501                	li	a0,0
    8020c724:	b7ad                	j	8020c68e <do_msync+0xa0>

000000008020c726 <argraw>:
  return strlen(buf);
}

static uint64
argraw(int n)
{
    8020c726:	1101                	addi	sp,sp,-32
    8020c728:	ec06                	sd	ra,24(sp)
    8020c72a:	e822                	sd	s0,16(sp)
    8020c72c:	e426                	sd	s1,8(sp)
    8020c72e:	1000                	addi	s0,sp,32
    8020c730:	84aa                	mv	s1,a0
  struct proc *p = myproc();
    8020c732:	fffff097          	auipc	ra,0xfffff
    8020c736:	d1a080e7          	jalr	-742(ra) # 8020b44c <myproc>
  switch (n) {
    8020c73a:	4795                	li	a5,5
    8020c73c:	0497e163          	bltu	a5,s1,8020c77e <argraw+0x58>
    8020c740:	048a                	slli	s1,s1,0x2
    8020c742:	00007717          	auipc	a4,0x7
    8020c746:	09e70713          	addi	a4,a4,158 # 802137e0 <vma_type+0x308>
    8020c74a:	94ba                	add	s1,s1,a4
    8020c74c:	409c                	lw	a5,0(s1)
    8020c74e:	97ba                	add	a5,a5,a4
    8020c750:	8782                	jr	a5
  case 0:
    return p->trapframe->a0;
    8020c752:	753c                	ld	a5,104(a0)
    8020c754:	7ba8                	ld	a0,112(a5)
  case 5:
    return p->trapframe->a5;
  }
  panic("argraw");
  return -1;
}
    8020c756:	60e2                	ld	ra,24(sp)
    8020c758:	6442                	ld	s0,16(sp)
    8020c75a:	64a2                	ld	s1,8(sp)
    8020c75c:	6105                	addi	sp,sp,32
    8020c75e:	8082                	ret
    return p->trapframe->a1;
    8020c760:	753c                	ld	a5,104(a0)
    8020c762:	7fa8                	ld	a0,120(a5)
    8020c764:	bfcd                	j	8020c756 <argraw+0x30>
    return p->trapframe->a2;
    8020c766:	753c                	ld	a5,104(a0)
    8020c768:	63c8                	ld	a0,128(a5)
    8020c76a:	b7f5                	j	8020c756 <argraw+0x30>
    return p->trapframe->a3;
    8020c76c:	753c                	ld	a5,104(a0)
    8020c76e:	67c8                	ld	a0,136(a5)
    8020c770:	b7dd                	j	8020c756 <argraw+0x30>
    return p->trapframe->a4;
    8020c772:	753c                	ld	a5,104(a0)
    8020c774:	6bc8                	ld	a0,144(a5)
    8020c776:	b7c5                	j	8020c756 <argraw+0x30>
    return p->trapframe->a5;
    8020c778:	753c                	ld	a5,104(a0)
    8020c77a:	6fc8                	ld	a0,152(a5)
    8020c77c:	bfe9                	j	8020c756 <argraw+0x30>
  panic("argraw");
    8020c77e:	00007517          	auipc	a0,0x7
    8020c782:	faa50513          	addi	a0,a0,-86 # 80213728 <vma_type+0x250>
    8020c786:	ffffc097          	auipc	ra,0xffffc
    8020c78a:	f60080e7          	jalr	-160(ra) # 802086e6 <panic>

000000008020c78e <fetchaddr>:
{
    8020c78e:	1141                	addi	sp,sp,-16
    8020c790:	e406                	sd	ra,8(sp)
    8020c792:	e022                	sd	s0,0(sp)
    8020c794:	0800                	addi	s0,sp,16
    8020c796:	862a                	mv	a2,a0
  if(either_copyin(1,(char*)ip, addr, sizeof(*ip)))
    8020c798:	46a1                	li	a3,8
    8020c79a:	4505                	li	a0,1
    8020c79c:	ffffe097          	auipc	ra,0xffffe
    8020c7a0:	720080e7          	jalr	1824(ra) # 8020aebc <either_copyin>
    8020c7a4:	00a03533          	snez	a0,a0
}
    8020c7a8:	40a00533          	neg	a0,a0
    8020c7ac:	60a2                	ld	ra,8(sp)
    8020c7ae:	6402                	ld	s0,0(sp)
    8020c7b0:	0141                	addi	sp,sp,16
    8020c7b2:	8082                	ret

000000008020c7b4 <fetchstr>:
{
    8020c7b4:	7179                	addi	sp,sp,-48
    8020c7b6:	f406                	sd	ra,40(sp)
    8020c7b8:	f022                	sd	s0,32(sp)
    8020c7ba:	ec26                	sd	s1,24(sp)
    8020c7bc:	e84a                	sd	s2,16(sp)
    8020c7be:	e44e                	sd	s3,8(sp)
    8020c7c0:	1800                	addi	s0,sp,48
    8020c7c2:	892a                	mv	s2,a0
    8020c7c4:	84ae                	mv	s1,a1
    8020c7c6:	89b2                	mv	s3,a2
  struct proc *p = myproc();
    8020c7c8:	fffff097          	auipc	ra,0xfffff
    8020c7cc:	c84080e7          	jalr	-892(ra) # 8020b44c <myproc>
  int err = copyinstr(p->pagetable, buf, addr, max);
    8020c7d0:	86ce                	mv	a3,s3
    8020c7d2:	864a                	mv	a2,s2
    8020c7d4:	85a6                	mv	a1,s1
    8020c7d6:	7128                	ld	a0,96(a0)
    8020c7d8:	ffffe097          	auipc	ra,0xffffe
    8020c7dc:	4d0080e7          	jalr	1232(ra) # 8020aca8 <copyinstr>
  if(err < 0)
    8020c7e0:	00054763          	bltz	a0,8020c7ee <fetchstr+0x3a>
  return strlen(buf);
    8020c7e4:	8526                	mv	a0,s1
    8020c7e6:	ffff4097          	auipc	ra,0xffff4
    8020c7ea:	716080e7          	jalr	1814(ra) # 80200efc <strlen>
}
    8020c7ee:	70a2                	ld	ra,40(sp)
    8020c7f0:	7402                	ld	s0,32(sp)
    8020c7f2:	64e2                	ld	s1,24(sp)
    8020c7f4:	6942                	ld	s2,16(sp)
    8020c7f6:	69a2                	ld	s3,8(sp)
    8020c7f8:	6145                	addi	sp,sp,48
    8020c7fa:	8082                	ret

000000008020c7fc <argint>:

// Fetch the nth 32-bit system call argument.
int
argint(int n, int *ip)
{
    8020c7fc:	1101                	addi	sp,sp,-32
    8020c7fe:	ec06                	sd	ra,24(sp)
    8020c800:	e822                	sd	s0,16(sp)
    8020c802:	e426                	sd	s1,8(sp)
    8020c804:	1000                	addi	s0,sp,32
    8020c806:	84ae                	mv	s1,a1
  *ip = argraw(n);
    8020c808:	00000097          	auipc	ra,0x0
    8020c80c:	f1e080e7          	jalr	-226(ra) # 8020c726 <argraw>
    8020c810:	c088                	sw	a0,0(s1)
  return 0;
}
    8020c812:	4501                	li	a0,0
    8020c814:	60e2                	ld	ra,24(sp)
    8020c816:	6442                	ld	s0,16(sp)
    8020c818:	64a2                	ld	s1,8(sp)
    8020c81a:	6105                	addi	sp,sp,32
    8020c81c:	8082                	ret

000000008020c81e <argaddr>:
// Retrieve an argument as a pointer.
// Doesn't check for legality, since
// copyin/copyout will do that.
int
argaddr(int n, uint64 *ip)
{
    8020c81e:	1101                	addi	sp,sp,-32
    8020c820:	ec06                	sd	ra,24(sp)
    8020c822:	e822                	sd	s0,16(sp)
    8020c824:	e426                	sd	s1,8(sp)
    8020c826:	1000                	addi	s0,sp,32
    8020c828:	84ae                	mv	s1,a1
  *ip = argraw(n);
    8020c82a:	00000097          	auipc	ra,0x0
    8020c82e:	efc080e7          	jalr	-260(ra) # 8020c726 <argraw>
    8020c832:	e088                	sd	a0,0(s1)
  return 0;
}
    8020c834:	4501                	li	a0,0
    8020c836:	60e2                	ld	ra,24(sp)
    8020c838:	6442                	ld	s0,16(sp)
    8020c83a:	64a2                	ld	s1,8(sp)
    8020c83c:	6105                	addi	sp,sp,32
    8020c83e:	8082                	ret

000000008020c840 <argstr>:
// Fetch the nth word-sized system call argument as a null-terminated string.
// Copies into buf, at most max.
// Returns string length if OK (including nul), -1 if error.
int
argstr(int n, char *buf, int max)
{
    8020c840:	1101                	addi	sp,sp,-32
    8020c842:	ec06                	sd	ra,24(sp)
    8020c844:	e822                	sd	s0,16(sp)
    8020c846:	e426                	sd	s1,8(sp)
    8020c848:	e04a                	sd	s2,0(sp)
    8020c84a:	1000                	addi	s0,sp,32
    8020c84c:	84ae                	mv	s1,a1
    8020c84e:	8932                	mv	s2,a2
  *ip = argraw(n);
    8020c850:	00000097          	auipc	ra,0x0
    8020c854:	ed6080e7          	jalr	-298(ra) # 8020c726 <argraw>
  uint64 addr;
  if(argaddr(n, &addr) < 0)
    return -1;
  //printf("[argstr] str addr:%p\n");
  return fetchstr(addr, buf, max);
    8020c858:	864a                	mv	a2,s2
    8020c85a:	85a6                	mv	a1,s1
    8020c85c:	00000097          	auipc	ra,0x0
    8020c860:	f58080e7          	jalr	-168(ra) # 8020c7b4 <fetchstr>
}
    8020c864:	60e2                	ld	ra,24(sp)
    8020c866:	6442                	ld	s0,16(sp)
    8020c868:	64a2                	ld	s1,8(sp)
    8020c86a:	6902                	ld	s2,0(sp)
    8020c86c:	6105                	addi	sp,sp,32
    8020c86e:	8082                	ret

000000008020c870 <argfd>:

int
argfd(int n, int *pfd, struct file **pf)
{
    8020c870:	7179                	addi	sp,sp,-48
    8020c872:	f406                	sd	ra,40(sp)
    8020c874:	f022                	sd	s0,32(sp)
    8020c876:	ec26                	sd	s1,24(sp)
    8020c878:	e84a                	sd	s2,16(sp)
    8020c87a:	e44e                	sd	s3,8(sp)
    8020c87c:	e052                	sd	s4,0(sp)
    8020c87e:	1800                	addi	s0,sp,48
    8020c880:	8a2a                	mv	s4,a0
    8020c882:	84b2                	mv	s1,a2
  int fd = -1;
  struct file *f = NULL;
  if(pfd)*pfd = -1;
    8020c884:	c1dd                	beqz	a1,8020c92a <argfd+0xba>
    8020c886:	892e                	mv	s2,a1
    8020c888:	57fd                	li	a5,-1
    8020c88a:	c19c                	sw	a5,0(a1)
  if(pf)*pf = NULL;
    8020c88c:	c62d                	beqz	a2,8020c8f6 <argfd+0x86>
    8020c88e:	00063023          	sd	zero,0(a2) # 1000 <_entry-0x801ff000>
  struct proc* p = myproc();
    8020c892:	fffff097          	auipc	ra,0xfffff
    8020c896:	bba080e7          	jalr	-1094(ra) # 8020b44c <myproc>
    8020c89a:	89aa                	mv	s3,a0
  *ip = argraw(n);
    8020c89c:	8552                	mv	a0,s4
    8020c89e:	00000097          	auipc	ra,0x0
    8020c8a2:	e88080e7          	jalr	-376(ra) # 8020c726 <argraw>
    8020c8a6:	0005079b          	sext.w	a5,a0
  if(argint(n, &fd) < 0)
    return -1;
  if(pfd)
    *pfd = fd;
    8020c8aa:	00f92023          	sw	a5,0(s2)
  if(fd < 0 || fd >= NOFILEMAX(p) || (f=p->ofile[fd]) == NULL)
    8020c8ae:	0207ce63          	bltz	a5,8020c8ea <argfd+0x7a>
    8020c8b2:	0e09b703          	ld	a4,224(s3)
    8020c8b6:	0c800693          	li	a3,200
    8020c8ba:	00e6d463          	bge	a3,a4,8020c8c2 <argfd+0x52>
    8020c8be:	0c800713          	li	a4,200
    8020c8c2:	02e7d663          	bge	a5,a4,8020c8ee <argfd+0x7e>
    8020c8c6:	0e89b703          	ld	a4,232(s3)
    8020c8ca:	00379513          	slli	a0,a5,0x3
    8020c8ce:	953a                	add	a0,a0,a4
    8020c8d0:	611c                	ld	a5,0(a0)
    8020c8d2:	c385                	beqz	a5,8020c8f2 <argfd+0x82>
    return -1;
  if(pf)
    *pf = f;
  return 0;
    8020c8d4:	4501                	li	a0,0
  if(pf)
    8020c8d6:	c091                	beqz	s1,8020c8da <argfd+0x6a>
    *pf = f;
    8020c8d8:	e09c                	sd	a5,0(s1)
}
    8020c8da:	70a2                	ld	ra,40(sp)
    8020c8dc:	7402                	ld	s0,32(sp)
    8020c8de:	64e2                	ld	s1,24(sp)
    8020c8e0:	6942                	ld	s2,16(sp)
    8020c8e2:	69a2                	ld	s3,8(sp)
    8020c8e4:	6a02                	ld	s4,0(sp)
    8020c8e6:	6145                	addi	sp,sp,48
    8020c8e8:	8082                	ret
    return -1;
    8020c8ea:	557d                	li	a0,-1
    8020c8ec:	b7fd                	j	8020c8da <argfd+0x6a>
    8020c8ee:	557d                	li	a0,-1
    8020c8f0:	b7ed                	j	8020c8da <argfd+0x6a>
    8020c8f2:	557d                	li	a0,-1
    8020c8f4:	b7dd                	j	8020c8da <argfd+0x6a>
  struct proc* p = myproc();
    8020c8f6:	fffff097          	auipc	ra,0xfffff
    8020c8fa:	b56080e7          	jalr	-1194(ra) # 8020b44c <myproc>
    8020c8fe:	89aa                	mv	s3,a0
  *ip = argraw(n);
    8020c900:	8552                	mv	a0,s4
    8020c902:	00000097          	auipc	ra,0x0
    8020c906:	e24080e7          	jalr	-476(ra) # 8020c726 <argraw>
    8020c90a:	0005079b          	sext.w	a5,a0
  if(pfd)
    8020c90e:	bf71                	j	8020c8aa <argfd+0x3a>
  struct proc* p = myproc();
    8020c910:	fffff097          	auipc	ra,0xfffff
    8020c914:	b3c080e7          	jalr	-1220(ra) # 8020b44c <myproc>
    8020c918:	89aa                	mv	s3,a0
  *ip = argraw(n);
    8020c91a:	8552                	mv	a0,s4
    8020c91c:	00000097          	auipc	ra,0x0
    8020c920:	e0a080e7          	jalr	-502(ra) # 8020c726 <argraw>
    8020c924:	0005079b          	sext.w	a5,a0
  if(pfd)
    8020c928:	b759                	j	8020c8ae <argfd+0x3e>
  if(pf)*pf = NULL;
    8020c92a:	d27d                	beqz	a2,8020c910 <argfd+0xa0>
    8020c92c:	00063023          	sd	zero,0(a2)
  struct proc* p = myproc();
    8020c930:	fffff097          	auipc	ra,0xfffff
    8020c934:	b1c080e7          	jalr	-1252(ra) # 8020b44c <myproc>
    8020c938:	89aa                	mv	s3,a0
  *ip = argraw(n);
    8020c93a:	8552                	mv	a0,s4
    8020c93c:	00000097          	auipc	ra,0x0
    8020c940:	dea080e7          	jalr	-534(ra) # 8020c726 <argraw>
    8020c944:	0005079b          	sext.w	a5,a0
  if(pfd)
    8020c948:	b79d                	j	8020c8ae <argfd+0x3e>

000000008020c94a <argstruct>:

int
argstruct(int n,void* st,int len){
    8020c94a:	7179                	addi	sp,sp,-48
    8020c94c:	f406                	sd	ra,40(sp)
    8020c94e:	f022                	sd	s0,32(sp)
    8020c950:	ec26                	sd	s1,24(sp)
    8020c952:	e84a                	sd	s2,16(sp)
    8020c954:	e44e                	sd	s3,8(sp)
    8020c956:	1800                	addi	s0,sp,48
    8020c958:	892e                	mv	s2,a1
    8020c95a:	89b2                	mv	s3,a2
  *ip = argraw(n);
    8020c95c:	00000097          	auipc	ra,0x0
    8020c960:	dca080e7          	jalr	-566(ra) # 8020c726 <argraw>
    8020c964:	84aa                	mv	s1,a0
  uint64 addr;
  if(argaddr(n,&addr)<0)return -1;
  if(addr&&copyin(myproc()->pagetable,st,addr,len)<0){
    8020c966:	e911                	bnez	a0,8020c97a <argstruct+0x30>
    return 0;
  }
  return addr;
    8020c968:	0004851b          	sext.w	a0,s1
}
    8020c96c:	70a2                	ld	ra,40(sp)
    8020c96e:	7402                	ld	s0,32(sp)
    8020c970:	64e2                	ld	s1,24(sp)
    8020c972:	6942                	ld	s2,16(sp)
    8020c974:	69a2                	ld	s3,8(sp)
    8020c976:	6145                	addi	sp,sp,48
    8020c978:	8082                	ret
  if(addr&&copyin(myproc()->pagetable,st,addr,len)<0){
    8020c97a:	fffff097          	auipc	ra,0xfffff
    8020c97e:	ad2080e7          	jalr	-1326(ra) # 8020b44c <myproc>
    8020c982:	86ce                	mv	a3,s3
    8020c984:	8626                	mv	a2,s1
    8020c986:	85ca                	mv	a1,s2
    8020c988:	7128                	ld	a0,96(a0)
    8020c98a:	ffffe097          	auipc	ra,0xffffe
    8020c98e:	240080e7          	jalr	576(ra) # 8020abca <copyin>
    8020c992:	87aa                	mv	a5,a0
    return 0;
    8020c994:	4501                	li	a0,0
  if(addr&&copyin(myproc()->pagetable,st,addr,len)<0){
    8020c996:	fc07d9e3          	bgez	a5,8020c968 <argstruct+0x1e>
    8020c99a:	bfc9                	j	8020c96c <argstruct+0x22>

000000008020c99c <freevec>:

int
freevec(char** argv,int len){
  for(int i = 0; i < len && argv[i] != 0; i++){
    8020c99c:	04b05163          	blez	a1,8020c9de <freevec+0x42>
freevec(char** argv,int len){
    8020c9a0:	1101                	addi	sp,sp,-32
    8020c9a2:	ec06                	sd	ra,24(sp)
    8020c9a4:	e822                	sd	s0,16(sp)
    8020c9a6:	e426                	sd	s1,8(sp)
    8020c9a8:	e04a                	sd	s2,0(sp)
    8020c9aa:	1000                	addi	s0,sp,32
    8020c9ac:	84aa                	mv	s1,a0
    8020c9ae:	fff5891b          	addiw	s2,a1,-1
    8020c9b2:	1902                	slli	s2,s2,0x20
    8020c9b4:	02095913          	srli	s2,s2,0x20
    8020c9b8:	090e                	slli	s2,s2,0x3
    8020c9ba:	0521                	addi	a0,a0,8
    8020c9bc:	992a                	add	s2,s2,a0
  for(int i = 0; i < len && argv[i] != 0; i++){
    8020c9be:	6088                	ld	a0,0(s1)
    8020c9c0:	c901                	beqz	a0,8020c9d0 <freevec+0x34>
    //printf("[freevec] argv[%d]=%p\n",i,argv[i]);
    kfree(argv[i]);
    8020c9c2:	ffffd097          	auipc	ra,0xffffd
    8020c9c6:	c90080e7          	jalr	-880(ra) # 80209652 <kfree>
  for(int i = 0; i < len && argv[i] != 0; i++){
    8020c9ca:	04a1                	addi	s1,s1,8
    8020c9cc:	ff2499e3          	bne	s1,s2,8020c9be <freevec+0x22>
  }
  return 0;
}
    8020c9d0:	4501                	li	a0,0
    8020c9d2:	60e2                	ld	ra,24(sp)
    8020c9d4:	6442                	ld	s0,16(sp)
    8020c9d6:	64a2                	ld	s1,8(sp)
    8020c9d8:	6902                	ld	s2,0(sp)
    8020c9da:	6105                	addi	sp,sp,32
    8020c9dc:	8082                	ret
    8020c9de:	4501                	li	a0,0
    8020c9e0:	8082                	ret

000000008020c9e2 <argstrvec>:

int
argstrvec(int n,char** argv,int max){
    8020c9e2:	715d                	addi	sp,sp,-80
    8020c9e4:	e486                	sd	ra,72(sp)
    8020c9e6:	e0a2                	sd	s0,64(sp)
    8020c9e8:	fc26                	sd	s1,56(sp)
    8020c9ea:	f84a                	sd	s2,48(sp)
    8020c9ec:	f44e                	sd	s3,40(sp)
    8020c9ee:	f052                	sd	s4,32(sp)
    8020c9f0:	ec56                	sd	s5,24(sp)
    8020c9f2:	0880                	addi	s0,sp,80
    8020c9f4:	892a                	mv	s2,a0
    8020c9f6:	89ae                	mv	s3,a1
    8020c9f8:	8a32                	mv	s4,a2
  int i = 0;
  uint64 uarg,uargv;
  memset(argv, 0, max*sizeof(uint64));
    8020c9fa:	0036161b          	slliw	a2,a2,0x3
    8020c9fe:	4581                	li	a1,0
    8020ca00:	854e                	mv	a0,s3
    8020ca02:	ffff4097          	auipc	ra,0xffff4
    8020ca06:	372080e7          	jalr	882(ra) # 80200d74 <memset>
  *ip = argraw(n);
    8020ca0a:	854a                	mv	a0,s2
    8020ca0c:	00000097          	auipc	ra,0x0
    8020ca10:	d1a080e7          	jalr	-742(ra) # 8020c726 <argraw>
  if(argaddr(n, &uargv) < 0||uargv == 0){
    8020ca14:	c16d                	beqz	a0,8020caf6 <argstrvec+0x114>
    8020ca16:	8aaa                	mv	s5,a0
    //__debug_warn("[argstrvec] uargv null\n");
    goto bad;
  }
  for(;;i++){
    if(i >= max){
    8020ca18:	4481                	li	s1,0
  int i = 0;
    8020ca1a:	4901                	li	s2,0
    if(i >= max){
    8020ca1c:	05405863          	blez	s4,8020ca6c <argstrvec+0x8a>
      __debug_warn("[argstrvec] max is too small\n");
      goto bad;
    }
    if(fetchaddr(uargv+sizeof(uint64)*i, (uint64*)&uarg) < 0){
    8020ca20:	fb840593          	addi	a1,s0,-72
    8020ca24:	01548533          	add	a0,s1,s5
    8020ca28:	00000097          	auipc	ra,0x0
    8020ca2c:	d66080e7          	jalr	-666(ra) # 8020c78e <fetchaddr>
    8020ca30:	06054863          	bltz	a0,8020caa0 <argstrvec+0xbe>
      __debug_warn("[argstrvec] uargv:%p\n",uargv);
      __debug_warn("[argstrvec] fetch argv[%d] address bad\n",i);
      goto bad;
    }
    if(uarg == 0){
    8020ca34:	fb843783          	ld	a5,-72(s0)
    8020ca38:	c7d9                	beqz	a5,8020cac6 <argstrvec+0xe4>
      argv[i] = 0;
      break;
    }
    argv[i] = kmalloc(0x100);
    8020ca3a:	10000513          	li	a0,256
    8020ca3e:	ffffd097          	auipc	ra,0xffffd
    8020ca42:	9ca080e7          	jalr	-1590(ra) # 80209408 <kmalloc>
    8020ca46:	85aa                	mv	a1,a0
    8020ca48:	009987b3          	add	a5,s3,s1
    8020ca4c:	e388                	sd	a0,0(a5)
    if(argv[i] == 0){
    8020ca4e:	c141                	beqz	a0,8020cace <argstrvec+0xec>
      __debug_warn("[argstrvec] no more space for argv[%d]\n",i);
      goto bad;
    }
    if(fetchstr(uarg, argv[i], 0x100) < 0){
    8020ca50:	10000613          	li	a2,256
    8020ca54:	fb843503          	ld	a0,-72(s0)
    8020ca58:	00000097          	auipc	ra,0x0
    8020ca5c:	d5c080e7          	jalr	-676(ra) # 8020c7b4 <fetchstr>
    8020ca60:	08054163          	bltz	a0,8020cae2 <argstrvec+0x100>
  for(;;i++){
    8020ca64:	2905                	addiw	s2,s2,1
    if(i >= max){
    8020ca66:	04a1                	addi	s1,s1,8
    8020ca68:	fb2a1ce3          	bne	s4,s2,8020ca20 <argstrvec+0x3e>
      __debug_warn("[argstrvec] max is too small\n");
    8020ca6c:	00007517          	auipc	a0,0x7
    8020ca70:	cc450513          	addi	a0,a0,-828 # 80213730 <vma_type+0x258>
    8020ca74:	ffffc097          	auipc	ra,0xffffc
    8020ca78:	048080e7          	jalr	72(ra) # 80208abc <__debug_warn>
      goto bad;
    }
  }
  return i;
bad:
  freevec(argv,i+1);
    8020ca7c:	0019059b          	addiw	a1,s2,1
    8020ca80:	854e                	mv	a0,s3
    8020ca82:	00000097          	auipc	ra,0x0
    8020ca86:	f1a080e7          	jalr	-230(ra) # 8020c99c <freevec>
  return -1;
    8020ca8a:	597d                	li	s2,-1
}
    8020ca8c:	854a                	mv	a0,s2
    8020ca8e:	60a6                	ld	ra,72(sp)
    8020ca90:	6406                	ld	s0,64(sp)
    8020ca92:	74e2                	ld	s1,56(sp)
    8020ca94:	7942                	ld	s2,48(sp)
    8020ca96:	79a2                	ld	s3,40(sp)
    8020ca98:	7a02                	ld	s4,32(sp)
    8020ca9a:	6ae2                	ld	s5,24(sp)
    8020ca9c:	6161                	addi	sp,sp,80
    8020ca9e:	8082                	ret
      __debug_warn("[argstrvec] uargv:%p\n",uargv);
    8020caa0:	85d6                	mv	a1,s5
    8020caa2:	00007517          	auipc	a0,0x7
    8020caa6:	cae50513          	addi	a0,a0,-850 # 80213750 <vma_type+0x278>
    8020caaa:	ffffc097          	auipc	ra,0xffffc
    8020caae:	012080e7          	jalr	18(ra) # 80208abc <__debug_warn>
      __debug_warn("[argstrvec] fetch argv[%d] address bad\n",i);
    8020cab2:	85ca                	mv	a1,s2
    8020cab4:	00007517          	auipc	a0,0x7
    8020cab8:	cb450513          	addi	a0,a0,-844 # 80213768 <vma_type+0x290>
    8020cabc:	ffffc097          	auipc	ra,0xffffc
    8020cac0:	000080e7          	jalr	ra # 80208abc <__debug_warn>
      goto bad;
    8020cac4:	bf65                	j	8020ca7c <argstrvec+0x9a>
      argv[i] = 0;
    8020cac6:	94ce                	add	s1,s1,s3
    8020cac8:	0004b023          	sd	zero,0(s1)
  return i;
    8020cacc:	b7c1                	j	8020ca8c <argstrvec+0xaa>
      __debug_warn("[argstrvec] no more space for argv[%d]\n",i);
    8020cace:	85ca                	mv	a1,s2
    8020cad0:	00007517          	auipc	a0,0x7
    8020cad4:	cc050513          	addi	a0,a0,-832 # 80213790 <vma_type+0x2b8>
    8020cad8:	ffffc097          	auipc	ra,0xffffc
    8020cadc:	fe4080e7          	jalr	-28(ra) # 80208abc <__debug_warn>
      goto bad;
    8020cae0:	bf71                	j	8020ca7c <argstrvec+0x9a>
      __debug_warn("[argstrvec] fetch argv[%d] string bad\n",i);
    8020cae2:	85ca                	mv	a1,s2
    8020cae4:	00007517          	auipc	a0,0x7
    8020cae8:	cd450513          	addi	a0,a0,-812 # 802137b8 <vma_type+0x2e0>
    8020caec:	ffffc097          	auipc	ra,0xffffc
    8020caf0:	fd0080e7          	jalr	-48(ra) # 80208abc <__debug_warn>
      goto bad;
    8020caf4:	b761                	j	8020ca7c <argstrvec+0x9a>
  int i = 0;
    8020caf6:	4901                	li	s2,0
    8020caf8:	b751                	j	8020ca7c <argstrvec+0x9a>

000000008020cafa <swap>:
    }
  }
  return elf->entry;
}

void swap(void* a,void* b,int len){
    8020cafa:	1141                	addi	sp,sp,-16
    8020cafc:	e422                	sd	s0,8(sp)
    8020cafe:	0800                	addi	s0,sp,16
  char c;
  char *sa = a,*sb = b;
  for(int i = 0;i<len;i++){
    8020cb00:	02c05463          	blez	a2,8020cb28 <swap+0x2e>
    8020cb04:	87aa                	mv	a5,a0
    8020cb06:	367d                	addiw	a2,a2,-1
    8020cb08:	1602                	slli	a2,a2,0x20
    8020cb0a:	9201                	srli	a2,a2,0x20
    8020cb0c:	0605                	addi	a2,a2,1
    8020cb0e:	9532                	add	a0,a0,a2
    c = sa[i];
    8020cb10:	0007c703          	lbu	a4,0(a5) # 1000 <_entry-0x801ff000>
    sa[i] = sb[i];
    8020cb14:	0005c683          	lbu	a3,0(a1)
    8020cb18:	00d78023          	sb	a3,0(a5)
    sb[i] = c;
    8020cb1c:	00e58023          	sb	a4,0(a1)
  for(int i = 0;i<len;i++){
    8020cb20:	0785                	addi	a5,a5,1
    8020cb22:	0585                	addi	a1,a1,1
    8020cb24:	fea796e3          	bne	a5,a0,8020cb10 <swap+0x16>
  }
}
    8020cb28:	6422                	ld	s0,8(sp)
    8020cb2a:	0141                	addi	sp,sp,16
    8020cb2c:	8082                	ret

000000008020cb2e <auxalloc>:

void
auxalloc(uint64* aux,uint64 atid,uint64 value)
{
    8020cb2e:	1141                	addi	sp,sp,-16
    8020cb30:	e422                	sd	s0,8(sp)
    8020cb32:	0800                	addi	s0,sp,16
  //printf("aux[%d] = %p\n",atid,value);
  uint64 argc = aux[0];
  aux[argc*2+1] = atid;
    8020cb34:	611c                	ld	a5,0(a0)
    8020cb36:	0792                	slli	a5,a5,0x4
    8020cb38:	97aa                	add	a5,a5,a0
    8020cb3a:	e78c                	sd	a1,8(a5)
  aux[argc*2+2] = value;
    8020cb3c:	eb90                	sd	a2,16(a5)
  aux[argc*2+3] = 0;
    8020cb3e:	0007bc23          	sd	zero,24(a5)
  aux[argc*2+4] = 0;
    8020cb42:	0207b023          	sd	zero,32(a5)
  aux[0]++;
    8020cb46:	611c                	ld	a5,0(a0)
    8020cb48:	0785                	addi	a5,a5,1
    8020cb4a:	e11c                	sd	a5,0(a0)
}
    8020cb4c:	6422                	ld	s0,8(sp)
    8020cb4e:	0141                	addi	sp,sp,16
    8020cb50:	8082                	ret

000000008020cb52 <loadaux>:

uint64
loadaux(pagetable_t pagetable,uint64 sp,uint64 stackbase,uint64* aux){
    8020cb52:	1101                	addi	sp,sp,-32
    8020cb54:	ec06                	sd	ra,24(sp)
    8020cb56:	e822                	sd	s0,16(sp)
    8020cb58:	e426                	sd	s1,8(sp)
    8020cb5a:	1000                	addi	s0,sp,32
  int argc = aux[0];
    8020cb5c:	429c                	lw	a5,0(a3)
  if(!argc)return sp;
    8020cb5e:	84ae                	mv	s1,a1
    8020cb60:	c795                	beqz	a5,8020cb8c <loadaux+0x3a>
    8020cb62:	8736                	mv	a4,a3
  printf("aux argc:%d\n",argc);
  for(int i=1;i<=2*argc+2;i++){
    printf("final raw aux[%d] = %p\n",i,aux[i]);
  }
  */
  sp -= (2*argc+2) * sizeof(uint64);
    8020cb64:	2785                	addiw	a5,a5,1
    8020cb66:	0017979b          	slliw	a5,a5,0x1
    8020cb6a:	00379693          	slli	a3,a5,0x3
    8020cb6e:	40d584b3          	sub	s1,a1,a3
  if(sp < stackbase){
    8020cb72:	02c4e563          	bltu	s1,a2,8020cb9c <loadaux+0x4a>
    return -1;
  }
  aux[0] = 0;
    8020cb76:	00073023          	sd	zero,0(a4)
  if(copyout(pagetable, sp, (char *)(aux+1), (2*argc+2)*sizeof(uint64)) < 0){
    8020cb7a:	00870613          	addi	a2,a4,8
    8020cb7e:	85a6                	mv	a1,s1
    8020cb80:	ffffe097          	auipc	ra,0xffffe
    8020cb84:	f6c080e7          	jalr	-148(ra) # 8020aaec <copyout>
    8020cb88:	00054863          	bltz	a0,8020cb98 <loadaux+0x46>
    return -1;
  }
  return sp;
}
    8020cb8c:	8526                	mv	a0,s1
    8020cb8e:	60e2                	ld	ra,24(sp)
    8020cb90:	6442                	ld	s0,16(sp)
    8020cb92:	64a2                	ld	s1,8(sp)
    8020cb94:	6105                	addi	sp,sp,32
    8020cb96:	8082                	ret
    return -1;
    8020cb98:	54fd                	li	s1,-1
    8020cb9a:	bfcd                	j	8020cb8c <loadaux+0x3a>
    return -1;
    8020cb9c:	54fd                	li	s1,-1
    8020cb9e:	b7fd                	j	8020cb8c <loadaux+0x3a>

000000008020cba0 <ustackpushstr>:

uint64 
ustackpushstr(pagetable_t pagetable,uint64* ustack,char* str,uint64 sp,uint64 stackbase)
{
    8020cba0:	7139                	addi	sp,sp,-64
    8020cba2:	fc06                	sd	ra,56(sp)
    8020cba4:	f822                	sd	s0,48(sp)
    8020cba6:	f426                	sd	s1,40(sp)
    8020cba8:	f04a                	sd	s2,32(sp)
    8020cbaa:	ec4e                	sd	s3,24(sp)
    8020cbac:	e852                	sd	s4,16(sp)
    8020cbae:	e456                	sd	s5,8(sp)
    8020cbb0:	e05a                	sd	s6,0(sp)
    8020cbb2:	0080                	addi	s0,sp,64
  uint64 argc = ++ustack[0];
    8020cbb4:	0005b983          	ld	s3,0(a1)
    8020cbb8:	0985                	addi	s3,s3,1
    8020cbba:	0135b023          	sd	s3,0(a1)
  if(argc>MAXARG+1)return -1;
    8020cbbe:	02100793          	li	a5,33
    8020cbc2:	54fd                	li	s1,-1
    8020cbc4:	0537e863          	bltu	a5,s3,8020cc14 <ustackpushstr+0x74>
    8020cbc8:	8b2a                	mv	s6,a0
    8020cbca:	892e                	mv	s2,a1
    8020cbcc:	8a32                	mv	s4,a2
    8020cbce:	84b6                	mv	s1,a3
    8020cbd0:	8aba                	mv	s5,a4
  //printf("[exec]push %s\n",str);
  sp -= strlen(str) + 1;
    8020cbd2:	8532                	mv	a0,a2
    8020cbd4:	ffff4097          	auipc	ra,0xffff4
    8020cbd8:	328080e7          	jalr	808(ra) # 80200efc <strlen>
    8020cbdc:	0015069b          	addiw	a3,a0,1
    8020cbe0:	8c95                	sub	s1,s1,a3
  sp -= sp % 16; // riscv sp must be 16-byte aligned
    8020cbe2:	98c1                	andi	s1,s1,-16
  if(sp < stackbase)
    8020cbe4:	0554e363          	bltu	s1,s5,8020cc2a <ustackpushstr+0x8a>
      return -1;
  if(copyout(pagetable, sp, str, strlen(str) + 1) < 0)
    8020cbe8:	8552                	mv	a0,s4
    8020cbea:	ffff4097          	auipc	ra,0xffff4
    8020cbee:	312080e7          	jalr	786(ra) # 80200efc <strlen>
    8020cbf2:	0015069b          	addiw	a3,a0,1
    8020cbf6:	8652                	mv	a2,s4
    8020cbf8:	85a6                	mv	a1,s1
    8020cbfa:	855a                	mv	a0,s6
    8020cbfc:	ffffe097          	auipc	ra,0xffffe
    8020cc00:	ef0080e7          	jalr	-272(ra) # 8020aaec <copyout>
    8020cc04:	02054563          	bltz	a0,8020cc2e <ustackpushstr+0x8e>
      return -1;
  ustack[argc] = sp;
    8020cc08:	098e                	slli	s3,s3,0x3
    8020cc0a:	994e                	add	s2,s2,s3
    8020cc0c:	00993023          	sd	s1,0(s2)
  ustack[argc+1] = 0;
    8020cc10:	00093423          	sd	zero,8(s2)
  return sp;
}
    8020cc14:	8526                	mv	a0,s1
    8020cc16:	70e2                	ld	ra,56(sp)
    8020cc18:	7442                	ld	s0,48(sp)
    8020cc1a:	74a2                	ld	s1,40(sp)
    8020cc1c:	7902                	ld	s2,32(sp)
    8020cc1e:	69e2                	ld	s3,24(sp)
    8020cc20:	6a42                	ld	s4,16(sp)
    8020cc22:	6aa2                	ld	s5,8(sp)
    8020cc24:	6b02                	ld	s6,0(sp)
    8020cc26:	6121                	addi	sp,sp,64
    8020cc28:	8082                	ret
      return -1;
    8020cc2a:	54fd                	li	s1,-1
    8020cc2c:	b7e5                	j	8020cc14 <ustackpushstr+0x74>
      return -1;
    8020cc2e:	54fd                	li	s1,-1
    8020cc30:	b7d5                	j	8020cc14 <ustackpushstr+0x74>

000000008020cc32 <stackdisplay>:

void
stackdisplay(pagetable_t pagetable,uint64 sp,uint64 sz)
{
  for(uint64 i = sp;i<sz;i+=8){
    8020cc32:	06c5f863          	bgeu	a1,a2,8020cca2 <stackdisplay+0x70>
{
    8020cc36:	7139                	addi	sp,sp,-64
    8020cc38:	fc06                	sd	ra,56(sp)
    8020cc3a:	f822                	sd	s0,48(sp)
    8020cc3c:	f426                	sd	s1,40(sp)
    8020cc3e:	f04a                	sd	s2,32(sp)
    8020cc40:	ec4e                	sd	s3,24(sp)
    8020cc42:	e852                	sd	s4,16(sp)
    8020cc44:	e456                	sd	s5,8(sp)
    8020cc46:	0080                	addi	s0,sp,64
    8020cc48:	89aa                	mv	s3,a0
    8020cc4a:	84ae                	mv	s1,a1
    8020cc4c:	8932                	mv	s2,a2
    uint64 *pa = (void*)kwalkaddr1(pagetable,i);
    if(pa)printf("addr %p value %p\n",i,*pa);
    else printf("addr %p value (nil)\n",i);
    8020cc4e:	00007a97          	auipc	s5,0x7
    8020cc52:	bc2a8a93          	addi	s5,s5,-1086 # 80213810 <vma_type+0x338>
    if(pa)printf("addr %p value %p\n",i,*pa);
    8020cc56:	00007a17          	auipc	s4,0x7
    8020cc5a:	ba2a0a13          	addi	s4,s4,-1118 # 802137f8 <vma_type+0x320>
    8020cc5e:	a811                	j	8020cc72 <stackdisplay+0x40>
    else printf("addr %p value (nil)\n",i);
    8020cc60:	85a6                	mv	a1,s1
    8020cc62:	8556                	mv	a0,s5
    8020cc64:	ffffc097          	auipc	ra,0xffffc
    8020cc68:	acc080e7          	jalr	-1332(ra) # 80208730 <printf>
  for(uint64 i = sp;i<sz;i+=8){
    8020cc6c:	04a1                	addi	s1,s1,8
    8020cc6e:	0324f163          	bgeu	s1,s2,8020cc90 <stackdisplay+0x5e>
    uint64 *pa = (void*)kwalkaddr1(pagetable,i);
    8020cc72:	85a6                	mv	a1,s1
    8020cc74:	854e                	mv	a0,s3
    8020cc76:	ffffd097          	auipc	ra,0xffffd
    8020cc7a:	f5e080e7          	jalr	-162(ra) # 80209bd4 <kwalkaddr1>
    if(pa)printf("addr %p value %p\n",i,*pa);
    8020cc7e:	d16d                	beqz	a0,8020cc60 <stackdisplay+0x2e>
    8020cc80:	6110                	ld	a2,0(a0)
    8020cc82:	85a6                	mv	a1,s1
    8020cc84:	8552                	mv	a0,s4
    8020cc86:	ffffc097          	auipc	ra,0xffffc
    8020cc8a:	aaa080e7          	jalr	-1366(ra) # 80208730 <printf>
    8020cc8e:	bff9                	j	8020cc6c <stackdisplay+0x3a>
  }
}
    8020cc90:	70e2                	ld	ra,56(sp)
    8020cc92:	7442                	ld	s0,48(sp)
    8020cc94:	74a2                	ld	s1,40(sp)
    8020cc96:	7902                	ld	s2,32(sp)
    8020cc98:	69e2                	ld	s3,24(sp)
    8020cc9a:	6a42                	ld	s4,16(sp)
    8020cc9c:	6aa2                	ld	s5,8(sp)
    8020cc9e:	6121                	addi	sp,sp,64
    8020cca0:	8082                	ret
    8020cca2:	8082                	ret

000000008020cca4 <zerocheck>:

void zerocheck(pagetable_t pagetable, uint64 va,int len){
    8020cca4:	7179                	addi	sp,sp,-48
    8020cca6:	f406                	sd	ra,40(sp)
    8020cca8:	f022                	sd	s0,32(sp)
    8020ccaa:	ec26                	sd	s1,24(sp)
    8020ccac:	e84a                	sd	s2,16(sp)
    8020ccae:	e44e                	sd	s3,8(sp)
    8020ccb0:	1800                	addi	s0,sp,48
    8020ccb2:	84aa                	mv	s1,a0
    8020ccb4:	89ae                	mv	s3,a1
    8020ccb6:	8932                	mv	s2,a2
  printf("[exec] check %p\n",va);
    8020ccb8:	00007517          	auipc	a0,0x7
    8020ccbc:	b7050513          	addi	a0,a0,-1168 # 80213828 <vma_type+0x350>
    8020ccc0:	ffffc097          	auipc	ra,0xffffc
    8020ccc4:	a70080e7          	jalr	-1424(ra) # 80208730 <printf>
  char* pa = (void*)kwalkaddr1(pagetable,va);
    8020ccc8:	85ce                	mv	a1,s3
    8020ccca:	8526                	mv	a0,s1
    8020cccc:	ffffd097          	auipc	ra,0xffffd
    8020ccd0:	f08080e7          	jalr	-248(ra) # 80209bd4 <kwalkaddr1>
  if(pa){
    8020ccd4:	e901                	bnez	a0,8020cce4 <zerocheck+0x40>
    for(int i = 0;i*8<len;i++){
      *(pa+i) = 0;
    }
  }
  
}
    8020ccd6:	70a2                	ld	ra,40(sp)
    8020ccd8:	7402                	ld	s0,32(sp)
    8020ccda:	64e2                	ld	s1,24(sp)
    8020ccdc:	6942                	ld	s2,16(sp)
    8020ccde:	69a2                	ld	s3,8(sp)
    8020cce0:	6145                	addi	sp,sp,48
    8020cce2:	8082                	ret
    8020cce4:	84aa                	mv	s1,a0
    printf("[exec] set zero at va:%p pa:%p\n",va,pa);
    8020cce6:	862a                	mv	a2,a0
    8020cce8:	85ce                	mv	a1,s3
    8020ccea:	00007517          	auipc	a0,0x7
    8020ccee:	b5650513          	addi	a0,a0,-1194 # 80213840 <vma_type+0x368>
    8020ccf2:	ffffc097          	auipc	ra,0xffffc
    8020ccf6:	a3e080e7          	jalr	-1474(ra) # 80208730 <printf>
    for(int i = 0;i*8<len;i++){
    8020ccfa:	fd205ee3          	blez	s2,8020ccd6 <zerocheck+0x32>
    8020ccfe:	fff9079b          	addiw	a5,s2,-1
    8020cd02:	0037d79b          	srliw	a5,a5,0x3
    8020cd06:	0785                	addi	a5,a5,1
    8020cd08:	97a6                	add	a5,a5,s1
      *(pa+i) = 0;
    8020cd0a:	00048023          	sb	zero,0(s1)
    for(int i = 0;i*8<len;i++){
    8020cd0e:	0485                	addi	s1,s1,1
    8020cd10:	fef49de3          	bne	s1,a5,8020cd0a <zerocheck+0x66>
    8020cd14:	b7c9                	j	8020ccd6 <zerocheck+0x32>

000000008020cd16 <exec>:
  

int
exec(char *path, char **argv, char **env)
{
    8020cd16:	b4010113          	addi	sp,sp,-1216
    8020cd1a:	4a113c23          	sd	ra,1208(sp)
    8020cd1e:	4a813823          	sd	s0,1200(sp)
    8020cd22:	4a913423          	sd	s1,1192(sp)
    8020cd26:	4b213023          	sd	s2,1184(sp)
    8020cd2a:	49313c23          	sd	s3,1176(sp)
    8020cd2e:	49413823          	sd	s4,1168(sp)
    8020cd32:	49513423          	sd	s5,1160(sp)
    8020cd36:	49613023          	sd	s6,1152(sp)
    8020cd3a:	47713c23          	sd	s7,1144(sp)
    8020cd3e:	47813823          	sd	s8,1136(sp)
    8020cd42:	47913423          	sd	s9,1128(sp)
    8020cd46:	47a13023          	sd	s10,1120(sp)
    8020cd4a:	45b13c23          	sd	s11,1112(sp)
    8020cd4e:	4c010413          	addi	s0,sp,1216
    8020cd52:	89aa                	mv	s3,a0
    8020cd54:	b4a43c23          	sd	a0,-1192(s0)
    8020cd58:	892e                	mv	s2,a1
    8020cd5a:	b4b43423          	sd	a1,-1208(s0)
    8020cd5e:	b4c43023          	sd	a2,-1216(s0)
  int shflag = 0;
  uint64 sp,stackbase,entry;
  uint64 argc,envnum;
  uint64 aux[AUX_CNT*2+3] = {0,0,0};
    8020cd62:	21800613          	li	a2,536
    8020cd66:	4581                	li	a1,0
    8020cd68:	d7840513          	addi	a0,s0,-648
    8020cd6c:	ffff4097          	auipc	ra,0xffff4
    8020cd70:	008080e7          	jalr	8(ra) # 80200d74 <memset>
  uint64 environ[10]={0};
    8020cd74:	d2043423          	sd	zero,-728(s0)
    8020cd78:	d2043823          	sd	zero,-720(s0)
    8020cd7c:	d2043c23          	sd	zero,-712(s0)
    8020cd80:	d4043023          	sd	zero,-704(s0)
    8020cd84:	d4043423          	sd	zero,-696(s0)
    8020cd88:	d4043823          	sd	zero,-688(s0)
    8020cd8c:	d4043c23          	sd	zero,-680(s0)
    8020cd90:	d6043023          	sd	zero,-672(s0)
    8020cd94:	d6043423          	sd	zero,-664(s0)
    8020cd98:	d6043823          	sd	zero,-656(s0)
  uint64 ustack[MAXARG+2];
  char *last,*s;
  struct proc* p = myproc();
    8020cd9c:	ffffe097          	auipc	ra,0xffffe
    8020cda0:	6b0080e7          	jalr	1712(ra) # 8020b44c <myproc>
    8020cda4:	84aa                	mv	s1,a0
    8020cda6:	b6a43823          	sd	a0,-1168(s0)
  struct proc* np = kmalloc(sizeof(struct proc));
    8020cdaa:	1d000513          	li	a0,464
    8020cdae:	ffffc097          	auipc	ra,0xffffc
    8020cdb2:	65a080e7          	jalr	1626(ra) # 80209408 <kmalloc>
    8020cdb6:	8baa                	mv	s7,a0
  struct elfhdr elf;
  struct dirent *ep;
  np->trapframe = allocpage();
    8020cdb8:	ffffc097          	auipc	ra,0xffffc
    8020cdbc:	3c8080e7          	jalr	968(ra) # 80209180 <_allocpage>
    8020cdc0:	06abb423          	sd	a0,104(s7)
  memcpy(np->trapframe,p->trapframe,sizeof(struct trapframe));
    8020cdc4:	12000613          	li	a2,288
    8020cdc8:	74ac                	ld	a1,104(s1)
    8020cdca:	ffff4097          	auipc	ra,0xffff4
    8020cdce:	06e080e7          	jalr	110(ra) # 80200e38 <memcpy>
    strncpy(path,"/busybox",10);
  }
  */
  
  
  if(strncmp(path,argv[0],0x100)!=0){
    8020cdd2:	10000613          	li	a2,256
    8020cdd6:	00093583          	ld	a1,0(s2)
    8020cdda:	854e                	mv	a0,s3
    8020cddc:	ffff4097          	auipc	ra,0xffff4
    8020cde0:	074080e7          	jalr	116(ra) # 80200e50 <strncmp>
    8020cde4:	e175                	bnez	a0,8020cec8 <exec+0x1b2>
    strncpy(argv[0],path,0x100);
  }
  
  if ((proc_pagetable(np, 0, 0)) == NULL) {
    8020cde6:	4601                	li	a2,0
    8020cde8:	4581                	li	a1,0
    8020cdea:	855e                	mv	a0,s7
    8020cdec:	ffff5097          	auipc	ra,0xffff5
    8020cdf0:	a28080e7          	jalr	-1496(ra) # 80201814 <proc_pagetable>
    8020cdf4:	c575                	beqz	a0,8020cee0 <exec+0x1ca>
    __debug_warn("[exec]vma init bad\n");
    goto bad;
  }

  if((ep = ename(NULL,path,0)) == NULL) {
    8020cdf6:	4601                	li	a2,0
    8020cdf8:	b5843583          	ld	a1,-1192(s0)
    8020cdfc:	4501                	li	a0,0
    8020cdfe:	ffff7097          	auipc	ra,0xffff7
    8020ce02:	5b6080e7          	jalr	1462(ra) # 802043b4 <ename>
    8020ce06:	89aa                	mv	s3,a0
    8020ce08:	c56d                	beqz	a0,8020cef2 <exec+0x1dc>
    __debug_warn("[exec] %s not found\n", path);
    goto bad;
  }
  
  elock(ep);
    8020ce0a:	ffff7097          	auipc	ra,0xffff7
    8020ce0e:	b68080e7          	jalr	-1176(ra) # 80203972 <elock>
  int inreload = 0;
    8020ce12:	b6043023          	sd	zero,-1184(s0)
  int shflag = 0;
    8020ce16:	4a01                	li	s4,0
reload:
  // Check ELF header
  if(readelfhdr(ep,&elf)<0){    
    8020ce18:	464c44b7          	lui	s1,0x464c4
    8020ce1c:	57f48493          	addi	s1,s1,1407 # 464c457f <_entry-0x39d3ba81>
    shflag = 1;
    eunlock(ep);
    eput(ep);
    if((ep = ename(NULL,"/busybox",0))==NULL){
    8020ce20:	00007a97          	auipc	s5,0x7
    8020ce24:	a70a8a93          	addi	s5,s5,-1424 # 80213890 <vma_type+0x3b8>
    shflag = 1;
    8020ce28:	4905                	li	s2,1
  if(eread(ep, 0, (uint64)elf, 0, sizeof(struct elfhdr)) != sizeof(struct elfhdr))
    8020ce2a:	04000713          	li	a4,64
    8020ce2e:	4681                	li	a3,0
    8020ce30:	bd840613          	addi	a2,s0,-1064
    8020ce34:	4581                	li	a1,0
    8020ce36:	854e                	mv	a0,s3
    8020ce38:	ffff6097          	auipc	ra,0xffff6
    8020ce3c:	15a080e7          	jalr	346(ra) # 80202f92 <eread>
    8020ce40:	04000793          	li	a5,64
    8020ce44:	00f51663          	bne	a0,a5,8020ce50 <exec+0x13a>
  if(readelfhdr(ep,&elf)<0){    
    8020ce48:	bd842783          	lw	a5,-1064(s0)
    8020ce4c:	0c978c63          	beq	a5,s1,8020cf24 <exec+0x20e>
    eunlock(ep);
    8020ce50:	854e                	mv	a0,s3
    8020ce52:	ffff7097          	auipc	ra,0xffff7
    8020ce56:	b56080e7          	jalr	-1194(ra) # 802039a8 <eunlock>
    eput(ep);
    8020ce5a:	854e                	mv	a0,s3
    8020ce5c:	ffff7097          	auipc	ra,0xffff7
    8020ce60:	b9a080e7          	jalr	-1126(ra) # 802039f6 <eput>
    if((ep = ename(NULL,"/busybox",0))==NULL){
    8020ce64:	4601                	li	a2,0
    8020ce66:	85d6                	mv	a1,s5
    8020ce68:	4501                	li	a0,0
    8020ce6a:	ffff7097          	auipc	ra,0xffff7
    8020ce6e:	54a080e7          	jalr	1354(ra) # 802043b4 <ename>
    8020ce72:	89aa                	mv	s3,a0
    8020ce74:	cd49                	beqz	a0,8020cf0e <exec+0x1f8>
      __debug_warn("[exec] %s not found\n", path);
      goto bad;
    }
    elock(ep);
    8020ce76:	ffff7097          	auipc	ra,0xffff7
    8020ce7a:	afc080e7          	jalr	-1284(ra) # 80203972 <elock>
    shflag = 1;
    8020ce7e:	8a4a                	mv	s4,s2
    inreload++;
    if(inreload==1)goto reload;
    8020ce80:	b6043783          	ld	a5,-1184(s0)
    8020ce84:	c3d1                	beqz	a5,8020cf08 <exec+0x1f2>
    else{
      __debug_warn("[exec] reload many times\n");
    8020ce86:	00007517          	auipc	a0,0x7
    8020ce8a:	a1a50513          	addi	a0,a0,-1510 # 802138a0 <vma_type+0x3c8>
    8020ce8e:	ffffc097          	auipc	ra,0xffffc
    8020ce92:	c2e080e7          	jalr	-978(ra) # 80208abc <__debug_warn>
  pagetable_t pagetable = p->pagetable;
    8020ce96:	060bb783          	ld	a5,96(s7)
    8020ce9a:	b8f43423          	sd	a5,-1144(s0)
  for(int i=0, off=elf->phoff; i<elf->phnum; i++, off+=sizeof(ph)){
    8020ce9e:	bf842903          	lw	s2,-1032(s0)
    8020cea2:	c1045783          	lhu	a5,-1008(s0)
    8020cea6:	24078b63          	beqz	a5,8020d0fc <exec+0x3e6>
    }
  }
  
  
  struct proghdr phdr = {0};
    8020ceaa:	b6043c23          	sd	zero,-1160(s0)
  for(int i=0, off=elf->phoff; i<elf->phnum; i++, off+=sizeof(ph)){
    8020ceae:	4c01                	li	s8,0
  int getphdr = 0;
    8020ceb0:	b8043023          	sd	zero,-1152(s0)
  if((va % PGSIZE) != 0){
    8020ceb4:	6d05                	lui	s10,0x1
    8020ceb6:	fffd0793          	addi	a5,s10,-1 # fff <_entry-0x801ff001>
    8020ceba:	b6f43423          	sd	a5,-1176(s0)
    if(sz - i < rest)
    8020cebe:	57fd                	li	a5,-1
    8020cec0:	9381                	srli	a5,a5,0x20
    8020cec2:	b4f43823          	sd	a5,-1200(s0)
    8020cec6:	a2fd                	j	8020d0b4 <exec+0x39e>
    strncpy(argv[0],path,0x100);
    8020cec8:	10000613          	li	a2,256
    8020cecc:	b5843583          	ld	a1,-1192(s0)
    8020ced0:	b4843783          	ld	a5,-1208(s0)
    8020ced4:	6388                	ld	a0,0(a5)
    8020ced6:	ffff4097          	auipc	ra,0xffff4
    8020ceda:	fb6080e7          	jalr	-74(ra) # 80200e8c <strncpy>
    8020cede:	b721                	j	8020cde6 <exec+0xd0>
    __debug_warn("[exec]vma init bad\n");
    8020cee0:	00007517          	auipc	a0,0x7
    8020cee4:	98050513          	addi	a0,a0,-1664 # 80213860 <vma_type+0x388>
    8020cee8:	ffffc097          	auipc	ra,0xffffc
    8020ceec:	bd4080e7          	jalr	-1068(ra) # 80208abc <__debug_warn>
    goto bad;
    8020cef0:	a1e5                	j	8020d3d8 <exec+0x6c2>
    __debug_warn("[exec] %s not found\n", path);
    8020cef2:	b5843583          	ld	a1,-1192(s0)
    8020cef6:	00007517          	auipc	a0,0x7
    8020cefa:	98250513          	addi	a0,a0,-1662 # 80213878 <vma_type+0x3a0>
    8020cefe:	ffffc097          	auipc	ra,0xffffc
    8020cf02:	bbe080e7          	jalr	-1090(ra) # 80208abc <__debug_warn>
    goto bad;
    8020cf06:	a9c9                	j	8020d3d8 <exec+0x6c2>
    inreload++;
    8020cf08:	b7243023          	sd	s2,-1184(s0)
    8020cf0c:	bf39                	j	8020ce2a <exec+0x114>
      __debug_warn("[exec] %s not found\n", path);
    8020cf0e:	b5843583          	ld	a1,-1192(s0)
    8020cf12:	00007517          	auipc	a0,0x7
    8020cf16:	96650513          	addi	a0,a0,-1690 # 80213878 <vma_type+0x3a0>
    8020cf1a:	ffffc097          	auipc	ra,0xffffc
    8020cf1e:	ba2080e7          	jalr	-1118(ra) # 80208abc <__debug_warn>
      goto bad;
    8020cf22:	a95d                	j	8020d3d8 <exec+0x6c2>
    8020cf24:	b7443023          	sd	s4,-1184(s0)
    8020cf28:	b7bd                	j	8020ce96 <exec+0x180>
      if(ph.memsz < ph.filesz){
    8020cf2a:	bb843603          	ld	a2,-1096(s0)
    8020cf2e:	bb043783          	ld	a5,-1104(s0)
    8020cf32:	04f66d63          	bltu	a2,a5,8020cf8c <exec+0x276>
      if(ph.vaddr + ph.memsz < ph.vaddr){
    8020cf36:	ba043b03          	ld	s6,-1120(s0)
    8020cf3a:	016607b3          	add	a5,a2,s6
    8020cf3e:	0767ed63          	bltu	a5,s6,8020cfb8 <exec+0x2a2>
      if(!getphdr&&phdr&&ph.off == 0){ 
    8020cf42:	b8043783          	ld	a5,-1152(s0)
    8020cf46:	eb89                	bnez	a5,8020cf58 <exec+0x242>
    8020cf48:	b9843783          	ld	a5,-1128(s0)
    8020cf4c:	e791                	bnez	a5,8020cf58 <exec+0x242>
        phdr->vaddr = elf->phoff + ph.vaddr;
    8020cf4e:	bf843783          	ld	a5,-1032(s0)
    8020cf52:	97da                	add	a5,a5,s6
    8020cf54:	b6f43c23          	sd	a5,-1160(s0)
      if(alloc_load_vma(p, load_start, ph.memsz, PTE_R|PTE_W|PTE_X|PTE_U)== NULL){
    8020cf58:	46f9                	li	a3,30
    8020cf5a:	85da                	mv	a1,s6
    8020cf5c:	855e                	mv	a0,s7
    8020cf5e:	fffff097          	auipc	ra,0xfffff
    8020cf62:	a96080e7          	jalr	-1386(ra) # 8020b9f4 <alloc_load_vma>
    8020cf66:	c135                	beqz	a0,8020cfca <exec+0x2b4>
      if(loadseg(pagetable, load_start, ep, ph.off, ph.filesz) < 0){
    8020cf68:	b9842d83          	lw	s11,-1128(s0)
    8020cf6c:	bb043a83          	ld	s5,-1104(s0)
    8020cf70:	000a8c9b          	sext.w	s9,s5
  if((va % PGSIZE) != 0){
    8020cf74:	b6843783          	ld	a5,-1176(s0)
    8020cf78:	00fb7a33          	and	s4,s6,a5
  i = 0;
    8020cf7c:	4481                	li	s1,0
  if((va % PGSIZE) != 0){
    8020cf7e:	040a1f63          	bnez	s4,8020cfdc <exec+0x2c6>
  for(; i < sz; i += PGSIZE){
    8020cf82:	409c8a3b          	subw	s4,s9,s1
    8020cf86:	0f94e863          	bltu	s1,s9,8020d076 <exec+0x360>
    8020cf8a:	aa31                	j	8020d0a6 <exec+0x390>
        __debug_warn("[exec]load memsz>filesz\n");
    8020cf8c:	00007517          	auipc	a0,0x7
    8020cf90:	93450513          	addi	a0,a0,-1740 # 802138c0 <vma_type+0x3e8>
    8020cf94:	ffffc097          	auipc	ra,0xffffc
    8020cf98:	b28080e7          	jalr	-1240(ra) # 80208abc <__debug_warn>
  entry = loadelf(np,ep,&elf,&phdr,0);
  if(entry==-1){
    eunlock(ep);
    8020cf9c:	854e                	mv	a0,s3
    8020cf9e:	ffff7097          	auipc	ra,0xffff7
    8020cfa2:	a0a080e7          	jalr	-1526(ra) # 802039a8 <eunlock>
    __debug_warn("[exec]load elf bad\n");
    8020cfa6:	00007517          	auipc	a0,0x7
    8020cfaa:	9ba50513          	addi	a0,a0,-1606 # 80213960 <vma_type+0x488>
    8020cfae:	ffffc097          	auipc	ra,0xffffc
    8020cfb2:	b0e080e7          	jalr	-1266(ra) # 80208abc <__debug_warn>
    goto bad;
    8020cfb6:	a10d                	j	8020d3d8 <exec+0x6c2>
        __debug_warn("[exec]memsz not positive\n");
    8020cfb8:	00007517          	auipc	a0,0x7
    8020cfbc:	92850513          	addi	a0,a0,-1752 # 802138e0 <vma_type+0x408>
    8020cfc0:	ffffc097          	auipc	ra,0xffffc
    8020cfc4:	afc080e7          	jalr	-1284(ra) # 80208abc <__debug_warn>
        return -1;
    8020cfc8:	bfd1                	j	8020cf9c <exec+0x286>
        __debug_warn("[exec]grow space failed\n");
    8020cfca:	00007517          	auipc	a0,0x7
    8020cfce:	93650513          	addi	a0,a0,-1738 # 80213900 <vma_type+0x428>
    8020cfd2:	ffffc097          	auipc	ra,0xffffc
    8020cfd6:	aea080e7          	jalr	-1302(ra) # 80208abc <__debug_warn>
        return -1;
    8020cfda:	b7c9                	j	8020cf9c <exec+0x286>
    uint64 rest = PGSIZE -off;
    8020cfdc:	414d04b3          	sub	s1,s10,s4
    pa = walkaddr(pagetable, va)+off;
    8020cfe0:	85da                	mv	a1,s6
    8020cfe2:	b8843503          	ld	a0,-1144(s0)
    8020cfe6:	ffffd097          	auipc	ra,0xffffd
    8020cfea:	ae6080e7          	jalr	-1306(ra) # 80209acc <walkaddr>
    8020cfee:	00aa0633          	add	a2,s4,a0
    if(pa == NULL)
    8020cff2:	ce1d                	beqz	a2,8020d030 <exec+0x31a>
    if(sz - i < rest)
    8020cff4:	b5043783          	ld	a5,-1200(s0)
    8020cff8:	00fafab3          	and	s5,s5,a5
      n = sz - i;
    8020cffc:	8a66                	mv	s4,s9
    if(sz - i < rest)
    8020cffe:	009ae463          	bltu	s5,s1,8020d006 <exec+0x2f0>
      n = rest;
    8020d002:	00048a1b          	sext.w	s4,s1
    if(eread(ep, 0, (uint64)pa, offset+i, n) != n)
    8020d006:	8752                	mv	a4,s4
    8020d008:	86ee                	mv	a3,s11
    8020d00a:	4581                	li	a1,0
    8020d00c:	854e                	mv	a0,s3
    8020d00e:	ffff6097          	auipc	ra,0xffff6
    8020d012:	f84080e7          	jalr	-124(ra) # 80202f92 <eread>
    8020d016:	0005049b          	sext.w	s1,a0
    8020d01a:	f69a04e3          	beq	s4,s1,8020cf82 <exec+0x26c>
        printf("[exec]load segment failed\n");
    8020d01e:	00007517          	auipc	a0,0x7
    8020d022:	a6a50513          	addi	a0,a0,-1430 # 80213a88 <vma_type+0x5b0>
    8020d026:	ffffb097          	auipc	ra,0xffffb
    8020d02a:	70a080e7          	jalr	1802(ra) # 80208730 <printf>
        return -1;
    8020d02e:	b7bd                	j	8020cf9c <exec+0x286>
      panic("loadseg: address should exist");
    8020d030:	00007517          	auipc	a0,0x7
    8020d034:	8f050513          	addi	a0,a0,-1808 # 80213920 <vma_type+0x448>
    8020d038:	ffffb097          	auipc	ra,0xffffb
    8020d03c:	6ae080e7          	jalr	1710(ra) # 802086e6 <panic>
      panic("loadseg: address should exist");
    8020d040:	00007517          	auipc	a0,0x7
    8020d044:	8e050513          	addi	a0,a0,-1824 # 80213920 <vma_type+0x448>
    8020d048:	ffffb097          	auipc	ra,0xffffb
    8020d04c:	69e080e7          	jalr	1694(ra) # 802086e6 <panic>
    if(eread(ep, 0, (uint64)pa, offset+i, n) != n)
    8020d050:	8756                	mv	a4,s5
    8020d052:	009d86bb          	addw	a3,s11,s1
    8020d056:	4581                	li	a1,0
    8020d058:	854e                	mv	a0,s3
    8020d05a:	ffff6097          	auipc	ra,0xffff6
    8020d05e:	f38080e7          	jalr	-200(ra) # 80202f92 <eread>
    8020d062:	2501                	sext.w	a0,a0
    8020d064:	faaa9de3          	bne	s5,a0,8020d01e <exec+0x308>
  for(; i < sz; i += PGSIZE){
    8020d068:	6785                	lui	a5,0x1
    8020d06a:	9cbd                	addw	s1,s1,a5
    8020d06c:	77fd                	lui	a5,0xfffff
    8020d06e:	01478a3b          	addw	s4,a5,s4
    8020d072:	0394fa63          	bgeu	s1,s9,8020d0a6 <exec+0x390>
    pa = walkaddr(pagetable, va + i);
    8020d076:	02049593          	slli	a1,s1,0x20
    8020d07a:	9181                	srli	a1,a1,0x20
    8020d07c:	95da                	add	a1,a1,s6
    8020d07e:	b8843503          	ld	a0,-1144(s0)
    8020d082:	ffffd097          	auipc	ra,0xffffd
    8020d086:	a4a080e7          	jalr	-1462(ra) # 80209acc <walkaddr>
    8020d08a:	862a                	mv	a2,a0
    if(pa == NULL)
    8020d08c:	d955                	beqz	a0,8020d040 <exec+0x32a>
      n = PGSIZE;
    8020d08e:	8aea                	mv	s5,s10
    if(sz - i < PGSIZE)
    8020d090:	fdaa70e3          	bgeu	s4,s10,8020d050 <exec+0x33a>
      n = sz - i;
    8020d094:	8ad2                	mv	s5,s4
    8020d096:	bf6d                	j	8020d050 <exec+0x33a>
        *phdr = ph;
    8020d098:	ba043783          	ld	a5,-1120(s0)
    8020d09c:	b6f43c23          	sd	a5,-1160(s0)
        getphdr = 1;
    8020d0a0:	4785                	li	a5,1
    8020d0a2:	b8f43023          	sd	a5,-1152(s0)
  for(int i=0, off=elf->phoff; i<elf->phnum; i++, off+=sizeof(ph)){
    8020d0a6:	2c05                	addiw	s8,s8,1
    8020d0a8:	0389091b          	addiw	s2,s2,56
    8020d0ac:	c1045783          	lhu	a5,-1008(s0)
    8020d0b0:	04fc5863          	bge	s8,a5,8020d100 <exec+0x3ea>
    if(eread(ep, 0, (uint64)&ph, off, sizeof(ph)) != sizeof(ph))
    8020d0b4:	2901                	sext.w	s2,s2
    8020d0b6:	03800713          	li	a4,56
    8020d0ba:	86ca                	mv	a3,s2
    8020d0bc:	b9040613          	addi	a2,s0,-1136
    8020d0c0:	4581                	li	a1,0
    8020d0c2:	854e                	mv	a0,s3
    8020d0c4:	ffff6097          	auipc	ra,0xffff6
    8020d0c8:	ece080e7          	jalr	-306(ra) # 80202f92 <eread>
    8020d0cc:	03800793          	li	a5,56
    8020d0d0:	ecf516e3          	bne	a0,a5,8020cf9c <exec+0x286>
    if(ph.type == ELF_PROG_LOAD){
    8020d0d4:	b9042783          	lw	a5,-1136(s0)
    8020d0d8:	4705                	li	a4,1
    8020d0da:	e4e788e3          	beq	a5,a4,8020cf2a <exec+0x214>
    }else if(ph.type==ELF_PROG_PHDR){
    8020d0de:	4719                	li	a4,6
    8020d0e0:	fae78ce3          	beq	a5,a4,8020d098 <exec+0x382>
    }else if(ph.type==ELF_PROG_INTERP){
    8020d0e4:	470d                	li	a4,3
    8020d0e6:	fce790e3          	bne	a5,a4,8020d0a6 <exec+0x390>
      __debug_warn("[exec]dynamic load not success\n");
    8020d0ea:	00007517          	auipc	a0,0x7
    8020d0ee:	85650513          	addi	a0,a0,-1962 # 80213940 <vma_type+0x468>
    8020d0f2:	ffffc097          	auipc	ra,0xffffc
    8020d0f6:	9ca080e7          	jalr	-1590(ra) # 80208abc <__debug_warn>
    8020d0fa:	b775                	j	8020d0a6 <exec+0x390>
  struct proghdr phdr = {0};
    8020d0fc:	b6043c23          	sd	zero,-1160(s0)
  return elf->entry;
    8020d100:	bf043a03          	ld	s4,-1040(s0)
  if(entry==-1){
    8020d104:	57fd                	li	a5,-1
    8020d106:	e8fa0be3          	beq	s4,a5,8020cf9c <exec+0x286>
  }
  eunlock(ep);
    8020d10a:	854e                	mv	a0,s3
    8020d10c:	ffff7097          	auipc	ra,0xffff7
    8020d110:	89c080e7          	jalr	-1892(ra) # 802039a8 <eunlock>
  eput(ep);
    8020d114:	854e                	mv	a0,s3
    8020d116:	ffff7097          	auipc	ra,0xffff7
    8020d11a:	8e0080e7          	jalr	-1824(ra) # 802039f6 <eput>
  //print_vma_info(p);
  //print_vma_info(np);
  struct vma* stack_vma = type_locate_vma(np->vma,STACK);
    8020d11e:	459d                	li	a1,7
    8020d120:	170bb503          	ld	a0,368(s7)
    8020d124:	ffffe097          	auipc	ra,0xffffe
    8020d128:	4c6080e7          	jalr	1222(ra) # 8020b5ea <type_locate_vma>
  sp = stack_vma->end;
    8020d12c:	6d14                	ld	a3,24(a0)
  stackbase = stack_vma->addr;
    8020d12e:	00853983          	ld	s3,8(a0)
  ustack[0] = environ[0] =0;
    8020d132:	d2043423          	sd	zero,-728(s0)
    8020d136:	c0043c23          	sd	zero,-1000(s0)
  if((sp = ustackpushstr(np->pagetable,environ,"LD_LIBRARY_PATH=/",sp,stackbase))==-1){
    8020d13a:	874e                	mv	a4,s3
    8020d13c:	00007617          	auipc	a2,0x7
    8020d140:	83c60613          	addi	a2,a2,-1988 # 80213978 <vma_type+0x4a0>
    8020d144:	d2840593          	addi	a1,s0,-728
    8020d148:	060bb503          	ld	a0,96(s7)
    8020d14c:	00000097          	auipc	ra,0x0
    8020d150:	a54080e7          	jalr	-1452(ra) # 8020cba0 <ustackpushstr>
    8020d154:	57fd                	li	a5,-1
    8020d156:	28f50163          	beq	a0,a5,8020d3d8 <exec+0x6c2>
    if((sp = ustackpushstr(np->pagetable,ustack,path,sp,stackbase))==-1){
      goto bad;
    }
#endif
  }
  uint64 random[2] = { 0xcde142a16cb93072, 0x128a39c127d8bbf2 };
    8020d15a:	00008797          	auipc	a5,0x8
    8020d15e:	1a67b783          	ld	a5,422(a5) # 80215300 <erodata+0x10>
    8020d162:	bcf43423          	sd	a5,-1080(s0)
    8020d166:	00008797          	auipc	a5,0x8
    8020d16a:	1a27b783          	ld	a5,418(a5) # 80215308 <erodata+0x18>
    8020d16e:	bcf43823          	sd	a5,-1072(s0)
  sp -= 16;
    8020d172:	ff050493          	addi	s1,a0,-16
  if (sp < stackbase || copyout(np->pagetable, sp, (char *)random, 16) < 0) {
    8020d176:	1d34eb63          	bltu	s1,s3,8020d34c <exec+0x636>
    8020d17a:	46c1                	li	a3,16
    8020d17c:	bc840613          	addi	a2,s0,-1080
    8020d180:	85a6                	mv	a1,s1
    8020d182:	060bb503          	ld	a0,96(s7)
    8020d186:	ffffe097          	auipc	ra,0xffffe
    8020d18a:	966080e7          	jalr	-1690(ra) # 8020aaec <copyout>
    8020d18e:	1a054f63          	bltz	a0,8020d34c <exec+0x636>
    goto bad;
  }


  //auxalloc(aux,AT_HWCAP, 0x112d);
  auxalloc(aux,AT_PAGESZ,PGSIZE);
    8020d192:	6605                	lui	a2,0x1
    8020d194:	4599                	li	a1,6
    8020d196:	d7840513          	addi	a0,s0,-648
    8020d19a:	00000097          	auipc	ra,0x0
    8020d19e:	994080e7          	jalr	-1644(ra) # 8020cb2e <auxalloc>
  auxalloc(aux,AT_PHDR, phdr.vaddr);
    8020d1a2:	b7843603          	ld	a2,-1160(s0)
    8020d1a6:	458d                	li	a1,3
    8020d1a8:	d7840513          	addi	a0,s0,-648
    8020d1ac:	00000097          	auipc	ra,0x0
    8020d1b0:	982080e7          	jalr	-1662(ra) # 8020cb2e <auxalloc>
  auxalloc(aux,AT_PHENT, elf.phentsize);
    8020d1b4:	c0e45603          	lhu	a2,-1010(s0)
    8020d1b8:	4591                	li	a1,4
    8020d1ba:	d7840513          	addi	a0,s0,-648
    8020d1be:	00000097          	auipc	ra,0x0
    8020d1c2:	970080e7          	jalr	-1680(ra) # 8020cb2e <auxalloc>
  auxalloc(aux,AT_PHNUM, elf.phnum);
    8020d1c6:	c1045603          	lhu	a2,-1008(s0)
    8020d1ca:	4595                	li	a1,5
    8020d1cc:	d7840513          	addi	a0,s0,-648
    8020d1d0:	00000097          	auipc	ra,0x0
    8020d1d4:	95e080e7          	jalr	-1698(ra) # 8020cb2e <auxalloc>
  auxalloc(aux,AT_UID, 0);
    8020d1d8:	4601                	li	a2,0
    8020d1da:	45ad                	li	a1,11
    8020d1dc:	d7840513          	addi	a0,s0,-648
    8020d1e0:	00000097          	auipc	ra,0x0
    8020d1e4:	94e080e7          	jalr	-1714(ra) # 8020cb2e <auxalloc>
  auxalloc(aux,AT_EUID, 0);
    8020d1e8:	4601                	li	a2,0
    8020d1ea:	45b1                	li	a1,12
    8020d1ec:	d7840513          	addi	a0,s0,-648
    8020d1f0:	00000097          	auipc	ra,0x0
    8020d1f4:	93e080e7          	jalr	-1730(ra) # 8020cb2e <auxalloc>
  auxalloc(aux,AT_GID, 0);
    8020d1f8:	4601                	li	a2,0
    8020d1fa:	45b5                	li	a1,13
    8020d1fc:	d7840513          	addi	a0,s0,-648
    8020d200:	00000097          	auipc	ra,0x0
    8020d204:	92e080e7          	jalr	-1746(ra) # 8020cb2e <auxalloc>
  auxalloc(aux,AT_EGID, 0);
    8020d208:	4601                	li	a2,0
    8020d20a:	45b9                	li	a1,14
    8020d20c:	d7840513          	addi	a0,s0,-648
    8020d210:	00000097          	auipc	ra,0x0
    8020d214:	91e080e7          	jalr	-1762(ra) # 8020cb2e <auxalloc>
  auxalloc(aux,AT_SECURE, 0);
    8020d218:	4601                	li	a2,0
    8020d21a:	45dd                	li	a1,23
    8020d21c:	d7840513          	addi	a0,s0,-648
    8020d220:	00000097          	auipc	ra,0x0
    8020d224:	90e080e7          	jalr	-1778(ra) # 8020cb2e <auxalloc>
  auxalloc(aux,AT_EGID, 0);		
    8020d228:	4601                	li	a2,0
    8020d22a:	45b9                	li	a1,14
    8020d22c:	d7840513          	addi	a0,s0,-648
    8020d230:	00000097          	auipc	ra,0x0
    8020d234:	8fe080e7          	jalr	-1794(ra) # 8020cb2e <auxalloc>
  auxalloc(aux,AT_RANDOM, sp);
    8020d238:	8626                	mv	a2,s1
    8020d23a:	45e5                	li	a1,25
    8020d23c:	d7840513          	addi	a0,s0,-648
    8020d240:	00000097          	auipc	ra,0x0
    8020d244:	8ee080e7          	jalr	-1810(ra) # 8020cb2e <auxalloc>

  //printf("[exec]push argv\n");
  // Push argument strings, prepare rest of stack in ustack.
  
  if(shflag){
    8020d248:	b6043783          	ld	a5,-1184(s0)
    8020d24c:	10079963          	bnez	a5,8020d35e <exec+0x648>
    if((sp = ustackpushstr(np->pagetable,environ,"PATH=/",sp,stackbase))==-1){
      __debug_warn("[exec]push env string bad\n");
      goto bad;
    }
  }
  for(argc = 0; argv[argc]; argc++) {
    8020d250:	b4843783          	ld	a5,-1208(s0)
    8020d254:	6390                	ld	a2,0(a5)
    8020d256:	00878913          	addi	s2,a5,8
    if((sp = ustackpushstr(np->pagetable,ustack,argv[argc],sp,stackbase))==-1){
    8020d25a:	5afd                	li	s5,-1
  for(argc = 0; argv[argc]; argc++) {
    8020d25c:	c215                	beqz	a2,8020d280 <exec+0x56a>
    if((sp = ustackpushstr(np->pagetable,ustack,argv[argc],sp,stackbase))==-1){
    8020d25e:	874e                	mv	a4,s3
    8020d260:	86a6                	mv	a3,s1
    8020d262:	c1840593          	addi	a1,s0,-1000
    8020d266:	060bb503          	ld	a0,96(s7)
    8020d26a:	00000097          	auipc	ra,0x0
    8020d26e:	936080e7          	jalr	-1738(ra) # 8020cba0 <ustackpushstr>
    8020d272:	84aa                	mv	s1,a0
    8020d274:	15550a63          	beq	a0,s5,8020d3c8 <exec+0x6b2>
  for(argc = 0; argv[argc]; argc++) {
    8020d278:	0921                	addi	s2,s2,8
    8020d27a:	ff893603          	ld	a2,-8(s2)
    8020d27e:	f265                	bnez	a2,8020d25e <exec+0x548>
      __debug_warn("[exec]push argv string bad\n");
      goto bad;
    }
  }
  //printf("[exec]push env\n");
  for(envnum = 0; env[envnum]; envnum++) {
    8020d280:	b4043783          	ld	a5,-1216(s0)
    8020d284:	6390                	ld	a2,0(a5)
    8020d286:	c60d                	beqz	a2,8020d2b0 <exec+0x59a>
    8020d288:	00878913          	addi	s2,a5,8
    if((sp = ustackpushstr(np->pagetable,environ,env[envnum],sp,stackbase))==-1){
    8020d28c:	5afd                	li	s5,-1
    8020d28e:	874e                	mv	a4,s3
    8020d290:	86a6                	mv	a3,s1
    8020d292:	d2840593          	addi	a1,s0,-728
    8020d296:	060bb503          	ld	a0,96(s7)
    8020d29a:	00000097          	auipc	ra,0x0
    8020d29e:	906080e7          	jalr	-1786(ra) # 8020cba0 <ustackpushstr>
    8020d2a2:	84aa                	mv	s1,a0
    8020d2a4:	19550563          	beq	a0,s5,8020d42e <exec+0x718>
  for(envnum = 0; env[envnum]; envnum++) {
    8020d2a8:	0921                	addi	s2,s2,8
    8020d2aa:	ff893603          	ld	a2,-8(s2)
    8020d2ae:	f265                	bnez	a2,8020d28e <exec+0x578>
      __debug_warn("[exec]push env string bad\n");
      goto bad;
    }
  }
  //printf("[exec]push end\n");
  if((environ[0]+ustack[0]+1)%2){sp -= 8;}//16 aligned
    8020d2b0:	d2843783          	ld	a5,-728(s0)
    8020d2b4:	c1843703          	ld	a4,-1000(s0)
    8020d2b8:	97ba                	add	a5,a5,a4
    8020d2ba:	8b85                	andi	a5,a5,1
    8020d2bc:	e391                	bnez	a5,8020d2c0 <exec+0x5aa>
    8020d2be:	14e1                	addi	s1,s1,-8
  //load aux
  if((sp = loadaux(np->pagetable,sp,stackbase,aux))<0){
    8020d2c0:	d7840693          	addi	a3,s0,-648
    8020d2c4:	864e                	mv	a2,s3
    8020d2c6:	85a6                	mv	a1,s1
    8020d2c8:	060bb503          	ld	a0,96(s7)
    8020d2cc:	00000097          	auipc	ra,0x0
    8020d2d0:	886080e7          	jalr	-1914(ra) # 8020cb52 <loadaux>
    8020d2d4:	84aa                	mv	s1,a0
    __debug_warn("[exec]pass aux too many\n");
    goto bad;
  }
  
  argc = environ[0];
    8020d2d6:	d2843783          	ld	a5,-728(s0)
  if(argc){
    8020d2da:	c39d                	beqz	a5,8020d300 <exec+0x5ea>
    // push the array of argv[] pointers.
    sp -= (argc+1) * sizeof(uint64);
    8020d2dc:	0785                	addi	a5,a5,1
    8020d2de:	00379693          	slli	a3,a5,0x3
    8020d2e2:	40d504b3          	sub	s1,a0,a3
    if(sp < stackbase){
    8020d2e6:	1534ed63          	bltu	s1,s3,8020d440 <exec+0x72a>
      __debug_warn("[exec]env address vec too long\n");
      goto bad;
    }
    if(copyout(np->pagetable, sp, (char *)(environ+1), (argc+1)*sizeof(uint64)) < 0){
    8020d2ea:	d3040613          	addi	a2,s0,-720
    8020d2ee:	85a6                	mv	a1,s1
    8020d2f0:	060bb503          	ld	a0,96(s7)
    8020d2f4:	ffffd097          	auipc	ra,0xffffd
    8020d2f8:	7f8080e7          	jalr	2040(ra) # 8020aaec <copyout>
    8020d2fc:	14054b63          	bltz	a0,8020d452 <exec+0x73c>
      __debug_warn("[exec]env address copy bad\n");
      goto bad;
    }
  }
  
  argc = ustack[0];
    8020d300:	c1843903          	ld	s2,-1000(s0)
  //printf("[exec]argc:%d\n",argc);
  // push the array of argv[] pointers.
  sp -= (argc+2) * sizeof(uint64);
    8020d304:	00290693          	addi	a3,s2,2
    8020d308:	068e                	slli	a3,a3,0x3
    8020d30a:	8c95                	sub	s1,s1,a3
  if(sp < stackbase){
    8020d30c:	1534ec63          	bltu	s1,s3,8020d464 <exec+0x74e>
    __debug_warn("[exec]ustack address vec too long\n");
    goto bad;
  }

  if(copyout(np->pagetable, sp, (char *)ustack, (argc+2)*sizeof(uint64)) < 0){
    8020d310:	c1840613          	addi	a2,s0,-1000
    8020d314:	85a6                	mv	a1,s1
    8020d316:	060bb503          	ld	a0,96(s7)
    8020d31a:	ffffd097          	auipc	ra,0xffffd
    8020d31e:	7d2080e7          	jalr	2002(ra) # 8020aaec <copyout>
    8020d322:	14054a63          	bltz	a0,8020d476 <exec+0x760>
  //stackdisplay(pagetable,sp,sz);
  // arguments to user main(argc, argv)
  // argc is returned via the system call return
  // value, which goes in a0.
  //np->trapframe->a0 = argc;
  np->trapframe->a0 = 0;
    8020d326:	068bb783          	ld	a5,104(s7)
    8020d32a:	0607b823          	sd	zero,112(a5)
  np->trapframe->a1 = sp+8;
    8020d32e:	068bb783          	ld	a5,104(s7)
    8020d332:	00848713          	addi	a4,s1,8
    8020d336:	ffb8                	sd	a4,120(a5)
  
  for(last=s=path; *s; s++)
    8020d338:	b5843783          	ld	a5,-1192(s0)
    8020d33c:	0007c703          	lbu	a4,0(a5)
    8020d340:	14070d63          	beqz	a4,8020d49a <exec+0x784>
    8020d344:	0785                	addi	a5,a5,1
    if(*s == '/')
    8020d346:	02f00693          	li	a3,47
    8020d34a:	a299                	j	8020d490 <exec+0x77a>
    __debug_warn("[exec] random copy bad\n");
    8020d34c:	00006517          	auipc	a0,0x6
    8020d350:	64450513          	addi	a0,a0,1604 # 80213990 <vma_type+0x4b8>
    8020d354:	ffffb097          	auipc	ra,0xffffb
    8020d358:	768080e7          	jalr	1896(ra) # 80208abc <__debug_warn>
    goto bad;
    8020d35c:	a8b5                	j	8020d3d8 <exec+0x6c2>
    if((sp = ustackpushstr(np->pagetable,ustack,"sh",sp,stackbase))==-1){
    8020d35e:	874e                	mv	a4,s3
    8020d360:	86a6                	mv	a3,s1
    8020d362:	00005617          	auipc	a2,0x5
    8020d366:	30e60613          	addi	a2,a2,782 # 80212670 <rodata_start+0x670>
    8020d36a:	c1840593          	addi	a1,s0,-1000
    8020d36e:	060bb503          	ld	a0,96(s7)
    8020d372:	00000097          	auipc	ra,0x0
    8020d376:	82e080e7          	jalr	-2002(ra) # 8020cba0 <ustackpushstr>
    8020d37a:	86aa                	mv	a3,a0
    8020d37c:	57fd                	li	a5,-1
    8020d37e:	02f50c63          	beq	a0,a5,8020d3b6 <exec+0x6a0>
    if((sp = ustackpushstr(np->pagetable,environ,"PATH=/",sp,stackbase))==-1){
    8020d382:	874e                	mv	a4,s3
    8020d384:	00006617          	auipc	a2,0x6
    8020d388:	64460613          	addi	a2,a2,1604 # 802139c8 <vma_type+0x4f0>
    8020d38c:	d2840593          	addi	a1,s0,-728
    8020d390:	060bb503          	ld	a0,96(s7)
    8020d394:	00000097          	auipc	ra,0x0
    8020d398:	80c080e7          	jalr	-2036(ra) # 8020cba0 <ustackpushstr>
    8020d39c:	84aa                	mv	s1,a0
    8020d39e:	57fd                	li	a5,-1
    8020d3a0:	eaf518e3          	bne	a0,a5,8020d250 <exec+0x53a>
      __debug_warn("[exec]push env string bad\n");
    8020d3a4:	00006517          	auipc	a0,0x6
    8020d3a8:	62c50513          	addi	a0,a0,1580 # 802139d0 <vma_type+0x4f8>
    8020d3ac:	ffffb097          	auipc	ra,0xffffb
    8020d3b0:	710080e7          	jalr	1808(ra) # 80208abc <__debug_warn>
      goto bad;
    8020d3b4:	a015                	j	8020d3d8 <exec+0x6c2>
      __debug_warn("[exec]push argv string bad\n");
    8020d3b6:	00006517          	auipc	a0,0x6
    8020d3ba:	5f250513          	addi	a0,a0,1522 # 802139a8 <vma_type+0x4d0>
    8020d3be:	ffffb097          	auipc	ra,0xffffb
    8020d3c2:	6fe080e7          	jalr	1790(ra) # 80208abc <__debug_warn>
      goto bad;
    8020d3c6:	a809                	j	8020d3d8 <exec+0x6c2>
      __debug_warn("[exec]push argv string bad\n");
    8020d3c8:	00006517          	auipc	a0,0x6
    8020d3cc:	5e050513          	addi	a0,a0,1504 # 802139a8 <vma_type+0x4d0>
    8020d3d0:	ffffb097          	auipc	ra,0xffffb
    8020d3d4:	6ec080e7          	jalr	1772(ra) # 80208abc <__debug_warn>
  sfence_vma();
  //printf("[exec]argc:%d a0:%p\n",argc,p->trapframe->a0);
  uvmfree(np);
  return argc;
bad:
  uvmfree(np);
    8020d3d8:	855e                	mv	a0,s7
    8020d3da:	ffffd097          	auipc	ra,0xffffd
    8020d3de:	a24080e7          	jalr	-1500(ra) # 80209dfe <uvmfree>
  __debug_warn("[exec]exec bad\n");
    8020d3e2:	00006517          	auipc	a0,0x6
    8020d3e6:	69650513          	addi	a0,a0,1686 # 80213a78 <vma_type+0x5a0>
    8020d3ea:	ffffb097          	auipc	ra,0xffffb
    8020d3ee:	6d2080e7          	jalr	1746(ra) # 80208abc <__debug_warn>
  return -1;
    8020d3f2:	557d                	li	a0,-1
}
    8020d3f4:	4b813083          	ld	ra,1208(sp)
    8020d3f8:	4b013403          	ld	s0,1200(sp)
    8020d3fc:	4a813483          	ld	s1,1192(sp)
    8020d400:	4a013903          	ld	s2,1184(sp)
    8020d404:	49813983          	ld	s3,1176(sp)
    8020d408:	49013a03          	ld	s4,1168(sp)
    8020d40c:	48813a83          	ld	s5,1160(sp)
    8020d410:	48013b03          	ld	s6,1152(sp)
    8020d414:	47813b83          	ld	s7,1144(sp)
    8020d418:	47013c03          	ld	s8,1136(sp)
    8020d41c:	46813c83          	ld	s9,1128(sp)
    8020d420:	46013d03          	ld	s10,1120(sp)
    8020d424:	45813d83          	ld	s11,1112(sp)
    8020d428:	4c010113          	addi	sp,sp,1216
    8020d42c:	8082                	ret
      __debug_warn("[exec]push env string bad\n");
    8020d42e:	00006517          	auipc	a0,0x6
    8020d432:	5a250513          	addi	a0,a0,1442 # 802139d0 <vma_type+0x4f8>
    8020d436:	ffffb097          	auipc	ra,0xffffb
    8020d43a:	686080e7          	jalr	1670(ra) # 80208abc <__debug_warn>
      goto bad;
    8020d43e:	bf69                	j	8020d3d8 <exec+0x6c2>
      __debug_warn("[exec]env address vec too long\n");
    8020d440:	00006517          	auipc	a0,0x6
    8020d444:	5b050513          	addi	a0,a0,1456 # 802139f0 <vma_type+0x518>
    8020d448:	ffffb097          	auipc	ra,0xffffb
    8020d44c:	674080e7          	jalr	1652(ra) # 80208abc <__debug_warn>
      goto bad;
    8020d450:	b761                	j	8020d3d8 <exec+0x6c2>
      __debug_warn("[exec]env address copy bad\n");
    8020d452:	00006517          	auipc	a0,0x6
    8020d456:	5be50513          	addi	a0,a0,1470 # 80213a10 <vma_type+0x538>
    8020d45a:	ffffb097          	auipc	ra,0xffffb
    8020d45e:	662080e7          	jalr	1634(ra) # 80208abc <__debug_warn>
      goto bad;
    8020d462:	bf9d                	j	8020d3d8 <exec+0x6c2>
    __debug_warn("[exec]ustack address vec too long\n");
    8020d464:	00006517          	auipc	a0,0x6
    8020d468:	5cc50513          	addi	a0,a0,1484 # 80213a30 <vma_type+0x558>
    8020d46c:	ffffb097          	auipc	ra,0xffffb
    8020d470:	650080e7          	jalr	1616(ra) # 80208abc <__debug_warn>
    goto bad;
    8020d474:	b795                	j	8020d3d8 <exec+0x6c2>
    __debug_warn("[exec]ustack address copy bad\n");
    8020d476:	00006517          	auipc	a0,0x6
    8020d47a:	5e250513          	addi	a0,a0,1506 # 80213a58 <vma_type+0x580>
    8020d47e:	ffffb097          	auipc	ra,0xffffb
    8020d482:	63e080e7          	jalr	1598(ra) # 80208abc <__debug_warn>
    goto bad;
    8020d486:	bf89                	j	8020d3d8 <exec+0x6c2>
  for(last=s=path; *s; s++)
    8020d488:	0785                	addi	a5,a5,1
    8020d48a:	fff7c703          	lbu	a4,-1(a5)
    8020d48e:	c711                	beqz	a4,8020d49a <exec+0x784>
    if(*s == '/')
    8020d490:	fed71ce3          	bne	a4,a3,8020d488 <exec+0x772>
      last = s+1;
    8020d494:	b4f43c23          	sd	a5,-1192(s0)
    8020d498:	bfc5                	j	8020d488 <exec+0x772>
  strncpy(p->name, last, sizeof(p->name));
    8020d49a:	4651                	li	a2,20
    8020d49c:	b5843583          	ld	a1,-1192(s0)
    8020d4a0:	b7043983          	ld	s3,-1168(s0)
    8020d4a4:	10098513          	addi	a0,s3,256
    8020d4a8:	ffff4097          	auipc	ra,0xffff4
    8020d4ac:	9e4080e7          	jalr	-1564(ra) # 80200e8c <strncpy>
  np->trapframe->sp = sp;
    8020d4b0:	068bb783          	ld	a5,104(s7)
    8020d4b4:	fb84                	sd	s1,48(a5)
  np->trapframe->epc = entry;
    8020d4b6:	068bb783          	ld	a5,104(s7)
    8020d4ba:	0147bc23          	sd	s4,24(a5)
  swap(&(p->pagetable),&(np->pagetable),sizeof(p->pagetable));
    8020d4be:	4621                	li	a2,8
    8020d4c0:	060b8593          	addi	a1,s7,96
    8020d4c4:	06098513          	addi	a0,s3,96
    8020d4c8:	fffff097          	auipc	ra,0xfffff
    8020d4cc:	632080e7          	jalr	1586(ra) # 8020cafa <swap>
  swap(&(p->vma),&(np->vma),sizeof(p->vma));
    8020d4d0:	4621                	li	a2,8
    8020d4d2:	170b8593          	addi	a1,s7,368
    8020d4d6:	17098513          	addi	a0,s3,368
    8020d4da:	fffff097          	auipc	ra,0xfffff
    8020d4de:	620080e7          	jalr	1568(ra) # 8020cafa <swap>
  swap(&(p->trapframe),&(np->trapframe),sizeof(p->trapframe));
    8020d4e2:	4621                	li	a2,8
    8020d4e4:	068b8593          	addi	a1,s7,104
    8020d4e8:	06898513          	addi	a0,s3,104
    8020d4ec:	fffff097          	auipc	ra,0xfffff
    8020d4f0:	60e080e7          	jalr	1550(ra) # 8020cafa <swap>
  for(int fd = 0; fd < NOFILEMAX(p); fd++){
    8020d4f4:	0e09b783          	ld	a5,224(s3)
    8020d4f8:	04f05c63          	blez	a5,8020d550 <exec+0x83a>
    8020d4fc:	4481                	li	s1,0
    8020d4fe:	0c800a13          	li	s4,200
    8020d502:	a811                	j	8020d516 <exec+0x800>
    8020d504:	0485                	addi	s1,s1,1
    8020d506:	b7043783          	ld	a5,-1168(s0)
    8020d50a:	73fc                	ld	a5,224(a5)
    8020d50c:	00fa5363          	bge	s4,a5,8020d512 <exec+0x7fc>
    8020d510:	87d2                	mv	a5,s4
    8020d512:	02f4df63          	bge	s1,a5,8020d550 <exec+0x83a>
    struct file* f = p->ofile[fd];
    8020d516:	00349993          	slli	s3,s1,0x3
    8020d51a:	b7043703          	ld	a4,-1168(s0)
    8020d51e:	777c                	ld	a5,232(a4)
    8020d520:	97ce                	add	a5,a5,s3
    8020d522:	6388                	ld	a0,0(a5)
    if(f&&p->exec_close[fd]){
    8020d524:	d165                	beqz	a0,8020d504 <exec+0x7ee>
    8020d526:	00249a93          	slli	s5,s1,0x2
    8020d52a:	7b7c                	ld	a5,240(a4)
    8020d52c:	97d6                	add	a5,a5,s5
    8020d52e:	439c                	lw	a5,0(a5)
    8020d530:	dbf1                	beqz	a5,8020d504 <exec+0x7ee>
      fileclose(f);
    8020d532:	ffff8097          	auipc	ra,0xffff8
    8020d536:	d80080e7          	jalr	-640(ra) # 802052b2 <fileclose>
      p->ofile[fd] = 0;
    8020d53a:	b7043703          	ld	a4,-1168(s0)
    8020d53e:	777c                	ld	a5,232(a4)
    8020d540:	99be                	add	s3,s3,a5
    8020d542:	0009b023          	sd	zero,0(s3)
      p->exec_close[fd]=0;
    8020d546:	7b7c                	ld	a5,240(a4)
    8020d548:	9abe                	add	s5,s5,a5
    8020d54a:	000aa023          	sw	zero,0(s5)
    8020d54e:	bf5d                	j	8020d504 <exec+0x7ee>
  w_satp(MAKE_SATP(p->pagetable));
    8020d550:	b7043783          	ld	a5,-1168(s0)
    8020d554:	73bc                	ld	a5,96(a5)
    8020d556:	83b1                	srli	a5,a5,0xc
    8020d558:	577d                	li	a4,-1
    8020d55a:	177e                	slli	a4,a4,0x3f
    8020d55c:	8fd9                	or	a5,a5,a4
  asm volatile("csrw satp, %0" : : "r" (x));
    8020d55e:	18079073          	csrw	satp,a5
  asm volatile("sfence.vma");
    8020d562:	12000073          	sfence.vma
  uvmfree(np);
    8020d566:	855e                	mv	a0,s7
    8020d568:	ffffd097          	auipc	ra,0xffffd
    8020d56c:	896080e7          	jalr	-1898(ra) # 80209dfe <uvmfree>
  return argc;
    8020d570:	0009051b          	sext.w	a0,s2
    8020d574:	b541                	j	8020d3f4 <exec+0x6de>

000000008020d576 <uname_copyout>:
#else 
char const UNAME_MACHINE[] = "QEMU";
#endif 
char const UNAME_DOMAINNAME[] = "none";

int uname_copyout(uint64 addr) {
    8020d576:	1101                	addi	sp,sp,-32
    8020d578:	ec06                	sd	ra,24(sp)
    8020d57a:	e822                	sd	s0,16(sp)
    8020d57c:	e426                	sd	s1,8(sp)
    8020d57e:	1000                	addi	s0,sp,32
    8020d580:	84aa                	mv	s1,a0
	struct utsname *user_uts = (struct utsname*)addr;

	if (either_copyout(1, (uint64)user_uts->sysname, 
    8020d582:	4691                	li	a3,4
    8020d584:	00008617          	auipc	a2,0x8
    8020d588:	dac60613          	addi	a2,a2,-596 # 80215330 <UNAME_SYSNAME>
    8020d58c:	85aa                	mv	a1,a0
    8020d58e:	4505                	li	a0,1
    8020d590:	ffffe097          	auipc	ra,0xffffe
    8020d594:	8d6080e7          	jalr	-1834(ra) # 8020ae66 <either_copyout>
    8020d598:	08054e63          	bltz	a0,8020d634 <uname_copyout+0xbe>
			(void*)UNAME_SYSNAME, sizeof(UNAME_SYSNAME)) < 0) 
	{
		panic("uname_copyout: fail to copy sysname\n");
		return -1;
	}
	if (either_copyout(1, (uint64)user_uts->nodename, 
    8020d59c:	4695                	li	a3,5
    8020d59e:	00008617          	auipc	a2,0x8
    8020d5a2:	d8a60613          	addi	a2,a2,-630 # 80215328 <UNAME_NODENAME>
    8020d5a6:	04148593          	addi	a1,s1,65
    8020d5aa:	4505                	li	a0,1
    8020d5ac:	ffffe097          	auipc	ra,0xffffe
    8020d5b0:	8ba080e7          	jalr	-1862(ra) # 8020ae66 <either_copyout>
    8020d5b4:	08054863          	bltz	a0,8020d644 <uname_copyout+0xce>
			(void*)UNAME_NODENAME, sizeof(UNAME_NODENAME)) < 0) 
	{
		panic("uname_copyout: fail to copy nodename\n");
		return -1;
	}
	if (either_copyout(1, (uint64)user_uts->release, 
    8020d5b8:	4691                	li	a3,4
    8020d5ba:	00008617          	auipc	a2,0x8
    8020d5be:	d6660613          	addi	a2,a2,-666 # 80215320 <UNAME_RELEASE>
    8020d5c2:	08248593          	addi	a1,s1,130
    8020d5c6:	4505                	li	a0,1
    8020d5c8:	ffffe097          	auipc	ra,0xffffe
    8020d5cc:	89e080e7          	jalr	-1890(ra) # 8020ae66 <either_copyout>
    8020d5d0:	08054263          	bltz	a0,8020d654 <uname_copyout+0xde>
			(void*)UNAME_RELEASE, sizeof(UNAME_RELEASE)) < 0) 
	{
		panic("uname_copyout: fail to copy release\n");
		return -1;
	}
	if (either_copyout(1, (uint64)user_uts->version, 
    8020d5d4:	46d5                	li	a3,21
    8020d5d6:	00006617          	auipc	a2,0x6
    8020d5da:	5c260613          	addi	a2,a2,1474 # 80213b98 <UNAME_VERSION>
    8020d5de:	0c348593          	addi	a1,s1,195
    8020d5e2:	4505                	li	a0,1
    8020d5e4:	ffffe097          	auipc	ra,0xffffe
    8020d5e8:	882080e7          	jalr	-1918(ra) # 8020ae66 <either_copyout>
    8020d5ec:	06054c63          	bltz	a0,8020d664 <uname_copyout+0xee>
			(void*)UNAME_VERSION, sizeof(UNAME_VERSION)) < 0) 
	{
		panic("uname_copyout: fail to copy version\n");
		return -1;
	}
	if (either_copyout(1, (uint64)user_uts->machine, 
    8020d5f0:	4695                	li	a3,5
    8020d5f2:	00008617          	auipc	a2,0x8
    8020d5f6:	d2660613          	addi	a2,a2,-730 # 80215318 <UNAME_MACHINE>
    8020d5fa:	10448593          	addi	a1,s1,260
    8020d5fe:	4505                	li	a0,1
    8020d600:	ffffe097          	auipc	ra,0xffffe
    8020d604:	866080e7          	jalr	-1946(ra) # 8020ae66 <either_copyout>
    8020d608:	06054663          	bltz	a0,8020d674 <uname_copyout+0xfe>
			(void*)UNAME_MACHINE, sizeof(UNAME_MACHINE)) < 0) 
	{
		panic("uname_copyout: fail to copy machine\n");
		return -1;
	}
	if (either_copyout(1, (uint64)user_uts->domainname, 
    8020d60c:	4695                	li	a3,5
    8020d60e:	00008617          	auipc	a2,0x8
    8020d612:	d0260613          	addi	a2,a2,-766 # 80215310 <UNAME_DOMAINNAME>
    8020d616:	14548593          	addi	a1,s1,325
    8020d61a:	4505                	li	a0,1
    8020d61c:	ffffe097          	auipc	ra,0xffffe
    8020d620:	84a080e7          	jalr	-1974(ra) # 8020ae66 <either_copyout>
    8020d624:	06054063          	bltz	a0,8020d684 <uname_copyout+0x10e>
		panic("uname_copyout: fail to copy domainname\n");
		return -1;
	}

	return 0;
}
    8020d628:	4501                	li	a0,0
    8020d62a:	60e2                	ld	ra,24(sp)
    8020d62c:	6442                	ld	s0,16(sp)
    8020d62e:	64a2                	ld	s1,8(sp)
    8020d630:	6105                	addi	sp,sp,32
    8020d632:	8082                	ret
		panic("uname_copyout: fail to copy sysname\n");
    8020d634:	00006517          	auipc	a0,0x6
    8020d638:	47450513          	addi	a0,a0,1140 # 80213aa8 <vma_type+0x5d0>
    8020d63c:	ffffb097          	auipc	ra,0xffffb
    8020d640:	0aa080e7          	jalr	170(ra) # 802086e6 <panic>
		panic("uname_copyout: fail to copy nodename\n");
    8020d644:	00006517          	auipc	a0,0x6
    8020d648:	48c50513          	addi	a0,a0,1164 # 80213ad0 <vma_type+0x5f8>
    8020d64c:	ffffb097          	auipc	ra,0xffffb
    8020d650:	09a080e7          	jalr	154(ra) # 802086e6 <panic>
		panic("uname_copyout: fail to copy release\n");
    8020d654:	00006517          	auipc	a0,0x6
    8020d658:	4a450513          	addi	a0,a0,1188 # 80213af8 <vma_type+0x620>
    8020d65c:	ffffb097          	auipc	ra,0xffffb
    8020d660:	08a080e7          	jalr	138(ra) # 802086e6 <panic>
		panic("uname_copyout: fail to copy version\n");
    8020d664:	00006517          	auipc	a0,0x6
    8020d668:	4bc50513          	addi	a0,a0,1212 # 80213b20 <vma_type+0x648>
    8020d66c:	ffffb097          	auipc	ra,0xffffb
    8020d670:	07a080e7          	jalr	122(ra) # 802086e6 <panic>
		panic("uname_copyout: fail to copy machine\n");
    8020d674:	00006517          	auipc	a0,0x6
    8020d678:	4d450513          	addi	a0,a0,1236 # 80213b48 <vma_type+0x670>
    8020d67c:	ffffb097          	auipc	ra,0xffffb
    8020d680:	06a080e7          	jalr	106(ra) # 802086e6 <panic>
		panic("uname_copyout: fail to copy domainname\n");
    8020d684:	00006517          	auipc	a0,0x6
    8020d688:	4ec50513          	addi	a0,a0,1260 # 80213b70 <vma_type+0x698>
    8020d68c:	ffffb097          	auipc	ra,0xffffb
    8020d690:	05a080e7          	jalr	90(ra) # 802086e6 <panic>

000000008020d694 <fdallocfrom>:
extern struct dirent *selfexe;
// Allocate a file descriptor for the given file.
// Takes over file reference from caller on success.
static int
fdallocfrom(struct file *f,int start)
{
    8020d694:	1101                	addi	sp,sp,-32
    8020d696:	ec06                	sd	ra,24(sp)
    8020d698:	e822                	sd	s0,16(sp)
    8020d69a:	e426                	sd	s1,8(sp)
    8020d69c:	e04a                	sd	s2,0(sp)
    8020d69e:	1000                	addi	s0,sp,32
    8020d6a0:	892a                	mv	s2,a0
    8020d6a2:	84ae                	mv	s1,a1
  int fd;
  struct proc *p = myproc();
    8020d6a4:	ffffe097          	auipc	ra,0xffffe
    8020d6a8:	da8080e7          	jalr	-600(ra) # 8020b44c <myproc>
  //printf("[fdalloc]filelimit:%p\n",NOFILEMAX(p));
  for(fd = start; fd < NOFILEMAX(p); fd++){
    8020d6ac:	7170                	ld	a2,224(a0)
    8020d6ae:	0c800793          	li	a5,200
    8020d6b2:	00c7d463          	bge	a5,a2,8020d6ba <fdallocfrom+0x26>
    8020d6b6:	0c800613          	li	a2,200
    8020d6ba:	02c4d863          	bge	s1,a2,8020d6ea <fdallocfrom+0x56>
    8020d6be:	8726                	mv	a4,s1
    8020d6c0:	048e                	slli	s1,s1,0x3
    8020d6c2:	757c                	ld	a5,232(a0)
    8020d6c4:	97a6                	add	a5,a5,s1
    8020d6c6:	0007051b          	sext.w	a0,a4
    if(p->ofile[fd] == 0){
    8020d6ca:	6394                	ld	a3,0(a5)
    8020d6cc:	c699                	beqz	a3,8020d6da <fdallocfrom+0x46>
  for(fd = start; fd < NOFILEMAX(p); fd++){
    8020d6ce:	0705                	addi	a4,a4,1
    8020d6d0:	07a1                	addi	a5,a5,8
    8020d6d2:	fec71ae3          	bne	a4,a2,8020d6c6 <fdallocfrom+0x32>
      p->ofile[fd] = f;
      return fd;
    }
  }
  return -EMFILE;
    8020d6d6:	5521                	li	a0,-24
    8020d6d8:	a019                	j	8020d6de <fdallocfrom+0x4a>
      p->ofile[fd] = f;
    8020d6da:	0127b023          	sd	s2,0(a5)
}
    8020d6de:	60e2                	ld	ra,24(sp)
    8020d6e0:	6442                	ld	s0,16(sp)
    8020d6e2:	64a2                	ld	s1,8(sp)
    8020d6e4:	6902                	ld	s2,0(sp)
    8020d6e6:	6105                	addi	sp,sp,32
    8020d6e8:	8082                	ret
  return -EMFILE;
    8020d6ea:	5521                	li	a0,-24
    8020d6ec:	bfcd                	j	8020d6de <fdallocfrom+0x4a>

000000008020d6ee <sys_openat>:
}


uint64
sys_openat()
{
    8020d6ee:	7149                	addi	sp,sp,-368
    8020d6f0:	f686                	sd	ra,360(sp)
    8020d6f2:	f2a2                	sd	s0,352(sp)
    8020d6f4:	eea6                	sd	s1,344(sp)
    8020d6f6:	eaca                	sd	s2,336(sp)
    8020d6f8:	e6ce                	sd	s3,328(sp)
    8020d6fa:	e2d2                	sd	s4,320(sp)
    8020d6fc:	fe56                	sd	s5,312(sp)
    8020d6fe:	1a80                	addi	s0,sp,368
  char path[FAT32_MAX_PATH];
  int dirfd, flags,mode;
  int fd ,devno = -1;
    8020d700:	57fd                	li	a5,-1
    8020d702:	eaf42423          	sw	a5,-344(s0)
  struct file *f;
  struct file *dirf;
  struct dirent *dp = NULL;
  struct dirent *ep;
  struct proc* p = myproc();
    8020d706:	ffffe097          	auipc	ra,0xffffe
    8020d70a:	d46080e7          	jalr	-698(ra) # 8020b44c <myproc>
    8020d70e:	89aa                	mv	s3,a0
  int err = 0;
    8020d710:	e8042e23          	sw	zero,-356(s0)
  
  argfd(0,&dirfd,&dirf);
    8020d714:	ea040613          	addi	a2,s0,-352
    8020d718:	eb440593          	addi	a1,s0,-332
    8020d71c:	4501                	li	a0,0
    8020d71e:	fffff097          	auipc	ra,0xfffff
    8020d722:	152080e7          	jalr	338(ra) # 8020c870 <argfd>
  if(argstr(1, path, FAT32_MAX_PATH) < 0){
    8020d726:	10400613          	li	a2,260
    8020d72a:	eb840593          	addi	a1,s0,-328
    8020d72e:	4505                	li	a0,1
    8020d730:	fffff097          	auipc	ra,0xfffff
    8020d734:	110080e7          	jalr	272(ra) # 8020c840 <argstr>
    8020d738:	0e054963          	bltz	a0,8020d82a <sys_openat+0x13c>
    __debug_warn("[sys openat] open not valid path\n");
    return -1;
  }
  if(argint(2, &flags) < 0
    8020d73c:	eb040593          	addi	a1,s0,-336
    8020d740:	4509                	li	a0,2
    8020d742:	fffff097          	auipc	ra,0xfffff
    8020d746:	0ba080e7          	jalr	186(ra) # 8020c7fc <argint>
   ||argint(3, &mode) <0 )
    return -1;
    8020d74a:	57fd                	li	a5,-1
  if(argint(2, &flags) < 0
    8020d74c:	20054763          	bltz	a0,8020d95a <sys_openat+0x26c>
   ||argint(3, &mode) <0 )
    8020d750:	eac40593          	addi	a1,s0,-340
    8020d754:	450d                	li	a0,3
    8020d756:	fffff097          	auipc	ra,0xfffff
    8020d75a:	0a6080e7          	jalr	166(ra) # 8020c7fc <argint>
    8020d75e:	28054963          	bltz	a0,8020d9f0 <sys_openat+0x302>
  // __debug_warn("[sys openat]1flags:%p mode:%p path:%s\n",flags,mode,path);
  // print_vma_info(p);
  if(mode == 0){
    8020d762:	eac42783          	lw	a5,-340(s0)
    8020d766:	ef89                	bnez	a5,8020d780 <sys_openat+0x92>
    mode = flags&O_DIRECTORY?0777:0666;
    8020d768:	eb042703          	lw	a4,-336(s0)
    8020d76c:	1ff00793          	li	a5,511
    8020d770:	02f71693          	slli	a3,a4,0x2f
    8020d774:	0006c463          	bltz	a3,8020d77c <sys_openat+0x8e>
    8020d778:	1b600793          	li	a5,438
    8020d77c:	eaf42623          	sw	a5,-340(s0)
  }
  mode = mode & (~p->umask);
    8020d780:	1c09a783          	lw	a5,448(s3)
    8020d784:	fff7c793          	not	a5,a5
    8020d788:	eac42703          	lw	a4,-340(s0)
    8020d78c:	8ff9                	and	a5,a5,a4
    8020d78e:	eaf42623          	sw	a5,-340(s0)
  //__debug_warn("[sys openat]2flags:%p mode:%p\n",flags,mode);
  if(mode | O_RDWR){
  	flags |= O_RDWR;
    8020d792:	eb042783          	lw	a5,-336(s0)
    8020d796:	0027e793          	ori	a5,a5,2
    8020d79a:	eaf42823          	sw	a5,-336(s0)
  if(flags&0x8000){
    flags|=O_CREATE;
  }
  */
  
  if(dirf&&dirf->type==FD_ENTRY){
    8020d79e:	ea043a03          	ld	s4,-352(s0)
    8020d7a2:	000a0863          	beqz	s4,8020d7b2 <sys_openat+0xc4>
    8020d7a6:	000a2703          	lw	a4,0(s4)
    8020d7aa:	4789                	li	a5,2
    8020d7ac:	08f70963          	beq	a4,a5,8020d83e <sys_openat+0x150>
  struct dirent *dp = NULL;
    8020d7b0:	4a01                	li	s4,0
    if(!(dp->attribute & ATTR_DIRECTORY)){
      eunlock(dp);
      dp = NULL;
    }
  }    
  if((ep = ename(dp,path,&devno)) == NULL){  
    8020d7b2:	ea840613          	addi	a2,s0,-344
    8020d7b6:	eb840593          	addi	a1,s0,-328
    8020d7ba:	8552                	mv	a0,s4
    8020d7bc:	ffff7097          	auipc	ra,0xffff7
    8020d7c0:	bf8080e7          	jalr	-1032(ra) # 802043b4 <ename>
    8020d7c4:	84aa                	mv	s1,a0
    8020d7c6:	cd51                	beqz	a0,8020d862 <sys_openat+0x174>
      if(dp>=0)
      __debug_warn("[sys openat] env path %s not found\n",path);
      return -1;
    }
  }else{
     elock(ep);
    8020d7c8:	ffff6097          	auipc	ra,0xffff6
    8020d7cc:	1aa080e7          	jalr	426(ra) # 80203972 <elock>
  }
  int pathlen = strlen(path);
    8020d7d0:	eb840513          	addi	a0,s0,-328
    8020d7d4:	ffff3097          	auipc	ra,0xffff3
    8020d7d8:	728080e7          	jalr	1832(ra) # 80200efc <strlen>
  if(ep==dev&&devno==-1&&strncmp(path+pathlen-3,"dev",4)){
    8020d7dc:	0085e797          	auipc	a5,0x85e
    8020d7e0:	6cc7b783          	ld	a5,1740(a5) # 80a6bea8 <dev>
    8020d7e4:	0c978863          	beq	a5,s1,8020d8b4 <sys_openat+0x1c6>
    eunlock(ep);
    __debug_warn("[sys openat] device %s don't exist\n",path);
    return -1;
  }
  if(devno==-1&&(ep->attribute & ATTR_DIRECTORY) && ( !(flags&O_WRONLY) && !(flags&O_RDWR) )){
    8020d7e8:	ea842703          	lw	a4,-344(s0)
    8020d7ec:	57fd                	li	a5,-1
    8020d7ee:	0cf71863          	bne	a4,a5,8020d8be <sys_openat+0x1d0>
    8020d7f2:	1004c783          	lbu	a5,256(s1)
    8020d7f6:	8bc1                	andi	a5,a5,16
    8020d7f8:	c3f9                	beqz	a5,8020d8be <sys_openat+0x1d0>
    8020d7fa:	eb042783          	lw	a5,-336(s0)
    8020d7fe:	8b8d                	andi	a5,a5,3
    8020d800:	efdd                	bnez	a5,8020d8be <sys_openat+0x1d0>
    __debug_warn("[sys openat] diretory only can be read\n");
    8020d802:	00006517          	auipc	a0,0x6
    8020d806:	42e50513          	addi	a0,a0,1070 # 80213c30 <UNAME_VERSION+0x98>
    8020d80a:	ffffb097          	auipc	ra,0xffffb
    8020d80e:	2b2080e7          	jalr	690(ra) # 80208abc <__debug_warn>
    eunlock(ep);
    8020d812:	8526                	mv	a0,s1
    8020d814:	ffff6097          	auipc	ra,0xffff6
    8020d818:	194080e7          	jalr	404(ra) # 802039a8 <eunlock>
    eput(ep);
    8020d81c:	8526                	mv	a0,s1
    8020d81e:	ffff6097          	auipc	ra,0xffff6
    8020d822:	1d8080e7          	jalr	472(ra) # 802039f6 <eput>
    return -1;
    8020d826:	57fd                	li	a5,-1
    8020d828:	aa0d                	j	8020d95a <sys_openat+0x26c>
    __debug_warn("[sys openat] open not valid path\n");
    8020d82a:	00006517          	auipc	a0,0x6
    8020d82e:	38650513          	addi	a0,a0,902 # 80213bb0 <UNAME_VERSION+0x18>
    8020d832:	ffffb097          	auipc	ra,0xffffb
    8020d836:	28a080e7          	jalr	650(ra) # 80208abc <__debug_warn>
    return -1;
    8020d83a:	57fd                	li	a5,-1
    8020d83c:	aa39                	j	8020d95a <sys_openat+0x26c>
    dp = dirf->ep;
    8020d83e:	018a3a03          	ld	s4,24(s4)
    elock(dp);
    8020d842:	8552                	mv	a0,s4
    8020d844:	ffff6097          	auipc	ra,0xffff6
    8020d848:	12e080e7          	jalr	302(ra) # 80203972 <elock>
    if(!(dp->attribute & ATTR_DIRECTORY)){
    8020d84c:	100a4783          	lbu	a5,256(s4)
    8020d850:	8bc1                	andi	a5,a5,16
    8020d852:	f3a5                	bnez	a5,8020d7b2 <sys_openat+0xc4>
      eunlock(dp);
    8020d854:	8552                	mv	a0,s4
    8020d856:	ffff6097          	auipc	ra,0xffff6
    8020d85a:	152080e7          	jalr	338(ra) # 802039a8 <eunlock>
      dp = NULL;
    8020d85e:	4a01                	li	s4,0
    8020d860:	bf89                	j	8020d7b2 <sys_openat+0xc4>
    if(flags & O_CREATE){
    8020d862:	eb042683          	lw	a3,-336(s0)
    8020d866:	0406f793          	andi	a5,a3,64
    8020d86a:	ef89                	bnez	a5,8020d884 <sys_openat+0x196>
      __debug_warn("[sys openat] env path %s not found\n",path);
    8020d86c:	eb840593          	addi	a1,s0,-328
    8020d870:	00006517          	auipc	a0,0x6
    8020d874:	40050513          	addi	a0,a0,1024 # 80213c70 <UNAME_VERSION+0xd8>
    8020d878:	ffffb097          	auipc	ra,0xffffb
    8020d87c:	244080e7          	jalr	580(ra) # 80208abc <__debug_warn>
      return -1;
    8020d880:	57fd                	li	a5,-1
    8020d882:	a8e1                	j	8020d95a <sys_openat+0x26c>
      ep = create(dp,path, T_FILE, flags, &err);
    8020d884:	e9c40713          	addi	a4,s0,-356
    8020d888:	4609                	li	a2,2
    8020d88a:	eb840593          	addi	a1,s0,-328
    8020d88e:	8552                	mv	a0,s4
    8020d890:	ffff7097          	auipc	ra,0xffff7
    8020d894:	c26080e7          	jalr	-986(ra) # 802044b6 <create>
    8020d898:	84aa                	mv	s1,a0
      if(ep == NULL){
    8020d89a:	f91d                	bnez	a0,8020d7d0 <sys_openat+0xe2>
        __debug_warn("[sys openat] create file %s failed\n",path);
    8020d89c:	eb840593          	addi	a1,s0,-328
    8020d8a0:	00006517          	auipc	a0,0x6
    8020d8a4:	33850513          	addi	a0,a0,824 # 80213bd8 <UNAME_VERSION+0x40>
    8020d8a8:	ffffb097          	auipc	ra,0xffffb
    8020d8ac:	214080e7          	jalr	532(ra) # 80208abc <__debug_warn>
        return -1;
    8020d8b0:	57fd                	li	a5,-1
    8020d8b2:	a065                	j	8020d95a <sys_openat+0x26c>
  if(ep==dev&&devno==-1&&strncmp(path+pathlen-3,"dev",4)){
    8020d8b4:	ea842703          	lw	a4,-344(s0)
    8020d8b8:	57fd                	li	a5,-1
    8020d8ba:	0af70a63          	beq	a4,a5,8020d96e <sys_openat+0x280>
  }


  if((f = filealloc()) == NULL || (fd = fdalloc(f)) < 0){
    8020d8be:	ffff8097          	auipc	ra,0xffff8
    8020d8c2:	95c080e7          	jalr	-1700(ra) # 8020521a <filealloc>
    8020d8c6:	892a                	mv	s2,a0
    8020d8c8:	12050b63          	beqz	a0,8020d9fe <sys_openat+0x310>
  return fdallocfrom(f,0);
    8020d8cc:	4581                	li	a1,0
    8020d8ce:	00000097          	auipc	ra,0x0
    8020d8d2:	dc6080e7          	jalr	-570(ra) # 8020d694 <fdallocfrom>
    8020d8d6:	8aaa                	mv	s5,a0
  if((f = filealloc()) == NULL || (fd = fdalloc(f)) < 0){
    8020d8d8:	10054e63          	bltz	a0,8020d9f4 <sys_openat+0x306>
    eunlock(ep);
    eput(ep);
    return -EMFILE;
  }

  if(ep!=dev && !(ep->attribute & ATTR_DIRECTORY) && (flags & O_TRUNC)){
    8020d8dc:	0085e797          	auipc	a5,0x85e
    8020d8e0:	5cc7b783          	ld	a5,1484(a5) # 80a6bea8 <dev>
    8020d8e4:	00978b63          	beq	a5,s1,8020d8fa <sys_openat+0x20c>
    8020d8e8:	1004c783          	lbu	a5,256(s1)
    8020d8ec:	8bc1                	andi	a5,a5,16
    8020d8ee:	e791                	bnez	a5,8020d8fa <sys_openat+0x20c>
    8020d8f0:	eb042783          	lw	a5,-336(s0)
    8020d8f4:	2007f793          	andi	a5,a5,512
    8020d8f8:	efc5                	bnez	a5,8020d9b0 <sys_openat+0x2c2>
    etrunc(ep);
  }
  if(devno ==-1){
    8020d8fa:	ea842703          	lw	a4,-344(s0)
    8020d8fe:	57fd                	li	a5,-1
    8020d900:	0af70e63          	beq	a4,a5,8020d9bc <sys_openat+0x2ce>
    f->off = (flags & O_APPEND) ? ep->file_size : 0;
    f->ep = ep;
    f->readable = !(flags & O_WRONLY);
    f->writable = (flags & O_WRONLY) || (flags & O_RDWR);
  }else{
    f->type = FD_DEVICE;
    8020d904:	478d                	li	a5,3
    8020d906:	00f92023          	sw	a5,0(s2)
    f->off = 0;
    8020d90a:	02093c23          	sd	zero,56(s2)
    f->ep = NULL;  
    8020d90e:	00093c23          	sd	zero,24(s2)
    f->major = devno;
    8020d912:	ea842783          	lw	a5,-344(s0)
    8020d916:	04f91023          	sh	a5,64(s2)
    f->readable = !(flags & O_WRONLY);
    8020d91a:	eb042783          	lw	a5,-336(s0)
    8020d91e:	0017c713          	xori	a4,a5,1
    8020d922:	8b05                	andi	a4,a4,1
    8020d924:	00e90423          	sb	a4,8(s2)
    f->writable = (flags & O_WRONLY) || (flags & O_RDWR);
    8020d928:	8b8d                	andi	a5,a5,3
    8020d92a:	00f037b3          	snez	a5,a5
    8020d92e:	00f904a3          	sb	a5,9(s2)
  }
  eunlock(ep);
    8020d932:	8526                	mv	a0,s1
    8020d934:	ffff6097          	auipc	ra,0xffff6
    8020d938:	074080e7          	jalr	116(ra) # 802039a8 <eunlock>
  if(dp){
    8020d93c:	000a0763          	beqz	s4,8020d94a <sys_openat+0x25c>
    elock(dp);  
    8020d940:	8552                	mv	a0,s4
    8020d942:	ffff6097          	auipc	ra,0xffff6
    8020d946:	030080e7          	jalr	48(ra) # 80203972 <elock>
  }
  p->exec_close[fd] = 0;
    8020d94a:	87d6                	mv	a5,s5
    8020d94c:	0f09b703          	ld	a4,240(s3)
    8020d950:	002a9513          	slli	a0,s5,0x2
    8020d954:	953a                	add	a0,a0,a4
    8020d956:	00052023          	sw	zero,0(a0)
  // __debug_warn("[sys openat] fd:%d openat:%s\n",fd,path);
  return fd;
}
    8020d95a:	853e                	mv	a0,a5
    8020d95c:	70b6                	ld	ra,360(sp)
    8020d95e:	7416                	ld	s0,352(sp)
    8020d960:	64f6                	ld	s1,344(sp)
    8020d962:	6956                	ld	s2,336(sp)
    8020d964:	69b6                	ld	s3,328(sp)
    8020d966:	6a16                	ld	s4,320(sp)
    8020d968:	7af2                	ld	s5,312(sp)
    8020d96a:	6175                	addi	sp,sp,368
    8020d96c:	8082                	ret
  if(ep==dev&&devno==-1&&strncmp(path+pathlen-3,"dev",4)){
    8020d96e:	fc040793          	addi	a5,s0,-64
    8020d972:	953e                	add	a0,a0,a5
    8020d974:	4611                	li	a2,4
    8020d976:	00006597          	auipc	a1,0x6
    8020d97a:	28a58593          	addi	a1,a1,650 # 80213c00 <UNAME_VERSION+0x68>
    8020d97e:	ef550513          	addi	a0,a0,-267
    8020d982:	ffff3097          	auipc	ra,0xffff3
    8020d986:	4ce080e7          	jalr	1230(ra) # 80200e50 <strncmp>
    8020d98a:	e4050fe3          	beqz	a0,8020d7e8 <sys_openat+0xfa>
    eunlock(ep);
    8020d98e:	8526                	mv	a0,s1
    8020d990:	ffff6097          	auipc	ra,0xffff6
    8020d994:	018080e7          	jalr	24(ra) # 802039a8 <eunlock>
    __debug_warn("[sys openat] device %s don't exist\n",path);
    8020d998:	eb840593          	addi	a1,s0,-328
    8020d99c:	00006517          	auipc	a0,0x6
    8020d9a0:	26c50513          	addi	a0,a0,620 # 80213c08 <UNAME_VERSION+0x70>
    8020d9a4:	ffffb097          	auipc	ra,0xffffb
    8020d9a8:	118080e7          	jalr	280(ra) # 80208abc <__debug_warn>
    return -1;
    8020d9ac:	57fd                	li	a5,-1
    8020d9ae:	b775                	j	8020d95a <sys_openat+0x26c>
    etrunc(ep);
    8020d9b0:	8526                	mv	a0,s1
    8020d9b2:	ffff6097          	auipc	ra,0xffff6
    8020d9b6:	f36080e7          	jalr	-202(ra) # 802038e8 <etrunc>
    8020d9ba:	b781                	j	8020d8fa <sys_openat+0x20c>
    f->type = FD_ENTRY;
    8020d9bc:	4789                	li	a5,2
    8020d9be:	00f92023          	sw	a5,0(s2)
    f->off = (flags & O_APPEND) ? ep->file_size : 0;
    8020d9c2:	eb042783          	lw	a5,-336(s0)
    8020d9c6:	4007f693          	andi	a3,a5,1024
    8020d9ca:	4701                	li	a4,0
    8020d9cc:	c299                	beqz	a3,8020d9d2 <sys_openat+0x2e4>
    8020d9ce:	1084e703          	lwu	a4,264(s1)
    8020d9d2:	02e93c23          	sd	a4,56(s2)
    f->ep = ep;
    8020d9d6:	00993c23          	sd	s1,24(s2)
    f->readable = !(flags & O_WRONLY);
    8020d9da:	0017c713          	xori	a4,a5,1
    8020d9de:	8b05                	andi	a4,a4,1
    8020d9e0:	00e90423          	sb	a4,8(s2)
    f->writable = (flags & O_WRONLY) || (flags & O_RDWR);
    8020d9e4:	8b8d                	andi	a5,a5,3
    8020d9e6:	00f037b3          	snez	a5,a5
    8020d9ea:	00f904a3          	sb	a5,9(s2)
    8020d9ee:	b791                	j	8020d932 <sys_openat+0x244>
    return -1;
    8020d9f0:	57fd                	li	a5,-1
    8020d9f2:	b7a5                	j	8020d95a <sys_openat+0x26c>
      fileclose(f);
    8020d9f4:	854a                	mv	a0,s2
    8020d9f6:	ffff8097          	auipc	ra,0xffff8
    8020d9fa:	8bc080e7          	jalr	-1860(ra) # 802052b2 <fileclose>
    __debug_warn("file alloc failed\n");
    8020d9fe:	00006517          	auipc	a0,0x6
    8020da02:	25a50513          	addi	a0,a0,602 # 80213c58 <UNAME_VERSION+0xc0>
    8020da06:	ffffb097          	auipc	ra,0xffffb
    8020da0a:	0b6080e7          	jalr	182(ra) # 80208abc <__debug_warn>
    eunlock(ep);
    8020da0e:	8526                	mv	a0,s1
    8020da10:	ffff6097          	auipc	ra,0xffff6
    8020da14:	f98080e7          	jalr	-104(ra) # 802039a8 <eunlock>
    eput(ep);
    8020da18:	8526                	mv	a0,s1
    8020da1a:	ffff6097          	auipc	ra,0xffff6
    8020da1e:	fdc080e7          	jalr	-36(ra) # 802039f6 <eput>
    return -EMFILE;
    8020da22:	57a1                	li	a5,-24
    8020da24:	bf1d                	j	8020d95a <sys_openat+0x26c>

000000008020da26 <sys_mkdirat>:

uint64
sys_mkdirat(void)
{
    8020da26:	7129                	addi	sp,sp,-320
    8020da28:	fe06                	sd	ra,312(sp)
    8020da2a:	fa22                	sd	s0,304(sp)
    8020da2c:	f626                	sd	s1,296(sp)
    8020da2e:	f24a                	sd	s2,288(sp)
    8020da30:	0280                	addi	s0,sp,320
  char path[FAT32_MAX_PATH];
  struct dirent *ep, *dp = NULL;
  struct file *fp;
  int dirfd;
  int mode;
  int err = 0;
    8020da32:	ec042223          	sw	zero,-316(s0)
  struct proc* p = myproc();
    8020da36:	ffffe097          	auipc	ra,0xffffe
    8020da3a:	a16080e7          	jalr	-1514(ra) # 8020b44c <myproc>
    8020da3e:	84aa                	mv	s1,a0
  if((argfd(0, &dirfd, &fp) < 0)){
    8020da40:	ed040613          	addi	a2,s0,-304
    8020da44:	ecc40593          	addi	a1,s0,-308
    8020da48:	4501                	li	a0,0
    8020da4a:	fffff097          	auipc	ra,0xfffff
    8020da4e:	e26080e7          	jalr	-474(ra) # 8020c870 <argfd>
    8020da52:	0a054063          	bltz	a0,8020daf2 <sys_mkdirat+0xcc>
    }
    dp = p->cwd;
  }
  else
  {
    dp = fp->ep;
    8020da56:	ed043783          	ld	a5,-304(s0)
    8020da5a:	0187b903          	ld	s2,24(a5)
  }
  
  if(argstr(1, path, FAT32_MAX_PATH) < 0)
    8020da5e:	10400613          	li	a2,260
    8020da62:	ed840593          	addi	a1,s0,-296
    8020da66:	4505                	li	a0,1
    8020da68:	fffff097          	auipc	ra,0xfffff
    8020da6c:	dd8080e7          	jalr	-552(ra) # 8020c840 <argstr>
    8020da70:	87aa                	mv	a5,a0
  {
    return -ENAMETOOLONG;
    8020da72:	fdc00513          	li	a0,-36
  if(argstr(1, path, FAT32_MAX_PATH) < 0)
    8020da76:	0607c863          	bltz	a5,8020dae6 <sys_mkdirat+0xc0>
  }
  
  if(argint(2, &mode) < 0)
    8020da7a:	ec840593          	addi	a1,s0,-312
    8020da7e:	4509                	li	a0,2
    8020da80:	fffff097          	auipc	ra,0xfffff
    8020da84:	d7c080e7          	jalr	-644(ra) # 8020c7fc <argint>
    8020da88:	0a054a63          	bltz	a0,8020db3c <sys_mkdirat+0x116>
  {
    return -ENAMETOOLONG;
  }
  if(p->umask == 0){
    8020da8c:	1c04a783          	lw	a5,448(s1)
    8020da90:	cf81                	beqz	a5,8020daa8 <sys_mkdirat+0x82>

  }
  else if((mode&p->umask)==p->umask){
    8020da92:	ec842703          	lw	a4,-312(s0)
    8020da96:	00e7f6b3          	and	a3,a5,a4
    mode = mode - p->umask;
  }
  else{
    return -1;
    8020da9a:	557d                	li	a0,-1
  else if((mode&p->umask)==p->umask){
    8020da9c:	04d79563          	bne	a5,a3,8020dae6 <sys_mkdirat+0xc0>
    mode = mode - p->umask;
    8020daa0:	40f707bb          	subw	a5,a4,a5
    8020daa4:	ecf42423          	sw	a5,-312(s0)
  }
  //__debug_info("[sys_mkdirat] create %s, dirfd = %d, mode = %p\n", path, dirfd, mode);
  
  if((ep = create(dp, path, T_DIR, (mode & ~S_IFMT) | S_IFDIR, &err)) == NULL)
    8020daa8:	ec842683          	lw	a3,-312(s0)
    8020daac:	77c5                	lui	a5,0xffff1
    8020daae:	17fd                	addi	a5,a5,-1
    8020dab0:	8efd                	and	a3,a3,a5
    8020dab2:	6791                	lui	a5,0x4
    8020dab4:	8edd                	or	a3,a3,a5
    8020dab6:	ec440713          	addi	a4,s0,-316
    8020daba:	2681                	sext.w	a3,a3
    8020dabc:	4605                	li	a2,1
    8020dabe:	ed840593          	addi	a1,s0,-296
    8020dac2:	854a                	mv	a0,s2
    8020dac4:	ffff7097          	auipc	ra,0xffff7
    8020dac8:	9f2080e7          	jalr	-1550(ra) # 802044b6 <create>
    8020dacc:	84aa                	mv	s1,a0
    8020dace:	c939                	beqz	a0,8020db24 <sys_mkdirat+0xfe>
    __debug_warn("[sys_mkdirat] create %s failed\n", path);
    return -EINVAL;
  }
  
  //__debug_info("[sys_mkdirat] create %s ing......\n", path);
  eunlock(ep);
    8020dad0:	ffff6097          	auipc	ra,0xffff6
    8020dad4:	ed8080e7          	jalr	-296(ra) # 802039a8 <eunlock>
  eput(ep);
    8020dad8:	8526                	mv	a0,s1
    8020dada:	ffff6097          	auipc	ra,0xffff6
    8020dade:	f1c080e7          	jalr	-228(ra) # 802039f6 <eput>
  return err;
    8020dae2:	ec442503          	lw	a0,-316(s0)
}
    8020dae6:	70f2                	ld	ra,312(sp)
    8020dae8:	7452                	ld	s0,304(sp)
    8020daea:	74b2                	ld	s1,296(sp)
    8020daec:	7912                	ld	s2,288(sp)
    8020daee:	6131                	addi	sp,sp,320
    8020daf0:	8082                	ret
    if(path[0] != '/' && dirfd != AT_FDCWD)
    8020daf2:	ed844703          	lbu	a4,-296(s0)
    8020daf6:	02f00793          	li	a5,47
    8020dafa:	00f70863          	beq	a4,a5,8020db0a <sys_mkdirat+0xe4>
    8020dafe:	ecc42703          	lw	a4,-308(s0)
    8020db02:	f9c00793          	li	a5,-100
    8020db06:	00f71563          	bne	a4,a5,8020db10 <sys_mkdirat+0xea>
    dp = p->cwd;
    8020db0a:	0f84b903          	ld	s2,248(s1)
    8020db0e:	bf81                	j	8020da5e <sys_mkdirat+0x38>
      __debug_warn("[sys_mkdirat] wrong dirfd\n");
    8020db10:	00006517          	auipc	a0,0x6
    8020db14:	18850513          	addi	a0,a0,392 # 80213c98 <UNAME_VERSION+0x100>
    8020db18:	ffffb097          	auipc	ra,0xffffb
    8020db1c:	fa4080e7          	jalr	-92(ra) # 80208abc <__debug_warn>
      return -EBADF;
    8020db20:	555d                	li	a0,-9
    8020db22:	b7d1                	j	8020dae6 <sys_mkdirat+0xc0>
    __debug_warn("[sys_mkdirat] create %s failed\n", path);
    8020db24:	ed840593          	addi	a1,s0,-296
    8020db28:	00006517          	auipc	a0,0x6
    8020db2c:	19050513          	addi	a0,a0,400 # 80213cb8 <UNAME_VERSION+0x120>
    8020db30:	ffffb097          	auipc	ra,0xffffb
    8020db34:	f8c080e7          	jalr	-116(ra) # 80208abc <__debug_warn>
    return -EINVAL;
    8020db38:	5529                	li	a0,-22
    8020db3a:	b775                	j	8020dae6 <sys_mkdirat+0xc0>
    return -ENAMETOOLONG;
    8020db3c:	fdc00513          	li	a0,-36
    8020db40:	b75d                	j	8020dae6 <sys_mkdirat+0xc0>

000000008020db42 <sys_dup>:



uint64
sys_dup()
{
    8020db42:	7179                	addi	sp,sp,-48
    8020db44:	f406                	sd	ra,40(sp)
    8020db46:	f022                	sd	s0,32(sp)
    8020db48:	ec26                	sd	s1,24(sp)
    8020db4a:	1800                	addi	s0,sp,48
  
  struct file *f;
  int fd;
  if(argfd(0, 0, &f) < 0){
    8020db4c:	fd840613          	addi	a2,s0,-40
    8020db50:	4581                	li	a1,0
    8020db52:	4501                	li	a0,0
    8020db54:	fffff097          	auipc	ra,0xfffff
    8020db58:	d1c080e7          	jalr	-740(ra) # 8020c870 <argfd>
    8020db5c:	87aa                	mv	a5,a0
    return -1;
    8020db5e:	557d                	li	a0,-1
  if(argfd(0, 0, &f) < 0){
    8020db60:	0207c363          	bltz	a5,8020db86 <sys_dup+0x44>
  return fdallocfrom(f,0);
    8020db64:	4581                	li	a1,0
    8020db66:	fd843503          	ld	a0,-40(s0)
    8020db6a:	00000097          	auipc	ra,0x0
    8020db6e:	b2a080e7          	jalr	-1238(ra) # 8020d694 <fdallocfrom>
    8020db72:	84aa                	mv	s1,a0
  }
  if((fd=fdalloc(f)) < 0){
    8020db74:	00054963          	bltz	a0,8020db86 <sys_dup+0x44>
    return fd;
  }
  filedup(f);
    8020db78:	fd843503          	ld	a0,-40(s0)
    8020db7c:	ffff7097          	auipc	ra,0xffff7
    8020db80:	6e8080e7          	jalr	1768(ra) # 80205264 <filedup>
  //printf("[dup]ret %d\n",fd);
  return fd;
    8020db84:	8526                	mv	a0,s1
}
    8020db86:	70a2                	ld	ra,40(sp)
    8020db88:	7402                	ld	s0,32(sp)
    8020db8a:	64e2                	ld	s1,24(sp)
    8020db8c:	6145                	addi	sp,sp,48
    8020db8e:	8082                	ret

000000008020db90 <sys_dup3>:


uint64
sys_dup3(void)
{
    8020db90:	7179                	addi	sp,sp,-48
    8020db92:	f406                	sd	ra,40(sp)
    8020db94:	f022                	sd	s0,32(sp)
    8020db96:	ec26                	sd	s1,24(sp)
    8020db98:	1800                	addi	s0,sp,48
  struct file *f;
  int newfd;
  struct proc* p = myproc();
    8020db9a:	ffffe097          	auipc	ra,0xffffe
    8020db9e:	8b2080e7          	jalr	-1870(ra) # 8020b44c <myproc>
    8020dba2:	84aa                	mv	s1,a0
  if(argfd(0, 0, &f) < 0) 
    8020dba4:	fd840613          	addi	a2,s0,-40
    8020dba8:	4581                	li	a1,0
    8020dbaa:	4501                	li	a0,0
    8020dbac:	fffff097          	auipc	ra,0xfffff
    8020dbb0:	cc4080e7          	jalr	-828(ra) # 8020c870 <argfd>
    return -1;
    8020dbb4:	57fd                	li	a5,-1
  if(argfd(0, 0, &f) < 0) 
    8020dbb6:	04054863          	bltz	a0,8020dc06 <sys_dup3+0x76>
  if(argint(1, &newfd) < 0 || newfd < 0)
    8020dbba:	fd440593          	addi	a1,s0,-44
    8020dbbe:	4505                	li	a0,1
    8020dbc0:	fffff097          	auipc	ra,0xfffff
    8020dbc4:	c3c080e7          	jalr	-964(ra) # 8020c7fc <argint>
    8020dbc8:	04054563          	bltz	a0,8020dc12 <sys_dup3+0x82>
    8020dbcc:	fd442703          	lw	a4,-44(s0)
    8020dbd0:	04074363          	bltz	a4,8020dc16 <sys_dup3+0x86>
    return -1;
  if(newfd >= NOFILEMAX(p)){
    8020dbd4:	70f4                	ld	a3,224(s1)
    8020dbd6:	0c800793          	li	a5,200
    8020dbda:	00d7d463          	bge	a5,a3,8020dbe2 <sys_dup3+0x52>
    8020dbde:	0c800693          	li	a3,200
    return -EMFILE;
    8020dbe2:	57a1                	li	a5,-24
  if(newfd >= NOFILEMAX(p)){
    8020dbe4:	02d75163          	bge	a4,a3,8020dc06 <sys_dup3+0x76>
  }
  if(p->ofile[newfd] != f) 
    8020dbe8:	070e                	slli	a4,a4,0x3
    8020dbea:	74e4                	ld	s1,232(s1)
    8020dbec:	94ba                	add	s1,s1,a4
    8020dbee:	fd843503          	ld	a0,-40(s0)
    8020dbf2:	609c                	ld	a5,0(s1)
    8020dbf4:	00a78763          	beq	a5,a0,8020dc02 <sys_dup3+0x72>
  {
    p->ofile[newfd] = filedup(f);
    8020dbf8:	ffff7097          	auipc	ra,0xffff7
    8020dbfc:	66c080e7          	jalr	1644(ra) # 80205264 <filedup>
    8020dc00:	e088                	sd	a0,0(s1)
  }
  return newfd;
    8020dc02:	fd442783          	lw	a5,-44(s0)
}
    8020dc06:	853e                	mv	a0,a5
    8020dc08:	70a2                	ld	ra,40(sp)
    8020dc0a:	7402                	ld	s0,32(sp)
    8020dc0c:	64e2                	ld	s1,24(sp)
    8020dc0e:	6145                	addi	sp,sp,48
    8020dc10:	8082                	ret
    return -1;
    8020dc12:	57fd                	li	a5,-1
    8020dc14:	bfcd                	j	8020dc06 <sys_dup3+0x76>
    8020dc16:	57fd                	li	a5,-1
    8020dc18:	b7fd                	j	8020dc06 <sys_dup3+0x76>

000000008020dc1a <sys_read>:

uint64
sys_read(void)
{
    8020dc1a:	7179                	addi	sp,sp,-48
    8020dc1c:	f406                	sd	ra,40(sp)
    8020dc1e:	f022                	sd	s0,32(sp)
    8020dc20:	1800                	addi	s0,sp,48
  struct file *f;
  int n,fd;
  uint64 p;
  if(argfd(0, &fd, &f) < 0 || argint(2, &n) < 0 || argaddr(1, &p) < 0)
    8020dc22:	fe840613          	addi	a2,s0,-24
    8020dc26:	fe040593          	addi	a1,s0,-32
    8020dc2a:	4501                	li	a0,0
    8020dc2c:	fffff097          	auipc	ra,0xfffff
    8020dc30:	c44080e7          	jalr	-956(ra) # 8020c870 <argfd>
    return -1;
    8020dc34:	57fd                	li	a5,-1
  if(argfd(0, &fd, &f) < 0 || argint(2, &n) < 0 || argaddr(1, &p) < 0)
    8020dc36:	04054163          	bltz	a0,8020dc78 <sys_read+0x5e>
    8020dc3a:	fe440593          	addi	a1,s0,-28
    8020dc3e:	4509                	li	a0,2
    8020dc40:	fffff097          	auipc	ra,0xfffff
    8020dc44:	bbc080e7          	jalr	-1092(ra) # 8020c7fc <argint>
    return -1;
    8020dc48:	57fd                	li	a5,-1
  if(argfd(0, &fd, &f) < 0 || argint(2, &n) < 0 || argaddr(1, &p) < 0)
    8020dc4a:	02054763          	bltz	a0,8020dc78 <sys_read+0x5e>
    8020dc4e:	fd840593          	addi	a1,s0,-40
    8020dc52:	4505                	li	a0,1
    8020dc54:	fffff097          	auipc	ra,0xfffff
    8020dc58:	bca080e7          	jalr	-1078(ra) # 8020c81e <argaddr>
    return -1;
    8020dc5c:	57fd                	li	a5,-1
  if(argfd(0, &fd, &f) < 0 || argint(2, &n) < 0 || argaddr(1, &p) < 0)
    8020dc5e:	00054d63          	bltz	a0,8020dc78 <sys_read+0x5e>
  
  //printf("[sys read]fd:%d n:%d addr:%p\n",fd,n,p);
  
  return fileread(f, p, n);
    8020dc62:	fe442603          	lw	a2,-28(s0)
    8020dc66:	fd843583          	ld	a1,-40(s0)
    8020dc6a:	fe843503          	ld	a0,-24(s0)
    8020dc6e:	ffff8097          	auipc	ra,0xffff8
    8020dc72:	b34080e7          	jalr	-1228(ra) # 802057a2 <fileread>
    8020dc76:	87aa                	mv	a5,a0
}
    8020dc78:	853e                	mv	a0,a5
    8020dc7a:	70a2                	ld	ra,40(sp)
    8020dc7c:	7402                	ld	s0,32(sp)
    8020dc7e:	6145                	addi	sp,sp,48
    8020dc80:	8082                	ret

000000008020dc82 <sys_write>:



uint64
sys_write(void)
{
    8020dc82:	7179                	addi	sp,sp,-48
    8020dc84:	f406                	sd	ra,40(sp)
    8020dc86:	f022                	sd	s0,32(sp)
    8020dc88:	1800                	addi	s0,sp,48
  int fd;
  struct file *f;
  int n;
  uint64 p;
  if(argfd(0, &fd, &f) < 0 || argint(2, &n) < 0 || argaddr(1, &p) < 0){
    8020dc8a:	fe040613          	addi	a2,s0,-32
    8020dc8e:	fec40593          	addi	a1,s0,-20
    8020dc92:	4501                	li	a0,0
    8020dc94:	fffff097          	auipc	ra,0xfffff
    8020dc98:	bdc080e7          	jalr	-1060(ra) # 8020c870 <argfd>
    return -1;
    8020dc9c:	57fd                	li	a5,-1
  if(argfd(0, &fd, &f) < 0 || argint(2, &n) < 0 || argaddr(1, &p) < 0){
    8020dc9e:	04054163          	bltz	a0,8020dce0 <sys_write+0x5e>
    8020dca2:	fdc40593          	addi	a1,s0,-36
    8020dca6:	4509                	li	a0,2
    8020dca8:	fffff097          	auipc	ra,0xfffff
    8020dcac:	b54080e7          	jalr	-1196(ra) # 8020c7fc <argint>
    return -1;
    8020dcb0:	57fd                	li	a5,-1
  if(argfd(0, &fd, &f) < 0 || argint(2, &n) < 0 || argaddr(1, &p) < 0){
    8020dcb2:	02054763          	bltz	a0,8020dce0 <sys_write+0x5e>
    8020dcb6:	fd040593          	addi	a1,s0,-48
    8020dcba:	4505                	li	a0,1
    8020dcbc:	fffff097          	auipc	ra,0xfffff
    8020dcc0:	b62080e7          	jalr	-1182(ra) # 8020c81e <argaddr>
    return -1;
    8020dcc4:	57fd                	li	a5,-1
  if(argfd(0, &fd, &f) < 0 || argint(2, &n) < 0 || argaddr(1, &p) < 0){
    8020dcc6:	00054d63          	bltz	a0,8020dce0 <sys_write+0x5e>
  }

  //__debug_info("[sys_write] fd=%d, n=%p, p=%p\n", fd, n, p);
  return filewrite(f, p, n);
    8020dcca:	fdc42603          	lw	a2,-36(s0)
    8020dcce:	fd043583          	ld	a1,-48(s0)
    8020dcd2:	fe043503          	ld	a0,-32(s0)
    8020dcd6:	ffff8097          	auipc	ra,0xffff8
    8020dcda:	be2080e7          	jalr	-1054(ra) # 802058b8 <filewrite>
    8020dcde:	87aa                	mv	a5,a0
}
    8020dce0:	853e                	mv	a0,a5
    8020dce2:	70a2                	ld	ra,40(sp)
    8020dce4:	7402                	ld	s0,32(sp)
    8020dce6:	6145                	addi	sp,sp,48
    8020dce8:	8082                	ret

000000008020dcea <sys_readv>:


uint64 
sys_readv(void){
    8020dcea:	711d                	addi	sp,sp,-96
    8020dcec:	ec86                	sd	ra,88(sp)
    8020dcee:	e8a2                	sd	s0,80(sp)
    8020dcf0:	e4a6                	sd	s1,72(sp)
    8020dcf2:	e0ca                	sd	s2,64(sp)
    8020dcf4:	fc4e                	sd	s3,56(sp)
    8020dcf6:	1080                	addi	s0,sp,96
  int fd;
  struct file* f;
  uint64 iov;
  int iovcnt;
  int totlen = 0;
  if(argfd(0, &fd, &f) < 0)
    8020dcf8:	fc040613          	addi	a2,s0,-64
    8020dcfc:	fcc40593          	addi	a1,s0,-52
    8020dd00:	4501                	li	a0,0
    8020dd02:	fffff097          	auipc	ra,0xfffff
    8020dd06:	b6e080e7          	jalr	-1170(ra) # 8020c870 <argfd>
  {
    return -1;
    8020dd0a:	597d                	li	s2,-1
  if(argfd(0, &fd, &f) < 0)
    8020dd0c:	08054463          	bltz	a0,8020dd94 <sys_readv+0xaa>
  }
  if(argaddr(1, &iov) < 0)
    8020dd10:	fb840593          	addi	a1,s0,-72
    8020dd14:	4505                	li	a0,1
    8020dd16:	fffff097          	auipc	ra,0xfffff
    8020dd1a:	b08080e7          	jalr	-1272(ra) # 8020c81e <argaddr>
    8020dd1e:	06054b63          	bltz	a0,8020dd94 <sys_readv+0xaa>
  {
    return -1;
  }
  if(argint(2, &iovcnt) < 0)
    8020dd22:	fb440593          	addi	a1,s0,-76
    8020dd26:	4509                	li	a0,2
    8020dd28:	fffff097          	auipc	ra,0xfffff
    8020dd2c:	ad4080e7          	jalr	-1324(ra) # 8020c7fc <argint>
    8020dd30:	06054263          	bltz	a0,8020dd94 <sys_readv+0xaa>
  {
    return -1;
  }
  struct proc* p = myproc();
    8020dd34:	ffffd097          	auipc	ra,0xffffd
    8020dd38:	718080e7          	jalr	1816(ra) # 8020b44c <myproc>
    8020dd3c:	89aa                	mv	s3,a0
  struct iovec v;
  //printf("[readv]fd:%d iov:%p iovcnt:%d\n",fd,iov,iovcnt);
  for(int i = 0;i<iovcnt;i++){
    8020dd3e:	fb442783          	lw	a5,-76(s0)
    8020dd42:	04f05863          	blez	a5,8020dd92 <sys_readv+0xa8>
    8020dd46:	4481                	li	s1,0
  int totlen = 0;
    8020dd48:	4901                	li	s2,0
    8020dd4a:	a801                	j	8020dd5a <sys_readv+0x70>
  for(int i = 0;i<iovcnt;i++){
    8020dd4c:	0485                	addi	s1,s1,1
    8020dd4e:	fb442703          	lw	a4,-76(s0)
    8020dd52:	0004879b          	sext.w	a5,s1
    8020dd56:	02e7df63          	bge	a5,a4,8020dd94 <sys_readv+0xaa>
    uint64 vec = iov+i*sizeof(v);
    8020dd5a:	00449613          	slli	a2,s1,0x4
    copyin(p->pagetable,(char*)&v,vec,sizeof(v));
    8020dd5e:	46c1                	li	a3,16
    8020dd60:	fb843783          	ld	a5,-72(s0)
    8020dd64:	963e                	add	a2,a2,a5
    8020dd66:	fa040593          	addi	a1,s0,-96
    8020dd6a:	0609b503          	ld	a0,96(s3)
    8020dd6e:	ffffd097          	auipc	ra,0xffffd
    8020dd72:	e5c080e7          	jalr	-420(ra) # 8020abca <copyin>
    //printf("%d iov base:%p len:%p\n",i,v.iov_base,v.iov_len);
    if(!v.iov_len)continue;
    8020dd76:	fa842603          	lw	a2,-88(s0)
    8020dd7a:	da69                	beqz	a2,8020dd4c <sys_readv+0x62>
    totlen += fileread(f,(uint64)v.iov_base,v.iov_len);
    8020dd7c:	fa043583          	ld	a1,-96(s0)
    8020dd80:	fc043503          	ld	a0,-64(s0)
    8020dd84:	ffff8097          	auipc	ra,0xffff8
    8020dd88:	a1e080e7          	jalr	-1506(ra) # 802057a2 <fileread>
    8020dd8c:	0125093b          	addw	s2,a0,s2
    8020dd90:	bf75                	j	8020dd4c <sys_readv+0x62>
  int totlen = 0;
    8020dd92:	4901                	li	s2,0
  }
  return totlen;
}
    8020dd94:	854a                	mv	a0,s2
    8020dd96:	60e6                	ld	ra,88(sp)
    8020dd98:	6446                	ld	s0,80(sp)
    8020dd9a:	64a6                	ld	s1,72(sp)
    8020dd9c:	6906                	ld	s2,64(sp)
    8020dd9e:	79e2                	ld	s3,56(sp)
    8020dda0:	6125                	addi	sp,sp,96
    8020dda2:	8082                	ret

000000008020dda4 <sys_writev>:

uint64 
sys_writev(void){
    8020dda4:	711d                	addi	sp,sp,-96
    8020dda6:	ec86                	sd	ra,88(sp)
    8020dda8:	e8a2                	sd	s0,80(sp)
    8020ddaa:	e4a6                	sd	s1,72(sp)
    8020ddac:	e0ca                	sd	s2,64(sp)
    8020ddae:	fc4e                	sd	s3,56(sp)
    8020ddb0:	1080                	addi	s0,sp,96
  int fd;
  struct file* f;
  uint64 iov;
  int iovcnt;
  int totlen = 0;
  if(argfd(0, &fd, &f) < 0)
    8020ddb2:	fc040613          	addi	a2,s0,-64
    8020ddb6:	fcc40593          	addi	a1,s0,-52
    8020ddba:	4501                	li	a0,0
    8020ddbc:	fffff097          	auipc	ra,0xfffff
    8020ddc0:	ab4080e7          	jalr	-1356(ra) # 8020c870 <argfd>
  {
    return -1;
    8020ddc4:	597d                	li	s2,-1
  if(argfd(0, &fd, &f) < 0)
    8020ddc6:	08054463          	bltz	a0,8020de4e <sys_writev+0xaa>
  }
  if(argaddr(1, &iov) < 0)
    8020ddca:	fb840593          	addi	a1,s0,-72
    8020ddce:	4505                	li	a0,1
    8020ddd0:	fffff097          	auipc	ra,0xfffff
    8020ddd4:	a4e080e7          	jalr	-1458(ra) # 8020c81e <argaddr>
    8020ddd8:	06054b63          	bltz	a0,8020de4e <sys_writev+0xaa>
  {
    return -1;
  }
  if(argint(2, &iovcnt) < 0)
    8020dddc:	fb440593          	addi	a1,s0,-76
    8020dde0:	4509                	li	a0,2
    8020dde2:	fffff097          	auipc	ra,0xfffff
    8020dde6:	a1a080e7          	jalr	-1510(ra) # 8020c7fc <argint>
    8020ddea:	06054263          	bltz	a0,8020de4e <sys_writev+0xaa>
  {
    return -1;
  }
  struct proc* p = myproc();
    8020ddee:	ffffd097          	auipc	ra,0xffffd
    8020ddf2:	65e080e7          	jalr	1630(ra) # 8020b44c <myproc>
    8020ddf6:	89aa                	mv	s3,a0
  struct iovec v;
  //printf("[writev]fd:%d name:%s iov:%p iovcnt:%d\n",fd,f->ep->filename,iov,iovcnt);
  for(int i = 0;i<iovcnt;i++){
    8020ddf8:	fb442783          	lw	a5,-76(s0)
    8020ddfc:	04f05863          	blez	a5,8020de4c <sys_writev+0xa8>
    8020de00:	4481                	li	s1,0
  int totlen = 0;
    8020de02:	4901                	li	s2,0
    8020de04:	a801                	j	8020de14 <sys_writev+0x70>
  for(int i = 0;i<iovcnt;i++){
    8020de06:	0485                	addi	s1,s1,1
    8020de08:	fb442703          	lw	a4,-76(s0)
    8020de0c:	0004879b          	sext.w	a5,s1
    8020de10:	02e7df63          	bge	a5,a4,8020de4e <sys_writev+0xaa>
    uint64 vec = iov+i*sizeof(v);
    8020de14:	00449613          	slli	a2,s1,0x4
    copyin(p->pagetable,(char*)&v,vec,sizeof(v));
    8020de18:	46c1                	li	a3,16
    8020de1a:	fb843783          	ld	a5,-72(s0)
    8020de1e:	963e                	add	a2,a2,a5
    8020de20:	fa040593          	addi	a1,s0,-96
    8020de24:	0609b503          	ld	a0,96(s3)
    8020de28:	ffffd097          	auipc	ra,0xffffd
    8020de2c:	da2080e7          	jalr	-606(ra) # 8020abca <copyin>
    //printf("%d iov base:%p len:%p\n",i,v.iov_base,v.iov_len);
    if(!v.iov_len)continue;
    8020de30:	fa842603          	lw	a2,-88(s0)
    8020de34:	da69                	beqz	a2,8020de06 <sys_writev+0x62>
    totlen += filewrite(f,(uint64)v.iov_base,v.iov_len);
    8020de36:	fa043583          	ld	a1,-96(s0)
    8020de3a:	fc043503          	ld	a0,-64(s0)
    8020de3e:	ffff8097          	auipc	ra,0xffff8
    8020de42:	a7a080e7          	jalr	-1414(ra) # 802058b8 <filewrite>
    8020de46:	0125093b          	addw	s2,a0,s2
    8020de4a:	bf75                	j	8020de06 <sys_writev+0x62>
  int totlen = 0;
    8020de4c:	4901                	li	s2,0
    //printf("[writev]next\n");
  }
  return totlen;
}
    8020de4e:	854a                	mv	a0,s2
    8020de50:	60e6                	ld	ra,88(sp)
    8020de52:	6446                	ld	s0,80(sp)
    8020de54:	64a6                	ld	s1,72(sp)
    8020de56:	6906                	ld	s2,64(sp)
    8020de58:	79e2                	ld	s3,56(sp)
    8020de5a:	6125                	addi	sp,sp,96
    8020de5c:	8082                	ret

000000008020de5e <sys_close>:

uint64
sys_close(void)
{
    8020de5e:	1101                	addi	sp,sp,-32
    8020de60:	ec06                	sd	ra,24(sp)
    8020de62:	e822                	sd	s0,16(sp)
    8020de64:	1000                	addi	s0,sp,32
  int fd;
  struct file *f;

  if(argfd(0, &fd, &f) < 0)
    8020de66:	fe040613          	addi	a2,s0,-32
    8020de6a:	fec40593          	addi	a1,s0,-20
    8020de6e:	4501                	li	a0,0
    8020de70:	fffff097          	auipc	ra,0xfffff
    8020de74:	a00080e7          	jalr	-1536(ra) # 8020c870 <argfd>
    return -1;
    8020de78:	57fd                	li	a5,-1
  if(argfd(0, &fd, &f) < 0)
    8020de7a:	02054463          	bltz	a0,8020dea2 <sys_close+0x44>
  myproc()->ofile[fd] = 0;
    8020de7e:	ffffd097          	auipc	ra,0xffffd
    8020de82:	5ce080e7          	jalr	1486(ra) # 8020b44c <myproc>
    8020de86:	fec42703          	lw	a4,-20(s0)
    8020de8a:	757c                	ld	a5,232(a0)
    8020de8c:	070e                	slli	a4,a4,0x3
    8020de8e:	97ba                	add	a5,a5,a4
    8020de90:	0007b023          	sd	zero,0(a5) # 4000 <_entry-0x801fc000>
  fileclose(f);
    8020de94:	fe043503          	ld	a0,-32(s0)
    8020de98:	ffff7097          	auipc	ra,0xffff7
    8020de9c:	41a080e7          	jalr	1050(ra) # 802052b2 <fileclose>
  return 0;
    8020dea0:	4781                	li	a5,0
}
    8020dea2:	853e                	mv	a0,a5
    8020dea4:	60e2                	ld	ra,24(sp)
    8020dea6:	6442                	ld	s0,16(sp)
    8020dea8:	6105                	addi	sp,sp,32
    8020deaa:	8082                	ret

000000008020deac <sys_unlinkat>:

uint64
sys_unlinkat(void)
{
    8020deac:	7129                	addi	sp,sp,-320
    8020deae:	fe06                	sd	ra,312(sp)
    8020deb0:	fa22                	sd	s0,304(sp)
    8020deb2:	f626                	sd	s1,296(sp)
    8020deb4:	0280                	addi	s0,sp,320
  int dirfd,flags,len;
  struct dirent *dp;
  struct dirent* ep;
  char path[FAT32_MAX_PATH];
  
  if(argfd(0,&dirfd,&fp)<0){
    8020deb6:	fd840613          	addi	a2,s0,-40
    8020deba:	fd440593          	addi	a1,s0,-44
    8020debe:	4501                	li	a0,0
    8020dec0:	fffff097          	auipc	ra,0xfffff
    8020dec4:	9b0080e7          	jalr	-1616(ra) # 8020c870 <argfd>
  
  }
  if((len = argstr(1,path,FAT32_MAX_PATH))<0||
    8020dec8:	10400613          	li	a2,260
    8020decc:	ec840593          	addi	a1,s0,-312
    8020ded0:	4505                	li	a0,1
    8020ded2:	fffff097          	auipc	ra,0xfffff
    8020ded6:	96e080e7          	jalr	-1682(ra) # 8020c840 <argstr>
     argint(2,&flags)<0){
    return -1;   
    8020deda:	57fd                	li	a5,-1
  if((len = argstr(1,path,FAT32_MAX_PATH))<0||
    8020dedc:	08054863          	bltz	a0,8020df6c <sys_unlinkat+0xc0>
     argint(2,&flags)<0){
    8020dee0:	fd040593          	addi	a1,s0,-48
    8020dee4:	4509                	li	a0,2
    8020dee6:	fffff097          	auipc	ra,0xfffff
    8020deea:	916080e7          	jalr	-1770(ra) # 8020c7fc <argint>
  if((len = argstr(1,path,FAT32_MAX_PATH))<0||
    8020deee:	0a054363          	bltz	a0,8020df94 <sys_unlinkat+0xe8>
  }
  
  if(dirfd != AT_FDCWD){
    8020def2:	fd442703          	lw	a4,-44(s0)
    8020def6:	f9c00793          	li	a5,-100
    8020defa:	06f70f63          	beq	a4,a5,8020df78 <sys_unlinkat+0xcc>
    if(fp == NULL)return -1;
    8020defe:	fd843783          	ld	a5,-40(s0)
    8020df02:	cbd9                	beqz	a5,8020df98 <sys_unlinkat+0xec>
    dp = fp->ep;
    8020df04:	6f88                	ld	a0,24(a5)
  }else
    dp = NULL;
 
  if((ep = ename(dp,path,0)) == NULL){
    8020df06:	4601                	li	a2,0
    8020df08:	ec840593          	addi	a1,s0,-312
    8020df0c:	ffff6097          	auipc	ra,0xffff6
    8020df10:	4a8080e7          	jalr	1192(ra) # 802043b4 <ename>
    8020df14:	84aa                	mv	s1,a0
    8020df16:	c159                	beqz	a0,8020df9c <sys_unlinkat+0xf0>
    return -1;
  }
  elock(ep);
    8020df18:	ffff6097          	auipc	ra,0xffff6
    8020df1c:	a5a080e7          	jalr	-1446(ra) # 80203972 <elock>
  if((ep->attribute & ATTR_DIRECTORY) && !isdirempty(ep)){
    8020df20:	1004c783          	lbu	a5,256(s1)
    8020df24:	8bc1                	andi	a5,a5,16
    8020df26:	c799                	beqz	a5,8020df34 <sys_unlinkat+0x88>
    8020df28:	8526                	mv	a0,s1
    8020df2a:	ffff6097          	auipc	ra,0xffff6
    8020df2e:	31e080e7          	jalr	798(ra) # 80204248 <isdirempty>
    8020df32:	c529                	beqz	a0,8020df7c <sys_unlinkat+0xd0>
      eunlock(ep);
      eput(ep);
      return -1;
  }
  elock(ep->parent);      // Will this lead to deadlock?
    8020df34:	1284b503          	ld	a0,296(s1)
    8020df38:	ffff6097          	auipc	ra,0xffff6
    8020df3c:	a3a080e7          	jalr	-1478(ra) # 80203972 <elock>
  eremove(ep);
    8020df40:	8526                	mv	a0,s1
    8020df42:	ffff6097          	auipc	ra,0xffff6
    8020df46:	8be080e7          	jalr	-1858(ra) # 80203800 <eremove>
  eunlock(ep->parent);
    8020df4a:	1284b503          	ld	a0,296(s1)
    8020df4e:	ffff6097          	auipc	ra,0xffff6
    8020df52:	a5a080e7          	jalr	-1446(ra) # 802039a8 <eunlock>
  eunlock(ep);
    8020df56:	8526                	mv	a0,s1
    8020df58:	ffff6097          	auipc	ra,0xffff6
    8020df5c:	a50080e7          	jalr	-1456(ra) # 802039a8 <eunlock>
  eput(ep);
    8020df60:	8526                	mv	a0,s1
    8020df62:	ffff6097          	auipc	ra,0xffff6
    8020df66:	a94080e7          	jalr	-1388(ra) # 802039f6 <eput>
  return 0;
    8020df6a:	4781                	li	a5,0

}
    8020df6c:	853e                	mv	a0,a5
    8020df6e:	70f2                	ld	ra,312(sp)
    8020df70:	7452                	ld	s0,304(sp)
    8020df72:	74b2                	ld	s1,296(sp)
    8020df74:	6131                	addi	sp,sp,320
    8020df76:	8082                	ret
    dp = NULL;
    8020df78:	4501                	li	a0,0
    8020df7a:	b771                	j	8020df06 <sys_unlinkat+0x5a>
      eunlock(ep);
    8020df7c:	8526                	mv	a0,s1
    8020df7e:	ffff6097          	auipc	ra,0xffff6
    8020df82:	a2a080e7          	jalr	-1494(ra) # 802039a8 <eunlock>
      eput(ep);
    8020df86:	8526                	mv	a0,s1
    8020df88:	ffff6097          	auipc	ra,0xffff6
    8020df8c:	a6e080e7          	jalr	-1426(ra) # 802039f6 <eput>
      return -1;
    8020df90:	57fd                	li	a5,-1
    8020df92:	bfe9                	j	8020df6c <sys_unlinkat+0xc0>
    return -1;   
    8020df94:	57fd                	li	a5,-1
    8020df96:	bfd9                	j	8020df6c <sys_unlinkat+0xc0>
    if(fp == NULL)return -1;
    8020df98:	57fd                	li	a5,-1
    8020df9a:	bfc9                	j	8020df6c <sys_unlinkat+0xc0>
    return -1;
    8020df9c:	57fd                	li	a5,-1
    8020df9e:	b7f9                	j	8020df6c <sys_unlinkat+0xc0>

000000008020dfa0 <sys_getcwd>:

// get absolute cwd string
uint64
sys_getcwd(void)
{
    8020dfa0:	714d                	addi	sp,sp,-336
    8020dfa2:	e686                	sd	ra,328(sp)
    8020dfa4:	e2a2                	sd	s0,320(sp)
    8020dfa6:	fe26                	sd	s1,312(sp)
    8020dfa8:	fa4a                	sd	s2,304(sp)
    8020dfaa:	f64e                	sd	s3,296(sp)
    8020dfac:	f252                	sd	s4,288(sp)
    8020dfae:	ee56                	sd	s5,280(sp)
    8020dfb0:	0a80                	addi	s0,sp,336
  uint64 addr;
  if (argaddr(0, &addr) < 0)
    8020dfb2:	fb840593          	addi	a1,s0,-72
    8020dfb6:	4501                	li	a0,0
    8020dfb8:	fffff097          	auipc	ra,0xfffff
    8020dfbc:	866080e7          	jalr	-1946(ra) # 8020c81e <argaddr>
    return -1;
    8020dfc0:	57fd                	li	a5,-1
  if (argaddr(0, &addr) < 0)
    8020dfc2:	08054b63          	bltz	a0,8020e058 <sys_getcwd+0xb8>

  struct dirent *de = myproc()->cwd;
    8020dfc6:	ffffd097          	auipc	ra,0xffffd
    8020dfca:	486080e7          	jalr	1158(ra) # 8020b44c <myproc>
    8020dfce:	7d64                	ld	s1,248(a0)
  char path[FAT32_MAX_PATH];
  char *s;
  int len;

  if (de->parent == NULL) {
    8020dfd0:	1284b783          	ld	a5,296(s1)
    8020dfd4:	cfc1                	beqz	a5,8020e06c <sys_getcwd+0xcc>
    s = "/";
  } else {
    s = path + FAT32_MAX_PATH - 1;
    *s = '\0';
    8020dfd6:	fa0409a3          	sb	zero,-77(s0)
    s = path + FAT32_MAX_PATH - 1;
    8020dfda:	fb340993          	addi	s3,s0,-77
    while (de->parent) {
      len = strlen(de->filename);
      s -= len;
      if (s <= path)          // can't reach root "/"
    8020dfde:	eb040a13          	addi	s4,s0,-336
        return -1;
      strncpy(s, de->filename, len);
      *--s = '/';
    8020dfe2:	02f00a93          	li	s5,47
      len = strlen(de->filename);
    8020dfe6:	8526                	mv	a0,s1
    8020dfe8:	ffff3097          	auipc	ra,0xffff3
    8020dfec:	f14080e7          	jalr	-236(ra) # 80200efc <strlen>
    8020dff0:	862a                	mv	a2,a0
      s -= len;
    8020dff2:	40a98933          	sub	s2,s3,a0
      if (s <= path)          // can't reach root "/"
    8020dff6:	092a7a63          	bgeu	s4,s2,8020e08a <sys_getcwd+0xea>
      strncpy(s, de->filename, len);
    8020dffa:	85a6                	mv	a1,s1
    8020dffc:	854a                	mv	a0,s2
    8020dffe:	ffff3097          	auipc	ra,0xffff3
    8020e002:	e8e080e7          	jalr	-370(ra) # 80200e8c <strncpy>
      *--s = '/';
    8020e006:	fff90993          	addi	s3,s2,-1
    8020e00a:	ff590fa3          	sb	s5,-1(s2)
      de = de->parent;
    8020e00e:	1284b483          	ld	s1,296(s1)
    while (de->parent) {
    8020e012:	1284b783          	ld	a5,296(s1)
    8020e016:	fbe1                	bnez	a5,8020dfe6 <sys_getcwd+0x46>
    }
  }
  if(addr == 0){
    8020e018:	fb843783          	ld	a5,-72(s0)
    8020e01c:	eb91                	bnez	a5,8020e030 <sys_getcwd+0x90>
    addr = growprocsize(FAT32_MAX_PATH);
    8020e01e:	10400513          	li	a0,260
    8020e022:	ffffe097          	auipc	ra,0xffffe
    8020e026:	f8c080e7          	jalr	-116(ra) # 8020bfae <growprocsize>
    8020e02a:	faa43c23          	sd	a0,-72(s0)
    if(addr == 0)
    8020e02e:	c521                	beqz	a0,8020e076 <sys_getcwd+0xd6>
      __debug_warn("[sys_getcwd] alloc address failed\n");
      return -1;
    }
  }

  if (either_copyout(1, addr, s, strlen(s) + 1) < 0)
    8020e030:	fb843483          	ld	s1,-72(s0)
    8020e034:	854e                	mv	a0,s3
    8020e036:	ffff3097          	auipc	ra,0xffff3
    8020e03a:	ec6080e7          	jalr	-314(ra) # 80200efc <strlen>
    8020e03e:	0015069b          	addiw	a3,a0,1
    8020e042:	864e                	mv	a2,s3
    8020e044:	85a6                	mv	a1,s1
    8020e046:	4505                	li	a0,1
    8020e048:	ffffd097          	auipc	ra,0xffffd
    8020e04c:	e1e080e7          	jalr	-482(ra) # 8020ae66 <either_copyout>
    8020e050:	02054f63          	bltz	a0,8020e08e <sys_getcwd+0xee>
    return -1;
  return addr;
    8020e054:	fb843783          	ld	a5,-72(s0)
}
    8020e058:	853e                	mv	a0,a5
    8020e05a:	60b6                	ld	ra,328(sp)
    8020e05c:	6416                	ld	s0,320(sp)
    8020e05e:	74f2                	ld	s1,312(sp)
    8020e060:	7952                	ld	s2,304(sp)
    8020e062:	79b2                	ld	s3,296(sp)
    8020e064:	7a12                	ld	s4,288(sp)
    8020e066:	6af2                	ld	s5,280(sp)
    8020e068:	6171                	addi	sp,sp,336
    8020e06a:	8082                	ret
    s = "/";
    8020e06c:	00006997          	auipc	s3,0x6
    8020e070:	91c98993          	addi	s3,s3,-1764 # 80213988 <vma_type+0x4b0>
    8020e074:	b755                	j	8020e018 <sys_getcwd+0x78>
      __debug_warn("[sys_getcwd] alloc address failed\n");
    8020e076:	00006517          	auipc	a0,0x6
    8020e07a:	c6250513          	addi	a0,a0,-926 # 80213cd8 <UNAME_VERSION+0x140>
    8020e07e:	ffffb097          	auipc	ra,0xffffb
    8020e082:	a3e080e7          	jalr	-1474(ra) # 80208abc <__debug_warn>
      return -1;
    8020e086:	57fd                	li	a5,-1
    8020e088:	bfc1                	j	8020e058 <sys_getcwd+0xb8>
        return -1;
    8020e08a:	57fd                	li	a5,-1
    8020e08c:	b7f1                	j	8020e058 <sys_getcwd+0xb8>
    return -1;
    8020e08e:	57fd                	li	a5,-1
    8020e090:	b7e1                	j	8020e058 <sys_getcwd+0xb8>

000000008020e092 <sys_fstat>:


uint64
sys_fstat(void)
{
    8020e092:	7179                	addi	sp,sp,-48
    8020e094:	f406                	sd	ra,40(sp)
    8020e096:	f022                	sd	s0,32(sp)
    8020e098:	1800                	addi	s0,sp,48
  struct file *f;
  int fd;
  uint64 st; // user pointer to struct stat

  if(argfd(0, &fd, &f) < 0 || argaddr(1, &st) < 0)
    8020e09a:	fe840613          	addi	a2,s0,-24
    8020e09e:	fe440593          	addi	a1,s0,-28
    8020e0a2:	4501                	li	a0,0
    8020e0a4:	ffffe097          	auipc	ra,0xffffe
    8020e0a8:	7cc080e7          	jalr	1996(ra) # 8020c870 <argfd>
    return -1;
    8020e0ac:	57fd                	li	a5,-1
  if(argfd(0, &fd, &f) < 0 || argaddr(1, &st) < 0)
    8020e0ae:	02054563          	bltz	a0,8020e0d8 <sys_fstat+0x46>
    8020e0b2:	fd840593          	addi	a1,s0,-40
    8020e0b6:	4505                	li	a0,1
    8020e0b8:	ffffe097          	auipc	ra,0xffffe
    8020e0bc:	766080e7          	jalr	1894(ra) # 8020c81e <argaddr>
    return -1;
    8020e0c0:	57fd                	li	a5,-1
  if(argfd(0, &fd, &f) < 0 || argaddr(1, &st) < 0)
    8020e0c2:	00054b63          	bltz	a0,8020e0d8 <sys_fstat+0x46>
  //return filestat(f, st);
  //print_f_info(f);
  return filekstat(f, st);
    8020e0c6:	fd843583          	ld	a1,-40(s0)
    8020e0ca:	fe843503          	ld	a0,-24(s0)
    8020e0ce:	ffff7097          	auipc	ra,0xffff7
    8020e0d2:	5a0080e7          	jalr	1440(ra) # 8020566e <filekstat>
    8020e0d6:	87aa                	mv	a5,a0
}
    8020e0d8:	853e                	mv	a0,a5
    8020e0da:	70a2                	ld	ra,40(sp)
    8020e0dc:	7402                	ld	s0,32(sp)
    8020e0de:	6145                	addi	sp,sp,48
    8020e0e0:	8082                	ret

000000008020e0e2 <sys_fstatat>:

uint64
sys_fstatat(void)
{
    8020e0e2:	7105                	addi	sp,sp,-480
    8020e0e4:	ef86                	sd	ra,472(sp)
    8020e0e6:	eba2                	sd	s0,464(sp)
    8020e0e8:	e7a6                	sd	s1,456(sp)
    8020e0ea:	e3ca                	sd	s2,448(sp)
    8020e0ec:	ff4e                	sd	s3,440(sp)
    8020e0ee:	fb52                	sd	s4,432(sp)
    8020e0f0:	1380                	addi	s0,sp,480
  uint64 st; // user pointer to struct stat
  int flags;
  char pathname[FAT32_MAX_FILENAME];
  struct file* fp;

  if(argfd(0, &fd, &fp) < 0&&fd!=AT_FDCWD)
    8020e0f2:	eb040613          	addi	a2,s0,-336
    8020e0f6:	fcc40593          	addi	a1,s0,-52
    8020e0fa:	4501                	li	a0,0
    8020e0fc:	ffffe097          	auipc	ra,0xffffe
    8020e100:	774080e7          	jalr	1908(ra) # 8020c870 <argfd>
    8020e104:	00055963          	bgez	a0,8020e116 <sys_fstatat+0x34>
    8020e108:	fcc42683          	lw	a3,-52(s0)
    8020e10c:	f9c00713          	li	a4,-100
    return -EMFILE;  
    8020e110:	57a1                	li	a5,-24
  if(argfd(0, &fd, &fp) < 0&&fd!=AT_FDCWD)
    8020e112:	10e69663          	bne	a3,a4,8020e21e <sys_fstatat+0x13c>
  if(argstr(1, pathname, FAT32_MAX_FILENAME + 1) < 0)
    8020e116:	10000613          	li	a2,256
    8020e11a:	eb840593          	addi	a1,s0,-328
    8020e11e:	4505                	li	a0,1
    8020e120:	ffffe097          	auipc	ra,0xffffe
    8020e124:	720080e7          	jalr	1824(ra) # 8020c840 <argstr>
    return -ENAMETOOLONG;
    8020e128:	fdc00793          	li	a5,-36
  if(argstr(1, pathname, FAT32_MAX_FILENAME + 1) < 0)
    8020e12c:	0e054963          	bltz	a0,8020e21e <sys_fstatat+0x13c>
  if(argaddr(2, &st) < 0)
    8020e130:	fc040593          	addi	a1,s0,-64
    8020e134:	4509                	li	a0,2
    8020e136:	ffffe097          	auipc	ra,0xffffe
    8020e13a:	6e8080e7          	jalr	1768(ra) # 8020c81e <argaddr>
    return -1;  
    8020e13e:	57fd                	li	a5,-1
  if(argaddr(2, &st) < 0)
    8020e140:	0c054f63          	bltz	a0,8020e21e <sys_fstatat+0x13c>
  if(argint(3, &flags) < 0)
    8020e144:	fbc40593          	addi	a1,s0,-68
    8020e148:	450d                	li	a0,3
    8020e14a:	ffffe097          	auipc	ra,0xffffe
    8020e14e:	6b2080e7          	jalr	1714(ra) # 8020c7fc <argint>
    return -1;
    8020e152:	57fd                	li	a5,-1
  if(argint(3, &flags) < 0)
    8020e154:	0c054563          	bltz	a0,8020e21e <sys_fstatat+0x13c>
  //return filestat(f, st);
  //printf("[sys fstatat]fd:%d pathname:%s flags:%p\n",fd,pathname,flags);
  struct dirent* ep;
  struct dirent* dp;
  struct proc* p = myproc();
    8020e158:	ffffd097          	auipc	ra,0xffffd
    8020e15c:	2f4080e7          	jalr	756(ra) # 8020b44c <myproc>
    8020e160:	892a                	mv	s2,a0
  int devno = -1;
    8020e162:	57fd                	li	a5,-1
    8020e164:	eaf42623          	sw	a5,-340(s0)
  if(fd==AT_FDCWD){
    8020e168:	fcc42703          	lw	a4,-52(s0)
    8020e16c:	f9c00793          	li	a5,-100
    8020e170:	0cf70e63          	beq	a4,a5,8020e24c <sys_fstatat+0x16a>
    dp = NULL;
  } else { 
    if(pathname[0] != '/' && fp == NULL)
    8020e174:	eb844703          	lbu	a4,-328(s0)
    8020e178:	02f00793          	li	a5,47
    8020e17c:	0af70a63          	beq	a4,a5,8020e230 <sys_fstatat+0x14e>
    8020e180:	eb043503          	ld	a0,-336(s0)
    8020e184:	cd65                	beqz	a0,8020e27c <sys_fstatat+0x19a>
    {
      return -EMFILE;
    }
    dp = fp ? fp->ep : NULL;
    8020e186:	6d08                	ld	a0,24(a0)
    
    if(dp && !(dp->attribute & ATTR_DIRECTORY)){
    8020e188:	c509                	beqz	a0,8020e192 <sys_fstatat+0xb0>
    8020e18a:	10054783          	lbu	a5,256(a0)
    8020e18e:	8bc1                	andi	a5,a5,16
    8020e190:	c7c5                	beqz	a5,8020e238 <sys_fstatat+0x156>
        return -1;
    }
  }

  // elock dp may cause deadlock
  ep = ename(dp, pathname, &devno);
    8020e192:	eac40613          	addi	a2,s0,-340
    8020e196:	eb840593          	addi	a1,s0,-328
    8020e19a:	ffff6097          	auipc	ra,0xffff6
    8020e19e:	21a080e7          	jalr	538(ra) # 802043b4 <ename>
    8020e1a2:	84aa                	mv	s1,a0
  if(ep == NULL){
    8020e1a4:	cd71                	beqz	a0,8020e280 <sys_fstatat+0x19e>
    //printf("[fstatat]path %s not found\n",pathname);
    return -ENOENT;  
  }

  struct kstat kst;
  if(devno == -1)
    8020e1a6:	eac42703          	lw	a4,-340(s0)
    8020e1aa:	57fd                	li	a5,-1
    8020e1ac:	0af70263          	beq	a4,a5,8020e250 <sys_fstatat+0x16e>
  }
  else
  {
    if(devno < 0 || devno >= getdevnum())
    {
      return -1;
    8020e1b0:	57fd                	li	a5,-1
    if(devno < 0 || devno >= getdevnum())
    8020e1b2:	06074663          	bltz	a4,8020e21e <sys_fstatat+0x13c>
    8020e1b6:	ffff9097          	auipc	ra,0xffff9
    8020e1ba:	744080e7          	jalr	1860(ra) # 802078fa <getdevnum>
    8020e1be:	eac42703          	lw	a4,-340(s0)
      return -1;
    8020e1c2:	57fd                	li	a5,-1
    if(devno < 0 || devno >= getdevnum())
    8020e1c4:	04a75d63          	bge	a4,a0,8020e21e <sys_fstatat+0x13c>
    }
    struct devsw *mydev = &devsw[devno];
    8020e1c8:	00371493          	slli	s1,a4,0x3
    8020e1cc:	8c99                	sub	s1,s1,a4
    8020e1ce:	048e                	slli	s1,s1,0x3
    acquire(&mydev->lk);
    8020e1d0:	01048993          	addi	s3,s1,16
    8020e1d4:	0085ea17          	auipc	s4,0x85e
    8020e1d8:	a8ca0a13          	addi	s4,s4,-1396 # 80a6bc60 <devsw>
    8020e1dc:	99d2                	add	s3,s3,s4
    8020e1de:	854e                	mv	a0,s3
    8020e1e0:	ffffa097          	auipc	ra,0xffffa
    8020e1e4:	196080e7          	jalr	406(ra) # 80208376 <acquire>
    devkstat(mydev, &kst);
    8020e1e8:	e2840593          	addi	a1,s0,-472
    8020e1ec:	009a0533          	add	a0,s4,s1
    8020e1f0:	ffffa097          	auipc	ra,0xffffa
    8020e1f4:	b24080e7          	jalr	-1244(ra) # 80207d14 <devkstat>
    release(&mydev->lk);
    8020e1f8:	854e                	mv	a0,s3
    8020e1fa:	ffffa097          	auipc	ra,0xffffa
    8020e1fe:	1d0080e7          	jalr	464(ra) # 802083ca <release>
  }
  
  //printf("kst.mode:%p ATTR_DIRECTORY:%p\n",kst.st_mode,ATTR_DIRECTORY);
  if(copyout(p->pagetable, st, (char *)&kst, sizeof(kst)) < 0)
    8020e202:	08000693          	li	a3,128
    8020e206:	e2840613          	addi	a2,s0,-472
    8020e20a:	fc043583          	ld	a1,-64(s0)
    8020e20e:	06093503          	ld	a0,96(s2)
    8020e212:	ffffd097          	auipc	ra,0xffffd
    8020e216:	8da080e7          	jalr	-1830(ra) # 8020aaec <copyout>
    8020e21a:	43f55793          	srai	a5,a0,0x3f
    return -1;
  return 0;
}
    8020e21e:	853e                	mv	a0,a5
    8020e220:	60fe                	ld	ra,472(sp)
    8020e222:	645e                	ld	s0,464(sp)
    8020e224:	64be                	ld	s1,456(sp)
    8020e226:	691e                	ld	s2,448(sp)
    8020e228:	79fa                	ld	s3,440(sp)
    8020e22a:	7a5a                	ld	s4,432(sp)
    8020e22c:	613d                	addi	sp,sp,480
    8020e22e:	8082                	ret
    dp = fp ? fp->ep : NULL;
    8020e230:	eb043503          	ld	a0,-336(s0)
    8020e234:	dd39                	beqz	a0,8020e192 <sys_fstatat+0xb0>
    8020e236:	bf81                	j	8020e186 <sys_fstatat+0xa4>
        printf("fd point to a non directory\n");
    8020e238:	00006517          	auipc	a0,0x6
    8020e23c:	ac850513          	addi	a0,a0,-1336 # 80213d00 <UNAME_VERSION+0x168>
    8020e240:	ffffa097          	auipc	ra,0xffffa
    8020e244:	4f0080e7          	jalr	1264(ra) # 80208730 <printf>
        return -1;
    8020e248:	57fd                	li	a5,-1
    8020e24a:	bfd1                	j	8020e21e <sys_fstatat+0x13c>
    dp = NULL;
    8020e24c:	4501                	li	a0,0
    8020e24e:	b791                	j	8020e192 <sys_fstatat+0xb0>
    elock(ep);
    8020e250:	ffff5097          	auipc	ra,0xffff5
    8020e254:	722080e7          	jalr	1826(ra) # 80203972 <elock>
    ekstat(ep,&kst);
    8020e258:	e2840593          	addi	a1,s0,-472
    8020e25c:	8526                	mv	a0,s1
    8020e25e:	ffff6097          	auipc	ra,0xffff6
    8020e262:	062080e7          	jalr	98(ra) # 802042c0 <ekstat>
    eunlock(ep);
    8020e266:	8526                	mv	a0,s1
    8020e268:	ffff5097          	auipc	ra,0xffff5
    8020e26c:	740080e7          	jalr	1856(ra) # 802039a8 <eunlock>
    eput(ep);
    8020e270:	8526                	mv	a0,s1
    8020e272:	ffff5097          	auipc	ra,0xffff5
    8020e276:	784080e7          	jalr	1924(ra) # 802039f6 <eput>
    8020e27a:	b761                	j	8020e202 <sys_fstatat+0x120>
      return -EMFILE;
    8020e27c:	57a1                	li	a5,-24
    8020e27e:	b745                	j	8020e21e <sys_fstatat+0x13c>
    return -ENOENT;  
    8020e280:	57f9                	li	a5,-2
    8020e282:	bf71                	j	8020e21e <sys_fstatat+0x13c>

000000008020e284 <sys_faccessat>:

uint64
sys_faccessat(void)
{
    8020e284:	7129                	addi	sp,sp,-320
    8020e286:	fe06                	sd	ra,312(sp)
    8020e288:	fa22                	sd	s0,304(sp)
    8020e28a:	f626                	sd	s1,296(sp)
    8020e28c:	0280                	addi	s0,sp,320
  struct file *fp;
  char path[FAT32_MAX_FILENAME];
  int mode;
  int flags;
  struct dirent *dp, *ep;
  struct proc *p = myproc();
    8020e28e:	ffffd097          	auipc	ra,0xffffd
    8020e292:	1be080e7          	jalr	446(ra) # 8020b44c <myproc>
    8020e296:	84aa                	mv	s1,a0
  int devno = -1;
    8020e298:	57fd                	li	a5,-1
    8020e29a:	ecf42223          	sw	a5,-316(s0)
  int emode = R_OK | W_OK | X_OK;

  if(argfd(0, &dirfd, &fp) < 0 && dirfd != AT_FDCWD)
    8020e29e:	fd040613          	addi	a2,s0,-48
    8020e2a2:	fdc40593          	addi	a1,s0,-36
    8020e2a6:	4501                	li	a0,0
    8020e2a8:	ffffe097          	auipc	ra,0xffffe
    8020e2ac:	5c8080e7          	jalr	1480(ra) # 8020c870 <argfd>
    8020e2b0:	00055963          	bgez	a0,8020e2c2 <sys_faccessat+0x3e>
    8020e2b4:	fdc42683          	lw	a3,-36(s0)
    8020e2b8:	f9c00713          	li	a4,-100
  {
    return -EMFILE;
    8020e2bc:	57a1                	li	a5,-24
  if(argfd(0, &dirfd, &fp) < 0 && dirfd != AT_FDCWD)
    8020e2be:	08e69463          	bne	a3,a4,8020e346 <sys_faccessat+0xc2>
  }
  if(argstr(1, path, FAT32_MAX_FILENAME + 1) < 0)
    8020e2c2:	10000613          	li	a2,256
    8020e2c6:	ed040593          	addi	a1,s0,-304
    8020e2ca:	4505                	li	a0,1
    8020e2cc:	ffffe097          	auipc	ra,0xffffe
    8020e2d0:	574080e7          	jalr	1396(ra) # 8020c840 <argstr>
  {
    return -1;
    8020e2d4:	57fd                	li	a5,-1
  if(argstr(1, path, FAT32_MAX_FILENAME + 1) < 0)
    8020e2d6:	06054863          	bltz	a0,8020e346 <sys_faccessat+0xc2>
  }
  if(argint(2, &mode) < 0)
    8020e2da:	ecc40593          	addi	a1,s0,-308
    8020e2de:	4509                	li	a0,2
    8020e2e0:	ffffe097          	auipc	ra,0xffffe
    8020e2e4:	51c080e7          	jalr	1308(ra) # 8020c7fc <argint>
  {
    return -1;
    8020e2e8:	57fd                	li	a5,-1
  if(argint(2, &mode) < 0)
    8020e2ea:	04054e63          	bltz	a0,8020e346 <sys_faccessat+0xc2>
  }
  if(argint(3, &flags) < 0)
    8020e2ee:	ec840593          	addi	a1,s0,-312
    8020e2f2:	450d                	li	a0,3
    8020e2f4:	ffffe097          	auipc	ra,0xffffe
    8020e2f8:	508080e7          	jalr	1288(ra) # 8020c7fc <argint>
    8020e2fc:	08054563          	bltz	a0,8020e386 <sys_faccessat+0x102>
  {
    return -1;
  }

  if(path[0] == '/')
    8020e300:	ed044703          	lbu	a4,-304(s0)
    8020e304:	02f00793          	li	a5,47
    8020e308:	06f70163          	beq	a4,a5,8020e36a <sys_faccessat+0xe6>
  {
    dp = NULL;
  }
  else if (AT_FDCWD == dirfd)
    8020e30c:	fdc42703          	lw	a4,-36(s0)
    8020e310:	f9c00793          	li	a5,-100
    8020e314:	02f70f63          	beq	a4,a5,8020e352 <sys_faccessat+0xce>
  {
    dp = p->cwd;
  }
  else
  {
    if(NULL == fp)
    8020e318:	fd043783          	ld	a5,-48(s0)
    8020e31c:	cf8d                	beqz	a5,8020e356 <sys_faccessat+0xd2>
    {
      __debug_warn("[sys_faccessat] dirfd illegal\n");
      return -EMFILE;
    }
    dp = fp->ep;
    8020e31e:	6f88                	ld	a0,24(a5)
  }

  ep = ename(dp, path, &devno);
    8020e320:	ec440613          	addi	a2,s0,-316
    8020e324:	ed040593          	addi	a1,s0,-304
    8020e328:	ffff6097          	auipc	ra,0xffff6
    8020e32c:	08c080e7          	jalr	140(ra) # 802043b4 <ename>
  if(ep == NULL){
    8020e330:	cd1d                	beqz	a0,8020e36e <sys_faccessat+0xea>
    printf("[faccessat] path %s not found\n",path);
    return -1;  
  }

  // check file whether exist or not
  if(mode == F_OK)
    8020e332:	ecc42703          	lw	a4,-308(s0)
  {
    return 0;
    8020e336:	4781                	li	a5,0
  if(mode == F_OK)
    8020e338:	c719                	beqz	a4,8020e346 <sys_faccessat+0xc2>
  else
  {

  }

  if((emode & mode) != mode)
    8020e33a:	ff877793          	andi	a5,a4,-8
    8020e33e:	00f037b3          	snez	a5,a5
    8020e342:	40f007b3          	neg	a5,a5
  {
    return -1;
  }

  return 0;
}
    8020e346:	853e                	mv	a0,a5
    8020e348:	70f2                	ld	ra,312(sp)
    8020e34a:	7452                	ld	s0,304(sp)
    8020e34c:	74b2                	ld	s1,296(sp)
    8020e34e:	6131                	addi	sp,sp,320
    8020e350:	8082                	ret
    dp = p->cwd;
    8020e352:	7ce8                	ld	a0,248(s1)
    8020e354:	b7f1                	j	8020e320 <sys_faccessat+0x9c>
      __debug_warn("[sys_faccessat] dirfd illegal\n");
    8020e356:	00006517          	auipc	a0,0x6
    8020e35a:	9ca50513          	addi	a0,a0,-1590 # 80213d20 <UNAME_VERSION+0x188>
    8020e35e:	ffffa097          	auipc	ra,0xffffa
    8020e362:	75e080e7          	jalr	1886(ra) # 80208abc <__debug_warn>
      return -EMFILE;
    8020e366:	57a1                	li	a5,-24
    8020e368:	bff9                	j	8020e346 <sys_faccessat+0xc2>
    dp = NULL;
    8020e36a:	4501                	li	a0,0
    8020e36c:	bf55                	j	8020e320 <sys_faccessat+0x9c>
    printf("[faccessat] path %s not found\n",path);
    8020e36e:	ed040593          	addi	a1,s0,-304
    8020e372:	00006517          	auipc	a0,0x6
    8020e376:	9ce50513          	addi	a0,a0,-1586 # 80213d40 <UNAME_VERSION+0x1a8>
    8020e37a:	ffffa097          	auipc	ra,0xffffa
    8020e37e:	3b6080e7          	jalr	950(ra) # 80208730 <printf>
    return -1;  
    8020e382:	57fd                	li	a5,-1
    8020e384:	b7c9                	j	8020e346 <sys_faccessat+0xc2>
    return -1;
    8020e386:	57fd                	li	a5,-1
    8020e388:	bf7d                	j	8020e346 <sys_faccessat+0xc2>

000000008020e38a <sys_lseek>:


uint64 
sys_lseek(void)
{
    8020e38a:	7179                	addi	sp,sp,-48
    8020e38c:	f406                	sd	ra,40(sp)
    8020e38e:	f022                	sd	s0,32(sp)
    8020e390:	1800                	addi	s0,sp,48
  uint64 offset;
  int fd;
  int whence;
  uint64 ret = -1;

  if(argfd(0, &fd, &f) < 0 || argaddr(1, &offset) < 0 || argint(2, &whence) < 0)
    8020e392:	fe840613          	addi	a2,s0,-24
    8020e396:	fdc40593          	addi	a1,s0,-36
    8020e39a:	4501                	li	a0,0
    8020e39c:	ffffe097          	auipc	ra,0xffffe
    8020e3a0:	4d4080e7          	jalr	1236(ra) # 8020c870 <argfd>
  {
    return -1;
    8020e3a4:	57fd                	li	a5,-1
  if(argfd(0, &fd, &f) < 0 || argaddr(1, &offset) < 0 || argint(2, &whence) < 0)
    8020e3a6:	02054c63          	bltz	a0,8020e3de <sys_lseek+0x54>
    8020e3aa:	fe040593          	addi	a1,s0,-32
    8020e3ae:	4505                	li	a0,1
    8020e3b0:	ffffe097          	auipc	ra,0xffffe
    8020e3b4:	46e080e7          	jalr	1134(ra) # 8020c81e <argaddr>
    return -1;
    8020e3b8:	57fd                	li	a5,-1
  if(argfd(0, &fd, &f) < 0 || argaddr(1, &offset) < 0 || argint(2, &whence) < 0)
    8020e3ba:	02054263          	bltz	a0,8020e3de <sys_lseek+0x54>
    8020e3be:	fd840593          	addi	a1,s0,-40
    8020e3c2:	4509                	li	a0,2
    8020e3c4:	ffffe097          	auipc	ra,0xffffe
    8020e3c8:	438080e7          	jalr	1080(ra) # 8020c7fc <argint>
    8020e3cc:	02054863          	bltz	a0,8020e3fc <sys_lseek+0x72>
  }

  if(f->type != FD_ENTRY)
    8020e3d0:	fe843503          	ld	a0,-24(s0)
    8020e3d4:	4114                	lw	a3,0(a0)
    8020e3d6:	4709                	li	a4,2
  {
    return -ESPIPE;
    8020e3d8:	578d                	li	a5,-29
  if(f->type != FD_ENTRY)
    8020e3da:	00e68763          	beq	a3,a4,8020e3e8 <sys_lseek+0x5e>
  }

  ret = filelseek(f, offset, whence);
  return ret;
}
    8020e3de:	853e                	mv	a0,a5
    8020e3e0:	70a2                	ld	ra,40(sp)
    8020e3e2:	7402                	ld	s0,32(sp)
    8020e3e4:	6145                	addi	sp,sp,48
    8020e3e6:	8082                	ret
  ret = filelseek(f, offset, whence);
    8020e3e8:	fd842603          	lw	a2,-40(s0)
    8020e3ec:	fe043583          	ld	a1,-32(s0)
    8020e3f0:	ffff8097          	auipc	ra,0xffff8
    8020e3f4:	aca080e7          	jalr	-1334(ra) # 80205eba <filelseek>
    8020e3f8:	87aa                	mv	a5,a0
  return ret;
    8020e3fa:	b7d5                	j	8020e3de <sys_lseek+0x54>
    return -1;
    8020e3fc:	57fd                	li	a5,-1
    8020e3fe:	b7c5                	j	8020e3de <sys_lseek+0x54>

000000008020e400 <sys_renameat2>:


uint64
sys_renameat2(void)
{
    8020e400:	d9010113          	addi	sp,sp,-624
    8020e404:	26113423          	sd	ra,616(sp)
    8020e408:	26813023          	sd	s0,608(sp)
    8020e40c:	24913c23          	sd	s1,600(sp)
    8020e410:	25213823          	sd	s2,592(sp)
    8020e414:	25313423          	sd	s3,584(sp)
    8020e418:	25413023          	sd	s4,576(sp)
    8020e41c:	1c80                	addi	s0,sp,624
  char old[FAT32_MAX_PATH], new[FAT32_MAX_PATH];
  int olddirfd, newdirfd;
  struct file *oldfp;
  struct file *newfp;
  struct dirent *olddp = NULL, *newdp = NULL;
  struct proc *p = myproc();
    8020e41e:	ffffd097          	auipc	ra,0xffffd
    8020e422:	02e080e7          	jalr	46(ra) # 8020b44c <myproc>
    8020e426:	892a                	mv	s2,a0
  // int flags;
  int olddevno = -1, newdevno = -1;
    8020e428:	57fd                	li	a5,-1
    8020e42a:	daf42223          	sw	a5,-604(s0)
    8020e42e:	daf42023          	sw	a5,-608(s0)
  struct dirent *src = NULL, *dst = NULL, *pdst = NULL;
  int srclock = 0;
  char *name;

  if (argstr(1, old, FAT32_MAX_PATH) < 0 || argstr(3, new, FAT32_MAX_PATH) < 0) {
    8020e432:	10400613          	li	a2,260
    8020e436:	ec840593          	addi	a1,s0,-312
    8020e43a:	4505                	li	a0,1
    8020e43c:	ffffe097          	auipc	ra,0xffffe
    8020e440:	404080e7          	jalr	1028(ra) # 8020c840 <argstr>
      return -ENAMETOOLONG;
    8020e444:	fdc00793          	li	a5,-36
  if (argstr(1, old, FAT32_MAX_PATH) < 0 || argstr(3, new, FAT32_MAX_PATH) < 0) {
    8020e448:	14054c63          	bltz	a0,8020e5a0 <sys_renameat2+0x1a0>
    8020e44c:	10400613          	li	a2,260
    8020e450:	dc040593          	addi	a1,s0,-576
    8020e454:	450d                	li	a0,3
    8020e456:	ffffe097          	auipc	ra,0xffffe
    8020e45a:	3ea080e7          	jalr	1002(ra) # 8020c840 <argstr>
      return -ENAMETOOLONG;
    8020e45e:	fdc00793          	li	a5,-36
  if (argstr(1, old, FAT32_MAX_PATH) < 0 || argstr(3, new, FAT32_MAX_PATH) < 0) {
    8020e462:	12054f63          	bltz	a0,8020e5a0 <sys_renameat2+0x1a0>
  }

  if(argfd(0, &olddirfd, &oldfp) < 0)
    8020e466:	db040613          	addi	a2,s0,-592
    8020e46a:	dbc40593          	addi	a1,s0,-580
    8020e46e:	4501                	li	a0,0
    8020e470:	ffffe097          	auipc	ra,0xffffe
    8020e474:	400080e7          	jalr	1024(ra) # 8020c870 <argfd>
    8020e478:	0a055563          	bgez	a0,8020e522 <sys_renameat2+0x122>
  {
    if(old[0] != '/' && olddirfd != AT_FDCWD)
    8020e47c:	ec844703          	lbu	a4,-312(s0)
    8020e480:	02f00793          	li	a5,47
    8020e484:	00f70963          	beq	a4,a5,8020e496 <sys_renameat2+0x96>
    8020e488:	dbc42683          	lw	a3,-580(s0)
    8020e48c:	f9c00713          	li	a4,-100
    {
      return -EBADF;
    8020e490:	57dd                	li	a5,-9
    if(old[0] != '/' && olddirfd != AT_FDCWD)
    8020e492:	10e69763          	bne	a3,a4,8020e5a0 <sys_renameat2+0x1a0>
    }
    olddp = p->cwd;
    8020e496:	0f893483          	ld	s1,248(s2)
  }

  if(argfd(2, &newdirfd, &newfp) < 0)
    8020e49a:	da840613          	addi	a2,s0,-600
    8020e49e:	db840593          	addi	a1,s0,-584
    8020e4a2:	4509                	li	a0,2
    8020e4a4:	ffffe097          	auipc	ra,0xffffe
    8020e4a8:	3cc080e7          	jalr	972(ra) # 8020c870 <argfd>
    8020e4ac:	06055d63          	bgez	a0,8020e526 <sys_renameat2+0x126>
  {
    if(new[0] != '/' && newdirfd != AT_FDCWD)
    8020e4b0:	dc044703          	lbu	a4,-576(s0)
    8020e4b4:	02f00793          	li	a5,47
    8020e4b8:	00f70963          	beq	a4,a5,8020e4ca <sys_renameat2+0xca>
    8020e4bc:	db842683          	lw	a3,-584(s0)
    8020e4c0:	f9c00713          	li	a4,-100
    {
      return -EBADF;
    8020e4c4:	57dd                	li	a5,-9
    if(new[0] != '/' && newdirfd != AT_FDCWD)
    8020e4c6:	0ce69d63          	bne	a3,a4,8020e5a0 <sys_renameat2+0x1a0>
    }
    newdp = p->cwd;
    8020e4ca:	0f893903          	ld	s2,248(s2)
  // if(argint(4, &flags) < 0)
  // {
  //   return -ENAMETOOLONG;
  // }
 
  if ((src = ename(olddp, old, &olddevno)) == NULL || (pdst = enameparent(newdp, new, old, &newdevno)) == NULL
    8020e4ce:	da440613          	addi	a2,s0,-604
    8020e4d2:	ec840593          	addi	a1,s0,-312
    8020e4d6:	8526                	mv	a0,s1
    8020e4d8:	ffff6097          	auipc	ra,0xffff6
    8020e4dc:	edc080e7          	jalr	-292(ra) # 802043b4 <ename>
    8020e4e0:	84aa                	mv	s1,a0
    8020e4e2:	1c050663          	beqz	a0,8020e6ae <sys_renameat2+0x2ae>
    8020e4e6:	da040693          	addi	a3,s0,-608
    8020e4ea:	ec840613          	addi	a2,s0,-312
    8020e4ee:	dc040593          	addi	a1,s0,-576
    8020e4f2:	854a                	mv	a0,s2
    8020e4f4:	ffff6097          	auipc	ra,0xffff6
    8020e4f8:	ee0080e7          	jalr	-288(ra) # 802043d4 <enameparent>
    8020e4fc:	892a                	mv	s2,a0
    8020e4fe:	c151                	beqz	a0,8020e582 <sys_renameat2+0x182>
      || (name = formatname(old)) == NULL) {
    8020e500:	ec840513          	addi	a0,s0,-312
    8020e504:	ffff5097          	auipc	ra,0xffff5
    8020e508:	d00080e7          	jalr	-768(ra) # 80203204 <formatname>
    8020e50c:	89aa                	mv	s3,a0
    8020e50e:	c935                	beqz	a0,8020e582 <sys_renameat2+0x182>
    goto fail;          // src doesn't exist || dst parent doesn't exist || illegal new name
  }
  for (struct dirent *ep = pdst; ep != NULL; ep = ep->parent) {
    if (ep == src) {    // In what universe can we move a directory into its child?
    8020e510:	07248963          	beq	s1,s2,8020e582 <sys_renameat2+0x182>
  for (struct dirent *ep = pdst; ep != NULL; ep = ep->parent) {
    8020e514:	87ca                	mv	a5,s2
    8020e516:	1287b783          	ld	a5,296(a5)
    8020e51a:	cb81                	beqz	a5,8020e52a <sys_renameat2+0x12a>
    if (ep == src) {    // In what universe can we move a directory into its child?
    8020e51c:	fef49de3          	bne	s1,a5,8020e516 <sys_renameat2+0x116>
    8020e520:	a08d                	j	8020e582 <sys_renameat2+0x182>
  struct dirent *olddp = NULL, *newdp = NULL;
    8020e522:	4481                	li	s1,0
    8020e524:	bf9d                	j	8020e49a <sys_renameat2+0x9a>
    8020e526:	4901                	li	s2,0
    8020e528:	b75d                	j	8020e4ce <sys_renameat2+0xce>
      goto fail;
    }
  }

  uint off;
  elock(src);     // must hold child's lock before acquiring parent's, because we do so in other similar cases
    8020e52a:	8526                	mv	a0,s1
    8020e52c:	ffff5097          	auipc	ra,0xffff5
    8020e530:	446080e7          	jalr	1094(ra) # 80203972 <elock>
  srclock = 1;
  elock(pdst);
    8020e534:	854a                	mv	a0,s2
    8020e536:	ffff5097          	auipc	ra,0xffff5
    8020e53a:	43c080e7          	jalr	1084(ra) # 80203972 <elock>
  dst = dirlookup(pdst, name, &off);
    8020e53e:	d9c40613          	addi	a2,s0,-612
    8020e542:	85ce                	mv	a1,s3
    8020e544:	854a                	mv	a0,s2
    8020e546:	ffff6097          	auipc	ra,0xffff6
    8020e54a:	812080e7          	jalr	-2030(ra) # 80203d58 <dirlookup>
    8020e54e:	8a2a                	mv	s4,a0
  if (dst != NULL) {
    8020e550:	c155                	beqz	a0,8020e5f4 <sys_renameat2+0x1f4>
    eunlock(pdst);
    8020e552:	854a                	mv	a0,s2
    8020e554:	ffff5097          	auipc	ra,0xffff5
    8020e558:	454080e7          	jalr	1108(ra) # 802039a8 <eunlock>
    if (src == dst) {
    8020e55c:	01448963          	beq	s1,s4,8020e56e <sys_renameat2+0x16e>
      goto fail;
    } else if (src->attribute & dst->attribute & ATTR_DIRECTORY) {
    8020e560:	1004c783          	lbu	a5,256(s1)
    8020e564:	100a4703          	lbu	a4,256(s4)
    8020e568:	8ff9                	and	a5,a5,a4
    8020e56a:	8bc1                	andi	a5,a5,16
    8020e56c:	ebb1                	bnez	a5,8020e5c0 <sys_renameat2+0x1c0>

  return 0;

fail:
  if (srclock)
    eunlock(src);
    8020e56e:	8526                	mv	a0,s1
    8020e570:	ffff5097          	auipc	ra,0xffff5
    8020e574:	438080e7          	jalr	1080(ra) # 802039a8 <eunlock>
  if (dst)
    eput(dst);
    8020e578:	8552                	mv	a0,s4
    8020e57a:	ffff5097          	auipc	ra,0xffff5
    8020e57e:	47c080e7          	jalr	1148(ra) # 802039f6 <eput>
  if (pdst)
    8020e582:	00090763          	beqz	s2,8020e590 <sys_renameat2+0x190>
    eput(pdst);
    8020e586:	854a                	mv	a0,s2
    8020e588:	ffff5097          	auipc	ra,0xffff5
    8020e58c:	46e080e7          	jalr	1134(ra) # 802039f6 <eput>
  if (src)
    eput(src);
  return -1;
    8020e590:	57fd                	li	a5,-1
  if (src)
    8020e592:	c499                	beqz	s1,8020e5a0 <sys_renameat2+0x1a0>
    eput(src);
    8020e594:	8526                	mv	a0,s1
    8020e596:	ffff5097          	auipc	ra,0xffff5
    8020e59a:	460080e7          	jalr	1120(ra) # 802039f6 <eput>
  return -1;
    8020e59e:	57fd                	li	a5,-1

}
    8020e5a0:	853e                	mv	a0,a5
    8020e5a2:	26813083          	ld	ra,616(sp)
    8020e5a6:	26013403          	ld	s0,608(sp)
    8020e5aa:	25813483          	ld	s1,600(sp)
    8020e5ae:	25013903          	ld	s2,592(sp)
    8020e5b2:	24813983          	ld	s3,584(sp)
    8020e5b6:	24013a03          	ld	s4,576(sp)
    8020e5ba:	27010113          	addi	sp,sp,624
    8020e5be:	8082                	ret
      elock(dst);
    8020e5c0:	8552                	mv	a0,s4
    8020e5c2:	ffff5097          	auipc	ra,0xffff5
    8020e5c6:	3b0080e7          	jalr	944(ra) # 80203972 <elock>
      if (!isdirempty(dst)) {    // it's ok to overwrite an empty dir
    8020e5ca:	8552                	mv	a0,s4
    8020e5cc:	ffff6097          	auipc	ra,0xffff6
    8020e5d0:	c7c080e7          	jalr	-900(ra) # 80204248 <isdirempty>
    8020e5d4:	c579                	beqz	a0,8020e6a2 <sys_renameat2+0x2a2>
      elock(pdst);
    8020e5d6:	854a                	mv	a0,s2
    8020e5d8:	ffff5097          	auipc	ra,0xffff5
    8020e5dc:	39a080e7          	jalr	922(ra) # 80203972 <elock>
    eremove(dst);
    8020e5e0:	8552                	mv	a0,s4
    8020e5e2:	ffff5097          	auipc	ra,0xffff5
    8020e5e6:	21e080e7          	jalr	542(ra) # 80203800 <eremove>
    eunlock(dst);
    8020e5ea:	8552                	mv	a0,s4
    8020e5ec:	ffff5097          	auipc	ra,0xffff5
    8020e5f0:	3bc080e7          	jalr	956(ra) # 802039a8 <eunlock>
  memmove(src->filename, name, FAT32_MAX_FILENAME);
    8020e5f4:	0ff00613          	li	a2,255
    8020e5f8:	85ce                	mv	a1,s3
    8020e5fa:	8526                	mv	a0,s1
    8020e5fc:	ffff2097          	auipc	ra,0xffff2
    8020e600:	7d8080e7          	jalr	2008(ra) # 80200dd4 <memmove>
  emake(pdst, src, off);
    8020e604:	d9c42603          	lw	a2,-612(s0)
    8020e608:	85a6                	mv	a1,s1
    8020e60a:	854a                	mv	a0,s2
    8020e60c:	ffff5097          	auipc	ra,0xffff5
    8020e610:	cb0080e7          	jalr	-848(ra) # 802032bc <emake>
  if (src->parent != pdst) {
    8020e614:	1284b783          	ld	a5,296(s1)
    8020e618:	01278d63          	beq	a5,s2,8020e632 <sys_renameat2+0x232>
    eunlock(pdst);
    8020e61c:	854a                	mv	a0,s2
    8020e61e:	ffff5097          	auipc	ra,0xffff5
    8020e622:	38a080e7          	jalr	906(ra) # 802039a8 <eunlock>
    elock(src->parent);
    8020e626:	1284b503          	ld	a0,296(s1)
    8020e62a:	ffff5097          	auipc	ra,0xffff5
    8020e62e:	348080e7          	jalr	840(ra) # 80203972 <elock>
  eremove(src);
    8020e632:	8526                	mv	a0,s1
    8020e634:	ffff5097          	auipc	ra,0xffff5
    8020e638:	1cc080e7          	jalr	460(ra) # 80203800 <eremove>
  eunlock(src->parent);
    8020e63c:	1284b503          	ld	a0,296(s1)
    8020e640:	ffff5097          	auipc	ra,0xffff5
    8020e644:	368080e7          	jalr	872(ra) # 802039a8 <eunlock>
  struct dirent *psrc = src->parent;  // src must not be root, or it won't pass the for-loop test
    8020e648:	1284b983          	ld	s3,296(s1)
  src->parent = edup(pdst);
    8020e64c:	854a                	mv	a0,s2
    8020e64e:	ffff5097          	auipc	ra,0xffff5
    8020e652:	056080e7          	jalr	86(ra) # 802036a4 <edup>
    8020e656:	12a4b423          	sd	a0,296(s1)
  src->off = off;
    8020e65a:	d9c42783          	lw	a5,-612(s0)
    8020e65e:	12f4a023          	sw	a5,288(s1)
  src->valid = 1;
    8020e662:	4785                	li	a5,1
    8020e664:	10f49b23          	sh	a5,278(s1)
  eunlock(src);
    8020e668:	8526                	mv	a0,s1
    8020e66a:	ffff5097          	auipc	ra,0xffff5
    8020e66e:	33e080e7          	jalr	830(ra) # 802039a8 <eunlock>
  eput(psrc);
    8020e672:	854e                	mv	a0,s3
    8020e674:	ffff5097          	auipc	ra,0xffff5
    8020e678:	382080e7          	jalr	898(ra) # 802039f6 <eput>
  if (dst) {
    8020e67c:	000a0763          	beqz	s4,8020e68a <sys_renameat2+0x28a>
    eput(dst);
    8020e680:	8552                	mv	a0,s4
    8020e682:	ffff5097          	auipc	ra,0xffff5
    8020e686:	374080e7          	jalr	884(ra) # 802039f6 <eput>
  eput(pdst);
    8020e68a:	854a                	mv	a0,s2
    8020e68c:	ffff5097          	auipc	ra,0xffff5
    8020e690:	36a080e7          	jalr	874(ra) # 802039f6 <eput>
  eput(src);
    8020e694:	8526                	mv	a0,s1
    8020e696:	ffff5097          	auipc	ra,0xffff5
    8020e69a:	360080e7          	jalr	864(ra) # 802039f6 <eput>
  return 0;
    8020e69e:	4781                	li	a5,0
    8020e6a0:	b701                	j	8020e5a0 <sys_renameat2+0x1a0>
        eunlock(dst);
    8020e6a2:	8552                	mv	a0,s4
    8020e6a4:	ffff5097          	auipc	ra,0xffff5
    8020e6a8:	304080e7          	jalr	772(ra) # 802039a8 <eunlock>
        goto fail;
    8020e6ac:	b5c9                	j	8020e56e <sys_renameat2+0x16e>
  struct dirent *src = NULL, *dst = NULL, *pdst = NULL;
    8020e6ae:	892a                	mv	s2,a0
  if (dst)
    8020e6b0:	bdc9                	j	8020e582 <sys_renameat2+0x182>

000000008020e6b2 <sys_ioctl>:


uint64
sys_ioctl(void)
{
    8020e6b2:	715d                	addi	sp,sp,-80
    8020e6b4:	e486                	sd	ra,72(sp)
    8020e6b6:	e0a2                	sd	s0,64(sp)
    8020e6b8:	0880                	addi	s0,sp,80
	int fd;
	struct file *f;
	uint64 request;
	uint64 argp;

	if (argfd(0, &fd, &f) < 0 || argaddr(1, &request) < 0 || argaddr(2, &argp) < 0)
    8020e6ba:	fe040613          	addi	a2,s0,-32
    8020e6be:	fec40593          	addi	a1,s0,-20
    8020e6c2:	4501                	li	a0,0
    8020e6c4:	ffffe097          	auipc	ra,0xffffe
    8020e6c8:	1ac080e7          	jalr	428(ra) # 8020c870 <argfd>
		return -EBADF;
    8020e6cc:	57dd                	li	a5,-9
	if (argfd(0, &fd, &f) < 0 || argaddr(1, &request) < 0 || argaddr(2, &argp) < 0)
    8020e6ce:	08054063          	bltz	a0,8020e74e <sys_ioctl+0x9c>
    8020e6d2:	fd840593          	addi	a1,s0,-40
    8020e6d6:	4505                	li	a0,1
    8020e6d8:	ffffe097          	auipc	ra,0xffffe
    8020e6dc:	146080e7          	jalr	326(ra) # 8020c81e <argaddr>
		return -EBADF;
    8020e6e0:	57dd                	li	a5,-9
	if (argfd(0, &fd, &f) < 0 || argaddr(1, &request) < 0 || argaddr(2, &argp) < 0)
    8020e6e2:	06054663          	bltz	a0,8020e74e <sys_ioctl+0x9c>
    8020e6e6:	fd040593          	addi	a1,s0,-48
    8020e6ea:	4509                	li	a0,2
    8020e6ec:	ffffe097          	auipc	ra,0xffffe
    8020e6f0:	132080e7          	jalr	306(ra) # 8020c81e <argaddr>
    8020e6f4:	0c054163          	bltz	a0,8020e7b6 <sys_ioctl+0x104>

	if (f->type != FD_DEVICE&&f->type != FD_PIPE){
    8020e6f8:	fe043783          	ld	a5,-32(s0)
    8020e6fc:	4398                	lw	a4,0(a5)
    8020e6fe:	9b75                	andi	a4,a4,-3
    8020e700:	4685                	li	a3,1
               //__debug_info("[sys_ioctl] fd:%d f->type not device or pipe\n",fd);
		return -EPERM;
    8020e702:	57fd                	li	a5,-1
	if (f->type != FD_DEVICE&&f->type != FD_PIPE){
    8020e704:	04d71563          	bne	a4,a3,8020e74e <sys_ioctl+0x9c>
        }

  // __debug_info("[sys_ioctl] request = %p\n", request);
	switch (request) {
    8020e708:	fd843683          	ld	a3,-40(s0)
    8020e70c:	6795                	lui	a5,0x5
    8020e70e:	40178793          	addi	a5,a5,1025 # 5401 <_entry-0x801fabff>
    8020e712:	04f68d63          	beq	a3,a5,8020e76c <sys_ioctl+0xba>
    8020e716:	6715                	lui	a4,0x5
    8020e718:	41370713          	addi	a4,a4,1043 # 5413 <_entry-0x801fabed>
    8020e71c:	4781                	li	a5,0
    8020e71e:	02e69863          	bne	a3,a4,8020e74e <sys_ioctl+0x9c>
	case TIOCGWINSZ: {
		struct winsize win = {
    8020e722:	fa042e23          	sw	zero,-68(s0)
    8020e726:	47e1                	li	a5,24
    8020e728:	faf41c23          	sh	a5,-72(s0)
    8020e72c:	05000793          	li	a5,80
    8020e730:	faf41d23          	sh	a5,-70(s0)
			.ws_row = 24,
			.ws_col = 80,
		};
		if (either_copyout(1, argp, (char*)&win, sizeof(win)) < 0){
    8020e734:	46a1                	li	a3,8
    8020e736:	fb840613          	addi	a2,s0,-72
    8020e73a:	fd043583          	ld	a1,-48(s0)
    8020e73e:	4505                	li	a0,1
    8020e740:	ffffc097          	auipc	ra,0xffffc
    8020e744:	726080e7          	jalr	1830(ra) # 8020ae66 <either_copyout>
	}
	default:
		return 0;
	}

	return 0;
    8020e748:	4781                	li	a5,0
		if (either_copyout(1, argp, (char*)&win, sizeof(win)) < 0){
    8020e74a:	00054763          	bltz	a0,8020e758 <sys_ioctl+0xa6>
}
    8020e74e:	853e                	mv	a0,a5
    8020e750:	60a6                	ld	ra,72(sp)
    8020e752:	6406                	ld	s0,64(sp)
    8020e754:	6161                	addi	sp,sp,80
    8020e756:	8082                	ret
      __debug_info("[sys_ioctl] copyout1\n");
    8020e758:	00005517          	auipc	a0,0x5
    8020e75c:	60850513          	addi	a0,a0,1544 # 80213d60 <UNAME_VERSION+0x1c8>
    8020e760:	ffffa097          	auipc	ra,0xffffa
    8020e764:	196080e7          	jalr	406(ra) # 802088f6 <__debug_info>
			return -EFAULT;
    8020e768:	57c9                	li	a5,-14
    8020e76a:	b7d5                	j	8020e74e <sys_ioctl+0x9c>
		struct termios terminfo = {
    8020e76c:	00005797          	auipc	a5,0x5
    8020e770:	69c78793          	addi	a5,a5,1692 # 80213e08 <UNAME_VERSION+0x270>
    8020e774:	6398                	ld	a4,0(a5)
    8020e776:	fae43c23          	sd	a4,-72(s0)
    8020e77a:	6798                	ld	a4,8(a5)
    8020e77c:	fce43023          	sd	a4,-64(s0)
    8020e780:	0107d783          	lhu	a5,16(a5)
    8020e784:	fcf41423          	sh	a5,-56(s0)
		if (either_copyout(1, argp, (char*)&terminfo, sizeof(terminfo)) < 0){
    8020e788:	46c9                	li	a3,18
    8020e78a:	fb840613          	addi	a2,s0,-72
    8020e78e:	fd043583          	ld	a1,-48(s0)
    8020e792:	4505                	li	a0,1
    8020e794:	ffffc097          	auipc	ra,0xffffc
    8020e798:	6d2080e7          	jalr	1746(ra) # 8020ae66 <either_copyout>
	return 0;
    8020e79c:	4781                	li	a5,0
		if (either_copyout(1, argp, (char*)&terminfo, sizeof(terminfo)) < 0){
    8020e79e:	fa0558e3          	bgez	a0,8020e74e <sys_ioctl+0x9c>
      __debug_info("[sys_ioctl] copyout2\n");
    8020e7a2:	00005517          	auipc	a0,0x5
    8020e7a6:	5d650513          	addi	a0,a0,1494 # 80213d78 <UNAME_VERSION+0x1e0>
    8020e7aa:	ffffa097          	auipc	ra,0xffffa
    8020e7ae:	14c080e7          	jalr	332(ra) # 802088f6 <__debug_info>
			return -EFAULT;
    8020e7b2:	57c9                	li	a5,-14
    8020e7b4:	bf69                	j	8020e74e <sys_ioctl+0x9c>
		return -EBADF;
    8020e7b6:	57dd                	li	a5,-9
    8020e7b8:	bf59                	j	8020e74e <sys_ioctl+0x9c>

000000008020e7ba <sys_fcntl>:


uint64
sys_fcntl(void)
{
    8020e7ba:	7139                	addi	sp,sp,-64
    8020e7bc:	fc06                	sd	ra,56(sp)
    8020e7be:	f822                	sd	s0,48(sp)
    8020e7c0:	f426                	sd	s1,40(sp)
    8020e7c2:	0080                	addi	s0,sp,64
  int fd;
  int cmd;
  uint64 arg;
  struct file* f;
  struct proc* p = myproc();
    8020e7c4:	ffffd097          	auipc	ra,0xffffd
    8020e7c8:	c88080e7          	jalr	-888(ra) # 8020b44c <myproc>
    8020e7cc:	84aa                	mv	s1,a0
  if(argfd(0, &fd, &f) < 0)
    8020e7ce:	fc840613          	addi	a2,s0,-56
    8020e7d2:	fdc40593          	addi	a1,s0,-36
    8020e7d6:	4501                	li	a0,0
    8020e7d8:	ffffe097          	auipc	ra,0xffffe
    8020e7dc:	098080e7          	jalr	152(ra) # 8020c870 <argfd>
    return -1;
    8020e7e0:	57fd                	li	a5,-1
  if(argfd(0, &fd, &f) < 0)
    8020e7e2:	04054363          	bltz	a0,8020e828 <sys_fcntl+0x6e>
  if(argint(1, &cmd) < 0)
    8020e7e6:	fd840593          	addi	a1,s0,-40
    8020e7ea:	4505                	li	a0,1
    8020e7ec:	ffffe097          	auipc	ra,0xffffe
    8020e7f0:	010080e7          	jalr	16(ra) # 8020c7fc <argint>
    return -1;
    8020e7f4:	57fd                	li	a5,-1
  if(argint(1, &cmd) < 0)
    8020e7f6:	02054963          	bltz	a0,8020e828 <sys_fcntl+0x6e>
  if(argaddr(2, &arg) < 0)
    8020e7fa:	fd040593          	addi	a1,s0,-48
    8020e7fe:	4509                	li	a0,2
    8020e800:	ffffe097          	auipc	ra,0xffffe
    8020e804:	01e080e7          	jalr	30(ra) # 8020c81e <argaddr>
    8020e808:	0a054a63          	bltz	a0,8020e8bc <sys_fcntl+0x102>
    return -1;
   //printf("[sys fcntl]fd:%d cmd:%d arg:%p\n",fd,cmd,arg);
  if(cmd == F_GETFD){
    8020e80c:	fd842703          	lw	a4,-40(s0)
    8020e810:	4785                	li	a5,1
    8020e812:	02f70163          	beq	a4,a5,8020e834 <sys_fcntl+0x7a>
    return p->exec_close[fd];
  }else if(cmd == F_SETFD){
    8020e816:	4789                	li	a5,2
    8020e818:	02f70563          	beq	a4,a5,8020e842 <sys_fcntl+0x88>
    p->exec_close[fd] = arg;
  }else if(cmd == F_DUPFD){
    8020e81c:	cf0d                	beqz	a4,8020e856 <sys_fcntl+0x9c>
      return fd;
    }
    filedup(f);
    //__debug_warn("[sys fcntl]return fd:%d\n",fd);
    return fd;
  }else if(cmd == F_DUPFD_CLOEXEC){
    8020e81e:	40600693          	li	a3,1030
    filedup(f);
    p->exec_close[fd] = 1;
    //__debug_warn("[sys fcntl]return fd:%d\n",fd);
    return fd;
  }
  return 0;
    8020e822:	4781                	li	a5,0
  }else if(cmd == F_DUPFD_CLOEXEC){
    8020e824:	04d70f63          	beq	a4,a3,8020e882 <sys_fcntl+0xc8>
}
    8020e828:	853e                	mv	a0,a5
    8020e82a:	70e2                	ld	ra,56(sp)
    8020e82c:	7442                	ld	s0,48(sp)
    8020e82e:	74a2                	ld	s1,40(sp)
    8020e830:	6121                	addi	sp,sp,64
    8020e832:	8082                	ret
    return p->exec_close[fd];
    8020e834:	fdc42703          	lw	a4,-36(s0)
    8020e838:	78fc                	ld	a5,240(s1)
    8020e83a:	070a                	slli	a4,a4,0x2
    8020e83c:	97ba                	add	a5,a5,a4
    8020e83e:	439c                	lw	a5,0(a5)
    8020e840:	b7e5                	j	8020e828 <sys_fcntl+0x6e>
    p->exec_close[fd] = arg;
    8020e842:	fdc42703          	lw	a4,-36(s0)
    8020e846:	78fc                	ld	a5,240(s1)
    8020e848:	070a                	slli	a4,a4,0x2
    8020e84a:	97ba                	add	a5,a5,a4
    8020e84c:	fd043703          	ld	a4,-48(s0)
    8020e850:	c398                	sw	a4,0(a5)
  return 0;
    8020e852:	4781                	li	a5,0
    8020e854:	bfd1                	j	8020e828 <sys_fcntl+0x6e>
    if((fd=fdallocfrom(f,arg)) < 0){
    8020e856:	fd042583          	lw	a1,-48(s0)
    8020e85a:	fc843503          	ld	a0,-56(s0)
    8020e85e:	fffff097          	auipc	ra,0xfffff
    8020e862:	e36080e7          	jalr	-458(ra) # 8020d694 <fdallocfrom>
    8020e866:	fca42e23          	sw	a0,-36(s0)
      return fd;
    8020e86a:	87aa                	mv	a5,a0
    if((fd=fdallocfrom(f,arg)) < 0){
    8020e86c:	fa054ee3          	bltz	a0,8020e828 <sys_fcntl+0x6e>
    filedup(f);
    8020e870:	fc843503          	ld	a0,-56(s0)
    8020e874:	ffff7097          	auipc	ra,0xffff7
    8020e878:	9f0080e7          	jalr	-1552(ra) # 80205264 <filedup>
    return fd;
    8020e87c:	fdc42783          	lw	a5,-36(s0)
    8020e880:	b765                	j	8020e828 <sys_fcntl+0x6e>
    if((fd=fdallocfrom(f,arg)) < 0){
    8020e882:	fd042583          	lw	a1,-48(s0)
    8020e886:	fc843503          	ld	a0,-56(s0)
    8020e88a:	fffff097          	auipc	ra,0xfffff
    8020e88e:	e0a080e7          	jalr	-502(ra) # 8020d694 <fdallocfrom>
    8020e892:	87aa                	mv	a5,a0
    8020e894:	fca42e23          	sw	a0,-36(s0)
    8020e898:	f80548e3          	bltz	a0,8020e828 <sys_fcntl+0x6e>
    filedup(f);
    8020e89c:	fc843503          	ld	a0,-56(s0)
    8020e8a0:	ffff7097          	auipc	ra,0xffff7
    8020e8a4:	9c4080e7          	jalr	-1596(ra) # 80205264 <filedup>
    p->exec_close[fd] = 1;
    8020e8a8:	fdc42703          	lw	a4,-36(s0)
    8020e8ac:	78fc                	ld	a5,240(s1)
    8020e8ae:	070a                	slli	a4,a4,0x2
    8020e8b0:	97ba                	add	a5,a5,a4
    8020e8b2:	4705                	li	a4,1
    8020e8b4:	c398                	sw	a4,0(a5)
    return fd;
    8020e8b6:	fdc42783          	lw	a5,-36(s0)
    8020e8ba:	b7bd                	j	8020e828 <sys_fcntl+0x6e>
    return -1;
    8020e8bc:	57fd                	li	a5,-1
    8020e8be:	b7ad                	j	8020e828 <sys_fcntl+0x6e>

000000008020e8c0 <sys_getdents64>:


uint64
sys_getdents64(void) 
{
    8020e8c0:	7179                	addi	sp,sp,-48
    8020e8c2:	f406                	sd	ra,40(sp)
    8020e8c4:	f022                	sd	s0,32(sp)
    8020e8c6:	1800                	addi	s0,sp,48
  struct file* fp;
  int fd;
  uint64 buf;
  uint64 len;

  if(argfd(0, &fd, &fp) < 0 || argaddr(1, &buf) < 0 || argaddr(2, &len) < 0) {
    8020e8c8:	fe840613          	addi	a2,s0,-24
    8020e8cc:	fe440593          	addi	a1,s0,-28
    8020e8d0:	4501                	li	a0,0
    8020e8d2:	ffffe097          	auipc	ra,0xffffe
    8020e8d6:	f9e080e7          	jalr	-98(ra) # 8020c870 <argfd>
    return -1;
    8020e8da:	57fd                	li	a5,-1
  if(argfd(0, &fd, &fp) < 0 || argaddr(1, &buf) < 0 || argaddr(2, &len) < 0) {
    8020e8dc:	04054163          	bltz	a0,8020e91e <sys_getdents64+0x5e>
    8020e8e0:	fd840593          	addi	a1,s0,-40
    8020e8e4:	4505                	li	a0,1
    8020e8e6:	ffffe097          	auipc	ra,0xffffe
    8020e8ea:	f38080e7          	jalr	-200(ra) # 8020c81e <argaddr>
    return -1;
    8020e8ee:	57fd                	li	a5,-1
  if(argfd(0, &fd, &fp) < 0 || argaddr(1, &buf) < 0 || argaddr(2, &len) < 0) {
    8020e8f0:	02054763          	bltz	a0,8020e91e <sys_getdents64+0x5e>
    8020e8f4:	fd040593          	addi	a1,s0,-48
    8020e8f8:	4509                	li	a0,2
    8020e8fa:	ffffe097          	auipc	ra,0xffffe
    8020e8fe:	f24080e7          	jalr	-220(ra) # 8020c81e <argaddr>
    return -1;
    8020e902:	57fd                	li	a5,-1
  if(argfd(0, &fd, &fp) < 0 || argaddr(1, &buf) < 0 || argaddr(2, &len) < 0) {
    8020e904:	00054d63          	bltz	a0,8020e91e <sys_getdents64+0x5e>
  }

  return dirent_next(fp, buf, len);
    8020e908:	fd042603          	lw	a2,-48(s0)
    8020e90c:	fd843583          	ld	a1,-40(s0)
    8020e910:	fe843503          	ld	a0,-24(s0)
    8020e914:	ffff7097          	auipc	ra,0xffff7
    8020e918:	420080e7          	jalr	1056(ra) # 80205d34 <dirent_next>
    8020e91c:	87aa                	mv	a5,a0
}
    8020e91e:	853e                	mv	a0,a5
    8020e920:	70a2                	ld	ra,40(sp)
    8020e922:	7402                	ld	s0,32(sp)
    8020e924:	6145                	addi	sp,sp,48
    8020e926:	8082                	ret

000000008020e928 <sys_pipe2>:

uint64
sys_pipe2(void)
{
    8020e928:	7139                	addi	sp,sp,-64
    8020e92a:	fc06                	sd	ra,56(sp)
    8020e92c:	f822                	sd	s0,48(sp)
    8020e92e:	f426                	sd	s1,40(sp)
    8020e930:	0080                	addi	s0,sp,64
  uint64 fdarray; // user pointer to array of two integers
  struct file *rf, *wf;
  int fd0, fd1;
  struct proc *p = myproc();
    8020e932:	ffffd097          	auipc	ra,0xffffd
    8020e936:	b1a080e7          	jalr	-1254(ra) # 8020b44c <myproc>
    8020e93a:	84aa                	mv	s1,a0

  if(argaddr(0, &fdarray) < 0)
    8020e93c:	fd840593          	addi	a1,s0,-40
    8020e940:	4501                	li	a0,0
    8020e942:	ffffe097          	auipc	ra,0xffffe
    8020e946:	edc080e7          	jalr	-292(ra) # 8020c81e <argaddr>
    return -1;
    8020e94a:	57fd                	li	a5,-1
  if(argaddr(0, &fdarray) < 0)
    8020e94c:	10054b63          	bltz	a0,8020ea62 <sys_pipe2+0x13a>
  if(pipealloc(&rf, &wf) < 0){
    8020e950:	fc840593          	addi	a1,s0,-56
    8020e954:	fd040513          	addi	a0,s0,-48
    8020e958:	ffff6097          	auipc	ra,0xffff6
    8020e95c:	0bc080e7          	jalr	188(ra) # 80204a14 <pipealloc>
    8020e960:	0a054963          	bltz	a0,8020ea12 <sys_pipe2+0xea>
    __debug_warn("[pipe2] pipe alloc failed\n");
    return -1;
  }
  fd0 = -1;
    8020e964:	57fd                	li	a5,-1
    8020e966:	fcf42223          	sw	a5,-60(s0)
  return fdallocfrom(f,0);
    8020e96a:	4581                	li	a1,0
    8020e96c:	fd043503          	ld	a0,-48(s0)
    8020e970:	fffff097          	auipc	ra,0xfffff
    8020e974:	d24080e7          	jalr	-732(ra) # 8020d694 <fdallocfrom>
  if((fd0 = fdalloc(rf)) < 0 || (fd1 = fdalloc(wf)) < 0){
    8020e978:	fca42223          	sw	a0,-60(s0)
    8020e97c:	0a054e63          	bltz	a0,8020ea38 <sys_pipe2+0x110>
  return fdallocfrom(f,0);
    8020e980:	4581                	li	a1,0
    8020e982:	fc843503          	ld	a0,-56(s0)
    8020e986:	fffff097          	auipc	ra,0xfffff
    8020e98a:	d0e080e7          	jalr	-754(ra) # 8020d694 <fdallocfrom>
  if((fd0 = fdalloc(rf)) < 0 || (fd1 = fdalloc(wf)) < 0){
    8020e98e:	fca42023          	sw	a0,-64(s0)
    8020e992:	08054a63          	bltz	a0,8020ea26 <sys_pipe2+0xfe>
    __debug_warn("[pipe2] fd alloc failed\n");
    return -1;
  }
  // if(copyout(p->pagetable, fdarray, (char*)&fd0, sizeof(fd0)) < 0 ||
  //    copyout(p->pagetable, fdarray+sizeof(fd0), (char *)&fd1, sizeof(fd1)) < 0){
  if(either_copyout(1, fdarray, (char*)&fd0, sizeof(fd0)) < 0 ||
    8020e996:	4691                	li	a3,4
    8020e998:	fc440613          	addi	a2,s0,-60
    8020e99c:	fd843583          	ld	a1,-40(s0)
    8020e9a0:	4505                	li	a0,1
    8020e9a2:	ffffc097          	auipc	ra,0xffffc
    8020e9a6:	4c4080e7          	jalr	1220(ra) # 8020ae66 <either_copyout>
    8020e9aa:	02054063          	bltz	a0,8020e9ca <sys_pipe2+0xa2>
     either_copyout(1, fdarray+sizeof(fd0), (char *)&fd1, sizeof(fd1)) < 0){
    8020e9ae:	4691                	li	a3,4
    8020e9b0:	fc040613          	addi	a2,s0,-64
    8020e9b4:	fd843583          	ld	a1,-40(s0)
    8020e9b8:	0591                	addi	a1,a1,4
    8020e9ba:	4505                	li	a0,1
    8020e9bc:	ffffc097          	auipc	ra,0xffffc
    8020e9c0:	4aa080e7          	jalr	1194(ra) # 8020ae66 <either_copyout>
    fileclose(wf);
    __debug_warn("[pipe2] copy failed\n");
    return -1;
  }
  //printf("[pipe] fd0:%d fd1:%d\n",fd0,fd1);
  return 0;
    8020e9c4:	4781                	li	a5,0
  if(either_copyout(1, fdarray, (char*)&fd0, sizeof(fd0)) < 0 ||
    8020e9c6:	08055e63          	bgez	a0,8020ea62 <sys_pipe2+0x13a>
    p->ofile[fd0] = 0;
    8020e9ca:	fc442703          	lw	a4,-60(s0)
    8020e9ce:	74fc                	ld	a5,232(s1)
    8020e9d0:	070e                	slli	a4,a4,0x3
    8020e9d2:	97ba                	add	a5,a5,a4
    8020e9d4:	0007b023          	sd	zero,0(a5)
    p->ofile[fd1] = 0;
    8020e9d8:	fc042703          	lw	a4,-64(s0)
    8020e9dc:	74fc                	ld	a5,232(s1)
    8020e9de:	070e                	slli	a4,a4,0x3
    8020e9e0:	97ba                	add	a5,a5,a4
    8020e9e2:	0007b023          	sd	zero,0(a5)
    fileclose(rf);
    8020e9e6:	fd043503          	ld	a0,-48(s0)
    8020e9ea:	ffff7097          	auipc	ra,0xffff7
    8020e9ee:	8c8080e7          	jalr	-1848(ra) # 802052b2 <fileclose>
    fileclose(wf);
    8020e9f2:	fc843503          	ld	a0,-56(s0)
    8020e9f6:	ffff7097          	auipc	ra,0xffff7
    8020e9fa:	8bc080e7          	jalr	-1860(ra) # 802052b2 <fileclose>
    __debug_warn("[pipe2] copy failed\n");
    8020e9fe:	00005517          	auipc	a0,0x5
    8020ea02:	3d250513          	addi	a0,a0,978 # 80213dd0 <UNAME_VERSION+0x238>
    8020ea06:	ffffa097          	auipc	ra,0xffffa
    8020ea0a:	0b6080e7          	jalr	182(ra) # 80208abc <__debug_warn>
    return -1;
    8020ea0e:	57fd                	li	a5,-1
    8020ea10:	a889                	j	8020ea62 <sys_pipe2+0x13a>
    __debug_warn("[pipe2] pipe alloc failed\n");
    8020ea12:	00005517          	auipc	a0,0x5
    8020ea16:	37e50513          	addi	a0,a0,894 # 80213d90 <UNAME_VERSION+0x1f8>
    8020ea1a:	ffffa097          	auipc	ra,0xffffa
    8020ea1e:	0a2080e7          	jalr	162(ra) # 80208abc <__debug_warn>
    return -1;
    8020ea22:	57fd                	li	a5,-1
    8020ea24:	a83d                	j	8020ea62 <sys_pipe2+0x13a>
    if(fd0 >= 0)
    8020ea26:	fc442783          	lw	a5,-60(s0)
    8020ea2a:	0007c763          	bltz	a5,8020ea38 <sys_pipe2+0x110>
      p->ofile[fd0] = 0;
    8020ea2e:	74f8                	ld	a4,232(s1)
    8020ea30:	078e                	slli	a5,a5,0x3
    8020ea32:	97ba                	add	a5,a5,a4
    8020ea34:	0007b023          	sd	zero,0(a5)
    fileclose(rf);
    8020ea38:	fd043503          	ld	a0,-48(s0)
    8020ea3c:	ffff7097          	auipc	ra,0xffff7
    8020ea40:	876080e7          	jalr	-1930(ra) # 802052b2 <fileclose>
    fileclose(wf);
    8020ea44:	fc843503          	ld	a0,-56(s0)
    8020ea48:	ffff7097          	auipc	ra,0xffff7
    8020ea4c:	86a080e7          	jalr	-1942(ra) # 802052b2 <fileclose>
    __debug_warn("[pipe2] fd alloc failed\n");
    8020ea50:	00005517          	auipc	a0,0x5
    8020ea54:	36050513          	addi	a0,a0,864 # 80213db0 <UNAME_VERSION+0x218>
    8020ea58:	ffffa097          	auipc	ra,0xffffa
    8020ea5c:	064080e7          	jalr	100(ra) # 80208abc <__debug_warn>
    return -1;
    8020ea60:	57fd                	li	a5,-1
}
    8020ea62:	853e                	mv	a0,a5
    8020ea64:	70e2                	ld	ra,56(sp)
    8020ea66:	7442                	ld	s0,48(sp)
    8020ea68:	74a2                	ld	s1,40(sp)
    8020ea6a:	6121                	addi	sp,sp,64
    8020ea6c:	8082                	ret

000000008020ea6e <sys_readlinkat>:

uint64
sys_readlinkat(void)
{
    8020ea6e:	714d                	addi	sp,sp,-336
    8020ea70:	e686                	sd	ra,328(sp)
    8020ea72:	e2a2                	sd	s0,320(sp)
    8020ea74:	fe26                	sd	s1,312(sp)
    8020ea76:	0a80                	addi	s0,sp,336
  struct file* df;
  struct dirent *dp = NULL;
  char pathname[FAT32_MAX_PATH+1];
  uint64 buf;
  int bufsz;
  struct proc *p = myproc();
    8020ea78:	ffffd097          	auipc	ra,0xffffd
    8020ea7c:	9d4080e7          	jalr	-1580(ra) # 8020b44c <myproc>
    8020ea80:	84aa                	mv	s1,a0
  int devno = -1;
    8020ea82:	57fd                	li	a5,-1
    8020ea84:	eaf42c23          	sw	a5,-328(s0)

  if(argint(3,&bufsz)<0){
    8020ea88:	ebc40593          	addi	a1,s0,-324
    8020ea8c:	450d                	li	a0,3
    8020ea8e:	ffffe097          	auipc	ra,0xffffe
    8020ea92:	d6e080e7          	jalr	-658(ra) # 8020c7fc <argint>
    return -1;
    8020ea96:	57fd                	li	a5,-1
  if(argint(3,&bufsz)<0){
    8020ea98:	06054563          	bltz	a0,8020eb02 <sys_readlinkat+0x94>
  }
  if(argaddr(2,&buf)<0){
    8020ea9c:	ec040593          	addi	a1,s0,-320
    8020eaa0:	4509                	li	a0,2
    8020eaa2:	ffffe097          	auipc	ra,0xffffe
    8020eaa6:	d7c080e7          	jalr	-644(ra) # 8020c81e <argaddr>
    return -1;
    8020eaaa:	57fd                	li	a5,-1
  if(argaddr(2,&buf)<0){
    8020eaac:	04054b63          	bltz	a0,8020eb02 <sys_readlinkat+0x94>
  }
  if(argstr(1,pathname,FAT32_MAX_PATH+1)<0){
    8020eab0:	10500613          	li	a2,261
    8020eab4:	ec840593          	addi	a1,s0,-312
    8020eab8:	4505                	li	a0,1
    8020eaba:	ffffe097          	auipc	ra,0xffffe
    8020eabe:	d86080e7          	jalr	-634(ra) # 8020c840 <argstr>
    return -1;
    8020eac2:	57fd                	li	a5,-1
  if(argstr(1,pathname,FAT32_MAX_PATH+1)<0){
    8020eac4:	02054f63          	bltz	a0,8020eb02 <sys_readlinkat+0x94>
  }
  if(argfd(0,&dirfd,&df)<0){
    8020eac8:	fd040613          	addi	a2,s0,-48
    8020eacc:	fdc40593          	addi	a1,s0,-36
    8020ead0:	4501                	li	a0,0
    8020ead2:	ffffe097          	auipc	ra,0xffffe
    8020ead6:	d9e080e7          	jalr	-610(ra) # 8020c870 <argfd>
    8020eada:	02054a63          	bltz	a0,8020eb0e <sys_readlinkat+0xa0>
    if(dirfd!=AT_FDCWD&&pathname[0]!='/'){
      return -1;
    }
    dp = p->cwd;
  }else{
    dp = df->ep;
    8020eade:	fd043783          	ld	a5,-48(s0)
    8020eae2:	6f88                	ld	a0,24(a5)
  }

  //if(dirfd>=0)print_f_info(df);
  //printf("[readlinkat] pathname:%s\n",pathname);
  //printf("[readlinkat] buf:%p bufsz:%p\n",buf,bufsz);
  struct dirent* ep = ename(dp, pathname, &devno);
    8020eae4:	eb840613          	addi	a2,s0,-328
    8020eae8:	ec840593          	addi	a1,s0,-312
    8020eaec:	ffff6097          	auipc	ra,0xffff6
    8020eaf0:	8c8080e7          	jalr	-1848(ra) # 802043b4 <ename>

  if(ep == selfexe){
    8020eaf4:	0085d717          	auipc	a4,0x85d
    8020eaf8:	3a473703          	ld	a4,932(a4) # 80a6be98 <selfexe>
      return -1;
    }
    return 0;
  }
  //__debug_info("[sys_readlinkat] pathname not matched\n");
  return -1;
    8020eafc:	57fd                	li	a5,-1
  if(ep == selfexe){
    8020eafe:	02a70763          	beq	a4,a0,8020eb2c <sys_readlinkat+0xbe>
}
    8020eb02:	853e                	mv	a0,a5
    8020eb04:	60b6                	ld	ra,328(sp)
    8020eb06:	6416                	ld	s0,320(sp)
    8020eb08:	74f2                	ld	s1,312(sp)
    8020eb0a:	6171                	addi	sp,sp,336
    8020eb0c:	8082                	ret
    if(dirfd!=AT_FDCWD&&pathname[0]!='/'){
    8020eb0e:	fdc42703          	lw	a4,-36(s0)
    8020eb12:	f9c00793          	li	a5,-100
    8020eb16:	00f70963          	beq	a4,a5,8020eb28 <sys_readlinkat+0xba>
    8020eb1a:	ec844683          	lbu	a3,-312(s0)
    8020eb1e:	02f00713          	li	a4,47
      return -1;
    8020eb22:	57fd                	li	a5,-1
    if(dirfd!=AT_FDCWD&&pathname[0]!='/'){
    8020eb24:	fce69fe3          	bne	a3,a4,8020eb02 <sys_readlinkat+0x94>
    dp = p->cwd;
    8020eb28:	7ce8                	ld	a0,248(s1)
    8020eb2a:	bf6d                	j	8020eae4 <sys_readlinkat+0x76>
    if(either_copyout(1,buf,myproc()->name,bufsz)<0){
    8020eb2c:	ec043483          	ld	s1,-320(s0)
    8020eb30:	ffffd097          	auipc	ra,0xffffd
    8020eb34:	91c080e7          	jalr	-1764(ra) # 8020b44c <myproc>
    8020eb38:	ebc42683          	lw	a3,-324(s0)
    8020eb3c:	10050613          	addi	a2,a0,256
    8020eb40:	85a6                	mv	a1,s1
    8020eb42:	4505                	li	a0,1
    8020eb44:	ffffc097          	auipc	ra,0xffffc
    8020eb48:	322080e7          	jalr	802(ra) # 8020ae66 <either_copyout>
    return 0;
    8020eb4c:	4781                	li	a5,0
    if(either_copyout(1,buf,myproc()->name,bufsz)<0){
    8020eb4e:	fa055ae3          	bgez	a0,8020eb02 <sys_readlinkat+0x94>
      __debug_info("[sys_readlinkat] copyout error\n");
    8020eb52:	00005517          	auipc	a0,0x5
    8020eb56:	29650513          	addi	a0,a0,662 # 80213de8 <UNAME_VERSION+0x250>
    8020eb5a:	ffffa097          	auipc	ra,0xffffa
    8020eb5e:	d9c080e7          	jalr	-612(ra) # 802088f6 <__debug_info>
      return -1;
    8020eb62:	57fd                	li	a5,-1
    8020eb64:	bf79                	j	8020eb02 <sys_readlinkat+0x94>

000000008020eb66 <sys_fsync>:


uint64
sys_fsync(void)
{
    8020eb66:	1141                	addi	sp,sp,-16
    8020eb68:	e422                	sd	s0,8(sp)
    8020eb6a:	0800                	addi	s0,sp,16
  return 0;
}
    8020eb6c:	4501                	li	a0,0
    8020eb6e:	6422                	ld	s0,8(sp)
    8020eb70:	0141                	addi	sp,sp,16
    8020eb72:	8082                	ret

000000008020eb74 <sys_sendfile>:

uint64 
sys_sendfile(void)
{
    8020eb74:	7139                	addi	sp,sp,-64
    8020eb76:	fc06                	sd	ra,56(sp)
    8020eb78:	f822                	sd	s0,48(sp)
    8020eb7a:	0080                	addi	s0,sp,64
  int in_fd;
  struct file *fout;
  struct file *fin;
  uint64 offset;
  uint64 count;
  if(argfd(0, &out_fd, &fout) < 0)
    8020eb7c:	fe040613          	addi	a2,s0,-32
    8020eb80:	fec40593          	addi	a1,s0,-20
    8020eb84:	4501                	li	a0,0
    8020eb86:	ffffe097          	auipc	ra,0xffffe
    8020eb8a:	cea080e7          	jalr	-790(ra) # 8020c870 <argfd>
  {
    return -1;
    8020eb8e:	57fd                	li	a5,-1
  if(argfd(0, &out_fd, &fout) < 0)
    8020eb90:	04054f63          	bltz	a0,8020ebee <sys_sendfile+0x7a>
  }
  if(argfd(1, &in_fd, &fin) < 0)
    8020eb94:	fd840613          	addi	a2,s0,-40
    8020eb98:	fe840593          	addi	a1,s0,-24
    8020eb9c:	4505                	li	a0,1
    8020eb9e:	ffffe097          	auipc	ra,0xffffe
    8020eba2:	cd2080e7          	jalr	-814(ra) # 8020c870 <argfd>
  {
    return -1;
    8020eba6:	57fd                	li	a5,-1
  if(argfd(1, &in_fd, &fin) < 0)
    8020eba8:	04054363          	bltz	a0,8020ebee <sys_sendfile+0x7a>
  }
  if(argaddr(2, &offset) < 0)
    8020ebac:	fd040593          	addi	a1,s0,-48
    8020ebb0:	4509                	li	a0,2
    8020ebb2:	ffffe097          	auipc	ra,0xffffe
    8020ebb6:	c6c080e7          	jalr	-916(ra) # 8020c81e <argaddr>
  {
    return -1;
    8020ebba:	57fd                	li	a5,-1
  if(argaddr(2, &offset) < 0)
    8020ebbc:	02054963          	bltz	a0,8020ebee <sys_sendfile+0x7a>
  }
  if(argaddr(3, &count) < 0)
    8020ebc0:	fc840593          	addi	a1,s0,-56
    8020ebc4:	450d                	li	a0,3
    8020ebc6:	ffffe097          	auipc	ra,0xffffe
    8020ebca:	c58080e7          	jalr	-936(ra) # 8020c81e <argaddr>
  {
    return -1;
    8020ebce:	57fd                	li	a5,-1
  if(argaddr(3, &count) < 0)
    8020ebd0:	00054f63          	bltz	a0,8020ebee <sys_sendfile+0x7a>
  }
  //__debug_info("out_fd: %d, in_fd: %d, offset: %p, count: %p\n", out_fd, in_fd, offset, count);
  
  return filesend(fin,fout,offset,count);
    8020ebd4:	fc843683          	ld	a3,-56(s0)
    8020ebd8:	fd043603          	ld	a2,-48(s0)
    8020ebdc:	fe043583          	ld	a1,-32(s0)
    8020ebe0:	fd843503          	ld	a0,-40(s0)
    8020ebe4:	ffff7097          	auipc	ra,0xffff7
    8020ebe8:	de6080e7          	jalr	-538(ra) # 802059ca <filesend>
    8020ebec:	87aa                	mv	a5,a0
}
    8020ebee:	853e                	mv	a0,a5
    8020ebf0:	70e2                	ld	ra,56(sp)
    8020ebf2:	7442                	ld	s0,48(sp)
    8020ebf4:	6121                	addi	sp,sp,64
    8020ebf6:	8082                	ret

000000008020ebf8 <sys_clock_gettime>:
#include "include/file.h"
#include "include/errno.h"
#include "include/timer.h"

uint64
sys_clock_gettime(void){
    8020ebf8:	7179                	addi	sp,sp,-48
    8020ebfa:	f406                	sd	ra,40(sp)
    8020ebfc:	f022                	sd	s0,32(sp)
    8020ebfe:	1800                	addi	s0,sp,48
	clockid_t tid;
	uint64 addr;

	if(argaddr(0, &tid) < 0 || argaddr(1, &addr) < 0)
    8020ec00:	fe840593          	addi	a1,s0,-24
    8020ec04:	4501                	li	a0,0
    8020ec06:	ffffe097          	auipc	ra,0xffffe
    8020ec0a:	c18080e7          	jalr	-1000(ra) # 8020c81e <argaddr>
    8020ec0e:	87aa                	mv	a5,a0
	{
		return -1;
    8020ec10:	557d                	li	a0,-1
	if(argaddr(0, &tid) < 0 || argaddr(1, &addr) < 0)
    8020ec12:	0607c963          	bltz	a5,8020ec84 <sys_clock_gettime+0x8c>
    8020ec16:	fe040593          	addi	a1,s0,-32
    8020ec1a:	4505                	li	a0,1
    8020ec1c:	ffffe097          	auipc	ra,0xffffe
    8020ec20:	c02080e7          	jalr	-1022(ra) # 8020c81e <argaddr>
    8020ec24:	08054b63          	bltz	a0,8020ecba <sys_clock_gettime+0xc2>
  asm volatile("rdtime %0" : "=r" (x) );
    8020ec28:	c01027f3          	rdtime	a5
	}

	uint64 tmp_ticks = r_time();
	struct timespec tsp;

	switch (tid)
    8020ec2c:	fe843703          	ld	a4,-24(s0)
    8020ec30:	cf09                	beqz	a4,8020ec4a <sys_clock_gettime+0x52>
    8020ec32:	4785                	li	a5,1
    8020ec34:	04f70c63          	beq	a4,a5,8020ec8c <sys_clock_gettime+0x94>
	case CLOCK_MONOTONIC:
		convert_to_timespec(get_ticks(), &tsp);
		break;
	
	default:
		__debug_warn("[clock gettime]no such support\n");
    8020ec38:	00005517          	auipc	a0,0x5
    8020ec3c:	1e850513          	addi	a0,a0,488 # 80213e20 <UNAME_VERSION+0x288>
    8020ec40:	ffffa097          	auipc	ra,0xffffa
    8020ec44:	e7c080e7          	jalr	-388(ra) # 80208abc <__debug_warn>
		break;
    8020ec48:	a01d                	j	8020ec6e <sys_clock_gettime+0x76>
	ts->tv_sec = time / TICK_FREQ;
    8020ec4a:	000f4737          	lui	a4,0xf4
    8020ec4e:	24070713          	addi	a4,a4,576 # f4240 <_entry-0x8010bdc0>
    8020ec52:	02e7d6b3          	divu	a3,a5,a4
    8020ec56:	fcd43823          	sd	a3,-48(s0)
	ts->tv_nsec = (time % TICK_FREQ)
    8020ec5a:	02e7f7b3          	remu	a5,a5,a4
				* 1000 * 1000 / (TICK_FREQ / 1000);
    8020ec5e:	02e787b3          	mul	a5,a5,a4
    8020ec62:	3e800713          	li	a4,1000
    8020ec66:	02e7d7b3          	divu	a5,a5,a4
	ts->tv_nsec = (time % TICK_FREQ)
    8020ec6a:	fcf43c23          	sd	a5,-40(s0)
	}
	//printf("[clock gettime] tsp sec:%p nsec:%p\n",tsp.tv_sec,tsp.tv_sec);
	if(either_copyout(1,addr,(char*)&tsp,sizeof(struct timespec))<0){
    8020ec6e:	46c1                	li	a3,16
    8020ec70:	fd040613          	addi	a2,s0,-48
    8020ec74:	fe043583          	ld	a1,-32(s0)
    8020ec78:	4505                	li	a0,1
    8020ec7a:	ffffc097          	auipc	ra,0xffffc
    8020ec7e:	1ec080e7          	jalr	492(ra) # 8020ae66 <either_copyout>
    8020ec82:	957d                	srai	a0,a0,0x3f
	  return -1;
	}
	//__debug_info("[sys_clock_gettime] return 0\n");
	return 0;

}
    8020ec84:	70a2                	ld	ra,40(sp)
    8020ec86:	7402                	ld	s0,32(sp)
    8020ec88:	6145                	addi	sp,sp,48
    8020ec8a:	8082                	ret
		convert_to_timespec(get_ticks(), &tsp);
    8020ec8c:	ffffb097          	auipc	ra,0xffffb
    8020ec90:	4f2080e7          	jalr	1266(ra) # 8020a17e <get_ticks>
	ts->tv_sec = time / TICK_FREQ;
    8020ec94:	000f47b7          	lui	a5,0xf4
    8020ec98:	24078793          	addi	a5,a5,576 # f4240 <_entry-0x8010bdc0>
    8020ec9c:	02f55733          	divu	a4,a0,a5
    8020eca0:	fce43823          	sd	a4,-48(s0)
	ts->tv_nsec = (time % TICK_FREQ)
    8020eca4:	02f57533          	remu	a0,a0,a5
				* 1000 * 1000 / (TICK_FREQ / 1000);
    8020eca8:	02f50533          	mul	a0,a0,a5
    8020ecac:	3e800793          	li	a5,1000
    8020ecb0:	02f55533          	divu	a0,a0,a5
	ts->tv_nsec = (time % TICK_FREQ)
    8020ecb4:	fca43c23          	sd	a0,-40(s0)
}
    8020ecb8:	bf5d                	j	8020ec6e <sys_clock_gettime+0x76>
		return -1;
    8020ecba:	557d                	li	a0,-1
    8020ecbc:	b7e1                	j	8020ec84 <sys_clock_gettime+0x8c>

000000008020ecbe <sys_utimensat>:

uint64 sys_utimensat(void){
    8020ecbe:	7109                	addi	sp,sp,-384
    8020ecc0:	fe86                	sd	ra,376(sp)
    8020ecc2:	faa2                	sd	s0,368(sp)
    8020ecc4:	f6a6                	sd	s1,360(sp)
    8020ecc6:	f2ca                	sd	s2,352(sp)
    8020ecc8:	0300                	addi	s0,sp,384
	uint64 pathaddr;
	char pathname[FAT32_MAX_FILENAME];
	uint64 buf;
	int flags;
	struct timespec ts[2];
	struct proc* p = myproc();
    8020ecca:	ffffc097          	auipc	ra,0xffffc
    8020ecce:	782080e7          	jalr	1922(ra) # 8020b44c <myproc>
    8020ecd2:	892a                	mv	s2,a0
	struct file *f;
	struct file *fp = NULL;
    8020ecd4:	e8043823          	sd	zero,-368(s0)
	struct dirent *ep, *dp;
	int devno = -1;
    8020ecd8:	57fd                	li	a5,-1
    8020ecda:	e8f42623          	sw	a5,-372(s0)
	if(argfd(0,&fd,&fp)<0 && fd!=AT_FDCWD && fd!=-1){
    8020ecde:	e9040613          	addi	a2,s0,-368
    8020ece2:	fdc40593          	addi	a1,s0,-36
    8020ece6:	4501                	li	a0,0
    8020ece8:	ffffe097          	auipc	ra,0xffffe
    8020ecec:	b88080e7          	jalr	-1144(ra) # 8020c870 <argfd>
    8020ecf0:	00055c63          	bgez	a0,8020ed08 <sys_utimensat+0x4a>
    8020ecf4:	fdc42783          	lw	a5,-36(s0)
    8020ecf8:	f9c00713          	li	a4,-100
    8020ecfc:	00e78663          	beq	a5,a4,8020ed08 <sys_utimensat+0x4a>
    8020ed00:	577d                	li	a4,-1
	  return -1;
    8020ed02:	54fd                	li	s1,-1
	if(argfd(0,&fd,&fp)<0 && fd!=AT_FDCWD && fd!=-1){
    8020ed04:	16e79863          	bne	a5,a4,8020ee74 <sys_utimensat+0x1b6>
	}
	if(argaddr(1,&pathaddr)==0){
    8020ed08:	fd040593          	addi	a1,s0,-48
    8020ed0c:	4505                	li	a0,1
    8020ed0e:	ffffe097          	auipc	ra,0xffffe
    8020ed12:	b10080e7          	jalr	-1264(ra) # 8020c81e <argaddr>
	  if(pathaddr&&argstr(1,pathname,FAT32_MAX_FILENAME+1)<0){
	    return -1;
	  }
	}else{
	  return -1;
    8020ed16:	54fd                	li	s1,-1
	if(argaddr(1,&pathaddr)==0){
    8020ed18:	14051e63          	bnez	a0,8020ee74 <sys_utimensat+0x1b6>
	  if(pathaddr&&argstr(1,pathname,FAT32_MAX_FILENAME+1)<0){
    8020ed1c:	fd043783          	ld	a5,-48(s0)
    8020ed20:	cf81                	beqz	a5,8020ed38 <sys_utimensat+0x7a>
    8020ed22:	10000613          	li	a2,256
    8020ed26:	ed040593          	addi	a1,s0,-304
    8020ed2a:	4505                	li	a0,1
    8020ed2c:	ffffe097          	auipc	ra,0xffffe
    8020ed30:	b14080e7          	jalr	-1260(ra) # 8020c840 <argstr>
    8020ed34:	14054763          	bltz	a0,8020ee82 <sys_utimensat+0x1c4>
	}
	if(argaddr(2,&buf)<0){
    8020ed38:	ec840593          	addi	a1,s0,-312
    8020ed3c:	4509                	li	a0,2
    8020ed3e:	ffffe097          	auipc	ra,0xffffe
    8020ed42:	ae0080e7          	jalr	-1312(ra) # 8020c81e <argaddr>
	  return -1;
    8020ed46:	54fd                	li	s1,-1
	if(argaddr(2,&buf)<0){
    8020ed48:	12054663          	bltz	a0,8020ee74 <sys_utimensat+0x1b6>
	}
	if(argint(3,&flags)<0){
    8020ed4c:	ec440593          	addi	a1,s0,-316
    8020ed50:	450d                	li	a0,3
    8020ed52:	ffffe097          	auipc	ra,0xffffe
    8020ed56:	aaa080e7          	jalr	-1366(ra) # 8020c7fc <argint>
    8020ed5a:	12054663          	bltz	a0,8020ee86 <sys_utimensat+0x1c8>
	  return -1;
	}


	if(buf != NULL){
    8020ed5e:	ec843603          	ld	a2,-312(s0)
    8020ed62:	ea55                	bnez	a2,8020ee16 <sys_utimensat+0x158>
	    return -1;
	  }
	}
	else
	{
		ts[0].tv_sec = TICK_TO_US(p->proc_tms.utime);
    8020ed64:	12093783          	ld	a5,288(s2)
    8020ed68:	eaf43023          	sd	a5,-352(s0)
		ts[0].tv_nsec = TICK_TO_US(p->proc_tms.utime);
    8020ed6c:	eaf43423          	sd	a5,-344(s0)
		ts[1].tv_sec = TICK_TO_US(p->proc_tms.utime);
    8020ed70:	eaf43823          	sd	a5,-336(s0)
		ts[1].tv_nsec = TICK_TO_US(p->proc_tms.utime);
    8020ed74:	eaf43c23          	sd	a5,-328(s0)
	}

	if(pathname[0] == '/')
    8020ed78:	ed044703          	lbu	a4,-304(s0)
    8020ed7c:	02f00793          	li	a5,47
    8020ed80:	0cf70363          	beq	a4,a5,8020ee46 <sys_utimensat+0x188>
	{
		dp = NULL;
	}
	else if(fd == AT_FDCWD)
    8020ed84:	fdc42703          	lw	a4,-36(s0)
    8020ed88:	f9c00793          	li	a5,-100
    8020ed8c:	0af70f63          	beq	a4,a5,8020ee4a <sys_utimensat+0x18c>
	{
		dp = NULL;
	}
	else
	{
		if(fp == NULL)
    8020ed90:	e9043783          	ld	a5,-368(s0)
    8020ed94:	cfd9                	beqz	a5,8020ee32 <sys_utimensat+0x174>
		{
			__debug_warn("[sys_utimensat] DIRFD error\n");
			return -EMFILE;
		}
		dp = fp->ep;
    8020ed96:	6f88                	ld	a0,24(a5)
	}

	ep = ename(dp, pathname, &devno);
    8020ed98:	e8c40613          	addi	a2,s0,-372
    8020ed9c:	ed040593          	addi	a1,s0,-304
    8020eda0:	ffff5097          	auipc	ra,0xffff5
    8020eda4:	614080e7          	jalr	1556(ra) # 802043b4 <ename>
	if(ep == NULL)
    8020eda8:	c16d                	beqz	a0,8020ee8a <sys_utimensat+0x1cc>
		// __debug_warn("[sys_utimensat] file not found\n");
		return -ENOENT;
	}


	if(pathaddr){
    8020edaa:	fd043483          	ld	s1,-48(s0)
    8020edae:	e0c5                	bnez	s1,8020ee4e <sys_utimensat+0x190>
		f->t0_sec = ts[0].tv_sec;
		f->t0_nsec = ts[0].tv_nsec;
		f->t1_sec = ts[1].tv_sec;
		f->t1_nsec = ts[1].tv_nsec;
	}
	else if(fd >= 0 && ts[0].tv_sec != 1){
    8020edb0:	fdc42783          	lw	a5,-36(s0)
    8020edb4:	0c07c063          	bltz	a5,8020ee74 <sys_utimensat+0x1b6>
    8020edb8:	ea043703          	ld	a4,-352(s0)
    8020edbc:	4785                	li	a5,1
    8020edbe:	0af70b63          	beq	a4,a5,8020ee74 <sys_utimensat+0x1b6>
		if(argfd(0,&fd,&f)<0) return -1;
    8020edc2:	e9840613          	addi	a2,s0,-360
    8020edc6:	fdc40593          	addi	a1,s0,-36
    8020edca:	4501                	li	a0,0
    8020edcc:	ffffe097          	auipc	ra,0xffffe
    8020edd0:	aa4080e7          	jalr	-1372(ra) # 8020c870 <argfd>
    8020edd4:	0a054d63          	bltz	a0,8020ee8e <sys_utimensat+0x1d0>
		if(ts[0].tv_sec > f->t0_sec || ts[0].tv_sec == 0) f->t0_sec = ts[0].tv_sec;
    8020edd8:	ea043703          	ld	a4,-352(s0)
    8020eddc:	e9843783          	ld	a5,-360(s0)
    8020ede0:	6bb4                	ld	a3,80(a5)
    8020ede2:	00e6e363          	bltu	a3,a4,8020ede8 <sys_utimensat+0x12a>
    8020ede6:	e311                	bnez	a4,8020edea <sys_utimensat+0x12c>
    8020ede8:	ebb8                	sd	a4,80(a5)
		if(ts[0].tv_nsec > f->t0_nsec || ts[0].tv_nsec == 0) f->t0_nsec = ts[0].tv_nsec;
    8020edea:	ea843703          	ld	a4,-344(s0)
    8020edee:	6fb4                	ld	a3,88(a5)
    8020edf0:	00e6e363          	bltu	a3,a4,8020edf6 <sys_utimensat+0x138>
    8020edf4:	e311                	bnez	a4,8020edf8 <sys_utimensat+0x13a>
    8020edf6:	efb8                	sd	a4,88(a5)
		if(ts[1].tv_sec > f->t1_sec || ts[1].tv_sec == 0) f->t1_sec = ts[1].tv_sec;
    8020edf8:	eb043703          	ld	a4,-336(s0)
    8020edfc:	73b4                	ld	a3,96(a5)
    8020edfe:	00e6e363          	bltu	a3,a4,8020ee04 <sys_utimensat+0x146>
    8020ee02:	e311                	bnez	a4,8020ee06 <sys_utimensat+0x148>
    8020ee04:	f3b8                	sd	a4,96(a5)
		if(ts[1].tv_nsec > f->t1_nsec || ts[1].tv_nsec == 0) f->t1_nsec = ts[1].tv_nsec;
    8020ee06:	eb843703          	ld	a4,-328(s0)
    8020ee0a:	77b4                	ld	a3,104(a5)
    8020ee0c:	00e6e363          	bltu	a3,a4,8020ee12 <sys_utimensat+0x154>
    8020ee10:	e335                	bnez	a4,8020ee74 <sys_utimensat+0x1b6>
    8020ee12:	f7b8                	sd	a4,104(a5)
    8020ee14:	a085                	j	8020ee74 <sys_utimensat+0x1b6>
	  if(copyin(p->pagetable,(char*)ts,buf,2*sizeof(struct timespec))<0){
    8020ee16:	02000693          	li	a3,32
    8020ee1a:	ea040593          	addi	a1,s0,-352
    8020ee1e:	06093503          	ld	a0,96(s2)
    8020ee22:	ffffc097          	auipc	ra,0xffffc
    8020ee26:	da8080e7          	jalr	-600(ra) # 8020abca <copyin>
    8020ee2a:	f40557e3          	bgez	a0,8020ed78 <sys_utimensat+0xba>
	    return -1;
    8020ee2e:	54fd                	li	s1,-1
    8020ee30:	a091                	j	8020ee74 <sys_utimensat+0x1b6>
			__debug_warn("[sys_utimensat] DIRFD error\n");
    8020ee32:	00005517          	auipc	a0,0x5
    8020ee36:	00e50513          	addi	a0,a0,14 # 80213e40 <UNAME_VERSION+0x2a8>
    8020ee3a:	ffffa097          	auipc	ra,0xffffa
    8020ee3e:	c82080e7          	jalr	-894(ra) # 80208abc <__debug_warn>
			return -EMFILE;
    8020ee42:	54a1                	li	s1,-24
    8020ee44:	a805                	j	8020ee74 <sys_utimensat+0x1b6>
		dp = NULL;
    8020ee46:	4501                	li	a0,0
    8020ee48:	bf81                	j	8020ed98 <sys_utimensat+0xda>
		dp = NULL;
    8020ee4a:	4501                	li	a0,0
    8020ee4c:	b7b1                	j	8020ed98 <sys_utimensat+0xda>
		f = findfile(pathname);
    8020ee4e:	ed040513          	addi	a0,s0,-304
    8020ee52:	ffff7097          	auipc	ra,0xffff7
    8020ee56:	df8080e7          	jalr	-520(ra) # 80205c4a <findfile>
		f->t0_sec = ts[0].tv_sec;
    8020ee5a:	ea043783          	ld	a5,-352(s0)
    8020ee5e:	e93c                	sd	a5,80(a0)
		f->t0_nsec = ts[0].tv_nsec;
    8020ee60:	ea843783          	ld	a5,-344(s0)
    8020ee64:	ed3c                	sd	a5,88(a0)
		f->t1_sec = ts[1].tv_sec;
    8020ee66:	eb043783          	ld	a5,-336(s0)
    8020ee6a:	f13c                	sd	a5,96(a0)
		f->t1_nsec = ts[1].tv_nsec;
    8020ee6c:	eb843783          	ld	a5,-328(s0)
    8020ee70:	f53c                	sd	a5,104(a0)
	// printf("[sys utimesat]fd:%d\tpathname:%s\n",fd,pathaddr?pathname:"(nil)");
	// printf("[sys utimesat]buf:%p\n",buf);
	// printf("[sys utimesat]timespec[0] tv_sec:%p\ttv_nsec:%p\n",ts[0].tv_sec,ts[0].tv_nsec);
	// printf("[sys utimesat]timespec[1] tv_sec:%p\ttv_nsec:%p\n",ts[1].tv_sec,ts[1].tv_nsec);
	// printf("[sys utimesat]flags:%p\n",flags);
	return 0;
    8020ee72:	4481                	li	s1,0
}
    8020ee74:	8526                	mv	a0,s1
    8020ee76:	70f6                	ld	ra,376(sp)
    8020ee78:	7456                	ld	s0,368(sp)
    8020ee7a:	74b6                	ld	s1,360(sp)
    8020ee7c:	7916                	ld	s2,352(sp)
    8020ee7e:	6119                	addi	sp,sp,384
    8020ee80:	8082                	ret
	    return -1;
    8020ee82:	54fd                	li	s1,-1
    8020ee84:	bfc5                	j	8020ee74 <sys_utimensat+0x1b6>
	  return -1;
    8020ee86:	54fd                	li	s1,-1
    8020ee88:	b7f5                	j	8020ee74 <sys_utimensat+0x1b6>
		return -ENOENT;
    8020ee8a:	54f9                	li	s1,-2
    8020ee8c:	b7e5                	j	8020ee74 <sys_utimensat+0x1b6>
		if(argfd(0,&fd,&f)<0) return -1;
    8020ee8e:	54fd                	li	s1,-1
    8020ee90:	b7d5                	j	8020ee74 <sys_utimensat+0x1b6>

000000008020ee92 <sys_setitimer>:

uint64 sys_setitimer(void)
{
    8020ee92:	715d                	addi	sp,sp,-80
    8020ee94:	e486                	sd	ra,72(sp)
    8020ee96:	e0a2                	sd	s0,64(sp)
    8020ee98:	0880                	addi	s0,sp,80
	int which;
	uint64 newptr;
	uint64 oldptr;
	struct itimerval newval;

	argint(0, &which);
    8020ee9a:	fec40593          	addi	a1,s0,-20
    8020ee9e:	4501                	li	a0,0
    8020eea0:	ffffe097          	auipc	ra,0xffffe
    8020eea4:	95c080e7          	jalr	-1700(ra) # 8020c7fc <argint>
	argaddr(1, &newptr);
    8020eea8:	fe040593          	addi	a1,s0,-32
    8020eeac:	4505                	li	a0,1
    8020eeae:	ffffe097          	auipc	ra,0xffffe
    8020eeb2:	970080e7          	jalr	-1680(ra) # 8020c81e <argaddr>
	argaddr(2, &oldptr);
    8020eeb6:	fd840593          	addi	a1,s0,-40
    8020eeba:	4509                	li	a0,2
    8020eebc:	ffffe097          	auipc	ra,0xffffe
    8020eec0:	962080e7          	jalr	-1694(ra) # 8020c81e <argaddr>

	if (which != CLOCK_REALTIME)
    8020eec4:	fec42783          	lw	a5,-20(s0)
		return -EINVAL;
    8020eec8:	5529                	li	a0,-22
	if (which != CLOCK_REALTIME)
    8020eeca:	e385                	bnez	a5,8020eeea <sys_setitimer+0x58>

	if (either_copyin(1, (char*)&newval, newptr, sizeof(struct itimerval)) < 0)
    8020eecc:	02000693          	li	a3,32
    8020eed0:	fe043603          	ld	a2,-32(s0)
    8020eed4:	fb840593          	addi	a1,s0,-72
    8020eed8:	4505                	li	a0,1
    8020eeda:	ffffc097          	auipc	ra,0xffffc
    8020eede:	fe2080e7          	jalr	-30(ra) # 8020aebc <either_copyin>
    8020eee2:	87aa                	mv	a5,a0
/*
	__debug_info("sys_setitimer", "new={%ds|%dus, %ds|%dus}\n",
				newval.it_interval.sec, newval.it_interval.usec, newval.it_value.sec, newval.it_value.usec);
*/
	//__debug_info("[sys_setitimer] return 0\n");
	return 0;
    8020eee4:	4501                	li	a0,0
	if (either_copyin(1, (char*)&newval, newptr, sizeof(struct itimerval)) < 0)
    8020eee6:	0007c663          	bltz	a5,8020eef2 <sys_setitimer+0x60>
}
    8020eeea:	60a6                	ld	ra,72(sp)
    8020eeec:	6406                	ld	s0,64(sp)
    8020eeee:	6161                	addi	sp,sp,80
    8020eef0:	8082                	ret
		return -EFAULT;	
    8020eef2:	5549                	li	a0,-14
    8020eef4:	bfdd                	j	8020eeea <sys_setitimer+0x58>

000000008020eef6 <sys_execve>:
#include"include/copy.h"
#include"include/rusage.h"

uint64
sys_execve()
{
    8020eef6:	cc010113          	addi	sp,sp,-832
    8020eefa:	32113c23          	sd	ra,824(sp)
    8020eefe:	32813823          	sd	s0,816(sp)
    8020ef02:	32913423          	sd	s1,808(sp)
    8020ef06:	33213023          	sd	s2,800(sp)
    8020ef0a:	31313c23          	sd	s3,792(sp)
    8020ef0e:	0680                	addi	s0,sp,832
  char path[FAT32_MAX_PATH], *argv[MAXARG] ,*env[MAXARG];
  int argvlen , envlen;
  if(argstr(0, path, FAT32_MAX_PATH) < 0){
    8020ef10:	10400613          	li	a2,260
    8020ef14:	ec840593          	addi	a1,s0,-312
    8020ef18:	4501                	li	a0,0
    8020ef1a:	ffffe097          	auipc	ra,0xffffe
    8020ef1e:	926080e7          	jalr	-1754(ra) # 8020c840 <argstr>
    8020ef22:	08054163          	bltz	a0,8020efa4 <sys_execve+0xae>
    __debug_warn("[sys execve] invalid path\n");
    return -1;
  }
  if((argvlen = argstrvec(1,argv, MAXARG)) < 0){
    8020ef26:	02000613          	li	a2,32
    8020ef2a:	dc840593          	addi	a1,s0,-568
    8020ef2e:	4505                	li	a0,1
    8020ef30:	ffffe097          	auipc	ra,0xffffe
    8020ef34:	ab2080e7          	jalr	-1358(ra) # 8020c9e2 <argstrvec>
    8020ef38:	892a                	mv	s2,a0
    8020ef3a:	06054f63          	bltz	a0,8020efb8 <sys_execve+0xc2>
    __debug_warn("[sys execve] invalid argv\n");
    return -1;
  }
  if((envlen = argstrvec(2,env,MAXARG)) <0){
    8020ef3e:	02000613          	li	a2,32
    8020ef42:	cc840593          	addi	a1,s0,-824
    8020ef46:	4509                	li	a0,2
    8020ef48:	ffffe097          	auipc	ra,0xffffe
    8020ef4c:	a9a080e7          	jalr	-1382(ra) # 8020c9e2 <argstrvec>
    8020ef50:	89aa                	mv	s3,a0
    8020ef52:	06054d63          	bltz	a0,8020efcc <sys_execve+0xd6>
    env[0] = 0;
  }

 int ret = exec(path, argv, env);
    8020ef56:	cc840613          	addi	a2,s0,-824
    8020ef5a:	dc840593          	addi	a1,s0,-568
    8020ef5e:	ec840513          	addi	a0,s0,-312
    8020ef62:	ffffe097          	auipc	ra,0xffffe
    8020ef66:	db4080e7          	jalr	-588(ra) # 8020cd16 <exec>
    8020ef6a:	84aa                	mv	s1,a0

 freevec(argv,argvlen);
    8020ef6c:	85ca                	mv	a1,s2
    8020ef6e:	dc840513          	addi	a0,s0,-568
    8020ef72:	ffffe097          	auipc	ra,0xffffe
    8020ef76:	a2a080e7          	jalr	-1494(ra) # 8020c99c <freevec>
 freevec(env,envlen);
    8020ef7a:	85ce                	mv	a1,s3
    8020ef7c:	cc840513          	addi	a0,s0,-824
    8020ef80:	ffffe097          	auipc	ra,0xffffe
    8020ef84:	a1c080e7          	jalr	-1508(ra) # 8020c99c <freevec>

 return ret;
    8020ef88:	8526                	mv	a0,s1
}
    8020ef8a:	33813083          	ld	ra,824(sp)
    8020ef8e:	33013403          	ld	s0,816(sp)
    8020ef92:	32813483          	ld	s1,808(sp)
    8020ef96:	32013903          	ld	s2,800(sp)
    8020ef9a:	31813983          	ld	s3,792(sp)
    8020ef9e:	34010113          	addi	sp,sp,832
    8020efa2:	8082                	ret
    __debug_warn("[sys execve] invalid path\n");
    8020efa4:	00005517          	auipc	a0,0x5
    8020efa8:	ebc50513          	addi	a0,a0,-324 # 80213e60 <UNAME_VERSION+0x2c8>
    8020efac:	ffffa097          	auipc	ra,0xffffa
    8020efb0:	b10080e7          	jalr	-1264(ra) # 80208abc <__debug_warn>
    return -1;
    8020efb4:	557d                	li	a0,-1
    8020efb6:	bfd1                	j	8020ef8a <sys_execve+0x94>
    __debug_warn("[sys execve] invalid argv\n");
    8020efb8:	00005517          	auipc	a0,0x5
    8020efbc:	ec850513          	addi	a0,a0,-312 # 80213e80 <UNAME_VERSION+0x2e8>
    8020efc0:	ffffa097          	auipc	ra,0xffffa
    8020efc4:	afc080e7          	jalr	-1284(ra) # 80208abc <__debug_warn>
    return -1;
    8020efc8:	557d                	li	a0,-1
    8020efca:	b7c1                	j	8020ef8a <sys_execve+0x94>
    env[0] = 0;
    8020efcc:	cc043423          	sd	zero,-824(s0)
    8020efd0:	b759                	j	8020ef56 <sys_execve+0x60>

000000008020efd2 <sys_getpid>:

uint64
sys_getpid(void)
{
    8020efd2:	1141                	addi	sp,sp,-16
    8020efd4:	e406                	sd	ra,8(sp)
    8020efd6:	e022                	sd	s0,0(sp)
    8020efd8:	0800                	addi	s0,sp,16
  return myproc()->pid;
    8020efda:	ffffc097          	auipc	ra,0xffffc
    8020efde:	472080e7          	jalr	1138(ra) # 8020b44c <myproc>
}
    8020efe2:	4128                	lw	a0,64(a0)
    8020efe4:	60a2                	ld	ra,8(sp)
    8020efe6:	6402                	ld	s0,0(sp)
    8020efe8:	0141                	addi	sp,sp,16
    8020efea:	8082                	ret

000000008020efec <sys_getppid>:

uint64
sys_getppid(void){
    8020efec:	1141                	addi	sp,sp,-16
    8020efee:	e406                	sd	ra,8(sp)
    8020eff0:	e022                	sd	s0,0(sp)
    8020eff2:	0800                	addi	s0,sp,16
  struct proc* p =myproc();
    8020eff4:	ffffc097          	auipc	ra,0xffffc
    8020eff8:	458080e7          	jalr	1112(ra) # 8020b44c <myproc>
  if(p->parent)return p->parent->pid;
    8020effc:	751c                	ld	a5,40(a0)
  else return 0;
    8020effe:	4501                	li	a0,0
  if(p->parent)return p->parent->pid;
    8020f000:	c391                	beqz	a5,8020f004 <sys_getppid+0x18>
    8020f002:	43a8                	lw	a0,64(a5)
}
    8020f004:	60a2                	ld	ra,8(sp)
    8020f006:	6402                	ld	s0,0(sp)
    8020f008:	0141                	addi	sp,sp,16
    8020f00a:	8082                	ret

000000008020f00c <sys_getuid>:

uint64
sys_getuid(void)
{
    8020f00c:	1141                	addi	sp,sp,-16
    8020f00e:	e406                	sd	ra,8(sp)
    8020f010:	e022                	sd	s0,0(sp)
    8020f012:	0800                	addi	s0,sp,16
  return myproc()->uid;
    8020f014:	ffffc097          	auipc	ra,0xffffc
    8020f018:	438080e7          	jalr	1080(ra) # 8020b44c <myproc>
}
    8020f01c:	4168                	lw	a0,68(a0)
    8020f01e:	60a2                	ld	ra,8(sp)
    8020f020:	6402                	ld	s0,0(sp)
    8020f022:	0141                	addi	sp,sp,16
    8020f024:	8082                	ret

000000008020f026 <sys_geteuid>:

uint64
sys_geteuid(void)
{
    8020f026:	1141                	addi	sp,sp,-16
    8020f028:	e406                	sd	ra,8(sp)
    8020f02a:	e022                	sd	s0,0(sp)
    8020f02c:	0800                	addi	s0,sp,16
  return myproc()->uid;
    8020f02e:	ffffc097          	auipc	ra,0xffffc
    8020f032:	41e080e7          	jalr	1054(ra) # 8020b44c <myproc>
}
    8020f036:	4168                	lw	a0,68(a0)
    8020f038:	60a2                	ld	ra,8(sp)
    8020f03a:	6402                	ld	s0,0(sp)
    8020f03c:	0141                	addi	sp,sp,16
    8020f03e:	8082                	ret

000000008020f040 <sys_getgid>:

uint64
sys_getgid(void)
{
    8020f040:	1141                	addi	sp,sp,-16
    8020f042:	e406                	sd	ra,8(sp)
    8020f044:	e022                	sd	s0,0(sp)
    8020f046:	0800                	addi	s0,sp,16
  return myproc()->gid;
    8020f048:	ffffc097          	auipc	ra,0xffffc
    8020f04c:	404080e7          	jalr	1028(ra) # 8020b44c <myproc>
}
    8020f050:	4528                	lw	a0,72(a0)
    8020f052:	60a2                	ld	ra,8(sp)
    8020f054:	6402                	ld	s0,0(sp)
    8020f056:	0141                	addi	sp,sp,16
    8020f058:	8082                	ret

000000008020f05a <sys_getegid>:

uint64
sys_getegid(void)
{
    8020f05a:	1141                	addi	sp,sp,-16
    8020f05c:	e406                	sd	ra,8(sp)
    8020f05e:	e022                	sd	s0,0(sp)
    8020f060:	0800                	addi	s0,sp,16
  return myproc()->gid;
    8020f062:	ffffc097          	auipc	ra,0xffffc
    8020f066:	3ea080e7          	jalr	1002(ra) # 8020b44c <myproc>
}
    8020f06a:	4528                	lw	a0,72(a0)
    8020f06c:	60a2                	ld	ra,8(sp)
    8020f06e:	6402                	ld	s0,0(sp)
    8020f070:	0141                	addi	sp,sp,16
    8020f072:	8082                	ret

000000008020f074 <sys_setuid>:

uint64 
sys_setuid(void)
{
    8020f074:	1101                	addi	sp,sp,-32
    8020f076:	ec06                	sd	ra,24(sp)
    8020f078:	e822                	sd	s0,16(sp)
    8020f07a:	1000                	addi	s0,sp,32
  int uid;
  if(argint(0, &uid) < 0)
    8020f07c:	fec40593          	addi	a1,s0,-20
    8020f080:	4501                	li	a0,0
    8020f082:	ffffd097          	auipc	ra,0xffffd
    8020f086:	77a080e7          	jalr	1914(ra) # 8020c7fc <argint>
  {
    return -1;
    8020f08a:	57fd                	li	a5,-1
  if(argint(0, &uid) < 0)
    8020f08c:	00054a63          	bltz	a0,8020f0a0 <sys_setuid+0x2c>
  }
  myproc()->uid = uid;
    8020f090:	ffffc097          	auipc	ra,0xffffc
    8020f094:	3bc080e7          	jalr	956(ra) # 8020b44c <myproc>
    8020f098:	fec42783          	lw	a5,-20(s0)
    8020f09c:	c17c                	sw	a5,68(a0)
  return 0;
    8020f09e:	4781                	li	a5,0
}
    8020f0a0:	853e                	mv	a0,a5
    8020f0a2:	60e2                	ld	ra,24(sp)
    8020f0a4:	6442                	ld	s0,16(sp)
    8020f0a6:	6105                	addi	sp,sp,32
    8020f0a8:	8082                	ret

000000008020f0aa <sys_setgid>:

uint64
sys_setgid(void)
{
    8020f0aa:	1101                	addi	sp,sp,-32
    8020f0ac:	ec06                	sd	ra,24(sp)
    8020f0ae:	e822                	sd	s0,16(sp)
    8020f0b0:	1000                	addi	s0,sp,32
  int gid;
  if(argint(0, &gid) < 0)
    8020f0b2:	fec40593          	addi	a1,s0,-20
    8020f0b6:	4501                	li	a0,0
    8020f0b8:	ffffd097          	auipc	ra,0xffffd
    8020f0bc:	744080e7          	jalr	1860(ra) # 8020c7fc <argint>
  {
    return -1;
    8020f0c0:	57fd                	li	a5,-1
  if(argint(0, &gid) < 0)
    8020f0c2:	00054a63          	bltz	a0,8020f0d6 <sys_setgid+0x2c>
  }
  myproc()->gid = gid;
    8020f0c6:	ffffc097          	auipc	ra,0xffffc
    8020f0ca:	386080e7          	jalr	902(ra) # 8020b44c <myproc>
    8020f0ce:	fec42783          	lw	a5,-20(s0)
    8020f0d2:	c53c                	sw	a5,72(a0)
  return 0;
    8020f0d4:	4781                	li	a5,0
}
    8020f0d6:	853e                	mv	a0,a5
    8020f0d8:	60e2                	ld	ra,24(sp)
    8020f0da:	6442                	ld	s0,16(sp)
    8020f0dc:	6105                	addi	sp,sp,32
    8020f0de:	8082                	ret

000000008020f0e0 <sys_uname>:

uint64 
sys_uname(void) {
    8020f0e0:	1101                	addi	sp,sp,-32
    8020f0e2:	ec06                	sd	ra,24(sp)
    8020f0e4:	e822                	sd	s0,16(sp)
    8020f0e6:	1000                	addi	s0,sp,32
	uint64 addr;

	if (argaddr(0, &addr) < 0) {
    8020f0e8:	fe840593          	addi	a1,s0,-24
    8020f0ec:	4501                	li	a0,0
    8020f0ee:	ffffd097          	auipc	ra,0xffffd
    8020f0f2:	730080e7          	jalr	1840(ra) # 8020c81e <argaddr>
    8020f0f6:	87aa                	mv	a5,a0
		return -1;
    8020f0f8:	557d                	li	a0,-1
	if (argaddr(0, &addr) < 0) {
    8020f0fa:	0007c863          	bltz	a5,8020f10a <sys_uname+0x2a>
	}

	return uname_copyout(addr);
    8020f0fe:	fe843503          	ld	a0,-24(s0)
    8020f102:	ffffe097          	auipc	ra,0xffffe
    8020f106:	474080e7          	jalr	1140(ra) # 8020d576 <uname_copyout>
}
    8020f10a:	60e2                	ld	ra,24(sp)
    8020f10c:	6442                	ld	s0,16(sp)
    8020f10e:	6105                	addi	sp,sp,32
    8020f110:	8082                	ret

000000008020f112 <sys_clone>:


uint64
sys_clone(void)
{
    8020f112:	7139                	addi	sp,sp,-64
    8020f114:	fc06                	sd	ra,56(sp)
    8020f116:	f822                	sd	s0,48(sp)
    8020f118:	0080                	addi	s0,sp,64
  uint64 flag, stack, ptid, ctid, tls;
  if (argaddr(0, &flag) < 0) 
    8020f11a:	fe840593          	addi	a1,s0,-24
    8020f11e:	4501                	li	a0,0
    8020f120:	ffffd097          	auipc	ra,0xffffd
    8020f124:	6fe080e7          	jalr	1790(ra) # 8020c81e <argaddr>
  	return -1;
    8020f128:	57fd                	li	a5,-1
  if (argaddr(0, &flag) < 0) 
    8020f12a:	06054963          	bltz	a0,8020f19c <sys_clone+0x8a>
  if (argaddr(1, &stack) < 0) 
    8020f12e:	fe040593          	addi	a1,s0,-32
    8020f132:	4505                	li	a0,1
    8020f134:	ffffd097          	auipc	ra,0xffffd
    8020f138:	6ea080e7          	jalr	1770(ra) # 8020c81e <argaddr>
	return -1;
    8020f13c:	57fd                	li	a5,-1
  if (argaddr(1, &stack) < 0) 
    8020f13e:	04054f63          	bltz	a0,8020f19c <sys_clone+0x8a>
  if(argaddr(2, &ptid) < 0)
    8020f142:	fd840593          	addi	a1,s0,-40
    8020f146:	4509                	li	a0,2
    8020f148:	ffffd097          	auipc	ra,0xffffd
    8020f14c:	6d6080e7          	jalr	1750(ra) # 8020c81e <argaddr>
  	return -1;
    8020f150:	57fd                	li	a5,-1
  if(argaddr(2, &ptid) < 0)
    8020f152:	04054563          	bltz	a0,8020f19c <sys_clone+0x8a>
  if(argaddr(3, &tls) < 0)
    8020f156:	fc840593          	addi	a1,s0,-56
    8020f15a:	450d                	li	a0,3
    8020f15c:	ffffd097          	auipc	ra,0xffffd
    8020f160:	6c2080e7          	jalr	1730(ra) # 8020c81e <argaddr>
    return -1;
    8020f164:	57fd                	li	a5,-1
  if(argaddr(3, &tls) < 0)
    8020f166:	02054b63          	bltz	a0,8020f19c <sys_clone+0x8a>
  if(argaddr(4, &ctid) < 0)
    8020f16a:	fd040593          	addi	a1,s0,-48
    8020f16e:	4511                	li	a0,4
    8020f170:	ffffd097          	auipc	ra,0xffffd
    8020f174:	6ae080e7          	jalr	1710(ra) # 8020c81e <argaddr>
    return -1;
    8020f178:	57fd                	li	a5,-1
  if(argaddr(4, &ctid) < 0)
    8020f17a:	02054163          	bltz	a0,8020f19c <sys_clone+0x8a>
  return clone(flag, stack, ptid, tls, ctid);
    8020f17e:	fd043703          	ld	a4,-48(s0)
    8020f182:	fc843683          	ld	a3,-56(s0)
    8020f186:	fd843603          	ld	a2,-40(s0)
    8020f18a:	fe043583          	ld	a1,-32(s0)
    8020f18e:	fe843503          	ld	a0,-24(s0)
    8020f192:	ffff3097          	auipc	ra,0xffff3
    8020f196:	d10080e7          	jalr	-752(ra) # 80201ea2 <clone>
    8020f19a:	87aa                	mv	a5,a0
}
    8020f19c:	853e                	mv	a0,a5
    8020f19e:	70e2                	ld	ra,56(sp)
    8020f1a0:	7442                	ld	s0,48(sp)
    8020f1a2:	6121                	addi	sp,sp,64
    8020f1a4:	8082                	ret

000000008020f1a6 <sys_wait4>:

uint64
sys_wait4()
{
    8020f1a6:	1101                	addi	sp,sp,-32
    8020f1a8:	ec06                	sd	ra,24(sp)
    8020f1aa:	e822                	sd	s0,16(sp)
    8020f1ac:	1000                	addi	s0,sp,32
  uint64 addr;
  int pid;
  if(argint(0, &pid) < 0)
    8020f1ae:	fe440593          	addi	a1,s0,-28
    8020f1b2:	4501                	li	a0,0
    8020f1b4:	ffffd097          	auipc	ra,0xffffd
    8020f1b8:	648080e7          	jalr	1608(ra) # 8020c7fc <argint>
    return -1;
    8020f1bc:	57fd                	li	a5,-1
  if(argint(0, &pid) < 0)
    8020f1be:	02054563          	bltz	a0,8020f1e8 <sys_wait4+0x42>
  if(argaddr(1, &addr) < 0)
    8020f1c2:	fe840593          	addi	a1,s0,-24
    8020f1c6:	4505                	li	a0,1
    8020f1c8:	ffffd097          	auipc	ra,0xffffd
    8020f1cc:	656080e7          	jalr	1622(ra) # 8020c81e <argaddr>
    return -1;
    8020f1d0:	57fd                	li	a5,-1
  if(argaddr(1, &addr) < 0)
    8020f1d2:	00054b63          	bltz	a0,8020f1e8 <sys_wait4+0x42>
    
  //printf("[sys_wait4]pid %d:%s enter\n",myproc()->pid,myproc()->name);
  return wait4pid(pid,addr);
    8020f1d6:	fe843583          	ld	a1,-24(s0)
    8020f1da:	fe442503          	lw	a0,-28(s0)
    8020f1de:	ffff3097          	auipc	ra,0xffff3
    8020f1e2:	014080e7          	jalr	20(ra) # 802021f2 <wait4pid>
    8020f1e6:	87aa                	mv	a5,a0
}
    8020f1e8:	853e                	mv	a0,a5
    8020f1ea:	60e2                	ld	ra,24(sp)
    8020f1ec:	6442                	ld	s0,16(sp)
    8020f1ee:	6105                	addi	sp,sp,32
    8020f1f0:	8082                	ret

000000008020f1f2 <sys_set_tid_address>:

uint64
sys_set_tid_address(void){
    8020f1f2:	1101                	addi	sp,sp,-32
    8020f1f4:	ec06                	sd	ra,24(sp)
    8020f1f6:	e822                	sd	s0,16(sp)
    8020f1f8:	1000                	addi	s0,sp,32
  uint64 address;
  argaddr(0, &address);
    8020f1fa:	fe840593          	addi	a1,s0,-24
    8020f1fe:	4501                	li	a0,0
    8020f200:	ffffd097          	auipc	ra,0xffffd
    8020f204:	61e080e7          	jalr	1566(ra) # 8020c81e <argaddr>
  myproc()->clear_child_tid = address;
    8020f208:	ffffc097          	auipc	ra,0xffffc
    8020f20c:	244080e7          	jalr	580(ra) # 8020b44c <myproc>
    8020f210:	fe843783          	ld	a5,-24(s0)
    8020f214:	1af53823          	sd	a5,432(a0)
  return myproc()->pid;
    8020f218:	ffffc097          	auipc	ra,0xffffc
    8020f21c:	234080e7          	jalr	564(ra) # 8020b44c <myproc>
}
    8020f220:	4128                	lw	a0,64(a0)
    8020f222:	60e2                	ld	ra,24(sp)
    8020f224:	6442                	ld	s0,16(sp)
    8020f226:	6105                	addi	sp,sp,32
    8020f228:	8082                	ret

000000008020f22a <sys_gettid>:

uint64
sys_gettid(void){
    8020f22a:	1101                	addi	sp,sp,-32
    8020f22c:	ec06                	sd	ra,24(sp)
    8020f22e:	e822                	sd	s0,16(sp)
    8020f230:	1000                	addi	s0,sp,32
  struct proc* p = myproc();
    8020f232:	ffffc097          	auipc	ra,0xffffc
    8020f236:	21a080e7          	jalr	538(ra) # 8020b44c <myproc>
  uint64 address = p->clear_child_tid;
    8020f23a:	1b053603          	ld	a2,432(a0)
  int tid;
  if(address){
    8020f23e:	e611                	bnez	a2,8020f24a <sys_gettid+0x20>
    if(either_copyin(1,&tid,address,sizeof(tid))<0){
      return -1;
    }
    return tid;
  }else{
    return p->pid;
    8020f240:	4128                	lw	a0,64(a0)
  }
}
    8020f242:	60e2                	ld	ra,24(sp)
    8020f244:	6442                	ld	s0,16(sp)
    8020f246:	6105                	addi	sp,sp,32
    8020f248:	8082                	ret
    if(either_copyin(1,&tid,address,sizeof(tid))<0){
    8020f24a:	4691                	li	a3,4
    8020f24c:	fec40593          	addi	a1,s0,-20
    8020f250:	4505                	li	a0,1
    8020f252:	ffffc097          	auipc	ra,0xffffc
    8020f256:	c6a080e7          	jalr	-918(ra) # 8020aebc <either_copyin>
    8020f25a:	87aa                	mv	a5,a0
      return -1;
    8020f25c:	557d                	li	a0,-1
    if(either_copyin(1,&tid,address,sizeof(tid))<0){
    8020f25e:	fe07c2e3          	bltz	a5,8020f242 <sys_gettid+0x18>
    return tid;
    8020f262:	fec42503          	lw	a0,-20(s0)
    8020f266:	bff1                	j	8020f242 <sys_gettid+0x18>

000000008020f268 <sys_exit>:

uint64
sys_exit()
{
    8020f268:	1101                	addi	sp,sp,-32
    8020f26a:	ec06                	sd	ra,24(sp)
    8020f26c:	e822                	sd	s0,16(sp)
    8020f26e:	1000                	addi	s0,sp,32
  int n;
  if(argint(0,&n)<0){
    8020f270:	fec40593          	addi	a1,s0,-20
    8020f274:	4501                	li	a0,0
    8020f276:	ffffd097          	auipc	ra,0xffffd
    8020f27a:	586080e7          	jalr	1414(ra) # 8020c7fc <argint>
    return -1;
    8020f27e:	57fd                	li	a5,-1
  if(argint(0,&n)<0){
    8020f280:	00054963          	bltz	a0,8020f292 <sys_exit+0x2a>
  }
  exit(n);
    8020f284:	fec42503          	lw	a0,-20(s0)
    8020f288:	ffff3097          	auipc	ra,0xffff3
    8020f28c:	0ac080e7          	jalr	172(ra) # 80202334 <exit>
  return 0;
    8020f290:	4781                	li	a5,0
}
    8020f292:	853e                	mv	a0,a5
    8020f294:	60e2                	ld	ra,24(sp)
    8020f296:	6442                	ld	s0,16(sp)
    8020f298:	6105                	addi	sp,sp,32
    8020f29a:	8082                	ret

000000008020f29c <sys_getrusage>:

uint64
sys_getrusage(void)
{
    8020f29c:	7115                	addi	sp,sp,-224
    8020f29e:	ed86                	sd	ra,216(sp)
    8020f2a0:	e9a2                	sd	s0,208(sp)
    8020f2a2:	e5a6                	sd	s1,200(sp)
    8020f2a4:	1180                	addi	s0,sp,224
  int who;
  struct proc* p = myproc();
    8020f2a6:	ffffc097          	auipc	ra,0xffffc
    8020f2aa:	1a6080e7          	jalr	422(ra) # 8020b44c <myproc>
    8020f2ae:	84aa                	mv	s1,a0
  uint64 rusage;
  struct rusage rs;
  if(argint(0,&who)<0){
    8020f2b0:	fbc40593          	addi	a1,s0,-68
    8020f2b4:	4501                	li	a0,0
    8020f2b6:	ffffd097          	auipc	ra,0xffffd
    8020f2ba:	546080e7          	jalr	1350(ra) # 8020c7fc <argint>
    return -1;
    8020f2be:	57fd                	li	a5,-1
  if(argint(0,&who)<0){
    8020f2c0:	0a054663          	bltz	a0,8020f36c <sys_getrusage+0xd0>
  }
  if(argaddr(1,&rusage)<0){
    8020f2c4:	fb040593          	addi	a1,s0,-80
    8020f2c8:	4505                	li	a0,1
    8020f2ca:	ffffd097          	auipc	ra,0xffffd
    8020f2ce:	554080e7          	jalr	1364(ra) # 8020c81e <argaddr>
    return -1;
    8020f2d2:	57fd                	li	a5,-1
  if(argaddr(1,&rusage)<0){
    8020f2d4:	08054c63          	bltz	a0,8020f36c <sys_getrusage+0xd0>
  }
  rs = (struct rusage){
    .ru_utime = get_timeval(),
    8020f2d8:	ffffb097          	auipc	ra,0xffffb
    8020f2dc:	f1c080e7          	jalr	-228(ra) # 8020a1f4 <get_timeval>
    8020f2e0:	fca43023          	sd	a0,-64(s0)
    8020f2e4:	fcb43423          	sd	a1,-56(s0)
    .ru_stime = get_timeval(),
    8020f2e8:	ffffb097          	auipc	ra,0xffffb
    8020f2ec:	f0c080e7          	jalr	-244(ra) # 8020a1f4 <get_timeval>
    8020f2f0:	fca43823          	sd	a0,-48(s0)
    8020f2f4:	fcb43c23          	sd	a1,-40(s0)
  rs = (struct rusage){
    8020f2f8:	f4043023          	sd	zero,-192(s0)
    8020f2fc:	f4043423          	sd	zero,-184(s0)
    8020f300:	f4043823          	sd	zero,-176(s0)
    8020f304:	f4043c23          	sd	zero,-168(s0)
    8020f308:	f6043023          	sd	zero,-160(s0)
    8020f30c:	f6043423          	sd	zero,-152(s0)
    8020f310:	f6043823          	sd	zero,-144(s0)
    8020f314:	f6043c23          	sd	zero,-136(s0)
    8020f318:	f8043023          	sd	zero,-128(s0)
    8020f31c:	f8043423          	sd	zero,-120(s0)
    8020f320:	f8043823          	sd	zero,-112(s0)
    8020f324:	f8043c23          	sd	zero,-104(s0)
    8020f328:	fa043023          	sd	zero,-96(s0)
    8020f32c:	fa043423          	sd	zero,-88(s0)
    8020f330:	fc043783          	ld	a5,-64(s0)
    8020f334:	f2f43023          	sd	a5,-224(s0)
    8020f338:	fc843783          	ld	a5,-56(s0)
    8020f33c:	f2f43423          	sd	a5,-216(s0)
    8020f340:	f2a43823          	sd	a0,-208(s0)
    8020f344:	f2b43c23          	sd	a1,-200(s0)
  };
  switch(who){
    8020f348:	fbc42703          	lw	a4,-68(s0)
    8020f34c:	4785                	li	a5,1
    8020f34e:	02e7f563          	bgeu	a5,a4,8020f378 <sys_getrusage+0xdc>
			rs.ru_nivcsw = p->ivswtch;
      break;
    default:
      break;
  }
  if(either_copyout(1,rusage,&rs,sizeof(rs))<0){
    8020f352:	09000693          	li	a3,144
    8020f356:	f2040613          	addi	a2,s0,-224
    8020f35a:	fb043583          	ld	a1,-80(s0)
    8020f35e:	4505                	li	a0,1
    8020f360:	ffffc097          	auipc	ra,0xffffc
    8020f364:	b06080e7          	jalr	-1274(ra) # 8020ae66 <either_copyout>
    8020f368:	43f55793          	srai	a5,a0,0x3f
    return -1;
  }
  //__debug_info("[sys_getrusage] return 0\n");
  return 0;
}
    8020f36c:	853e                	mv	a0,a5
    8020f36e:	60ee                	ld	ra,216(sp)
    8020f370:	644e                	ld	s0,208(sp)
    8020f372:	64ae                	ld	s1,200(sp)
    8020f374:	612d                	addi	sp,sp,224
    8020f376:	8082                	ret
			rs.ru_nvcsw = p->vswtch;
    8020f378:	1c44a783          	lw	a5,452(s1)
    8020f37c:	faf43023          	sd	a5,-96(s0)
			rs.ru_nivcsw = p->ivswtch;
    8020f380:	1c84a783          	lw	a5,456(s1)
    8020f384:	faf43423          	sd	a5,-88(s0)
      break;
    8020f388:	b7e9                	j	8020f352 <sys_getrusage+0xb6>

000000008020f38a <sys_umask>:

uint64
sys_umask(void)
{
    8020f38a:	1101                	addi	sp,sp,-32
    8020f38c:	ec06                	sd	ra,24(sp)
    8020f38e:	e822                	sd	s0,16(sp)
    8020f390:	1000                	addi	s0,sp,32
  int n;
  argint(0, &n);
    8020f392:	fec40593          	addi	a1,s0,-20
    8020f396:	4501                	li	a0,0
    8020f398:	ffffd097          	auipc	ra,0xffffd
    8020f39c:	464080e7          	jalr	1124(ra) # 8020c7fc <argint>
  n = n & 0777;
    8020f3a0:	fec42783          	lw	a5,-20(s0)
    8020f3a4:	1ff7f793          	andi	a5,a5,511
    8020f3a8:	fef42623          	sw	a5,-20(s0)
  myproc()->umask = n;
    8020f3ac:	ffffc097          	auipc	ra,0xffffc
    8020f3b0:	0a0080e7          	jalr	160(ra) # 8020b44c <myproc>
    8020f3b4:	fec42783          	lw	a5,-20(s0)
    8020f3b8:	1cf52023          	sw	a5,448(a0)
  return 0;
}
    8020f3bc:	4501                	li	a0,0
    8020f3be:	60e2                	ld	ra,24(sp)
    8020f3c0:	6442                	ld	s0,16(sp)
    8020f3c2:	6105                	addi	sp,sp,32
    8020f3c4:	8082                	ret

000000008020f3c6 <sys_nanosleep>:

uint64 
sys_nanosleep(void) {
    8020f3c6:	711d                	addi	sp,sp,-96
    8020f3c8:	ec86                	sd	ra,88(sp)
    8020f3ca:	e8a2                	sd	s0,80(sp)
    8020f3cc:	e4a6                	sd	s1,72(sp)
    8020f3ce:	e0ca                	sd	s2,64(sp)
    8020f3d0:	fc4e                	sd	s3,56(sp)
    8020f3d2:	f852                	sd	s4,48(sp)
    8020f3d4:	f456                	sd	s5,40(sp)
    8020f3d6:	1080                	addi	s0,sp,96
	uint64 addr_sec, addr_usec;

	if (argaddr(0, &addr_sec) < 0) 
    8020f3d8:	fb840593          	addi	a1,s0,-72
    8020f3dc:	4501                	li	a0,0
    8020f3de:	ffffd097          	auipc	ra,0xffffd
    8020f3e2:	440080e7          	jalr	1088(ra) # 8020c81e <argaddr>
		return -1;
    8020f3e6:	57fd                	li	a5,-1
	if (argaddr(0, &addr_sec) < 0) 
    8020f3e8:	0c054563          	bltz	a0,8020f4b2 <sys_nanosleep+0xec>
	if (argaddr(1, &addr_usec) < 0) 
    8020f3ec:	fb040593          	addi	a1,s0,-80
    8020f3f0:	4505                	li	a0,1
    8020f3f2:	ffffd097          	auipc	ra,0xffffd
    8020f3f6:	42c080e7          	jalr	1068(ra) # 8020c81e <argaddr>
		return -1;
    8020f3fa:	57fd                	li	a5,-1
	if (argaddr(1, &addr_usec) < 0) 
    8020f3fc:	0a054b63          	bltz	a0,8020f4b2 <sys_nanosleep+0xec>

	struct proc *p = myproc();
    8020f400:	ffffc097          	auipc	ra,0xffffc
    8020f404:	04c080e7          	jalr	76(ra) # 8020b44c <myproc>
    8020f408:	89aa                	mv	s3,a0
	uint64 sec, usec;
	if (either_copyin(1, (char*)&sec, addr_sec, sizeof(sec)) < 0) 
    8020f40a:	46a1                	li	a3,8
    8020f40c:	fb843603          	ld	a2,-72(s0)
    8020f410:	fa840593          	addi	a1,s0,-88
    8020f414:	4505                	li	a0,1
    8020f416:	ffffc097          	auipc	ra,0xffffc
    8020f41a:	aa6080e7          	jalr	-1370(ra) # 8020aebc <either_copyin>
		return -1;
    8020f41e:	57fd                	li	a5,-1
	if (either_copyin(1, (char*)&sec, addr_sec, sizeof(sec)) < 0) 
    8020f420:	08054963          	bltz	a0,8020f4b2 <sys_nanosleep+0xec>
	if (either_copyin(1, (char*)&usec, addr_usec, sizeof(usec)) < 0) 
    8020f424:	46a1                	li	a3,8
    8020f426:	fb043603          	ld	a2,-80(s0)
    8020f42a:	fa040593          	addi	a1,s0,-96
    8020f42e:	4505                	li	a0,1
    8020f430:	ffffc097          	auipc	ra,0xffffc
    8020f434:	a8c080e7          	jalr	-1396(ra) # 8020aebc <either_copyin>
    8020f438:	0a054063          	bltz	a0,8020f4d8 <sys_nanosleep+0x112>
		return -1;
	int n = sec * 20 + usec / 50000000;
    8020f43c:	fa843783          	ld	a5,-88(s0)
    8020f440:	0027949b          	slliw	s1,a5,0x2
    8020f444:	9cbd                	addw	s1,s1,a5
    8020f446:	0024949b          	slliw	s1,s1,0x2
    8020f44a:	fa043783          	ld	a5,-96(s0)
    8020f44e:	02faf737          	lui	a4,0x2faf
    8020f452:	08070713          	addi	a4,a4,128 # 2faf080 <_entry-0x7d250f80>
    8020f456:	02e7d7b3          	divu	a5,a5,a4
    8020f45a:	9cbd                	addw	s1,s1,a5

	int mask = p->tmask;
	if (mask) {
    8020f45c:	1149a783          	lw	a5,276(s3)
    8020f460:	e3bd                	bnez	a5,8020f4c6 <sys_nanosleep+0x100>
		printf(") ...\n");
	}
	acquire(&p->lock);
    8020f462:	00898a13          	addi	s4,s3,8
    8020f466:	8552                	mv	a0,s4
    8020f468:	ffff9097          	auipc	ra,0xffff9
    8020f46c:	f0e080e7          	jalr	-242(ra) # 80208376 <acquire>
	uint64 tick0 = ticks;
    8020f470:	0085da97          	auipc	s5,0x85d
    8020f474:	ba8aea83          	lwu	s5,-1112(s5) # 80a6c018 <ticks>
	while (ticks - tick0 < n / 10) {
    8020f478:	47a9                	li	a5,10
    8020f47a:	02f4c4bb          	divw	s1,s1,a5
    8020f47e:	c485                	beqz	s1,8020f4a6 <sys_nanosleep+0xe0>
		if (p->killed) {
			return -1;
		}
		sleep(&ticks, &p->lock);
    8020f480:	0085d917          	auipc	s2,0x85d
    8020f484:	b9890913          	addi	s2,s2,-1128 # 80a6c018 <ticks>
		if (p->killed) {
    8020f488:	0389a783          	lw	a5,56(s3)
    8020f48c:	eba1                	bnez	a5,8020f4dc <sys_nanosleep+0x116>
		sleep(&ticks, &p->lock);
    8020f48e:	85d2                	mv	a1,s4
    8020f490:	854a                	mv	a0,s2
    8020f492:	ffff2097          	auipc	ra,0xffff2
    8020f496:	790080e7          	jalr	1936(ra) # 80201c22 <sleep>
	while (ticks - tick0 < n / 10) {
    8020f49a:	00096783          	lwu	a5,0(s2)
    8020f49e:	415787b3          	sub	a5,a5,s5
    8020f4a2:	fe97e3e3          	bltu	a5,s1,8020f488 <sys_nanosleep+0xc2>
	}
	release(&p->lock);
    8020f4a6:	8552                	mv	a0,s4
    8020f4a8:	ffff9097          	auipc	ra,0xffff9
    8020f4ac:	f22080e7          	jalr	-222(ra) # 802083ca <release>

	return 0;
    8020f4b0:	4781                	li	a5,0
}
    8020f4b2:	853e                	mv	a0,a5
    8020f4b4:	60e6                	ld	ra,88(sp)
    8020f4b6:	6446                	ld	s0,80(sp)
    8020f4b8:	64a6                	ld	s1,72(sp)
    8020f4ba:	6906                	ld	s2,64(sp)
    8020f4bc:	79e2                	ld	s3,56(sp)
    8020f4be:	7a42                	ld	s4,48(sp)
    8020f4c0:	7aa2                	ld	s5,40(sp)
    8020f4c2:	6125                	addi	sp,sp,96
    8020f4c4:	8082                	ret
		printf(") ...\n");
    8020f4c6:	00005517          	auipc	a0,0x5
    8020f4ca:	9da50513          	addi	a0,a0,-1574 # 80213ea0 <UNAME_VERSION+0x308>
    8020f4ce:	ffff9097          	auipc	ra,0xffff9
    8020f4d2:	262080e7          	jalr	610(ra) # 80208730 <printf>
    8020f4d6:	b771                	j	8020f462 <sys_nanosleep+0x9c>
		return -1;
    8020f4d8:	57fd                	li	a5,-1
    8020f4da:	bfe1                	j	8020f4b2 <sys_nanosleep+0xec>
			return -1;
    8020f4dc:	57fd                	li	a5,-1
    8020f4de:	bfd1                	j	8020f4b2 <sys_nanosleep+0xec>

000000008020f4e0 <logbufinit>:

char syslogbuf[1024];
int logbuflen = 0;

void
logbufinit(){
    8020f4e0:	1101                	addi	sp,sp,-32
    8020f4e2:	ec06                	sd	ra,24(sp)
    8020f4e4:	e822                	sd	s0,16(sp)
    8020f4e6:	e426                	sd	s1,8(sp)
    8020f4e8:	e04a                	sd	s2,0(sp)
    8020f4ea:	1000                	addi	s0,sp,32
  logbuflen = 0;
    8020f4ec:	0085d497          	auipc	s1,0x85d
    8020f4f0:	22448493          	addi	s1,s1,548 # 80a6c710 <logbuflen>
    8020f4f4:	0004a023          	sw	zero,0(s1)
  strncpy(syslogbuf,
    8020f4f8:	0085d917          	auipc	s2,0x85d
    8020f4fc:	e1890913          	addi	s2,s2,-488 # 80a6c310 <syslogbuf>
    8020f500:	40000613          	li	a2,1024
    8020f504:	00005597          	auipc	a1,0x5
    8020f508:	9a458593          	addi	a1,a1,-1628 # 80213ea8 <UNAME_VERSION+0x310>
    8020f50c:	854a                	mv	a0,s2
    8020f50e:	ffff2097          	auipc	ra,0xffff2
    8020f512:	97e080e7          	jalr	-1666(ra) # 80200e8c <strncpy>
  	"[log]init done\n",
  	1024);
  logbuflen+=strlen(syslogbuf);
    8020f516:	854a                	mv	a0,s2
    8020f518:	ffff2097          	auipc	ra,0xffff2
    8020f51c:	9e4080e7          	jalr	-1564(ra) # 80200efc <strlen>
    8020f520:	409c                	lw	a5,0(s1)
    8020f522:	9fa9                	addw	a5,a5,a0
    8020f524:	c09c                	sw	a5,0(s1)
}
    8020f526:	60e2                	ld	ra,24(sp)
    8020f528:	6442                	ld	s0,16(sp)
    8020f52a:	64a2                	ld	s1,8(sp)
    8020f52c:	6902                	ld	s2,0(sp)
    8020f52e:	6105                	addi	sp,sp,32
    8020f530:	8082                	ret

000000008020f532 <sys_syslog>:

uint64
sys_syslog(){
    8020f532:	7179                	addi	sp,sp,-48
    8020f534:	f406                	sd	ra,40(sp)
    8020f536:	f022                	sd	s0,32(sp)
    8020f538:	1800                	addi	s0,sp,48
  int type;
  uint64 bufp;
  int len;
  if(argint(0,&type)<0){
    8020f53a:	fec40593          	addi	a1,s0,-20
    8020f53e:	4501                	li	a0,0
    8020f540:	ffffd097          	auipc	ra,0xffffd
    8020f544:	2bc080e7          	jalr	700(ra) # 8020c7fc <argint>
    return -1;
    8020f548:	57fd                	li	a5,-1
  if(argint(0,&type)<0){
    8020f54a:	02054e63          	bltz	a0,8020f586 <sys_syslog+0x54>
  }
  if(argaddr(1,&bufp)<0){
    8020f54e:	fe040593          	addi	a1,s0,-32
    8020f552:	4505                	li	a0,1
    8020f554:	ffffd097          	auipc	ra,0xffffd
    8020f558:	2ca080e7          	jalr	714(ra) # 8020c81e <argaddr>
    return -1;
    8020f55c:	57fd                	li	a5,-1
  if(argaddr(1,&bufp)<0){
    8020f55e:	02054463          	bltz	a0,8020f586 <sys_syslog+0x54>
  }
  if(argint(2,&len)<0){
    8020f562:	fdc40593          	addi	a1,s0,-36
    8020f566:	4509                	li	a0,2
    8020f568:	ffffd097          	auipc	ra,0xffffd
    8020f56c:	294080e7          	jalr	660(ra) # 8020c7fc <argint>
    8020f570:	04054663          	bltz	a0,8020f5bc <sys_syslog+0x8a>
    return -1;
  }
  switch(type){
    8020f574:	fec42783          	lw	a5,-20(s0)
    8020f578:	470d                	li	a4,3
    8020f57a:	00e78b63          	beq	a5,a4,8020f590 <sys_syslog+0x5e>
      if(either_copyout(1,bufp,syslogbuf,logbuflen)<0){
        return -1;
      }
      return logbuflen;
    }
    case SYSLOG_ACTION_SIZE_BUFFER: return sizeof(syslogbuf);
    8020f57e:	17d9                	addi	a5,a5,-10
    8020f580:	0017b793          	seqz	a5,a5
    8020f584:	07aa                	slli	a5,a5,0xa
  }
  //printf("[syslog] type:%d bufp:%p len:%p\n",type,bufp,len);
  return 0;
}
    8020f586:	853e                	mv	a0,a5
    8020f588:	70a2                	ld	ra,40(sp)
    8020f58a:	7402                	ld	s0,32(sp)
    8020f58c:	6145                	addi	sp,sp,48
    8020f58e:	8082                	ret
      if(either_copyout(1,bufp,syslogbuf,logbuflen)<0){
    8020f590:	0085d697          	auipc	a3,0x85d
    8020f594:	1806a683          	lw	a3,384(a3) # 80a6c710 <logbuflen>
    8020f598:	0085d617          	auipc	a2,0x85d
    8020f59c:	d7860613          	addi	a2,a2,-648 # 80a6c310 <syslogbuf>
    8020f5a0:	fe043583          	ld	a1,-32(s0)
    8020f5a4:	4505                	li	a0,1
    8020f5a6:	ffffc097          	auipc	ra,0xffffc
    8020f5aa:	8c0080e7          	jalr	-1856(ra) # 8020ae66 <either_copyout>
    8020f5ae:	00054963          	bltz	a0,8020f5c0 <sys_syslog+0x8e>
      return logbuflen;
    8020f5b2:	0085d797          	auipc	a5,0x85d
    8020f5b6:	15e7a783          	lw	a5,350(a5) # 80a6c710 <logbuflen>
    8020f5ba:	b7f1                	j	8020f586 <sys_syslog+0x54>
    return -1;
    8020f5bc:	57fd                	li	a5,-1
    8020f5be:	b7e1                	j	8020f586 <sys_syslog+0x54>
        return -1;
    8020f5c0:	57fd                	li	a5,-1
    8020f5c2:	b7d1                	j	8020f586 <sys_syslog+0x54>

000000008020f5c4 <sys_sysinfo>:

uint64
sys_sysinfo(void)
{
    8020f5c4:	7175                	addi	sp,sp,-144
    8020f5c6:	e506                	sd	ra,136(sp)
    8020f5c8:	e122                	sd	s0,128(sp)
    8020f5ca:	0900                	addi	s0,sp,144
	uint64 addr;
	// struct proc *p = myproc();

	if (argaddr(0, &addr) < 0) {
    8020f5cc:	fe840593          	addi	a1,s0,-24
    8020f5d0:	4501                	li	a0,0
    8020f5d2:	ffffd097          	auipc	ra,0xffffd
    8020f5d6:	24c080e7          	jalr	588(ra) # 8020c81e <argaddr>
    8020f5da:	87aa                	mv	a5,a0
		return -1;
    8020f5dc:	557d                	li	a0,-1
	if (argaddr(0, &addr) < 0) {
    8020f5de:	0607c963          	bltz	a5,8020f650 <sys_sysinfo+0x8c>
	}

	struct sysinfo info;
	memset(&info, 0, sizeof(info));
    8020f5e2:	07000613          	li	a2,112
    8020f5e6:	4581                	li	a1,0
    8020f5e8:	f7840513          	addi	a0,s0,-136
    8020f5ec:	ffff1097          	auipc	ra,0xffff1
    8020f5f0:	788080e7          	jalr	1928(ra) # 80200d74 <memset>
    8020f5f4:	c01027f3          	rdtime	a5

	info.uptime = r_time() / CLK_FREQ;
    8020f5f8:	00bec737          	lui	a4,0xbec
    8020f5fc:	c2070713          	addi	a4,a4,-992 # bebc20 <_entry-0x7f6143e0>
    8020f600:	02e7d7b3          	divu	a5,a5,a4
    8020f604:	f6f43c23          	sd	a5,-136(s0)
	info.totalram = PHYSTOP - RUSTSBI_BASE;
    8020f608:	080007b7          	lui	a5,0x8000
    8020f60c:	f8f43c23          	sd	a5,-104(s0)
	info.freeram = idlepages() << PGSHIFT;
    8020f610:	ffffa097          	auipc	ra,0xffffa
    8020f614:	c9c080e7          	jalr	-868(ra) # 802092ac <idlepages>
    8020f618:	0532                	slli	a0,a0,0xc
    8020f61a:	faa43023          	sd	a0,-96(s0)
	info.bufferram = BSIZE * BNUM;
    8020f61e:	001397b7          	lui	a5,0x139
    8020f622:	80078793          	addi	a5,a5,-2048 # 138800 <_entry-0x800c7800>
    8020f626:	faf43823          	sd	a5,-80(s0)
	info.procs = NPROC;
    8020f62a:	06400793          	li	a5,100
    8020f62e:	fcf41423          	sh	a5,-56(s0)
	info.mem_unit = PGSIZE;
    8020f632:	6785                	lui	a5,0x1
    8020f634:	fef42023          	sw	a5,-32(s0)

	// if (copyout(p->pagetable, addr, (char *)&info, sizeof(info)) < 0) {
	if (either_copyout(1,addr, (char *)&info, sizeof(info)) < 0) {
    8020f638:	07000693          	li	a3,112
    8020f63c:	f7840613          	addi	a2,s0,-136
    8020f640:	fe843583          	ld	a1,-24(s0)
    8020f644:	4505                	li	a0,1
    8020f646:	ffffc097          	auipc	ra,0xffffc
    8020f64a:	820080e7          	jalr	-2016(ra) # 8020ae66 <either_copyout>
    8020f64e:	957d                	srai	a0,a0,0x3f
		return -1;
	}

	return 0;
}
    8020f650:	60aa                	ld	ra,136(sp)
    8020f652:	640a                	ld	s0,128(sp)
    8020f654:	6149                	addi	sp,sp,144
    8020f656:	8082                	ret

000000008020f658 <sys_ppoll>:
#include "include/pm.h"
#include "include/poll.h"
#include "include/signal.h"

uint64
sys_ppoll(void){
    8020f658:	715d                	addi	sp,sp,-80
    8020f65a:	e486                	sd	ra,72(sp)
    8020f65c:	e0a2                	sd	s0,64(sp)
    8020f65e:	fc26                	sd	s1,56(sp)
    8020f660:	f84a                	sd	s2,48(sp)
    8020f662:	f44e                	sd	s3,40(sp)
    8020f664:	0880                	addi	s0,sp,80
  uint64 tm_addr;
  struct timespec tmo_p;
  uint64 sm_addr;
  __sigset_t sigmask;
  
  if(argint(1,&nfds) < 0)
    8020f666:	fcc40593          	addi	a1,s0,-52
    8020f66a:	4505                	li	a0,1
    8020f66c:	ffffd097          	auipc	ra,0xffffd
    8020f670:	190080e7          	jalr	400(ra) # 8020c7fc <argint>
  {
    return -1;
    8020f674:	54fd                	li	s1,-1
  if(argint(1,&nfds) < 0)
    8020f676:	08054a63          	bltz	a0,8020f70a <sys_ppoll+0xb2>
  }
  
  fds = (struct pollfd *)kmalloc(sizeof(struct pollfd) * nfds);
    8020f67a:	fcc42503          	lw	a0,-52(s0)
    8020f67e:	0035151b          	slliw	a0,a0,0x3
    8020f682:	ffffa097          	auipc	ra,0xffffa
    8020f686:	d86080e7          	jalr	-634(ra) # 80209408 <kmalloc>
    8020f68a:	892a                	mv	s2,a0
  
  if((fds_addr = argstruct(0, fds, nfds * sizeof(struct pollfd))) == NULL)
    8020f68c:	fcc42603          	lw	a2,-52(s0)
    8020f690:	0036161b          	slliw	a2,a2,0x3
    8020f694:	85aa                	mv	a1,a0
    8020f696:	4501                	li	a0,0
    8020f698:	ffffd097          	auipc	ra,0xffffd
    8020f69c:	2b2080e7          	jalr	690(ra) # 8020c94a <argstruct>
    8020f6a0:	89aa                	mv	s3,a0
    8020f6a2:	c525                	beqz	a0,8020f70a <sys_ppoll+0xb2>
  {
    return -1;
  }
  
  tm_addr = argstruct(2, &tmo_p, sizeof(struct timespec));
    8020f6a4:	4641                	li	a2,16
    8020f6a6:	fb840593          	addi	a1,s0,-72
    8020f6aa:	4509                	li	a0,2
    8020f6ac:	ffffd097          	auipc	ra,0xffffd
    8020f6b0:	29e080e7          	jalr	670(ra) # 8020c94a <argstruct>
    8020f6b4:	84aa                	mv	s1,a0
  sm_addr = argstruct(3, &sigmask, sizeof(__sigset_t));
    8020f6b6:	4621                	li	a2,8
    8020f6b8:	fb040593          	addi	a1,s0,-80
    8020f6bc:	450d                	li	a0,3
    8020f6be:	ffffd097          	auipc	ra,0xffffd
    8020f6c2:	28c080e7          	jalr	652(ra) # 8020c94a <argstruct>
  
  uint64 ret = ppoll(fds, nfds,
    8020f6c6:	009034b3          	snez	s1,s1
    8020f6ca:	409004b3          	neg	s1,s1
    8020f6ce:	00a03533          	snez	a0,a0
    8020f6d2:	40a00533          	neg	a0,a0
    8020f6d6:	fb040693          	addi	a3,s0,-80
    8020f6da:	8ee9                	and	a3,a3,a0
    8020f6dc:	fb840613          	addi	a2,s0,-72
    8020f6e0:	8e65                	and	a2,a2,s1
    8020f6e2:	fcc42583          	lw	a1,-52(s0)
    8020f6e6:	854a                	mv	a0,s2
    8020f6e8:	ffffc097          	auipc	ra,0xffffc
    8020f6ec:	8a4080e7          	jalr	-1884(ra) # 8020af8c <ppoll>
    8020f6f0:	84aa                	mv	s1,a0
  			tm_addr?&tmo_p:NULL, 
  			sm_addr?&sigmask:NULL);
  
  if(either_copyout(1, fds_addr, fds, sizeof(struct pollfd) * nfds) < 0)
    8020f6f2:	fcc42683          	lw	a3,-52(s0)
    8020f6f6:	068e                	slli	a3,a3,0x3
    8020f6f8:	864a                	mv	a2,s2
    8020f6fa:	85ce                	mv	a1,s3
    8020f6fc:	4505                	li	a0,1
    8020f6fe:	ffffb097          	auipc	ra,0xffffb
    8020f702:	768080e7          	jalr	1896(ra) # 8020ae66 <either_copyout>
    8020f706:	00054a63          	bltz	a0,8020f71a <sys_ppoll+0xc2>
  {
    return -1;
  }
  
  return ret;
}
    8020f70a:	8526                	mv	a0,s1
    8020f70c:	60a6                	ld	ra,72(sp)
    8020f70e:	6406                	ld	s0,64(sp)
    8020f710:	74e2                	ld	s1,56(sp)
    8020f712:	7942                	ld	s2,48(sp)
    8020f714:	79a2                	ld	s3,40(sp)
    8020f716:	6161                	addi	sp,sp,80
    8020f718:	8082                	ret
    return -1;
    8020f71a:	54fd                	li	s1,-1
    8020f71c:	b7fd                	j	8020f70a <sys_ppoll+0xb2>

000000008020f71e <sys_pselect6>:

uint64
sys_pselect6()
{
    8020f71e:	7141                	addi	sp,sp,-496
    8020f720:	f786                	sd	ra,488(sp)
    8020f722:	f3a2                	sd	s0,480(sp)
    8020f724:	efa6                	sd	s1,472(sp)
    8020f726:	ebca                	sd	s2,464(sp)
    8020f728:	1b80                	addi	s0,sp,496
  	int nfds;
	uint64 urfds, uwfds, uexfds;
	uint64 utoaddr, usmaddr;
	
	argint(0, &nfds);
    8020f72a:	fdc40593          	addi	a1,s0,-36
    8020f72e:	4501                	li	a0,0
    8020f730:	ffffd097          	auipc	ra,0xffffd
    8020f734:	0cc080e7          	jalr	204(ra) # 8020c7fc <argint>
	argaddr(1, &urfds);
    8020f738:	fd040593          	addi	a1,s0,-48
    8020f73c:	4505                	li	a0,1
    8020f73e:	ffffd097          	auipc	ra,0xffffd
    8020f742:	0e0080e7          	jalr	224(ra) # 8020c81e <argaddr>
	argaddr(2, &uwfds);
    8020f746:	fc840593          	addi	a1,s0,-56
    8020f74a:	4509                	li	a0,2
    8020f74c:	ffffd097          	auipc	ra,0xffffd
    8020f750:	0d2080e7          	jalr	210(ra) # 8020c81e <argaddr>
	argaddr(3, &uexfds);
    8020f754:	fc040593          	addi	a1,s0,-64
    8020f758:	450d                	li	a0,3
    8020f75a:	ffffd097          	auipc	ra,0xffffd
    8020f75e:	0c4080e7          	jalr	196(ra) # 8020c81e <argaddr>
	argaddr(4, &utoaddr);
    8020f762:	fb840593          	addi	a1,s0,-72
    8020f766:	4511                	li	a0,4
    8020f768:	ffffd097          	auipc	ra,0xffffd
    8020f76c:	0b6080e7          	jalr	182(ra) # 8020c81e <argaddr>
	argaddr(5, &usmaddr);
    8020f770:	fb040593          	addi	a1,s0,-80
    8020f774:	4515                	li	a0,5
    8020f776:	ffffd097          	auipc	ra,0xffffd
    8020f77a:	0a8080e7          	jalr	168(ra) # 8020c81e <argaddr>
	
	if (nfds <= 0 || nfds > FDSET_SIZE)
    8020f77e:	fdc42783          	lw	a5,-36(s0)
    8020f782:	37fd                	addiw	a5,a5,-1
    8020f784:	3ff00713          	li	a4,1023
		return -EINVAL;
    8020f788:	5529                	li	a0,-22
	if (nfds <= 0 || nfds > FDSET_SIZE)
    8020f78a:	0cf76b63          	bltu	a4,a5,8020f860 <sys_pselect6+0x142>
	if (!(urfds || uwfds || uexfds))
    8020f78e:	fd043603          	ld	a2,-48(s0)
    8020f792:	ee69                	bnez	a2,8020f86c <sys_pselect6+0x14e>
    8020f794:	fc843783          	ld	a5,-56(s0)
    8020f798:	fc043703          	ld	a4,-64(s0)
    8020f79c:	8fd9                	or	a5,a5,a4
    8020f79e:	c3e9                	beqz	a5,8020f860 <sys_pselect6+0x142>
	struct timespec timeout;
	__sigset_t sigmask;

	if (urfds && either_copyin(1, (char *)&rfds, urfds, sizeof(struct fdset)) < 0)
		return -EFAULT;
	if (uwfds && either_copyin(1, (char *)&wfds, uwfds, sizeof(struct fdset)) < 0)
    8020f7a0:	fc843603          	ld	a2,-56(s0)
    8020f7a4:	e26d                	bnez	a2,8020f886 <sys_pselect6+0x168>
		return -EFAULT;
	if (uexfds && either_copyin(1, (char *)&exfds, uexfds, sizeof(struct fdset)) < 0)
    8020f7a6:	fc043603          	ld	a2,-64(s0)
    8020f7aa:	ea7d                	bnez	a2,8020f8a0 <sys_pselect6+0x182>
		return -EFAULT;
	if (utoaddr && either_copyin(1, (char *)&timeout, utoaddr, sizeof(timeout)) < 0)
    8020f7ac:	fb843603          	ld	a2,-72(s0)
    8020f7b0:	10061563          	bnez	a2,8020f8ba <sys_pselect6+0x19c>
		return -EFAULT;
	if (usmaddr && either_copyin(1, (char *)&sigmask, usmaddr, sizeof(sigmask)) < 0)
    8020f7b4:	fb043603          	ld	a2,-80(s0)
    8020f7b8:	ca19                	beqz	a2,8020f7ce <sys_pselect6+0xb0>
    8020f7ba:	46a1                	li	a3,8
    8020f7bc:	e1840593          	addi	a1,s0,-488
    8020f7c0:	4505                	li	a0,1
    8020f7c2:	ffffb097          	auipc	ra,0xffffb
    8020f7c6:	6fa080e7          	jalr	1786(ra) # 8020aebc <either_copyin>
    8020f7ca:	16054663          	bltz	a0,8020f936 <sys_pselect6+0x218>
		return -EFAULT;

	struct proc *p = myproc();
    8020f7ce:	ffffc097          	auipc	ra,0xffffc
    8020f7d2:	c7e080e7          	jalr	-898(ra) # 8020b44c <myproc>
    8020f7d6:	892a                	mv	s2,a0
	if (p->tmask) {
    8020f7d8:	11452783          	lw	a5,276(a0)
    8020f7dc:	ebfd                	bnez	a5,8020f8d2 <sys_pselect6+0x1b4>
		printf(") ...\n");
	}

	int ret = pselect(nfds,
    8020f7de:	fd043583          	ld	a1,-48(s0)
    8020f7e2:	00b035b3          	snez	a1,a1
    8020f7e6:	40b005b3          	neg	a1,a1
    8020f7ea:	fc843603          	ld	a2,-56(s0)
    8020f7ee:	00c03633          	snez	a2,a2
    8020f7f2:	40c00633          	neg	a2,a2
    8020f7f6:	fc043683          	ld	a3,-64(s0)
    8020f7fa:	00d036b3          	snez	a3,a3
    8020f7fe:	40d006b3          	neg	a3,a3
    8020f802:	fb843703          	ld	a4,-72(s0)
    8020f806:	00e03733          	snez	a4,a4
    8020f80a:	40e00733          	neg	a4,a4
    8020f80e:	fb043783          	ld	a5,-80(s0)
    8020f812:	00f037b3          	snez	a5,a5
    8020f816:	40f007b3          	neg	a5,a5
    8020f81a:	e1840513          	addi	a0,s0,-488
    8020f81e:	8fe9                	and	a5,a5,a0
    8020f820:	e2040513          	addi	a0,s0,-480
    8020f824:	8f69                	and	a4,a4,a0
    8020f826:	e3040513          	addi	a0,s0,-464
    8020f82a:	8ee9                	and	a3,a3,a0
    8020f82c:	eb040513          	addi	a0,s0,-336
    8020f830:	8e69                	and	a2,a2,a0
    8020f832:	f3040513          	addi	a0,s0,-208
    8020f836:	8de9                	and	a1,a1,a0
    8020f838:	fdc42503          	lw	a0,-36(s0)
    8020f83c:	ffffb097          	auipc	ra,0xffffb
    8020f840:	782080e7          	jalr	1922(ra) # 8020afbe <pselect>
    8020f844:	84aa                	mv	s1,a0
				uexfds ? &exfds: NULL,
				utoaddr ? &timeout : NULL,
				usmaddr ? &sigmask : NULL
			);

	if (urfds)
    8020f846:	fd043583          	ld	a1,-48(s0)
    8020f84a:	edc9                	bnez	a1,8020f8e4 <sys_pselect6+0x1c6>
		either_copyout(1, urfds, (char *)&rfds, sizeof(struct fdset));
	if (uwfds)
    8020f84c:	fc843583          	ld	a1,-56(s0)
    8020f850:	e5c5                	bnez	a1,8020f8f8 <sys_pselect6+0x1da>
		either_copyout(1, uwfds, (char *)&wfds, sizeof(struct fdset));
	if (uexfds)
    8020f852:	fc043583          	ld	a1,-64(s0)
    8020f856:	e9dd                	bnez	a1,8020f90c <sys_pselect6+0x1ee>
		either_copyout(1, uexfds, (char *)&exfds, sizeof(struct fdset));

	if (p->tmask) {
    8020f858:	11492783          	lw	a5,276(s2)
    8020f85c:	e3f1                	bnez	a5,8020f920 <sys_pselect6+0x202>
		printf("pid %d: return from pselect(", p->pid);
	}

	//__debug_info("[sys_pselect6] ret = %d\n", ret);
	return ret;
    8020f85e:	8526                	mv	a0,s1
}
    8020f860:	70be                	ld	ra,488(sp)
    8020f862:	741e                	ld	s0,480(sp)
    8020f864:	64fe                	ld	s1,472(sp)
    8020f866:	695e                	ld	s2,464(sp)
    8020f868:	617d                	addi	sp,sp,496
    8020f86a:	8082                	ret
	if (urfds && either_copyin(1, (char *)&rfds, urfds, sizeof(struct fdset)) < 0)
    8020f86c:	08000693          	li	a3,128
    8020f870:	f3040593          	addi	a1,s0,-208
    8020f874:	4505                	li	a0,1
    8020f876:	ffffb097          	auipc	ra,0xffffb
    8020f87a:	646080e7          	jalr	1606(ra) # 8020aebc <either_copyin>
    8020f87e:	f20551e3          	bgez	a0,8020f7a0 <sys_pselect6+0x82>
		return -EFAULT;
    8020f882:	5549                	li	a0,-14
    8020f884:	bff1                	j	8020f860 <sys_pselect6+0x142>
	if (uwfds && either_copyin(1, (char *)&wfds, uwfds, sizeof(struct fdset)) < 0)
    8020f886:	08000693          	li	a3,128
    8020f88a:	eb040593          	addi	a1,s0,-336
    8020f88e:	4505                	li	a0,1
    8020f890:	ffffb097          	auipc	ra,0xffffb
    8020f894:	62c080e7          	jalr	1580(ra) # 8020aebc <either_copyin>
    8020f898:	f00557e3          	bgez	a0,8020f7a6 <sys_pselect6+0x88>
		return -EFAULT;
    8020f89c:	5549                	li	a0,-14
    8020f89e:	b7c9                	j	8020f860 <sys_pselect6+0x142>
	if (uexfds && either_copyin(1, (char *)&exfds, uexfds, sizeof(struct fdset)) < 0)
    8020f8a0:	08000693          	li	a3,128
    8020f8a4:	e3040593          	addi	a1,s0,-464
    8020f8a8:	4505                	li	a0,1
    8020f8aa:	ffffb097          	auipc	ra,0xffffb
    8020f8ae:	612080e7          	jalr	1554(ra) # 8020aebc <either_copyin>
    8020f8b2:	ee055de3          	bgez	a0,8020f7ac <sys_pselect6+0x8e>
		return -EFAULT;
    8020f8b6:	5549                	li	a0,-14
    8020f8b8:	b765                	j	8020f860 <sys_pselect6+0x142>
	if (utoaddr && either_copyin(1, (char *)&timeout, utoaddr, sizeof(timeout)) < 0)
    8020f8ba:	46c1                	li	a3,16
    8020f8bc:	e2040593          	addi	a1,s0,-480
    8020f8c0:	4505                	li	a0,1
    8020f8c2:	ffffb097          	auipc	ra,0xffffb
    8020f8c6:	5fa080e7          	jalr	1530(ra) # 8020aebc <either_copyin>
    8020f8ca:	ee0555e3          	bgez	a0,8020f7b4 <sys_pselect6+0x96>
		return -EFAULT;
    8020f8ce:	5549                	li	a0,-14
    8020f8d0:	bf41                	j	8020f860 <sys_pselect6+0x142>
		printf(") ...\n");
    8020f8d2:	00004517          	auipc	a0,0x4
    8020f8d6:	5ce50513          	addi	a0,a0,1486 # 80213ea0 <UNAME_VERSION+0x308>
    8020f8da:	ffff9097          	auipc	ra,0xffff9
    8020f8de:	e56080e7          	jalr	-426(ra) # 80208730 <printf>
    8020f8e2:	bdf5                	j	8020f7de <sys_pselect6+0xc0>
		either_copyout(1, urfds, (char *)&rfds, sizeof(struct fdset));
    8020f8e4:	08000693          	li	a3,128
    8020f8e8:	f3040613          	addi	a2,s0,-208
    8020f8ec:	4505                	li	a0,1
    8020f8ee:	ffffb097          	auipc	ra,0xffffb
    8020f8f2:	578080e7          	jalr	1400(ra) # 8020ae66 <either_copyout>
    8020f8f6:	bf99                	j	8020f84c <sys_pselect6+0x12e>
		either_copyout(1, uwfds, (char *)&wfds, sizeof(struct fdset));
    8020f8f8:	08000693          	li	a3,128
    8020f8fc:	eb040613          	addi	a2,s0,-336
    8020f900:	4505                	li	a0,1
    8020f902:	ffffb097          	auipc	ra,0xffffb
    8020f906:	564080e7          	jalr	1380(ra) # 8020ae66 <either_copyout>
    8020f90a:	b7a1                	j	8020f852 <sys_pselect6+0x134>
		either_copyout(1, uexfds, (char *)&exfds, sizeof(struct fdset));
    8020f90c:	08000693          	li	a3,128
    8020f910:	e3040613          	addi	a2,s0,-464
    8020f914:	4505                	li	a0,1
    8020f916:	ffffb097          	auipc	ra,0xffffb
    8020f91a:	550080e7          	jalr	1360(ra) # 8020ae66 <either_copyout>
    8020f91e:	bf2d                	j	8020f858 <sys_pselect6+0x13a>
		printf("pid %d: return from pselect(", p->pid);
    8020f920:	04092583          	lw	a1,64(s2)
    8020f924:	00004517          	auipc	a0,0x4
    8020f928:	59450513          	addi	a0,a0,1428 # 80213eb8 <UNAME_VERSION+0x320>
    8020f92c:	ffff9097          	auipc	ra,0xffff9
    8020f930:	e04080e7          	jalr	-508(ra) # 80208730 <printf>
    8020f934:	b72d                	j	8020f85e <sys_pselect6+0x140>
		return -EFAULT;
    8020f936:	5549                	li	a0,-14
    8020f938:	b725                	j	8020f860 <sys_pselect6+0x142>

000000008020f93a <sys_exit_group>:
#include "include/vm.h"
#include "include/uname.h"
#include "include/copy.h"

uint64
sys_exit_group(void){
    8020f93a:	1141                	addi	sp,sp,-16
    8020f93c:	e422                	sd	s0,8(sp)
    8020f93e:	0800                	addi	s0,sp,16
  //printf("exit group\n");
  return 0;
}
    8020f940:	4501                	li	a0,0
    8020f942:	6422                	ld	s0,8(sp)
    8020f944:	0141                	addi	sp,sp,16
    8020f946:	8082                	ret

000000008020f948 <sys_rt_sigreturn>:

uint64
sys_rt_sigreturn(void){
    8020f948:	1141                	addi	sp,sp,-16
    8020f94a:	e406                	sd	ra,8(sp)
    8020f94c:	e022                	sd	s0,0(sp)
    8020f94e:	0800                	addi	s0,sp,16
  sigreturn();
    8020f950:	ffff9097          	auipc	ra,0xffff9
    8020f954:	960080e7          	jalr	-1696(ra) # 802082b0 <sigreturn>
  return 0;
}
    8020f958:	4501                	li	a0,0
    8020f95a:	60a2                	ld	ra,8(sp)
    8020f95c:	6402                	ld	s0,0(sp)
    8020f95e:	0141                	addi	sp,sp,16
    8020f960:	8082                	ret

000000008020f962 <sys_rt_sigprocmask>:

uint64 sys_rt_sigprocmask(void){
    8020f962:	7139                	addi	sp,sp,-64
    8020f964:	fc06                	sd	ra,56(sp)
    8020f966:	f822                	sd	s0,48(sp)
    8020f968:	0080                	addi	s0,sp,64
  int how;
	uint64 uptr_set, uptr_oldset;

	__sigset_t set, oldset;

	argint(0, &how);
    8020f96a:	fec40593          	addi	a1,s0,-20
    8020f96e:	4501                	li	a0,0
    8020f970:	ffffd097          	auipc	ra,0xffffd
    8020f974:	e8c080e7          	jalr	-372(ra) # 8020c7fc <argint>
	argaddr(1, &uptr_set);
    8020f978:	fe040593          	addi	a1,s0,-32
    8020f97c:	4505                	li	a0,1
    8020f97e:	ffffd097          	auipc	ra,0xffffd
    8020f982:	ea0080e7          	jalr	-352(ra) # 8020c81e <argaddr>
	argaddr(2, &uptr_oldset);
    8020f986:	fd840593          	addi	a1,s0,-40
    8020f98a:	4509                	li	a0,2
    8020f98c:	ffffd097          	auipc	ra,0xffffd
    8020f990:	e92080e7          	jalr	-366(ra) # 8020c81e <argaddr>

	if (uptr_set && either_copyin(1, (char*)&set, uptr_set, SIGSET_LEN * 8) < 0) {
    8020f994:	fe043603          	ld	a2,-32(s0)
    8020f998:	ee05                	bnez	a2,8020f9d0 <sys_rt_sigprocmask+0x6e>
		return -1;
	}

	if (sigprocmask(how, &set, uptr_oldset ? &oldset : NULL)) {
    8020f99a:	fd843783          	ld	a5,-40(s0)
    8020f99e:	00f037b3          	snez	a5,a5
    8020f9a2:	40f007b3          	neg	a5,a5
    8020f9a6:	fc840613          	addi	a2,s0,-56
    8020f9aa:	8e7d                	and	a2,a2,a5
    8020f9ac:	fd040593          	addi	a1,s0,-48
    8020f9b0:	fec42503          	lw	a0,-20(s0)
    8020f9b4:	ffff8097          	auipc	ra,0xffff8
    8020f9b8:	4f8080e7          	jalr	1272(ra) # 80207eac <sigprocmask>
		return -1;
    8020f9bc:	55fd                	li	a1,-1
	if (sigprocmask(how, &set, uptr_oldset ? &oldset : NULL)) {
    8020f9be:	e501                	bnez	a0,8020f9c6 <sys_rt_sigprocmask+0x64>
	}

	if (uptr_oldset && either_copyout(1, uptr_oldset, (char*)&oldset, SIGSET_LEN * 8) < 0) {
    8020f9c0:	fd843583          	ld	a1,-40(s0)
    8020f9c4:	e195                	bnez	a1,8020f9e8 <sys_rt_sigprocmask+0x86>
		return -1;
	}

	return 0;

}
    8020f9c6:	852e                	mv	a0,a1
    8020f9c8:	70e2                	ld	ra,56(sp)
    8020f9ca:	7442                	ld	s0,48(sp)
    8020f9cc:	6121                	addi	sp,sp,64
    8020f9ce:	8082                	ret
	if (uptr_set && either_copyin(1, (char*)&set, uptr_set, SIGSET_LEN * 8) < 0) {
    8020f9d0:	46a1                	li	a3,8
    8020f9d2:	fd040593          	addi	a1,s0,-48
    8020f9d6:	4505                	li	a0,1
    8020f9d8:	ffffb097          	auipc	ra,0xffffb
    8020f9dc:	4e4080e7          	jalr	1252(ra) # 8020aebc <either_copyin>
    8020f9e0:	fa055de3          	bgez	a0,8020f99a <sys_rt_sigprocmask+0x38>
		return -1;
    8020f9e4:	55fd                	li	a1,-1
    8020f9e6:	b7c5                	j	8020f9c6 <sys_rt_sigprocmask+0x64>
	if (uptr_oldset && either_copyout(1, uptr_oldset, (char*)&oldset, SIGSET_LEN * 8) < 0) {
    8020f9e8:	46a1                	li	a3,8
    8020f9ea:	fc840613          	addi	a2,s0,-56
    8020f9ee:	4505                	li	a0,1
    8020f9f0:	ffffb097          	auipc	ra,0xffffb
    8020f9f4:	476080e7          	jalr	1142(ra) # 8020ae66 <either_copyout>
    8020f9f8:	43f55593          	srai	a1,a0,0x3f
    8020f9fc:	b7e9                	j	8020f9c6 <sys_rt_sigprocmask+0x64>

000000008020f9fe <sys_rt_sigaction>:
uint64 sys_rt_sigaction(void) {
    8020f9fe:	711d                	addi	sp,sp,-96
    8020fa00:	ec86                	sd	ra,88(sp)
    8020fa02:	e8a2                	sd	s0,80(sp)
    8020fa04:	1080                	addi	s0,sp,96
	int signum;
	uint64 uptr_act;		// struct sigaction const *act
	uint64 uptr_oldact;		// struct sigaction *oldact

	argint(0, &signum);
    8020fa06:	fec40593          	addi	a1,s0,-20
    8020fa0a:	4501                	li	a0,0
    8020fa0c:	ffffd097          	auipc	ra,0xffffd
    8020fa10:	df0080e7          	jalr	-528(ra) # 8020c7fc <argint>
	argaddr(1, &uptr_act);
    8020fa14:	fe040593          	addi	a1,s0,-32
    8020fa18:	4505                	li	a0,1
    8020fa1a:	ffffd097          	auipc	ra,0xffffd
    8020fa1e:	e04080e7          	jalr	-508(ra) # 8020c81e <argaddr>
	argaddr(2, &uptr_oldact);
    8020fa22:	fd840593          	addi	a1,s0,-40
    8020fa26:	4509                	li	a0,2
    8020fa28:	ffffd097          	auipc	ra,0xffffd
    8020fa2c:	df6080e7          	jalr	-522(ra) # 8020c81e <argaddr>
	// copy struct sigaction from user space 
	struct sigaction act;
	struct sigaction oldact;

	//__debug_info("[sigaction]  uptr_act : %p,uptr_oldact : %p\n",uptr_act,uptr_oldact);
	if (uptr_act) {
    8020fa30:	fe043603          	ld	a2,-32(s0)
    8020fa34:	e609                	bnez	a2,8020fa3e <sys_rt_sigaction+0x40>
			__debug_info("[sigaction] return -1\n");
			return -1;
		}
	}

	if (set_sigaction(
    8020fa36:	fec42503          	lw	a0,-20(s0)
    8020fa3a:	4581                	li	a1,0
    8020fa3c:	a015                	j	8020fa60 <sys_rt_sigaction+0x62>
			either_copyin(1, (char*)&(act.__sigaction_handler), uptr_act, sizeof(__sighandler_t)) < 0 
    8020fa3e:	46a1                	li	a3,8
    8020fa40:	fc040593          	addi	a1,s0,-64
    8020fa44:	4505                	li	a0,1
    8020fa46:	ffffb097          	auipc	ra,0xffffb
    8020fa4a:	476080e7          	jalr	1142(ra) # 8020aebc <either_copyin>
		if (
    8020fa4e:	02054f63          	bltz	a0,8020fa8c <sys_rt_sigaction+0x8e>
	if (set_sigaction(
    8020fa52:	fec42503          	lw	a0,-20(s0)
    8020fa56:	fe043783          	ld	a5,-32(s0)
    8020fa5a:	fc040593          	addi	a1,s0,-64
    8020fa5e:	c3a9                	beqz	a5,8020faa0 <sys_rt_sigaction+0xa2>
    8020fa60:	fd843783          	ld	a5,-40(s0)
    8020fa64:	00f037b3          	snez	a5,a5
    8020fa68:	40f007b3          	neg	a5,a5
    8020fa6c:	fa840613          	addi	a2,s0,-88
    8020fa70:	8e7d                	and	a2,a2,a5
    8020fa72:	ffff8097          	auipc	ra,0xffff8
    8020fa76:	3b4080e7          	jalr	948(ra) # 80207e26 <set_sigaction>
    8020fa7a:	04054063          	bltz	a0,8020faba <sys_rt_sigaction+0xbc>
	) < 0) {
		//__debug_info("[sigaction] return -1\n");
		return -1;
	}

	if (uptr_oldact) {
    8020fa7e:	fd843503          	ld	a0,-40(s0)
    8020fa82:	e10d                	bnez	a0,8020faa4 <sys_rt_sigaction+0xa6>
			return -1;
		}
	}
	//__debug_info("[sigaction] return 0\n");
	return 0;
}
    8020fa84:	60e6                	ld	ra,88(sp)
    8020fa86:	6446                	ld	s0,80(sp)
    8020fa88:	6125                	addi	sp,sp,96
    8020fa8a:	8082                	ret
			__debug_info("[sigaction] return -1\n");
    8020fa8c:	00004517          	auipc	a0,0x4
    8020fa90:	44c50513          	addi	a0,a0,1100 # 80213ed8 <UNAME_VERSION+0x340>
    8020fa94:	ffff9097          	auipc	ra,0xffff9
    8020fa98:	e62080e7          	jalr	-414(ra) # 802088f6 <__debug_info>
			return -1;
    8020fa9c:	557d                	li	a0,-1
    8020fa9e:	b7dd                	j	8020fa84 <sys_rt_sigaction+0x86>
	if (set_sigaction(
    8020faa0:	4581                	li	a1,0
    8020faa2:	bf7d                	j	8020fa60 <sys_rt_sigaction+0x62>
			either_copyout(1,uptr_oldact, (char*)&(act.__sigaction_handler), sizeof(__sighandler_t)) < 0 
    8020faa4:	46a1                	li	a3,8
    8020faa6:	fc040613          	addi	a2,s0,-64
    8020faaa:	85aa                	mv	a1,a0
    8020faac:	4505                	li	a0,1
    8020faae:	ffffb097          	auipc	ra,0xffffb
    8020fab2:	3b8080e7          	jalr	952(ra) # 8020ae66 <either_copyout>
		if (
    8020fab6:	957d                	srai	a0,a0,0x3f
    8020fab8:	b7f1                	j	8020fa84 <sys_rt_sigaction+0x86>
		return -1;
    8020faba:	557d                	li	a0,-1
    8020fabc:	b7e1                	j	8020fa84 <sys_rt_sigaction+0x86>

000000008020fabe <sys_prlimit64>:

//int prlimit(pid_t pid, int resource, const struct rlimit *new_limit,struct rlimit *old_limit);
uint64
sys_prlimit64(void){
    8020fabe:	711d                	addi	sp,sp,-96
    8020fac0:	ec86                	sd	ra,88(sp)
    8020fac2:	e8a2                	sd	s0,80(sp)
    8020fac4:	e4a6                	sd	s1,72(sp)
    8020fac6:	e0ca                	sd	s2,64(sp)
    8020fac8:	fc4e                	sd	s3,56(sp)
    8020faca:	1080                	addi	s0,sp,96
  int resource;
  uint64 newrlimitaddr;
  uint64 oldrlimitaddr;
  struct rlimit new_limit;
  struct rlimit old_limit;
  struct proc* p = myproc();
    8020facc:	ffffc097          	auipc	ra,0xffffc
    8020fad0:	980080e7          	jalr	-1664(ra) # 8020b44c <myproc>
    8020fad4:	89aa                	mv	s3,a0
  
  if(argint(0,&pid)<0){
    8020fad6:	fcc40593          	addi	a1,s0,-52
    8020fada:	4501                	li	a0,0
    8020fadc:	ffffd097          	auipc	ra,0xffffd
    8020fae0:	d20080e7          	jalr	-736(ra) # 8020c7fc <argint>
    8020fae4:	0c054163          	bltz	a0,8020fba6 <sys_prlimit64+0xe8>
    return -1;
  }

  struct proc* limitp = pid==0?p:findproc(pid);
    8020fae8:	fcc42503          	lw	a0,-52(s0)
    8020faec:	84ce                	mv	s1,s3
    8020faee:	e125                	bnez	a0,8020fb4e <sys_prlimit64+0x90>
  if(!limitp)return -1;
    8020faf0:	cccd                	beqz	s1,8020fbaa <sys_prlimit64+0xec>

  if(argint(1,&resource)<0){
    8020faf2:	fc840593          	addi	a1,s0,-56
    8020faf6:	4505                	li	a0,1
    8020faf8:	ffffd097          	auipc	ra,0xffffd
    8020fafc:	d04080e7          	jalr	-764(ra) # 8020c7fc <argint>
    8020fb00:	87aa                	mv	a5,a0
    return -1;
    8020fb02:	557d                	li	a0,-1
  if(argint(1,&resource)<0){
    8020fb04:	0207ce63          	bltz	a5,8020fb40 <sys_prlimit64+0x82>
  }
  newrlimitaddr = argstruct(2,&new_limit,sizeof(new_limit));
    8020fb08:	4641                	li	a2,16
    8020fb0a:	fb840593          	addi	a1,s0,-72
    8020fb0e:	4509                	li	a0,2
    8020fb10:	ffffd097          	auipc	ra,0xffffd
    8020fb14:	e3a080e7          	jalr	-454(ra) # 8020c94a <argstruct>
    8020fb18:	892a                	mv	s2,a0
  oldrlimitaddr = argstruct(3,&old_limit,sizeof(old_limit));
    8020fb1a:	4641                	li	a2,16
    8020fb1c:	fa840593          	addi	a1,s0,-88
    8020fb20:	450d                	li	a0,3
    8020fb22:	ffffd097          	auipc	ra,0xffffd
    8020fb26:	e28080e7          	jalr	-472(ra) # 8020c94a <argstruct>
    8020fb2a:	85aa                	mv	a1,a0
  if(!newrlimitaddr && !oldrlimitaddr) return -1;
    8020fb2c:	00a967b3          	or	a5,s2,a0
    8020fb30:	2781                	sext.w	a5,a5
    8020fb32:	557d                	li	a0,-1
    8020fb34:	c791                	beqz	a5,8020fb40 <sys_prlimit64+0x82>
  // if(newrlimitaddr)printf("[prlimit]new limit %d %d\n",new_limit.rlim_cur,new_limit.rlim_max);
  // else printf("[prlimit]new limit (nil)\n");
  // if(oldrlimitaddr)printf("[prlimit]old limit %d %d\n",old_limit.rlim_cur,old_limit.rlim_max);
  // else printf("[prlimit]old limit (nil)\n");
  
  switch(resource){
    8020fb36:	fc842703          	lw	a4,-56(s0)
    8020fb3a:	479d                	li	a5,7
    8020fb3c:	00f70f63          	beq	a4,a5,8020fb5a <sys_prlimit64+0x9c>
      break;
    default:
    	return -1;
  }
  return 0;
}
    8020fb40:	60e6                	ld	ra,88(sp)
    8020fb42:	6446                	ld	s0,80(sp)
    8020fb44:	64a6                	ld	s1,72(sp)
    8020fb46:	6906                	ld	s2,64(sp)
    8020fb48:	79e2                	ld	s3,56(sp)
    8020fb4a:	6125                	addi	sp,sp,96
    8020fb4c:	8082                	ret
  struct proc* limitp = pid==0?p:findproc(pid);
    8020fb4e:	ffff2097          	auipc	ra,0xffff2
    8020fb52:	c90080e7          	jalr	-880(ra) # 802017de <findproc>
    8020fb56:	84aa                	mv	s1,a0
    8020fb58:	bf61                	j	8020faf0 <sys_prlimit64+0x32>
      if(oldrlimitaddr){
    8020fb5a:	ed91                	bnez	a1,8020fb76 <sys_prlimit64+0xb8>
  return 0;
    8020fb5c:	4501                	li	a0,0
      if(newrlimitaddr){
    8020fb5e:	fe0901e3          	beqz	s2,8020fb40 <sys_prlimit64+0x82>
        limitp->filelimit = MIN(new_limit.rlim_cur,new_limit.rlim_max);
    8020fb62:	fb843703          	ld	a4,-72(s0)
    8020fb66:	fc043783          	ld	a5,-64(s0)
    8020fb6a:	00f77363          	bgeu	a4,a5,8020fb70 <sys_prlimit64+0xb2>
    8020fb6e:	87ba                	mv	a5,a4
    8020fb70:	f0fc                	sd	a5,224(s1)
  return 0;
    8020fb72:	4501                	li	a0,0
    8020fb74:	b7f1                	j	8020fb40 <sys_prlimit64+0x82>
        old_limit.rlim_cur = old_limit.rlim_max = NOFILEMAX(limitp);
    8020fb76:	70fc                	ld	a5,224(s1)
    8020fb78:	0c800713          	li	a4,200
    8020fb7c:	00f75463          	bge	a4,a5,8020fb84 <sys_prlimit64+0xc6>
    8020fb80:	0c800793          	li	a5,200
    8020fb84:	faf43823          	sd	a5,-80(s0)
    8020fb88:	faf43423          	sd	a5,-88(s0)
        if(copyout(p->pagetable,oldrlimitaddr,(char*)&old_limit,sizeof(old_limit))<0){
    8020fb8c:	46c1                	li	a3,16
    8020fb8e:	fa840613          	addi	a2,s0,-88
    8020fb92:	0609b503          	ld	a0,96(s3)
    8020fb96:	ffffb097          	auipc	ra,0xffffb
    8020fb9a:	f56080e7          	jalr	-170(ra) # 8020aaec <copyout>
    8020fb9e:	fa055fe3          	bgez	a0,8020fb5c <sys_prlimit64+0x9e>
          return -1;
    8020fba2:	557d                	li	a0,-1
    8020fba4:	bf71                	j	8020fb40 <sys_prlimit64+0x82>
    return -1;
    8020fba6:	557d                	li	a0,-1
    8020fba8:	bf61                	j	8020fb40 <sys_prlimit64+0x82>
  if(!limitp)return -1;
    8020fbaa:	557d                	li	a0,-1
    8020fbac:	bf51                	j	8020fb40 <sys_prlimit64+0x82>

000000008020fbae <sys_kill>:

uint64 sys_kill(){
    8020fbae:	1101                	addi	sp,sp,-32
    8020fbb0:	ec06                	sd	ra,24(sp)
    8020fbb2:	e822                	sd	s0,16(sp)
    8020fbb4:	1000                	addi	s0,sp,32
  int sig;
  int pid;
  argint(0,&pid);
    8020fbb6:	fe840593          	addi	a1,s0,-24
    8020fbba:	4501                	li	a0,0
    8020fbbc:	ffffd097          	auipc	ra,0xffffd
    8020fbc0:	c40080e7          	jalr	-960(ra) # 8020c7fc <argint>
  argint(1,&sig);
    8020fbc4:	fec40593          	addi	a1,s0,-20
    8020fbc8:	4505                	li	a0,1
    8020fbca:	ffffd097          	auipc	ra,0xffffd
    8020fbce:	c32080e7          	jalr	-974(ra) # 8020c7fc <argint>
  return kill(pid,sig);
    8020fbd2:	fec42583          	lw	a1,-20(s0)
    8020fbd6:	fe842503          	lw	a0,-24(s0)
    8020fbda:	ffff3097          	auipc	ra,0xffff3
    8020fbde:	820080e7          	jalr	-2016(ra) # 802023fa <kill>
}
    8020fbe2:	60e2                	ld	ra,24(sp)
    8020fbe4:	6442                	ld	s0,16(sp)
    8020fbe6:	6105                	addi	sp,sp,32
    8020fbe8:	8082                	ret

000000008020fbea <sys_tgkill>:

uint64 sys_tgkill(){
    8020fbea:	1101                	addi	sp,sp,-32
    8020fbec:	ec06                	sd	ra,24(sp)
    8020fbee:	e822                	sd	s0,16(sp)
    8020fbf0:	1000                	addi	s0,sp,32
  int sig;
  int tid;
  int pid;
  argint(0,&pid);
    8020fbf2:	fe440593          	addi	a1,s0,-28
    8020fbf6:	4501                	li	a0,0
    8020fbf8:	ffffd097          	auipc	ra,0xffffd
    8020fbfc:	c04080e7          	jalr	-1020(ra) # 8020c7fc <argint>
  argint(1,&tid);
    8020fc00:	fe840593          	addi	a1,s0,-24
    8020fc04:	4505                	li	a0,1
    8020fc06:	ffffd097          	auipc	ra,0xffffd
    8020fc0a:	bf6080e7          	jalr	-1034(ra) # 8020c7fc <argint>
  argint(2,&sig);
    8020fc0e:	fec40593          	addi	a1,s0,-20
    8020fc12:	4509                	li	a0,2
    8020fc14:	ffffd097          	auipc	ra,0xffffd
    8020fc18:	be8080e7          	jalr	-1048(ra) # 8020c7fc <argint>
  return tgkill(pid,tid,sig);
    8020fc1c:	fec42603          	lw	a2,-20(s0)
    8020fc20:	fe842583          	lw	a1,-24(s0)
    8020fc24:	fe442503          	lw	a0,-28(s0)
    8020fc28:	ffff3097          	auipc	ra,0xffff3
    8020fc2c:	8aa080e7          	jalr	-1878(ra) # 802024d2 <tgkill>
}
    8020fc30:	60e2                	ld	ra,24(sp)
    8020fc32:	6442                	ld	s0,16(sp)
    8020fc34:	6105                	addi	sp,sp,32
    8020fc36:	8082                	ret

000000008020fc38 <sys_mmap>:
#include "include/printf.h"
#include "include/errno.h"

uint64
sys_mmap(void)
{
    8020fc38:	7179                	addi	sp,sp,-48
    8020fc3a:	f406                	sd	ra,40(sp)
    8020fc3c:	f022                	sd	s0,32(sp)
    8020fc3e:	1800                	addi	s0,sp,48
  uint64 len;
  int prot;
  int flags;
  int fd;
  int off;
  if(argaddr(0, &start) < 0)
    8020fc40:	fe840593          	addi	a1,s0,-24
    8020fc44:	4501                	li	a0,0
    8020fc46:	ffffd097          	auipc	ra,0xffffd
    8020fc4a:	bd8080e7          	jalr	-1064(ra) # 8020c81e <argaddr>
    return -1;
    8020fc4e:	57fd                	li	a5,-1
  if(argaddr(0, &start) < 0)
    8020fc50:	08054b63          	bltz	a0,8020fce6 <sys_mmap+0xae>
  if(argaddr(1, &len) < 0)
    8020fc54:	fe040593          	addi	a1,s0,-32
    8020fc58:	4505                	li	a0,1
    8020fc5a:	ffffd097          	auipc	ra,0xffffd
    8020fc5e:	bc4080e7          	jalr	-1084(ra) # 8020c81e <argaddr>
    return -1;
    8020fc62:	57fd                	li	a5,-1
  if(argaddr(1, &len) < 0)
    8020fc64:	08054163          	bltz	a0,8020fce6 <sys_mmap+0xae>
  if(argint(2, &prot) < 0)
    8020fc68:	fdc40593          	addi	a1,s0,-36
    8020fc6c:	4509                	li	a0,2
    8020fc6e:	ffffd097          	auipc	ra,0xffffd
    8020fc72:	b8e080e7          	jalr	-1138(ra) # 8020c7fc <argint>
    return -1;
    8020fc76:	57fd                	li	a5,-1
  if(argint(2, &prot) < 0)
    8020fc78:	06054763          	bltz	a0,8020fce6 <sys_mmap+0xae>
  if(argint(3, &flags) < 0)
    8020fc7c:	fd840593          	addi	a1,s0,-40
    8020fc80:	450d                	li	a0,3
    8020fc82:	ffffd097          	auipc	ra,0xffffd
    8020fc86:	b7a080e7          	jalr	-1158(ra) # 8020c7fc <argint>
    return -1;
    8020fc8a:	57fd                	li	a5,-1
  if(argint(3, &flags) < 0)
    8020fc8c:	04054d63          	bltz	a0,8020fce6 <sys_mmap+0xae>
  if(argfd(4, &fd, NULL) < 0 && fd!=-1){
    8020fc90:	4601                	li	a2,0
    8020fc92:	fd440593          	addi	a1,s0,-44
    8020fc96:	4511                	li	a0,4
    8020fc98:	ffffd097          	auipc	ra,0xffffd
    8020fc9c:	bd8080e7          	jalr	-1064(ra) # 8020c870 <argfd>
    8020fca0:	00055863          	bgez	a0,8020fcb0 <sys_mmap+0x78>
    8020fca4:	fd442683          	lw	a3,-44(s0)
    8020fca8:	577d                	li	a4,-1
    //printf("fd:%d\n",fd);
    return -1;
    8020fcaa:	57fd                	li	a5,-1
  if(argfd(4, &fd, NULL) < 0 && fd!=-1){
    8020fcac:	02e69d63          	bne	a3,a4,8020fce6 <sys_mmap+0xae>
  }
  if(argint(5, &off) < 0)
    8020fcb0:	fd040593          	addi	a1,s0,-48
    8020fcb4:	4515                	li	a0,5
    8020fcb6:	ffffd097          	auipc	ra,0xffffd
    8020fcba:	b46080e7          	jalr	-1210(ra) # 8020c7fc <argint>
    return -1;
    8020fcbe:	57fd                	li	a5,-1
  if(argint(5, &off) < 0)
    8020fcc0:	02054363          	bltz	a0,8020fce6 <sys_mmap+0xae>

  uint64 ret = do_mmap(start, len, prot, flags, fd, off);
    8020fcc4:	fd042783          	lw	a5,-48(s0)
    8020fcc8:	fd442703          	lw	a4,-44(s0)
    8020fccc:	fd842683          	lw	a3,-40(s0)
    8020fcd0:	fdc42603          	lw	a2,-36(s0)
    8020fcd4:	fe043583          	ld	a1,-32(s0)
    8020fcd8:	fe843503          	ld	a0,-24(s0)
    8020fcdc:	ffffc097          	auipc	ra,0xffffc
    8020fce0:	474080e7          	jalr	1140(ra) # 8020c150 <do_mmap>
    8020fce4:	87aa                	mv	a5,a0
  // printf("[sys_map] ret(start) = %p\n",ret);
  return ret;
}
    8020fce6:	853e                	mv	a0,a5
    8020fce8:	70a2                	ld	ra,40(sp)
    8020fcea:	7402                	ld	s0,32(sp)
    8020fcec:	6145                	addi	sp,sp,48
    8020fcee:	8082                	ret

000000008020fcf0 <sys_brk>:

uint64
sys_brk(void)
{
    8020fcf0:	1101                	addi	sp,sp,-32
    8020fcf2:	ec06                	sd	ra,24(sp)
    8020fcf4:	e822                	sd	s0,16(sp)
    8020fcf6:	1000                	addi	s0,sp,32
  int n;
  if(argint(0, &n) < 0)
    8020fcf8:	fec40593          	addi	a1,s0,-20
    8020fcfc:	4501                	li	a0,0
    8020fcfe:	ffffd097          	auipc	ra,0xffffd
    8020fd02:	afe080e7          	jalr	-1282(ra) # 8020c7fc <argint>
    8020fd06:	87aa                	mv	a5,a0
    return -1;
    8020fd08:	557d                	li	a0,-1
  if(argint(0, &n) < 0)
    8020fd0a:	0007c863          	bltz	a5,8020fd1a <sys_brk+0x2a>
  return growproc(n);
    8020fd0e:	fec42503          	lw	a0,-20(s0)
    8020fd12:	ffffc097          	auipc	ra,0xffffc
    8020fd16:	25a080e7          	jalr	602(ra) # 8020bf6c <growproc>
}
    8020fd1a:	60e2                	ld	ra,24(sp)
    8020fd1c:	6442                	ld	s0,16(sp)
    8020fd1e:	6105                	addi	sp,sp,32
    8020fd20:	8082                	ret

000000008020fd22 <sys_munmap>:

uint64
sys_munmap(void)
{
    8020fd22:	1101                	addi	sp,sp,-32
    8020fd24:	ec06                	sd	ra,24(sp)
    8020fd26:	e822                	sd	s0,16(sp)
    8020fd28:	1000                	addi	s0,sp,32
  uint64 start;
  uint64 len;
  if(argaddr(0, &start) < 0 || argaddr(1, &len) < 0){
    8020fd2a:	fe840593          	addi	a1,s0,-24
    8020fd2e:	4501                	li	a0,0
    8020fd30:	ffffd097          	auipc	ra,0xffffd
    8020fd34:	aee080e7          	jalr	-1298(ra) # 8020c81e <argaddr>
    return -1;
    8020fd38:	57fd                	li	a5,-1
  if(argaddr(0, &start) < 0 || argaddr(1, &len) < 0){
    8020fd3a:	02054663          	bltz	a0,8020fd66 <sys_munmap+0x44>
    8020fd3e:	fe040593          	addi	a1,s0,-32
    8020fd42:	4505                	li	a0,1
    8020fd44:	ffffd097          	auipc	ra,0xffffd
    8020fd48:	ada080e7          	jalr	-1318(ra) # 8020c81e <argaddr>
    return -1;
    8020fd4c:	57fd                	li	a5,-1
  if(argaddr(0, &start) < 0 || argaddr(1, &len) < 0){
    8020fd4e:	00054c63          	bltz	a0,8020fd66 <sys_munmap+0x44>
  }
  return do_munmap(NULL, start, len);
    8020fd52:	fe043603          	ld	a2,-32(s0)
    8020fd56:	fe843583          	ld	a1,-24(s0)
    8020fd5a:	4501                	li	a0,0
    8020fd5c:	ffffc097          	auipc	ra,0xffffc
    8020fd60:	6b4080e7          	jalr	1716(ra) # 8020c410 <do_munmap>
    8020fd64:	87aa                	mv	a5,a0
}
    8020fd66:	853e                	mv	a0,a5
    8020fd68:	60e2                	ld	ra,24(sp)
    8020fd6a:	6442                	ld	s0,16(sp)
    8020fd6c:	6105                	addi	sp,sp,32
    8020fd6e:	8082                	ret

000000008020fd70 <sys_mprotect>:

uint64
sys_mprotect(void)
{
    8020fd70:	7179                	addi	sp,sp,-48
    8020fd72:	f406                	sd	ra,40(sp)
    8020fd74:	f022                	sd	s0,32(sp)
    8020fd76:	1800                	addi	s0,sp,48
  uint64 addr;
  uint64 len;
  int prot;
  if(argaddr(0, &addr) < 0)
    8020fd78:	fe840593          	addi	a1,s0,-24
    8020fd7c:	4501                	li	a0,0
    8020fd7e:	ffffd097          	auipc	ra,0xffffd
    8020fd82:	aa0080e7          	jalr	-1376(ra) # 8020c81e <argaddr>
  {
    return -1;
    8020fd86:	57fd                	li	a5,-1
  if(argaddr(0, &addr) < 0)
    8020fd88:	04054e63          	bltz	a0,8020fde4 <sys_mprotect+0x74>
  }
  if(argaddr(1, &len) < 0)
    8020fd8c:	fe040593          	addi	a1,s0,-32
    8020fd90:	4505                	li	a0,1
    8020fd92:	ffffd097          	auipc	ra,0xffffd
    8020fd96:	a8c080e7          	jalr	-1396(ra) # 8020c81e <argaddr>
  {
    return -1;
    8020fd9a:	57fd                	li	a5,-1
  if(argaddr(1, &len) < 0)
    8020fd9c:	04054463          	bltz	a0,8020fde4 <sys_mprotect+0x74>
  }
  if(argint(2, &prot) < 0)
    8020fda0:	fdc40593          	addi	a1,s0,-36
    8020fda4:	4509                	li	a0,2
    8020fda6:	ffffd097          	auipc	ra,0xffffd
    8020fdaa:	a56080e7          	jalr	-1450(ra) # 8020c7fc <argint>
    8020fdae:	04054063          	bltz	a0,8020fdee <sys_mprotect+0x7e>
  {
    return -1;
  }
  
  int perm = 0;
  if(prot & PROT_READ) 
    8020fdb2:	fdc42783          	lw	a5,-36(s0)
    8020fdb6:	0017f613          	andi	a2,a5,1
    8020fdba:	c219                	beqz	a2,8020fdc0 <sys_mprotect+0x50>
    perm  |= (PTE_R | PTE_A);
    8020fdbc:	04200613          	li	a2,66
  if(prot & PROT_WRITE)
    8020fdc0:	0027f713          	andi	a4,a5,2
    8020fdc4:	c319                	beqz	a4,8020fdca <sys_mprotect+0x5a>
    perm  |= (PTE_W | PTE_D);
    8020fdc6:	08466613          	ori	a2,a2,132
  if(prot & PROT_EXEC)
    8020fdca:	8b91                	andi	a5,a5,4
    8020fdcc:	c399                	beqz	a5,8020fdd2 <sys_mprotect+0x62>
    perm  |= (PTE_X | PTE_A);
    8020fdce:	04866613          	ori	a2,a2,72
    
  return uvmprotect(addr, len, perm);
    8020fdd2:	fe043583          	ld	a1,-32(s0)
    8020fdd6:	fe843503          	ld	a0,-24(s0)
    8020fdda:	ffffa097          	auipc	ra,0xffffa
    8020fdde:	04c080e7          	jalr	76(ra) # 80209e26 <uvmprotect>
    8020fde2:	87aa                	mv	a5,a0
}
    8020fde4:	853e                	mv	a0,a5
    8020fde6:	70a2                	ld	ra,40(sp)
    8020fde8:	7402                	ld	s0,32(sp)
    8020fdea:	6145                	addi	sp,sp,48
    8020fdec:	8082                	ret
    return -1;
    8020fdee:	57fd                	li	a5,-1
    8020fdf0:	bfd5                	j	8020fde4 <sys_mprotect+0x74>

000000008020fdf2 <sys_msync>:

uint64
sys_msync(void)
{
    8020fdf2:	7179                	addi	sp,sp,-48
    8020fdf4:	f406                	sd	ra,40(sp)
    8020fdf6:	f022                	sd	s0,32(sp)
    8020fdf8:	1800                	addi	s0,sp,48
	uint64 addr;
	uint64 len;
	int flags;

	argaddr(0, &addr);
    8020fdfa:	fe840593          	addi	a1,s0,-24
    8020fdfe:	4501                	li	a0,0
    8020fe00:	ffffd097          	auipc	ra,0xffffd
    8020fe04:	a1e080e7          	jalr	-1506(ra) # 8020c81e <argaddr>
	argaddr(1, &len);
    8020fe08:	fe040593          	addi	a1,s0,-32
    8020fe0c:	4505                	li	a0,1
    8020fe0e:	ffffd097          	auipc	ra,0xffffd
    8020fe12:	a10080e7          	jalr	-1520(ra) # 8020c81e <argaddr>
	argint(2, &flags);
    8020fe16:	fdc40593          	addi	a1,s0,-36
    8020fe1a:	4509                	li	a0,2
    8020fe1c:	ffffd097          	auipc	ra,0xffffd
    8020fe20:	9e0080e7          	jalr	-1568(ra) # 8020c7fc <argint>

	if (!(flags & (MS_ASYNC|MS_SYNC|MS_INVALIDATE)) ||
    8020fe24:	fdc42603          	lw	a2,-36(s0)
    8020fe28:	00767793          	andi	a5,a2,7
		((flags & MS_ASYNC) && (flags & MS_SYNC)) ||
		(addr % PGSIZE))
	{
		return -EINVAL;
    8020fe2c:	5529                	li	a0,-22
	if (!(flags & (MS_ASYNC|MS_SYNC|MS_INVALIDATE)) ||
    8020fe2e:	c395                	beqz	a5,8020fe52 <sys_msync+0x60>
    8020fe30:	00567793          	andi	a5,a2,5
    8020fe34:	4715                	li	a4,5
    8020fe36:	02e78263          	beq	a5,a4,8020fe5a <sys_msync+0x68>
		(addr % PGSIZE))
    8020fe3a:	fe843783          	ld	a5,-24(s0)
    8020fe3e:	03479713          	slli	a4,a5,0x34
		((flags & MS_ASYNC) && (flags & MS_SYNC)) ||
    8020fe42:	eb01                	bnez	a4,8020fe52 <sys_msync+0x60>
	}

	return do_msync(addr, len, flags);
    8020fe44:	fe043583          	ld	a1,-32(s0)
    8020fe48:	853e                	mv	a0,a5
    8020fe4a:	ffffc097          	auipc	ra,0xffffc
    8020fe4e:	7a4080e7          	jalr	1956(ra) # 8020c5ee <do_msync>
    8020fe52:	70a2                	ld	ra,40(sp)
    8020fe54:	7402                	ld	s0,32(sp)
    8020fe56:	6145                	addi	sp,sp,48
    8020fe58:	8082                	ret
		return -EINVAL;
    8020fe5a:	5529                	li	a0,-22
    8020fe5c:	bfdd                	j	8020fe52 <sys_msync+0x60>

000000008020fe5e <syscall>:
	[SYS_prlimit64]	"prlimit64",
	[SYS_renameat2]	"renameat2",
};
void
syscall(void)
{
    8020fe5e:	7179                	addi	sp,sp,-48
    8020fe60:	f406                	sd	ra,40(sp)
    8020fe62:	f022                	sd	s0,32(sp)
    8020fe64:	ec26                	sd	s1,24(sp)
    8020fe66:	e84a                	sd	s2,16(sp)
    8020fe68:	e44e                	sd	s3,8(sp)
    8020fe6a:	1800                	addi	s0,sp,48
  int num;
  struct proc *p = myproc();
    8020fe6c:	ffffb097          	auipc	ra,0xffffb
    8020fe70:	5e0080e7          	jalr	1504(ra) # 8020b44c <myproc>
    8020fe74:	84aa                	mv	s1,a0

  num = p->trapframe->a7;
    8020fe76:	06853903          	ld	s2,104(a0)
    8020fe7a:	0a893783          	ld	a5,168(s2)
    8020fe7e:	0007899b          	sext.w	s3,a5
  if(num > 0 && num < NELEM(syscalls) && syscalls[num]) {
    8020fe82:	37fd                	addiw	a5,a5,-1
    8020fe84:	11300713          	li	a4,275
    8020fe88:	04f76863          	bltu	a4,a5,8020fed8 <syscall+0x7a>
    8020fe8c:	00399713          	slli	a4,s3,0x3
    8020fe90:	00005797          	auipc	a5,0x5
    8020fe94:	bb878793          	addi	a5,a5,-1096 # 80214a48 <syscalls>
    8020fe98:	97ba                	add	a5,a5,a4
    8020fe9a:	639c                	ld	a5,0(a5)
    8020fe9c:	cf95                	beqz	a5,8020fed8 <syscall+0x7a>
    //printf("[start]-----pid:%d syscall %d:%s-----\n",myproc()->pid,num,sysnames[num]);
    p->trapframe->a0 = syscalls[num]();
    8020fe9e:	9782                	jalr	a5
    8020fea0:	06a93823          	sd	a0,112(s2)
    //printf("[end]----pid:%d syscall %d:%s return %p-----\n",myproc()->pid,num,sysnames[num],p->trapframe->a0);
        // trace
    if ((p->tmask & (1 << num)) != 0) {
    8020fea4:	1144a783          	lw	a5,276(s1)
    8020fea8:	4137d7bb          	sraw	a5,a5,s3
    8020feac:	8b85                	andi	a5,a5,1
    8020feae:	c7a1                	beqz	a5,8020fef6 <syscall+0x98>
      printf("pid %d: %s -> %d\n", p->pid, sysnames[num], p->trapframe->a0);
    8020feb0:	74b8                	ld	a4,104(s1)
    8020feb2:	098e                	slli	s3,s3,0x3
    8020feb4:	00004797          	auipc	a5,0x4
    8020feb8:	2ec78793          	addi	a5,a5,748 # 802141a0 <sysnames>
    8020febc:	99be                	add	s3,s3,a5
    8020febe:	7b34                	ld	a3,112(a4)
    8020fec0:	0009b603          	ld	a2,0(s3)
    8020fec4:	40ac                	lw	a1,64(s1)
    8020fec6:	00004517          	auipc	a0,0x4
    8020feca:	02a50513          	addi	a0,a0,42 # 80213ef0 <UNAME_VERSION+0x358>
    8020fece:	ffff9097          	auipc	ra,0xffff9
    8020fed2:	862080e7          	jalr	-1950(ra) # 80208730 <printf>
    8020fed6:	a005                	j	8020fef6 <syscall+0x98>
    }
  } else {
    printf("pid %d %s: unknown sys call %d\n",
    8020fed8:	86ce                	mv	a3,s3
    8020feda:	10048613          	addi	a2,s1,256
    8020fede:	40ac                	lw	a1,64(s1)
    8020fee0:	00004517          	auipc	a0,0x4
    8020fee4:	02850513          	addi	a0,a0,40 # 80213f08 <UNAME_VERSION+0x370>
    8020fee8:	ffff9097          	auipc	ra,0xffff9
    8020feec:	848080e7          	jalr	-1976(ra) # 80208730 <printf>
            p->pid, p->name, num);
    p->trapframe->a0 = -1;
    8020fef0:	74bc                	ld	a5,104(s1)
    8020fef2:	577d                	li	a4,-1
    8020fef4:	fbb8                	sd	a4,112(a5)
  }
}
    8020fef6:	70a2                	ld	ra,40(sp)
    8020fef8:	7402                	ld	s0,32(sp)
    8020fefa:	64e2                	ld	s1,24(sp)
    8020fefc:	6942                	ld	s2,16(sp)
    8020fefe:	69a2                	ld	s3,8(sp)
    8020ff00:	6145                	addi	sp,sp,48
    8020ff02:	8082                	ret
	...

0000000080210000 <_trampoline>:
    80210000:	14051573          	csrrw	a0,sscratch,a0
    80210004:	02153423          	sd	ra,40(a0)
    80210008:	02253823          	sd	sp,48(a0)
    8021000c:	02353c23          	sd	gp,56(a0)
    80210010:	04453023          	sd	tp,64(a0)
    80210014:	04553423          	sd	t0,72(a0)
    80210018:	04653823          	sd	t1,80(a0)
    8021001c:	04753c23          	sd	t2,88(a0)
    80210020:	f120                	sd	s0,96(a0)
    80210022:	f524                	sd	s1,104(a0)
    80210024:	fd2c                	sd	a1,120(a0)
    80210026:	e150                	sd	a2,128(a0)
    80210028:	e554                	sd	a3,136(a0)
    8021002a:	e958                	sd	a4,144(a0)
    8021002c:	ed5c                	sd	a5,152(a0)
    8021002e:	0b053023          	sd	a6,160(a0)
    80210032:	0b153423          	sd	a7,168(a0)
    80210036:	0b253823          	sd	s2,176(a0)
    8021003a:	0b353c23          	sd	s3,184(a0)
    8021003e:	0d453023          	sd	s4,192(a0)
    80210042:	0d553423          	sd	s5,200(a0)
    80210046:	0d653823          	sd	s6,208(a0)
    8021004a:	0d753c23          	sd	s7,216(a0)
    8021004e:	0f853023          	sd	s8,224(a0)
    80210052:	0f953423          	sd	s9,232(a0)
    80210056:	0fa53823          	sd	s10,240(a0)
    8021005a:	0fb53c23          	sd	s11,248(a0)
    8021005e:	11c53023          	sd	t3,256(a0)
    80210062:	11d53423          	sd	t4,264(a0)
    80210066:	11e53823          	sd	t5,272(a0)
    8021006a:	11f53c23          	sd	t6,280(a0)
    8021006e:	140022f3          	csrr	t0,sscratch
    80210072:	06553823          	sd	t0,112(a0)
    80210076:	00853103          	ld	sp,8(a0)
    8021007a:	02053203          	ld	tp,32(a0)
    8021007e:	01053283          	ld	t0,16(a0)
    80210082:	00053303          	ld	t1,0(a0)
    80210086:	18031073          	csrw	satp,t1
    8021008a:	12000073          	sfence.vma
    8021008e:	8282                	jr	t0

0000000080210090 <userret>:
    80210090:	18059073          	csrw	satp,a1
    80210094:	12000073          	sfence.vma
    80210098:	07053283          	ld	t0,112(a0)
    8021009c:	14029073          	csrw	sscratch,t0
    802100a0:	02853083          	ld	ra,40(a0)
    802100a4:	03053103          	ld	sp,48(a0)
    802100a8:	03853183          	ld	gp,56(a0)
    802100ac:	04053203          	ld	tp,64(a0)
    802100b0:	04853283          	ld	t0,72(a0)
    802100b4:	05053303          	ld	t1,80(a0)
    802100b8:	05853383          	ld	t2,88(a0)
    802100bc:	7120                	ld	s0,96(a0)
    802100be:	7524                	ld	s1,104(a0)
    802100c0:	7d2c                	ld	a1,120(a0)
    802100c2:	6150                	ld	a2,128(a0)
    802100c4:	6554                	ld	a3,136(a0)
    802100c6:	6958                	ld	a4,144(a0)
    802100c8:	6d5c                	ld	a5,152(a0)
    802100ca:	0a053803          	ld	a6,160(a0)
    802100ce:	0a853883          	ld	a7,168(a0)
    802100d2:	0b053903          	ld	s2,176(a0)
    802100d6:	0b853983          	ld	s3,184(a0)
    802100da:	0c053a03          	ld	s4,192(a0)
    802100de:	0c853a83          	ld	s5,200(a0)
    802100e2:	0d053b03          	ld	s6,208(a0)
    802100e6:	0d853b83          	ld	s7,216(a0)
    802100ea:	0e053c03          	ld	s8,224(a0)
    802100ee:	0e853c83          	ld	s9,232(a0)
    802100f2:	0f053d03          	ld	s10,240(a0)
    802100f6:	0f853d83          	ld	s11,248(a0)
    802100fa:	10053e03          	ld	t3,256(a0)
    802100fe:	10853e83          	ld	t4,264(a0)
    80210102:	11053f03          	ld	t5,272(a0)
    80210106:	11853f83          	ld	t6,280(a0)
    8021010a:	14051573          	csrrw	a0,sscratch,a0
    8021010e:	10200073          	sret
	...

0000000080211000 <_sig_trampoline>:
    80211000:	9582                	jalr	a1
    80211002:	08b00893          	li	a7,139
    80211006:	00000073          	ecall

000000008021100a <default_sigaction>:
    8021100a:	557d                	li	a0,-1
    8021100c:	05d00893          	li	a7,93
    80211010:	00000073          	ecall
	...
