
src/kernel:     file format elf64-littleriscv


Disassembly of section .text:

0000000080200000 <_entry>:
    80200000:	00516297          	auipc	t0,0x516
    80200004:	24828293          	addi	t0,t0,584 # 80716248 <__first_boot_magic>
    80200008:	0002b303          	ld	t1,0(t0)
    8020000c:	6399                	lui	t2,0x6
    8020000e:	a5a3839b          	addiw	t2,t2,-1446
    80200012:	00731863          	bne	t1,t2,80200022 <_secondary_boot>
    80200016:	0053f117          	auipc	sp,0x53f
    8020001a:	fea10113          	addi	sp,sp,-22 # 8073f000 <bcache>
    8020001e:	293080ef          	jal	ra,80208ab0 <__get_boot_hartid>

0000000080200022 <_secondary_boot>:
    80200022:	00000293          	li	t0,0
    80200026:	00150293          	addi	t0,a0,1
    8020002a:	02be                	slli	t0,t0,0xf
    8020002c:	00517117          	auipc	sp,0x517
    80200030:	fd410113          	addi	sp,sp,-44 # 80717000 <boot_stack>
    80200034:	9116                	add	sp,sp,t0
    80200036:	0ab080ef          	jal	ra,802088e0 <main>

000000008020003a <loop>:
    8020003a:	a001                	j	8020003a <loop>

000000008020003c <binit>:

extern struct fs FatFs[FSNUM];
extern int disk_init_flag;
void
binit(void)
{
    8020003c:	7139                	addi	sp,sp,-64
    8020003e:	fc06                	sd	ra,56(sp)
    80200040:	f822                	sd	s0,48(sp)
    80200042:	f426                	sd	s1,40(sp)
    80200044:	f04a                	sd	s2,32(sp)
    80200046:	ec4e                	sd	s3,24(sp)
    80200048:	e852                	sd	s4,16(sp)
    8020004a:	e456                	sd	s5,8(sp)
    8020004c:	0080                	addi	s0,sp,64
  struct buf *b;

  initlock(&bcache.lock, "bcache");
    8020004e:	00011597          	auipc	a1,0x11
    80200052:	fb258593          	addi	a1,a1,-78 # 80211000 <rodata_start>
    80200056:	0053f517          	auipc	a0,0x53f
    8020005a:	faa50513          	addi	a0,a0,-86 # 8073f000 <bcache>
    8020005e:	00007097          	auipc	ra,0x7
    80200062:	acc080e7          	jalr	-1332(ra) # 80206b2a <initlock>
  disk_init_flag = 0;
    80200066:	00548797          	auipc	a5,0x548
    8020006a:	1207ad23          	sw	zero,314(a5) # 807481a0 <disk_init_flag>
  // Create linked list of buffers
  bcache.head.prev = &bcache.head;
    8020006e:	00543797          	auipc	a5,0x543
    80200072:	f9278793          	addi	a5,a5,-110 # 80743000 <bcache+0x4000>
    80200076:	00543717          	auipc	a4,0x543
    8020007a:	5f270713          	addi	a4,a4,1522 # 80743668 <bcache+0x4668>
    8020007e:	6ae7b823          	sd	a4,1712(a5)
  bcache.head.next = &bcache.head;
    80200082:	6ae7bc23          	sd	a4,1720(a5)
  for(b = bcache.buf; b < bcache.buf+NBUF; b++){
    80200086:	0053f497          	auipc	s1,0x53f
    8020008a:	f9248493          	addi	s1,s1,-110 # 8073f018 <bcache+0x18>
    b->valid= 0;
    b->refcnt = 0;
    b->sectorno = ~0;
    8020008e:	5a7d                	li	s4,-1
    b->dev = ~0;
    b->next = bcache.head.next;
    80200090:	893e                	mv	s2,a5
    b->prev = &bcache.head;
    80200092:	89ba                	mv	s3,a4
    initsleeplock(&b->lock, "buffer");
    80200094:	00011a97          	auipc	s5,0x11
    80200098:	f74a8a93          	addi	s5,s5,-140 # 80211008 <rodata_start+0x8>
    b->valid= 0;
    8020009c:	0004a023          	sw	zero,0(s1)
    b->refcnt = 0;
    802000a0:	0404a023          	sw	zero,64(s1)
    b->sectorno = ~0;
    802000a4:	0144a623          	sw	s4,12(s1)
    b->dev = ~0;
    802000a8:	0144a423          	sw	s4,8(s1)
    b->next = bcache.head.next;
    802000ac:	6b893783          	ld	a5,1720(s2)
    802000b0:	e8bc                	sd	a5,80(s1)
    b->prev = &bcache.head;
    802000b2:	0534b423          	sd	s3,72(s1)
    initsleeplock(&b->lock, "buffer");
    802000b6:	85d6                	mv	a1,s5
    802000b8:	01048513          	addi	a0,s1,16
    802000bc:	00007097          	auipc	ra,0x7
    802000c0:	b4e080e7          	jalr	-1202(ra) # 80206c0a <initsleeplock>
    bcache.head.next->prev = b;
    802000c4:	6b893783          	ld	a5,1720(s2)
    802000c8:	e7a4                	sd	s1,72(a5)
    bcache.head.next = b;
    802000ca:	6a993c23          	sd	s1,1720(s2)
  for(b = bcache.buf; b < bcache.buf+NBUF; b++){
    802000ce:	25848493          	addi	s1,s1,600
    802000d2:	fd3495e3          	bne	s1,s3,8020009c <binit+0x60>
  }
  #ifdef DEBUG
  printf("binit\n");
    802000d6:	00011517          	auipc	a0,0x11
    802000da:	f3a50513          	addi	a0,a0,-198 # 80211010 <rodata_start+0x10>
    802000de:	00007097          	auipc	ra,0x7
    802000e2:	e3a080e7          	jalr	-454(ra) # 80206f18 <printf>
  #endif
}
    802000e6:	70e2                	ld	ra,56(sp)
    802000e8:	7442                	ld	s0,48(sp)
    802000ea:	74a2                	ld	s1,40(sp)
    802000ec:	7902                	ld	s2,32(sp)
    802000ee:	69e2                	ld	s3,24(sp)
    802000f0:	6a42                	ld	s4,16(sp)
    802000f2:	6aa2                	ld	s5,8(sp)
    802000f4:	6121                	addi	sp,sp,64
    802000f6:	8082                	ret

00000000802000f8 <bread>:
  panic("bget: no buffers");
}

// Return a locked buf with the contents of the indicated block.
struct buf* 
bread(uint dev, uint sectorno) {
    802000f8:	7179                	addi	sp,sp,-48
    802000fa:	f406                	sd	ra,40(sp)
    802000fc:	f022                	sd	s0,32(sp)
    802000fe:	ec26                	sd	s1,24(sp)
    80200100:	e84a                	sd	s2,16(sp)
    80200102:	e44e                	sd	s3,8(sp)
    80200104:	1800                	addi	s0,sp,48
    80200106:	892a                	mv	s2,a0
    80200108:	89ae                	mv	s3,a1
  acquire(&bcache.lock);
    8020010a:	0053f517          	auipc	a0,0x53f
    8020010e:	ef650513          	addi	a0,a0,-266 # 8073f000 <bcache>
    80200112:	00007097          	auipc	ra,0x7
    80200116:	a5c080e7          	jalr	-1444(ra) # 80206b6e <acquire>
  for(b = bcache.head.next; b != &bcache.head; b = b->next){
    8020011a:	00543497          	auipc	s1,0x543
    8020011e:	59e4b483          	ld	s1,1438(s1) # 807436b8 <bcache+0x46b8>
    80200122:	00543797          	auipc	a5,0x543
    80200126:	54678793          	addi	a5,a5,1350 # 80743668 <bcache+0x4668>
    8020012a:	02f48f63          	beq	s1,a5,80200168 <bread+0x70>
    8020012e:	873e                	mv	a4,a5
    80200130:	a021                	j	80200138 <bread+0x40>
    80200132:	68a4                	ld	s1,80(s1)
    80200134:	02e48a63          	beq	s1,a4,80200168 <bread+0x70>
    if(b->dev == dev && b->sectorno == sectorno){
    80200138:	449c                	lw	a5,8(s1)
    8020013a:	ff279ce3          	bne	a5,s2,80200132 <bread+0x3a>
    8020013e:	44dc                	lw	a5,12(s1)
    80200140:	ff3799e3          	bne	a5,s3,80200132 <bread+0x3a>
      b->refcnt++;
    80200144:	40bc                	lw	a5,64(s1)
    80200146:	2785                	addiw	a5,a5,1
    80200148:	c0bc                	sw	a5,64(s1)
      release(&bcache.lock);
    8020014a:	0053f517          	auipc	a0,0x53f
    8020014e:	eb650513          	addi	a0,a0,-330 # 8073f000 <bcache>
    80200152:	00007097          	auipc	ra,0x7
    80200156:	a70080e7          	jalr	-1424(ra) # 80206bc2 <release>
      acquiresleep(&b->lock);
    8020015a:	01048513          	addi	a0,s1,16
    8020015e:	00007097          	auipc	ra,0x7
    80200162:	ae6080e7          	jalr	-1306(ra) # 80206c44 <acquiresleep>
      return b;
    80200166:	a8b9                	j	802001c4 <bread+0xcc>
  for(b = bcache.head.prev; b != &bcache.head; b = b->prev){
    80200168:	00543497          	auipc	s1,0x543
    8020016c:	5484b483          	ld	s1,1352(s1) # 807436b0 <bcache+0x46b0>
    80200170:	00543797          	auipc	a5,0x543
    80200174:	4f878793          	addi	a5,a5,1272 # 80743668 <bcache+0x4668>
    80200178:	00f48863          	beq	s1,a5,80200188 <bread+0x90>
    8020017c:	873e                	mv	a4,a5
    if(b->refcnt == 0) {
    8020017e:	40bc                	lw	a5,64(s1)
    80200180:	cf81                	beqz	a5,80200198 <bread+0xa0>
  for(b = bcache.head.prev; b != &bcache.head; b = b->prev){
    80200182:	64a4                	ld	s1,72(s1)
    80200184:	fee49de3          	bne	s1,a4,8020017e <bread+0x86>
  panic("bget: no buffers");
    80200188:	00011517          	auipc	a0,0x11
    8020018c:	e9050513          	addi	a0,a0,-368 # 80211018 <rodata_start+0x18>
    80200190:	00007097          	auipc	ra,0x7
    80200194:	d3e080e7          	jalr	-706(ra) # 80206ece <panic>
      b->dev = dev;
    80200198:	0124a423          	sw	s2,8(s1)
      b->sectorno = sectorno;
    8020019c:	0134a623          	sw	s3,12(s1)
      b->valid = 0;
    802001a0:	0004a023          	sw	zero,0(s1)
      b->refcnt = 1;
    802001a4:	4785                	li	a5,1
    802001a6:	c0bc                	sw	a5,64(s1)
      release(&bcache.lock);
    802001a8:	0053f517          	auipc	a0,0x53f
    802001ac:	e5850513          	addi	a0,a0,-424 # 8073f000 <bcache>
    802001b0:	00007097          	auipc	ra,0x7
    802001b4:	a12080e7          	jalr	-1518(ra) # 80206bc2 <release>
      acquiresleep(&b->lock);
    802001b8:	01048513          	addi	a0,s1,16
    802001bc:	00007097          	auipc	ra,0x7
    802001c0:	a88080e7          	jalr	-1400(ra) # 80206c44 <acquiresleep>
  struct buf *b;
  b = bget(dev, sectorno);

  if (!b->valid) {
    802001c4:	409c                	lw	a5,0(s1)
    802001c6:	e79d                	bnez	a5,802001f4 <bread+0xfc>
    FatFs[dev].disk_read(b,FatFs[dev].image);
    802001c8:	1902                	slli	s2,s2,0x20
    802001ca:	02095913          	srli	s2,s2,0x20
    802001ce:	6715                	lui	a4,0x5
    802001d0:	9b870513          	addi	a0,a4,-1608 # 49b8 <_entry-0x801fb648>
    802001d4:	02a90933          	mul	s2,s2,a0
    802001d8:	00555797          	auipc	a5,0x555
    802001dc:	9d878793          	addi	a5,a5,-1576 # 80754bb0 <FatFs>
    802001e0:	993e                	add	s2,s2,a5
    802001e2:	974a                	add	a4,a4,s2
    802001e4:	9a873783          	ld	a5,-1624(a4)
    802001e8:	00893583          	ld	a1,8(s2)
    802001ec:	8526                	mv	a0,s1
    802001ee:	9782                	jalr	a5
    b->valid = 1;
    802001f0:	4785                	li	a5,1
    802001f2:	c09c                	sw	a5,0(s1)
  }
  
  return b;
}
    802001f4:	8526                	mv	a0,s1
    802001f6:	70a2                	ld	ra,40(sp)
    802001f8:	7402                	ld	s0,32(sp)
    802001fa:	64e2                	ld	s1,24(sp)
    802001fc:	6942                	ld	s2,16(sp)
    802001fe:	69a2                	ld	s3,8(sp)
    80200200:	6145                	addi	sp,sp,48
    80200202:	8082                	ret

0000000080200204 <bwrite>:

// Write b's contents to disk.  Must be locked.
void 
bwrite(uint dev, struct buf *b) {
    80200204:	1101                	addi	sp,sp,-32
    80200206:	ec06                	sd	ra,24(sp)
    80200208:	e822                	sd	s0,16(sp)
    8020020a:	e426                	sd	s1,8(sp)
    8020020c:	e04a                	sd	s2,0(sp)
    8020020e:	1000                	addi	s0,sp,32
    80200210:	84aa                	mv	s1,a0
    80200212:	892e                	mv	s2,a1

  if(!holdingsleep(&b->lock))
    80200214:	01058513          	addi	a0,a1,16
    80200218:	00007097          	auipc	ra,0x7
    8020021c:	aba080e7          	jalr	-1350(ra) # 80206cd2 <holdingsleep>
    80200220:	c915                	beqz	a0,80200254 <bwrite+0x50>
    panic("bwrite");

  FatFs[dev].disk_write(b,FatFs[dev].image);
    80200222:	02049513          	slli	a0,s1,0x20
    80200226:	9101                	srli	a0,a0,0x20
    80200228:	6795                	lui	a5,0x5
    8020022a:	9b878493          	addi	s1,a5,-1608 # 49b8 <_entry-0x801fb648>
    8020022e:	02950533          	mul	a0,a0,s1
    80200232:	00555497          	auipc	s1,0x555
    80200236:	97e48493          	addi	s1,s1,-1666 # 80754bb0 <FatFs>
    8020023a:	9526                	add	a0,a0,s1
    8020023c:	97aa                	add	a5,a5,a0
    8020023e:	9b07b783          	ld	a5,-1616(a5)
    80200242:	650c                	ld	a1,8(a0)
    80200244:	854a                	mv	a0,s2
    80200246:	9782                	jalr	a5
}
    80200248:	60e2                	ld	ra,24(sp)
    8020024a:	6442                	ld	s0,16(sp)
    8020024c:	64a2                	ld	s1,8(sp)
    8020024e:	6902                	ld	s2,0(sp)
    80200250:	6105                	addi	sp,sp,32
    80200252:	8082                	ret
    panic("bwrite");
    80200254:	00011517          	auipc	a0,0x11
    80200258:	ddc50513          	addi	a0,a0,-548 # 80211030 <rodata_start+0x30>
    8020025c:	00007097          	auipc	ra,0x7
    80200260:	c72080e7          	jalr	-910(ra) # 80206ece <panic>

0000000080200264 <brelse>:

// Release a locked buffer.
// Move to the head of the most-recently-used list.
void
brelse(struct buf *b)
{
    80200264:	1101                	addi	sp,sp,-32
    80200266:	ec06                	sd	ra,24(sp)
    80200268:	e822                	sd	s0,16(sp)
    8020026a:	e426                	sd	s1,8(sp)
    8020026c:	e04a                	sd	s2,0(sp)
    8020026e:	1000                	addi	s0,sp,32
    80200270:	84aa                	mv	s1,a0
  
  if(!holdingsleep(&b->lock))
    80200272:	01050913          	addi	s2,a0,16
    80200276:	854a                	mv	a0,s2
    80200278:	00007097          	auipc	ra,0x7
    8020027c:	a5a080e7          	jalr	-1446(ra) # 80206cd2 <holdingsleep>
    80200280:	c92d                	beqz	a0,802002f2 <brelse+0x8e>
    panic("brelse");
    
  releasesleep(&b->lock);//?????????
    80200282:	854a                	mv	a0,s2
    80200284:	00007097          	auipc	ra,0x7
    80200288:	a0a080e7          	jalr	-1526(ra) # 80206c8e <releasesleep>
  acquire(&bcache.lock);
    8020028c:	0053f517          	auipc	a0,0x53f
    80200290:	d7450513          	addi	a0,a0,-652 # 8073f000 <bcache>
    80200294:	00007097          	auipc	ra,0x7
    80200298:	8da080e7          	jalr	-1830(ra) # 80206b6e <acquire>
  b->refcnt--;
    8020029c:	40bc                	lw	a5,64(s1)
    8020029e:	37fd                	addiw	a5,a5,-1
    802002a0:	0007871b          	sext.w	a4,a5
    802002a4:	c0bc                	sw	a5,64(s1)
  if (b->refcnt == 0) {
    802002a6:	eb05                	bnez	a4,802002d6 <brelse+0x72>
    // no one is waiting for it.
    b->next->prev = b->prev;
    802002a8:	68bc                	ld	a5,80(s1)
    802002aa:	64b8                	ld	a4,72(s1)
    802002ac:	e7b8                	sd	a4,72(a5)
    b->prev->next = b->next;
    802002ae:	64bc                	ld	a5,72(s1)
    802002b0:	68b8                	ld	a4,80(s1)
    802002b2:	ebb8                	sd	a4,80(a5)
    b->next = bcache.head.next;
    802002b4:	00543797          	auipc	a5,0x543
    802002b8:	d4c78793          	addi	a5,a5,-692 # 80743000 <bcache+0x4000>
    802002bc:	6b87b703          	ld	a4,1720(a5)
    802002c0:	e8b8                	sd	a4,80(s1)
    b->prev = &bcache.head;
    802002c2:	00543717          	auipc	a4,0x543
    802002c6:	3a670713          	addi	a4,a4,934 # 80743668 <bcache+0x4668>
    802002ca:	e4b8                	sd	a4,72(s1)
    bcache.head.next->prev = b;
    802002cc:	6b87b703          	ld	a4,1720(a5)
    802002d0:	e724                	sd	s1,72(a4)
    bcache.head.next = b;
    802002d2:	6a97bc23          	sd	s1,1720(a5)
  }
  release(&bcache.lock);
    802002d6:	0053f517          	auipc	a0,0x53f
    802002da:	d2a50513          	addi	a0,a0,-726 # 8073f000 <bcache>
    802002de:	00007097          	auipc	ra,0x7
    802002e2:	8e4080e7          	jalr	-1820(ra) # 80206bc2 <release>
  
}
    802002e6:	60e2                	ld	ra,24(sp)
    802002e8:	6442                	ld	s0,16(sp)
    802002ea:	64a2                	ld	s1,8(sp)
    802002ec:	6902                	ld	s2,0(sp)
    802002ee:	6105                	addi	sp,sp,32
    802002f0:	8082                	ret
    panic("brelse");
    802002f2:	00011517          	auipc	a0,0x11
    802002f6:	d4650513          	addi	a0,a0,-698 # 80211038 <rodata_start+0x38>
    802002fa:	00007097          	auipc	ra,0x7
    802002fe:	bd4080e7          	jalr	-1068(ra) # 80206ece <panic>

0000000080200302 <bpin>:

void
bpin(struct buf *b) {
    80200302:	1101                	addi	sp,sp,-32
    80200304:	ec06                	sd	ra,24(sp)
    80200306:	e822                	sd	s0,16(sp)
    80200308:	e426                	sd	s1,8(sp)
    8020030a:	1000                	addi	s0,sp,32
    8020030c:	84aa                	mv	s1,a0
  acquire(&bcache.lock);
    8020030e:	0053f517          	auipc	a0,0x53f
    80200312:	cf250513          	addi	a0,a0,-782 # 8073f000 <bcache>
    80200316:	00007097          	auipc	ra,0x7
    8020031a:	858080e7          	jalr	-1960(ra) # 80206b6e <acquire>
  b->refcnt++;
    8020031e:	40bc                	lw	a5,64(s1)
    80200320:	2785                	addiw	a5,a5,1
    80200322:	c0bc                	sw	a5,64(s1)
  release(&bcache.lock);
    80200324:	0053f517          	auipc	a0,0x53f
    80200328:	cdc50513          	addi	a0,a0,-804 # 8073f000 <bcache>
    8020032c:	00007097          	auipc	ra,0x7
    80200330:	896080e7          	jalr	-1898(ra) # 80206bc2 <release>
}
    80200334:	60e2                	ld	ra,24(sp)
    80200336:	6442                	ld	s0,16(sp)
    80200338:	64a2                	ld	s1,8(sp)
    8020033a:	6105                	addi	sp,sp,32
    8020033c:	8082                	ret

000000008020033e <bunpin>:

void
bunpin(struct buf *b) {
    8020033e:	1101                	addi	sp,sp,-32
    80200340:	ec06                	sd	ra,24(sp)
    80200342:	e822                	sd	s0,16(sp)
    80200344:	e426                	sd	s1,8(sp)
    80200346:	1000                	addi	s0,sp,32
    80200348:	84aa                	mv	s1,a0
  acquire(&bcache.lock);
    8020034a:	0053f517          	auipc	a0,0x53f
    8020034e:	cb650513          	addi	a0,a0,-842 # 8073f000 <bcache>
    80200352:	00007097          	auipc	ra,0x7
    80200356:	81c080e7          	jalr	-2020(ra) # 80206b6e <acquire>
  b->refcnt--;
    8020035a:	40bc                	lw	a5,64(s1)
    8020035c:	37fd                	addiw	a5,a5,-1
    8020035e:	c0bc                	sw	a5,64(s1)
  release(&bcache.lock);
    80200360:	0053f517          	auipc	a0,0x53f
    80200364:	ca050513          	addi	a0,a0,-864 # 8073f000 <bcache>
    80200368:	00007097          	auipc	ra,0x7
    8020036c:	85a080e7          	jalr	-1958(ra) # 80206bc2 <release>
}
    80200370:	60e2                	ld	ra,24(sp)
    80200372:	6442                	ld	s0,16(sp)
    80200374:	64a2                	ld	s1,8(sp)
    80200376:	6105                	addi	sp,sp,32
    80200378:	8082                	ret
	...

0000000080200382 <ramdisk_init>:
extern char fs_img_end[];
char* ramdisk;

void
ramdisk_init(void)
{
    80200382:	1101                	addi	sp,sp,-32
    80200384:	ec06                	sd	ra,24(sp)
    80200386:	e822                	sd	s0,16(sp)
    80200388:	e426                	sd	s1,8(sp)
    8020038a:	1000                	addi	s0,sp,32
#ifdef QEMU
  ramdisk = fs_img_start;
    8020038c:	00548497          	auipc	s1,0x548
    80200390:	e0c48493          	addi	s1,s1,-500 # 80748198 <ramdisk>
    80200394:	00015797          	auipc	a5,0x15
    80200398:	c6c78793          	addi	a5,a5,-916 # 80215000 <data_start>
    8020039c:	e09c                	sd	a5,0(s1)
#endif
#ifdef SIFIVE_U
  ramdisk = (char*)RAMDISK;
#endif
  initlock(&ramdisklock, "ramdisk lock");
    8020039e:	00011597          	auipc	a1,0x11
    802003a2:	ca258593          	addi	a1,a1,-862 # 80211040 <rodata_start+0x40>
    802003a6:	00548517          	auipc	a0,0x548
    802003aa:	dda50513          	addi	a0,a0,-550 # 80748180 <ramdisklock>
    802003ae:	00006097          	auipc	ra,0x6
    802003b2:	77c080e7          	jalr	1916(ra) # 80206b2a <initlock>
  __debug_info("ramdiskinit ram start:%p\n",ramdisk);
    802003b6:	608c                	ld	a1,0(s1)
    802003b8:	00011517          	auipc	a0,0x11
    802003bc:	c9850513          	addi	a0,a0,-872 # 80211050 <rodata_start+0x50>
    802003c0:	00007097          	auipc	ra,0x7
    802003c4:	d1e080e7          	jalr	-738(ra) # 802070de <__debug_info>
}
    802003c8:	60e2                	ld	ra,24(sp)
    802003ca:	6442                	ld	s0,16(sp)
    802003cc:	64a2                	ld	s1,8(sp)
    802003ce:	6105                	addi	sp,sp,32
    802003d0:	8082                	ret

00000000802003d2 <ramdisk_rw>:

void 
ramdisk_rw(struct buf *b, int write)
{
    802003d2:	1101                	addi	sp,sp,-32
    802003d4:	ec06                	sd	ra,24(sp)
    802003d6:	e822                	sd	s0,16(sp)
    802003d8:	e426                	sd	s1,8(sp)
    802003da:	e04a                	sd	s2,0(sp)
    802003dc:	1000                	addi	s0,sp,32
    802003de:	84aa                	mv	s1,a0
    802003e0:	892e                	mv	s2,a1
  acquire(&ramdisklock);
    802003e2:	00548517          	auipc	a0,0x548
    802003e6:	d9e50513          	addi	a0,a0,-610 # 80748180 <ramdisklock>
    802003ea:	00006097          	auipc	ra,0x6
    802003ee:	784080e7          	jalr	1924(ra) # 80206b6e <acquire>
  uint sectorno = b->sectorno;

  char *addr = ramdisk + sectorno * BSIZE;
    802003f2:	44dc                	lw	a5,12(s1)
    802003f4:	0097979b          	slliw	a5,a5,0x9
    802003f8:	1782                	slli	a5,a5,0x20
    802003fa:	9381                	srli	a5,a5,0x20
    802003fc:	00548517          	auipc	a0,0x548
    80200400:	d9c53503          	ld	a0,-612(a0) # 80748198 <ramdisk>
    80200404:	953e                	add	a0,a0,a5
  if (write)
    80200406:	02090863          	beqz	s2,80200436 <ramdisk_rw+0x64>
  {
    memmove((void*)addr, b->data, BSIZE);
    8020040a:	20000613          	li	a2,512
    8020040e:	05848593          	addi	a1,s1,88
    80200412:	00001097          	auipc	ra,0x1
    80200416:	9c2080e7          	jalr	-1598(ra) # 80200dd4 <memmove>
  }
  else
  {
    memmove(b->data, (void*)addr, BSIZE);
  }
  release(&ramdisklock);
    8020041a:	00548517          	auipc	a0,0x548
    8020041e:	d6650513          	addi	a0,a0,-666 # 80748180 <ramdisklock>
    80200422:	00006097          	auipc	ra,0x6
    80200426:	7a0080e7          	jalr	1952(ra) # 80206bc2 <release>
}
    8020042a:	60e2                	ld	ra,24(sp)
    8020042c:	6442                	ld	s0,16(sp)
    8020042e:	64a2                	ld	s1,8(sp)
    80200430:	6902                	ld	s2,0(sp)
    80200432:	6105                	addi	sp,sp,32
    80200434:	8082                	ret
    memmove(b->data, (void*)addr, BSIZE);
    80200436:	20000613          	li	a2,512
    8020043a:	85aa                	mv	a1,a0
    8020043c:	05848513          	addi	a0,s1,88
    80200440:	00001097          	auipc	ra,0x1
    80200444:	994080e7          	jalr	-1644(ra) # 80200dd4 <memmove>
    80200448:	bfc9                	j	8020041a <ramdisk_rw+0x48>

000000008020044a <ramdisk_intr>:

void
ramdisk_intr()
{
    8020044a:	1141                	addi	sp,sp,-16
    8020044c:	e422                	sd	s0,8(sp)
    8020044e:	0800                	addi	s0,sp,16
    //acquire(&ramdisklock);
    
}
    80200450:	6422                	ld	s0,8(sp)
    80200452:	0141                	addi	sp,sp,16
    80200454:	8082                	ret

0000000080200456 <spi_min_clk_divisor>:
/**
 * Get smallest clock divisor that divides input_khz to a quotient less than or
 * equal to max_target_khz;
 */
inline unsigned int spi_min_clk_divisor(unsigned int input_khz, unsigned int max_target_khz)
{
    80200456:	1141                	addi	sp,sp,-16
    80200458:	e422                	sd	s0,8(sp)
    8020045a:	0800                	addi	s0,sp,16
  // div = ceil(f_in / (2*f_sck)) - 1
  //     = floor((f_in - 1 + 2*f_sck) / (2*f_sck)) - 1
  //
  // This should not overflow as long as (f_in - 1 + 2*f_sck) does not exceed
  // 2^32 - 1, which is unlikely since we represent frequencies in kHz.
  unsigned int quotient = (input_khz + 2 * max_target_khz - 1) / (2 * max_target_khz);
    8020045c:	0015959b          	slliw	a1,a1,0x1
    80200460:	0005871b          	sext.w	a4,a1
    80200464:	357d                	addiw	a0,a0,-1
    80200466:	9d2d                	addw	a0,a0,a1
    80200468:	0005079b          	sext.w	a5,a0
  // Avoid underflow
  if (quotient == 0) {
    8020046c:	00e7e863          	bltu	a5,a4,8020047c <spi_min_clk_divisor+0x26>
  unsigned int quotient = (input_khz + 2 * max_target_khz - 1) / (2 * max_target_khz);
    80200470:	02b5553b          	divuw	a0,a0,a1
    return 0;
  } else {
    return quotient - 1;
    80200474:	357d                	addiw	a0,a0,-1
  }
}
    80200476:	6422                	ld	s0,8(sp)
    80200478:	0141                	addi	sp,sp,16
    8020047a:	8082                	ret
    return 0;
    8020047c:	4501                	li	a0,0
    8020047e:	bfe5                	j	80200476 <spi_min_clk_divisor+0x20>

0000000080200480 <spi_tx>:

/**
 * Wait until SPI is ready for transmission and transmit byte.
 */
void spi_tx(spi_ctrl* spictrl, uint8_t in)
{
    80200480:	1141                	addi	sp,sp,-16
    80200482:	e422                	sd	s0,8(sp)
    80200484:	0800                	addi	s0,sp,16
#if __riscv_atomic
  int32_t r;
  do {
    asm volatile (
    80200486:	04850793          	addi	a5,a0,72
    8020048a:	40b7a7af          	amoor.w	a5,a1,(a5)
      "amoor.w %0, %2, %1\n"
      : "=r" (r), "+A" (spictrl->txdata.raw_bits)
      : "r" (in)
    );
  } while (r < 0);
    8020048e:	02079713          	slli	a4,a5,0x20
    80200492:	fe074ae3          	bltz	a4,80200486 <spi_tx+0x6>
#else
  while ((int32_t) spictrl->txdata.raw_bits < 0);
  spictrl->txdata.data = in;
#endif
}
    80200496:	6422                	ld	s0,8(sp)
    80200498:	0141                	addi	sp,sp,16
    8020049a:	8082                	ret

000000008020049c <spi_rx>:

/**
 * Wait until SPI receive queue has data and read byte.
 */
uint8_t spi_rx(spi_ctrl* spictrl)
{
    8020049c:	1141                	addi	sp,sp,-16
    8020049e:	e422                	sd	s0,8(sp)
    802004a0:	0800                	addi	s0,sp,16
  int32_t out;
  while ((out = (int32_t) spictrl->rxdata.raw_bits) < 0);
    802004a2:	457c                	lw	a5,76(a0)
    802004a4:	02079693          	slli	a3,a5,0x20
    802004a8:	fe06cde3          	bltz	a3,802004a2 <spi_rx+0x6>
    802004ac:	0007871b          	sext.w	a4,a5
  return (uint8_t) out;
}
    802004b0:	0ff77513          	andi	a0,a4,255
    802004b4:	6422                	ld	s0,8(sp)
    802004b6:	0141                	addi	sp,sp,16
    802004b8:	8082                	ret

00000000802004ba <spi_txrx>:

/**
 * Transmit a byte and receive a byte.
 */
uint8_t spi_txrx(spi_ctrl* spictrl, uint8_t in)
{
    802004ba:	1101                	addi	sp,sp,-32
    802004bc:	ec06                	sd	ra,24(sp)
    802004be:	e822                	sd	s0,16(sp)
    802004c0:	e426                	sd	s1,8(sp)
    802004c2:	1000                	addi	s0,sp,32
    802004c4:	84aa                	mv	s1,a0
  spi_tx(spictrl, in);
    802004c6:	00000097          	auipc	ra,0x0
    802004ca:	fba080e7          	jalr	-70(ra) # 80200480 <spi_tx>
  while ((out = (int32_t) spictrl->rxdata.raw_bits) < 0);
    802004ce:	44fc                	lw	a5,76(s1)
    802004d0:	0007851b          	sext.w	a0,a5
    802004d4:	02079713          	slli	a4,a5,0x20
    802004d8:	fe074be3          	bltz	a4,802004ce <spi_txrx+0x14>
  return spi_rx(spictrl);
}
    802004dc:	0ff57513          	andi	a0,a0,255
    802004e0:	60e2                	ld	ra,24(sp)
    802004e2:	6442                	ld	s0,16(sp)
    802004e4:	64a2                	ld	s1,8(sp)
    802004e6:	6105                	addi	sp,sp,32
    802004e8:	8082                	ret

00000000802004ea <spi_copy>:

/**
 * Copy data from SPI flash without memory-mapped flash.
 */
int spi_copy(spi_ctrl* spictrl, void* buf, uint32_t addr, uint32_t size)
{
    802004ea:	7179                	addi	sp,sp,-48
    802004ec:	f406                	sd	ra,40(sp)
    802004ee:	f022                	sd	s0,32(sp)
    802004f0:	ec26                	sd	s1,24(sp)
    802004f2:	e84a                	sd	s2,16(sp)
    802004f4:	e44e                	sd	s3,8(sp)
    802004f6:	e052                	sd	s4,0(sp)
    802004f8:	1800                	addi	s0,sp,48
    802004fa:	89aa                	mv	s3,a0
    802004fc:	84ae                	mv	s1,a1
    802004fe:	8a32                	mv	s4,a2
    80200500:	8936                	mv	s2,a3
  uint8_t* buf_bytes = (uint8_t*) buf;
  spictrl->csmode.mode = SPI_CSMODE_HOLD;
    80200502:	4d1c                	lw	a5,24(a0)
    80200504:	9bf1                	andi	a5,a5,-4
    80200506:	0027e793          	ori	a5,a5,2
    8020050a:	cd1c                	sw	a5,24(a0)

  spi_txrx(spictrl, MICRON_SPI_FLASH_CMD_READ);
    8020050c:	458d                	li	a1,3
    8020050e:	00000097          	auipc	ra,0x0
    80200512:	fac080e7          	jalr	-84(ra) # 802004ba <spi_txrx>
  spi_txrx(spictrl, (addr >> 16) & 0xff);
    80200516:	010a559b          	srliw	a1,s4,0x10
    8020051a:	0ff5f593          	andi	a1,a1,255
    8020051e:	854e                	mv	a0,s3
    80200520:	00000097          	auipc	ra,0x0
    80200524:	f9a080e7          	jalr	-102(ra) # 802004ba <spi_txrx>
  spi_txrx(spictrl, (addr >> 8) & 0xff);
    80200528:	008a559b          	srliw	a1,s4,0x8
    8020052c:	0ff5f593          	andi	a1,a1,255
    80200530:	854e                	mv	a0,s3
    80200532:	00000097          	auipc	ra,0x0
    80200536:	f88080e7          	jalr	-120(ra) # 802004ba <spi_txrx>
  spi_txrx(spictrl, addr & 0xff);
    8020053a:	0ffa7593          	andi	a1,s4,255
    8020053e:	854e                	mv	a0,s3
    80200540:	00000097          	auipc	ra,0x0
    80200544:	f7a080e7          	jalr	-134(ra) # 802004ba <spi_txrx>

  for (unsigned int i = 0; i < size; i++) {
    80200548:	02090363          	beqz	s2,8020056e <spi_copy+0x84>
    8020054c:	397d                	addiw	s2,s2,-1
    8020054e:	1902                	slli	s2,s2,0x20
    80200550:	02095913          	srli	s2,s2,0x20
    80200554:	0905                	addi	s2,s2,1
    80200556:	9926                	add	s2,s2,s1
    *buf_bytes = spi_txrx(spictrl, 0);
    80200558:	4581                	li	a1,0
    8020055a:	854e                	mv	a0,s3
    8020055c:	00000097          	auipc	ra,0x0
    80200560:	f5e080e7          	jalr	-162(ra) # 802004ba <spi_txrx>
    80200564:	00a48023          	sb	a0,0(s1)
    buf_bytes++;
    80200568:	0485                	addi	s1,s1,1
  for (unsigned int i = 0; i < size; i++) {
    8020056a:	ff2497e3          	bne	s1,s2,80200558 <spi_copy+0x6e>
  }

  spictrl->csmode.mode = SPI_CSMODE_AUTO;
    8020056e:	0189a783          	lw	a5,24(s3)
    80200572:	9bf1                	andi	a5,a5,-4
    80200574:	00f9ac23          	sw	a5,24(s3)
  return 0;
}
    80200578:	4501                	li	a0,0
    8020057a:	70a2                	ld	ra,40(sp)
    8020057c:	7402                	ld	s0,32(sp)
    8020057e:	64e2                	ld	s1,24(sp)
    80200580:	6942                	ld	s2,16(sp)
    80200582:	69a2                	ld	s3,8(sp)
    80200584:	6a02                	ld	s4,0(sp)
    80200586:	6145                	addi	sp,sp,48
    80200588:	8082                	ret

000000008020058a <crc7>:
  return rc;
}


static uint8_t crc7(uint8_t prev, uint8_t in)
{
    8020058a:	1141                	addi	sp,sp,-16
    8020058c:	e422                	sd	s0,8(sp)
    8020058e:	0800                	addi	s0,sp,16
  // CRC polynomial 0x89
  uint8_t remainder = prev & in;
    80200590:	8de9                	and	a1,a1,a0
  remainder ^= (remainder >> 4) ^ (remainder >> 7);
    80200592:	0045d51b          	srliw	a0,a1,0x4
    80200596:	0075d79b          	srliw	a5,a1,0x7
    8020059a:	8d3d                	xor	a0,a0,a5
    8020059c:	0ff57513          	andi	a0,a0,255
    802005a0:	8d2d                	xor	a0,a0,a1
  remainder ^= remainder << 4;
    802005a2:	0045159b          	slliw	a1,a0,0x4
    802005a6:	8d2d                	xor	a0,a0,a1
  return remainder & 0x7f;
}
    802005a8:	07f57513          	andi	a0,a0,127
    802005ac:	6422                	ld	s0,8(sp)
    802005ae:	0141                	addi	sp,sp,16
    802005b0:	8082                	ret

00000000802005b2 <crc16>:


static uint16_t crc16(uint16_t crc, uint8_t data)
{
    802005b2:	1141                	addi	sp,sp,-16
    802005b4:	e422                	sd	s0,8(sp)
    802005b6:	0800                	addi	s0,sp,16
  // CRC polynomial 0x11021
  crc = (uint8_t)(crc >> 8) | (crc << 8);
    802005b8:	0085579b          	srliw	a5,a0,0x8
    802005bc:	0085151b          	slliw	a0,a0,0x8
    802005c0:	8d5d                	or	a0,a0,a5
    802005c2:	1542                	slli	a0,a0,0x30
    802005c4:	9141                	srli	a0,a0,0x30
  crc ^= data;
    802005c6:	8da9                	xor	a1,a1,a0
  crc ^= (uint8_t)(crc >> 4) & 0xf;
    802005c8:	0045d51b          	srliw	a0,a1,0x4
    802005cc:	893d                	andi	a0,a0,15
    802005ce:	8d2d                	xor	a0,a0,a1
  crc ^= crc << 12;
    802005d0:	00c5159b          	slliw	a1,a0,0xc
    802005d4:	8d2d                	xor	a0,a0,a1
  crc ^= (crc & 0xff) << 5;
    802005d6:	0105179b          	slliw	a5,a0,0x10
    802005da:	0107d79b          	srliw	a5,a5,0x10
    802005de:	0057979b          	slliw	a5,a5,0x5
    802005e2:	6709                	lui	a4,0x2
    802005e4:	1701                	addi	a4,a4,-32
    802005e6:	8ff9                	and	a5,a5,a4
    802005e8:	8d3d                	xor	a0,a0,a5
  return crc;
}
    802005ea:	1542                	slli	a0,a0,0x30
    802005ec:	9141                	srli	a0,a0,0x30
    802005ee:	6422                	ld	s0,8(sp)
    802005f0:	0141                	addi	sp,sp,16
    802005f2:	8082                	ret

00000000802005f4 <sd_cmd>:
{
    802005f4:	7179                	addi	sp,sp,-48
    802005f6:	f406                	sd	ra,40(sp)
    802005f8:	f022                	sd	s0,32(sp)
    802005fa:	ec26                	sd	s1,24(sp)
    802005fc:	e84a                	sd	s2,16(sp)
    802005fe:	e44e                	sd	s3,8(sp)
    80200600:	e052                	sd	s4,0(sp)
    80200602:	1800                	addi	s0,sp,48
    80200604:	892a                	mv	s2,a0
    80200606:	8a2e                	mv	s4,a1
    80200608:	84b2                	mv	s1,a2
    8020060a:	89b6                	mv	s3,a3
  spi->csmode.mode = SPI_CSMODE_HOLD;
    8020060c:	4d1c                	lw	a5,24(a0)
    8020060e:	9bf1                	andi	a5,a5,-4
    80200610:	0027e793          	ori	a5,a5,2
    80200614:	cd1c                	sw	a5,24(a0)
  return spi_txrx(spi, 0xFF);
    80200616:	0ff00593          	li	a1,255
    8020061a:	00000097          	auipc	ra,0x0
    8020061e:	ea0080e7          	jalr	-352(ra) # 802004ba <spi_txrx>
  spi_txrx(spi, cmd);
    80200622:	85d2                	mv	a1,s4
    80200624:	854a                	mv	a0,s2
    80200626:	00000097          	auipc	ra,0x0
    8020062a:	e94080e7          	jalr	-364(ra) # 802004ba <spi_txrx>
  spi_txrx(spi, arg >> 24);
    8020062e:	0184d59b          	srliw	a1,s1,0x18
    80200632:	854a                	mv	a0,s2
    80200634:	00000097          	auipc	ra,0x0
    80200638:	e86080e7          	jalr	-378(ra) # 802004ba <spi_txrx>
  spi_txrx(spi, arg >> 16);
    8020063c:	0104d59b          	srliw	a1,s1,0x10
    80200640:	0ff5f593          	andi	a1,a1,255
    80200644:	854a                	mv	a0,s2
    80200646:	00000097          	auipc	ra,0x0
    8020064a:	e74080e7          	jalr	-396(ra) # 802004ba <spi_txrx>
  spi_txrx(spi, arg >> 8);
    8020064e:	0084d59b          	srliw	a1,s1,0x8
    80200652:	0ff5f593          	andi	a1,a1,255
    80200656:	854a                	mv	a0,s2
    80200658:	00000097          	auipc	ra,0x0
    8020065c:	e62080e7          	jalr	-414(ra) # 802004ba <spi_txrx>
  spi_txrx(spi, arg);
    80200660:	0ff4f593          	andi	a1,s1,255
    80200664:	854a                	mv	a0,s2
    80200666:	00000097          	auipc	ra,0x0
    8020066a:	e54080e7          	jalr	-428(ra) # 802004ba <spi_txrx>
  spi_txrx(spi, crc);
    8020066e:	85ce                	mv	a1,s3
    80200670:	854a                	mv	a0,s2
    80200672:	00000097          	auipc	ra,0x0
    80200676:	e48080e7          	jalr	-440(ra) # 802004ba <spi_txrx>
    8020067a:	3e800493          	li	s1,1000
  return spi_txrx(spi, 0xFF);
    8020067e:	0ff00593          	li	a1,255
    80200682:	854a                	mv	a0,s2
    80200684:	00000097          	auipc	ra,0x0
    80200688:	e36080e7          	jalr	-458(ra) # 802004ba <spi_txrx>
    if (!(r & 0x80)) {
    8020068c:	0185179b          	slliw	a5,a0,0x18
    80200690:	4187d79b          	sraiw	a5,a5,0x18
    80200694:	0007d463          	bgez	a5,8020069c <sd_cmd+0xa8>
  } while (--n > 0);
    80200698:	14fd                	addi	s1,s1,-1
    8020069a:	f0f5                	bnez	s1,8020067e <sd_cmd+0x8a>
}
    8020069c:	2501                	sext.w	a0,a0
    8020069e:	70a2                	ld	ra,40(sp)
    802006a0:	7402                	ld	s0,32(sp)
    802006a2:	64e2                	ld	s1,24(sp)
    802006a4:	6942                	ld	s2,16(sp)
    802006a6:	69a2                	ld	s3,8(sp)
    802006a8:	6a02                	ld	s4,0(sp)
    802006aa:	6145                	addi	sp,sp,48
    802006ac:	8082                	ret

00000000802006ae <sd_init>:
//    }
//    return gpt_invalid_partition_range();
//}

int sd_init(spi_ctrl* spi, unsigned int input_clk_khz, int skip_sd_init_commands)
{
    802006ae:	7179                	addi	sp,sp,-48
    802006b0:	f406                	sd	ra,40(sp)
    802006b2:	f022                	sd	s0,32(sp)
    802006b4:	ec26                	sd	s1,24(sp)
    802006b6:	e84a                	sd	s2,16(sp)
    802006b8:	e44e                	sd	s3,8(sp)
    802006ba:	e052                	sd	s4,0(sp)
    802006bc:	1800                	addi	s0,sp,48
    802006be:	84aa                	mv	s1,a0
    802006c0:	892e                	mv	s2,a1
  // Skip SD initialization commands if already done earlier and only set the
  // clock divider for data transfer.
  if (!skip_sd_init_commands) {
    802006c2:	ce1d                	beqz	a2,80200700 <sd_init+0x52>
  unsigned int quotient = (input_khz + 2 * max_target_khz - 1) / (2 * max_target_khz);
    802006c4:	65a9                	lui	a1,0xa
    802006c6:	c3f5859b          	addiw	a1,a1,-961
    802006ca:	00b9093b          	addw	s2,s2,a1
    802006ce:	0009071b          	sext.w	a4,s2
  if (quotient == 0) {
    802006d2:	67a9                	lui	a5,0xa
    802006d4:	c3f78793          	addi	a5,a5,-961 # 9c3f <_entry-0x801f63c1>
    return 0;
    802006d8:	4581                	li	a1,0
  if (quotient == 0) {
    802006da:	00e7f963          	bgeu	a5,a4,802006ec <sd_init+0x3e>
  unsigned int quotient = (input_khz + 2 * max_target_khz - 1) / (2 * max_target_khz);
    802006de:	65a9                	lui	a1,0xa
    802006e0:	c405859b          	addiw	a1,a1,-960
    802006e4:	02b9593b          	divuw	s2,s2,a1
    return quotient - 1;
    802006e8:	fff9059b          	addiw	a1,s2,-1
    if (sd_acmd41(spi)) return SD_INIT_ERROR_ACMD41;
    if (sd_cmd58(spi)) return SD_INIT_ERROR_CMD58;
    if (sd_cmd16(spi)) return SD_INIT_ERROR_CMD16;
  }
  // Increase clock frequency after initialization for higher performance.
  spi->sckdiv = spi_min_clk_divisor(input_clk_khz, SD_POST_INIT_CLK_KHZ);
    802006ec:	c08c                	sw	a1,0(s1)
  return 0;
    802006ee:	4501                	li	a0,0
}
    802006f0:	70a2                	ld	ra,40(sp)
    802006f2:	7402                	ld	s0,32(sp)
    802006f4:	64e2                	ld	s1,24(sp)
    802006f6:	6942                	ld	s2,16(sp)
    802006f8:	69a2                	ld	s3,8(sp)
    802006fa:	6a02                	ld	s4,0(sp)
    802006fc:	6145                	addi	sp,sp,48
    802006fe:	8082                	ret
  uint64_t start = get_time_us();
    80200700:	00008097          	auipc	ra,0x8
    80200704:	19c080e7          	jalr	412(ra) # 8020889c <get_time_us>
    80200708:	8a2a                	mv	s4,a0
  while(get_time_us()-start>5000);
    8020070a:	6985                	lui	s3,0x1
    8020070c:	38898993          	addi	s3,s3,904 # 1388 <_entry-0x801fec78>
    80200710:	00008097          	auipc	ra,0x8
    80200714:	18c080e7          	jalr	396(ra) # 8020889c <get_time_us>
    80200718:	414507b3          	sub	a5,a0,s4
    8020071c:	fef9eae3          	bltu	s3,a5,80200710 <sd_init+0x62>
  }).raw_bits;
    80200720:	000807b7          	lui	a5,0x80
  spi->fmt.raw_bits = ((spi_reg_fmt) {
    80200724:	c0bc                	sw	a5,64(s1)
  spi->csdef |= 0x1;
    80200726:	48dc                	lw	a5,20(s1)
    80200728:	2781                	sext.w	a5,a5
    8020072a:	0017e793          	ori	a5,a5,1
    8020072e:	c8dc                	sw	a5,20(s1)
  spi->csid = 0;
    80200730:	0004a823          	sw	zero,16(s1)
  unsigned int quotient = (input_khz + 2 * max_target_khz - 1) / (2 * max_target_khz);
    80200734:	31f9079b          	addiw	a5,s2,799
    80200738:	0007861b          	sext.w	a2,a5
  if (quotient == 0) {
    8020073c:	31f00693          	li	a3,799
    return 0;
    80200740:	4701                	li	a4,0
  if (quotient == 0) {
    80200742:	00c6f863          	bgeu	a3,a2,80200752 <sd_init+0xa4>
  unsigned int quotient = (input_khz + 2 * max_target_khz - 1) / (2 * max_target_khz);
    80200746:	32000713          	li	a4,800
    8020074a:	02e7d7bb          	divuw	a5,a5,a4
    return quotient - 1;
    8020074e:	fff7871b          	addiw	a4,a5,-1
  spi->sckdiv = spi_min_clk_divisor(input_clk_khz, SD_POWER_ON_FREQ_KHZ);
    80200752:	c098                	sw	a4,0(s1)
  spi->csmode.mode = SPI_CSMODE_OFF;
    80200754:	4c9c                	lw	a5,24(s1)
    80200756:	0037e793          	ori	a5,a5,3
    8020075a:	cc9c                	sw	a5,24(s1)
    8020075c:	49a9                	li	s3,10
  return spi_txrx(spi, 0xFF);
    8020075e:	0ff00593          	li	a1,255
    80200762:	8526                	mv	a0,s1
    80200764:	00000097          	auipc	ra,0x0
    80200768:	d56080e7          	jalr	-682(ra) # 802004ba <spi_txrx>
  for (int i = 10; i > 0; i--) {
    8020076c:	39fd                	addiw	s3,s3,-1
    8020076e:	fe0998e3          	bnez	s3,8020075e <sd_init+0xb0>
  spi->csmode.mode = SPI_CSMODE_AUTO;
    80200772:	4c9c                	lw	a5,24(s1)
    80200774:	9bf1                	andi	a5,a5,-4
    80200776:	cc9c                	sw	a5,24(s1)
  rc = (sd_cmd(spi, SD_CMD(SD_CMD_GO_IDLE_STATE), 0, 0x95) != SD_RESPONSE_IDLE);
    80200778:	09500693          	li	a3,149
    8020077c:	4601                	li	a2,0
    8020077e:	04000593          	li	a1,64
    80200782:	8526                	mv	a0,s1
    80200784:	00000097          	auipc	ra,0x0
    80200788:	e70080e7          	jalr	-400(ra) # 802005f4 <sd_cmd>
    8020078c:	89aa                	mv	s3,a0
  return spi_txrx(spi, 0xFF);
    8020078e:	0ff00593          	li	a1,255
    80200792:	8526                	mv	a0,s1
    80200794:	00000097          	auipc	ra,0x0
    80200798:	d26080e7          	jalr	-730(ra) # 802004ba <spi_txrx>
  spi->csmode.mode = SPI_CSMODE_AUTO;
    8020079c:	4c9c                	lw	a5,24(s1)
    8020079e:	9bf1                	andi	a5,a5,-4
    802007a0:	cc9c                	sw	a5,24(s1)
    if (sd_cmd0(spi)) return SD_INIT_ERROR_CMD0;
    802007a2:	4785                	li	a5,1
    802007a4:	4505                	li	a0,1
    802007a6:	f4f995e3          	bne	s3,a5,802006f0 <sd_init+0x42>
  rc = (sd_cmd(spi, SD_CMD(SD_CMD_SEND_IF_COND), 0x000001AA, 0x87) != SD_RESPONSE_IDLE);
    802007aa:	08700693          	li	a3,135
    802007ae:	1aa00613          	li	a2,426
    802007b2:	04800593          	li	a1,72
    802007b6:	8526                	mv	a0,s1
    802007b8:	00000097          	auipc	ra,0x0
    802007bc:	e3c080e7          	jalr	-452(ra) # 802005f4 <sd_cmd>
    802007c0:	89aa                	mv	s3,a0
  return spi_txrx(spi, 0xFF);
    802007c2:	0ff00593          	li	a1,255
    802007c6:	8526                	mv	a0,s1
    802007c8:	00000097          	auipc	ra,0x0
    802007cc:	cf2080e7          	jalr	-782(ra) # 802004ba <spi_txrx>
    802007d0:	0ff00593          	li	a1,255
    802007d4:	8526                	mv	a0,s1
    802007d6:	00000097          	auipc	ra,0x0
    802007da:	ce4080e7          	jalr	-796(ra) # 802004ba <spi_txrx>
    802007de:	0ff00593          	li	a1,255
    802007e2:	8526                	mv	a0,s1
    802007e4:	00000097          	auipc	ra,0x0
    802007e8:	cd6080e7          	jalr	-810(ra) # 802004ba <spi_txrx>
    802007ec:	8a2a                	mv	s4,a0
    802007ee:	0ff00593          	li	a1,255
    802007f2:	8526                	mv	a0,s1
    802007f4:	00000097          	auipc	ra,0x0
    802007f8:	cc6080e7          	jalr	-826(ra) # 802004ba <spi_txrx>
  rc = (sd_cmd(spi, SD_CMD(SD_CMD_SEND_IF_COND), 0x000001AA, 0x87) != SD_RESPONSE_IDLE);
    802007fc:	19fd                	addi	s3,s3,-1
    802007fe:	013039b3          	snez	s3,s3
  rc |= (sd_dummy(spi) != 0xAA); /* check pattern */
    80200802:	0005079b          	sext.w	a5,a0
    80200806:	f5678793          	addi	a5,a5,-170 # 7ff56 <_entry-0x801800aa>
    8020080a:	00f037b3          	snez	a5,a5
    8020080e:	00f9e9b3          	or	s3,s3,a5
  rc |= ((sd_dummy(spi) & 0xF) != 0x1); /* voltage */
    80200812:	00fa7a13          	andi	s4,s4,15
    80200816:	1a7d                	addi	s4,s4,-1
    80200818:	01403a33          	snez	s4,s4
    8020081c:	0149e9b3          	or	s3,s3,s4
    80200820:	0ff9f993          	andi	s3,s3,255
  return spi_txrx(spi, 0xFF);
    80200824:	0ff00593          	li	a1,255
    80200828:	8526                	mv	a0,s1
    8020082a:	00000097          	auipc	ra,0x0
    8020082e:	c90080e7          	jalr	-880(ra) # 802004ba <spi_txrx>
  spi->csmode.mode = SPI_CSMODE_AUTO;
    80200832:	4c9c                	lw	a5,24(s1)
    80200834:	9bf1                	andi	a5,a5,-4
    80200836:	cc9c                	sw	a5,24(s1)
    if (sd_cmd8(spi)) return SD_INIT_ERROR_CMD8;
    80200838:	4509                	li	a0,2
    8020083a:	ea099be3          	bnez	s3,802006f0 <sd_init+0x42>
  } while (r == SD_RESPONSE_IDLE);
    8020083e:	4a05                	li	s4,1
  sd_cmd(spi, SD_CMD(SD_CMD_APP_CMD), 0, 0x65);
    80200840:	06500693          	li	a3,101
    80200844:	4601                	li	a2,0
    80200846:	07700593          	li	a1,119
    8020084a:	8526                	mv	a0,s1
    8020084c:	00000097          	auipc	ra,0x0
    80200850:	da8080e7          	jalr	-600(ra) # 802005f4 <sd_cmd>
  return spi_txrx(spi, 0xFF);
    80200854:	0ff00593          	li	a1,255
    80200858:	8526                	mv	a0,s1
    8020085a:	00000097          	auipc	ra,0x0
    8020085e:	c60080e7          	jalr	-928(ra) # 802004ba <spi_txrx>
  spi->csmode.mode = SPI_CSMODE_AUTO;
    80200862:	4c9c                	lw	a5,24(s1)
    80200864:	9bf1                	andi	a5,a5,-4
    80200866:	cc9c                	sw	a5,24(s1)
    r = sd_cmd(spi, SD_CMD(SD_CMD_APP_SEND_OP_COND), 0x40000000, 0x77); /* HCS = 1 */
    80200868:	07700693          	li	a3,119
    8020086c:	40000637          	lui	a2,0x40000
    80200870:	06900593          	li	a1,105
    80200874:	8526                	mv	a0,s1
    80200876:	00000097          	auipc	ra,0x0
    8020087a:	d7e080e7          	jalr	-642(ra) # 802005f4 <sd_cmd>
    8020087e:	0ff57993          	andi	s3,a0,255
  return spi_txrx(spi, 0xFF);
    80200882:	0ff00593          	li	a1,255
    80200886:	8526                	mv	a0,s1
    80200888:	00000097          	auipc	ra,0x0
    8020088c:	c32080e7          	jalr	-974(ra) # 802004ba <spi_txrx>
  spi->csmode.mode = SPI_CSMODE_AUTO;
    80200890:	4c9c                	lw	a5,24(s1)
    80200892:	9bf1                	andi	a5,a5,-4
    80200894:	cc9c                	sw	a5,24(s1)
  } while (r == SD_RESPONSE_IDLE);
    80200896:	fb4985e3          	beq	s3,s4,80200840 <sd_init+0x192>
    if (sd_acmd41(spi)) return SD_INIT_ERROR_ACMD41;
    8020089a:	450d                	li	a0,3
    8020089c:	e4099ae3          	bnez	s3,802006f0 <sd_init+0x42>
  rc = (sd_cmd(spi, SD_CMD(SD_CMD_SET_BLOCKLEN), 0x200, 0x15) != 0x00);
    802008a0:	46d5                	li	a3,21
    802008a2:	20000613          	li	a2,512
    802008a6:	05000593          	li	a1,80
    802008aa:	8526                	mv	a0,s1
    802008ac:	00000097          	auipc	ra,0x0
    802008b0:	d48080e7          	jalr	-696(ra) # 802005f4 <sd_cmd>
    802008b4:	89aa                	mv	s3,a0
  return spi_txrx(spi, 0xFF);
    802008b6:	0ff00593          	li	a1,255
    802008ba:	8526                	mv	a0,s1
    802008bc:	00000097          	auipc	ra,0x0
    802008c0:	bfe080e7          	jalr	-1026(ra) # 802004ba <spi_txrx>
  spi->csmode.mode = SPI_CSMODE_AUTO;
    802008c4:	4c9c                	lw	a5,24(s1)
    802008c6:	9bf1                	andi	a5,a5,-4
    802008c8:	cc9c                	sw	a5,24(s1)
    if (sd_cmd16(spi)) return SD_INIT_ERROR_CMD16;
    802008ca:	4515                	li	a0,5
    802008cc:	de098ce3          	beqz	s3,802006c4 <sd_init+0x16>
    802008d0:	b505                	j	802006f0 <sd_init+0x42>

00000000802008d2 <sd_read_blocks>:


int sd_read_blocks(spi_ctrl* spi, void* dst, uint32_t src_lba, size_t size)
{
    802008d2:	715d                	addi	sp,sp,-80
    802008d4:	e486                	sd	ra,72(sp)
    802008d6:	e0a2                	sd	s0,64(sp)
    802008d8:	fc26                	sd	s1,56(sp)
    802008da:	f84a                	sd	s2,48(sp)
    802008dc:	f44e                	sd	s3,40(sp)
    802008de:	f052                	sd	s4,32(sp)
    802008e0:	ec56                	sd	s5,24(sp)
    802008e2:	e85a                	sd	s6,16(sp)
    802008e4:	e45e                	sd	s7,8(sp)
    802008e6:	e062                	sd	s8,0(sp)
    802008e8:	0880                	addi	s0,sp,80
    802008ea:	892a                	mv	s2,a0
    802008ec:	89ae                	mv	s3,a1
    802008ee:	84b2                	mv	s1,a2
    802008f0:	8ab6                	mv	s5,a3
  volatile uint8_t *p = dst;
  long i = size;
  int rc = 0;

  uint8_t crc = 0;
  crc = crc7(crc, SD_CMD(SD_CMD_READ_BLOCK_MULTIPLE));
    802008f2:	05200593          	li	a1,82
    802008f6:	4501                	li	a0,0
    802008f8:	00000097          	auipc	ra,0x0
    802008fc:	c92080e7          	jalr	-878(ra) # 8020058a <crc7>
  crc = crc7(crc, src_lba >> 24);
    80200900:	0184d59b          	srliw	a1,s1,0x18
    80200904:	00000097          	auipc	ra,0x0
    80200908:	c86080e7          	jalr	-890(ra) # 8020058a <crc7>
  crc = crc7(crc, (src_lba >> 16) & 0xff);
    8020090c:	0104d59b          	srliw	a1,s1,0x10
    80200910:	0ff5f593          	andi	a1,a1,255
    80200914:	00000097          	auipc	ra,0x0
    80200918:	c76080e7          	jalr	-906(ra) # 8020058a <crc7>
  crc = crc7(crc, (src_lba >> 8) & 0xff);
    8020091c:	0084d59b          	srliw	a1,s1,0x8
    80200920:	0ff5f593          	andi	a1,a1,255
    80200924:	00000097          	auipc	ra,0x0
    80200928:	c66080e7          	jalr	-922(ra) # 8020058a <crc7>
  crc = crc7(crc, src_lba & 0xff);
    8020092c:	0ff4f593          	andi	a1,s1,255
    80200930:	00000097          	auipc	ra,0x0
    80200934:	c5a080e7          	jalr	-934(ra) # 8020058a <crc7>
  crc = (crc << 1) | 1;
    80200938:	0015169b          	slliw	a3,a0,0x1
    8020093c:	0016e693          	ori	a3,a3,1
  if (sd_cmd(spi, SD_CMD(SD_CMD_READ_BLOCK_MULTIPLE), src_lba, crc) != 0x00) {
    80200940:	0ff6f693          	andi	a3,a3,255
    80200944:	8626                	mv	a2,s1
    80200946:	05200593          	li	a1,82
    8020094a:	854a                	mv	a0,s2
    8020094c:	00000097          	auipc	ra,0x0
    80200950:	ca8080e7          	jalr	-856(ra) # 802005f4 <sd_cmd>
    80200954:	8baa                	mv	s7,a0
    80200956:	20098993          	addi	s3,s3,512
    uint16_t crc, crc_exp;
    long n;

    crc = 0;
    n = 512;
    while (sd_dummy(spi) != SD_DATA_TOKEN);
    8020095a:	0fe00a13          	li	s4,254
    crc = 0;
    8020095e:	4b01                	li	s6,0
  if (sd_cmd(spi, SD_CMD(SD_CMD_READ_BLOCK_MULTIPLE), src_lba, crc) != 0x00) {
    80200960:	e149                	bnez	a0,802009e2 <sd_read_blocks+0x110>
    80200962:	e0098c13          	addi	s8,s3,-512
  return spi_txrx(spi, 0xFF);
    80200966:	0ff00593          	li	a1,255
    8020096a:	854a                	mv	a0,s2
    8020096c:	00000097          	auipc	ra,0x0
    80200970:	b4e080e7          	jalr	-1202(ra) # 802004ba <spi_txrx>
    while (sd_dummy(spi) != SD_DATA_TOKEN);
    80200974:	ff4519e3          	bne	a0,s4,80200966 <sd_read_blocks+0x94>
    crc = 0;
    80200978:	84da                	mv	s1,s6
  return spi_txrx(spi, 0xFF);
    8020097a:	0ff00593          	li	a1,255
    8020097e:	854a                	mv	a0,s2
    80200980:	00000097          	auipc	ra,0x0
    80200984:	b3a080e7          	jalr	-1222(ra) # 802004ba <spi_txrx>
    80200988:	85aa                	mv	a1,a0
    do {
      uint8_t x = sd_dummy(spi);
      *p++ = x;
    8020098a:	87e2                	mv	a5,s8
    8020098c:	0c05                	addi	s8,s8,1
    8020098e:	00a78023          	sb	a0,0(a5)
      crc = crc16(crc, x);
    80200992:	8526                	mv	a0,s1
    80200994:	00000097          	auipc	ra,0x0
    80200998:	c1e080e7          	jalr	-994(ra) # 802005b2 <crc16>
    8020099c:	84aa                	mv	s1,a0
    } while (--n > 0);
    8020099e:	fd3c1ee3          	bne	s8,s3,8020097a <sd_read_blocks+0xa8>
  return spi_txrx(spi, 0xFF);
    802009a2:	0ff00593          	li	a1,255
    802009a6:	854a                	mv	a0,s2
    802009a8:	00000097          	auipc	ra,0x0
    802009ac:	b12080e7          	jalr	-1262(ra) # 802004ba <spi_txrx>

    crc_exp = ((uint16_t)sd_dummy(spi) << 8);
    802009b0:	00851c1b          	slliw	s8,a0,0x8
    802009b4:	1c42                	slli	s8,s8,0x30
    802009b6:	030c5c13          	srli	s8,s8,0x30
  return spi_txrx(spi, 0xFF);
    802009ba:	0ff00593          	li	a1,255
    802009be:	854a                	mv	a0,s2
    802009c0:	00000097          	auipc	ra,0x0
    802009c4:	afa080e7          	jalr	-1286(ra) # 802004ba <spi_txrx>
    crc_exp |= sd_dummy(spi);
    802009c8:	00ac67b3          	or	a5,s8,a0

    if (crc != crc_exp) {
    802009cc:	2481                	sext.w	s1,s1
    802009ce:	17c2                	slli	a5,a5,0x30
    802009d0:	93c1                	srli	a5,a5,0x30
    802009d2:	02f49663          	bne	s1,a5,802009fe <sd_read_blocks+0x12c>
      break;
    }
//    if ((i % 2000) == 0){
//      puts(".");
//    }
  } while (--i > 0);
    802009d6:	1afd                	addi	s5,s5,-1
    802009d8:	20098993          	addi	s3,s3,512
    802009dc:	f95043e3          	bgtz	s5,80200962 <sd_read_blocks+0x90>
    802009e0:	a005                	j	80200a00 <sd_read_blocks+0x12e>
  return spi_txrx(spi, 0xFF);
    802009e2:	0ff00593          	li	a1,255
    802009e6:	854a                	mv	a0,s2
    802009e8:	00000097          	auipc	ra,0x0
    802009ec:	ad2080e7          	jalr	-1326(ra) # 802004ba <spi_txrx>
  spi->csmode.mode = SPI_CSMODE_AUTO;
    802009f0:	01892783          	lw	a5,24(s2)
    802009f4:	9bf1                	andi	a5,a5,-4
    802009f6:	00f92c23          	sw	a5,24(s2)
    return SD_COPY_ERROR_CMD18;
    802009fa:	4b85                	li	s7,1
    802009fc:	a03d                	j	80200a2a <sd_read_blocks+0x158>
      rc = SD_COPY_ERROR_CMD18_CRC;
    802009fe:	4b89                	li	s7,2

  sd_cmd(spi, SD_CMD(SD_CMD_STOP_TRANSMISSION), 0, 0x01);
    80200a00:	4685                	li	a3,1
    80200a02:	4601                	li	a2,0
    80200a04:	04c00593          	li	a1,76
    80200a08:	854a                	mv	a0,s2
    80200a0a:	00000097          	auipc	ra,0x0
    80200a0e:	bea080e7          	jalr	-1046(ra) # 802005f4 <sd_cmd>
  return spi_txrx(spi, 0xFF);
    80200a12:	0ff00593          	li	a1,255
    80200a16:	854a                	mv	a0,s2
    80200a18:	00000097          	auipc	ra,0x0
    80200a1c:	aa2080e7          	jalr	-1374(ra) # 802004ba <spi_txrx>
  spi->csmode.mode = SPI_CSMODE_AUTO;
    80200a20:	01892783          	lw	a5,24(s2)
    80200a24:	9bf1                	andi	a5,a5,-4
    80200a26:	00f92c23          	sw	a5,24(s2)
  sd_cmd_end(spi);
  return rc;
}
    80200a2a:	855e                	mv	a0,s7
    80200a2c:	60a6                	ld	ra,72(sp)
    80200a2e:	6406                	ld	s0,64(sp)
    80200a30:	74e2                	ld	s1,56(sp)
    80200a32:	7942                	ld	s2,48(sp)
    80200a34:	79a2                	ld	s3,40(sp)
    80200a36:	7a02                	ld	s4,32(sp)
    80200a38:	6ae2                	ld	s5,24(sp)
    80200a3a:	6b42                	ld	s6,16(sp)
    80200a3c:	6ba2                	ld	s7,8(sp)
    80200a3e:	6c02                	ld	s8,0(sp)
    80200a40:	6161                	addi	sp,sp,80
    80200a42:	8082                	ret

0000000080200a44 <sd_write_blocks>:


int sd_write_blocks(spi_ctrl* spi, void* src, uint32_t dst_lba, size_t size)
{
    80200a44:	711d                	addi	sp,sp,-96
    80200a46:	ec86                	sd	ra,88(sp)
    80200a48:	e8a2                	sd	s0,80(sp)
    80200a4a:	e4a6                	sd	s1,72(sp)
    80200a4c:	e0ca                	sd	s2,64(sp)
    80200a4e:	fc4e                	sd	s3,56(sp)
    80200a50:	f852                	sd	s4,48(sp)
    80200a52:	f456                	sd	s5,40(sp)
    80200a54:	f05a                	sd	s6,32(sp)
    80200a56:	ec5e                	sd	s7,24(sp)
    80200a58:	e862                	sd	s8,16(sp)
    80200a5a:	e466                	sd	s9,8(sp)
    80200a5c:	1080                	addi	s0,sp,96
    80200a5e:	8a2a                	mv	s4,a0
    80200a60:	8aae                	mv	s5,a1
    80200a62:	84b2                	mv	s1,a2
    80200a64:	8b36                	mv	s6,a3
    volatile uint8_t *p = src;
    long i = size;
    int rc = 0;

    uint8_t crc = 0;
    crc = crc7(crc, SD_CMD(SD_CMD_WRITE_BLOCK_MULTIPLE));
    80200a66:	05900593          	li	a1,89
    80200a6a:	4501                	li	a0,0
    80200a6c:	00000097          	auipc	ra,0x0
    80200a70:	b1e080e7          	jalr	-1250(ra) # 8020058a <crc7>
    crc = crc7(crc, dst_lba >> 24);
    80200a74:	0184d59b          	srliw	a1,s1,0x18
    80200a78:	00000097          	auipc	ra,0x0
    80200a7c:	b12080e7          	jalr	-1262(ra) # 8020058a <crc7>
    crc = crc7(crc, (dst_lba >> 16) & 0xff);
    80200a80:	0104d59b          	srliw	a1,s1,0x10
    80200a84:	0ff5f593          	andi	a1,a1,255
    80200a88:	00000097          	auipc	ra,0x0
    80200a8c:	b02080e7          	jalr	-1278(ra) # 8020058a <crc7>
    crc = crc7(crc, (dst_lba >> 8) & 0xff);
    80200a90:	0084d59b          	srliw	a1,s1,0x8
    80200a94:	0ff5f593          	andi	a1,a1,255
    80200a98:	00000097          	auipc	ra,0x0
    80200a9c:	af2080e7          	jalr	-1294(ra) # 8020058a <crc7>
    crc = crc7(crc, dst_lba & 0xff);
    80200aa0:	0ff4f593          	andi	a1,s1,255
    80200aa4:	00000097          	auipc	ra,0x0
    80200aa8:	ae6080e7          	jalr	-1306(ra) # 8020058a <crc7>
    crc = (crc << 1) | 1;
    80200aac:	0015169b          	slliw	a3,a0,0x1
    80200ab0:	0016e693          	ori	a3,a3,1
    if (sd_cmd(spi, SD_CMD(SD_CMD_WRITE_BLOCK_MULTIPLE), dst_lba, crc) != 0x00) {
    80200ab4:	0ff6f693          	andi	a3,a3,255
    80200ab8:	8626                	mv	a2,s1
    80200aba:	05900593          	li	a1,89
    80200abe:	8552                	mv	a0,s4
    80200ac0:	00000097          	auipc	ra,0x0
    80200ac4:	b34080e7          	jalr	-1228(ra) # 802005f4 <sd_cmd>
    80200ac8:	ed45                	bnez	a0,80200b80 <sd_write_blocks+0x13c>
    80200aca:	8caa                	mv	s9,a0
  return spi_txrx(spi, 0xFF);
    80200acc:	0ff00593          	li	a1,255
    80200ad0:	8552                	mv	a0,s4
    80200ad2:	00000097          	auipc	ra,0x0
    80200ad6:	9e8080e7          	jalr	-1560(ra) # 802004ba <spi_txrx>
    80200ada:	0ff00593          	li	a1,255
    80200ade:	8552                	mv	a0,s4
    80200ae0:	00000097          	auipc	ra,0x0
    80200ae4:	9da080e7          	jalr	-1574(ra) # 802004ba <spi_txrx>
    80200ae8:	200a8a93          	addi	s5,s5,512

    do {
        uint16_t crc;
        long n;

        crc = 0;
    80200aec:	4c01                	li	s8,0
        } while (--n);

        sd_txrx(spi, crc >> 8);
        sd_txrx(spi, crc & 0xff);

        if ((sd_dummy(spi) & SD_DATA_RESPONSE_MASK) != SD_DATA_RESPONSE_ACCEPTED) {
    80200aee:	4b95                	li	s7,5
    80200af0:	e00a8993          	addi	s3,s5,-512
  return spi_txrx(spi, data);
    80200af4:	0fc00593          	li	a1,252
    80200af8:	8552                	mv	a0,s4
    80200afa:	00000097          	auipc	ra,0x0
    80200afe:	9c0080e7          	jalr	-1600(ra) # 802004ba <spi_txrx>
        crc = 0;
    80200b02:	8962                	mv	s2,s8
            uint8_t x = *p++;
    80200b04:	87ce                	mv	a5,s3
    80200b06:	0985                	addi	s3,s3,1
    80200b08:	0007c483          	lbu	s1,0(a5)
    80200b0c:	0ff4f493          	andi	s1,s1,255
  return spi_txrx(spi, data);
    80200b10:	85a6                	mv	a1,s1
    80200b12:	8552                	mv	a0,s4
    80200b14:	00000097          	auipc	ra,0x0
    80200b18:	9a6080e7          	jalr	-1626(ra) # 802004ba <spi_txrx>
            crc = crc16(crc, x);
    80200b1c:	85a6                	mv	a1,s1
    80200b1e:	854a                	mv	a0,s2
    80200b20:	00000097          	auipc	ra,0x0
    80200b24:	a92080e7          	jalr	-1390(ra) # 802005b2 <crc16>
    80200b28:	892a                	mv	s2,a0
        } while (--n);
    80200b2a:	fd599de3          	bne	s3,s5,80200b04 <sd_write_blocks+0xc0>
        sd_txrx(spi, crc >> 8);
    80200b2e:	0085559b          	srliw	a1,a0,0x8
  return spi_txrx(spi, data);
    80200b32:	0ff5f593          	andi	a1,a1,255
    80200b36:	8552                	mv	a0,s4
    80200b38:	00000097          	auipc	ra,0x0
    80200b3c:	982080e7          	jalr	-1662(ra) # 802004ba <spi_txrx>
    80200b40:	0ff97593          	andi	a1,s2,255
    80200b44:	8552                	mv	a0,s4
    80200b46:	00000097          	auipc	ra,0x0
    80200b4a:	974080e7          	jalr	-1676(ra) # 802004ba <spi_txrx>
  return spi_txrx(spi, 0xFF);
    80200b4e:	0ff00593          	li	a1,255
    80200b52:	8552                	mv	a0,s4
    80200b54:	00000097          	auipc	ra,0x0
    80200b58:	966080e7          	jalr	-1690(ra) # 802004ba <spi_txrx>
        if ((sd_dummy(spi) & SD_DATA_RESPONSE_MASK) != SD_DATA_RESPONSE_ACCEPTED) {
    80200b5c:	01f57793          	andi	a5,a0,31
    80200b60:	03779e63          	bne	a5,s7,80200b9c <sd_write_blocks+0x158>
  return spi_txrx(spi, 0xFF);
    80200b64:	0ff00593          	li	a1,255
    80200b68:	8552                	mv	a0,s4
    80200b6a:	00000097          	auipc	ra,0x0
    80200b6e:	950080e7          	jalr	-1712(ra) # 802004ba <spi_txrx>
            rc = SD_COPY_ERROR_CMD25_CRC;
            break;
        }

        while(sd_dummy(spi) == SD_RESPONSE_BUSY);
    80200b72:	d96d                	beqz	a0,80200b64 <sd_write_blocks+0x120>

    } while (--i);
    80200b74:	1b7d                	addi	s6,s6,-1
    80200b76:	200a8a93          	addi	s5,s5,512
    80200b7a:	f60b1be3          	bnez	s6,80200af0 <sd_write_blocks+0xac>
    80200b7e:	a005                	j	80200b9e <sd_write_blocks+0x15a>
  return spi_txrx(spi, 0xFF);
    80200b80:	0ff00593          	li	a1,255
    80200b84:	8552                	mv	a0,s4
    80200b86:	00000097          	auipc	ra,0x0
    80200b8a:	934080e7          	jalr	-1740(ra) # 802004ba <spi_txrx>
  spi->csmode.mode = SPI_CSMODE_AUTO;
    80200b8e:	018a2783          	lw	a5,24(s4)
    80200b92:	9bf1                	andi	a5,a5,-4
    80200b94:	00fa2c23          	sw	a5,24(s4)
        return SD_COPY_ERROR_CMD25;
    80200b98:	4c85                	li	s9,1
    80200b9a:	a899                	j	80200bf0 <sd_write_blocks+0x1ac>
            rc = SD_COPY_ERROR_CMD25_CRC;
    80200b9c:	4c89                	li	s9,2
  return spi_txrx(spi, data);
    80200b9e:	0fd00593          	li	a1,253
    80200ba2:	8552                	mv	a0,s4
    80200ba4:	00000097          	auipc	ra,0x0
    80200ba8:	916080e7          	jalr	-1770(ra) # 802004ba <spi_txrx>
  return spi_txrx(spi, 0xFF);
    80200bac:	0ff00593          	li	a1,255
    80200bb0:	8552                	mv	a0,s4
    80200bb2:	00000097          	auipc	ra,0x0
    80200bb6:	908080e7          	jalr	-1784(ra) # 802004ba <spi_txrx>
    80200bba:	0ff00593          	li	a1,255
    80200bbe:	8552                	mv	a0,s4
    80200bc0:	00000097          	auipc	ra,0x0
    80200bc4:	8fa080e7          	jalr	-1798(ra) # 802004ba <spi_txrx>
    80200bc8:	0ff00593          	li	a1,255
    80200bcc:	8552                	mv	a0,s4
    80200bce:	00000097          	auipc	ra,0x0
    80200bd2:	8ec080e7          	jalr	-1812(ra) # 802004ba <spi_txrx>

    // magic!
    sd_dummy(spi);
    sd_dummy(spi);

    while(sd_dummy(spi) == SD_RESPONSE_BUSY);
    80200bd6:	d96d                	beqz	a0,80200bc8 <sd_write_blocks+0x184>
  return spi_txrx(spi, 0xFF);
    80200bd8:	0ff00593          	li	a1,255
    80200bdc:	8552                	mv	a0,s4
    80200bde:	00000097          	auipc	ra,0x0
    80200be2:	8dc080e7          	jalr	-1828(ra) # 802004ba <spi_txrx>
  spi->csmode.mode = SPI_CSMODE_AUTO;
    80200be6:	018a2783          	lw	a5,24(s4)
    80200bea:	9bf1                	andi	a5,a5,-4
    80200bec:	00fa2c23          	sw	a5,24(s4)
    sd_cmd_end(spi);
    return rc;
}
    80200bf0:	8566                	mv	a0,s9
    80200bf2:	60e6                	ld	ra,88(sp)
    80200bf4:	6446                	ld	s0,80(sp)
    80200bf6:	64a6                	ld	s1,72(sp)
    80200bf8:	6906                	ld	s2,64(sp)
    80200bfa:	79e2                	ld	s3,56(sp)
    80200bfc:	7a42                	ld	s4,48(sp)
    80200bfe:	7aa2                	ld	s5,40(sp)
    80200c00:	7b02                	ld	s6,32(sp)
    80200c02:	6be2                	ld	s7,24(sp)
    80200c04:	6c42                	ld	s8,16(sp)
    80200c06:	6ca2                	ld	s9,8(sp)
    80200c08:	6125                	addi	sp,sp,96
    80200c0a:	8082                	ret

0000000080200c0c <disk_status>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
    80200c0c:	1141                	addi	sp,sp,-16
    80200c0e:	e422                	sd	s0,8(sp)
    80200c10:	0800                	addi	s0,sp,16
	return pdrv == DEV_MMC ? RES_OK : RES_PARERR;
    80200c12:	e501                	bnez	a0,80200c1a <disk_status+0xe>
}
    80200c14:	6422                	ld	s0,8(sp)
    80200c16:	0141                	addi	sp,sp,16
    80200c18:	8082                	ret
	return pdrv == DEV_MMC ? RES_OK : RES_PARERR;
    80200c1a:	4511                	li	a0,4
    80200c1c:	bfe5                	j	80200c14 <disk_status+0x8>

0000000080200c1e <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
	int result;

	if (pdrv != DEV_MMC){
    80200c1e:	e121                	bnez	a0,80200c5e <disk_initialize+0x40>
{
    80200c20:	1141                	addi	sp,sp,-16
    80200c22:	e406                	sd	ra,8(sp)
    80200c24:	e022                	sd	s0,0(sp)
    80200c26:	0800                	addi	s0,sp,16
        return RES_PARERR;
    }
    printf("diskinit\n");
    80200c28:	00010517          	auipc	a0,0x10
    80200c2c:	44850513          	addi	a0,a0,1096 # 80211070 <rodata_start+0x70>
    80200c30:	00006097          	auipc	ra,0x6
    80200c34:	2e8080e7          	jalr	744(ra) # 80206f18 <printf>
    result = sd_init(spictrl, peripheral_input_khz, 0);
    80200c38:	4601                	li	a2,0
    80200c3a:	0007a5b7          	lui	a1,0x7a
    80200c3e:	12058593          	addi	a1,a1,288 # 7a120 <_entry-0x80185ee0>
    80200c42:	003f1537          	lui	a0,0x3f1
    80200c46:	0515                	addi	a0,a0,5
    80200c48:	0542                	slli	a0,a0,0x10
    80200c4a:	00000097          	auipc	ra,0x0
    80200c4e:	a64080e7          	jalr	-1436(ra) # 802006ae <sd_init>
    return result == 0 ? RES_OK : RES_ERROR;
    80200c52:	00a03533          	snez	a0,a0
}
    80200c56:	60a2                	ld	ra,8(sp)
    80200c58:	6402                	ld	s0,0(sp)
    80200c5a:	0141                	addi	sp,sp,16
    80200c5c:	8082                	ret
        return RES_PARERR;
    80200c5e:	4511                	li	a0,4
}
    80200c60:	8082                	ret

0000000080200c62 <disk_read>:
	UINT count		/* Number of sectors to read */
)
{
	int result;

    if (pdrv != DEV_MMC){
    80200c62:	e515                	bnez	a0,80200c8e <disk_read+0x2c>
{
    80200c64:	1141                	addi	sp,sp,-16
    80200c66:	e406                	sd	ra,8(sp)
    80200c68:	e022                	sd	s0,0(sp)
    80200c6a:	0800                	addi	s0,sp,16
        return RES_PARERR;
    }

//    KERNEL_ASSERT(sector <= (uint64_t) UINT32_MAX, "sector must be 32 bits");
//    printf("read sector = %d begin, count = %d\n", sector, count);
    result = sd_read_blocks(spictrl, buff, sector, count);
    80200c6c:	1682                	slli	a3,a3,0x20
    80200c6e:	9281                	srli	a3,a3,0x20
    80200c70:	2601                	sext.w	a2,a2
    80200c72:	003f1537          	lui	a0,0x3f1
    80200c76:	0515                	addi	a0,a0,5
    80200c78:	0542                	slli	a0,a0,0x10
    80200c7a:	00000097          	auipc	ra,0x0
    80200c7e:	c58080e7          	jalr	-936(ra) # 802008d2 <sd_read_blocks>
//    printf("read sector end, result = %d\n", result);

    return result == 0 ? RES_OK : RES_ERROR;
    80200c82:	00a03533          	snez	a0,a0
}
    80200c86:	60a2                	ld	ra,8(sp)
    80200c88:	6402                	ld	s0,0(sp)
    80200c8a:	0141                	addi	sp,sp,16
    80200c8c:	8082                	ret
        return RES_PARERR;
    80200c8e:	4511                	li	a0,4
}
    80200c90:	8082                	ret

0000000080200c92 <disk_write>:
	UINT count			/* Number of sectors to write */
)
{
	int result;

    if (pdrv != DEV_MMC){
    80200c92:	e515                	bnez	a0,80200cbe <disk_write+0x2c>
{
    80200c94:	1141                	addi	sp,sp,-16
    80200c96:	e406                	sd	ra,8(sp)
    80200c98:	e022                	sd	s0,0(sp)
    80200c9a:	0800                	addi	s0,sp,16
        return RES_PARERR;
    }

//    KERNEL_ASSERT(sector <= (uint64_t) UINT32_MAX, "sector must be 32 bits");
//    printf("write sector = %d begin, count = %d\n", sector, count);
    result = sd_write_blocks(spictrl, (void*)buff, sector, count);
    80200c9c:	1682                	slli	a3,a3,0x20
    80200c9e:	9281                	srli	a3,a3,0x20
    80200ca0:	2601                	sext.w	a2,a2
    80200ca2:	003f1537          	lui	a0,0x3f1
    80200ca6:	0515                	addi	a0,a0,5
    80200ca8:	0542                	slli	a0,a0,0x10
    80200caa:	00000097          	auipc	ra,0x0
    80200cae:	d9a080e7          	jalr	-614(ra) # 80200a44 <sd_write_blocks>
//    printf("write sector end, result = %d\n", result);
    return result == 0 ? RES_OK : RES_ERROR;
    80200cb2:	00a03533          	snez	a0,a0
}
    80200cb6:	60a2                	ld	ra,8(sp)
    80200cb8:	6402                	ld	s0,0(sp)
    80200cba:	0141                	addi	sp,sp,16
    80200cbc:	8082                	ret
        return RES_PARERR;
    80200cbe:	4511                	li	a0,4
}
    80200cc0:	8082                	ret

0000000080200cc2 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
    80200cc2:	1141                	addi	sp,sp,-16
    80200cc4:	e422                	sd	s0,8(sp)
    80200cc6:	0800                	addi	s0,sp,16
    DRESULT res;

    if (pdrv != DEV_MMC){
    80200cc8:	e91d                	bnez	a0,80200cfe <disk_ioctl+0x3c>
        return RES_PARERR;
    }

    switch (cmd) {
    80200cca:	4789                	li	a5,2
    80200ccc:	02f58363          	beq	a1,a5,80200cf2 <disk_ioctl+0x30>
    80200cd0:	00b7e863          	bltu	a5,a1,80200ce0 <disk_ioctl+0x1e>
    80200cd4:	c595                	beqz	a1,80200d00 <disk_ioctl+0x3e>
    case CTRL_SYNC:
        res = RES_OK;
        break;
    case GET_SECTOR_COUNT:
        *(DWORD*)buff = 13631488;
    80200cd6:	00d007b7          	lui	a5,0xd00
    80200cda:	c21c                	sw	a5,0(a2)
        res = RES_OK;
    80200cdc:	4501                	li	a0,0
        break;
    80200cde:	a00d                	j	80200d00 <disk_ioctl+0x3e>
    switch (cmd) {
    80200ce0:	478d                	li	a5,3
    80200ce2:	4511                	li	a0,4
    80200ce4:	00f59e63          	bne	a1,a5,80200d00 <disk_ioctl+0x3e>
    case GET_SECTOR_SIZE:
        *(WORD*)buff = 512;
        res = RES_OK;
        break;
    case GET_BLOCK_SIZE:
        *(WORD*)buff = 4096;
    80200ce8:	6785                	lui	a5,0x1
    80200cea:	00f61023          	sh	a5,0(a2) # 40000000 <_entry-0x40200000>
        res = RES_OK;
    80200cee:	4501                	li	a0,0
        break;
    80200cf0:	a801                	j	80200d00 <disk_ioctl+0x3e>
        *(WORD*)buff = 512;
    80200cf2:	20000793          	li	a5,512
    80200cf6:	00f61023          	sh	a5,0(a2)
        res = RES_OK;
    80200cfa:	4501                	li	a0,0
        break;
    80200cfc:	a011                	j	80200d00 <disk_ioctl+0x3e>
        return RES_PARERR;
    80200cfe:	4511                	li	a0,4
        res = RES_PARERR;
        break;
    }

    return res;
}
    80200d00:	6422                	ld	s0,8(sp)
    80200d02:	0141                	addi	sp,sp,16
    80200d04:	8082                	ret

0000000080200d06 <disk_init>:
#endif

int disk_init_flag;
void disk_init(void)
{
    if(disk_init_flag)return;
    80200d06:	00547797          	auipc	a5,0x547
    80200d0a:	49a7a783          	lw	a5,1178(a5) # 807481a0 <disk_init_flag>
    80200d0e:	c391                	beqz	a5,80200d12 <disk_init+0xc>
    80200d10:	8082                	ret
{
    80200d12:	1141                	addi	sp,sp,-16
    80200d14:	e406                	sd	ra,8(sp)
    80200d16:	e022                	sd	s0,0(sp)
    80200d18:	0800                	addi	s0,sp,16
    else disk_init_flag = 1;
    80200d1a:	4785                	li	a5,1
    80200d1c:	00547717          	auipc	a4,0x547
    80200d20:	48f72223          	sw	a5,1156(a4) # 807481a0 <disk_init_flag>
    #ifdef RAM
    ramdisk_init();
    80200d24:	fffff097          	auipc	ra,0xfffff
    80200d28:	65e080e7          	jalr	1630(ra) # 80200382 <ramdisk_init>
    #else
    disk_initialize(0);
    #endif
}
    80200d2c:	60a2                	ld	ra,8(sp)
    80200d2e:	6402                	ld	s0,0(sp)
    80200d30:	0141                	addi	sp,sp,16
    80200d32:	8082                	ret

0000000080200d34 <vdisk_read>:

void vdisk_read(struct buf *b)
{
    80200d34:	1141                	addi	sp,sp,-16
    80200d36:	e406                	sd	ra,8(sp)
    80200d38:	e022                	sd	s0,0(sp)
    80200d3a:	0800                	addi	s0,sp,16
    #ifdef RAM    
	ramdisk_rw(b, 0);
    80200d3c:	4581                	li	a1,0
    80200d3e:	fffff097          	auipc	ra,0xfffff
    80200d42:	694080e7          	jalr	1684(ra) # 802003d2 <ramdisk_rw>
    #else 
	disk_read(0,b->data, b->sectorno,1);
    #endif
}
    80200d46:	60a2                	ld	ra,8(sp)
    80200d48:	6402                	ld	s0,0(sp)
    80200d4a:	0141                	addi	sp,sp,16
    80200d4c:	8082                	ret

0000000080200d4e <vdisk_write>:

void vdisk_write(struct buf *b)
{
    80200d4e:	1141                	addi	sp,sp,-16
    80200d50:	e406                	sd	ra,8(sp)
    80200d52:	e022                	sd	s0,0(sp)
    80200d54:	0800                	addi	s0,sp,16
    #ifdef RAM
    	ramdisk_rw(b, 1);
    80200d56:	4585                	li	a1,1
    80200d58:	fffff097          	auipc	ra,0xfffff
    80200d5c:	67a080e7          	jalr	1658(ra) # 802003d2 <ramdisk_rw>
    #else 
	disk_write(0,b->data, b->sectorno,1);
    #endif
}
    80200d60:	60a2                	ld	ra,8(sp)
    80200d62:	6402                	ld	s0,0(sp)
    80200d64:	0141                	addi	sp,sp,16
    80200d66:	8082                	ret

0000000080200d68 <disk_intr>:

void disk_intr(void)
{
    80200d68:	1141                	addi	sp,sp,-16
    80200d6a:	e422                	sd	s0,8(sp)
    80200d6c:	0800                	addi	s0,sp,16
    #ifdef SD
        // dmac_intr(DMAC_CHANNEL0);
    #endif
}
    80200d6e:	6422                	ld	s0,8(sp)
    80200d70:	0141                	addi	sp,sp,16
    80200d72:	8082                	ret

0000000080200d74 <memset>:
#include "include/types.h"

void*
memset(void *dst, int c, uint n)
{
    80200d74:	1141                	addi	sp,sp,-16
    80200d76:	e422                	sd	s0,8(sp)
    80200d78:	0800                	addi	s0,sp,16
  char *cdst = (char *) dst;
  int i;
  for(i = 0; i < n; i++){
    80200d7a:	ce09                	beqz	a2,80200d94 <memset+0x20>
    80200d7c:	87aa                	mv	a5,a0
    80200d7e:	fff6071b          	addiw	a4,a2,-1
    80200d82:	1702                	slli	a4,a4,0x20
    80200d84:	9301                	srli	a4,a4,0x20
    80200d86:	0705                	addi	a4,a4,1
    80200d88:	972a                	add	a4,a4,a0
    cdst[i] = c;
    80200d8a:	00b78023          	sb	a1,0(a5)
  for(i = 0; i < n; i++){
    80200d8e:	0785                	addi	a5,a5,1
    80200d90:	fee79de3          	bne	a5,a4,80200d8a <memset+0x16>
  }
  return dst;
}
    80200d94:	6422                	ld	s0,8(sp)
    80200d96:	0141                	addi	sp,sp,16
    80200d98:	8082                	ret

0000000080200d9a <memcmp>:

int
memcmp(const void *v1, const void *v2, uint n)
{
    80200d9a:	1141                	addi	sp,sp,-16
    80200d9c:	e422                	sd	s0,8(sp)
    80200d9e:	0800                	addi	s0,sp,16
  const uchar *s1, *s2;

  s1 = v1;
  s2 = v2;
  while(n-- > 0){
    80200da0:	ca05                	beqz	a2,80200dd0 <memcmp+0x36>
    80200da2:	fff6069b          	addiw	a3,a2,-1
    80200da6:	1682                	slli	a3,a3,0x20
    80200da8:	9281                	srli	a3,a3,0x20
    80200daa:	0685                	addi	a3,a3,1
    80200dac:	96aa                	add	a3,a3,a0
    if(*s1 != *s2)
    80200dae:	00054783          	lbu	a5,0(a0) # 3f1000 <_entry-0x7fe0f000>
    80200db2:	0005c703          	lbu	a4,0(a1)
    80200db6:	00e79863          	bne	a5,a4,80200dc6 <memcmp+0x2c>
      return *s1 - *s2;
    s1++, s2++;
    80200dba:	0505                	addi	a0,a0,1
    80200dbc:	0585                	addi	a1,a1,1
  while(n-- > 0){
    80200dbe:	fed518e3          	bne	a0,a3,80200dae <memcmp+0x14>
  }

  return 0;
    80200dc2:	4501                	li	a0,0
    80200dc4:	a019                	j	80200dca <memcmp+0x30>
      return *s1 - *s2;
    80200dc6:	40e7853b          	subw	a0,a5,a4
}
    80200dca:	6422                	ld	s0,8(sp)
    80200dcc:	0141                	addi	sp,sp,16
    80200dce:	8082                	ret
  return 0;
    80200dd0:	4501                	li	a0,0
    80200dd2:	bfe5                	j	80200dca <memcmp+0x30>

0000000080200dd4 <memmove>:

void*
memmove(void *dst, const void *src, uint n)
{
    80200dd4:	1141                	addi	sp,sp,-16
    80200dd6:	e422                	sd	s0,8(sp)
    80200dd8:	0800                	addi	s0,sp,16
  const char *s;
  char *d;

  s = src;
  d = dst;
  if(s < d && s + n > d){
    80200dda:	00a5f963          	bgeu	a1,a0,80200dec <memmove+0x18>
    80200dde:	02061713          	slli	a4,a2,0x20
    80200de2:	9301                	srli	a4,a4,0x20
    80200de4:	00e587b3          	add	a5,a1,a4
    80200de8:	02f56563          	bltu	a0,a5,80200e12 <memmove+0x3e>
    s += n;
    d += n;
    while(n-- > 0)
      *--d = *--s;
  } else
    while(n-- > 0)
    80200dec:	fff6069b          	addiw	a3,a2,-1
    80200df0:	ce11                	beqz	a2,80200e0c <memmove+0x38>
    80200df2:	1682                	slli	a3,a3,0x20
    80200df4:	9281                	srli	a3,a3,0x20
    80200df6:	0685                	addi	a3,a3,1
    80200df8:	96ae                	add	a3,a3,a1
    80200dfa:	87aa                	mv	a5,a0
      *d++ = *s++;
    80200dfc:	0585                	addi	a1,a1,1
    80200dfe:	0785                	addi	a5,a5,1
    80200e00:	fff5c703          	lbu	a4,-1(a1)
    80200e04:	fee78fa3          	sb	a4,-1(a5)
    while(n-- > 0)
    80200e08:	fed59ae3          	bne	a1,a3,80200dfc <memmove+0x28>

  return dst;
}
    80200e0c:	6422                	ld	s0,8(sp)
    80200e0e:	0141                	addi	sp,sp,16
    80200e10:	8082                	ret
    d += n;
    80200e12:	972a                	add	a4,a4,a0
    while(n-- > 0)
    80200e14:	fff6069b          	addiw	a3,a2,-1
    80200e18:	da75                	beqz	a2,80200e0c <memmove+0x38>
    80200e1a:	02069613          	slli	a2,a3,0x20
    80200e1e:	9201                	srli	a2,a2,0x20
    80200e20:	fff64613          	not	a2,a2
    80200e24:	963e                	add	a2,a2,a5
      *--d = *--s;
    80200e26:	17fd                	addi	a5,a5,-1
    80200e28:	177d                	addi	a4,a4,-1
    80200e2a:	0007c683          	lbu	a3,0(a5)
    80200e2e:	00d70023          	sb	a3,0(a4)
    while(n-- > 0)
    80200e32:	fec79ae3          	bne	a5,a2,80200e26 <memmove+0x52>
    80200e36:	bfd9                	j	80200e0c <memmove+0x38>

0000000080200e38 <memcpy>:

// memcpy exists to placate GCC.  Use memmove.
void*
memcpy(void *dst, const void *src, uint n)
{
    80200e38:	1141                	addi	sp,sp,-16
    80200e3a:	e406                	sd	ra,8(sp)
    80200e3c:	e022                	sd	s0,0(sp)
    80200e3e:	0800                	addi	s0,sp,16
  return memmove(dst, src, n);
    80200e40:	00000097          	auipc	ra,0x0
    80200e44:	f94080e7          	jalr	-108(ra) # 80200dd4 <memmove>
}
    80200e48:	60a2                	ld	ra,8(sp)
    80200e4a:	6402                	ld	s0,0(sp)
    80200e4c:	0141                	addi	sp,sp,16
    80200e4e:	8082                	ret

0000000080200e50 <strncmp>:

int
strncmp(const char *p, const char *q, uint n)
{
    80200e50:	1141                	addi	sp,sp,-16
    80200e52:	e422                	sd	s0,8(sp)
    80200e54:	0800                	addi	s0,sp,16
  while(n > 0 && *p && *p == *q)
    80200e56:	ce11                	beqz	a2,80200e72 <strncmp+0x22>
    80200e58:	00054783          	lbu	a5,0(a0)
    80200e5c:	cf89                	beqz	a5,80200e76 <strncmp+0x26>
    80200e5e:	0005c703          	lbu	a4,0(a1)
    80200e62:	00f71a63          	bne	a4,a5,80200e76 <strncmp+0x26>
    n--, p++, q++;
    80200e66:	367d                	addiw	a2,a2,-1
    80200e68:	0505                	addi	a0,a0,1
    80200e6a:	0585                	addi	a1,a1,1
  while(n > 0 && *p && *p == *q)
    80200e6c:	f675                	bnez	a2,80200e58 <strncmp+0x8>
  if(n == 0)
    return 0;
    80200e6e:	4501                	li	a0,0
    80200e70:	a809                	j	80200e82 <strncmp+0x32>
    80200e72:	4501                	li	a0,0
    80200e74:	a039                	j	80200e82 <strncmp+0x32>
  if(n == 0)
    80200e76:	ca09                	beqz	a2,80200e88 <strncmp+0x38>
  return (uchar)*p - (uchar)*q;
    80200e78:	00054503          	lbu	a0,0(a0)
    80200e7c:	0005c783          	lbu	a5,0(a1)
    80200e80:	9d1d                	subw	a0,a0,a5
}
    80200e82:	6422                	ld	s0,8(sp)
    80200e84:	0141                	addi	sp,sp,16
    80200e86:	8082                	ret
    return 0;
    80200e88:	4501                	li	a0,0
    80200e8a:	bfe5                	j	80200e82 <strncmp+0x32>

0000000080200e8c <strncpy>:

char*
strncpy(char *s, const char *t, int n)
{
    80200e8c:	1141                	addi	sp,sp,-16
    80200e8e:	e422                	sd	s0,8(sp)
    80200e90:	0800                	addi	s0,sp,16
  char *os;

  os = s;
  while(n-- > 0 && (*s++ = *t++) != 0)
    80200e92:	872a                	mv	a4,a0
    80200e94:	8832                	mv	a6,a2
    80200e96:	367d                	addiw	a2,a2,-1
    80200e98:	01005963          	blez	a6,80200eaa <strncpy+0x1e>
    80200e9c:	0705                	addi	a4,a4,1
    80200e9e:	0005c783          	lbu	a5,0(a1)
    80200ea2:	fef70fa3          	sb	a5,-1(a4)
    80200ea6:	0585                	addi	a1,a1,1
    80200ea8:	f7f5                	bnez	a5,80200e94 <strncpy+0x8>
    ;
  while(n-- > 0)
    80200eaa:	00c05d63          	blez	a2,80200ec4 <strncpy+0x38>
    80200eae:	86ba                	mv	a3,a4
    *s++ = 0;
    80200eb0:	0685                	addi	a3,a3,1
    80200eb2:	fe068fa3          	sb	zero,-1(a3)
  while(n-- > 0)
    80200eb6:	fff6c793          	not	a5,a3
    80200eba:	9fb9                	addw	a5,a5,a4
    80200ebc:	010787bb          	addw	a5,a5,a6
    80200ec0:	fef048e3          	bgtz	a5,80200eb0 <strncpy+0x24>
  return os;
}
    80200ec4:	6422                	ld	s0,8(sp)
    80200ec6:	0141                	addi	sp,sp,16
    80200ec8:	8082                	ret

0000000080200eca <safestrcpy>:

// Like strncpy but guaranteed to NUL-terminate.
char*
safestrcpy(char *s, const char *t, int n)
{
    80200eca:	1141                	addi	sp,sp,-16
    80200ecc:	e422                	sd	s0,8(sp)
    80200ece:	0800                	addi	s0,sp,16
  char *os;

  os = s;
  if(n <= 0)
    80200ed0:	02c05363          	blez	a2,80200ef6 <safestrcpy+0x2c>
    80200ed4:	fff6069b          	addiw	a3,a2,-1
    80200ed8:	1682                	slli	a3,a3,0x20
    80200eda:	9281                	srli	a3,a3,0x20
    80200edc:	96ae                	add	a3,a3,a1
    80200ede:	87aa                	mv	a5,a0
    return os;
  while(--n > 0 && (*s++ = *t++) != 0)
    80200ee0:	00d58963          	beq	a1,a3,80200ef2 <safestrcpy+0x28>
    80200ee4:	0585                	addi	a1,a1,1
    80200ee6:	0785                	addi	a5,a5,1
    80200ee8:	fff5c703          	lbu	a4,-1(a1)
    80200eec:	fee78fa3          	sb	a4,-1(a5)
    80200ef0:	fb65                	bnez	a4,80200ee0 <safestrcpy+0x16>
    ;
  *s = 0;
    80200ef2:	00078023          	sb	zero,0(a5)
  return os;
}
    80200ef6:	6422                	ld	s0,8(sp)
    80200ef8:	0141                	addi	sp,sp,16
    80200efa:	8082                	ret

0000000080200efc <strlen>:

int
strlen(const char *s)
{
    80200efc:	1141                	addi	sp,sp,-16
    80200efe:	e422                	sd	s0,8(sp)
    80200f00:	0800                	addi	s0,sp,16
  int n;

  for(n = 0; s[n]; n++)
    80200f02:	00054783          	lbu	a5,0(a0)
    80200f06:	cf91                	beqz	a5,80200f22 <strlen+0x26>
    80200f08:	0505                	addi	a0,a0,1
    80200f0a:	87aa                	mv	a5,a0
    80200f0c:	4685                	li	a3,1
    80200f0e:	9e89                	subw	a3,a3,a0
    80200f10:	00f6853b          	addw	a0,a3,a5
    80200f14:	0785                	addi	a5,a5,1
    80200f16:	fff7c703          	lbu	a4,-1(a5)
    80200f1a:	fb7d                	bnez	a4,80200f10 <strlen+0x14>
    ;
  return n;
}
    80200f1c:	6422                	ld	s0,8(sp)
    80200f1e:	0141                	addi	sp,sp,16
    80200f20:	8082                	ret
  for(n = 0; s[n]; n++)
    80200f22:	4501                	li	a0,0
    80200f24:	bfe5                	j	80200f1c <strlen+0x20>

0000000080200f26 <wnstr>:

// convert uchar string into wide char string 
void wnstr(wchar *dst, char const *src, int len) {
    80200f26:	1141                	addi	sp,sp,-16
    80200f28:	e422                	sd	s0,8(sp)
    80200f2a:	0800                	addi	s0,sp,16
  while (len -- && *src) {
    80200f2c:	c215                	beqz	a2,80200f50 <wnstr+0x2a>
    80200f2e:	fff6071b          	addiw	a4,a2,-1
    80200f32:	1702                	slli	a4,a4,0x20
    80200f34:	9301                	srli	a4,a4,0x20
    80200f36:	0705                	addi	a4,a4,1
    80200f38:	0706                	slli	a4,a4,0x1
    80200f3a:	972a                	add	a4,a4,a0
    80200f3c:	0005c783          	lbu	a5,0(a1)
    80200f40:	cb81                	beqz	a5,80200f50 <wnstr+0x2a>
    *(uchar*)dst = *src++;
    80200f42:	0585                	addi	a1,a1,1
    80200f44:	00f50023          	sb	a5,0(a0)
    dst ++;
    80200f48:	0509                	addi	a0,a0,2
  while (len -- && *src) {
    80200f4a:	fee519e3          	bne	a0,a4,80200f3c <wnstr+0x16>
    dst ++;
    80200f4e:	853a                	mv	a0,a4
  }

  *dst = 0;
    80200f50:	00051023          	sh	zero,0(a0)
}
    80200f54:	6422                	ld	s0,8(sp)
    80200f56:	0141                	addi	sp,sp,16
    80200f58:	8082                	ret

0000000080200f5a <snstr>:

// convert wide char string into uchar string 
void snstr(char *dst, wchar const *src, int len) {
    80200f5a:	1141                	addi	sp,sp,-16
    80200f5c:	e422                	sd	s0,8(sp)
    80200f5e:	0800                	addi	s0,sp,16
  while (len -- && *src) {
    80200f60:	c221                	beqz	a2,80200fa0 <snstr+0x46>
    80200f62:	fff6079b          	addiw	a5,a2,-1
    80200f66:	fff6069b          	addiw	a3,a2,-1
    80200f6a:	1682                	slli	a3,a3,0x20
    80200f6c:	9281                	srli	a3,a3,0x20
    80200f6e:	0685                	addi	a3,a3,1
    80200f70:	96aa                	add	a3,a3,a0
    80200f72:	0005d703          	lhu	a4,0(a1)
    80200f76:	cb09                	beqz	a4,80200f88 <snstr+0x2e>
    *dst++ = (uchar)(*src & 0xff);
    80200f78:	0505                	addi	a0,a0,1
    80200f7a:	fee50fa3          	sb	a4,-1(a0)
    src ++;
    80200f7e:	0589                	addi	a1,a1,2
  while (len -- && *src) {
    80200f80:	37fd                	addiw	a5,a5,-1
    80200f82:	fed518e3          	bne	a0,a3,80200f72 <snstr+0x18>
    *dst++ = (uchar)(*src & 0xff);
    80200f86:	8536                	mv	a0,a3
  }
  while(len-- > 0)
    80200f88:	00f05c63          	blez	a5,80200fa0 <snstr+0x46>
    80200f8c:	37fd                	addiw	a5,a5,-1
    80200f8e:	1782                	slli	a5,a5,0x20
    80200f90:	9381                	srli	a5,a5,0x20
    80200f92:	0785                	addi	a5,a5,1
    80200f94:	97aa                	add	a5,a5,a0
    *dst++ = 0;
    80200f96:	0505                	addi	a0,a0,1
    80200f98:	fe050fa3          	sb	zero,-1(a0)
  while(len-- > 0)
    80200f9c:	fea79de3          	bne	a5,a0,80200f96 <snstr+0x3c>
}
    80200fa0:	6422                	ld	s0,8(sp)
    80200fa2:	0141                	addi	sp,sp,16
    80200fa4:	8082                	ret

0000000080200fa6 <wcsncmp>:

int wcsncmp(wchar const *s1, wchar const *s2, int len) {
    80200fa6:	1141                	addi	sp,sp,-16
    80200fa8:	e422                	sd	s0,8(sp)
    80200faa:	0800                	addi	s0,sp,16
    80200fac:	872a                	mv	a4,a0
  int ret = 0;

  while (len-- && *s1) {
    80200fae:	02061693          	slli	a3,a2,0x20
    80200fb2:	9281                	srli	a3,a3,0x20
    80200fb4:	0686                	slli	a3,a3,0x1
    80200fb6:	96ae                	add	a3,a3,a1
    80200fb8:	00d58f63          	beq	a1,a3,80200fd6 <wcsncmp+0x30>
    80200fbc:	00075783          	lhu	a5,0(a4)
    80200fc0:	cb89                	beqz	a5,80200fd2 <wcsncmp+0x2c>
    ret = (int)(*s1++ - *s2++);
    80200fc2:	0709                	addi	a4,a4,2
    80200fc4:	0589                	addi	a1,a1,2
    80200fc6:	ffe5d503          	lhu	a0,-2(a1)
    80200fca:	40a7853b          	subw	a0,a5,a0
    if (ret) break;
    80200fce:	d56d                	beqz	a0,80200fb8 <wcsncmp+0x12>
    80200fd0:	a021                	j	80200fd8 <wcsncmp+0x32>
    80200fd2:	4501                	li	a0,0
    80200fd4:	a011                	j	80200fd8 <wcsncmp+0x32>
    80200fd6:	4501                	li	a0,0
  }

  return ret;
}
    80200fd8:	6422                	ld	s0,8(sp)
    80200fda:	0141                	addi	sp,sp,16
    80200fdc:	8082                	ret

0000000080200fde <strchr>:

char*
strchr(const char *s, char c)
{
    80200fde:	1141                	addi	sp,sp,-16
    80200fe0:	e422                	sd	s0,8(sp)
    80200fe2:	0800                	addi	s0,sp,16
  for(; *s; s++)
    80200fe4:	00054783          	lbu	a5,0(a0)
    80200fe8:	cb99                	beqz	a5,80200ffe <strchr+0x20>
    if(*s == c)
    80200fea:	00f58763          	beq	a1,a5,80200ff8 <strchr+0x1a>
  for(; *s; s++)
    80200fee:	0505                	addi	a0,a0,1
    80200ff0:	00054783          	lbu	a5,0(a0)
    80200ff4:	fbfd                	bnez	a5,80200fea <strchr+0xc>
      return (char*)s;
  return 0;
    80200ff6:	4501                	li	a0,0
    80200ff8:	6422                	ld	s0,8(sp)
    80200ffa:	0141                	addi	sp,sp,16
    80200ffc:	8082                	ret
  return 0;
    80200ffe:	4501                	li	a0,0
    80201000:	bfe5                	j	80200ff8 <strchr+0x1a>

0000000080201002 <push_off>:
// it takes two pop_off()s to undo two push_off()s.  Also, if interrupts
// are initially off, then push_off, pop_off leaves them off.

void
push_off(void)
{
    80201002:	1101                	addi	sp,sp,-32
    80201004:	ec06                	sd	ra,24(sp)
    80201006:	e822                	sd	s0,16(sp)
    80201008:	e426                	sd	s1,8(sp)
    8020100a:	1000                	addi	s0,sp,32

static inline uint64
r_sstatus()
{
  uint64 x;
  asm volatile("csrr %0, sstatus" : "=r" (x) );
    8020100c:	100024f3          	csrr	s1,sstatus
    80201010:	100027f3          	csrr	a5,sstatus

// disable device interrupts
static inline void
intr_off()
{
  w_sstatus(r_sstatus() & ~SSTATUS_SIE);
    80201014:	9bf5                	andi	a5,a5,-3
  asm volatile("csrw sstatus, %0" : : "r" (x));
    80201016:	10079073          	csrw	sstatus,a5
  int old = intr_get();

  intr_off();
  //printf("\e[32mpush_off()\e[0m: cpuid(): %d\n", cpuid());
  if(mycpu()->noff == 0)
    8020101a:	00009097          	auipc	ra,0x9
    8020101e:	af4080e7          	jalr	-1292(ra) # 80209b0e <mycpu>
    80201022:	5d3c                	lw	a5,120(a0)
    80201024:	cf89                	beqz	a5,8020103e <push_off+0x3c>
    mycpu()->intena = old;
  mycpu()->noff += 1;
    80201026:	00009097          	auipc	ra,0x9
    8020102a:	ae8080e7          	jalr	-1304(ra) # 80209b0e <mycpu>
    8020102e:	5d3c                	lw	a5,120(a0)
    80201030:	2785                	addiw	a5,a5,1
    80201032:	dd3c                	sw	a5,120(a0)
}
    80201034:	60e2                	ld	ra,24(sp)
    80201036:	6442                	ld	s0,16(sp)
    80201038:	64a2                	ld	s1,8(sp)
    8020103a:	6105                	addi	sp,sp,32
    8020103c:	8082                	ret
    mycpu()->intena = old;
    8020103e:	00009097          	auipc	ra,0x9
    80201042:	ad0080e7          	jalr	-1328(ra) # 80209b0e <mycpu>
// are device interrupts enabled?
static inline int
intr_get()
{
  uint64 x = r_sstatus();
  return (x & SSTATUS_SIE) != 0;
    80201046:	8085                	srli	s1,s1,0x1
    80201048:	8885                	andi	s1,s1,1
    8020104a:	dd64                	sw	s1,124(a0)
    8020104c:	bfe9                	j	80201026 <push_off+0x24>

000000008020104e <pop_off>:

void
pop_off(void)
{
    8020104e:	1141                	addi	sp,sp,-16
    80201050:	e406                	sd	ra,8(sp)
    80201052:	e022                	sd	s0,0(sp)
    80201054:	0800                	addi	s0,sp,16
  struct cpu *c = mycpu();
    80201056:	00009097          	auipc	ra,0x9
    8020105a:	ab8080e7          	jalr	-1352(ra) # 80209b0e <mycpu>
  asm volatile("csrr %0, sstatus" : "=r" (x) );
    8020105e:	100027f3          	csrr	a5,sstatus
  return (x & SSTATUS_SIE) != 0;
    80201062:	8b89                	andi	a5,a5,2

  //printf("\e[31mpop_off()\e[0m: cpuid(): %d\n", cpuid());
  if(intr_get())
    80201064:	e78d                	bnez	a5,8020108e <pop_off+0x40>
    panic("pop_off - interruptible");
  if(c->noff < 1) {
    80201066:	5d3c                	lw	a5,120(a0)
    80201068:	02f05b63          	blez	a5,8020109e <pop_off+0x50>
    //printf("c->noff = %d\n", c->noff);
    panic("pop_off");
  }
  //printf("c->noff: %d\n", c->noff);
  //printf("c: %x\n", c);
  c->noff -= 1;
    8020106c:	37fd                	addiw	a5,a5,-1
    8020106e:	0007871b          	sext.w	a4,a5
    80201072:	dd3c                	sw	a5,120(a0)
  if(c->noff == 0 && c->intena)
    80201074:	eb09                	bnez	a4,80201086 <pop_off+0x38>
    80201076:	5d7c                	lw	a5,124(a0)
    80201078:	c799                	beqz	a5,80201086 <pop_off+0x38>
  asm volatile("csrr %0, sstatus" : "=r" (x) );
    8020107a:	100027f3          	csrr	a5,sstatus
  w_sstatus(r_sstatus() | SSTATUS_SIE);
    8020107e:	0027e793          	ori	a5,a5,2
  asm volatile("csrw sstatus, %0" : : "r" (x));
    80201082:	10079073          	csrw	sstatus,a5
    intr_on();
}
    80201086:	60a2                	ld	ra,8(sp)
    80201088:	6402                	ld	s0,0(sp)
    8020108a:	0141                	addi	sp,sp,16
    8020108c:	8082                	ret
    panic("pop_off - interruptible");
    8020108e:	00010517          	auipc	a0,0x10
    80201092:	ff250513          	addi	a0,a0,-14 # 80211080 <rodata_start+0x80>
    80201096:	00006097          	auipc	ra,0x6
    8020109a:	e38080e7          	jalr	-456(ra) # 80206ece <panic>
    panic("pop_off");
    8020109e:	00010517          	auipc	a0,0x10
    802010a2:	ffa50513          	addi	a0,a0,-6 # 80211098 <rodata_start+0x98>
    802010a6:	00006097          	auipc	ra,0x6
    802010aa:	e28080e7          	jalr	-472(ra) # 80206ece <panic>

00000000802010ae <image_init>:
#include "include/ramdisk.h"
#endif

void image_init(struct dirent* img)
{
    if(!FatFs[img->dev].valid){
    802010ae:	11454783          	lbu	a5,276(a0)
    802010b2:	6715                	lui	a4,0x5
    802010b4:	9b870713          	addi	a4,a4,-1608 # 49b8 <_entry-0x801fb648>
    802010b8:	02e78733          	mul	a4,a5,a4
    802010bc:	00554797          	auipc	a5,0x554
    802010c0:	af478793          	addi	a5,a5,-1292 # 80754bb0 <FatFs>
    802010c4:	97ba                	add	a5,a5,a4
    802010c6:	43dc                	lw	a5,4(a5)
    802010c8:	c391                	beqz	a5,802010cc <image_init+0x1e>
    802010ca:	8082                	ret
{
    802010cc:	1141                	addi	sp,sp,-16
    802010ce:	e406                	sd	ra,8(sp)
    802010d0:	e022                	sd	s0,0(sp)
    802010d2:	0800                	addi	s0,sp,16
      panic("no support filesystem");
    802010d4:	00010517          	auipc	a0,0x10
    802010d8:	fcc50513          	addi	a0,a0,-52 # 802110a0 <rodata_start+0xa0>
    802010dc:	00006097          	auipc	ra,0x6
    802010e0:	df2080e7          	jalr	-526(ra) # 80206ece <panic>

00000000802010e4 <image_read>:
    }
    return;
}

void image_read(struct buf *b,struct dirent* img)
{
    802010e4:	7179                	addi	sp,sp,-48
    802010e6:	f406                	sd	ra,40(sp)
    802010e8:	f022                	sd	s0,32(sp)
    802010ea:	ec26                	sd	s1,24(sp)
    802010ec:	e84a                	sd	s2,16(sp)
    802010ee:	e44e                	sd	s3,8(sp)
    802010f0:	1800                	addi	s0,sp,48
    802010f2:	892a                	mv	s2,a0
    802010f4:	84ae                	mv	s1,a1
  uint sectorno = b->sectorno;
  int off = sectorno*BSIZE;
    802010f6:	00c52983          	lw	s3,12(a0)
    802010fa:	0099999b          	slliw	s3,s3,0x9
  elock(img);
    802010fe:	852e                	mv	a0,a1
    80201100:	00002097          	auipc	ra,0x2
    80201104:	7f8080e7          	jalr	2040(ra) # 802038f8 <elock>
  if(eread(img,0,(uint64)(b->data),off,BSIZE)<0)panic("read image error");
    80201108:	20000713          	li	a4,512
    8020110c:	86ce                	mv	a3,s3
    8020110e:	05890613          	addi	a2,s2,88
    80201112:	4581                	li	a1,0
    80201114:	8526                	mv	a0,s1
    80201116:	00002097          	auipc	ra,0x2
    8020111a:	e02080e7          	jalr	-510(ra) # 80202f18 <eread>
    8020111e:	00054e63          	bltz	a0,8020113a <image_read+0x56>
  eunlock(img);
    80201122:	8526                	mv	a0,s1
    80201124:	00003097          	auipc	ra,0x3
    80201128:	80a080e7          	jalr	-2038(ra) # 8020392e <eunlock>
  return;
}
    8020112c:	70a2                	ld	ra,40(sp)
    8020112e:	7402                	ld	s0,32(sp)
    80201130:	64e2                	ld	s1,24(sp)
    80201132:	6942                	ld	s2,16(sp)
    80201134:	69a2                	ld	s3,8(sp)
    80201136:	6145                	addi	sp,sp,48
    80201138:	8082                	ret
  if(eread(img,0,(uint64)(b->data),off,BSIZE)<0)panic("read image error");
    8020113a:	00010517          	auipc	a0,0x10
    8020113e:	f7e50513          	addi	a0,a0,-130 # 802110b8 <rodata_start+0xb8>
    80201142:	00006097          	auipc	ra,0x6
    80201146:	d8c080e7          	jalr	-628(ra) # 80206ece <panic>

000000008020114a <image_write>:

void image_write(struct buf *b,struct dirent* img)
{
    8020114a:	7179                	addi	sp,sp,-48
    8020114c:	f406                	sd	ra,40(sp)
    8020114e:	f022                	sd	s0,32(sp)
    80201150:	ec26                	sd	s1,24(sp)
    80201152:	e84a                	sd	s2,16(sp)
    80201154:	e44e                	sd	s3,8(sp)
    80201156:	1800                	addi	s0,sp,48
    80201158:	892a                	mv	s2,a0
    8020115a:	84ae                	mv	s1,a1
  uint sectorno = b->sectorno;
  int off = sectorno*BSIZE;
    8020115c:	00c52983          	lw	s3,12(a0)
    80201160:	0099999b          	slliw	s3,s3,0x9
  elock(img);
    80201164:	852e                	mv	a0,a1
    80201166:	00002097          	auipc	ra,0x2
    8020116a:	792080e7          	jalr	1938(ra) # 802038f8 <elock>
  if(ewrite(img,0,(uint64)(b->data),off,BSIZE)<0)panic("write image error");
    8020116e:	20000713          	li	a4,512
    80201172:	86ce                	mv	a3,s3
    80201174:	05890613          	addi	a2,s2,88
    80201178:	4581                	li	a1,0
    8020117a:	8526                	mv	a0,s1
    8020117c:	00002097          	auipc	ra,0x2
    80201180:	eb2080e7          	jalr	-334(ra) # 8020302e <ewrite>
    80201184:	00054e63          	bltz	a0,802011a0 <image_write+0x56>
  eunlock(img);
    80201188:	8526                	mv	a0,s1
    8020118a:	00002097          	auipc	ra,0x2
    8020118e:	7a4080e7          	jalr	1956(ra) # 8020392e <eunlock>
  return;
}
    80201192:	70a2                	ld	ra,40(sp)
    80201194:	7402                	ld	s0,32(sp)
    80201196:	64e2                	ld	s1,24(sp)
    80201198:	6942                	ld	s2,16(sp)
    8020119a:	69a2                	ld	s3,8(sp)
    8020119c:	6145                	addi	sp,sp,48
    8020119e:	8082                	ret
  if(ewrite(img,0,(uint64)(b->data),off,BSIZE)<0)panic("write image error");
    802011a0:	00010517          	auipc	a0,0x10
    802011a4:	f3050513          	addi	a0,a0,-208 # 802110d0 <rodata_start+0xd0>
    802011a8:	00006097          	auipc	ra,0x6
    802011ac:	d26080e7          	jalr	-730(ra) # 80206ece <panic>

00000000802011b0 <zombiecond>:
  sched();
  release(&p->lock);
}


int zombiecond(struct proc* p,int pid){
    802011b0:	1141                	addi	sp,sp,-16
    802011b2:	e422                	sd	s0,8(sp)
    802011b4:	0800                	addi	s0,sp,16
  return (pid==-1||p->pid == pid);
    802011b6:	57fd                	li	a5,-1
    802011b8:	00f58a63          	beq	a1,a5,802011cc <zombiecond+0x1c>
    802011bc:	4128                	lw	a0,64(a0)
    802011be:	40b505b3          	sub	a1,a0,a1
    802011c2:	0015b513          	seqz	a0,a1
}
    802011c6:	6422                	ld	s0,8(sp)
    802011c8:	0141                	addi	sp,sp,16
    802011ca:	8082                	ret
  return (pid==-1||p->pid == pid);
    802011cc:	4505                	li	a0,1
    802011ce:	bfe5                	j	802011c6 <zombiecond+0x16>

00000000802011d0 <forkret>:
{
    802011d0:	1141                	addi	sp,sp,-16
    802011d2:	e406                	sd	ra,8(sp)
    802011d4:	e022                	sd	s0,0(sp)
    802011d6:	0800                	addi	s0,sp,16
  release(&myproc()->lock);
    802011d8:	00009097          	auipc	ra,0x9
    802011dc:	952080e7          	jalr	-1710(ra) # 80209b2a <myproc>
    802011e0:	0521                	addi	a0,a0,8
    802011e2:	00006097          	auipc	ra,0x6
    802011e6:	9e0080e7          	jalr	-1568(ra) # 80206bc2 <release>
  usertrapret();
    802011ea:	00008097          	auipc	ra,0x8
    802011ee:	9f0080e7          	jalr	-1552(ra) # 80208bda <usertrapret>
}
    802011f2:	60a2                	ld	ra,8(sp)
    802011f4:	6402                	ld	s0,0(sp)
    802011f6:	0141                	addi	sp,sp,16
    802011f8:	8082                	ret

00000000802011fa <freeproc>:
{
    802011fa:	1101                	addi	sp,sp,-32
    802011fc:	ec06                	sd	ra,24(sp)
    802011fe:	e822                	sd	s0,16(sp)
    80201200:	e426                	sd	s1,8(sp)
    80201202:	1000                	addi	s0,sp,32
    80201204:	84aa                	mv	s1,a0
  p->trapframe = 0;
    80201206:	06053423          	sd	zero,104(a0)
  if(p->mf)
    8020120a:	18053783          	ld	a5,384(a0)
    8020120e:	c789                	beqz	a5,80201218 <freeproc+0x1e>
    free_map_fix(p);
    80201210:	0000a097          	auipc	ra,0xa
    80201214:	a1a080e7          	jalr	-1510(ra) # 8020ac2a <free_map_fix>
  if(p->ofile)
    80201218:	74e8                	ld	a0,232(s1)
    8020121a:	cd01                	beqz	a0,80201232 <freeproc+0x38>
    kfree((void*)p->ofile);
    8020121c:	00007097          	auipc	ra,0x7
    80201220:	bf2080e7          	jalr	-1038(ra) # 80207e0e <kfree>
  if(p->ofile)
    80201224:	74fc                	ld	a5,232(s1)
    80201226:	c791                	beqz	a5,80201232 <freeproc+0x38>
    kfree((void*)p->exec_close);
    80201228:	78e8                	ld	a0,240(s1)
    8020122a:	00007097          	auipc	ra,0x7
    8020122e:	be4080e7          	jalr	-1052(ra) # 80207e0e <kfree>
  p->ofile = 0;
    80201232:	0e04b423          	sd	zero,232(s1)
  if(p->kstack)
    80201236:	68a8                	ld	a0,80(s1)
    80201238:	e13d                	bnez	a0,8020129e <freeproc+0xa4>
  if(p->pagetable)
    8020123a:	70bc                	ld	a5,96(s1)
    8020123c:	c791                	beqz	a5,80201248 <freeproc+0x4e>
  uvmfree(p);
    8020123e:	8526                	mv	a0,s1
    80201240:	00007097          	auipc	ra,0x7
    80201244:	34e080e7          	jalr	846(ra) # 8020858e <uvmfree>
  p->pagetable = 0;
    80201248:	0604b023          	sd	zero,96(s1)
  p->vma = NULL;
    8020124c:	1604b823          	sd	zero,368(s1)
  p->robust_list = NULL;
    80201250:	1a04bc23          	sd	zero,440(s1)
  p->sz = 0;
    80201254:	0404bc23          	sd	zero,88(s1)
  p->pid = 0;
    80201258:	0404a023          	sw	zero,64(s1)

static inline void list_del(struct list *node) {
	if(node==NULL){
	  panic("[list next]list is null");
	}
	__list_link(node->prev, node->next);
    8020125c:	1604b703          	ld	a4,352(s1)
    80201260:	1684b783          	ld	a5,360(s1)
	prev->next = next;
    80201264:	e71c                	sd	a5,8(a4)
	next->prev = prev;
    80201266:	e398                	sd	a4,0(a5)
  p->name[0] = 0;
    80201268:	10048023          	sb	zero,256(s1)
  p->chan = 0;
    8020126c:	0204b823          	sd	zero,48(s1)
  p->killed = 0;
    80201270:	0204ac23          	sw	zero,56(s1)
  p->xstate = 0;
    80201274:	0204ae23          	sw	zero,60(s1)
  p->state = UNUSED;
    80201278:	0204a023          	sw	zero,32(s1)
  sigaction_free(p->sig_act);
    8020127c:	1884b503          	ld	a0,392(s1)
    80201280:	00005097          	auipc	ra,0x5
    80201284:	7ae080e7          	jalr	1966(ra) # 80206a2e <sigaction_free>
  sigframefree(p->sig_frame);
    80201288:	1a04b503          	ld	a0,416(s1)
    8020128c:	00005097          	auipc	ra,0x5
    80201290:	6ee080e7          	jalr	1774(ra) # 8020697a <sigframefree>
}
    80201294:	60e2                	ld	ra,24(sp)
    80201296:	6442                	ld	s0,16(sp)
    80201298:	64a2                	ld	s1,8(sp)
    8020129a:	6105                	addi	sp,sp,32
    8020129c:	8082                	ret
    freepage((void *)p->kstack);
    8020129e:	00006097          	auipc	ra,0x6
    802012a2:	73e080e7          	jalr	1854(ra) # 802079dc <_freepage>
    802012a6:	bf51                	j	8020123a <freeproc+0x40>

00000000802012a8 <waitq_pool_init>:
waitq_pool_init(){
    802012a8:	1141                	addi	sp,sp,-16
    802012aa:	e406                	sd	ra,8(sp)
    802012ac:	e022                	sd	s0,0(sp)
    802012ae:	0800                	addi	s0,sp,16
  for(int i = 0;i<WAITQ_NUM;i++){
    802012b0:	00547797          	auipc	a5,0x547
    802012b4:	ef878793          	addi	a5,a5,-264 # 807481a8 <waitq_valid>
    802012b8:	00547717          	auipc	a4,0x547
    802012bc:	08070713          	addi	a4,a4,128 # 80748338 <waitq_pool_lk>
    waitq_valid[i] = 0;
    802012c0:	0007a023          	sw	zero,0(a5)
  for(int i = 0;i<WAITQ_NUM;i++){
    802012c4:	0791                	addi	a5,a5,4
    802012c6:	fee79de3          	bne	a5,a4,802012c0 <waitq_pool_init+0x18>
  initlock(&waitq_pool_lk,"waitq pool");
    802012ca:	00010597          	auipc	a1,0x10
    802012ce:	e1e58593          	addi	a1,a1,-482 # 802110e8 <rodata_start+0xe8>
    802012d2:	00547517          	auipc	a0,0x547
    802012d6:	06650513          	addi	a0,a0,102 # 80748338 <waitq_pool_lk>
    802012da:	00006097          	auipc	ra,0x6
    802012de:	850080e7          	jalr	-1968(ra) # 80206b2a <initlock>
}
    802012e2:	60a2                	ld	ra,8(sp)
    802012e4:	6402                	ld	s0,0(sp)
    802012e6:	0141                	addi	sp,sp,16
    802012e8:	8082                	ret

00000000802012ea <procinit>:
procinit(){
    802012ea:	7179                	addi	sp,sp,-48
    802012ec:	f406                	sd	ra,40(sp)
    802012ee:	f022                	sd	s0,32(sp)
    802012f0:	ec26                	sd	s1,24(sp)
    802012f2:	e84a                	sd	s2,16(sp)
    802012f4:	e44e                	sd	s3,8(sp)
    802012f6:	e052                	sd	s4,0(sp)
    802012f8:	1800                	addi	s0,sp,48
  initlock(&pid_lock,"pid lock");
    802012fa:	00547497          	auipc	s1,0x547
    802012fe:	eae48493          	addi	s1,s1,-338 # 807481a8 <waitq_valid>
    80201302:	00010597          	auipc	a1,0x10
    80201306:	df658593          	addi	a1,a1,-522 # 802110f8 <rodata_start+0xf8>
    8020130a:	00547517          	auipc	a0,0x547
    8020130e:	04650513          	addi	a0,a0,70 # 80748350 <pid_lock>
    80201312:	00006097          	auipc	ra,0x6
    80201316:	818080e7          	jalr	-2024(ra) # 80206b2a <initlock>
  initproc = NULL;
    8020131a:	00554797          	auipc	a5,0x554
    8020131e:	8807b723          	sd	zero,-1906(a5) # 80754ba8 <initproc>
  struct spinlock lk;
  struct list head;
}queue;

static inline void queue_init(queue *q,void* chan) {
	initlock(&q->lk,"queue");
    80201322:	00010597          	auipc	a1,0x10
    80201326:	18e58593          	addi	a1,a1,398 # 802114b0 <rodata_start+0x4b0>
    8020132a:	00547517          	auipc	a0,0x547
    8020132e:	04650513          	addi	a0,a0,70 # 80748370 <readyq+0x8>
    80201332:	00005097          	auipc	ra,0x5
    80201336:	7f8080e7          	jalr	2040(ra) # 80206b2a <initlock>
	node->prev = node->next = node;
    8020133a:	00547797          	auipc	a5,0x547
    8020133e:	04e78793          	addi	a5,a5,78 # 80748388 <readyq+0x20>
    80201342:	1ef4b423          	sd	a5,488(s1)
    80201346:	1ef4b023          	sd	a5,480(s1)
	list_init(&q->head);
	q->chan = chan;
    8020134a:	1c04b023          	sd	zero,448(s1)
  waitq_pool_init();
    8020134e:	00000097          	auipc	ra,0x0
    80201352:	f5a080e7          	jalr	-166(ra) # 802012a8 <waitq_pool_init>
  firstuserinit = 1;
    80201356:	4785                	li	a5,1
    80201358:	00554717          	auipc	a4,0x554
    8020135c:	84f72023          	sw	a5,-1984(a4) # 80754b98 <firstuserinit>
  for(struct proc* p = proc;p<proc+NPROC;p++){
    80201360:	00548497          	auipc	s1,0x548
    80201364:	30048493          	addi	s1,s1,768 # 80749660 <proc+0x8>
    80201368:	00554a17          	auipc	s4,0x554
    8020136c:	838a0a13          	addi	s4,s4,-1992 # 80754ba0 <runproc>
      initlock(&p->lock, "proc");
    80201370:	00010997          	auipc	s3,0x10
    80201374:	d9898993          	addi	s3,s3,-616 # 80211108 <rodata_start+0x108>
      p->filelimit = NOFILE;
    80201378:	06500913          	li	s2,101
      initlock(&p->lock, "proc");
    8020137c:	85ce                	mv	a1,s3
    8020137e:	8526                	mv	a0,s1
    80201380:	00005097          	auipc	ra,0x5
    80201384:	7aa080e7          	jalr	1962(ra) # 80206b2a <initlock>
      p->state = UNUSED;
    80201388:	0004ac23          	sw	zero,24(s1)
      p->parent = NULL;
    8020138c:	0204b023          	sd	zero,32(s1)
      p->killed = 0;
    80201390:	0204a823          	sw	zero,48(s1)
      p->filelimit = NOFILE;
    80201394:	0d24bc23          	sd	s2,216(s1)
      p->umask = 0;
    80201398:	1a04ac23          	sw	zero,440(s1)
  for(struct proc* p = proc;p<proc+NPROC;p++){
    8020139c:	1d048493          	addi	s1,s1,464
    802013a0:	fd449ee3          	bne	s1,s4,8020137c <procinit+0x92>
  __debug_info("procinit\n");
    802013a4:	00010517          	auipc	a0,0x10
    802013a8:	d6c50513          	addi	a0,a0,-660 # 80211110 <rodata_start+0x110>
    802013ac:	00006097          	auipc	ra,0x6
    802013b0:	d32080e7          	jalr	-718(ra) # 802070de <__debug_info>
}
    802013b4:	70a2                	ld	ra,40(sp)
    802013b6:	7402                	ld	s0,32(sp)
    802013b8:	64e2                	ld	s1,24(sp)
    802013ba:	6942                	ld	s2,16(sp)
    802013bc:	69a2                	ld	s3,8(sp)
    802013be:	6a02                	ld	s4,0(sp)
    802013c0:	6145                	addi	sp,sp,48
    802013c2:	8082                	ret

00000000802013c4 <findwaitq>:
findwaitq(void* chan){
    802013c4:	1101                	addi	sp,sp,-32
    802013c6:	ec06                	sd	ra,24(sp)
    802013c8:	e822                	sd	s0,16(sp)
    802013ca:	e426                	sd	s1,8(sp)
    802013cc:	e04a                	sd	s2,0(sp)
    802013ce:	1000                	addi	s0,sp,32
    802013d0:	892a                	mv	s2,a0
  acquire(&waitq_pool_lk);
    802013d2:	00547517          	auipc	a0,0x547
    802013d6:	f6650513          	addi	a0,a0,-154 # 80748338 <waitq_pool_lk>
    802013da:	00005097          	auipc	ra,0x5
    802013de:	794080e7          	jalr	1940(ra) # 80206b6e <acquire>
  for(int i=0;i<WAITQ_NUM ;i++){
    802013e2:	00547797          	auipc	a5,0x547
    802013e6:	dc678793          	addi	a5,a5,-570 # 807481a8 <waitq_valid>
    802013ea:	00547717          	auipc	a4,0x547
    802013ee:	fae70713          	addi	a4,a4,-82 # 80748398 <waitq_pool>
    802013f2:	4481                	li	s1,0
    802013f4:	06400613          	li	a2,100
    802013f8:	a039                	j	80201406 <findwaitq+0x42>
    802013fa:	2485                	addiw	s1,s1,1
    802013fc:	0791                	addi	a5,a5,4
    802013fe:	03070713          	addi	a4,a4,48
    80201402:	02c48e63          	beq	s1,a2,8020143e <findwaitq+0x7a>
    if(waitq_valid[i]&&waitq_pool[i].chan == chan){
    80201406:	4394                	lw	a3,0(a5)
    80201408:	daed                	beqz	a3,802013fa <findwaitq+0x36>
    8020140a:	6314                	ld	a3,0(a4)
    8020140c:	ff2697e3          	bne	a3,s2,802013fa <findwaitq+0x36>
      release(&waitq_pool_lk);
    80201410:	00547517          	auipc	a0,0x547
    80201414:	f2850513          	addi	a0,a0,-216 # 80748338 <waitq_pool_lk>
    80201418:	00005097          	auipc	ra,0x5
    8020141c:	7aa080e7          	jalr	1962(ra) # 80206bc2 <release>
      return waitq_pool+i;
    80201420:	00149513          	slli	a0,s1,0x1
    80201424:	9526                	add	a0,a0,s1
    80201426:	0512                	slli	a0,a0,0x4
    80201428:	00547797          	auipc	a5,0x547
    8020142c:	f7078793          	addi	a5,a5,-144 # 80748398 <waitq_pool>
    80201430:	953e                	add	a0,a0,a5
}
    80201432:	60e2                	ld	ra,24(sp)
    80201434:	6442                	ld	s0,16(sp)
    80201436:	64a2                	ld	s1,8(sp)
    80201438:	6902                	ld	s2,0(sp)
    8020143a:	6105                	addi	sp,sp,32
    8020143c:	8082                	ret
  release(&waitq_pool_lk);
    8020143e:	00547517          	auipc	a0,0x547
    80201442:	efa50513          	addi	a0,a0,-262 # 80748338 <waitq_pool_lk>
    80201446:	00005097          	auipc	ra,0x5
    8020144a:	77c080e7          	jalr	1916(ra) # 80206bc2 <release>
  return NULL;
    8020144e:	4501                	li	a0,0
    80201450:	b7cd                	j	80201432 <findwaitq+0x6e>

0000000080201452 <allocwaitq>:
allocwaitq(void* chan){
    80201452:	1101                	addi	sp,sp,-32
    80201454:	ec06                	sd	ra,24(sp)
    80201456:	e822                	sd	s0,16(sp)
    80201458:	e426                	sd	s1,8(sp)
    8020145a:	e04a                	sd	s2,0(sp)
    8020145c:	1000                	addi	s0,sp,32
    8020145e:	892a                	mv	s2,a0
  acquire(&waitq_pool_lk);
    80201460:	00547517          	auipc	a0,0x547
    80201464:	ed850513          	addi	a0,a0,-296 # 80748338 <waitq_pool_lk>
    80201468:	00005097          	auipc	ra,0x5
    8020146c:	706080e7          	jalr	1798(ra) # 80206b6e <acquire>
  for(int i=0;i<WAITQ_NUM ;i++){
    80201470:	00547717          	auipc	a4,0x547
    80201474:	d3870713          	addi	a4,a4,-712 # 807481a8 <waitq_valid>
    80201478:	4781                	li	a5,0
    8020147a:	06400613          	li	a2,100
    if(!waitq_valid[i]){
    8020147e:	4314                	lw	a3,0(a4)
    80201480:	ce99                	beqz	a3,8020149e <allocwaitq+0x4c>
  for(int i=0;i<WAITQ_NUM ;i++){
    80201482:	2785                	addiw	a5,a5,1
    80201484:	0711                	addi	a4,a4,4
    80201486:	fec79ce3          	bne	a5,a2,8020147e <allocwaitq+0x2c>
  release(&waitq_pool_lk);
    8020148a:	00547517          	auipc	a0,0x547
    8020148e:	eae50513          	addi	a0,a0,-338 # 80748338 <waitq_pool_lk>
    80201492:	00005097          	auipc	ra,0x5
    80201496:	730080e7          	jalr	1840(ra) # 80206bc2 <release>
  return NULL;
    8020149a:	4481                	li	s1,0
    8020149c:	a899                	j	802014f2 <allocwaitq+0xa0>
      waitq_valid[i] = 1;
    8020149e:	00279693          	slli	a3,a5,0x2
    802014a2:	00547717          	auipc	a4,0x547
    802014a6:	d0670713          	addi	a4,a4,-762 # 807481a8 <waitq_valid>
    802014aa:	9736                	add	a4,a4,a3
    802014ac:	4685                	li	a3,1
    802014ae:	c314                	sw	a3,0(a4)
      queue_init(waitq_pool+i,chan);
    802014b0:	00179493          	slli	s1,a5,0x1
    802014b4:	94be                	add	s1,s1,a5
    802014b6:	0492                	slli	s1,s1,0x4
    802014b8:	00547797          	auipc	a5,0x547
    802014bc:	ee078793          	addi	a5,a5,-288 # 80748398 <waitq_pool>
    802014c0:	94be                	add	s1,s1,a5
	initlock(&q->lk,"queue");
    802014c2:	00010597          	auipc	a1,0x10
    802014c6:	fee58593          	addi	a1,a1,-18 # 802114b0 <rodata_start+0x4b0>
    802014ca:	00848513          	addi	a0,s1,8
    802014ce:	00005097          	auipc	ra,0x5
    802014d2:	65c080e7          	jalr	1628(ra) # 80206b2a <initlock>
	list_init(&q->head);
    802014d6:	02048793          	addi	a5,s1,32
    802014da:	f49c                	sd	a5,40(s1)
    802014dc:	f09c                	sd	a5,32(s1)
	q->chan = chan;
    802014de:	0124b023          	sd	s2,0(s1)
      release(&waitq_pool_lk);
    802014e2:	00547517          	auipc	a0,0x547
    802014e6:	e5650513          	addi	a0,a0,-426 # 80748338 <waitq_pool_lk>
    802014ea:	00005097          	auipc	ra,0x5
    802014ee:	6d8080e7          	jalr	1752(ra) # 80206bc2 <release>
}
    802014f2:	8526                	mv	a0,s1
    802014f4:	60e2                	ld	ra,24(sp)
    802014f6:	6442                	ld	s0,16(sp)
    802014f8:	64a2                	ld	s1,8(sp)
    802014fa:	6902                	ld	s2,0(sp)
    802014fc:	6105                	addi	sp,sp,32
    802014fe:	8082                	ret

0000000080201500 <delwaitq>:
delwaitq(queue* q){
    80201500:	1101                	addi	sp,sp,-32
    80201502:	ec06                	sd	ra,24(sp)
    80201504:	e822                	sd	s0,16(sp)
    80201506:	e426                	sd	s1,8(sp)
    80201508:	e04a                	sd	s2,0(sp)
    8020150a:	1000                	addi	s0,sp,32
    8020150c:	84aa                	mv	s1,a0
  acquire(&waitq_pool_lk);
    8020150e:	00547917          	auipc	s2,0x547
    80201512:	e2a90913          	addi	s2,s2,-470 # 80748338 <waitq_pool_lk>
    80201516:	854a                	mv	a0,s2
    80201518:	00005097          	auipc	ra,0x5
    8020151c:	656080e7          	jalr	1622(ra) # 80206b6e <acquire>
  int i = q - waitq_pool;
    80201520:	00547517          	auipc	a0,0x547
    80201524:	e7850513          	addi	a0,a0,-392 # 80748398 <waitq_pool>
    80201528:	8c89                	sub	s1,s1,a0
    8020152a:	8491                	srai	s1,s1,0x4
  waitq_valid[i] = 0;
    8020152c:	00013797          	auipc	a5,0x13
    80201530:	cc47b783          	ld	a5,-828(a5) # 802141f0 <erodata>
    80201534:	02f484bb          	mulw	s1,s1,a5
    80201538:	048a                	slli	s1,s1,0x2
    8020153a:	00547797          	auipc	a5,0x547
    8020153e:	c6e78793          	addi	a5,a5,-914 # 807481a8 <waitq_valid>
    80201542:	94be                	add	s1,s1,a5
    80201544:	0004a023          	sw	zero,0(s1)
  release(&waitq_pool_lk);
    80201548:	854a                	mv	a0,s2
    8020154a:	00005097          	auipc	ra,0x5
    8020154e:	678080e7          	jalr	1656(ra) # 80206bc2 <release>
}
    80201552:	60e2                	ld	ra,24(sp)
    80201554:	6442                	ld	s0,16(sp)
    80201556:	64a2                	ld	s1,8(sp)
    80201558:	6902                	ld	s2,0(sp)
    8020155a:	6105                	addi	sp,sp,32
    8020155c:	8082                	ret

000000008020155e <readyq_push>:
readyq_push(struct proc* p){
    8020155e:	7179                	addi	sp,sp,-48
    80201560:	f406                	sd	ra,40(sp)
    80201562:	f022                	sd	s0,32(sp)
    80201564:	ec26                	sd	s1,24(sp)
    80201566:	e84a                	sd	s2,16(sp)
    80201568:	e44e                	sd	s3,8(sp)
    8020156a:	1800                	addi	s0,sp,48
    8020156c:	84aa                	mv	s1,a0
}

static inline void qlock(queue *q){
	acquire(&q->lk);
    8020156e:	00547997          	auipc	s3,0x547
    80201572:	c3a98993          	addi	s3,s3,-966 # 807481a8 <waitq_valid>
    80201576:	00547917          	auipc	s2,0x547
    8020157a:	dfa90913          	addi	s2,s2,-518 # 80748370 <readyq+0x8>
    8020157e:	854a                	mv	a0,s2
    80201580:	00005097          	auipc	ra,0x5
    80201584:	5ee080e7          	jalr	1518(ra) # 80206b6e <acquire>
	return list_empty(&q->head);
}

static inline void queue_push(queue* q,struct proc* p){
	qlock(q);
	list_add_before(&q->head,&p->dlist);
    80201588:	14048713          	addi	a4,s1,320
	__list_insert(node, beforeme->prev, beforeme);
    8020158c:	1e09b783          	ld	a5,480(s3)
	prev->next = next->prev = node;
    80201590:	1ee9b023          	sd	a4,480(s3)
    80201594:	e798                	sd	a4,8(a5)
	node->next = next;
    80201596:	00547717          	auipc	a4,0x547
    8020159a:	df270713          	addi	a4,a4,-526 # 80748388 <readyq+0x20>
    8020159e:	14e4b423          	sd	a4,328(s1)
	node->prev = prev;
    802015a2:	14f4b023          	sd	a5,320(s1)
	p->q = (uint64)q;
    802015a6:	00547797          	auipc	a5,0x547
    802015aa:	dc278793          	addi	a5,a5,-574 # 80748368 <readyq>
    802015ae:	16f4bc23          	sd	a5,376(s1)
	release(&q->lk);
    802015b2:	854a                	mv	a0,s2
    802015b4:	00005097          	auipc	ra,0x5
    802015b8:	60e080e7          	jalr	1550(ra) # 80206bc2 <release>
}
    802015bc:	70a2                	ld	ra,40(sp)
    802015be:	7402                	ld	s0,32(sp)
    802015c0:	64e2                	ld	s1,24(sp)
    802015c2:	6942                	ld	s2,16(sp)
    802015c4:	69a2                	ld	s3,8(sp)
    802015c6:	6145                	addi	sp,sp,48
    802015c8:	8082                	ret

00000000802015ca <readyq_pop>:
readyq_pop(){
    802015ca:	1101                	addi	sp,sp,-32
    802015cc:	ec06                	sd	ra,24(sp)
    802015ce:	e822                	sd	s0,16(sp)
    802015d0:	e426                	sd	s1,8(sp)
    802015d2:	1000                	addi	s0,sp,32
	acquire(&q->lk);
    802015d4:	00547517          	auipc	a0,0x547
    802015d8:	d9c50513          	addi	a0,a0,-612 # 80748370 <readyq+0x8>
    802015dc:	00005097          	auipc	ra,0x5
    802015e0:	592080e7          	jalr	1426(ra) # 80206b6e <acquire>
	return head->next == head;
    802015e4:	00547797          	auipc	a5,0x547
    802015e8:	dac7b783          	ld	a5,-596(a5) # 80748390 <readyq+0x28>
}

static inline struct proc* queue_pop(queue* q){
	struct proc* p = NULL;
	qlock(q);
	if(!queue_empty(q)){
    802015ec:	00547717          	auipc	a4,0x547
    802015f0:	d9c70713          	addi	a4,a4,-612 # 80748388 <readyq+0x20>
    802015f4:	04e78563          	beq	a5,a4,8020163e <readyq_pop+0x74>
	if(node==NULL){
    802015f8:	cb9d                	beqz	a5,8020162e <readyq_pop+0x64>
	__list_link(node->prev, node->next);
    802015fa:	6394                	ld	a3,0(a5)
    802015fc:	6798                	ld	a4,8(a5)
	prev->next = next;
    802015fe:	e698                	sd	a4,8(a3)
	next->prev = prev;
    80201600:	e314                	sd	a3,0(a4)
		struct list* l = list_next(&q->head);
		list_del(l);
		p = dlist_entry(l, struct proc, dlist);
    80201602:	ec078493          	addi	s1,a5,-320
		p->q = 0;
    80201606:	0207bc23          	sd	zero,56(a5)
		p->dlist.prev = NULL;
    8020160a:	0007b023          	sd	zero,0(a5)
		p->dlist.next = NULL;
    8020160e:	0007b423          	sd	zero,8(a5)
	release(&q->lk);
    80201612:	00547517          	auipc	a0,0x547
    80201616:	d5e50513          	addi	a0,a0,-674 # 80748370 <readyq+0x8>
    8020161a:	00005097          	auipc	ra,0x5
    8020161e:	5a8080e7          	jalr	1448(ra) # 80206bc2 <release>
}
    80201622:	8526                	mv	a0,s1
    80201624:	60e2                	ld	ra,24(sp)
    80201626:	6442                	ld	s0,16(sp)
    80201628:	64a2                	ld	s1,8(sp)
    8020162a:	6105                	addi	sp,sp,32
    8020162c:	8082                	ret
	  panic("[list next]list is null");
    8020162e:	00010517          	auipc	a0,0x10
    80201632:	af250513          	addi	a0,a0,-1294 # 80211120 <rodata_start+0x120>
    80201636:	00006097          	auipc	ra,0x6
    8020163a:	898080e7          	jalr	-1896(ra) # 80206ece <panic>
	struct proc* p = NULL;
    8020163e:	4481                	li	s1,0
    80201640:	bfc9                	j	80201612 <readyq_pop+0x48>

0000000080201642 <waitq_push>:
waitq_push(queue *q,struct proc* p){
    80201642:	7179                	addi	sp,sp,-48
    80201644:	f406                	sd	ra,40(sp)
    80201646:	f022                	sd	s0,32(sp)
    80201648:	ec26                	sd	s1,24(sp)
    8020164a:	e84a                	sd	s2,16(sp)
    8020164c:	e44e                	sd	s3,8(sp)
    8020164e:	1800                	addi	s0,sp,48
    80201650:	84aa                	mv	s1,a0
    80201652:	892e                	mv	s2,a1
	acquire(&q->lk);
    80201654:	00850993          	addi	s3,a0,8
    80201658:	854e                	mv	a0,s3
    8020165a:	00005097          	auipc	ra,0x5
    8020165e:	514080e7          	jalr	1300(ra) # 80206b6e <acquire>
	list_add_before(&q->head,&p->dlist);
    80201662:	14090713          	addi	a4,s2,320
	__list_insert(node, beforeme->prev, beforeme);
    80201666:	709c                	ld	a5,32(s1)
	prev->next = next->prev = node;
    80201668:	f098                	sd	a4,32(s1)
    8020166a:	e798                	sd	a4,8(a5)
    8020166c:	02048713          	addi	a4,s1,32
	node->next = next;
    80201670:	14e93423          	sd	a4,328(s2)
	node->prev = prev;
    80201674:	14f93023          	sd	a5,320(s2)
	p->q = (uint64)q;
    80201678:	16993c23          	sd	s1,376(s2)
	release(&q->lk);
    8020167c:	854e                	mv	a0,s3
    8020167e:	00005097          	auipc	ra,0x5
    80201682:	544080e7          	jalr	1348(ra) # 80206bc2 <release>
}
    80201686:	70a2                	ld	ra,40(sp)
    80201688:	7402                	ld	s0,32(sp)
    8020168a:	64e2                	ld	s1,24(sp)
    8020168c:	6942                	ld	s2,16(sp)
    8020168e:	69a2                	ld	s3,8(sp)
    80201690:	6145                	addi	sp,sp,48
    80201692:	8082                	ret

0000000080201694 <waitq_pop>:
waitq_pop(queue *q){
    80201694:	1101                	addi	sp,sp,-32
    80201696:	ec06                	sd	ra,24(sp)
    80201698:	e822                	sd	s0,16(sp)
    8020169a:	e426                	sd	s1,8(sp)
    8020169c:	e04a                	sd	s2,0(sp)
    8020169e:	1000                	addi	s0,sp,32
    802016a0:	84aa                	mv	s1,a0
	acquire(&q->lk);
    802016a2:	00850913          	addi	s2,a0,8
    802016a6:	854a                	mv	a0,s2
    802016a8:	00005097          	auipc	ra,0x5
    802016ac:	4c6080e7          	jalr	1222(ra) # 80206b6e <acquire>
	return head->next == head;
    802016b0:	749c                	ld	a5,40(s1)
	return list_empty(&q->head);
    802016b2:	02048493          	addi	s1,s1,32
	if(!queue_empty(q)){
    802016b6:	04978363          	beq	a5,s1,802016fc <waitq_pop+0x68>
	if(node==NULL){
    802016ba:	cb8d                	beqz	a5,802016ec <waitq_pop+0x58>
	__list_link(node->prev, node->next);
    802016bc:	6394                	ld	a3,0(a5)
    802016be:	6798                	ld	a4,8(a5)
	prev->next = next;
    802016c0:	e698                	sd	a4,8(a3)
	next->prev = prev;
    802016c2:	e314                	sd	a3,0(a4)
		p = dlist_entry(l, struct proc, dlist);
    802016c4:	ec078493          	addi	s1,a5,-320
		p->q = 0;
    802016c8:	0207bc23          	sd	zero,56(a5)
		p->dlist.prev = NULL;
    802016cc:	0007b023          	sd	zero,0(a5)
		p->dlist.next = NULL;
    802016d0:	0007b423          	sd	zero,8(a5)
	release(&q->lk);
    802016d4:	854a                	mv	a0,s2
    802016d6:	00005097          	auipc	ra,0x5
    802016da:	4ec080e7          	jalr	1260(ra) # 80206bc2 <release>
}
    802016de:	8526                	mv	a0,s1
    802016e0:	60e2                	ld	ra,24(sp)
    802016e2:	6442                	ld	s0,16(sp)
    802016e4:	64a2                	ld	s1,8(sp)
    802016e6:	6902                	ld	s2,0(sp)
    802016e8:	6105                	addi	sp,sp,32
    802016ea:	8082                	ret
	  panic("[list next]list is null");
    802016ec:	00010517          	auipc	a0,0x10
    802016f0:	a3450513          	addi	a0,a0,-1484 # 80211120 <rodata_start+0x120>
    802016f4:	00005097          	auipc	ra,0x5
    802016f8:	7da080e7          	jalr	2010(ra) # 80206ece <panic>
	struct proc* p = NULL;
    802016fc:	4481                	li	s1,0
    802016fe:	bfd9                	j	802016d4 <waitq_pop+0x40>

0000000080201700 <scheduler>:
void scheduler(){
    80201700:	715d                	addi	sp,sp,-80
    80201702:	e486                	sd	ra,72(sp)
    80201704:	e0a2                	sd	s0,64(sp)
    80201706:	fc26                	sd	s1,56(sp)
    80201708:	f84a                	sd	s2,48(sp)
    8020170a:	f44e                	sd	s3,40(sp)
    8020170c:	f052                	sd	s4,32(sp)
    8020170e:	ec56                	sd	s5,24(sp)
    80201710:	e85a                	sd	s6,16(sp)
    80201712:	e45e                	sd	s7,8(sp)
    80201714:	e062                	sd	s8,0(sp)
    80201716:	0880                	addi	s0,sp,80
  struct cpu *c = mycpu();
    80201718:	00008097          	auipc	ra,0x8
    8020171c:	3f6080e7          	jalr	1014(ra) # 80209b0e <mycpu>
    80201720:	8a2a                	mv	s4,a0
  c->proc = 0;
    80201722:	00053023          	sd	zero,0(a0)
      if(p->state == RUNNABLE) {
    80201726:	4989                	li	s3,2
        p->state = RUNNING;
    80201728:	4c0d                	li	s8,3
        w_satp(MAKE_SATP(p->pagetable));
    8020172a:	5afd                	li	s5,-1
    8020172c:	1afe                	slli	s5,s5,0x3f
        swtch(&c->context, &p->context);
    8020172e:	00850b93          	addi	s7,a0,8
        w_satp(MAKE_SATP(kernel_pagetable));
    80201732:	0056db17          	auipc	s6,0x56d
    80201736:	b86b0b13          	addi	s6,s6,-1146 # 8076e2b8 <kernel_pagetable>
    8020173a:	a0a1                	j	80201782 <scheduler+0x82>
        p->state = RUNNING;
    8020173c:	0384a023          	sw	s8,32(s1)
        c->proc = p;
    80201740:	009a3023          	sd	s1,0(s4)
        w_satp(MAKE_SATP(p->pagetable));
    80201744:	70bc                	ld	a5,96(s1)
    80201746:	83b1                	srli	a5,a5,0xc
    80201748:	0157e7b3          	or	a5,a5,s5
  asm volatile("csrw satp, %0" : : "r" (x));
    8020174c:	18079073          	csrw	satp,a5
static inline void
sfence_vma()
{
  // the zero, zero means flush all TLB entries.
  // asm volatile("sfence.vma zero, zero");
  asm volatile("sfence.vma");
    80201750:	12000073          	sfence.vma
        swtch(&c->context, &p->context);
    80201754:	07048593          	addi	a1,s1,112
    80201758:	855e                	mv	a0,s7
    8020175a:	00005097          	auipc	ra,0x5
    8020175e:	e76080e7          	jalr	-394(ra) # 802065d0 <swtch>
        w_satp(MAKE_SATP(kernel_pagetable));
    80201762:	000b3783          	ld	a5,0(s6)
    80201766:	83b1                	srli	a5,a5,0xc
    80201768:	0157e7b3          	or	a5,a5,s5
  asm volatile("csrw satp, %0" : : "r" (x));
    8020176c:	18079073          	csrw	satp,a5
  asm volatile("sfence.vma");
    80201770:	12000073          	sfence.vma
        c->proc = 0;
    80201774:	000a3023          	sd	zero,0(s4)
      release(&p->lock);
    80201778:	854a                	mv	a0,s2
    8020177a:	00005097          	auipc	ra,0x5
    8020177e:	448080e7          	jalr	1096(ra) # 80206bc2 <release>
    struct proc* p = readyq_pop();  //...
    80201782:	00000097          	auipc	ra,0x0
    80201786:	e48080e7          	jalr	-440(ra) # 802015ca <readyq_pop>
    8020178a:	84aa                	mv	s1,a0
    if(p){
    8020178c:	cd01                	beqz	a0,802017a4 <scheduler+0xa4>
      acquire(&p->lock);
    8020178e:	00850913          	addi	s2,a0,8
    80201792:	854a                	mv	a0,s2
    80201794:	00005097          	auipc	ra,0x5
    80201798:	3da080e7          	jalr	986(ra) # 80206b6e <acquire>
      if(p->state == RUNNABLE) {
    8020179c:	509c                	lw	a5,32(s1)
    8020179e:	fd379de3          	bne	a5,s3,80201778 <scheduler+0x78>
    802017a2:	bf69                	j	8020173c <scheduler+0x3c>
  asm volatile("csrr %0, sstatus" : "=r" (x) );
    802017a4:	100027f3          	csrr	a5,sstatus
  w_sstatus(r_sstatus() | SSTATUS_SIE);
    802017a8:	0027e793          	ori	a5,a5,2
  asm volatile("csrw sstatus, %0" : : "r" (x));
    802017ac:	10079073          	csrw	sstatus,a5
      asm volatile("wfi");
    802017b0:	10500073          	wfi
    802017b4:	b7f9                	j	80201782 <scheduler+0x82>

00000000802017b6 <allocpid>:
allocpid() {
    802017b6:	1101                	addi	sp,sp,-32
    802017b8:	ec06                	sd	ra,24(sp)
    802017ba:	e822                	sd	s0,16(sp)
    802017bc:	e426                	sd	s1,8(sp)
    802017be:	e04a                	sd	s2,0(sp)
    802017c0:	1000                	addi	s0,sp,32
  acquire(&pid_lock);
    802017c2:	00547917          	auipc	s2,0x547
    802017c6:	b8e90913          	addi	s2,s2,-1138 # 80748350 <pid_lock>
    802017ca:	854a                	mv	a0,s2
    802017cc:	00005097          	auipc	ra,0x5
    802017d0:	3a2080e7          	jalr	930(ra) # 80206b6e <acquire>
  pid = nextpid;
    802017d4:	00515797          	auipc	a5,0x515
    802017d8:	a5478793          	addi	a5,a5,-1452 # 80716228 <nextpid>
    802017dc:	4384                	lw	s1,0(a5)
  nextpid = nextpid + 1;
    802017de:	0014871b          	addiw	a4,s1,1
    802017e2:	c398                	sw	a4,0(a5)
  release(&pid_lock);
    802017e4:	854a                	mv	a0,s2
    802017e6:	00005097          	auipc	ra,0x5
    802017ea:	3dc080e7          	jalr	988(ra) # 80206bc2 <release>
}
    802017ee:	8526                	mv	a0,s1
    802017f0:	60e2                	ld	ra,24(sp)
    802017f2:	6442                	ld	s0,16(sp)
    802017f4:	64a2                	ld	s1,8(sp)
    802017f6:	6902                	ld	s2,0(sp)
    802017f8:	6105                	addi	sp,sp,32
    802017fa:	8082                	ret

00000000802017fc <proc_pagetable>:
{
    802017fc:	7139                	addi	sp,sp,-64
    802017fe:	fc06                	sd	ra,56(sp)
    80201800:	f822                	sd	s0,48(sp)
    80201802:	f426                	sd	s1,40(sp)
    80201804:	f04a                	sd	s2,32(sp)
    80201806:	ec4e                	sd	s3,24(sp)
    80201808:	e852                	sd	s4,16(sp)
    8020180a:	e456                	sd	s5,8(sp)
    8020180c:	0080                	addi	s0,sp,64
    8020180e:	892a                	mv	s2,a0
    80201810:	89ae                	mv	s3,a1
    80201812:	8ab2                	mv	s5,a2
  pagetable = kvmcreate();
    80201814:	00007097          	auipc	ra,0x7
    80201818:	d30080e7          	jalr	-720(ra) # 80208544 <kvmcreate>
    8020181c:	8a2a                	mv	s4,a0
  if(pagetable == 0)
    8020181e:	cd15                	beqz	a0,8020185a <proc_pagetable+0x5e>
  p->pagetable = pagetable;
    80201820:	06a93023          	sd	a0,96(s2)
  if(pp == NULL)
    80201824:	02098463          	beqz	s3,8020184c <proc_pagetable+0x50>
    if((nvma = vma_copy(p, pp->vma)) == NULL)
    80201828:	1709b583          	ld	a1,368(s3)
    8020182c:	854a                	mv	a0,s2
    8020182e:	00009097          	auipc	ra,0x9
    80201832:	b2e080e7          	jalr	-1234(ra) # 8020a35c <vma_copy>
    80201836:	84aa                	mv	s1,a0
    80201838:	c521                	beqz	a0,80201880 <proc_pagetable+0x84>
    nvma = nvma->next;
    8020183a:	7d04                	ld	s1,56(a0)
    if(thread_create)
    8020183c:	040a9b63          	bnez	s5,80201892 <proc_pagetable+0x96>
      while(nvma != p->vma)
    80201840:	17093783          	ld	a5,368(s2)
        if(nvma->type != TRAP && vma_deep_mapping(pp->pagetable, p->pagetable, nvma) < 0)
    80201844:	4aa1                	li	s5,8
      while(nvma != p->vma)
    80201846:	0af49263          	bne	s1,a5,802018ea <proc_pagetable+0xee>
    8020184a:	a801                	j	8020185a <proc_pagetable+0x5e>
    if(vma_list_init(p) == NULL)
    8020184c:	854a                	mv	a0,s2
    8020184e:	00009097          	auipc	ra,0x9
    80201852:	94a080e7          	jalr	-1718(ra) # 8020a198 <vma_list_init>
    80201856:	84aa                	mv	s1,a0
    80201858:	c919                	beqz	a0,8020186e <proc_pagetable+0x72>
}
    8020185a:	8552                	mv	a0,s4
    8020185c:	70e2                	ld	ra,56(sp)
    8020185e:	7442                	ld	s0,48(sp)
    80201860:	74a2                	ld	s1,40(sp)
    80201862:	7902                	ld	s2,32(sp)
    80201864:	69e2                	ld	s3,24(sp)
    80201866:	6a42                	ld	s4,16(sp)
    80201868:	6aa2                	ld	s5,8(sp)
    8020186a:	6121                	addi	sp,sp,64
    8020186c:	8082                	ret
      freewalk(pagetable);
    8020186e:	8552                	mv	a0,s4
    80201870:	00007097          	auipc	ra,0x7
    80201874:	c32080e7          	jalr	-974(ra) # 802084a2 <freewalk>
      p->pagetable = NULL;
    80201878:	06093023          	sd	zero,96(s2)
      return NULL;
    8020187c:	8a26                	mv	s4,s1
    8020187e:	bff1                	j	8020185a <proc_pagetable+0x5e>
      freepage(pagetable);
    80201880:	8552                	mv	a0,s4
    80201882:	00006097          	auipc	ra,0x6
    80201886:	15a080e7          	jalr	346(ra) # 802079dc <_freepage>
      p->pagetable = NULL;
    8020188a:	06093023          	sd	zero,96(s2)
      return NULL;
    8020188e:	8a26                	mv	s4,s1
    80201890:	b7e9                	j	8020185a <proc_pagetable+0x5e>
      while(nvma != p->vma)
    80201892:	17093783          	ld	a5,368(s2)
    80201896:	fcf482e3          	beq	s1,a5,8020185a <proc_pagetable+0x5e>
        if(nvma->type != TRAP && vma_shallow_mapping(pp->pagetable, p->pagetable, nvma) < 0)
    8020189a:	4aa1                	li	s5,8
    8020189c:	a031                	j	802018a8 <proc_pagetable+0xac>
        nvma = nvma->next;
    8020189e:	7c84                	ld	s1,56(s1)
      while(nvma != p->vma)
    802018a0:	17093783          	ld	a5,368(s2)
    802018a4:	fa978be3          	beq	a5,s1,8020185a <proc_pagetable+0x5e>
        if(nvma->type != TRAP && vma_shallow_mapping(pp->pagetable, p->pagetable, nvma) < 0)
    802018a8:	409c                	lw	a5,0(s1)
    802018aa:	ff578ae3          	beq	a5,s5,8020189e <proc_pagetable+0xa2>
    802018ae:	8626                	mv	a2,s1
    802018b0:	06093583          	ld	a1,96(s2)
    802018b4:	0609b503          	ld	a0,96(s3)
    802018b8:	00009097          	auipc	ra,0x9
    802018bc:	cb8080e7          	jalr	-840(ra) # 8020a570 <vma_shallow_mapping>
    802018c0:	fc055fe3          	bgez	a0,8020189e <proc_pagetable+0xa2>
          free_vma_list(p);
    802018c4:	854a                	mv	a0,s2
    802018c6:	00009097          	auipc	ra,0x9
    802018ca:	81c080e7          	jalr	-2020(ra) # 8020a0e2 <free_vma_list>
          freepage(pagetable);
    802018ce:	8552                	mv	a0,s4
    802018d0:	00006097          	auipc	ra,0x6
    802018d4:	10c080e7          	jalr	268(ra) # 802079dc <_freepage>
          p->pagetable = NULL;
    802018d8:	06093023          	sd	zero,96(s2)
          return NULL;
    802018dc:	4a01                	li	s4,0
    802018de:	bfb5                	j	8020185a <proc_pagetable+0x5e>
        nvma = nvma->next;
    802018e0:	7c84                	ld	s1,56(s1)
      while(nvma != p->vma)
    802018e2:	17093783          	ld	a5,368(s2)
    802018e6:	f6978ae3          	beq	a5,s1,8020185a <proc_pagetable+0x5e>
        if(nvma->type != TRAP && vma_deep_mapping(pp->pagetable, p->pagetable, nvma) < 0)
    802018ea:	409c                	lw	a5,0(s1)
    802018ec:	ff578ae3          	beq	a5,s5,802018e0 <proc_pagetable+0xe4>
    802018f0:	8626                	mv	a2,s1
    802018f2:	06093583          	ld	a1,96(s2)
    802018f6:	0609b503          	ld	a0,96(s3)
    802018fa:	00009097          	auipc	ra,0x9
    802018fe:	b72080e7          	jalr	-1166(ra) # 8020a46c <vma_deep_mapping>
    80201902:	fc055fe3          	bgez	a0,802018e0 <proc_pagetable+0xe4>
          free_vma_list(p);
    80201906:	854a                	mv	a0,s2
    80201908:	00008097          	auipc	ra,0x8
    8020190c:	7da080e7          	jalr	2010(ra) # 8020a0e2 <free_vma_list>
          freepage(pagetable);
    80201910:	8552                	mv	a0,s4
    80201912:	00006097          	auipc	ra,0x6
    80201916:	0ca080e7          	jalr	202(ra) # 802079dc <_freepage>
          p->pagetable = NULL;
    8020191a:	06093023          	sd	zero,96(s2)
          return NULL;
    8020191e:	4a01                	li	s4,0
    80201920:	bf2d                	j	8020185a <proc_pagetable+0x5e>

0000000080201922 <allocproc>:
{
    80201922:	7139                	addi	sp,sp,-64
    80201924:	fc06                	sd	ra,56(sp)
    80201926:	f822                	sd	s0,48(sp)
    80201928:	f426                	sd	s1,40(sp)
    8020192a:	f04a                	sd	s2,32(sp)
    8020192c:	ec4e                	sd	s3,24(sp)
    8020192e:	e852                	sd	s4,16(sp)
    80201930:	e456                	sd	s5,8(sp)
    80201932:	0080                	addi	s0,sp,64
    80201934:	8aaa                	mv	s5,a0
    80201936:	8a2e                	mv	s4,a1
  for(p = proc; p < &proc[NPROC]; p++) {
    80201938:	00548497          	auipc	s1,0x548
    8020193c:	d2048493          	addi	s1,s1,-736 # 80749658 <proc>
    80201940:	00553997          	auipc	s3,0x553
    80201944:	25898993          	addi	s3,s3,600 # 80754b98 <firstuserinit>
    acquire(&p->lock);
    80201948:	00848913          	addi	s2,s1,8
    8020194c:	854a                	mv	a0,s2
    8020194e:	00005097          	auipc	ra,0x5
    80201952:	220080e7          	jalr	544(ra) # 80206b6e <acquire>
    if(p->state == UNUSED) {
    80201956:	509c                	lw	a5,32(s1)
    80201958:	cf81                	beqz	a5,80201970 <allocproc+0x4e>
      release(&p->lock);
    8020195a:	854a                	mv	a0,s2
    8020195c:	00005097          	auipc	ra,0x5
    80201960:	266080e7          	jalr	614(ra) # 80206bc2 <release>
  for(p = proc; p < &proc[NPROC]; p++) {
    80201964:	1d048493          	addi	s1,s1,464
    80201968:	ff3490e3          	bne	s1,s3,80201948 <allocproc+0x26>
  return NULL;
    8020196c:	4481                	li	s1,0
    8020196e:	aa21                	j	80201a86 <allocproc+0x164>
  p->umask = 0;
    80201970:	1c04a023          	sw	zero,448(s1)
  p->pid = allocpid();
    80201974:	00000097          	auipc	ra,0x0
    80201978:	e42080e7          	jalr	-446(ra) # 802017b6 <allocpid>
    8020197c:	c0a8                	sw	a0,64(s1)
  p->killed = 0;
    8020197e:	0204ac23          	sw	zero,56(s1)
  p->mf = NULL;
    80201982:	1804b023          	sd	zero,384(s1)
  p->filelimit = NOFILE;
    80201986:	06500793          	li	a5,101
    8020198a:	f0fc                	sd	a5,224(s1)
  p->robust_list = NULL;
    8020198c:	1a04bc23          	sd	zero,440(s1)
  p->clear_child_tid = NULL;
    80201990:	1a04b823          	sd	zero,432(s1)
  p->set_child_tid = NULL;
    80201994:	1a04b423          	sd	zero,424(s1)
  p->vma = NULL;
    80201998:	1604b823          	sd	zero,368(s1)
  p->uid = 0;
    8020199c:	0404a223          	sw	zero,68(s1)
  p->gid = 0;
    802019a0:	0404a423          	sw	zero,72(s1)
  p->vswtch = 0;
    802019a4:	1c04a223          	sw	zero,452(s1)
  p->ivswtch = 0;
    802019a8:	1c04a423          	sw	zero,456(s1)
  p->q = NULL;
    802019ac:	1604bc23          	sd	zero,376(s1)
  list_init(&p->c_list);
    802019b0:	15048793          	addi	a5,s1,336
	node->prev = node->next = node;
    802019b4:	14f4bc23          	sd	a5,344(s1)
    802019b8:	14f4b823          	sd	a5,336(s1)
  list_init(&p->sib_list);
    802019bc:	16048793          	addi	a5,s1,352
    802019c0:	16f4b423          	sd	a5,360(s1)
    802019c4:	16f4b023          	sd	a5,352(s1)
  if((p->trapframe = allocpage()) == NULL){
    802019c8:	00006097          	auipc	ra,0x6
    802019cc:	f74080e7          	jalr	-140(ra) # 8020793c <_allocpage>
    802019d0:	f4a8                	sd	a0,104(s1)
    802019d2:	c561                	beqz	a0,80201a9a <allocproc+0x178>
  p->kstack = (uint64)allocpage();
    802019d4:	00006097          	auipc	ra,0x6
    802019d8:	f68080e7          	jalr	-152(ra) # 8020793c <_allocpage>
    802019dc:	e8a8                	sd	a0,80(s1)
  if ((proc_pagetable(p, pp, thread_create)) == NULL) {
    802019de:	8652                	mv	a2,s4
    802019e0:	85d6                	mv	a1,s5
    802019e2:	8526                	mv	a0,s1
    802019e4:	00000097          	auipc	ra,0x0
    802019e8:	e18080e7          	jalr	-488(ra) # 802017fc <proc_pagetable>
    802019ec:	89aa                	mv	s3,a0
    802019ee:	cd4d                	beqz	a0,80201aa8 <allocproc+0x186>
  p->ofile = kmalloc(NOFILE*sizeof(struct file*));
    802019f0:	32800513          	li	a0,808
    802019f4:	00006097          	auipc	ra,0x6
    802019f8:	1d0080e7          	jalr	464(ra) # 80207bc4 <kmalloc>
    802019fc:	f4e8                	sd	a0,232(s1)
  p->exec_close = kmalloc(NOFILE*sizeof(int));
    802019fe:	19400513          	li	a0,404
    80201a02:	00006097          	auipc	ra,0x6
    80201a06:	1c2080e7          	jalr	450(ra) # 80207bc4 <kmalloc>
    80201a0a:	f8e8                	sd	a0,240(s1)
  if(!p->ofile){
    80201a0c:	74f8                	ld	a4,232(s1)
    80201a0e:	4781                	li	a5,0
  for(int fd = 0; fd < NOFILE; fd++){
    80201a10:	19400613          	li	a2,404
  if(!p->ofile){
    80201a14:	c755                	beqz	a4,80201ac0 <allocproc+0x19e>
    p->ofile[fd] = NULL;
    80201a16:	74f8                	ld	a4,232(s1)
    80201a18:	00179693          	slli	a3,a5,0x1
    80201a1c:	9736                	add	a4,a4,a3
    80201a1e:	00073023          	sd	zero,0(a4)
    p->exec_close[fd] = 0;
    80201a22:	78f8                	ld	a4,240(s1)
    80201a24:	973e                	add	a4,a4,a5
    80201a26:	00072023          	sw	zero,0(a4)
  for(int fd = 0; fd < NOFILE; fd++){
    80201a2a:	0791                	addi	a5,a5,4
    80201a2c:	fec795e3          	bne	a5,a2,80201a16 <allocproc+0xf4>
  memset(p->ofile, 0, NOFILE*sizeof(struct file*));
    80201a30:	32800613          	li	a2,808
    80201a34:	4581                	li	a1,0
    80201a36:	74e8                	ld	a0,232(s1)
    80201a38:	fffff097          	auipc	ra,0xfffff
    80201a3c:	33c080e7          	jalr	828(ra) # 80200d74 <memset>
  memset(&p->context, 0, sizeof(p->context));
    80201a40:	07000613          	li	a2,112
    80201a44:	4581                	li	a1,0
    80201a46:	07048513          	addi	a0,s1,112
    80201a4a:	fffff097          	auipc	ra,0xfffff
    80201a4e:	32a080e7          	jalr	810(ra) # 80200d74 <memset>
  p->context.ra = (uint64)forkret;
    80201a52:	fffff797          	auipc	a5,0xfffff
    80201a56:	77e78793          	addi	a5,a5,1918 # 802011d0 <forkret>
    80201a5a:	f8bc                	sd	a5,112(s1)
  p->context.sp = p->kstack + PGSIZE;
    80201a5c:	68bc                	ld	a5,80(s1)
    80201a5e:	6705                	lui	a4,0x1
    80201a60:	97ba                	add	a5,a5,a4
    80201a62:	fcbc                	sd	a5,120(s1)
  p->proc_tms.utime = 0;
    80201a64:	1204b023          	sd	zero,288(s1)
  p->proc_tms.stime = 0;
    80201a68:	1204b423          	sd	zero,296(s1)
  p->proc_tms.cutime = 1;
    80201a6c:	4785                	li	a5,1
    80201a6e:	12f4b823          	sd	a5,304(s1)
  p->proc_tms.cstime = 1;
    80201a72:	12f4bc23          	sd	a5,312(s1)
  p->sig_act = NULL;
    80201a76:	1804b423          	sd	zero,392(s1)
  p->sig_frame = NULL;
    80201a7a:	1a04b023          	sd	zero,416(s1)
	p->sig_pending.__val[i] = 0;
    80201a7e:	1804bc23          	sd	zero,408(s1)
  p->killed = 0;
    80201a82:	0204ac23          	sw	zero,56(s1)
}
    80201a86:	8526                	mv	a0,s1
    80201a88:	70e2                	ld	ra,56(sp)
    80201a8a:	7442                	ld	s0,48(sp)
    80201a8c:	74a2                	ld	s1,40(sp)
    80201a8e:	7902                	ld	s2,32(sp)
    80201a90:	69e2                	ld	s3,24(sp)
    80201a92:	6a42                	ld	s4,16(sp)
    80201a94:	6aa2                	ld	s5,8(sp)
    80201a96:	6121                	addi	sp,sp,64
    80201a98:	8082                	ret
    release(&p->lock);
    80201a9a:	854a                	mv	a0,s2
    80201a9c:	00005097          	auipc	ra,0x5
    80201aa0:	126080e7          	jalr	294(ra) # 80206bc2 <release>
    return NULL;
    80201aa4:	4481                	li	s1,0
    80201aa6:	b7c5                	j	80201a86 <allocproc+0x164>
    freeproc(p);
    80201aa8:	8526                	mv	a0,s1
    80201aaa:	fffff097          	auipc	ra,0xfffff
    80201aae:	750080e7          	jalr	1872(ra) # 802011fa <freeproc>
    release(&p->lock);
    80201ab2:	854a                	mv	a0,s2
    80201ab4:	00005097          	auipc	ra,0x5
    80201ab8:	10e080e7          	jalr	270(ra) # 80206bc2 <release>
    return NULL;
    80201abc:	84ce                	mv	s1,s3
    80201abe:	b7e1                	j	80201a86 <allocproc+0x164>
    panic("proc ofile init\n");
    80201ac0:	0000f517          	auipc	a0,0xf
    80201ac4:	67850513          	addi	a0,a0,1656 # 80211138 <rodata_start+0x138>
    80201ac8:	00005097          	auipc	ra,0x5
    80201acc:	406080e7          	jalr	1030(ra) # 80206ece <panic>

0000000080201ad0 <proc_freepagetable>:
{
    80201ad0:	1141                	addi	sp,sp,-16
    80201ad2:	e406                	sd	ra,8(sp)
    80201ad4:	e022                	sd	s0,0(sp)
    80201ad6:	0800                	addi	s0,sp,16
  uvmfree(p);
    80201ad8:	00007097          	auipc	ra,0x7
    80201adc:	ab6080e7          	jalr	-1354(ra) # 8020858e <uvmfree>
}
    80201ae0:	60a2                	ld	ra,8(sp)
    80201ae2:	6402                	ld	s0,0(sp)
    80201ae4:	0141                	addi	sp,sp,16
    80201ae6:	8082                	ret

0000000080201ae8 <procnum>:
{
    80201ae8:	1141                	addi	sp,sp,-16
    80201aea:	e422                	sd	s0,8(sp)
    80201aec:	0800                	addi	s0,sp,16
  for (p = proc; p < &proc[NPROC]; p++) {
    80201aee:	00548797          	auipc	a5,0x548
    80201af2:	b6a78793          	addi	a5,a5,-1174 # 80749658 <proc>
  int num = 0;
    80201af6:	4501                	li	a0,0
  for (p = proc; p < &proc[NPROC]; p++) {
    80201af8:	00553697          	auipc	a3,0x553
    80201afc:	0a068693          	addi	a3,a3,160 # 80754b98 <firstuserinit>
    80201b00:	a029                	j	80201b0a <procnum+0x22>
    80201b02:	1d078793          	addi	a5,a5,464
    80201b06:	00d78663          	beq	a5,a3,80201b12 <procnum+0x2a>
    if (p->state != UNUSED) {
    80201b0a:	5398                	lw	a4,32(a5)
    80201b0c:	db7d                	beqz	a4,80201b02 <procnum+0x1a>
      num++;
    80201b0e:	2505                	addiw	a0,a0,1
    80201b10:	bfcd                	j	80201b02 <procnum+0x1a>
}
    80201b12:	6422                	ld	s0,8(sp)
    80201b14:	0141                	addi	sp,sp,16
    80201b16:	8082                	ret

0000000080201b18 <sched>:
{
    80201b18:	1101                	addi	sp,sp,-32
    80201b1a:	ec06                	sd	ra,24(sp)
    80201b1c:	e822                	sd	s0,16(sp)
    80201b1e:	e426                	sd	s1,8(sp)
    80201b20:	e04a                	sd	s2,0(sp)
    80201b22:	1000                	addi	s0,sp,32
  struct proc *p = myproc();
    80201b24:	00008097          	auipc	ra,0x8
    80201b28:	006080e7          	jalr	6(ra) # 80209b2a <myproc>
    80201b2c:	84aa                	mv	s1,a0
  if(!holding(&p->lock))
    80201b2e:	0521                	addi	a0,a0,8
    80201b30:	00005097          	auipc	ra,0x5
    80201b34:	010080e7          	jalr	16(ra) # 80206b40 <holding>
    80201b38:	cd39                	beqz	a0,80201b96 <sched+0x7e>
  if(mycpu()->noff != 1)
    80201b3a:	00008097          	auipc	ra,0x8
    80201b3e:	fd4080e7          	jalr	-44(ra) # 80209b0e <mycpu>
    80201b42:	5d38                	lw	a4,120(a0)
    80201b44:	4785                	li	a5,1
    80201b46:	06f71063          	bne	a4,a5,80201ba6 <sched+0x8e>
  if(p->state == RUNNING)
    80201b4a:	5098                	lw	a4,32(s1)
    80201b4c:	478d                	li	a5,3
    80201b4e:	06f70463          	beq	a4,a5,80201bb6 <sched+0x9e>
  asm volatile("csrr %0, sstatus" : "=r" (x) );
    80201b52:	100027f3          	csrr	a5,sstatus
  return (x & SSTATUS_SIE) != 0;
    80201b56:	8b89                	andi	a5,a5,2
  if(intr_get())
    80201b58:	e7bd                	bnez	a5,80201bc6 <sched+0xae>
  intena = mycpu()->intena;
    80201b5a:	00008097          	auipc	ra,0x8
    80201b5e:	fb4080e7          	jalr	-76(ra) # 80209b0e <mycpu>
    80201b62:	07c52903          	lw	s2,124(a0)
  swtch(&p->context, &mycpu()->context);
    80201b66:	00008097          	auipc	ra,0x8
    80201b6a:	fa8080e7          	jalr	-88(ra) # 80209b0e <mycpu>
    80201b6e:	00850593          	addi	a1,a0,8
    80201b72:	07048513          	addi	a0,s1,112
    80201b76:	00005097          	auipc	ra,0x5
    80201b7a:	a5a080e7          	jalr	-1446(ra) # 802065d0 <swtch>
  mycpu()->intena = intena;
    80201b7e:	00008097          	auipc	ra,0x8
    80201b82:	f90080e7          	jalr	-112(ra) # 80209b0e <mycpu>
    80201b86:	07252e23          	sw	s2,124(a0)
}
    80201b8a:	60e2                	ld	ra,24(sp)
    80201b8c:	6442                	ld	s0,16(sp)
    80201b8e:	64a2                	ld	s1,8(sp)
    80201b90:	6902                	ld	s2,0(sp)
    80201b92:	6105                	addi	sp,sp,32
    80201b94:	8082                	ret
    panic("sched p->lock");
    80201b96:	0000f517          	auipc	a0,0xf
    80201b9a:	5ba50513          	addi	a0,a0,1466 # 80211150 <rodata_start+0x150>
    80201b9e:	00005097          	auipc	ra,0x5
    80201ba2:	330080e7          	jalr	816(ra) # 80206ece <panic>
    panic("sched locks");
    80201ba6:	0000f517          	auipc	a0,0xf
    80201baa:	5ba50513          	addi	a0,a0,1466 # 80211160 <rodata_start+0x160>
    80201bae:	00005097          	auipc	ra,0x5
    80201bb2:	320080e7          	jalr	800(ra) # 80206ece <panic>
    panic("sched running");
    80201bb6:	0000f517          	auipc	a0,0xf
    80201bba:	5ba50513          	addi	a0,a0,1466 # 80211170 <rodata_start+0x170>
    80201bbe:	00005097          	auipc	ra,0x5
    80201bc2:	310080e7          	jalr	784(ra) # 80206ece <panic>
    panic("sched interruptible");
    80201bc6:	0000f517          	auipc	a0,0xf
    80201bca:	5ba50513          	addi	a0,a0,1466 # 80211180 <rodata_start+0x180>
    80201bce:	00005097          	auipc	ra,0x5
    80201bd2:	300080e7          	jalr	768(ra) # 80206ece <panic>

0000000080201bd6 <sleep>:
{
    80201bd6:	7179                	addi	sp,sp,-48
    80201bd8:	f406                	sd	ra,40(sp)
    80201bda:	f022                	sd	s0,32(sp)
    80201bdc:	ec26                	sd	s1,24(sp)
    80201bde:	e84a                	sd	s2,16(sp)
    80201be0:	e44e                	sd	s3,8(sp)
    80201be2:	e052                	sd	s4,0(sp)
    80201be4:	1800                	addi	s0,sp,48
    80201be6:	89aa                	mv	s3,a0
    80201be8:	892e                	mv	s2,a1
  struct proc *p = myproc();
    80201bea:	00008097          	auipc	ra,0x8
    80201bee:	f40080e7          	jalr	-192(ra) # 80209b2a <myproc>
    80201bf2:	84aa                	mv	s1,a0
  if(lk != &p->lock){  //DOC: sleeplock0
    80201bf4:	00850a13          	addi	s4,a0,8
    80201bf8:	0b2a0b63          	beq	s4,s2,80201cae <sleep+0xd8>
    acquire(&p->lock);  //DOC: sleeplock1
    80201bfc:	8552                	mv	a0,s4
    80201bfe:	00005097          	auipc	ra,0x5
    80201c02:	f70080e7          	jalr	-144(ra) # 80206b6e <acquire>
    release(lk);
    80201c06:	854a                	mv	a0,s2
    80201c08:	00005097          	auipc	ra,0x5
    80201c0c:	fba080e7          	jalr	-70(ra) # 80206bc2 <release>
  queue* q = findwaitq(chan);
    80201c10:	854e                	mv	a0,s3
    80201c12:	fffff097          	auipc	ra,0xfffff
    80201c16:	7b2080e7          	jalr	1970(ra) # 802013c4 <findwaitq>
  if(!q)q = allocwaitq(chan);
    80201c1a:	c529                	beqz	a0,80201c64 <sleep+0x8e>
  waitq_push(q,p);
    80201c1c:	85a6                	mv	a1,s1
    80201c1e:	00000097          	auipc	ra,0x0
    80201c22:	a24080e7          	jalr	-1500(ra) # 80201642 <waitq_push>
  p->vswtch += 1;
    80201c26:	1c44a783          	lw	a5,452(s1)
    80201c2a:	2785                	addiw	a5,a5,1
    80201c2c:	1cf4a223          	sw	a5,452(s1)
  p->state = SLEEPING;
    80201c30:	4785                	li	a5,1
    80201c32:	d09c                	sw	a5,32(s1)
  sched();
    80201c34:	00000097          	auipc	ra,0x0
    80201c38:	ee4080e7          	jalr	-284(ra) # 80201b18 <sched>
  p->chan = 0;
    80201c3c:	0204b823          	sd	zero,48(s1)
    release(&p->lock);
    80201c40:	8552                	mv	a0,s4
    80201c42:	00005097          	auipc	ra,0x5
    80201c46:	f80080e7          	jalr	-128(ra) # 80206bc2 <release>
    acquire(lk);
    80201c4a:	854a                	mv	a0,s2
    80201c4c:	00005097          	auipc	ra,0x5
    80201c50:	f22080e7          	jalr	-222(ra) # 80206b6e <acquire>
}
    80201c54:	70a2                	ld	ra,40(sp)
    80201c56:	7402                	ld	s0,32(sp)
    80201c58:	64e2                	ld	s1,24(sp)
    80201c5a:	6942                	ld	s2,16(sp)
    80201c5c:	69a2                	ld	s3,8(sp)
    80201c5e:	6a02                	ld	s4,0(sp)
    80201c60:	6145                	addi	sp,sp,48
    80201c62:	8082                	ret
  if(!q)q = allocwaitq(chan);
    80201c64:	854e                	mv	a0,s3
    80201c66:	fffff097          	auipc	ra,0xfffff
    80201c6a:	7ec080e7          	jalr	2028(ra) # 80201452 <allocwaitq>
    80201c6e:	89aa                	mv	s3,a0
  if(!q){
    80201c70:	e909                	bnez	a0,80201c82 <sleep+0xac>
    __debug_error("waitq pool is full\n");
    80201c72:	0000f517          	auipc	a0,0xf
    80201c76:	52650513          	addi	a0,a0,1318 # 80211198 <rodata_start+0x198>
    80201c7a:	00006097          	auipc	ra,0x6
    80201c7e:	800080e7          	jalr	-2048(ra) # 8020747a <__debug_error>
  waitq_push(q,p);
    80201c82:	85a6                	mv	a1,s1
    80201c84:	854e                	mv	a0,s3
    80201c86:	00000097          	auipc	ra,0x0
    80201c8a:	9bc080e7          	jalr	-1604(ra) # 80201642 <waitq_push>
  p->vswtch += 1;
    80201c8e:	1c44a783          	lw	a5,452(s1)
    80201c92:	2785                	addiw	a5,a5,1
    80201c94:	1cf4a223          	sw	a5,452(s1)
  p->state = SLEEPING;
    80201c98:	4785                	li	a5,1
    80201c9a:	d09c                	sw	a5,32(s1)
  sched();
    80201c9c:	00000097          	auipc	ra,0x0
    80201ca0:	e7c080e7          	jalr	-388(ra) # 80201b18 <sched>
  p->chan = 0;
    80201ca4:	0204b823          	sd	zero,48(s1)
  if(lk != &p->lock){
    80201ca8:	f92a1ce3          	bne	s4,s2,80201c40 <sleep+0x6a>
    80201cac:	b765                	j	80201c54 <sleep+0x7e>
  queue* q = findwaitq(chan);
    80201cae:	854e                	mv	a0,s3
    80201cb0:	fffff097          	auipc	ra,0xfffff
    80201cb4:	714080e7          	jalr	1812(ra) # 802013c4 <findwaitq>
  if(!q)q = allocwaitq(chan);
    80201cb8:	d555                	beqz	a0,80201c64 <sleep+0x8e>
  waitq_push(q,p);
    80201cba:	85a6                	mv	a1,s1
    80201cbc:	00000097          	auipc	ra,0x0
    80201cc0:	986080e7          	jalr	-1658(ra) # 80201642 <waitq_push>
  p->vswtch += 1;
    80201cc4:	1c44a783          	lw	a5,452(s1)
    80201cc8:	2785                	addiw	a5,a5,1
    80201cca:	1cf4a223          	sw	a5,452(s1)
  p->state = SLEEPING;
    80201cce:	4785                	li	a5,1
    80201cd0:	d09c                	sw	a5,32(s1)
  sched();
    80201cd2:	00000097          	auipc	ra,0x0
    80201cd6:	e46080e7          	jalr	-442(ra) # 80201b18 <sched>
  p->chan = 0;
    80201cda:	0204b823          	sd	zero,48(s1)
  if(lk != &p->lock){
    80201cde:	bf9d                	j	80201c54 <sleep+0x7e>

0000000080201ce0 <wakeup>:
{
    80201ce0:	1101                	addi	sp,sp,-32
    80201ce2:	ec06                	sd	ra,24(sp)
    80201ce4:	e822                	sd	s0,16(sp)
    80201ce6:	e426                	sd	s1,8(sp)
    80201ce8:	e04a                	sd	s2,0(sp)
    80201cea:	1000                	addi	s0,sp,32
   queue* q = findwaitq(chan);
    80201cec:	fffff097          	auipc	ra,0xfffff
    80201cf0:	6d8080e7          	jalr	1752(ra) # 802013c4 <findwaitq>
    80201cf4:	84aa                	mv	s1,a0
       p->state = RUNNABLE;
    80201cf6:	4909                	li	s2,2
   if(q){
    80201cf8:	e909                	bnez	a0,80201d0a <wakeup+0x2a>
     return 0;
    80201cfa:	4501                	li	a0,0
    80201cfc:	a01d                	j	80201d22 <wakeup+0x42>
       p->state = RUNNABLE;
    80201cfe:	03252023          	sw	s2,32(a0)
       readyq_push(p);
    80201d02:	00000097          	auipc	ra,0x0
    80201d06:	85c080e7          	jalr	-1956(ra) # 8020155e <readyq_push>
     while((p = waitq_pop(q))!=NULL){
    80201d0a:	8526                	mv	a0,s1
    80201d0c:	00000097          	auipc	ra,0x0
    80201d10:	988080e7          	jalr	-1656(ra) # 80201694 <waitq_pop>
    80201d14:	f56d                	bnez	a0,80201cfe <wakeup+0x1e>
     delwaitq(q);
    80201d16:	8526                	mv	a0,s1
    80201d18:	fffff097          	auipc	ra,0xfffff
    80201d1c:	7e8080e7          	jalr	2024(ra) # 80201500 <delwaitq>
     return 1;
    80201d20:	4505                	li	a0,1
}
    80201d22:	60e2                	ld	ra,24(sp)
    80201d24:	6442                	ld	s0,16(sp)
    80201d26:	64a2                	ld	s1,8(sp)
    80201d28:	6902                	ld	s2,0(sp)
    80201d2a:	6105                	addi	sp,sp,32
    80201d2c:	8082                	ret

0000000080201d2e <allocparent>:
allocparent(struct proc* parent,struct proc* child){
    80201d2e:	1141                	addi	sp,sp,-16
    80201d30:	e422                	sd	s0,8(sp)
    80201d32:	0800                	addi	s0,sp,16
  child->parent = parent;
    80201d34:	f588                	sd	a0,40(a1)
  list_add_after(&parent->c_list,&child->sib_list);
    80201d36:	16058713          	addi	a4,a1,352
	__list_insert(node, afterme, afterme->next);
    80201d3a:	15853783          	ld	a5,344(a0)
	prev->next = next->prev = node;
    80201d3e:	e398                	sd	a4,0(a5)
    80201d40:	14e53c23          	sd	a4,344(a0)
	node->next = next;
    80201d44:	16f5b423          	sd	a5,360(a1)
    80201d48:	15050513          	addi	a0,a0,336
	node->prev = prev;
    80201d4c:	16a5b023          	sd	a0,352(a1)
}
    80201d50:	6422                	ld	s0,8(sp)
    80201d52:	0141                	addi	sp,sp,16
    80201d54:	8082                	ret

0000000080201d56 <userinit>:
{
    80201d56:	1101                	addi	sp,sp,-32
    80201d58:	ec06                	sd	ra,24(sp)
    80201d5a:	e822                	sd	s0,16(sp)
    80201d5c:	e426                	sd	s1,8(sp)
    80201d5e:	e04a                	sd	s2,0(sp)
    80201d60:	1000                	addi	s0,sp,32
  p = allocproc(0, 0);
    80201d62:	4581                	li	a1,0
    80201d64:	4501                	li	a0,0
    80201d66:	00000097          	auipc	ra,0x0
    80201d6a:	bbc080e7          	jalr	-1092(ra) # 80201922 <allocproc>
    80201d6e:	84aa                	mv	s1,a0
  if(firstuserinit){
    80201d70:	00553797          	auipc	a5,0x553
    80201d74:	e287a783          	lw	a5,-472(a5) # 80754b98 <firstuserinit>
    80201d78:	c3f1                	beqz	a5,80201e3c <userinit+0xe6>
    initproc = p;
    80201d7a:	00553797          	auipc	a5,0x553
    80201d7e:	e2a7b723          	sd	a0,-466(a5) # 80754ba8 <initproc>
    firstuserinit = 0;
    80201d82:	00553797          	auipc	a5,0x553
    80201d86:	e007ab23          	sw	zero,-490(a5) # 80754b98 <firstuserinit>
  alloc_load_vma(p, (uint64) 0, initcodesize, PTE_R|PTE_W|PTE_X|PTE_U);
    80201d8a:	00513917          	auipc	s2,0x513
    80201d8e:	32c90913          	addi	s2,s2,812 # 807150b6 <initcodesize>
    80201d92:	46f9                	li	a3,30
    80201d94:	00092603          	lw	a2,0(s2)
    80201d98:	4581                	li	a1,0
    80201d9a:	8526                	mv	a0,s1
    80201d9c:	00008097          	auipc	ra,0x8
    80201da0:	322080e7          	jalr	802(ra) # 8020a0be <alloc_load_vma>
  copyout(p->pagetable,0,initcode,initcodesize);
    80201da4:	00092683          	lw	a3,0(s2)
    80201da8:	00513617          	auipc	a2,0x513
    80201dac:	26a60613          	addi	a2,a2,618 # 80715012 <initcode>
    80201db0:	4581                	li	a1,0
    80201db2:	70a8                	ld	a0,96(s1)
    80201db4:	00007097          	auipc	ra,0x7
    80201db8:	3a8080e7          	jalr	936(ra) # 8020915c <copyout>
  p->trapframe->epc = 0x0;      // user program counter
    80201dbc:	74bc                	ld	a5,104(s1)
    80201dbe:	0007bc23          	sd	zero,24(a5)
  p->trapframe->sp = type_locate_vma(p->vma,STACK)->end;  // user stack pointer
    80201dc2:	459d                	li	a1,7
    80201dc4:	1704b503          	ld	a0,368(s1)
    80201dc8:	00008097          	auipc	ra,0x8
    80201dcc:	ef8080e7          	jalr	-264(ra) # 80209cc0 <type_locate_vma>
    80201dd0:	74bc                	ld	a5,104(s1)
    80201dd2:	6d18                	ld	a4,24(a0)
    80201dd4:	fb98                	sd	a4,48(a5)
  safestrcpy(p->name, "initcode", sizeof(p->name));
    80201dd6:	4651                	li	a2,20
    80201dd8:	0000f597          	auipc	a1,0xf
    80201ddc:	3d858593          	addi	a1,a1,984 # 802111b0 <rodata_start+0x1b0>
    80201de0:	10048513          	addi	a0,s1,256
    80201de4:	fffff097          	auipc	ra,0xfffff
    80201de8:	0e6080e7          	jalr	230(ra) # 80200eca <safestrcpy>
  p->state = RUNNABLE;
    80201dec:	4789                	li	a5,2
    80201dee:	d09c                	sw	a5,32(s1)
  readyq_push(p);//insert to ready queue
    80201df0:	8526                	mv	a0,s1
    80201df2:	fffff097          	auipc	ra,0xfffff
    80201df6:	76c080e7          	jalr	1900(ra) # 8020155e <readyq_push>
  p->tmask = 0;
    80201dfa:	1004aa23          	sw	zero,276(s1)
  p->cwd = ename(NULL,"/",0);
    80201dfe:	4601                	li	a2,0
    80201e00:	00011597          	auipc	a1,0x11
    80201e04:	ae858593          	addi	a1,a1,-1304 # 802128e8 <vma_type+0x470>
    80201e08:	4501                	li	a0,0
    80201e0a:	00002097          	auipc	ra,0x2
    80201e0e:	530080e7          	jalr	1328(ra) # 8020433a <ename>
    80201e12:	fce8                	sd	a0,248(s1)
  release(&p->lock);
    80201e14:	00848513          	addi	a0,s1,8
    80201e18:	00005097          	auipc	ra,0x5
    80201e1c:	daa080e7          	jalr	-598(ra) # 80206bc2 <release>
  __debug_info("userinit\n");
    80201e20:	0000f517          	auipc	a0,0xf
    80201e24:	3a050513          	addi	a0,a0,928 # 802111c0 <rodata_start+0x1c0>
    80201e28:	00005097          	auipc	ra,0x5
    80201e2c:	2b6080e7          	jalr	694(ra) # 802070de <__debug_info>
}
    80201e30:	60e2                	ld	ra,24(sp)
    80201e32:	6442                	ld	s0,16(sp)
    80201e34:	64a2                	ld	s1,8(sp)
    80201e36:	6902                	ld	s2,0(sp)
    80201e38:	6105                	addi	sp,sp,32
    80201e3a:	8082                	ret
    allocparent(p,initproc);
    80201e3c:	00553917          	auipc	s2,0x553
    80201e40:	d6c90913          	addi	s2,s2,-660 # 80754ba8 <initproc>
    80201e44:	00093583          	ld	a1,0(s2)
    80201e48:	00000097          	auipc	ra,0x0
    80201e4c:	ee6080e7          	jalr	-282(ra) # 80201d2e <allocparent>
    initproc = p;
    80201e50:	00993023          	sd	s1,0(s2)
    80201e54:	bf1d                	j	80201d8a <userinit+0x34>

0000000080201e56 <clone>:
int clone(uint64 flag, uint64 stack, uint64 ptid, uint64 tls, uint64 ctid) {
    80201e56:	715d                	addi	sp,sp,-80
    80201e58:	e486                	sd	ra,72(sp)
    80201e5a:	e0a2                	sd	s0,64(sp)
    80201e5c:	fc26                	sd	s1,56(sp)
    80201e5e:	f84a                	sd	s2,48(sp)
    80201e60:	f44e                	sd	s3,40(sp)
    80201e62:	f052                	sd	s4,32(sp)
    80201e64:	ec56                	sd	s5,24(sp)
    80201e66:	e85a                	sd	s6,16(sp)
    80201e68:	e45e                	sd	s7,8(sp)
    80201e6a:	0880                	addi	s0,sp,80
    80201e6c:	8b2a                	mv	s6,a0
    80201e6e:	84ae                	mv	s1,a1
    80201e70:	8932                	mv	s2,a2
    80201e72:	8a36                	mv	s4,a3
    80201e74:	8bba                	mv	s7,a4
  struct proc *p = myproc();
    80201e76:	00008097          	auipc	ra,0x8
    80201e7a:	cb4080e7          	jalr	-844(ra) # 80209b2a <myproc>
    80201e7e:	89aa                	mv	s3,a0
  if((flag & CLONE_THREAD) && (flag & CLONE_VM))
    80201e80:	67c1                	lui	a5,0x10
    80201e82:	10078793          	addi	a5,a5,256 # 10100 <_entry-0x801eff00>
    80201e86:	00fb7733          	and	a4,s6,a5
    80201e8a:	08f70463          	beq	a4,a5,80201f12 <clone+0xbc>
    if((np = allocproc(p, 0)) == NULL){
    80201e8e:	4581                	li	a1,0
    80201e90:	00000097          	auipc	ra,0x0
    80201e94:	a92080e7          	jalr	-1390(ra) # 80201922 <allocproc>
    80201e98:	8aaa                	mv	s5,a0
    80201e9a:	18050563          	beqz	a0,80202024 <clone+0x1ce>
    *(np->trapframe) = *(p->trapframe);
    80201e9e:	0689b683          	ld	a3,104(s3)
    80201ea2:	87b6                	mv	a5,a3
    80201ea4:	7538                	ld	a4,104(a0)
    80201ea6:	12068693          	addi	a3,a3,288
    80201eaa:	0007b803          	ld	a6,0(a5)
    80201eae:	6788                	ld	a0,8(a5)
    80201eb0:	6b8c                	ld	a1,16(a5)
    80201eb2:	6f90                	ld	a2,24(a5)
    80201eb4:	01073023          	sd	a6,0(a4) # 1000 <_entry-0x801ff000>
    80201eb8:	e708                	sd	a0,8(a4)
    80201eba:	eb0c                	sd	a1,16(a4)
    80201ebc:	ef10                	sd	a2,24(a4)
    80201ebe:	02078793          	addi	a5,a5,32
    80201ec2:	02070713          	addi	a4,a4,32
    80201ec6:	fed792e3          	bne	a5,a3,80201eaa <clone+0x54>
    if(stack != 0)
    80201eca:	c481                	beqz	s1,80201ed2 <clone+0x7c>
      p->trapframe->sp = stack;
    80201ecc:	0689b783          	ld	a5,104(s3)
    80201ed0:	fb84                	sd	s1,48(a5)
  sigaction_copy(&np->sig_act, p->sig_act);
    80201ed2:	1889b583          	ld	a1,392(s3)
    80201ed6:	188a8513          	addi	a0,s5,392
    80201eda:	00005097          	auipc	ra,0x5
    80201ede:	b7a080e7          	jalr	-1158(ra) # 80206a54 <sigaction_copy>
  np->sig_frame = p->sig_frame;
    80201ee2:	1a09b783          	ld	a5,416(s3)
    80201ee6:	1afab023          	sd	a5,416(s5)
    np->sig_pending.__val[i] = p->sig_pending.__val[i];
    80201eea:	1989b783          	ld	a5,408(s3)
    80201eee:	18fabc23          	sd	a5,408(s5)
  np->sz = p->sz;
    80201ef2:	0589b783          	ld	a5,88(s3)
    80201ef6:	04fabc23          	sd	a5,88(s5)
  np->tmask = p->tmask;
    80201efa:	1149a783          	lw	a5,276(s3)
    80201efe:	10faaa23          	sw	a5,276(s5)
  np->trapframe->a0 = 0;
    80201f02:	068ab783          	ld	a5,104(s5)
    80201f06:	0607b823          	sd	zero,112(a5)
    80201f0a:	4481                	li	s1,0
  for(i = 0; i < NOFILE; i++)
    80201f0c:	32800a13          	li	s4,808
    80201f10:	a8bd                	j	80201f8e <clone+0x138>
    if((np = allocproc(p, 1)) == NULL){
    80201f12:	4585                	li	a1,1
    80201f14:	00000097          	auipc	ra,0x0
    80201f18:	a0e080e7          	jalr	-1522(ra) # 80201922 <allocproc>
    80201f1c:	8aaa                	mv	s5,a0
    80201f1e:	10050163          	beqz	a0,80202020 <clone+0x1ca>
    *(np->trapframe) = *(p->trapframe);
    80201f22:	0689b683          	ld	a3,104(s3)
    80201f26:	87b6                	mv	a5,a3
    80201f28:	7538                	ld	a4,104(a0)
    80201f2a:	12068693          	addi	a3,a3,288
    80201f2e:	0007b803          	ld	a6,0(a5)
    80201f32:	6788                	ld	a0,8(a5)
    80201f34:	6b8c                	ld	a1,16(a5)
    80201f36:	6f90                	ld	a2,24(a5)
    80201f38:	01073023          	sd	a6,0(a4)
    80201f3c:	e708                	sd	a0,8(a4)
    80201f3e:	eb0c                	sd	a1,16(a4)
    80201f40:	ef10                	sd	a2,24(a4)
    80201f42:	02078793          	addi	a5,a5,32
    80201f46:	02070713          	addi	a4,a4,32
    80201f4a:	fed792e3          	bne	a5,a3,80201f2e <clone+0xd8>
    np->trapframe->tp = tls;
    80201f4e:	068ab783          	ld	a5,104(s5)
    80201f52:	0547b023          	sd	s4,64(a5)
    np->trapframe->sp = stack;
    80201f56:	068ab783          	ld	a5,104(s5)
    80201f5a:	fb84                	sd	s1,48(a5)
    if(ptid != 0)
    80201f5c:	f6090be3          	beqz	s2,80201ed2 <clone+0x7c>
      copyout(p->pagetable, ptid, (char *)&np->pid, sizeof(int));
    80201f60:	4691                	li	a3,4
    80201f62:	040a8613          	addi	a2,s5,64
    80201f66:	85ca                	mv	a1,s2
    80201f68:	0609b503          	ld	a0,96(s3)
    80201f6c:	00007097          	auipc	ra,0x7
    80201f70:	1f0080e7          	jalr	496(ra) # 8020915c <copyout>
    80201f74:	bfb9                	j	80201ed2 <clone+0x7c>
      np->ofile[i] = filedup(p->ofile[i]);
    80201f76:	0e8ab903          	ld	s2,232(s5)
    80201f7a:	9926                	add	s2,s2,s1
    80201f7c:	00003097          	auipc	ra,0x3
    80201f80:	322080e7          	jalr	802(ra) # 8020529e <filedup>
    80201f84:	00a93023          	sd	a0,0(s2)
  for(i = 0; i < NOFILE; i++)
    80201f88:	04a1                	addi	s1,s1,8
    80201f8a:	01448863          	beq	s1,s4,80201f9a <clone+0x144>
    if(p->ofile[i])
    80201f8e:	0e89b783          	ld	a5,232(s3)
    80201f92:	97a6                	add	a5,a5,s1
    80201f94:	6388                	ld	a0,0(a5)
    80201f96:	f165                	bnez	a0,80201f76 <clone+0x120>
    80201f98:	bfc5                	j	80201f88 <clone+0x132>
  np->cwd = edup(p->cwd);
    80201f9a:	0f89b503          	ld	a0,248(s3)
    80201f9e:	00001097          	auipc	ra,0x1
    80201fa2:	68c080e7          	jalr	1676(ra) # 8020362a <edup>
    80201fa6:	0eaabc23          	sd	a0,248(s5)
  allocparent(p, np);
    80201faa:	85d6                	mv	a1,s5
    80201fac:	854e                	mv	a0,s3
    80201fae:	00000097          	auipc	ra,0x0
    80201fb2:	d80080e7          	jalr	-640(ra) # 80201d2e <allocparent>
  safestrcpy(np->name, p->name, sizeof(p->name));
    80201fb6:	4651                	li	a2,20
    80201fb8:	10098593          	addi	a1,s3,256
    80201fbc:	100a8513          	addi	a0,s5,256
    80201fc0:	fffff097          	auipc	ra,0xfffff
    80201fc4:	f0a080e7          	jalr	-246(ra) # 80200eca <safestrcpy>
  pid = np->pid;
    80201fc8:	040aa483          	lw	s1,64(s5)
  np->state = RUNNABLE;
    80201fcc:	4789                	li	a5,2
    80201fce:	02faa023          	sw	a5,32(s5)
  readyq_push(np);
    80201fd2:	8556                	mv	a0,s5
    80201fd4:	fffff097          	auipc	ra,0xfffff
    80201fd8:	58a080e7          	jalr	1418(ra) # 8020155e <readyq_push>
  if(flag & CLONE_CHILD_SETTID){
    80201fdc:	027b1793          	slli	a5,s6,0x27
    80201fe0:	0007d463          	bgez	a5,80201fe8 <clone+0x192>
    np->set_child_tid = ctid;
    80201fe4:	1b7ab423          	sd	s7,424(s5)
  if(flag & CLONE_CHILD_CLEARTID){
    80201fe8:	02ab1793          	slli	a5,s6,0x2a
    80201fec:	0007d463          	bgez	a5,80201ff4 <clone+0x19e>
    np->clear_child_tid = ctid;
    80201ff0:	1b7ab823          	sd	s7,432(s5)
  p->killed = np->killed;
    80201ff4:	038aa783          	lw	a5,56(s5)
    80201ff8:	02f9ac23          	sw	a5,56(s3)
  release(&np->lock);
    80201ffc:	008a8513          	addi	a0,s5,8
    80202000:	00005097          	auipc	ra,0x5
    80202004:	bc2080e7          	jalr	-1086(ra) # 80206bc2 <release>
}
    80202008:	8526                	mv	a0,s1
    8020200a:	60a6                	ld	ra,72(sp)
    8020200c:	6406                	ld	s0,64(sp)
    8020200e:	74e2                	ld	s1,56(sp)
    80202010:	7942                	ld	s2,48(sp)
    80202012:	79a2                	ld	s3,40(sp)
    80202014:	7a02                	ld	s4,32(sp)
    80202016:	6ae2                	ld	s5,24(sp)
    80202018:	6b42                	ld	s6,16(sp)
    8020201a:	6ba2                	ld	s7,8(sp)
    8020201c:	6161                	addi	sp,sp,80
    8020201e:	8082                	ret
      return -1;
    80202020:	54fd                	li	s1,-1
    80202022:	b7dd                	j	80202008 <clone+0x1b2>
      return -1;
    80202024:	54fd                	li	s1,-1
    80202026:	b7cd                	j	80202008 <clone+0x1b2>

0000000080202028 <getparent>:
getparent(struct proc* child){
    80202028:	1141                	addi	sp,sp,-16
    8020202a:	e422                	sd	s0,8(sp)
    8020202c:	0800                	addi	s0,sp,16
}
    8020202e:	7508                	ld	a0,40(a0)
    80202030:	6422                	ld	s0,8(sp)
    80202032:	0141                	addi	sp,sp,16
    80202034:	8082                	ret

0000000080202036 <findchild>:
findchild(struct proc* p,int (*cond)(struct proc*,int),int pid,struct proc** child){
    80202036:	715d                	addi	sp,sp,-80
    80202038:	e486                	sd	ra,72(sp)
    8020203a:	e0a2                	sd	s0,64(sp)
    8020203c:	fc26                	sd	s1,56(sp)
    8020203e:	f84a                	sd	s2,48(sp)
    80202040:	f44e                	sd	s3,40(sp)
    80202042:	f052                	sd	s4,32(sp)
    80202044:	ec56                	sd	s5,24(sp)
    80202046:	e85a                	sd	s6,16(sp)
    80202048:	e45e                	sd	s7,8(sp)
    8020204a:	e062                	sd	s8,0(sp)
    8020204c:	0880                	addi	s0,sp,80
   struct list* c_head = &p->c_list;
    8020204e:	15050a93          	addi	s5,a0,336
static inline struct list *list_prev(struct list *node) {
	return node->prev;
}

static inline struct list *list_next(struct list *node) {
	return node->next;
    80202052:	15853483          	ld	s1,344(a0)
   *child = NULL;
    80202056:	0006b023          	sd	zero,0(a3)
   while(c_it!=c_head){
    8020205a:	069a8163          	beq	s5,s1,802020bc <findchild+0x86>
    8020205e:	89ae                	mv	s3,a1
    80202060:	8a32                	mv	s4,a2
    80202062:	8bb6                	mv	s7,a3
        if(np->state == ZOMBIE){
    80202064:	4c11                	li	s8,4
    80202066:	a021                	j	8020206e <findchild+0x38>
    80202068:	6484                	ld	s1,8(s1)
   while(c_it!=c_head){
    8020206a:	029a8b63          	beq	s5,s1,802020a0 <findchild+0x6a>
  int ivswtch;
};


static inline struct proc* sib_getproc(struct list* list){
  return dlist_entry(list,struct proc,sib_list);
    8020206e:	ea048913          	addi	s2,s1,-352
      if(cond(np,pid)){
    80202072:	85d2                	mv	a1,s4
    80202074:	854a                	mv	a0,s2
    80202076:	9982                	jalr	s3
    80202078:	d965                	beqz	a0,80202068 <findchild+0x32>
        acquire(&np->lock);
    8020207a:	ea848b13          	addi	s6,s1,-344
    8020207e:	855a                	mv	a0,s6
    80202080:	00005097          	auipc	ra,0x5
    80202084:	aee080e7          	jalr	-1298(ra) # 80206b6e <acquire>
        *child = np; 
    80202088:	012bb023          	sd	s2,0(s7)
        if(np->state == ZOMBIE){
    8020208c:	ec04a783          	lw	a5,-320(s1)
    80202090:	01878963          	beq	a5,s8,802020a2 <findchild+0x6c>
        release(&np->lock);
    80202094:	855a                	mv	a0,s6
    80202096:	00005097          	auipc	ra,0x5
    8020209a:	b2c080e7          	jalr	-1236(ra) # 80206bc2 <release>
    8020209e:	b7e9                	j	80202068 <findchild+0x32>
   return NULL;
    802020a0:	4901                	li	s2,0
}
    802020a2:	854a                	mv	a0,s2
    802020a4:	60a6                	ld	ra,72(sp)
    802020a6:	6406                	ld	s0,64(sp)
    802020a8:	74e2                	ld	s1,56(sp)
    802020aa:	7942                	ld	s2,48(sp)
    802020ac:	79a2                	ld	s3,40(sp)
    802020ae:	7a02                	ld	s4,32(sp)
    802020b0:	6ae2                	ld	s5,24(sp)
    802020b2:	6b42                	ld	s6,16(sp)
    802020b4:	6ba2                	ld	s7,8(sp)
    802020b6:	6c02                	ld	s8,0(sp)
    802020b8:	6161                	addi	sp,sp,80
    802020ba:	8082                	ret
   return NULL;
    802020bc:	4901                	li	s2,0
    802020be:	b7d5                	j	802020a2 <findchild+0x6c>

00000000802020c0 <reparent>:
{
    802020c0:	7139                	addi	sp,sp,-64
    802020c2:	fc06                	sd	ra,56(sp)
    802020c4:	f822                	sd	s0,48(sp)
    802020c6:	f426                	sd	s1,40(sp)
    802020c8:	f04a                	sd	s2,32(sp)
    802020ca:	ec4e                	sd	s3,24(sp)
    802020cc:	e852                	sd	s4,16(sp)
    802020ce:	e456                	sd	s5,8(sp)
    802020d0:	e05a                	sd	s6,0(sp)
    802020d2:	0080                	addi	s0,sp,64
  struct list *c_head = &p->c_list;
    802020d4:	15050993          	addi	s3,a0,336
	return head->next == head;
    802020d8:	15853a83          	ld	s5,344(a0)
  if(list_empty(c_head))return;
    802020dc:	05598c63          	beq	s3,s5,80202134 <reparent+0x74>
	return node->prev;
    802020e0:	15053b03          	ld	s6,336(a0)
  struct list *c_it = c_next;
    802020e4:	84d6                	mv	s1,s5
      pp->parent = initproc;
    802020e6:	00553a17          	auipc	s4,0x553
    802020ea:	ac2a0a13          	addi	s4,s4,-1342 # 80754ba8 <initproc>
      acquire(&pp->lock);
    802020ee:	ea848913          	addi	s2,s1,-344
    802020f2:	854a                	mv	a0,s2
    802020f4:	00005097          	auipc	ra,0x5
    802020f8:	a7a080e7          	jalr	-1414(ra) # 80206b6e <acquire>
      pp->parent = initproc;
    802020fc:	000a3783          	ld	a5,0(s4)
    80202100:	ecf4b423          	sd	a5,-312(s1)
      release(&pp->lock);
    80202104:	854a                	mv	a0,s2
    80202106:	00005097          	auipc	ra,0x5
    8020210a:	abc080e7          	jalr	-1348(ra) # 80206bc2 <release>
	return node->next;
    8020210e:	6484                	ld	s1,8(s1)
  while(c_it!=c_head){
    80202110:	fc999fe3          	bne	s3,s1,802020ee <reparent+0x2e>
  struct list* init_head = &initproc->c_list;
    80202114:	00553797          	auipc	a5,0x553
    80202118:	a947b783          	ld	a5,-1388(a5) # 80754ba8 <initproc>
    8020211c:	1587b703          	ld	a4,344(a5)
	prev->next = next;
    80202120:	1557bc23          	sd	s5,344(a5)
    80202124:	15078793          	addi	a5,a5,336
	next->prev = prev;
    80202128:	00fab023          	sd	a5,0(s5)
	prev->next = next;
    8020212c:	00eb3423          	sd	a4,8(s6)
	next->prev = prev;
    80202130:	01673023          	sd	s6,0(a4)
}
    80202134:	70e2                	ld	ra,56(sp)
    80202136:	7442                	ld	s0,48(sp)
    80202138:	74a2                	ld	s1,40(sp)
    8020213a:	7902                	ld	s2,32(sp)
    8020213c:	69e2                	ld	s3,24(sp)
    8020213e:	6a42                	ld	s4,16(sp)
    80202140:	6aa2                	ld	s5,8(sp)
    80202142:	6b02                	ld	s6,0(sp)
    80202144:	6121                	addi	sp,sp,64
    80202146:	8082                	ret

0000000080202148 <yield>:
{
    80202148:	1101                	addi	sp,sp,-32
    8020214a:	ec06                	sd	ra,24(sp)
    8020214c:	e822                	sd	s0,16(sp)
    8020214e:	e426                	sd	s1,8(sp)
    80202150:	e04a                	sd	s2,0(sp)
    80202152:	1000                	addi	s0,sp,32
  struct proc *p = myproc();
    80202154:	00008097          	auipc	ra,0x8
    80202158:	9d6080e7          	jalr	-1578(ra) # 80209b2a <myproc>
    8020215c:	84aa                	mv	s1,a0
  acquire(&p->lock);
    8020215e:	00850913          	addi	s2,a0,8
    80202162:	854a                	mv	a0,s2
    80202164:	00005097          	auipc	ra,0x5
    80202168:	a0a080e7          	jalr	-1526(ra) # 80206b6e <acquire>
  readyq_push(p);
    8020216c:	8526                	mv	a0,s1
    8020216e:	fffff097          	auipc	ra,0xfffff
    80202172:	3f0080e7          	jalr	1008(ra) # 8020155e <readyq_push>
  p->state = RUNNABLE;
    80202176:	4789                	li	a5,2
    80202178:	d09c                	sw	a5,32(s1)
  sched();
    8020217a:	00000097          	auipc	ra,0x0
    8020217e:	99e080e7          	jalr	-1634(ra) # 80201b18 <sched>
  release(&p->lock);
    80202182:	854a                	mv	a0,s2
    80202184:	00005097          	auipc	ra,0x5
    80202188:	a3e080e7          	jalr	-1474(ra) # 80206bc2 <release>
}
    8020218c:	60e2                	ld	ra,24(sp)
    8020218e:	6442                	ld	s0,16(sp)
    80202190:	64a2                	ld	s1,8(sp)
    80202192:	6902                	ld	s2,0(sp)
    80202194:	6105                	addi	sp,sp,32
    80202196:	8082                	ret

0000000080202198 <wait4pid>:

// Wait for a child process to exit and return its pid.
// Return -1 if this process has no children.
int
wait4pid(int pid,uint64 addr)
{
    80202198:	711d                	addi	sp,sp,-96
    8020219a:	ec86                	sd	ra,88(sp)
    8020219c:	e8a2                	sd	s0,80(sp)
    8020219e:	e4a6                	sd	s1,72(sp)
    802021a0:	e0ca                	sd	s2,64(sp)
    802021a2:	fc4e                	sd	s3,56(sp)
    802021a4:	f852                	sd	s4,48(sp)
    802021a6:	f456                	sd	s5,40(sp)
    802021a8:	f05a                	sd	s6,32(sp)
    802021aa:	ec5e                	sd	s7,24(sp)
    802021ac:	1080                	addi	s0,sp,96
    802021ae:	892a                	mv	s2,a0
    802021b0:	8bae                	mv	s7,a1
  int kidpid;
  struct proc *p = myproc();
    802021b2:	00008097          	auipc	ra,0x8
    802021b6:	978080e7          	jalr	-1672(ra) # 80209b2a <myproc>
    802021ba:	89aa                	mv	s3,a0
  struct proc* child;
  struct proc* chan = NULL;
    802021bc:	fa043423          	sd	zero,-88(s0)
  // hold p->lock for the whole time to avoid lost
  // wakeups from a child's exit().
  acquire(&p->lock);
    802021c0:	00850a13          	addi	s4,a0,8
    802021c4:	8552                	mv	a0,s4
    802021c6:	00005097          	auipc	ra,0x5
    802021ca:	9a8080e7          	jalr	-1624(ra) # 80206b6e <acquire>
  //__debug_warn("[wait4pid]pid%d:%s enter\n",p->pid,p->name);
  while(1){
    kidpid = pid;
    child = findchild(p,zombiecond,pid,&chan);
    802021ce:	fffffa97          	auipc	s5,0xfffff
    802021d2:	fe2a8a93          	addi	s5,s5,-30 # 802011b0 <zombiecond>
    if(!chan){
      //__debug_warn("[wait4pid]pid%d:%s no kid to wait\n",p->pid,p->name);
      release(&p->lock);
      return -1;
    }
    if(pid == -1)sleep(p, &p->lock);  //DOC: wait-sleep
    802021d6:	5b7d                	li	s6,-1
    802021d8:	a8d1                	j	802022ac <wait4pid+0x114>
      kidpid = child->pid;
    802021da:	04052903          	lw	s2,64(a0)
      p->proc_tms.cstime += child->proc_tms.stime + child->proc_tms.cstime;
    802021de:	12853783          	ld	a5,296(a0)
    802021e2:	13853703          	ld	a4,312(a0)
    802021e6:	973e                	add	a4,a4,a5
    802021e8:	1389b783          	ld	a5,312(s3)
    802021ec:	97ba                	add	a5,a5,a4
    802021ee:	12f9bc23          	sd	a5,312(s3)
      p->proc_tms.cutime += child->proc_tms.utime + child->proc_tms.cutime;
    802021f2:	12053783          	ld	a5,288(a0)
    802021f6:	13053703          	ld	a4,304(a0)
    802021fa:	973e                	add	a4,a4,a5
    802021fc:	1309b783          	ld	a5,304(s3)
    80202200:	97ba                	add	a5,a5,a4
    80202202:	12f9b823          	sd	a5,304(s3)
      child->xstate <<= 8;
    80202206:	5d5c                	lw	a5,60(a0)
    80202208:	0087979b          	slliw	a5,a5,0x8
    8020220c:	dd5c                	sw	a5,60(a0)
      if(addr != 0 && copyout(p->pagetable, addr, (char *)&child->xstate, sizeof(child->xstate)) < 0) {
    8020220e:	000b8e63          	beqz	s7,8020222a <wait4pid+0x92>
    80202212:	4691                	li	a3,4
    80202214:	03c50613          	addi	a2,a0,60
    80202218:	85de                	mv	a1,s7
    8020221a:	0609b503          	ld	a0,96(s3)
    8020221e:	00007097          	auipc	ra,0x7
    80202222:	f3e080e7          	jalr	-194(ra) # 8020915c <copyout>
    80202226:	02054e63          	bltz	a0,80202262 <wait4pid+0xca>
      freeproc(child);
    8020222a:	8526                	mv	a0,s1
    8020222c:	fffff097          	auipc	ra,0xfffff
    80202230:	fce080e7          	jalr	-50(ra) # 802011fa <freeproc>
      release(&child->lock);
    80202234:	00848513          	addi	a0,s1,8
    80202238:	00005097          	auipc	ra,0x5
    8020223c:	98a080e7          	jalr	-1654(ra) # 80206bc2 <release>
      release(&p->lock);
    80202240:	8552                	mv	a0,s4
    80202242:	00005097          	auipc	ra,0x5
    80202246:	980080e7          	jalr	-1664(ra) # 80206bc2 <release>
    else sleep(chan,&p->lock);
  }
  release(&p->lock);
  return 0;
}
    8020224a:	854a                	mv	a0,s2
    8020224c:	60e6                	ld	ra,88(sp)
    8020224e:	6446                	ld	s0,80(sp)
    80202250:	64a6                	ld	s1,72(sp)
    80202252:	6906                	ld	s2,64(sp)
    80202254:	79e2                	ld	s3,56(sp)
    80202256:	7a42                	ld	s4,48(sp)
    80202258:	7aa2                	ld	s5,40(sp)
    8020225a:	7b02                	ld	s6,32(sp)
    8020225c:	6be2                	ld	s7,24(sp)
    8020225e:	6125                	addi	sp,sp,96
    80202260:	8082                	ret
        release(&child->lock);
    80202262:	00848513          	addi	a0,s1,8
    80202266:	00005097          	auipc	ra,0x5
    8020226a:	95c080e7          	jalr	-1700(ra) # 80206bc2 <release>
        release(&p->lock);
    8020226e:	8552                	mv	a0,s4
    80202270:	00005097          	auipc	ra,0x5
    80202274:	952080e7          	jalr	-1710(ra) # 80206bc2 <release>
        __debug_warn("[wait4pid]pid%d:%s copyout bad\n",p->pid,p->name);
    80202278:	10098613          	addi	a2,s3,256
    8020227c:	0409a583          	lw	a1,64(s3)
    80202280:	0000f517          	auipc	a0,0xf
    80202284:	f5050513          	addi	a0,a0,-176 # 802111d0 <rodata_start+0x1d0>
    80202288:	00005097          	auipc	ra,0x5
    8020228c:	01c080e7          	jalr	28(ra) # 802072a4 <__debug_warn>
        return -1;
    80202290:	597d                	li	s2,-1
    80202292:	bf65                	j	8020224a <wait4pid+0xb2>
      release(&p->lock);
    80202294:	8552                	mv	a0,s4
    80202296:	00005097          	auipc	ra,0x5
    8020229a:	92c080e7          	jalr	-1748(ra) # 80206bc2 <release>
      return -1;
    8020229e:	597d                	li	s2,-1
    802022a0:	b76d                	j	8020224a <wait4pid+0xb2>
    else sleep(chan,&p->lock);
    802022a2:	85d2                	mv	a1,s4
    802022a4:	00000097          	auipc	ra,0x0
    802022a8:	932080e7          	jalr	-1742(ra) # 80201bd6 <sleep>
    child = findchild(p,zombiecond,pid,&chan);
    802022ac:	fa840693          	addi	a3,s0,-88
    802022b0:	864a                	mv	a2,s2
    802022b2:	85d6                	mv	a1,s5
    802022b4:	854e                	mv	a0,s3
    802022b6:	00000097          	auipc	ra,0x0
    802022ba:	d80080e7          	jalr	-640(ra) # 80202036 <findchild>
    802022be:	84aa                	mv	s1,a0
    if(child != NULL){
    802022c0:	fd09                	bnez	a0,802021da <wait4pid+0x42>
    if(!chan){
    802022c2:	fa843503          	ld	a0,-88(s0)
    802022c6:	d579                	beqz	a0,80202294 <wait4pid+0xfc>
    if(pid == -1)sleep(p, &p->lock);  //DOC: wait-sleep
    802022c8:	fd691de3          	bne	s2,s6,802022a2 <wait4pid+0x10a>
    802022cc:	85d2                	mv	a1,s4
    802022ce:	854e                	mv	a0,s3
    802022d0:	00000097          	auipc	ra,0x0
    802022d4:	906080e7          	jalr	-1786(ra) # 80201bd6 <sleep>
    802022d8:	bfd1                	j	802022ac <wait4pid+0x114>

00000000802022da <exit>:

void
exit(int n)
{
    802022da:	7179                	addi	sp,sp,-48
    802022dc:	f406                	sd	ra,40(sp)
    802022de:	f022                	sd	s0,32(sp)
    802022e0:	ec26                	sd	s1,24(sp)
    802022e2:	e84a                	sd	s2,16(sp)
    802022e4:	e44e                	sd	s3,8(sp)
    802022e6:	e052                	sd	s4,0(sp)
    802022e8:	1800                	addi	s0,sp,48
    802022ea:	8a2a                	mv	s4,a0
  struct proc *p = myproc();
    802022ec:	00008097          	auipc	ra,0x8
    802022f0:	83e080e7          	jalr	-1986(ra) # 80209b2a <myproc>
    802022f4:	892a                	mv	s2,a0
    802022f6:	4481                	li	s1,0
  //if(p == initproc)
    //panic("init exiting");
  //__debug_warn("[exit]pid %d:%s exit %d\n",p->pid,p->name,n);
  // Close all open files.
  for(int fd = 0; fd < NOFILE; fd++){
    802022f8:	32800993          	li	s3,808
    802022fc:	a829                	j	80202316 <exit+0x3c>
    if(p->ofile[fd]){
      struct file *f = p->ofile[fd];
      fileclose(f);
    802022fe:	00003097          	auipc	ra,0x3
    80202302:	ff2080e7          	jalr	-14(ra) # 802052f0 <fileclose>
      p->ofile[fd] = 0;
    80202306:	0e893783          	ld	a5,232(s2)
    8020230a:	97a6                	add	a5,a5,s1
    8020230c:	0007b023          	sd	zero,0(a5)
  for(int fd = 0; fd < NOFILE; fd++){
    80202310:	04a1                	addi	s1,s1,8
    80202312:	01348863          	beq	s1,s3,80202322 <exit+0x48>
    if(p->ofile[fd]){
    80202316:	0e893783          	ld	a5,232(s2)
    8020231a:	97a6                	add	a5,a5,s1
    8020231c:	6388                	ld	a0,0(a5)
    8020231e:	f165                	bnez	a0,802022fe <exit+0x24>
    80202320:	bfc5                	j	80202310 <exit+0x36>
    }
  }

  eput(p->cwd);
    80202322:	0f893503          	ld	a0,248(s2)
    80202326:	00001097          	auipc	ra,0x1
    8020232a:	656080e7          	jalr	1622(ra) # 8020397c <eput>
  p->cwd = 0;
    8020232e:	0e093c23          	sd	zero,248(s2)
  wakeup(p);
    80202332:	854a                	mv	a0,s2
    80202334:	00000097          	auipc	ra,0x0
    80202338:	9ac080e7          	jalr	-1620(ra) # 80201ce0 <wakeup>
  acquire(&p->lock);
    8020233c:	00890513          	addi	a0,s2,8
    80202340:	00005097          	auipc	ra,0x5
    80202344:	82e080e7          	jalr	-2002(ra) # 80206b6e <acquire>
  wakeup(getparent(p));
    80202348:	02893503          	ld	a0,40(s2)
    8020234c:	00000097          	auipc	ra,0x0
    80202350:	994080e7          	jalr	-1644(ra) # 80201ce0 <wakeup>
  reparent(p);
    80202354:	854a                	mv	a0,s2
    80202356:	00000097          	auipc	ra,0x0
    8020235a:	d6a080e7          	jalr	-662(ra) # 802020c0 <reparent>
  
  p->xstate = n;
    8020235e:	03492e23          	sw	s4,60(s2)
  p->state = ZOMBIE;
    80202362:	4791                	li	a5,4
    80202364:	02f92023          	sw	a5,32(s2)
  
  // p->killed = SIGTERM;
  // Jump into the scheduler, never to return.
  sched();
    80202368:	fffff097          	auipc	ra,0xfffff
    8020236c:	7b0080e7          	jalr	1968(ra) # 80201b18 <sched>
  panic("zombie exit");
    80202370:	0000f517          	auipc	a0,0xf
    80202374:	e8050513          	addi	a0,a0,-384 # 802111f0 <rodata_start+0x1f0>
    80202378:	00005097          	auipc	ra,0x5
    8020237c:	b56080e7          	jalr	-1194(ra) # 80206ece <panic>

0000000080202380 <kill>:
  while(1){
  
  }
}

int kill(int pid,int sig){
    80202380:	7139                	addi	sp,sp,-64
    80202382:	fc06                	sd	ra,56(sp)
    80202384:	f822                	sd	s0,48(sp)
    80202386:	f426                	sd	s1,40(sp)
    80202388:	f04a                	sd	s2,32(sp)
    8020238a:	ec4e                	sd	s3,24(sp)
    8020238c:	e852                	sd	s4,16(sp)
    8020238e:	e456                	sd	s5,8(sp)
    80202390:	0080                	addi	s0,sp,64
    80202392:	892e                	mv	s2,a1
	struct proc* p;
	for(p = proc; p < &proc[NPROC]; p++){
    80202394:	00547497          	auipc	s1,0x547
    80202398:	2c448493          	addi	s1,s1,708 # 80749658 <proc>
    8020239c:	00552717          	auipc	a4,0x552
    802023a0:	7fc70713          	addi	a4,a4,2044 # 80754b98 <firstuserinit>
		if(p->pid == pid){
    802023a4:	40bc                	lw	a5,64(s1)
    802023a6:	00a78763          	beq	a5,a0,802023b4 <kill+0x34>
	for(p = proc; p < &proc[NPROC]; p++){
    802023aa:	1d048493          	addi	s1,s1,464
    802023ae:	fee49be3          	bne	s1,a4,802023a4 <kill+0x24>
    802023b2:	a83d                	j	802023f0 <kill+0x70>
			acquire(&p->lock);
    802023b4:	00848993          	addi	s3,s1,8
    802023b8:	854e                	mv	a0,s3
    802023ba:	00004097          	auipc	ra,0x4
    802023be:	7b4080e7          	jalr	1972(ra) # 80206b6e <acquire>
			if(p->state == SLEEPING){
    802023c2:	5098                	lw	a4,32(s1)
    802023c4:	4785                	li	a5,1
    802023c6:	02f70f63          	beq	a4,a5,80202404 <kill+0x84>
				// need to modify...
				queue_del(p);
				readyq_push(p);
				p->state = RUNNABLE;
			}
			p->sig_pending.__val[0] |= 1ul << sig;
    802023ca:	4785                	li	a5,1
    802023cc:	01279733          	sll	a4,a5,s2
    802023d0:	1984b783          	ld	a5,408(s1)
    802023d4:	8fd9                	or	a5,a5,a4
    802023d6:	18f4bc23          	sd	a5,408(s1)
			if (0 == p->killed || sig < p->killed) {
    802023da:	5c9c                	lw	a5,56(s1)
    802023dc:	c399                	beqz	a5,802023e2 <kill+0x62>
    802023de:	00f95463          	bge	s2,a5,802023e6 <kill+0x66>
				p->killed = sig;
    802023e2:	0324ac23          	sw	s2,56(s1)
			}
			release(&p->lock);
    802023e6:	854e                	mv	a0,s3
    802023e8:	00004097          	auipc	ra,0x4
    802023ec:	7da080e7          	jalr	2010(ra) # 80206bc2 <release>
			return 0;
		}
	}
  //return -ESRCH;
  return 0;
}
    802023f0:	4501                	li	a0,0
    802023f2:	70e2                	ld	ra,56(sp)
    802023f4:	7442                	ld	s0,48(sp)
    802023f6:	74a2                	ld	s1,40(sp)
    802023f8:	7902                	ld	s2,32(sp)
    802023fa:	69e2                	ld	s3,24(sp)
    802023fc:	6a42                	ld	s4,16(sp)
    802023fe:	6aa2                	ld	s5,8(sp)
    80202400:	6121                	addi	sp,sp,64
    80202402:	8082                	ret
	qunlock(q);
	return p;
}

static inline int queue_del(struct proc* p){
	queue* q = (queue*)p->q;
    80202404:	1784ba03          	ld	s4,376(s1)
	acquire(&q->lk);
    80202408:	008a0a93          	addi	s5,s4,8
    8020240c:	8556                	mv	a0,s5
    8020240e:	00004097          	auipc	ra,0x4
    80202412:	760080e7          	jalr	1888(ra) # 80206b6e <acquire>
	struct list* l = &p->dlist;
	qlock(q);
	if(q){
    80202416:	020a0b63          	beqz	s4,8020244c <kill+0xcc>
	__list_link(node->prev, node->next);
    8020241a:	1404b703          	ld	a4,320(s1)
    8020241e:	1484b783          	ld	a5,328(s1)
	prev->next = next;
    80202422:	e71c                	sd	a5,8(a4)
	next->prev = prev;
    80202424:	e398                	sd	a4,0(a5)
		list_del(l);
		p->q = 0;
    80202426:	1604bc23          	sd	zero,376(s1)
		p->dlist.prev = NULL;
    8020242a:	1404b023          	sd	zero,320(s1)
		p->dlist.next = NULL;
    8020242e:	1404b423          	sd	zero,328(s1)
	release(&q->lk);
    80202432:	8556                	mv	a0,s5
    80202434:	00004097          	auipc	ra,0x4
    80202438:	78e080e7          	jalr	1934(ra) # 80206bc2 <release>
				readyq_push(p);
    8020243c:	8526                	mv	a0,s1
    8020243e:	fffff097          	auipc	ra,0xfffff
    80202442:	120080e7          	jalr	288(ra) # 8020155e <readyq_push>
				p->state = RUNNABLE;
    80202446:	4789                	li	a5,2
    80202448:	d09c                	sw	a5,32(s1)
    8020244a:	b741                	j	802023ca <kill+0x4a>
    8020244c:	8556                	mv	a0,s5
    8020244e:	00004097          	auipc	ra,0x4
    80202452:	774080e7          	jalr	1908(ra) # 80206bc2 <release>
		qunlock(q);	
		return 1;	
	}
	qunlock(q);
	return 0;
    80202456:	b7dd                	j	8020243c <kill+0xbc>

0000000080202458 <tgkill>:
    if(p->pid == pid) return 1;
  }
  return 0;
}

int tgkill(int pid,int tid,int sig){
    80202458:	872a                	mv	a4,a0
    8020245a:	852e                	mv	a0,a1
    8020245c:	85b2                	mv	a1,a2
  for(p = proc;p < &proc[NPROC];p++){
    8020245e:	00547797          	auipc	a5,0x547
    80202462:	1fa78793          	addi	a5,a5,506 # 80749658 <proc>
    80202466:	00552697          	auipc	a3,0x552
    8020246a:	73268693          	addi	a3,a3,1842 # 80754b98 <firstuserinit>
    if(p->pid == sid) break;
    8020246e:	43b0                	lw	a2,64(a5)
    80202470:	00a60663          	beq	a2,a0,8020247c <tgkill+0x24>
  for(p = proc;p < &proc[NPROC];p++){
    80202474:	1d078793          	addi	a5,a5,464
    80202478:	fed79be3          	bne	a5,a3,8020246e <tgkill+0x16>
  return child->parent;
    8020247c:	779c                	ld	a5,40(a5)
    if(!p)break;
    8020247e:	c385                	beqz	a5,8020249e <tgkill+0x46>
    if(p->pid == pid) return 1;
    80202480:	43b4                	lw	a3,64(a5)
    80202482:	fee69de3          	bne	a3,a4,8020247c <tgkill+0x24>
int tgkill(int pid,int tid,int sig){
    80202486:	1141                	addi	sp,sp,-16
    80202488:	e406                	sd	ra,8(sp)
    8020248a:	e022                	sd	s0,0(sp)
    8020248c:	0800                	addi	s0,sp,16
  if(!cmp_parent(pid,tid)) return -1;
  else return kill(tid,sig);
    8020248e:	00000097          	auipc	ra,0x0
    80202492:	ef2080e7          	jalr	-270(ra) # 80202380 <kill>
}
    80202496:	60a2                	ld	ra,8(sp)
    80202498:	6402                	ld	s0,0(sp)
    8020249a:	0141                	addi	sp,sp,16
    8020249c:	8082                	ret
  if(!cmp_parent(pid,tid)) return -1;
    8020249e:	557d                	li	a0,-1
}
    802024a0:	8082                	ret

00000000802024a2 <read_fat>:
/**
 * Read the FAT table content corresponded to the given cluster number.
 * @param   cluster     the number of cluster which you want to read its content in FAT table
 */
static uint32 read_fat(struct fs * self_fs, uint32 cluster)
{
    802024a2:	1101                	addi	sp,sp,-32
    802024a4:	ec06                	sd	ra,24(sp)
    802024a6:	e822                	sd	s0,16(sp)
    802024a8:	e426                	sd	s1,8(sp)
    802024aa:	e04a                	sd	s2,0(sp)
    802024ac:	1000                	addi	s0,sp,32
    if (cluster >= FAT32_EOC) {
    802024ae:	100007b7          	lui	a5,0x10000
    802024b2:	17dd                	addi	a5,a5,-9
        return cluster;
    802024b4:	84ae                	mv	s1,a1
    if (cluster >= FAT32_EOC) {
    802024b6:	00b7e863          	bltu	a5,a1,802024c6 <read_fat+0x24>
    802024ba:	892a                	mv	s2,a0
    }
    if (cluster > self_fs->fat.data_clus_cnt + 1) {     // because cluster number starts at 2, not 0
    802024bc:	4d1c                	lw	a5,24(a0)
    802024be:	2785                	addiw	a5,a5,1
        return 0;
    802024c0:	4481                	li	s1,0
    if (cluster > self_fs->fat.data_clus_cnt + 1) {     // because cluster number starts at 2, not 0
    802024c2:	00b7f963          	bgeu	a5,a1,802024d4 <read_fat+0x32>
    // here should be a cache layer for FAT table, but not implemented yet.
    struct buf *b = bread(self_fs->devno, fat_sec);
    uint32 next_clus = *(uint32 *)(b->data + fat_offset_of_clus(self_fs, cluster));
    brelse(b);
    return next_clus;
}
    802024c6:	8526                	mv	a0,s1
    802024c8:	60e2                	ld	ra,24(sp)
    802024ca:	6442                	ld	s0,16(sp)
    802024cc:	64a2                	ld	s1,8(sp)
    802024ce:	6902                	ld	s2,0(sp)
    802024d0:	6105                	addi	sp,sp,32
    802024d2:	8082                	ret
    return self_fs->fat.bpb.rsvd_sec_cnt + (cluster << 2) / self_fs->fat.bpb.byts_per_sec + self_fs->fat.bpb.fat_sz * (fat_num - 1);
    802024d4:	0025949b          	slliw	s1,a1,0x2
    802024d8:	02055783          	lhu	a5,32(a0)
    802024dc:	02f4d7bb          	divuw	a5,s1,a5
    802024e0:	02455583          	lhu	a1,36(a0)
    struct buf *b = bread(self_fs->devno, fat_sec);
    802024e4:	9dbd                	addw	a1,a1,a5
    802024e6:	4108                	lw	a0,0(a0)
    802024e8:	ffffe097          	auipc	ra,0xffffe
    802024ec:	c10080e7          	jalr	-1008(ra) # 802000f8 <bread>
    return (cluster << 2) % self_fs->fat.bpb.byts_per_sec;
    802024f0:	02095583          	lhu	a1,32(s2)
    802024f4:	02b4f5bb          	remuw	a1,s1,a1
    uint32 next_clus = *(uint32 *)(b->data + fat_offset_of_clus(self_fs, cluster));
    802024f8:	1582                	slli	a1,a1,0x20
    802024fa:	9181                	srli	a1,a1,0x20
    802024fc:	95aa                	add	a1,a1,a0
    802024fe:	4da4                	lw	s1,88(a1)
    brelse(b);
    80202500:	ffffe097          	auipc	ra,0xffffe
    80202504:	d64080e7          	jalr	-668(ra) # 80200264 <brelse>
    return next_clus;
    80202508:	bf7d                	j	802024c6 <read_fat+0x24>

000000008020250a <alloc_clus>:
        brelse(b);
    }
}

static uint32 alloc_clus(struct fs * self_fs, uint8 dev)
{
    8020250a:	715d                	addi	sp,sp,-80
    8020250c:	e486                	sd	ra,72(sp)
    8020250e:	e0a2                	sd	s0,64(sp)
    80202510:	fc26                	sd	s1,56(sp)
    80202512:	f84a                	sd	s2,48(sp)
    80202514:	f44e                	sd	s3,40(sp)
    80202516:	f052                	sd	s4,32(sp)
    80202518:	ec56                	sd	s5,24(sp)
    8020251a:	e85a                	sd	s6,16(sp)
    8020251c:	e45e                	sd	s7,8(sp)
    8020251e:	e062                	sd	s8,0(sp)
    80202520:	0880                	addi	s0,sp,80
    // should we keep a free cluster list? instead of searching fat every time.
    struct buf *b;
    uint32 sec = self_fs->fat.bpb.rsvd_sec_cnt;
    80202522:	02455b83          	lhu	s7,36(a0)
    uint32 const ent_per_sec = self_fs->fat.bpb.byts_per_sec / sizeof(uint32);
    80202526:	02055983          	lhu	s3,32(a0)
    for (uint32 i = 0; i < self_fs->fat.bpb.fat_sz; i++, sec++) {
    8020252a:	591c                	lw	a5,48(a0)
    8020252c:	cbf5                	beqz	a5,80202620 <alloc_clus+0x116>
    8020252e:	892a                	mv	s2,a0
    80202530:	0029d99b          	srliw	s3,s3,0x2
    80202534:	00098a1b          	sext.w	s4,s3
    80202538:	4b01                	li	s6,0
        b = bread(self_fs->devno, sec);
        for (uint32 j = 0; j < ent_per_sec; j++) {
    8020253a:	4c01                	li	s8,0
    8020253c:	a86d                	j	802025f6 <alloc_clus+0xec>
            if (((uint32 *)(b->data))[j] == 0) {
                ((uint32 *)(b->data))[j] = FAT32_EOC + 7;
    8020253e:	100007b7          	lui	a5,0x10000
    80202542:	37fd                	addiw	a5,a5,-1
    80202544:	c29c                	sw	a5,0(a3)
                bwrite(self_fs->devno, b);
    80202546:	85d6                	mv	a1,s5
    80202548:	00092503          	lw	a0,0(s2)
    8020254c:	ffffe097          	auipc	ra,0xffffe
    80202550:	cb8080e7          	jalr	-840(ra) # 80200204 <bwrite>
                brelse(b);
    80202554:	8556                	mv	a0,s5
    80202556:	ffffe097          	auipc	ra,0xffffe
    8020255a:	d0e080e7          	jalr	-754(ra) # 80200264 <brelse>
                uint32 clus = i * ent_per_sec + j;
    8020255e:	036989bb          	mulw	s3,s3,s6
    80202562:	009984bb          	addw	s1,s3,s1
    80202566:	00048a9b          	sext.w	s5,s1
    return ((cluster - 2) * self_fs->fat.bpb.sec_per_clus) + self_fs->fat.first_data_sec;
    8020256a:	02294783          	lbu	a5,34(s2)
    8020256e:	34f9                	addiw	s1,s1,-2
    80202570:	02f48a3b          	mulw	s4,s1,a5
    80202574:	01092703          	lw	a4,16(s2)
    80202578:	00ea0a3b          	addw	s4,s4,a4
    for (int i = 0; i < self_fs->fat.bpb.sec_per_clus; i++) {
    8020257c:	c7a9                	beqz	a5,802025c6 <alloc_clus+0xbc>
    8020257e:	4981                	li	s3,0
        b = bread(self_fs->devno, sec++);
    80202580:	014985bb          	addw	a1,s3,s4
    80202584:	00092503          	lw	a0,0(s2)
    80202588:	ffffe097          	auipc	ra,0xffffe
    8020258c:	b70080e7          	jalr	-1168(ra) # 802000f8 <bread>
    80202590:	84aa                	mv	s1,a0
        memset(b->data, 0, BSIZE);
    80202592:	20000613          	li	a2,512
    80202596:	4581                	li	a1,0
    80202598:	05850513          	addi	a0,a0,88
    8020259c:	ffffe097          	auipc	ra,0xffffe
    802025a0:	7d8080e7          	jalr	2008(ra) # 80200d74 <memset>
        bwrite(self_fs->devno, b);
    802025a4:	85a6                	mv	a1,s1
    802025a6:	00092503          	lw	a0,0(s2)
    802025aa:	ffffe097          	auipc	ra,0xffffe
    802025ae:	c5a080e7          	jalr	-934(ra) # 80200204 <bwrite>
        brelse(b);
    802025b2:	8526                	mv	a0,s1
    802025b4:	ffffe097          	auipc	ra,0xffffe
    802025b8:	cb0080e7          	jalr	-848(ra) # 80200264 <brelse>
    for (int i = 0; i < self_fs->fat.bpb.sec_per_clus; i++) {
    802025bc:	2985                	addiw	s3,s3,1
    802025be:	02294783          	lbu	a5,34(s2)
    802025c2:	faf9cfe3          	blt	s3,a5,80202580 <alloc_clus+0x76>
            }
        }
        brelse(b);
    }
    panic("no clusters");
}
    802025c6:	8556                	mv	a0,s5
    802025c8:	60a6                	ld	ra,72(sp)
    802025ca:	6406                	ld	s0,64(sp)
    802025cc:	74e2                	ld	s1,56(sp)
    802025ce:	7942                	ld	s2,48(sp)
    802025d0:	79a2                	ld	s3,40(sp)
    802025d2:	7a02                	ld	s4,32(sp)
    802025d4:	6ae2                	ld	s5,24(sp)
    802025d6:	6b42                	ld	s6,16(sp)
    802025d8:	6ba2                	ld	s7,8(sp)
    802025da:	6c02                	ld	s8,0(sp)
    802025dc:	6161                	addi	sp,sp,80
    802025de:	8082                	ret
        brelse(b);
    802025e0:	8556                	mv	a0,s5
    802025e2:	ffffe097          	auipc	ra,0xffffe
    802025e6:	c82080e7          	jalr	-894(ra) # 80200264 <brelse>
    for (uint32 i = 0; i < self_fs->fat.bpb.fat_sz; i++, sec++) {
    802025ea:	2b05                	addiw	s6,s6,1
    802025ec:	2b85                	addiw	s7,s7,1
    802025ee:	03092783          	lw	a5,48(s2)
    802025f2:	02fb7763          	bgeu	s6,a5,80202620 <alloc_clus+0x116>
        b = bread(self_fs->devno, sec);
    802025f6:	85de                	mv	a1,s7
    802025f8:	00092503          	lw	a0,0(s2)
    802025fc:	ffffe097          	auipc	ra,0xffffe
    80202600:	afc080e7          	jalr	-1284(ra) # 802000f8 <bread>
    80202604:	8aaa                	mv	s5,a0
        for (uint32 j = 0; j < ent_per_sec; j++) {
    80202606:	fc0a0de3          	beqz	s4,802025e0 <alloc_clus+0xd6>
    8020260a:	05850793          	addi	a5,a0,88
    8020260e:	84e2                	mv	s1,s8
            if (((uint32 *)(b->data))[j] == 0) {
    80202610:	86be                	mv	a3,a5
    80202612:	4398                	lw	a4,0(a5)
    80202614:	d70d                	beqz	a4,8020253e <alloc_clus+0x34>
        for (uint32 j = 0; j < ent_per_sec; j++) {
    80202616:	2485                	addiw	s1,s1,1
    80202618:	0791                	addi	a5,a5,4
    8020261a:	fe9a1be3          	bne	s4,s1,80202610 <alloc_clus+0x106>
    8020261e:	b7c9                	j	802025e0 <alloc_clus+0xd6>
    panic("no clusters");
    80202620:	0000f517          	auipc	a0,0xf
    80202624:	be050513          	addi	a0,a0,-1056 # 80211200 <rodata_start+0x200>
    80202628:	00005097          	auipc	ra,0x5
    8020262c:	8a6080e7          	jalr	-1882(ra) # 80206ece <panic>

0000000080202630 <write_fat>:
    if (cluster > self_fs->fat.data_clus_cnt + 1) {
    80202630:	4d1c                	lw	a5,24(a0)
    80202632:	2785                	addiw	a5,a5,1
    80202634:	06b7e963          	bltu	a5,a1,802026a6 <write_fat+0x76>
{
    80202638:	7179                	addi	sp,sp,-48
    8020263a:	f406                	sd	ra,40(sp)
    8020263c:	f022                	sd	s0,32(sp)
    8020263e:	ec26                	sd	s1,24(sp)
    80202640:	e84a                	sd	s2,16(sp)
    80202642:	e44e                	sd	s3,8(sp)
    80202644:	e052                	sd	s4,0(sp)
    80202646:	1800                	addi	s0,sp,48
    80202648:	892a                	mv	s2,a0
    8020264a:	8a32                	mv	s4,a2
    return self_fs->fat.bpb.rsvd_sec_cnt + (cluster << 2) / self_fs->fat.bpb.byts_per_sec + self_fs->fat.bpb.fat_sz * (fat_num - 1);
    8020264c:	0025949b          	slliw	s1,a1,0x2
    80202650:	02055783          	lhu	a5,32(a0)
    80202654:	02f4d7bb          	divuw	a5,s1,a5
    80202658:	02455583          	lhu	a1,36(a0)
    struct buf *b = bread(self_fs->devno, fat_sec);
    8020265c:	9dbd                	addw	a1,a1,a5
    8020265e:	4108                	lw	a0,0(a0)
    80202660:	ffffe097          	auipc	ra,0xffffe
    80202664:	a98080e7          	jalr	-1384(ra) # 802000f8 <bread>
    80202668:	89aa                	mv	s3,a0
    return (cluster << 2) % self_fs->fat.bpb.byts_per_sec;
    8020266a:	02095583          	lhu	a1,32(s2)
    8020266e:	02b4f5bb          	remuw	a1,s1,a1
    *(uint32 *)(b->data + off) = content;
    80202672:	1582                	slli	a1,a1,0x20
    80202674:	9181                	srli	a1,a1,0x20
    80202676:	95aa                	add	a1,a1,a0
    80202678:	0545ac23          	sw	s4,88(a1)
    bwrite(self_fs->devno, b);
    8020267c:	85aa                	mv	a1,a0
    8020267e:	00092503          	lw	a0,0(s2)
    80202682:	ffffe097          	auipc	ra,0xffffe
    80202686:	b82080e7          	jalr	-1150(ra) # 80200204 <bwrite>
    brelse(b);
    8020268a:	854e                	mv	a0,s3
    8020268c:	ffffe097          	auipc	ra,0xffffe
    80202690:	bd8080e7          	jalr	-1064(ra) # 80200264 <brelse>
    return 0;
    80202694:	4501                	li	a0,0
}
    80202696:	70a2                	ld	ra,40(sp)
    80202698:	7402                	ld	s0,32(sp)
    8020269a:	64e2                	ld	s1,24(sp)
    8020269c:	6942                	ld	s2,16(sp)
    8020269e:	69a2                	ld	s3,8(sp)
    802026a0:	6a02                	ld	s4,0(sp)
    802026a2:	6145                	addi	sp,sp,48
    802026a4:	8082                	ret
        return -1;
    802026a6:	557d                	li	a0,-1
}
    802026a8:	8082                	ret

00000000802026aa <reloc_clus>:
 * @param   off         the offset from the beginning of the relative file
 * @param   alloc       whether alloc new cluster when meeting end of FAT chains
 * @return              the offset from the new cur_clus
 */
static int reloc_clus(struct fs * self_fs, struct dirent *entry, uint off, int alloc)
{
    802026aa:	715d                	addi	sp,sp,-80
    802026ac:	e486                	sd	ra,72(sp)
    802026ae:	e0a2                	sd	s0,64(sp)
    802026b0:	fc26                	sd	s1,56(sp)
    802026b2:	f84a                	sd	s2,48(sp)
    802026b4:	f44e                	sd	s3,40(sp)
    802026b6:	f052                	sd	s4,32(sp)
    802026b8:	ec56                	sd	s5,24(sp)
    802026ba:	e85a                	sd	s6,16(sp)
    802026bc:	e45e                	sd	s7,8(sp)
    802026be:	e062                	sd	s8,0(sp)
    802026c0:	0880                	addi	s0,sp,80
    802026c2:	89aa                	mv	s3,a0
    802026c4:	84ae                	mv	s1,a1
    802026c6:	8ab2                	mv	s5,a2
    int clus_num = off / self_fs->fat.byts_per_clus;
    802026c8:	01c52c03          	lw	s8,28(a0)
    802026cc:	03865a3b          	divuw	s4,a2,s8
    while (clus_num > entry->clus_cnt) {
    802026d0:	1105a703          	lw	a4,272(a1)
    802026d4:	07477963          	bgeu	a4,s4,80202746 <reloc_clus+0x9c>
    802026d8:	8bb6                	mv	s7,a3
        int clus = read_fat(self_fs, entry->cur_clus);
        if (clus >= FAT32_EOC) {
    802026da:	10000b37          	lui	s6,0x10000
    802026de:	1b5d                	addi	s6,s6,-9
    802026e0:	a025                	j	80202708 <reloc_clus+0x5e>
            if (alloc) {
                clus = alloc_clus(self_fs, entry->dev);
                write_fat(self_fs, entry->cur_clus, clus);
            } else {
                entry->cur_clus = entry->first_clus;
    802026e2:	1044a783          	lw	a5,260(s1)
    802026e6:	10f4a623          	sw	a5,268(s1)
                entry->clus_cnt = 0;
    802026ea:	1004a823          	sw	zero,272(s1)
                return -1;
    802026ee:	557d                	li	a0,-1
    802026f0:	a04d                	j	80202792 <reloc_clus+0xe8>
            }
        }
        entry->cur_clus = clus;
    802026f2:	1124a623          	sw	s2,268(s1)
        entry->clus_cnt++;
    802026f6:	1104a783          	lw	a5,272(s1)
    802026fa:	2785                	addiw	a5,a5,1
    802026fc:	0007871b          	sext.w	a4,a5
    80202700:	10f4a823          	sw	a5,272(s1)
    while (clus_num > entry->clus_cnt) {
    80202704:	05477163          	bgeu	a4,s4,80202746 <reloc_clus+0x9c>
        int clus = read_fat(self_fs, entry->cur_clus);
    80202708:	10c4a583          	lw	a1,268(s1)
    8020270c:	854e                	mv	a0,s3
    8020270e:	00000097          	auipc	ra,0x0
    80202712:	d94080e7          	jalr	-620(ra) # 802024a2 <read_fat>
    80202716:	0005091b          	sext.w	s2,a0
        if (clus >= FAT32_EOC) {
    8020271a:	fd2b5ce3          	bge	s6,s2,802026f2 <reloc_clus+0x48>
            if (alloc) {
    8020271e:	fc0b82e3          	beqz	s7,802026e2 <reloc_clus+0x38>
                clus = alloc_clus(self_fs, entry->dev);
    80202722:	1144c583          	lbu	a1,276(s1)
    80202726:	854e                	mv	a0,s3
    80202728:	00000097          	auipc	ra,0x0
    8020272c:	de2080e7          	jalr	-542(ra) # 8020250a <alloc_clus>
    80202730:	0005091b          	sext.w	s2,a0
                write_fat(self_fs, entry->cur_clus, clus);
    80202734:	864a                	mv	a2,s2
    80202736:	10c4a583          	lw	a1,268(s1)
    8020273a:	854e                	mv	a0,s3
    8020273c:	00000097          	auipc	ra,0x0
    80202740:	ef4080e7          	jalr	-268(ra) # 80202630 <write_fat>
    80202744:	b77d                	j	802026f2 <reloc_clus+0x48>
    }
    if (clus_num < entry->clus_cnt) {
    80202746:	04ea7263          	bgeu	s4,a4,8020278a <reloc_clus+0xe0>
        entry->cur_clus = entry->first_clus;
    8020274a:	1044a783          	lw	a5,260(s1)
    8020274e:	10f4a623          	sw	a5,268(s1)
        entry->clus_cnt = 0;
    80202752:	1004a823          	sw	zero,272(s1)
        while (entry->clus_cnt < clus_num) {
    80202756:	038aea63          	bltu	s5,s8,8020278a <reloc_clus+0xe0>
            entry->cur_clus = read_fat(self_fs, entry->cur_clus);
            if (entry->cur_clus >= FAT32_EOC) {
    8020275a:	10000937          	lui	s2,0x10000
    8020275e:	195d                	addi	s2,s2,-9
            entry->cur_clus = read_fat(self_fs, entry->cur_clus);
    80202760:	10c4a583          	lw	a1,268(s1)
    80202764:	854e                	mv	a0,s3
    80202766:	00000097          	auipc	ra,0x0
    8020276a:	d3c080e7          	jalr	-708(ra) # 802024a2 <read_fat>
    8020276e:	2501                	sext.w	a0,a0
    80202770:	10a4a623          	sw	a0,268(s1)
            if (entry->cur_clus >= FAT32_EOC) {
    80202774:	02a96b63          	bltu	s2,a0,802027aa <reloc_clus+0x100>
                panic("reloc_clus");
            }
            entry->clus_cnt++;
    80202778:	1104a783          	lw	a5,272(s1)
    8020277c:	2785                	addiw	a5,a5,1
    8020277e:	0007871b          	sext.w	a4,a5
    80202782:	10f4a823          	sw	a5,272(s1)
        while (entry->clus_cnt < clus_num) {
    80202786:	fd476de3          	bltu	a4,s4,80202760 <reloc_clus+0xb6>
        }
    }
    return off % self_fs->fat.byts_per_clus;
    8020278a:	01c9a503          	lw	a0,28(s3)
    8020278e:	02aaf53b          	remuw	a0,s5,a0
}
    80202792:	60a6                	ld	ra,72(sp)
    80202794:	6406                	ld	s0,64(sp)
    80202796:	74e2                	ld	s1,56(sp)
    80202798:	7942                	ld	s2,48(sp)
    8020279a:	79a2                	ld	s3,40(sp)
    8020279c:	7a02                	ld	s4,32(sp)
    8020279e:	6ae2                	ld	s5,24(sp)
    802027a0:	6b42                	ld	s6,16(sp)
    802027a2:	6ba2                	ld	s7,8(sp)
    802027a4:	6c02                	ld	s8,0(sp)
    802027a6:	6161                	addi	sp,sp,80
    802027a8:	8082                	ret
                panic("reloc_clus");
    802027aa:	0000f517          	auipc	a0,0xf
    802027ae:	a6650513          	addi	a0,a0,-1434 # 80211210 <rodata_start+0x210>
    802027b2:	00004097          	auipc	ra,0x4
    802027b6:	71c080e7          	jalr	1820(ra) # 80206ece <panic>

00000000802027ba <rw_clus>:
{
    802027ba:	7119                	addi	sp,sp,-128
    802027bc:	fc86                	sd	ra,120(sp)
    802027be:	f8a2                	sd	s0,112(sp)
    802027c0:	f4a6                	sd	s1,104(sp)
    802027c2:	f0ca                	sd	s2,96(sp)
    802027c4:	ecce                	sd	s3,88(sp)
    802027c6:	e8d2                	sd	s4,80(sp)
    802027c8:	e4d6                	sd	s5,72(sp)
    802027ca:	e0da                	sd	s6,64(sp)
    802027cc:	fc5e                	sd	s7,56(sp)
    802027ce:	f862                	sd	s8,48(sp)
    802027d0:	f466                	sd	s9,40(sp)
    802027d2:	f06a                	sd	s10,32(sp)
    802027d4:	ec6e                	sd	s11,24(sp)
    802027d6:	0100                	addi	s0,sp,128
    802027d8:	f8d43023          	sd	a3,-128(s0)
    802027dc:	8b3a                	mv	s6,a4
    if (off + n > self_fs->fat.byts_per_clus)
    802027de:	010786bb          	addw	a3,a5,a6
    802027e2:	4d58                	lw	a4,28(a0)
    802027e4:	02d76d63          	bltu	a4,a3,8020281e <rw_clus+0x64>
    802027e8:	8caa                	mv	s9,a0
    802027ea:	8bb2                	mv	s7,a2
    802027ec:	8c42                	mv	s8,a6
    uint sec = first_sec_of_clus(self_fs, cluster) + off / self_fs->fat.bpb.byts_per_sec;
    802027ee:	02055a83          	lhu	s5,32(a0)
    return ((cluster - 2) * self_fs->fat.bpb.sec_per_clus) + self_fs->fat.first_data_sec;
    802027f2:	ffe5899b          	addiw	s3,a1,-2
    802027f6:	02254583          	lbu	a1,34(a0)
    802027fa:	02b989bb          	mulw	s3,s3,a1
    802027fe:	490c                	lw	a1,16(a0)
    80202800:	00b989bb          	addw	s3,s3,a1
    uint sec = first_sec_of_clus(self_fs, cluster) + off / self_fs->fat.bpb.byts_per_sec;
    80202804:	0357d73b          	divuw	a4,a5,s5
    80202808:	00e989bb          	addw	s3,s3,a4
    off = off % self_fs->fat.bpb.byts_per_sec;
    8020280c:	0357fabb          	remuw	s5,a5,s5
    for (tot = 0; tot < n; tot += m, off += m, data += m, sec++) {
    80202810:	0e080963          	beqz	a6,80202902 <rw_clus+0x148>
    80202814:	4a01                	li	s4,0
        m = BSIZE - off % BSIZE;
    80202816:	20000d93          	li	s11,512
        if (bad == -1) {
    8020281a:	5d7d                	li	s10,-1
    8020281c:	a0bd                	j	8020288a <rw_clus+0xd0>
        panic("offset out of range");
    8020281e:	0000f517          	auipc	a0,0xf
    80202822:	a0250513          	addi	a0,a0,-1534 # 80211220 <rodata_start+0x220>
    80202826:	00004097          	auipc	ra,0x4
    8020282a:	6a8080e7          	jalr	1704(ra) # 80206ece <panic>
                bwrite(self_fs->devno, bp);
    8020282e:	85ca                	mv	a1,s2
    80202830:	000ca503          	lw	a0,0(s9)
    80202834:	ffffe097          	auipc	ra,0xffffe
    80202838:	9d0080e7          	jalr	-1584(ra) # 80200204 <bwrite>
        brelse(bp);
    8020283c:	854a                	mv	a0,s2
    8020283e:	ffffe097          	auipc	ra,0xffffe
    80202842:	a26080e7          	jalr	-1498(ra) # 80200264 <brelse>
        if (bad == -1) {
    80202846:	a805                	j	80202876 <rw_clus+0xbc>
            bad = either_copyout(user, data, bp->data + (off % BSIZE), m);
    80202848:	05890613          	addi	a2,s2,88 # 10000058 <_entry-0x701fffa8>
    8020284c:	1682                	slli	a3,a3,0x20
    8020284e:	9281                	srli	a3,a3,0x20
    80202850:	963a                	add	a2,a2,a4
    80202852:	85da                	mv	a1,s6
    80202854:	f8043503          	ld	a0,-128(s0)
    80202858:	00007097          	auipc	ra,0x7
    8020285c:	c70080e7          	jalr	-912(ra) # 802094c8 <either_copyout>
    80202860:	f8a43423          	sd	a0,-120(s0)
        brelse(bp);
    80202864:	854a                	mv	a0,s2
    80202866:	ffffe097          	auipc	ra,0xffffe
    8020286a:	9fe080e7          	jalr	-1538(ra) # 80200264 <brelse>
        if (bad == -1) {
    8020286e:	f8843783          	ld	a5,-120(s0)
    80202872:	07a78863          	beq	a5,s10,802028e2 <rw_clus+0x128>
    for (tot = 0; tot < n; tot += m, off += m, data += m, sec++) {
    80202876:	01448a3b          	addw	s4,s1,s4
    8020287a:	01548abb          	addw	s5,s1,s5
    8020287e:	1482                	slli	s1,s1,0x20
    80202880:	9081                	srli	s1,s1,0x20
    80202882:	9b26                	add	s6,s6,s1
    80202884:	2985                	addiw	s3,s3,1
    80202886:	058a7e63          	bgeu	s4,s8,802028e2 <rw_clus+0x128>
        bp = bread(self_fs->devno, sec);
    8020288a:	85ce                	mv	a1,s3
    8020288c:	000ca503          	lw	a0,0(s9)
    80202890:	ffffe097          	auipc	ra,0xffffe
    80202894:	868080e7          	jalr	-1944(ra) # 802000f8 <bread>
    80202898:	892a                	mv	s2,a0
        m = BSIZE - off % BSIZE;
    8020289a:	1ffaf713          	andi	a4,s5,511
    8020289e:	40ed863b          	subw	a2,s11,a4
        if (n - tot < m) {
    802028a2:	414c07bb          	subw	a5,s8,s4
    802028a6:	86be                	mv	a3,a5
    802028a8:	2781                	sext.w	a5,a5
    802028aa:	0006059b          	sext.w	a1,a2
    802028ae:	00f5f363          	bgeu	a1,a5,802028b4 <rw_clus+0xfa>
    802028b2:	86b2                	mv	a3,a2
    802028b4:	0006849b          	sext.w	s1,a3
        if (write) {
    802028b8:	f80b88e3          	beqz	s7,80202848 <rw_clus+0x8e>
            if ((bad = either_copyin(user, bp->data + (off % BSIZE), data, m)) != -1) {
    802028bc:	05890593          	addi	a1,s2,88
    802028c0:	1682                	slli	a3,a3,0x20
    802028c2:	9281                	srli	a3,a3,0x20
    802028c4:	865a                	mv	a2,s6
    802028c6:	95ba                	add	a1,a1,a4
    802028c8:	f8043503          	ld	a0,-128(s0)
    802028cc:	00007097          	auipc	ra,0x7
    802028d0:	c52080e7          	jalr	-942(ra) # 8020951e <either_copyin>
    802028d4:	f5a51de3          	bne	a0,s10,8020282e <rw_clus+0x74>
        brelse(bp);
    802028d8:	854a                	mv	a0,s2
    802028da:	ffffe097          	auipc	ra,0xffffe
    802028de:	98a080e7          	jalr	-1654(ra) # 80200264 <brelse>
}
    802028e2:	8552                	mv	a0,s4
    802028e4:	70e6                	ld	ra,120(sp)
    802028e6:	7446                	ld	s0,112(sp)
    802028e8:	74a6                	ld	s1,104(sp)
    802028ea:	7906                	ld	s2,96(sp)
    802028ec:	69e6                	ld	s3,88(sp)
    802028ee:	6a46                	ld	s4,80(sp)
    802028f0:	6aa6                	ld	s5,72(sp)
    802028f2:	6b06                	ld	s6,64(sp)
    802028f4:	7be2                	ld	s7,56(sp)
    802028f6:	7c42                	ld	s8,48(sp)
    802028f8:	7ca2                	ld	s9,40(sp)
    802028fa:	7d02                	ld	s10,32(sp)
    802028fc:	6de2                	ld	s11,24(sp)
    802028fe:	6109                	addi	sp,sp,128
    80202900:	8082                	ret
    for (tot = 0; tot < n; tot += m, off += m, data += m, sec++) {
    80202902:	8a42                	mv	s4,a6
    80202904:	bff9                	j	802028e2 <rw_clus+0x128>

0000000080202906 <eget>:
// by their whole path. But when parsing a path, we open all the directories through it, 
// which forms a linked list from the final file to the self_fs->root. Thus, we use the "parent" pointer 
// to recognize whether an entry with the "name" as given is really the file we want in the right path.
// Should never get self_fs->root by eget, it's easy to understand.
static struct dirent *eget(struct dirent *parent, char *name)
{
    80202906:	715d                	addi	sp,sp,-80
    80202908:	e486                	sd	ra,72(sp)
    8020290a:	e0a2                	sd	s0,64(sp)
    8020290c:	fc26                	sd	s1,56(sp)
    8020290e:	f84a                	sd	s2,48(sp)
    80202910:	f44e                	sd	s3,40(sp)
    80202912:	f052                	sd	s4,32(sp)
    80202914:	ec56                	sd	s5,24(sp)
    80202916:	e85a                	sd	s6,16(sp)
    80202918:	e45e                	sd	s7,8(sp)
    8020291a:	e062                	sd	s8,0(sp)
    8020291c:	0880                	addi	s0,sp,80
    8020291e:	8a2a                	mv	s4,a0
    80202920:	8bae                	mv	s7,a1
    if(parent->mnt) parent = &(FatFs[parent->dev].root);
    80202922:	11c52783          	lw	a5,284(a0)
    80202926:	c385                	beqz	a5,80202946 <eget+0x40>
    80202928:	11454a03          	lbu	s4,276(a0)
    8020292c:	6795                	lui	a5,0x5
    8020292e:	9b878713          	addi	a4,a5,-1608 # 49b8 <_entry-0x801fb648>
    80202932:	02ea0a33          	mul	s4,s4,a4
    80202936:	83078793          	addi	a5,a5,-2000
    8020293a:	9a3e                	add	s4,s4,a5
    8020293c:	00552517          	auipc	a0,0x552
    80202940:	27450513          	addi	a0,a0,628 # 80754bb0 <FatFs>
    80202944:	9a2a                	add	s4,s4,a0
    struct fs * self_fs = &FatFs[parent->dev];
    80202946:	114a4903          	lbu	s2,276(s4)
    8020294a:	00090b1b          	sext.w	s6,s2
    struct dirent *ep;
    acquire(&self_fs->ecache.lock);
    8020294e:	6795                	lui	a5,0x5
    80202950:	9b878793          	addi	a5,a5,-1608 # 49b8 <_entry-0x801fb648>
    80202954:	02f90933          	mul	s2,s2,a5
    80202958:	00552a97          	auipc	s5,0x552
    8020295c:	290a8a93          	addi	s5,s5,656 # 80754be8 <FatFs+0x38>
    80202960:	9aca                	add	s5,s5,s2
    80202962:	8556                	mv	a0,s5
    80202964:	00004097          	auipc	ra,0x4
    80202968:	20a080e7          	jalr	522(ra) # 80206b6e <acquire>
    if (name) {
    8020296c:	080b8063          	beqz	s7,802029ec <eget+0xe6>
        for (ep = self_fs->root.next; ep != &self_fs->root; ep = ep->next) {          // LRU algo
    80202970:	00552697          	auipc	a3,0x552
    80202974:	24068693          	addi	a3,a3,576 # 80754bb0 <FatFs>
    80202978:	6795                	lui	a5,0x5
    8020297a:	9b878713          	addi	a4,a5,-1608 # 49b8 <_entry-0x801fb648>
    8020297e:	02eb0733          	mul	a4,s6,a4
    80202982:	9736                	add	a4,a4,a3
    80202984:	973e                	add	a4,a4,a5
    80202986:	96073483          	ld	s1,-1696(a4)
    8020298a:	83078993          	addi	s3,a5,-2000
    8020298e:	99ca                	add	s3,s3,s2
    80202990:	99b6                	add	s3,s3,a3
    80202992:	05348d63          	beq	s1,s3,802029ec <eget+0xe6>
            if (ep->valid == 1 && ep->parent == parent
    80202996:	4c05                	li	s8,1
    80202998:	a029                	j	802029a2 <eget+0x9c>
        for (ep = self_fs->root.next; ep != &self_fs->root; ep = ep->next) {          // LRU algo
    8020299a:	1304b483          	ld	s1,304(s1)
    8020299e:	05348763          	beq	s1,s3,802029ec <eget+0xe6>
            if (ep->valid == 1 && ep->parent == parent
    802029a2:	11649783          	lh	a5,278(s1)
    802029a6:	ff879ae3          	bne	a5,s8,8020299a <eget+0x94>
    802029aa:	1284b783          	ld	a5,296(s1)
    802029ae:	ff4796e3          	bne	a5,s4,8020299a <eget+0x94>
                && strncmp(ep->filename, name, FAT32_MAX_FILENAME) == 0) {
    802029b2:	0ff00613          	li	a2,255
    802029b6:	85de                	mv	a1,s7
    802029b8:	8526                	mv	a0,s1
    802029ba:	ffffe097          	auipc	ra,0xffffe
    802029be:	496080e7          	jalr	1174(ra) # 80200e50 <strncmp>
    802029c2:	fd61                	bnez	a0,8020299a <eget+0x94>
                if (ep->ref++ == 0) {
    802029c4:	1184a783          	lw	a5,280(s1)
    802029c8:	0017871b          	addiw	a4,a5,1
    802029cc:	10e4ac23          	sw	a4,280(s1)
    802029d0:	eb81                	bnez	a5,802029e0 <eget+0xda>
                    ep->parent->ref++;
    802029d2:	1284b703          	ld	a4,296(s1)
    802029d6:	11872783          	lw	a5,280(a4)
    802029da:	2785                	addiw	a5,a5,1
    802029dc:	10f72c23          	sw	a5,280(a4)
                }
                release(&self_fs->ecache.lock);
    802029e0:	8556                	mv	a0,s5
    802029e2:	00004097          	auipc	ra,0x4
    802029e6:	1e0080e7          	jalr	480(ra) # 80206bc2 <release>
                // edup(ep->parent);
                return ep;
    802029ea:	a0bd                	j	80202a58 <eget+0x152>
            }
        }
    }
    for (ep = self_fs->root.prev; ep != &self_fs->root; ep = ep->prev) {              // LRU algo
    802029ec:	00552697          	auipc	a3,0x552
    802029f0:	1c468693          	addi	a3,a3,452 # 80754bb0 <FatFs>
    802029f4:	6715                	lui	a4,0x5
    802029f6:	9b870793          	addi	a5,a4,-1608 # 49b8 <_entry-0x801fb648>
    802029fa:	02fb07b3          	mul	a5,s6,a5
    802029fe:	97b6                	add	a5,a5,a3
    80202a00:	97ba                	add	a5,a5,a4
    80202a02:	9687b483          	ld	s1,-1688(a5)
    80202a06:	83070713          	addi	a4,a4,-2000
    80202a0a:	974a                	add	a4,a4,s2
    80202a0c:	9736                	add	a4,a4,a3
    80202a0e:	00e48963          	beq	s1,a4,80202a20 <eget+0x11a>
        if (ep->ref == 0) {
    80202a12:	1184a783          	lw	a5,280(s1)
    80202a16:	cf89                	beqz	a5,80202a30 <eget+0x12a>
    for (ep = self_fs->root.prev; ep != &self_fs->root; ep = ep->prev) {              // LRU algo
    80202a18:	1384b483          	ld	s1,312(s1)
    80202a1c:	fee49be3          	bne	s1,a4,80202a12 <eget+0x10c>
            ep->dirty = 0;
            release(&self_fs->ecache.lock);
            return ep;
        }
    }
    panic("eget: insufficient self_fs->ecache");
    80202a20:	0000f517          	auipc	a0,0xf
    80202a24:	81850513          	addi	a0,a0,-2024 # 80211238 <rodata_start+0x238>
    80202a28:	00004097          	auipc	ra,0x4
    80202a2c:	4a6080e7          	jalr	1190(ra) # 80206ece <panic>
            ep->ref = 1;
    80202a30:	4785                	li	a5,1
    80202a32:	10f4ac23          	sw	a5,280(s1)
            ep->dev = parent->dev;
    80202a36:	114a4783          	lbu	a5,276(s4)
    80202a3a:	10f48a23          	sb	a5,276(s1)
            ep->off = 0;
    80202a3e:	1204a023          	sw	zero,288(s1)
            ep->valid = 0;
    80202a42:	10049b23          	sh	zero,278(s1)
            ep->mnt = 0;
    80202a46:	1004ae23          	sw	zero,284(s1)
            ep->dirty = 0;
    80202a4a:	10048aa3          	sb	zero,277(s1)
            release(&self_fs->ecache.lock);
    80202a4e:	8556                	mv	a0,s5
    80202a50:	00004097          	auipc	ra,0x4
    80202a54:	172080e7          	jalr	370(ra) # 80206bc2 <release>
    return 0;
}
    80202a58:	8526                	mv	a0,s1
    80202a5a:	60a6                	ld	ra,72(sp)
    80202a5c:	6406                	ld	s0,64(sp)
    80202a5e:	74e2                	ld	s1,56(sp)
    80202a60:	7942                	ld	s2,48(sp)
    80202a62:	79a2                	ld	s3,40(sp)
    80202a64:	7a02                	ld	s4,32(sp)
    80202a66:	6ae2                	ld	s5,24(sp)
    80202a68:	6b42                	ld	s6,16(sp)
    80202a6a:	6ba2                	ld	s7,8(sp)
    80202a6c:	6c02                	ld	s8,0(sp)
    80202a6e:	6161                	addi	sp,sp,80
    80202a70:	8082                	ret

0000000080202a72 <read_entry_name>:
 * @param   buffer      pointer to the array that stores the name
 * @param   raw_entry   pointer to the entry in a sector buffer
 * @param   islong      if non-zero, read as l-n-e, otherwise s-n-e.
 */
static void read_entry_name(char *buffer, union dentry *d)
{
    80202a72:	7179                	addi	sp,sp,-48
    80202a74:	f406                	sd	ra,40(sp)
    80202a76:	f022                	sd	s0,32(sp)
    80202a78:	ec26                	sd	s1,24(sp)
    80202a7a:	e84a                	sd	s2,16(sp)
    80202a7c:	1800                	addi	s0,sp,48
    80202a7e:	84aa                	mv	s1,a0
    80202a80:	892e                	mv	s2,a1
    if (d->lne.attr == ATTR_LONG_NAME) {                       // long entry branch
    80202a82:	00b5c703          	lbu	a4,11(a1)
    80202a86:	47bd                	li	a5,15
    80202a88:	08f70463          	beq	a4,a5,80202b10 <read_entry_name+0x9e>
        snstr(buffer, d->lne.name2, NELEM(d->lne.name2));
        buffer += NELEM(d->lne.name2);
        snstr(buffer, d->lne.name3, NELEM(d->lne.name3));
    } else {
        // assert: only "." and ".." will enter this branch
        memset(buffer, 0, CHAR_SHORT_NAME + 2); // plus '.' and '\0'
    80202a8c:	4635                	li	a2,13
    80202a8e:	4581                	li	a1,0
    80202a90:	ffffe097          	auipc	ra,0xffffe
    80202a94:	2e4080e7          	jalr	740(ra) # 80200d74 <memset>
        int i;
        for (i = 0; d->sne.name[i] != ' ' && i < 8; i++) {
    80202a98:	00094703          	lbu	a4,0(s2)
    80202a9c:	02000793          	li	a5,32
    80202aa0:	0af70b63          	beq	a4,a5,80202b56 <read_entry_name+0xe4>
    80202aa4:	4785                	li	a5,1
    80202aa6:	02000613          	li	a2,32
    80202aaa:	45a5                	li	a1,9
            buffer[i] = d->sne.name[i];
    80202aac:	00f486b3          	add	a3,s1,a5
    80202ab0:	fee68fa3          	sb	a4,-1(a3)
        for (i = 0; d->sne.name[i] != ' ' && i < 8; i++) {
    80202ab4:	0007851b          	sext.w	a0,a5
    80202ab8:	00f90733          	add	a4,s2,a5
    80202abc:	00074703          	lbu	a4,0(a4)
    80202ac0:	00c70563          	beq	a4,a2,80202aca <read_entry_name+0x58>
    80202ac4:	0785                	addi	a5,a5,1
    80202ac6:	feb793e3          	bne	a5,a1,80202aac <read_entry_name+0x3a>
        }
        if (d->sne.name[8] != ' ') {
    80202aca:	00894703          	lbu	a4,8(s2)
    80202ace:	02000793          	li	a5,32
    80202ad2:	00f70963          	beq	a4,a5,80202ae4 <read_entry_name+0x72>
            buffer[i++] = '.';
    80202ad6:	00a487b3          	add	a5,s1,a0
    80202ada:	02e00713          	li	a4,46
    80202ade:	00e78023          	sb	a4,0(a5)
    80202ae2:	2505                	addiw	a0,a0,1
        }
        for (int j = 8; j < CHAR_SHORT_NAME; j++, i++) {
    80202ae4:	00890793          	addi	a5,s2,8
    80202ae8:	94aa                	add	s1,s1,a0
    80202aea:	092d                	addi	s2,s2,11
            if (d->sne.name[j] == ' ') { break; }
    80202aec:	02000693          	li	a3,32
    80202af0:	0007c703          	lbu	a4,0(a5)
    80202af4:	00d70863          	beq	a4,a3,80202b04 <read_entry_name+0x92>
            buffer[i] = d->sne.name[j];
    80202af8:	00e48023          	sb	a4,0(s1)
        for (int j = 8; j < CHAR_SHORT_NAME; j++, i++) {
    80202afc:	0785                	addi	a5,a5,1
    80202afe:	0485                	addi	s1,s1,1
    80202b00:	ff2798e3          	bne	a5,s2,80202af0 <read_entry_name+0x7e>
        }
    }
}
    80202b04:	70a2                	ld	ra,40(sp)
    80202b06:	7402                	ld	s0,32(sp)
    80202b08:	64e2                	ld	s1,24(sp)
    80202b0a:	6942                	ld	s2,16(sp)
    80202b0c:	6145                	addi	sp,sp,48
    80202b0e:	8082                	ret
        memmove(temp, d->lne.name1, sizeof(temp));
    80202b10:	4629                	li	a2,10
    80202b12:	0585                	addi	a1,a1,1
    80202b14:	fd040513          	addi	a0,s0,-48
    80202b18:	ffffe097          	auipc	ra,0xffffe
    80202b1c:	2bc080e7          	jalr	700(ra) # 80200dd4 <memmove>
        snstr(buffer, temp, NELEM(d->lne.name1));
    80202b20:	4615                	li	a2,5
    80202b22:	fd040593          	addi	a1,s0,-48
    80202b26:	8526                	mv	a0,s1
    80202b28:	ffffe097          	auipc	ra,0xffffe
    80202b2c:	432080e7          	jalr	1074(ra) # 80200f5a <snstr>
        snstr(buffer, d->lne.name2, NELEM(d->lne.name2));
    80202b30:	4619                	li	a2,6
    80202b32:	00e90593          	addi	a1,s2,14
    80202b36:	00548513          	addi	a0,s1,5
    80202b3a:	ffffe097          	auipc	ra,0xffffe
    80202b3e:	420080e7          	jalr	1056(ra) # 80200f5a <snstr>
        snstr(buffer, d->lne.name3, NELEM(d->lne.name3));
    80202b42:	4609                	li	a2,2
    80202b44:	01c90593          	addi	a1,s2,28
    80202b48:	00b48513          	addi	a0,s1,11
    80202b4c:	ffffe097          	auipc	ra,0xffffe
    80202b50:	40e080e7          	jalr	1038(ra) # 80200f5a <snstr>
    80202b54:	bf45                	j	80202b04 <read_entry_name+0x92>
        for (i = 0; d->sne.name[i] != ' ' && i < 8; i++) {
    80202b56:	4501                	li	a0,0
    80202b58:	bf8d                	j	80202aca <read_entry_name+0x58>

0000000080202b5a <fat32_init>:
{
    80202b5a:	7139                	addi	sp,sp,-64
    80202b5c:	fc06                	sd	ra,56(sp)
    80202b5e:	f822                	sd	s0,48(sp)
    80202b60:	f426                	sd	s1,40(sp)
    80202b62:	f04a                	sd	s2,32(sp)
    80202b64:	ec4e                	sd	s3,24(sp)
    80202b66:	e852                	sd	s4,16(sp)
    80202b68:	e456                	sd	s5,8(sp)
    80202b6a:	e05a                	sd	s6,0(sp)
    80202b6c:	0080                	addi	s0,sp,64
    80202b6e:	892a                	mv	s2,a0
    if(!debug_output)
    80202b70:	00569797          	auipc	a5,0x569
    80202b74:	0d87a783          	lw	a5,216(a5) # 8076bc48 <debug_output>
    80202b78:	1c078063          	beqz	a5,80202d38 <fat32_init+0x1de>
    if(self_fs->valid)return -1;
    80202b7c:	00492783          	lw	a5,4(s2)
    80202b80:	26079763          	bnez	a5,80202dee <fat32_init+0x294>
    else self_fs->valid = 1;
    80202b84:	4785                	li	a5,1
    80202b86:	00f92223          	sw	a5,4(s2)
    self_fs->disk_init(self_fs->image);
    80202b8a:	6795                	lui	a5,0x5
    80202b8c:	97ca                	add	a5,a5,s2
    80202b8e:	9a07b783          	ld	a5,-1632(a5) # 49a0 <_entry-0x801fb660>
    80202b92:	00893503          	ld	a0,8(s2)
    80202b96:	9782                	jalr	a5
    struct buf *b = bread(self_fs->devno, 0);
    80202b98:	4581                	li	a1,0
    80202b9a:	00092503          	lw	a0,0(s2)
    80202b9e:	ffffd097          	auipc	ra,0xffffd
    80202ba2:	55a080e7          	jalr	1370(ra) # 802000f8 <bread>
    80202ba6:	84aa                	mv	s1,a0
    if (strncmp((char const*)(b->data + 82), "FAT32", 5))
    80202ba8:	4615                	li	a2,5
    80202baa:	0000e597          	auipc	a1,0xe
    80202bae:	6d658593          	addi	a1,a1,1750 # 80211280 <rodata_start+0x280>
    80202bb2:	0aa50513          	addi	a0,a0,170
    80202bb6:	ffffe097          	auipc	ra,0xffffe
    80202bba:	29a080e7          	jalr	666(ra) # 80200e50 <strncmp>
    80202bbe:	8b2a                	mv	s6,a0
    80202bc0:	18051a63          	bnez	a0,80202d54 <fat32_init+0x1fa>
    memmove(&self_fs->fat.bpb.byts_per_sec, b->data + 11, 2);            // avoid misaligned load on k210
    80202bc4:	4609                	li	a2,2
    80202bc6:	06348593          	addi	a1,s1,99
    80202bca:	02090513          	addi	a0,s2,32
    80202bce:	ffffe097          	auipc	ra,0xffffe
    80202bd2:	206080e7          	jalr	518(ra) # 80200dd4 <memmove>
    self_fs->fat.bpb.sec_per_clus = *(b->data + 13);
    80202bd6:	0654c683          	lbu	a3,101(s1)
    80202bda:	02d90123          	sb	a3,34(s2)
    self_fs->fat.bpb.rsvd_sec_cnt = *(uint16 *)(b->data + 14);
    80202bde:	0664d603          	lhu	a2,102(s1)
    80202be2:	02c91223          	sh	a2,36(s2)
    self_fs->fat.bpb.fat_cnt = *(b->data + 16);
    80202be6:	0684c703          	lbu	a4,104(s1)
    80202bea:	02e90323          	sb	a4,38(s2)
    self_fs->fat.bpb.hidd_sec = *(uint32 *)(b->data + 28);
    80202bee:	58fc                	lw	a5,116(s1)
    80202bf0:	02f92423          	sw	a5,40(s2)
    self_fs->fat.bpb.tot_sec = *(uint32 *)(b->data + 32);
    80202bf4:	5cbc                	lw	a5,120(s1)
    80202bf6:	02f92623          	sw	a5,44(s2)
    self_fs->fat.bpb.fat_sz = *(uint32 *)(b->data + 36);
    80202bfa:	5cec                	lw	a1,124(s1)
    80202bfc:	02b92823          	sw	a1,48(s2)
    self_fs->fat.bpb.root_clus = *(uint32 *)(b->data + 44);
    80202c00:	0844a503          	lw	a0,132(s1)
    80202c04:	02a92a23          	sw	a0,52(s2)
    self_fs->fat.first_data_sec = self_fs->fat.bpb.rsvd_sec_cnt + self_fs->fat.bpb.fat_cnt * self_fs->fat.bpb.fat_sz;
    80202c08:	02b7073b          	mulw	a4,a4,a1
    80202c0c:	9f31                	addw	a4,a4,a2
    80202c0e:	00e92823          	sw	a4,16(s2)
    self_fs->fat.data_sec_cnt = self_fs->fat.bpb.tot_sec - self_fs->fat.first_data_sec;
    80202c12:	9f99                	subw	a5,a5,a4
    80202c14:	00f92a23          	sw	a5,20(s2)
    self_fs->fat.data_clus_cnt = self_fs->fat.data_sec_cnt / self_fs->fat.bpb.sec_per_clus;
    80202c18:	02d7d7bb          	divuw	a5,a5,a3
    80202c1c:	00f92c23          	sw	a5,24(s2)
    self_fs->fat.byts_per_clus = self_fs->fat.bpb.sec_per_clus * self_fs->fat.bpb.byts_per_sec;
    80202c20:	02095783          	lhu	a5,32(s2)
    80202c24:	02d787bb          	mulw	a5,a5,a3
    80202c28:	00f92e23          	sw	a5,28(s2)
    brelse(b);
    80202c2c:	8526                	mv	a0,s1
    80202c2e:	ffffd097          	auipc	ra,0xffffd
    80202c32:	636080e7          	jalr	1590(ra) # 80200264 <brelse>
    if(!debug_output){
    80202c36:	00569797          	auipc	a5,0x569
    80202c3a:	0127a783          	lw	a5,18(a5) # 8076bc48 <debug_output>
    80202c3e:	12078363          	beqz	a5,80202d64 <fat32_init+0x20a>
    debug_output = 1;
    80202c42:	4785                	li	a5,1
    80202c44:	00569717          	auipc	a4,0x569
    80202c48:	00f72223          	sw	a5,4(a4) # 8076bc48 <debug_output>
    if (BSIZE != self_fs->fat.bpb.byts_per_sec) 
    80202c4c:	02095703          	lhu	a4,32(s2)
    80202c50:	20000793          	li	a5,512
    80202c54:	18f71563          	bne	a4,a5,80202dde <fat32_init+0x284>
    initlock(&self_fs->ecache.lock, "self_fs->ecache");
    80202c58:	0000e597          	auipc	a1,0xe
    80202c5c:	71858593          	addi	a1,a1,1816 # 80211370 <rodata_start+0x370>
    80202c60:	03890513          	addi	a0,s2,56
    80202c64:	00004097          	auipc	ra,0x4
    80202c68:	ec6080e7          	jalr	-314(ra) # 80206b2a <initlock>
    memset(&self_fs->root, 0, sizeof(self_fs->root));
    80202c6c:	6495                	lui	s1,0x5
    80202c6e:	83048993          	addi	s3,s1,-2000 # 4830 <_entry-0x801fb7d0>
    80202c72:	99ca                	add	s3,s3,s2
    80202c74:	17000613          	li	a2,368
    80202c78:	4581                	li	a1,0
    80202c7a:	854e                	mv	a0,s3
    80202c7c:	ffffe097          	auipc	ra,0xffffe
    80202c80:	0f8080e7          	jalr	248(ra) # 80200d74 <memset>
    initsleeplock(&self_fs->root.lock, "entry");
    80202c84:	97048513          	addi	a0,s1,-1680
    80202c88:	0000e597          	auipc	a1,0xe
    80202c8c:	6f858593          	addi	a1,a1,1784 # 80211380 <rodata_start+0x380>
    80202c90:	954a                	add	a0,a0,s2
    80202c92:	00004097          	auipc	ra,0x4
    80202c96:	f78080e7          	jalr	-136(ra) # 80206c0a <initsleeplock>
    self_fs->root.attribute = (ATTR_DIRECTORY | ATTR_SYSTEM);
    80202c9a:	009907b3          	add	a5,s2,s1
    80202c9e:	4751                	li	a4,20
    80202ca0:	92e78823          	sb	a4,-1744(a5)
    self_fs->root.first_clus = self_fs->root.cur_clus = self_fs->fat.bpb.root_clus;
    80202ca4:	03492703          	lw	a4,52(s2)
    80202ca8:	92e7ae23          	sw	a4,-1732(a5)
    80202cac:	92e7aa23          	sw	a4,-1740(a5)
    self_fs->root.valid = 1;
    80202cb0:	4705                	li	a4,1
    80202cb2:	94e79323          	sh	a4,-1722(a5)
    self_fs->root.prev = &self_fs->root;
    80202cb6:	9737b423          	sd	s3,-1688(a5)
    self_fs->root.next = &self_fs->root;
    80202cba:	9737b023          	sd	s3,-1696(a5)
    self_fs->root.dev = self_fs->devno;
    80202cbe:	00092703          	lw	a4,0(s2)
    80202cc2:	94e78223          	sb	a4,-1724(a5)
    self_fs->root.parent = 0;
    80202cc6:	9407bc23          	sd	zero,-1704(a5)
    for(struct dirent *de = self_fs->ecache.entries; de < self_fs->ecache.entries + ENTRY_CACHE_NUM; de++) {
    80202cca:	05090493          	addi	s1,s2,80
    80202cce:	8ace                	mv	s5,s3
        de->next = self_fs->root.next;
    80202cd0:	6795                	lui	a5,0x5
    80202cd2:	993e                	add	s2,s2,a5
        initsleeplock(&de->lock, "entry");
    80202cd4:	0000ea17          	auipc	s4,0xe
    80202cd8:	6aca0a13          	addi	s4,s4,1708 # 80211380 <rodata_start+0x380>
        de->dev = 0;
    80202cdc:	10048a23          	sb	zero,276(s1)
        de->valid = 0;
    80202ce0:	10049b23          	sh	zero,278(s1)
        de->ref = 0;
    80202ce4:	1004ac23          	sw	zero,280(s1)
        de->dirty = 0;
    80202ce8:	10048aa3          	sb	zero,277(s1)
        de->mnt = 0;
    80202cec:	1004ae23          	sw	zero,284(s1)
        de->parent = 0;
    80202cf0:	1204b423          	sd	zero,296(s1)
        de->next = self_fs->root.next;
    80202cf4:	96093783          	ld	a5,-1696(s2)
    80202cf8:	12f4b823          	sd	a5,304(s1)
        de->prev = &self_fs->root;
    80202cfc:	1334bc23          	sd	s3,312(s1)
        initsleeplock(&de->lock, "entry");
    80202d00:	85d2                	mv	a1,s4
    80202d02:	14048513          	addi	a0,s1,320
    80202d06:	00004097          	auipc	ra,0x4
    80202d0a:	f04080e7          	jalr	-252(ra) # 80206c0a <initsleeplock>
        self_fs->root.next->prev = de;
    80202d0e:	96093783          	ld	a5,-1696(s2)
    80202d12:	1297bc23          	sd	s1,312(a5) # 5138 <_entry-0x801faec8>
        self_fs->root.next = de;
    80202d16:	96993023          	sd	s1,-1696(s2)
    for(struct dirent *de = self_fs->ecache.entries; de < self_fs->ecache.entries + ENTRY_CACHE_NUM; de++) {
    80202d1a:	17048493          	addi	s1,s1,368
    80202d1e:	fb549fe3          	bne	s1,s5,80202cdc <fat32_init+0x182>
}
    80202d22:	855a                	mv	a0,s6
    80202d24:	70e2                	ld	ra,56(sp)
    80202d26:	7442                	ld	s0,48(sp)
    80202d28:	74a2                	ld	s1,40(sp)
    80202d2a:	7902                	ld	s2,32(sp)
    80202d2c:	69e2                	ld	s3,24(sp)
    80202d2e:	6a42                	ld	s4,16(sp)
    80202d30:	6aa2                	ld	s5,8(sp)
    80202d32:	6b02                	ld	s6,0(sp)
    80202d34:	6121                	addi	sp,sp,64
    80202d36:	8082                	ret
      printf("[fat32_init]hart %d enter!\n",cpuid());
    80202d38:	00007097          	auipc	ra,0x7
    80202d3c:	dc6080e7          	jalr	-570(ra) # 80209afe <cpuid>
    80202d40:	85aa                	mv	a1,a0
    80202d42:	0000e517          	auipc	a0,0xe
    80202d46:	51e50513          	addi	a0,a0,1310 # 80211260 <rodata_start+0x260>
    80202d4a:	00004097          	auipc	ra,0x4
    80202d4e:	1ce080e7          	jalr	462(ra) # 80206f18 <printf>
    80202d52:	b52d                	j	80202b7c <fat32_init+0x22>
        panic("not FAT32 volume");
    80202d54:	0000e517          	auipc	a0,0xe
    80202d58:	53450513          	addi	a0,a0,1332 # 80211288 <rodata_start+0x288>
    80202d5c:	00004097          	auipc	ra,0x4
    80202d60:	172080e7          	jalr	370(ra) # 80206ece <panic>
      printf("[FAT32 init]byts_per_sec: %d\n", self_fs->fat.bpb.byts_per_sec);
    80202d64:	02095583          	lhu	a1,32(s2)
    80202d68:	0000e517          	auipc	a0,0xe
    80202d6c:	53850513          	addi	a0,a0,1336 # 802112a0 <rodata_start+0x2a0>
    80202d70:	00004097          	auipc	ra,0x4
    80202d74:	1a8080e7          	jalr	424(ra) # 80206f18 <printf>
      printf("[FAT32 init]root_clus: %d\n", self_fs->fat.bpb.root_clus);
    80202d78:	03492583          	lw	a1,52(s2)
    80202d7c:	0000e517          	auipc	a0,0xe
    80202d80:	54450513          	addi	a0,a0,1348 # 802112c0 <rodata_start+0x2c0>
    80202d84:	00004097          	auipc	ra,0x4
    80202d88:	194080e7          	jalr	404(ra) # 80206f18 <printf>
      printf("[FAT32 init]sec_per_clus: %d\n", self_fs->fat.bpb.sec_per_clus);
    80202d8c:	02294583          	lbu	a1,34(s2)
    80202d90:	0000e517          	auipc	a0,0xe
    80202d94:	55050513          	addi	a0,a0,1360 # 802112e0 <rodata_start+0x2e0>
    80202d98:	00004097          	auipc	ra,0x4
    80202d9c:	180080e7          	jalr	384(ra) # 80206f18 <printf>
      printf("[FAT32 init]fat_cnt: %d\n", self_fs->fat.bpb.fat_cnt);
    80202da0:	02694583          	lbu	a1,38(s2)
    80202da4:	0000e517          	auipc	a0,0xe
    80202da8:	55c50513          	addi	a0,a0,1372 # 80211300 <rodata_start+0x300>
    80202dac:	00004097          	auipc	ra,0x4
    80202db0:	16c080e7          	jalr	364(ra) # 80206f18 <printf>
      printf("[FAT32 init]fat_sz: %d\n", self_fs->fat.bpb.fat_sz);
    80202db4:	03092583          	lw	a1,48(s2)
    80202db8:	0000e517          	auipc	a0,0xe
    80202dbc:	56850513          	addi	a0,a0,1384 # 80211320 <rodata_start+0x320>
    80202dc0:	00004097          	auipc	ra,0x4
    80202dc4:	158080e7          	jalr	344(ra) # 80206f18 <printf>
      printf("[FAT32 init]first_data_sec: %d\n", self_fs->fat.first_data_sec);
    80202dc8:	01092583          	lw	a1,16(s2)
    80202dcc:	0000e517          	auipc	a0,0xe
    80202dd0:	56c50513          	addi	a0,a0,1388 # 80211338 <rodata_start+0x338>
    80202dd4:	00004097          	auipc	ra,0x4
    80202dd8:	144080e7          	jalr	324(ra) # 80206f18 <printf>
    80202ddc:	b59d                	j	80202c42 <fat32_init+0xe8>
        panic("byts_per_sec != BSIZE");
    80202dde:	0000e517          	auipc	a0,0xe
    80202de2:	57a50513          	addi	a0,a0,1402 # 80211358 <rodata_start+0x358>
    80202de6:	00004097          	auipc	ra,0x4
    80202dea:	0e8080e7          	jalr	232(ra) # 80206ece <panic>
    if(self_fs->valid)return -1;
    80202dee:	5b7d                	li	s6,-1
    80202df0:	bf0d                	j	80202d22 <fat32_init+0x1c8>

0000000080202df2 <fs_init>:
{
    80202df2:	1141                	addi	sp,sp,-16
    80202df4:	e406                	sd	ra,8(sp)
    80202df6:	e022                	sd	s0,0(sp)
    80202df8:	0800                	addi	s0,sp,16
    debug_output = 0;
    80202dfa:	00569797          	auipc	a5,0x569
    80202dfe:	e407a723          	sw	zero,-434(a5) # 8076bc48 <debug_output>
    for(int i=0;i<FSNUM;i++){
    80202e02:	00552797          	auipc	a5,0x552
    80202e06:	dae78793          	addi	a5,a5,-594 # 80754bb0 <FatFs>
    80202e0a:	4701                	li	a4,0
    80202e0c:	6695                	lui	a3,0x5
    80202e0e:	9b868693          	addi	a3,a3,-1608 # 49b8 <_entry-0x801fb648>
    80202e12:	4615                	li	a2,5
      FatFs[i].valid = 0;
    80202e14:	0007a223          	sw	zero,4(a5)
      FatFs[i].devno = i;
    80202e18:	c398                	sw	a4,0(a5)
      FatFs[i].image = NULL;
    80202e1a:	0007b423          	sd	zero,8(a5)
    for(int i=0;i<FSNUM;i++){
    80202e1e:	2705                	addiw	a4,a4,1
    80202e20:	97b6                	add	a5,a5,a3
    80202e22:	fec719e3          	bne	a4,a2,80202e14 <fs_init+0x22>
    rootfs = FatFs;
    80202e26:	00552517          	auipc	a0,0x552
    80202e2a:	d8a50513          	addi	a0,a0,-630 # 80754bb0 <FatFs>
    80202e2e:	00569797          	auipc	a5,0x569
    80202e32:	e2a7b123          	sd	a0,-478(a5) # 8076bc50 <rootfs>
    FatFs[0].image = NULL;
    80202e36:	00053423          	sd	zero,8(a0)
    FatFs[0].disk_init = (void*)disk_init;
    80202e3a:	00557797          	auipc	a5,0x557
    80202e3e:	d7678793          	addi	a5,a5,-650 # 80759bb0 <FatFs+0x5000>
    80202e42:	ffffe717          	auipc	a4,0xffffe
    80202e46:	ec470713          	addi	a4,a4,-316 # 80200d06 <disk_init>
    80202e4a:	9ae7b023          	sd	a4,-1632(a5)
    FatFs[0].disk_read = (void*)vdisk_read;
    80202e4e:	ffffe717          	auipc	a4,0xffffe
    80202e52:	ee670713          	addi	a4,a4,-282 # 80200d34 <vdisk_read>
    80202e56:	9ae7b423          	sd	a4,-1624(a5)
    FatFs[0].disk_write = (void*)vdisk_write;
    80202e5a:	ffffe717          	auipc	a4,0xffffe
    80202e5e:	ef470713          	addi	a4,a4,-268 # 80200d4e <vdisk_write>
    80202e62:	9ae7b823          	sd	a4,-1616(a5)
    FatFs[0].devno = 0;
    80202e66:	00052023          	sw	zero,0(a0)
    return fat32_init(&FatFs[0]);
    80202e6a:	00000097          	auipc	ra,0x0
    80202e6e:	cf0080e7          	jalr	-784(ra) # 80202b5a <fat32_init>
}
    80202e72:	60a2                	ld	ra,8(sp)
    80202e74:	6402                	ld	s0,0(sp)
    80202e76:	0141                	addi	sp,sp,16
    80202e78:	8082                	ret

0000000080202e7a <allocFatFs>:
int allocFatFs(){
    80202e7a:	1141                	addi	sp,sp,-16
    80202e7c:	e422                	sd	s0,8(sp)
    80202e7e:	0800                	addi	s0,sp,16
   for(int i=0;i<FSNUM;i++){
    80202e80:	00552797          	auipc	a5,0x552
    80202e84:	d3478793          	addi	a5,a5,-716 # 80754bb4 <FatFs+0x4>
    80202e88:	4501                	li	a0,0
    80202e8a:	6695                	lui	a3,0x5
    80202e8c:	9b868693          	addi	a3,a3,-1608 # 49b8 <_entry-0x801fb648>
    80202e90:	4615                	li	a2,5
     if(!FatFs[i].valid){
    80202e92:	4398                	lw	a4,0(a5)
    80202e94:	c711                	beqz	a4,80202ea0 <allocFatFs+0x26>
   for(int i=0;i<FSNUM;i++){
    80202e96:	2505                	addiw	a0,a0,1
    80202e98:	97b6                	add	a5,a5,a3
    80202e9a:	fec51ce3          	bne	a0,a2,80202e92 <allocFatFs+0x18>
   return -1;
    80202e9e:	557d                	li	a0,-1
}
    80202ea0:	6422                	ld	s0,8(sp)
    80202ea2:	0141                	addi	sp,sp,16
    80202ea4:	8082                	ret

0000000080202ea6 <fat32_img>:
struct fs* fat32_img(struct dirent* img){
    80202ea6:	1101                	addi	sp,sp,-32
    80202ea8:	ec06                	sd	ra,24(sp)
    80202eaa:	e822                	sd	s0,16(sp)
    80202eac:	e426                	sd	s1,8(sp)
    80202eae:	1000                	addi	s0,sp,32
    80202eb0:	84aa                	mv	s1,a0
   int devno = allocFatFs();
    80202eb2:	00000097          	auipc	ra,0x0
    80202eb6:	fc8080e7          	jalr	-56(ra) # 80202e7a <allocFatFs>
   if(devno<0)return NULL;
    80202eba:	04054d63          	bltz	a0,80202f14 <fat32_img+0x6e>
   FatFs[devno].image = img;
    80202ebe:	6695                	lui	a3,0x5
    80202ec0:	9b868793          	addi	a5,a3,-1608 # 49b8 <_entry-0x801fb648>
    80202ec4:	02f507b3          	mul	a5,a0,a5
    80202ec8:	00552717          	auipc	a4,0x552
    80202ecc:	ce870713          	addi	a4,a4,-792 # 80754bb0 <FatFs>
    80202ed0:	00f70533          	add	a0,a4,a5
    80202ed4:	e504                	sd	s1,8(a0)
   FatFs[devno].disk_init = image_init;
    80202ed6:	00a687b3          	add	a5,a3,a0
    80202eda:	ffffe717          	auipc	a4,0xffffe
    80202ede:	1d470713          	addi	a4,a4,468 # 802010ae <image_init>
    80202ee2:	9ae7b023          	sd	a4,-1632(a5)
   FatFs[devno].disk_read = image_read;
    80202ee6:	ffffe717          	auipc	a4,0xffffe
    80202eea:	1fe70713          	addi	a4,a4,510 # 802010e4 <image_read>
    80202eee:	9ae7b423          	sd	a4,-1624(a5)
   FatFs[devno].disk_write = image_write;
    80202ef2:	ffffe717          	auipc	a4,0xffffe
    80202ef6:	25870713          	addi	a4,a4,600 # 8020114a <image_write>
    80202efa:	9ae7b823          	sd	a4,-1616(a5)
   fat32_init(FatFs+devno);
    80202efe:	84aa                	mv	s1,a0
    80202f00:	00000097          	auipc	ra,0x0
    80202f04:	c5a080e7          	jalr	-934(ra) # 80202b5a <fat32_init>
}
    80202f08:	8526                	mv	a0,s1
    80202f0a:	60e2                	ld	ra,24(sp)
    80202f0c:	6442                	ld	s0,16(sp)
    80202f0e:	64a2                	ld	s1,8(sp)
    80202f10:	6105                	addi	sp,sp,32
    80202f12:	8082                	ret
   if(devno<0)return NULL;
    80202f14:	4481                	li	s1,0
    80202f16:	bfcd                	j	80202f08 <fat32_img+0x62>

0000000080202f18 <eread>:
    if (off > entry->file_size || off + n < off || (entry->attribute & ATTR_DIRECTORY)) {
    80202f18:	10852783          	lw	a5,264(a0)
    80202f1c:	10d7e763          	bltu	a5,a3,8020302a <eread+0x112>
{
    80202f20:	7159                	addi	sp,sp,-112
    80202f22:	f486                	sd	ra,104(sp)
    80202f24:	f0a2                	sd	s0,96(sp)
    80202f26:	eca6                	sd	s1,88(sp)
    80202f28:	e8ca                	sd	s2,80(sp)
    80202f2a:	e4ce                	sd	s3,72(sp)
    80202f2c:	e0d2                	sd	s4,64(sp)
    80202f2e:	fc56                	sd	s5,56(sp)
    80202f30:	f85a                	sd	s6,48(sp)
    80202f32:	f45e                	sd	s7,40(sp)
    80202f34:	f062                	sd	s8,32(sp)
    80202f36:	ec66                	sd	s9,24(sp)
    80202f38:	e86a                	sd	s10,16(sp)
    80202f3a:	e46e                	sd	s11,8(sp)
    80202f3c:	1880                	addi	s0,sp,112
    80202f3e:	8a2a                	mv	s4,a0
    80202f40:	8c2e                	mv	s8,a1
    80202f42:	8ab2                	mv	s5,a2
    80202f44:	8936                	mv	s2,a3
    80202f46:	8b3a                	mv	s6,a4
    if (off > entry->file_size || off + n < off || (entry->attribute & ATTR_DIRECTORY)) {
    80202f48:	9eb9                	addw	a3,a3,a4
        return 0;
    80202f4a:	4501                	li	a0,0
    if (off > entry->file_size || off + n < off || (entry->attribute & ATTR_DIRECTORY)) {
    80202f4c:	0b26ee63          	bltu	a3,s2,80203008 <eread+0xf0>
    80202f50:	100a4703          	lbu	a4,256(s4)
    80202f54:	8b41                	andi	a4,a4,16
    80202f56:	eb4d                	bnez	a4,80203008 <eread+0xf0>
    if (off + n > entry->file_size) {
    80202f58:	00d7f463          	bgeu	a5,a3,80202f60 <eread+0x48>
        n = entry->file_size - off;
    80202f5c:	41278b3b          	subw	s6,a5,s2
    for (tot = 0; entry->cur_clus < FAT32_EOC && tot < n; tot += m, off += m, dst += m) {
    80202f60:	10ca2703          	lw	a4,268(s4)
    80202f64:	100007b7          	lui	a5,0x10000
    80202f68:	17dd                	addi	a5,a5,-9
    80202f6a:	08e7ec63          	bltu	a5,a4,80203002 <eread+0xea>
    80202f6e:	0a0b0c63          	beqz	s6,80203026 <eread+0x10e>
    struct fs * self_fs = &FatFs[entry->dev];
    80202f72:	114a4c83          	lbu	s9,276(s4)
    80202f76:	6b95                	lui	s7,0x5
    80202f78:	9b8b8b93          	addi	s7,s7,-1608 # 49b8 <_entry-0x801fb648>
    80202f7c:	037c8bb3          	mul	s7,s9,s7
    80202f80:	00552797          	auipc	a5,0x552
    80202f84:	c3078793          	addi	a5,a5,-976 # 80754bb0 <FatFs>
    80202f88:	9bbe                	add	s7,s7,a5
    for (tot = 0; entry->cur_clus < FAT32_EOC && tot < n; tot += m, off += m, dst += m) {
    80202f8a:	4981                	li	s3,0
        m = self_fs->fat.byts_per_clus - off % self_fs->fat.byts_per_clus;
    80202f8c:	8cde                	mv	s9,s7
    for (tot = 0; entry->cur_clus < FAT32_EOC && tot < n; tot += m, off += m, dst += m) {
    80202f8e:	10000d37          	lui	s10,0x10000
    80202f92:	1d5d                	addi	s10,s10,-9
    80202f94:	a835                	j	80202fd0 <eread+0xb8>
    80202f96:	00048d9b          	sext.w	s11,s1
        if (rw_clus(self_fs, entry->cur_clus, 0, user_dst, dst, off % self_fs->fat.byts_per_clus, m) != m) {
    80202f9a:	886e                	mv	a6,s11
    80202f9c:	8756                	mv	a4,s5
    80202f9e:	86e2                	mv	a3,s8
    80202fa0:	4601                	li	a2,0
    80202fa2:	10ca2583          	lw	a1,268(s4)
    80202fa6:	855e                	mv	a0,s7
    80202fa8:	00000097          	auipc	ra,0x0
    80202fac:	812080e7          	jalr	-2030(ra) # 802027ba <rw_clus>
    80202fb0:	2501                	sext.w	a0,a0
    80202fb2:	04ad9963          	bne	s11,a0,80203004 <eread+0xec>
    for (tot = 0; entry->cur_clus < FAT32_EOC && tot < n; tot += m, off += m, dst += m) {
    80202fb6:	013489bb          	addw	s3,s1,s3
    80202fba:	0124893b          	addw	s2,s1,s2
    80202fbe:	1482                	slli	s1,s1,0x20
    80202fc0:	9081                	srli	s1,s1,0x20
    80202fc2:	9aa6                	add	s5,s5,s1
    80202fc4:	10ca2783          	lw	a5,268(s4)
    80202fc8:	02fd6e63          	bltu	s10,a5,80203004 <eread+0xec>
    80202fcc:	0369fc63          	bgeu	s3,s6,80203004 <eread+0xec>
        reloc_clus(self_fs, entry, off, 0);
    80202fd0:	4681                	li	a3,0
    80202fd2:	864a                	mv	a2,s2
    80202fd4:	85d2                	mv	a1,s4
    80202fd6:	855e                	mv	a0,s7
    80202fd8:	fffff097          	auipc	ra,0xfffff
    80202fdc:	6d2080e7          	jalr	1746(ra) # 802026aa <reloc_clus>
        m = self_fs->fat.byts_per_clus - off % self_fs->fat.byts_per_clus;
    80202fe0:	01cca703          	lw	a4,28(s9)
    80202fe4:	02e976bb          	remuw	a3,s2,a4
    80202fe8:	0006879b          	sext.w	a5,a3
    80202fec:	9f15                	subw	a4,a4,a3
        if (n - tot < m) {
    80202fee:	413b06bb          	subw	a3,s6,s3
    80202ff2:	84b6                	mv	s1,a3
    80202ff4:	2681                	sext.w	a3,a3
    80202ff6:	0007061b          	sext.w	a2,a4
    80202ffa:	f8d67ee3          	bgeu	a2,a3,80202f96 <eread+0x7e>
    80202ffe:	84ba                	mv	s1,a4
    80203000:	bf59                	j	80202f96 <eread+0x7e>
    for (tot = 0; entry->cur_clus < FAT32_EOC && tot < n; tot += m, off += m, dst += m) {
    80203002:	4981                	li	s3,0
    return tot;
    80203004:	0009851b          	sext.w	a0,s3
}
    80203008:	70a6                	ld	ra,104(sp)
    8020300a:	7406                	ld	s0,96(sp)
    8020300c:	64e6                	ld	s1,88(sp)
    8020300e:	6946                	ld	s2,80(sp)
    80203010:	69a6                	ld	s3,72(sp)
    80203012:	6a06                	ld	s4,64(sp)
    80203014:	7ae2                	ld	s5,56(sp)
    80203016:	7b42                	ld	s6,48(sp)
    80203018:	7ba2                	ld	s7,40(sp)
    8020301a:	7c02                	ld	s8,32(sp)
    8020301c:	6ce2                	ld	s9,24(sp)
    8020301e:	6d42                	ld	s10,16(sp)
    80203020:	6da2                	ld	s11,8(sp)
    80203022:	6165                	addi	sp,sp,112
    80203024:	8082                	ret
    for (tot = 0; entry->cur_clus < FAT32_EOC && tot < n; tot += m, off += m, dst += m) {
    80203026:	89da                	mv	s3,s6
    80203028:	bff1                	j	80203004 <eread+0xec>
        return 0;
    8020302a:	4501                	li	a0,0
}
    8020302c:	8082                	ret

000000008020302e <ewrite>:
{
    8020302e:	711d                	addi	sp,sp,-96
    80203030:	ec86                	sd	ra,88(sp)
    80203032:	e8a2                	sd	s0,80(sp)
    80203034:	e4a6                	sd	s1,72(sp)
    80203036:	e0ca                	sd	s2,64(sp)
    80203038:	fc4e                	sd	s3,56(sp)
    8020303a:	f852                	sd	s4,48(sp)
    8020303c:	f456                	sd	s5,40(sp)
    8020303e:	f05a                	sd	s6,32(sp)
    80203040:	ec5e                	sd	s7,24(sp)
    80203042:	e862                	sd	s8,16(sp)
    80203044:	e466                	sd	s9,8(sp)
    80203046:	e06a                	sd	s10,0(sp)
    80203048:	1080                	addi	s0,sp,96
    8020304a:	8c2e                	mv	s8,a1
    struct fs * self_fs = &FatFs[entry->dev];
    8020304c:	11454583          	lbu	a1,276(a0)
    80203050:	6b15                	lui	s6,0x5
    80203052:	9b8b0b13          	addi	s6,s6,-1608 # 49b8 <_entry-0x801fb648>
    80203056:	03658b33          	mul	s6,a1,s6
    8020305a:	00552797          	auipc	a5,0x552
    8020305e:	b5678793          	addi	a5,a5,-1194 # 80754bb0 <FatFs>
    80203062:	9b3e                	add	s6,s6,a5
    if (off > entry->file_size || off + n < off || (uint64)off + n > 0xffffffff
    80203064:	10852783          	lw	a5,264(a0)
    80203068:	0ed7e063          	bltu	a5,a3,80203148 <ewrite+0x11a>
    8020306c:	8aaa                	mv	s5,a0
    8020306e:	8a32                	mv	s4,a2
    80203070:	8936                	mv	s2,a3
    80203072:	8bba                	mv	s7,a4
    80203074:	00058c9b          	sext.w	s9,a1
    80203078:	00e687bb          	addw	a5,a3,a4
    8020307c:	0cd7e863          	bltu	a5,a3,8020314c <ewrite+0x11e>
    80203080:	02069793          	slli	a5,a3,0x20
    80203084:	9381                	srli	a5,a5,0x20
    80203086:	1702                	slli	a4,a4,0x20
    80203088:	9301                	srli	a4,a4,0x20
    8020308a:	97ba                	add	a5,a5,a4
    8020308c:	577d                	li	a4,-1
    8020308e:	9301                	srli	a4,a4,0x20
    80203090:	0cf76063          	bltu	a4,a5,80203150 <ewrite+0x122>
        || (entry->attribute & ATTR_READ_ONLY)) {
    80203094:	10054783          	lbu	a5,256(a0)
    80203098:	8b85                	andi	a5,a5,1
    8020309a:	efcd                	bnez	a5,80203154 <ewrite+0x126>
    if (entry->first_clus == 0) {   // so file_size if 0 too, which requests off == 0
    8020309c:	10452783          	lw	a5,260(a0)
    802030a0:	cf99                	beqz	a5,802030be <ewrite+0x90>
    for (tot = 0; tot < n; tot += m, off += m, src += m) {
    802030a2:	0a0b8163          	beqz	s7,80203144 <ewrite+0x116>
    802030a6:	4981                	li	s3,0
        m = self_fs->fat.byts_per_clus - off % self_fs->fat.byts_per_clus;
    802030a8:	6795                	lui	a5,0x5
    802030aa:	9b878793          	addi	a5,a5,-1608 # 49b8 <_entry-0x801fb648>
    802030ae:	02fc8cb3          	mul	s9,s9,a5
    802030b2:	00552797          	auipc	a5,0x552
    802030b6:	afe78793          	addi	a5,a5,-1282 # 80754bb0 <FatFs>
    802030ba:	9cbe                	add	s9,s9,a5
    802030bc:	a891                	j	80203110 <ewrite+0xe2>
        entry->cur_clus = entry->first_clus = alloc_clus(self_fs, entry->dev);
    802030be:	855a                	mv	a0,s6
    802030c0:	fffff097          	auipc	ra,0xfffff
    802030c4:	44a080e7          	jalr	1098(ra) # 8020250a <alloc_clus>
    802030c8:	2501                	sext.w	a0,a0
    802030ca:	10aaa223          	sw	a0,260(s5)
    802030ce:	10aaa623          	sw	a0,268(s5)
        entry->clus_cnt = 0;
    802030d2:	100aa823          	sw	zero,272(s5)
        entry->dirty = 1;
    802030d6:	4785                	li	a5,1
    802030d8:	10fa8aa3          	sb	a5,277(s5)
    802030dc:	b7d9                	j	802030a2 <ewrite+0x74>
    802030de:	00048d1b          	sext.w	s10,s1
        if (rw_clus(self_fs, entry->cur_clus, 1, user_src, src, off % self_fs->fat.byts_per_clus, m) != m) {
    802030e2:	886a                	mv	a6,s10
    802030e4:	8752                	mv	a4,s4
    802030e6:	86e2                	mv	a3,s8
    802030e8:	4605                	li	a2,1
    802030ea:	10caa583          	lw	a1,268(s5)
    802030ee:	855a                	mv	a0,s6
    802030f0:	fffff097          	auipc	ra,0xfffff
    802030f4:	6ca080e7          	jalr	1738(ra) # 802027ba <rw_clus>
    802030f8:	2501                	sext.w	a0,a0
    802030fa:	04ad1f63          	bne	s10,a0,80203158 <ewrite+0x12a>
    for (tot = 0; tot < n; tot += m, off += m, src += m) {
    802030fe:	013489bb          	addw	s3,s1,s3
    80203102:	0124893b          	addw	s2,s1,s2
    80203106:	1482                	slli	s1,s1,0x20
    80203108:	9081                	srli	s1,s1,0x20
    8020310a:	9a26                	add	s4,s4,s1
    8020310c:	0579f663          	bgeu	s3,s7,80203158 <ewrite+0x12a>
        reloc_clus(self_fs, entry, off, 1);
    80203110:	4685                	li	a3,1
    80203112:	864a                	mv	a2,s2
    80203114:	85d6                	mv	a1,s5
    80203116:	855a                	mv	a0,s6
    80203118:	fffff097          	auipc	ra,0xfffff
    8020311c:	592080e7          	jalr	1426(ra) # 802026aa <reloc_clus>
        m = self_fs->fat.byts_per_clus - off % self_fs->fat.byts_per_clus;
    80203120:	01cca803          	lw	a6,28(s9)
    80203124:	0309773b          	remuw	a4,s2,a6
    80203128:	0007079b          	sext.w	a5,a4
    8020312c:	40e8083b          	subw	a6,a6,a4
        if (n - tot < m) {
    80203130:	413b873b          	subw	a4,s7,s3
    80203134:	84ba                	mv	s1,a4
    80203136:	2701                	sext.w	a4,a4
    80203138:	0008069b          	sext.w	a3,a6
    8020313c:	fae6f1e3          	bgeu	a3,a4,802030de <ewrite+0xb0>
    80203140:	84c2                	mv	s1,a6
    80203142:	bf71                	j	802030de <ewrite+0xb0>
    for (tot = 0; tot < n; tot += m, off += m, src += m) {
    80203144:	89de                	mv	s3,s7
    80203146:	a015                	j	8020316a <ewrite+0x13c>
        return -1;
    80203148:	557d                	li	a0,-1
    8020314a:	a015                	j	8020316e <ewrite+0x140>
    8020314c:	557d                	li	a0,-1
    8020314e:	a005                	j	8020316e <ewrite+0x140>
    80203150:	557d                	li	a0,-1
    80203152:	a831                	j	8020316e <ewrite+0x140>
    80203154:	557d                	li	a0,-1
    80203156:	a821                	j	8020316e <ewrite+0x140>
        if(off > entry->file_size) {
    80203158:	108aa783          	lw	a5,264(s5)
    8020315c:	0127f763          	bgeu	a5,s2,8020316a <ewrite+0x13c>
            entry->file_size = off;
    80203160:	112aa423          	sw	s2,264(s5)
            entry->dirty = 1;
    80203164:	4785                	li	a5,1
    80203166:	10fa8aa3          	sb	a5,277(s5)
    return tot;
    8020316a:	0009851b          	sext.w	a0,s3
}
    8020316e:	60e6                	ld	ra,88(sp)
    80203170:	6446                	ld	s0,80(sp)
    80203172:	64a6                	ld	s1,72(sp)
    80203174:	6906                	ld	s2,64(sp)
    80203176:	79e2                	ld	s3,56(sp)
    80203178:	7a42                	ld	s4,48(sp)
    8020317a:	7aa2                	ld	s5,40(sp)
    8020317c:	7b02                	ld	s6,32(sp)
    8020317e:	6be2                	ld	s7,24(sp)
    80203180:	6c42                	ld	s8,16(sp)
    80203182:	6ca2                	ld	s9,8(sp)
    80203184:	6d02                	ld	s10,0(sp)
    80203186:	6125                	addi	sp,sp,96
    80203188:	8082                	ret

000000008020318a <formatname>:
{
    8020318a:	7179                	addi	sp,sp,-48
    8020318c:	f406                	sd	ra,40(sp)
    8020318e:	f022                	sd	s0,32(sp)
    80203190:	ec26                	sd	s1,24(sp)
    80203192:	e84a                	sd	s2,16(sp)
    80203194:	e44e                	sd	s3,8(sp)
    80203196:	e052                	sd	s4,0(sp)
    80203198:	1800                	addi	s0,sp,48
    8020319a:	84aa                	mv	s1,a0
    while (*name == ' ' || *name == '.') { name++; }
    8020319c:	02000793          	li	a5,32
    802031a0:	02e00713          	li	a4,46
    802031a4:	a011                	j	802031a8 <formatname+0x1e>
    802031a6:	0485                	addi	s1,s1,1
    802031a8:	0004c583          	lbu	a1,0(s1)
    802031ac:	fef58de3          	beq	a1,a5,802031a6 <formatname+0x1c>
    802031b0:	fee58be3          	beq	a1,a4,802031a6 <formatname+0x1c>
    for (p = name; *p; p++) {
    802031b4:	c1b9                	beqz	a1,802031fa <formatname+0x70>
    802031b6:	8926                	mv	s2,s1
        if (c < 0x20 || strchr(illegal, c)) {
    802031b8:	49fd                	li	s3,31
    802031ba:	00512a17          	auipc	s4,0x512
    802031be:	e4ea0a13          	addi	s4,s4,-434 # 80715008 <illegal.2320>
    802031c2:	02b9fe63          	bgeu	s3,a1,802031fe <formatname+0x74>
    802031c6:	8552                	mv	a0,s4
    802031c8:	ffffe097          	auipc	ra,0xffffe
    802031cc:	e16080e7          	jalr	-490(ra) # 80200fde <strchr>
    802031d0:	e121                	bnez	a0,80203210 <formatname+0x86>
    for (p = name; *p; p++) {
    802031d2:	0905                	addi	s2,s2,1
    802031d4:	00094583          	lbu	a1,0(s2)
    802031d8:	f5ed                	bnez	a1,802031c2 <formatname+0x38>
        if (*p != ' ') {
    802031da:	02000693          	li	a3,32
    802031de:	874a                	mv	a4,s2
    while (p-- > name) {
    802031e0:	0124fb63          	bgeu	s1,s2,802031f6 <formatname+0x6c>
        if (*p != ' ') {
    802031e4:	197d                	addi	s2,s2,-1
    802031e6:	00094783          	lbu	a5,0(s2)
    802031ea:	fed78ae3          	beq	a5,a3,802031de <formatname+0x54>
            p[1] = '\0';
    802031ee:	00070023          	sb	zero,0(a4)
            break;
    802031f2:	8526                	mv	a0,s1
    802031f4:	a031                	j	80203200 <formatname+0x76>
    802031f6:	8526                	mv	a0,s1
    802031f8:	a021                	j	80203200 <formatname+0x76>
    for (p = name; *p; p++) {
    802031fa:	8526                	mv	a0,s1
    802031fc:	a011                	j	80203200 <formatname+0x76>
            return 0;
    802031fe:	4501                	li	a0,0
}
    80203200:	70a2                	ld	ra,40(sp)
    80203202:	7402                	ld	s0,32(sp)
    80203204:	64e2                	ld	s1,24(sp)
    80203206:	6942                	ld	s2,16(sp)
    80203208:	69a2                	ld	s3,8(sp)
    8020320a:	6a02                	ld	s4,0(sp)
    8020320c:	6145                	addi	sp,sp,48
    8020320e:	8082                	ret
            return 0;
    80203210:	4501                	li	a0,0
    80203212:	b7fd                	j	80203200 <formatname+0x76>

0000000080203214 <cal_checksum>:
{
    80203214:	1141                	addi	sp,sp,-16
    80203216:	e422                	sd	s0,8(sp)
    80203218:	0800                	addi	s0,sp,16
    8020321a:	87aa                	mv	a5,a0
    for (int i = CHAR_SHORT_NAME; i != 0; i--) {
    8020321c:	00b50613          	addi	a2,a0,11
    uint8 sum = 0;
    80203220:	4501                	li	a0,0
        sum = ((sum & 1) ? 0x80 : 0) + (sum >> 1) + *shortname++;
    80203222:	0075171b          	slliw	a4,a0,0x7
    80203226:	0785                	addi	a5,a5,1
    80203228:	0015551b          	srliw	a0,a0,0x1
    8020322c:	fff7c683          	lbu	a3,-1(a5)
    80203230:	9d35                	addw	a0,a0,a3
    80203232:	953a                	add	a0,a0,a4
    80203234:	0ff57513          	andi	a0,a0,255
    for (int i = CHAR_SHORT_NAME; i != 0; i--) {
    80203238:	fef615e3          	bne	a2,a5,80203222 <cal_checksum+0xe>
}
    8020323c:	6422                	ld	s0,8(sp)
    8020323e:	0141                	addi	sp,sp,16
    80203240:	8082                	ret

0000000080203242 <emake>:
{
    80203242:	7171                	addi	sp,sp,-176
    80203244:	f506                	sd	ra,168(sp)
    80203246:	f122                	sd	s0,160(sp)
    80203248:	ed26                	sd	s1,152(sp)
    8020324a:	e94a                	sd	s2,144(sp)
    8020324c:	e54e                	sd	s3,136(sp)
    8020324e:	e152                	sd	s4,128(sp)
    80203250:	fcd6                	sd	s5,120(sp)
    80203252:	f8da                	sd	s6,112(sp)
    80203254:	f4de                	sd	s7,104(sp)
    80203256:	f0e2                	sd	s8,96(sp)
    80203258:	ece6                	sd	s9,88(sp)
    8020325a:	e8ea                	sd	s10,80(sp)
    8020325c:	e4ee                	sd	s11,72(sp)
    8020325e:	1900                	addi	s0,sp,176
    80203260:	89aa                	mv	s3,a0
    80203262:	8cae                	mv	s9,a1
    80203264:	8c32                	mv	s8,a2
    if(dp->mnt) dp = &(FatFs[dp->dev].root);
    80203266:	11c52783          	lw	a5,284(a0)
    8020326a:	c385                	beqz	a5,8020328a <emake+0x48>
    8020326c:	11454983          	lbu	s3,276(a0)
    80203270:	6795                	lui	a5,0x5
    80203272:	9b878713          	addi	a4,a5,-1608 # 49b8 <_entry-0x801fb648>
    80203276:	02e989b3          	mul	s3,s3,a4
    8020327a:	83078793          	addi	a5,a5,-2000
    8020327e:	99be                	add	s3,s3,a5
    80203280:	00552797          	auipc	a5,0x552
    80203284:	93078793          	addi	a5,a5,-1744 # 80754bb0 <FatFs>
    80203288:	99be                	add	s3,s3,a5
    struct fs * self_fs = &FatFs[dp->dev];
    8020328a:	1149ca83          	lbu	s5,276(s3)
    8020328e:	6795                	lui	a5,0x5
    80203290:	9b878793          	addi	a5,a5,-1608 # 49b8 <_entry-0x801fb648>
    80203294:	02fa8ab3          	mul	s5,s5,a5
    80203298:	00552797          	auipc	a5,0x552
    8020329c:	91878793          	addi	a5,a5,-1768 # 80754bb0 <FatFs>
    802032a0:	9abe                	add	s5,s5,a5
    if (!(dp->attribute & ATTR_DIRECTORY))
    802032a2:	1009c783          	lbu	a5,256(s3)
    802032a6:	8bc1                	andi	a5,a5,16
    802032a8:	c3cd                	beqz	a5,8020334a <emake+0x108>
    if (off % sizeof(union dentry))
    802032aa:	01fc7793          	andi	a5,s8,31
    802032ae:	e7d5                	bnez	a5,8020335a <emake+0x118>
    memset(&de, 0, sizeof(de));
    802032b0:	02000613          	li	a2,32
    802032b4:	4581                	li	a1,0
    802032b6:	f7040513          	addi	a0,s0,-144
    802032ba:	ffffe097          	auipc	ra,0xffffe
    802032be:	aba080e7          	jalr	-1350(ra) # 80200d74 <memset>
    if (off <= 32) {
    802032c2:	02000793          	li	a5,32
    802032c6:	0b87ee63          	bltu	a5,s8,80203382 <emake+0x140>
        if (off == 0) {
    802032ca:	0a0c1063          	bnez	s8,8020336a <emake+0x128>
            strncpy(de.sne.name, ".          ", sizeof(de.sne.name));
    802032ce:	462d                	li	a2,11
    802032d0:	0000e597          	auipc	a1,0xe
    802032d4:	0e058593          	addi	a1,a1,224 # 802113b0 <rodata_start+0x3b0>
    802032d8:	f7040513          	addi	a0,s0,-144
    802032dc:	ffffe097          	auipc	ra,0xffffe
    802032e0:	bb0080e7          	jalr	-1104(ra) # 80200e8c <strncpy>
        de.sne.attr = ATTR_DIRECTORY;
    802032e4:	47c1                	li	a5,16
    802032e6:	f6f40da3          	sb	a5,-133(s0)
        de.sne.fst_clus_hi = (uint16)(ep->first_clus >> 16);        // first clus high 16 bits
    802032ea:	104ca783          	lw	a5,260(s9)
    802032ee:	0107d71b          	srliw	a4,a5,0x10
    802032f2:	f8e41223          	sh	a4,-124(s0)
        de.sne.fst_clus_lo = (uint16)(ep->first_clus & 0xffff);       // low 16 bits
    802032f6:	f8f41523          	sh	a5,-118(s0)
        de.sne.file_size = 0;                                       // filesize is updated in eupdate()
    802032fa:	f8042623          	sw	zero,-116(s0)
        off = reloc_clus(self_fs, dp, off, 1);
    802032fe:	4685                	li	a3,1
    80203300:	8662                	mv	a2,s8
    80203302:	85ce                	mv	a1,s3
    80203304:	8556                	mv	a0,s5
    80203306:	fffff097          	auipc	ra,0xfffff
    8020330a:	3a4080e7          	jalr	932(ra) # 802026aa <reloc_clus>
        rw_clus(self_fs, dp->cur_clus, 1, 0, (uint64)&de, off, sizeof(de));
    8020330e:	02000813          	li	a6,32
    80203312:	0005079b          	sext.w	a5,a0
    80203316:	f7040713          	addi	a4,s0,-144
    8020331a:	4681                	li	a3,0
    8020331c:	4605                	li	a2,1
    8020331e:	10c9a583          	lw	a1,268(s3)
    80203322:	8556                	mv	a0,s5
    80203324:	fffff097          	auipc	ra,0xfffff
    80203328:	496080e7          	jalr	1174(ra) # 802027ba <rw_clus>
}
    8020332c:	70aa                	ld	ra,168(sp)
    8020332e:	740a                	ld	s0,160(sp)
    80203330:	64ea                	ld	s1,152(sp)
    80203332:	694a                	ld	s2,144(sp)
    80203334:	69aa                	ld	s3,136(sp)
    80203336:	6a0a                	ld	s4,128(sp)
    80203338:	7ae6                	ld	s5,120(sp)
    8020333a:	7b46                	ld	s6,112(sp)
    8020333c:	7ba6                	ld	s7,104(sp)
    8020333e:	7c06                	ld	s8,96(sp)
    80203340:	6ce6                	ld	s9,88(sp)
    80203342:	6d46                	ld	s10,80(sp)
    80203344:	6da6                	ld	s11,72(sp)
    80203346:	614d                	addi	sp,sp,176
    80203348:	8082                	ret
        panic("emake: not dir");
    8020334a:	0000e517          	auipc	a0,0xe
    8020334e:	03e50513          	addi	a0,a0,62 # 80211388 <rodata_start+0x388>
    80203352:	00004097          	auipc	ra,0x4
    80203356:	b7c080e7          	jalr	-1156(ra) # 80206ece <panic>
        panic("emake: not aligned");
    8020335a:	0000e517          	auipc	a0,0xe
    8020335e:	03e50513          	addi	a0,a0,62 # 80211398 <rodata_start+0x398>
    80203362:	00004097          	auipc	ra,0x4
    80203366:	b6c080e7          	jalr	-1172(ra) # 80206ece <panic>
            strncpy(de.sne.name, "..         ", sizeof(de.sne.name));
    8020336a:	462d                	li	a2,11
    8020336c:	0000e597          	auipc	a1,0xe
    80203370:	05458593          	addi	a1,a1,84 # 802113c0 <rodata_start+0x3c0>
    80203374:	f7040513          	addi	a0,s0,-144
    80203378:	ffffe097          	auipc	ra,0xffffe
    8020337c:	b14080e7          	jalr	-1260(ra) # 80200e8c <strncpy>
    80203380:	b795                	j	802032e4 <emake+0xa2>
        int entcnt = (strlen(ep->filename) + CHAR_LONG_NAME - 1) / CHAR_LONG_NAME;   // count of l-n-entries, rounds up
    80203382:	8966                	mv	s2,s9
    80203384:	8566                	mv	a0,s9
    80203386:	ffffe097          	auipc	ra,0xffffe
    8020338a:	b76080e7          	jalr	-1162(ra) # 80200efc <strlen>
    8020338e:	f4a43c23          	sd	a0,-168(s0)
    80203392:	00c5071b          	addiw	a4,a0,12
    80203396:	47b5                	li	a5,13
    80203398:	02f747bb          	divw	a5,a4,a5
    8020339c:	f4f42a23          	sw	a5,-172(s0)
    802033a0:	00078d9b          	sext.w	s11,a5
        memset(shortname, 0, sizeof(shortname));
    802033a4:	4631                	li	a2,12
    802033a6:	4581                	li	a1,0
    802033a8:	f6040513          	addi	a0,s0,-160
    802033ac:	ffffe097          	auipc	ra,0xffffe
    802033b0:	9c8080e7          	jalr	-1592(ra) # 80200d74 <memset>
    for (int j = strlen(name) - 1; j >= 0; j--) {
    802033b4:	8566                	mv	a0,s9
    802033b6:	ffffe097          	auipc	ra,0xffffe
    802033ba:	b46080e7          	jalr	-1210(ra) # 80200efc <strlen>
    802033be:	fff5079b          	addiw	a5,a0,-1
    802033c2:	0207ca63          	bltz	a5,802033f6 <emake+0x1b4>
    802033c6:	97e6                	add	a5,a5,s9
    802033c8:	ffec8693          	addi	a3,s9,-2
    802033cc:	96aa                	add	a3,a3,a0
    802033ce:	fff5071b          	addiw	a4,a0,-1
    802033d2:	1702                	slli	a4,a4,0x20
    802033d4:	9301                	srli	a4,a4,0x20
    802033d6:	8e99                	sub	a3,a3,a4
        if (name[j] == '.') {
    802033d8:	02e00613          	li	a2,46
    802033dc:	8a3e                	mv	s4,a5
    802033de:	0007c703          	lbu	a4,0(a5)
    802033e2:	00c70663          	beq	a4,a2,802033ee <emake+0x1ac>
    for (int j = strlen(name) - 1; j >= 0; j--) {
    802033e6:	17fd                	addi	a5,a5,-1
    802033e8:	fed79ae3          	bne	a5,a3,802033dc <emake+0x19a>
    char c, *p = name;
    802033ec:	8a66                	mv	s4,s9
        shortname[i++] = c;
    802033ee:	4481                	li	s1,0
        if (i == 8 && p) {
    802033f0:	4ba1                	li	s7,8
    while (i < CHAR_SHORT_NAME && (c = *name++)) {
    802033f2:	4d29                	li	s10,10
    802033f4:	a87d                	j	802034b2 <emake+0x270>
    char c, *p = name;
    802033f6:	8a66                	mv	s4,s9
    802033f8:	bfdd                	j	802033ee <emake+0x1ac>
        if (i == 8 && p) {
    802033fa:	220a0363          	beqz	s4,80203620 <emake+0x3de>
            if (p + 1 < name) { break; }            // no '.'
    802033fe:	0a05                	addi	s4,s4,1
    80203400:	096a7063          	bgeu	s4,s6,80203480 <emake+0x23e>
    80203404:	f6040793          	addi	a5,s0,-160
    80203408:	97a6                	add	a5,a5,s1
        shortname[i++] = ' ';
    8020340a:	02000693          	li	a3,32
    while (i < CHAR_SHORT_NAME) {
    8020340e:	4729                	li	a4,10
        shortname[i++] = ' ';
    80203410:	2485                	addiw	s1,s1,1
    80203412:	00d78023          	sb	a3,0(a5)
    while (i < CHAR_SHORT_NAME) {
    80203416:	0785                	addi	a5,a5,1
    80203418:	fe975ce3          	bge	a4,s1,80203410 <emake+0x1ce>
        de.lne.checksum = cal_checksum((uchar *)shortname);
    8020341c:	f6040513          	addi	a0,s0,-160
    80203420:	00000097          	auipc	ra,0x0
    80203424:	df4080e7          	jalr	-524(ra) # 80203214 <cal_checksum>
    80203428:	f6a40ea3          	sb	a0,-131(s0)
        de.lne.attr = ATTR_LONG_NAME;
    8020342c:	47bd                	li	a5,15
    8020342e:	f6f40da3          	sb	a5,-133(s0)
        for (int i = entcnt; i > 0; i--) {
    80203432:	f5843783          	ld	a5,-168(s0)
    80203436:	0ef05a63          	blez	a5,8020352a <emake+0x2e8>
    8020343a:	f5442783          	lw	a5,-172(s0)
    8020343e:	37fd                	addiw	a5,a5,-1
    80203440:	f4f42a23          	sw	a5,-172(s0)
    80203444:	00179b1b          	slliw	s6,a5,0x1
    80203448:	00fb0b3b          	addw	s6,s6,a5
    8020344c:	002b1b1b          	slliw	s6,s6,0x2
    80203450:	00fb0b3b          	addw	s6,s6,a5
    80203454:	9b66                	add	s6,s6,s9
    80203456:	8a6e                	mv	s4,s11
    80203458:	8be2                	mv	s7,s8
            int end = 0;
    8020345a:	4d01                	li	s10,0
                    *w++ = 0xff;            // on k210, unaligned reading is illegal
    8020345c:	597d                	li	s2,-1
                switch (j) {
    8020345e:	44ad                	li	s1,11
    80203460:	a24d                	j	80203602 <emake+0x3c0>
            if (name > p) {                    // last '.'
    80203462:	056a7563          	bgeu	s4,s6,802034ac <emake+0x26a>
                memset(shortname + i, ' ', 8 - i);
    80203466:	4621                	li	a2,8
    80203468:	9e05                	subw	a2,a2,s1
    8020346a:	02000593          	li	a1,32
    8020346e:	f6040793          	addi	a5,s0,-160
    80203472:	00978533          	add	a0,a5,s1
    80203476:	ffffe097          	auipc	ra,0xffffe
    8020347a:	8fe080e7          	jalr	-1794(ra) # 80200d74 <memset>
    while (i < CHAR_SHORT_NAME && (c = *name++)) {
    8020347e:	8a5a                	mv	s4,s6
        shortname[i++] = c;
    80203480:	8b52                	mv	s6,s4
    80203482:	84de                	mv	s1,s7
    80203484:	4a01                	li	s4,0
    80203486:	a02d                	j	802034b0 <emake+0x26e>
            if (strchr(illegal, c) != NULL) {
    80203488:	85ca                	mv	a1,s2
    8020348a:	00513517          	auipc	a0,0x513
    8020348e:	da650513          	addi	a0,a0,-602 # 80716230 <illegal.2336>
    80203492:	ffffe097          	auipc	ra,0xffffe
    80203496:	b4c080e7          	jalr	-1204(ra) # 80200fde <strchr>
    8020349a:	c119                	beqz	a0,802034a0 <emake+0x25e>
                c = '_';
    8020349c:	05f00913          	li	s2,95
        shortname[i++] = c;
    802034a0:	f9040793          	addi	a5,s0,-112
    802034a4:	97a6                	add	a5,a5,s1
    802034a6:	fd278823          	sb	s2,-48(a5)
    802034aa:	2485                	addiw	s1,s1,1
    while (i < CHAR_SHORT_NAME && (c = *name++)) {
    802034ac:	f69d48e3          	blt	s10,s1,8020341c <emake+0x1da>
        shortname[i++] = c;
    802034b0:	895a                	mv	s2,s6
    while (i < CHAR_SHORT_NAME && (c = *name++)) {
    802034b2:	00190b13          	addi	s6,s2,1
    802034b6:	00094903          	lbu	s2,0(s2)
    802034ba:	02090763          	beqz	s2,802034e8 <emake+0x2a6>
        if (i == 8 && p) {
    802034be:	f3748ee3          	beq	s1,s7,802033fa <emake+0x1b8>
        if (c == ' ') { continue; }
    802034c2:	02000793          	li	a5,32
    802034c6:	fef903e3          	beq	s2,a5,802034ac <emake+0x26a>
        if (c == '.') {
    802034ca:	02e00793          	li	a5,46
    802034ce:	f8f90ae3          	beq	s2,a5,80203462 <emake+0x220>
        if (c >= 'a' && c <= 'z') {
    802034d2:	f9f9079b          	addiw	a5,s2,-97
    802034d6:	0ff7f793          	andi	a5,a5,255
    802034da:	4765                	li	a4,25
    802034dc:	faf766e3          	bltu	a4,a5,80203488 <emake+0x246>
            c += 'A' - 'a';
    802034e0:	3901                	addiw	s2,s2,-32
    802034e2:	0ff97913          	andi	s2,s2,255
    802034e6:	bf6d                	j	802034a0 <emake+0x25e>
    while (i < CHAR_SHORT_NAME) {
    802034e8:	47a9                	li	a5,10
    802034ea:	f097dde3          	bge	a5,s1,80203404 <emake+0x1c2>
    802034ee:	b73d                	j	8020341c <emake+0x1da>
                de.lne.order |= LAST_LONG_ENTRY;
    802034f0:	0407e793          	ori	a5,a5,64
    802034f4:	f6f40823          	sb	a5,-144(s0)
    802034f8:	aa19                	j	8020360e <emake+0x3cc>
                    if ((*w++ = *p++) == 0) {
    802034fa:	0005c683          	lbu	a3,0(a1)
    802034fe:	00d78023          	sb	a3,0(a5)
                        end = 1;
    80203502:	0016b693          	seqz	a3,a3
                    *w++ = 0;
    80203506:	000780a3          	sb	zero,1(a5)
    8020350a:	0789                	addi	a5,a5,2
                    if ((*w++ = *p++) == 0) {
    8020350c:	0585                	addi	a1,a1,1
    8020350e:	a075                	j	802035ba <emake+0x378>
    80203510:	020c0c1b          	addiw	s8,s8,32
    80203514:	4781                	li	a5,0
    80203516:	f5843703          	ld	a4,-168(s0)
    8020351a:	00e05663          	blez	a4,80203526 <emake+0x2e4>
    8020351e:	f5442783          	lw	a5,-172(s0)
    80203522:	0057979b          	slliw	a5,a5,0x5
    80203526:	01878c3b          	addw	s8,a5,s8
        memset(&de, 0, sizeof(de));
    8020352a:	02000613          	li	a2,32
    8020352e:	4581                	li	a1,0
    80203530:	f7040513          	addi	a0,s0,-144
    80203534:	ffffe097          	auipc	ra,0xffffe
    80203538:	840080e7          	jalr	-1984(ra) # 80200d74 <memset>
        strncpy(de.sne.name, shortname, sizeof(de.sne.name));
    8020353c:	462d                	li	a2,11
    8020353e:	f6040593          	addi	a1,s0,-160
    80203542:	f7040513          	addi	a0,s0,-144
    80203546:	ffffe097          	auipc	ra,0xffffe
    8020354a:	946080e7          	jalr	-1722(ra) # 80200e8c <strncpy>
        de.sne.attr = ep->attribute;
    8020354e:	100cc783          	lbu	a5,256(s9)
    80203552:	f6f40da3          	sb	a5,-133(s0)
        de.sne.fst_clus_hi = (uint16)(ep->first_clus >> 16);      // first clus high 16 bits
    80203556:	104ca783          	lw	a5,260(s9)
    8020355a:	0107d71b          	srliw	a4,a5,0x10
    8020355e:	f8e41223          	sh	a4,-124(s0)
        de.sne.fst_clus_lo = (uint16)(ep->first_clus & 0xffff);     // low 16 bits
    80203562:	f8f41523          	sh	a5,-118(s0)
        de.sne.file_size = ep->file_size;                         // filesize is updated in eupdate()
    80203566:	108ca783          	lw	a5,264(s9)
    8020356a:	f8f42623          	sw	a5,-116(s0)
        off = reloc_clus(self_fs, dp, off, 1);
    8020356e:	4685                	li	a3,1
    80203570:	8662                	mv	a2,s8
    80203572:	85ce                	mv	a1,s3
    80203574:	8556                	mv	a0,s5
    80203576:	fffff097          	auipc	ra,0xfffff
    8020357a:	134080e7          	jalr	308(ra) # 802026aa <reloc_clus>
        rw_clus(self_fs, dp->cur_clus, 1, 0, (uint64)&de, off, sizeof(de));
    8020357e:	02000813          	li	a6,32
    80203582:	0005079b          	sext.w	a5,a0
    80203586:	f7040713          	addi	a4,s0,-144
    8020358a:	4681                	li	a3,0
    8020358c:	4605                	li	a2,1
    8020358e:	10c9a583          	lw	a1,268(s3)
    80203592:	8556                	mv	a0,s5
    80203594:	fffff097          	auipc	ra,0xfffff
    80203598:	226080e7          	jalr	550(ra) # 802027ba <rw_clus>
}
    8020359c:	bb41                	j	8020332c <emake+0xea>
                    case 5:     w = (uint8 *)de.lne.name2; break;
    8020359e:	f7e40793          	addi	a5,s0,-130
    802035a2:	a019                	j	802035a8 <emake+0x366>
                switch (j) {
    802035a4:	f8c40793          	addi	a5,s0,-116
            for (int j = 1; j <= CHAR_LONG_NAME; j++) {
    802035a8:	2705                	addiw	a4,a4,1
    802035aa:	fff7061b          	addiw	a2,a4,-1
                if (end) {
    802035ae:	d6b1                	beqz	a3,802034fa <emake+0x2b8>
                    *w++ = 0xff;            // on k210, unaligned reading is illegal
    802035b0:	01278023          	sb	s2,0(a5)
                    *w++ = 0xff;
    802035b4:	012780a3          	sb	s2,1(a5)
    802035b8:	0789                	addi	a5,a5,2
                switch (j) {
    802035ba:	fea602e3          	beq	a2,a0,8020359e <emake+0x35c>
    802035be:	fe9603e3          	beq	a2,s1,802035a4 <emake+0x362>
            for (int j = 1; j <= CHAR_LONG_NAME; j++) {
    802035c2:	0007061b          	sext.w	a2,a4
    802035c6:	fec851e3          	bge	a6,a2,802035a8 <emake+0x366>
            uint off2 = reloc_clus(self_fs, dp, off, 1);
    802035ca:	4685                	li	a3,1
    802035cc:	865e                	mv	a2,s7
    802035ce:	85ce                	mv	a1,s3
    802035d0:	8556                	mv	a0,s5
    802035d2:	fffff097          	auipc	ra,0xfffff
    802035d6:	0d8080e7          	jalr	216(ra) # 802026aa <reloc_clus>
            rw_clus(self_fs, dp->cur_clus, 1, 0, (uint64)&de, off2, sizeof(de));
    802035da:	02000813          	li	a6,32
    802035de:	0005079b          	sext.w	a5,a0
    802035e2:	f7040713          	addi	a4,s0,-144
    802035e6:	86ea                	mv	a3,s10
    802035e8:	4605                	li	a2,1
    802035ea:	10c9a583          	lw	a1,268(s3)
    802035ee:	8556                	mv	a0,s5
    802035f0:	fffff097          	auipc	ra,0xfffff
    802035f4:	1ca080e7          	jalr	458(ra) # 802027ba <rw_clus>
            off += sizeof(de);
    802035f8:	020b8b9b          	addiw	s7,s7,32
        for (int i = entcnt; i > 0; i--) {
    802035fc:	1b4d                	addi	s6,s6,-13
    802035fe:	f14059e3          	blez	s4,80203510 <emake+0x2ce>
            if ((de.lne.order = i) == entcnt) {
    80203602:	0ffa7793          	andi	a5,s4,255
    80203606:	eefd85e3          	beq	s11,a5,802034f0 <emake+0x2ae>
    8020360a:	f6f40823          	sb	a5,-144(s0)
            char *p = ep->filename + (i - 1) * CHAR_LONG_NAME;
    8020360e:	3a7d                	addiw	s4,s4,-1
    80203610:	85da                	mv	a1,s6
    80203612:	4709                	li	a4,2
            int end = 0;
    80203614:	86ea                	mv	a3,s10
            uint8 *w = (uint8 *)de.lne.name1;
    80203616:	f7140793          	addi	a5,s0,-143
                switch (j) {
    8020361a:	4515                	li	a0,5
            for (int j = 1; j <= CHAR_LONG_NAME; j++) {
    8020361c:	4835                	li	a6,13
    8020361e:	b771                	j	802035aa <emake+0x368>
        if (c == ' ') { continue; }
    80203620:	02000793          	li	a5,32
    80203624:	eaf913e3          	bne	s2,a5,802034ca <emake+0x288>
    80203628:	b561                	j	802034b0 <emake+0x26e>

000000008020362a <edup>:
{
    8020362a:	1101                	addi	sp,sp,-32
    8020362c:	ec06                	sd	ra,24(sp)
    8020362e:	e822                	sd	s0,16(sp)
    80203630:	e426                	sd	s1,8(sp)
    80203632:	e04a                	sd	s2,0(sp)
    80203634:	1000                	addi	s0,sp,32
    80203636:	84aa                	mv	s1,a0
        acquire(&self_fs->ecache.lock);
    80203638:	11454903          	lbu	s2,276(a0)
    8020363c:	6795                	lui	a5,0x5
    8020363e:	9b878793          	addi	a5,a5,-1608 # 49b8 <_entry-0x801fb648>
    80203642:	02f90933          	mul	s2,s2,a5
    80203646:	00551797          	auipc	a5,0x551
    8020364a:	5a278793          	addi	a5,a5,1442 # 80754be8 <FatFs+0x38>
    8020364e:	993e                	add	s2,s2,a5
    80203650:	854a                	mv	a0,s2
    80203652:	00003097          	auipc	ra,0x3
    80203656:	51c080e7          	jalr	1308(ra) # 80206b6e <acquire>
        entry->ref++;
    8020365a:	1184a783          	lw	a5,280(s1)
    8020365e:	2785                	addiw	a5,a5,1
    80203660:	10f4ac23          	sw	a5,280(s1)
        release(&self_fs->ecache.lock);
    80203664:	854a                	mv	a0,s2
    80203666:	00003097          	auipc	ra,0x3
    8020366a:	55c080e7          	jalr	1372(ra) # 80206bc2 <release>
}
    8020366e:	8526                	mv	a0,s1
    80203670:	60e2                	ld	ra,24(sp)
    80203672:	6442                	ld	s0,16(sp)
    80203674:	64a2                	ld	s1,8(sp)
    80203676:	6902                	ld	s2,0(sp)
    80203678:	6105                	addi	sp,sp,32
    8020367a:	8082                	ret

000000008020367c <eupdate>:
    if (!entry->dirty || entry->valid != 1) { return; }
    8020367c:	11554783          	lbu	a5,277(a0)
    80203680:	10078263          	beqz	a5,80203784 <eupdate+0x108>
{
    80203684:	711d                	addi	sp,sp,-96
    80203686:	ec86                	sd	ra,88(sp)
    80203688:	e8a2                	sd	s0,80(sp)
    8020368a:	e4a6                	sd	s1,72(sp)
    8020368c:	e0ca                	sd	s2,64(sp)
    8020368e:	fc4e                	sd	s3,56(sp)
    80203690:	1080                	addi	s0,sp,96
    80203692:	84aa                	mv	s1,a0
    if (!entry->dirty || entry->valid != 1) { return; }
    80203694:	11651703          	lh	a4,278(a0)
    80203698:	4785                	li	a5,1
    8020369a:	00f70963          	beq	a4,a5,802036ac <eupdate+0x30>
}
    8020369e:	60e6                	ld	ra,88(sp)
    802036a0:	6446                	ld	s0,80(sp)
    802036a2:	64a6                	ld	s1,72(sp)
    802036a4:	6906                	ld	s2,64(sp)
    802036a6:	79e2                	ld	s3,56(sp)
    802036a8:	6125                	addi	sp,sp,96
    802036aa:	8082                	ret
    struct fs * self_fs = &FatFs[entry->dev];
    802036ac:	11454903          	lbu	s2,276(a0)
    802036b0:	6795                	lui	a5,0x5
    802036b2:	9b878793          	addi	a5,a5,-1608 # 49b8 <_entry-0x801fb648>
    802036b6:	02f90933          	mul	s2,s2,a5
    802036ba:	00551797          	auipc	a5,0x551
    802036be:	4f678793          	addi	a5,a5,1270 # 80754bb0 <FatFs>
    802036c2:	993e                	add	s2,s2,a5
    uint entcnt = 0;
    802036c4:	fc042623          	sw	zero,-52(s0)
    uint32 off = reloc_clus(self_fs, entry->parent, entry->off, 0);
    802036c8:	4681                	li	a3,0
    802036ca:	12052603          	lw	a2,288(a0)
    802036ce:	12853583          	ld	a1,296(a0)
    802036d2:	854a                	mv	a0,s2
    802036d4:	fffff097          	auipc	ra,0xfffff
    802036d8:	fd6080e7          	jalr	-42(ra) # 802026aa <reloc_clus>
    rw_clus(self_fs, entry->parent->cur_clus, 0, 0, (uint64) &entcnt, off, 1);
    802036dc:	1284b583          	ld	a1,296(s1)
    802036e0:	4805                	li	a6,1
    802036e2:	0005079b          	sext.w	a5,a0
    802036e6:	fcc40713          	addi	a4,s0,-52
    802036ea:	4681                	li	a3,0
    802036ec:	4601                	li	a2,0
    802036ee:	10c5a583          	lw	a1,268(a1)
    802036f2:	854a                	mv	a0,s2
    802036f4:	fffff097          	auipc	ra,0xfffff
    802036f8:	0c6080e7          	jalr	198(ra) # 802027ba <rw_clus>
    entcnt &= ~LAST_LONG_ENTRY;
    802036fc:	fcc42603          	lw	a2,-52(s0)
    80203700:	fbf67613          	andi	a2,a2,-65
    80203704:	fcc42623          	sw	a2,-52(s0)
    off = reloc_clus(self_fs, entry->parent, entry->off + (entcnt << 5), 0);
    80203708:	0056161b          	slliw	a2,a2,0x5
    8020370c:	1204a783          	lw	a5,288(s1)
    80203710:	4681                	li	a3,0
    80203712:	9e3d                	addw	a2,a2,a5
    80203714:	1284b583          	ld	a1,296(s1)
    80203718:	854a                	mv	a0,s2
    8020371a:	fffff097          	auipc	ra,0xfffff
    8020371e:	f90080e7          	jalr	-112(ra) # 802026aa <reloc_clus>
    80203722:	0005099b          	sext.w	s3,a0
    rw_clus(self_fs, entry->parent->cur_clus, 0, 0, (uint64)&de, off, sizeof(de));
    80203726:	1284b583          	ld	a1,296(s1)
    8020372a:	02000813          	li	a6,32
    8020372e:	87ce                	mv	a5,s3
    80203730:	fa840713          	addi	a4,s0,-88
    80203734:	4681                	li	a3,0
    80203736:	4601                	li	a2,0
    80203738:	10c5a583          	lw	a1,268(a1)
    8020373c:	854a                	mv	a0,s2
    8020373e:	fffff097          	auipc	ra,0xfffff
    80203742:	07c080e7          	jalr	124(ra) # 802027ba <rw_clus>
    de.sne.fst_clus_hi = (uint16)(entry->first_clus >> 16);
    80203746:	1044a783          	lw	a5,260(s1)
    8020374a:	0107d71b          	srliw	a4,a5,0x10
    8020374e:	fae41e23          	sh	a4,-68(s0)
    de.sne.fst_clus_lo = (uint16)(entry->first_clus & 0xffff);
    80203752:	fcf41123          	sh	a5,-62(s0)
    de.sne.file_size = entry->file_size;
    80203756:	1084a783          	lw	a5,264(s1)
    8020375a:	fcf42223          	sw	a5,-60(s0)
    rw_clus(self_fs, entry->parent->cur_clus, 1, 0, (uint64)&de, off, sizeof(de));
    8020375e:	1284b583          	ld	a1,296(s1)
    80203762:	02000813          	li	a6,32
    80203766:	87ce                	mv	a5,s3
    80203768:	fa840713          	addi	a4,s0,-88
    8020376c:	4681                	li	a3,0
    8020376e:	4605                	li	a2,1
    80203770:	10c5a583          	lw	a1,268(a1)
    80203774:	854a                	mv	a0,s2
    80203776:	fffff097          	auipc	ra,0xfffff
    8020377a:	044080e7          	jalr	68(ra) # 802027ba <rw_clus>
    entry->dirty = 0;
    8020377e:	10048aa3          	sb	zero,277(s1)
    80203782:	bf31                	j	8020369e <eupdate+0x22>
    80203784:	8082                	ret

0000000080203786 <eremove>:
    if (entry->valid != 1) { return; }
    80203786:	11651703          	lh	a4,278(a0)
    8020378a:	4785                	li	a5,1
    8020378c:	00f70363          	beq	a4,a5,80203792 <eremove+0xc>
    80203790:	8082                	ret
{
    80203792:	715d                	addi	sp,sp,-80
    80203794:	e486                	sd	ra,72(sp)
    80203796:	e0a2                	sd	s0,64(sp)
    80203798:	fc26                	sd	s1,56(sp)
    8020379a:	f84a                	sd	s2,48(sp)
    8020379c:	f44e                	sd	s3,40(sp)
    8020379e:	f052                	sd	s4,32(sp)
    802037a0:	ec56                	sd	s5,24(sp)
    802037a2:	0880                	addi	s0,sp,80
    802037a4:	89aa                	mv	s3,a0
    struct fs * self_fs = &FatFs[entry->dev];
    802037a6:	11454a83          	lbu	s5,276(a0)
    802037aa:	6795                	lui	a5,0x5
    802037ac:	9b878793          	addi	a5,a5,-1608 # 49b8 <_entry-0x801fb648>
    802037b0:	02fa8ab3          	mul	s5,s5,a5
    802037b4:	00551797          	auipc	a5,0x551
    802037b8:	3fc78793          	addi	a5,a5,1020 # 80754bb0 <FatFs>
    802037bc:	9abe                	add	s5,s5,a5
    uint entcnt = 0;
    802037be:	fa042e23          	sw	zero,-68(s0)
    uint32 off = entry->off;
    802037c2:	12052a03          	lw	s4,288(a0)
    uint32 off2 = reloc_clus(self_fs, entry->parent, off, 0);
    802037c6:	4681                	li	a3,0
    802037c8:	8652                	mv	a2,s4
    802037ca:	12853583          	ld	a1,296(a0)
    802037ce:	8556                	mv	a0,s5
    802037d0:	fffff097          	auipc	ra,0xfffff
    802037d4:	eda080e7          	jalr	-294(ra) # 802026aa <reloc_clus>
    802037d8:	0005049b          	sext.w	s1,a0
    rw_clus(self_fs, entry->parent->cur_clus, 0, 0, (uint64) &entcnt, off2, 1);
    802037dc:	1289b583          	ld	a1,296(s3)
    802037e0:	4805                	li	a6,1
    802037e2:	87a6                	mv	a5,s1
    802037e4:	fbc40713          	addi	a4,s0,-68
    802037e8:	4681                	li	a3,0
    802037ea:	4601                	li	a2,0
    802037ec:	10c5a583          	lw	a1,268(a1)
    802037f0:	8556                	mv	a0,s5
    802037f2:	fffff097          	auipc	ra,0xfffff
    802037f6:	fc8080e7          	jalr	-56(ra) # 802027ba <rw_clus>
    entcnt &= ~LAST_LONG_ENTRY;
    802037fa:	fbc42783          	lw	a5,-68(s0)
    802037fe:	fbf7f793          	andi	a5,a5,-65
    80203802:	faf42e23          	sw	a5,-68(s0)
    uint8 flag = EMPTY_ENTRY;
    80203806:	5795                	li	a5,-27
    80203808:	faf40da3          	sb	a5,-69(s0)
    for (int i = 0; i <= entcnt; i++) {
    8020380c:	4901                	li	s2,0
        rw_clus(self_fs, entry->parent->cur_clus, 1, 0, (uint64) &flag, off2, 1);
    8020380e:	1289b583          	ld	a1,296(s3)
    80203812:	4805                	li	a6,1
    80203814:	87a6                	mv	a5,s1
    80203816:	fbb40713          	addi	a4,s0,-69
    8020381a:	4681                	li	a3,0
    8020381c:	4605                	li	a2,1
    8020381e:	10c5a583          	lw	a1,268(a1)
    80203822:	8556                	mv	a0,s5
    80203824:	fffff097          	auipc	ra,0xfffff
    80203828:	f96080e7          	jalr	-106(ra) # 802027ba <rw_clus>
        off += 32;
    8020382c:	020a0a1b          	addiw	s4,s4,32
        off2 = reloc_clus(self_fs, entry->parent, off, 0);
    80203830:	4681                	li	a3,0
    80203832:	8652                	mv	a2,s4
    80203834:	1289b583          	ld	a1,296(s3)
    80203838:	8556                	mv	a0,s5
    8020383a:	fffff097          	auipc	ra,0xfffff
    8020383e:	e70080e7          	jalr	-400(ra) # 802026aa <reloc_clus>
    80203842:	0005049b          	sext.w	s1,a0
    for (int i = 0; i <= entcnt; i++) {
    80203846:	0019079b          	addiw	a5,s2,1
    8020384a:	0007891b          	sext.w	s2,a5
    8020384e:	fbc42703          	lw	a4,-68(s0)
    80203852:	fb277ee3          	bgeu	a4,s2,8020380e <eremove+0x88>
    entry->valid = -1;
    80203856:	57fd                	li	a5,-1
    80203858:	10f99b23          	sh	a5,278(s3)
}
    8020385c:	60a6                	ld	ra,72(sp)
    8020385e:	6406                	ld	s0,64(sp)
    80203860:	74e2                	ld	s1,56(sp)
    80203862:	7942                	ld	s2,48(sp)
    80203864:	79a2                	ld	s3,40(sp)
    80203866:	7a02                	ld	s4,32(sp)
    80203868:	6ae2                	ld	s5,24(sp)
    8020386a:	6161                	addi	sp,sp,80
    8020386c:	8082                	ret

000000008020386e <etrunc>:
{
    8020386e:	7139                	addi	sp,sp,-64
    80203870:	fc06                	sd	ra,56(sp)
    80203872:	f822                	sd	s0,48(sp)
    80203874:	f426                	sd	s1,40(sp)
    80203876:	f04a                	sd	s2,32(sp)
    80203878:	ec4e                	sd	s3,24(sp)
    8020387a:	e852                	sd	s4,16(sp)
    8020387c:	e456                	sd	s5,8(sp)
    8020387e:	0080                	addi	s0,sp,64
    80203880:	8aaa                	mv	s5,a0
    struct fs * self_fs = &FatFs[entry->dev];
    80203882:	11454903          	lbu	s2,276(a0)
    80203886:	6795                	lui	a5,0x5
    80203888:	9b878793          	addi	a5,a5,-1608 # 49b8 <_entry-0x801fb648>
    8020388c:	02f90933          	mul	s2,s2,a5
    80203890:	00551797          	auipc	a5,0x551
    80203894:	32078793          	addi	a5,a5,800 # 80754bb0 <FatFs>
    80203898:	993e                	add	s2,s2,a5
    for (uint32 clus = entry->first_clus; clus >= 2 && clus < FAT32_EOC; ) {
    8020389a:	10452483          	lw	s1,260(a0)
    8020389e:	ffe4871b          	addiw	a4,s1,-2
    802038a2:	100007b7          	lui	a5,0x10000
    802038a6:	17d5                	addi	a5,a5,-11
    802038a8:	02e7e863          	bltu	a5,a4,802038d8 <etrunc+0x6a>
    802038ac:	8a3e                	mv	s4,a5
        uint32 next = read_fat(self_fs, clus);
    802038ae:	0004899b          	sext.w	s3,s1
    802038b2:	85a6                	mv	a1,s1
    802038b4:	854a                	mv	a0,s2
    802038b6:	fffff097          	auipc	ra,0xfffff
    802038ba:	bec080e7          	jalr	-1044(ra) # 802024a2 <read_fat>
    802038be:	0005049b          	sext.w	s1,a0
    write_fat(self_fs, cluster, 0);
    802038c2:	4601                	li	a2,0
    802038c4:	85ce                	mv	a1,s3
    802038c6:	854a                	mv	a0,s2
    802038c8:	fffff097          	auipc	ra,0xfffff
    802038cc:	d68080e7          	jalr	-664(ra) # 80202630 <write_fat>
    for (uint32 clus = entry->first_clus; clus >= 2 && clus < FAT32_EOC; ) {
    802038d0:	ffe4879b          	addiw	a5,s1,-2
    802038d4:	fcfa7de3          	bgeu	s4,a5,802038ae <etrunc+0x40>
    entry->file_size = 0;
    802038d8:	100aa423          	sw	zero,264(s5)
    entry->first_clus = 0;
    802038dc:	100aa223          	sw	zero,260(s5)
    entry->dirty = 1;
    802038e0:	4785                	li	a5,1
    802038e2:	10fa8aa3          	sb	a5,277(s5)
}
    802038e6:	70e2                	ld	ra,56(sp)
    802038e8:	7442                	ld	s0,48(sp)
    802038ea:	74a2                	ld	s1,40(sp)
    802038ec:	7902                	ld	s2,32(sp)
    802038ee:	69e2                	ld	s3,24(sp)
    802038f0:	6a42                	ld	s4,16(sp)
    802038f2:	6aa2                	ld	s5,8(sp)
    802038f4:	6121                	addi	sp,sp,64
    802038f6:	8082                	ret

00000000802038f8 <elock>:
{
    802038f8:	1141                	addi	sp,sp,-16
    802038fa:	e406                	sd	ra,8(sp)
    802038fc:	e022                	sd	s0,0(sp)
    802038fe:	0800                	addi	s0,sp,16
    if (entry == 0 || entry->ref < 1)
    80203900:	cd19                	beqz	a0,8020391e <elock+0x26>
    80203902:	11852783          	lw	a5,280(a0)
    80203906:	00f05c63          	blez	a5,8020391e <elock+0x26>
    acquiresleep(&entry->lock);
    8020390a:	14050513          	addi	a0,a0,320
    8020390e:	00003097          	auipc	ra,0x3
    80203912:	336080e7          	jalr	822(ra) # 80206c44 <acquiresleep>
}
    80203916:	60a2                	ld	ra,8(sp)
    80203918:	6402                	ld	s0,0(sp)
    8020391a:	0141                	addi	sp,sp,16
    8020391c:	8082                	ret
        panic("elock");
    8020391e:	0000e517          	auipc	a0,0xe
    80203922:	ab250513          	addi	a0,a0,-1358 # 802113d0 <rodata_start+0x3d0>
    80203926:	00003097          	auipc	ra,0x3
    8020392a:	5a8080e7          	jalr	1448(ra) # 80206ece <panic>

000000008020392e <eunlock>:
{
    8020392e:	1101                	addi	sp,sp,-32
    80203930:	ec06                	sd	ra,24(sp)
    80203932:	e822                	sd	s0,16(sp)
    80203934:	e426                	sd	s1,8(sp)
    80203936:	e04a                	sd	s2,0(sp)
    80203938:	1000                	addi	s0,sp,32
    if (entry == 0 || !holdingsleep(&entry->lock) || entry->ref < 1)
    8020393a:	c90d                	beqz	a0,8020396c <eunlock+0x3e>
    8020393c:	84aa                	mv	s1,a0
    8020393e:	14050913          	addi	s2,a0,320
    80203942:	854a                	mv	a0,s2
    80203944:	00003097          	auipc	ra,0x3
    80203948:	38e080e7          	jalr	910(ra) # 80206cd2 <holdingsleep>
    8020394c:	c105                	beqz	a0,8020396c <eunlock+0x3e>
    8020394e:	1184a783          	lw	a5,280(s1)
    80203952:	00f05d63          	blez	a5,8020396c <eunlock+0x3e>
    releasesleep(&entry->lock);
    80203956:	854a                	mv	a0,s2
    80203958:	00003097          	auipc	ra,0x3
    8020395c:	336080e7          	jalr	822(ra) # 80206c8e <releasesleep>
}
    80203960:	60e2                	ld	ra,24(sp)
    80203962:	6442                	ld	s0,16(sp)
    80203964:	64a2                	ld	s1,8(sp)
    80203966:	6902                	ld	s2,0(sp)
    80203968:	6105                	addi	sp,sp,32
    8020396a:	8082                	ret
        panic("eunlock");
    8020396c:	0000e517          	auipc	a0,0xe
    80203970:	a6c50513          	addi	a0,a0,-1428 # 802113d8 <rodata_start+0x3d8>
    80203974:	00003097          	auipc	ra,0x3
    80203978:	55a080e7          	jalr	1370(ra) # 80206ece <panic>

000000008020397c <eput>:
{
    8020397c:	7139                	addi	sp,sp,-64
    8020397e:	fc06                	sd	ra,56(sp)
    80203980:	f822                	sd	s0,48(sp)
    80203982:	f426                	sd	s1,40(sp)
    80203984:	f04a                	sd	s2,32(sp)
    80203986:	ec4e                	sd	s3,24(sp)
    80203988:	e852                	sd	s4,16(sp)
    8020398a:	e456                	sd	s5,8(sp)
    8020398c:	e05a                	sd	s6,0(sp)
    8020398e:	0080                	addi	s0,sp,64
    80203990:	892a                	mv	s2,a0
    struct fs *self_fs = &FatFs[entry->dev];
    80203992:	11454483          	lbu	s1,276(a0)
    80203996:	00048b1b          	sext.w	s6,s1
    acquire(&self_fs->ecache.lock);
    8020399a:	6a15                	lui	s4,0x5
    8020399c:	9b8a0793          	addi	a5,s4,-1608 # 49b8 <_entry-0x801fb648>
    802039a0:	02f484b3          	mul	s1,s1,a5
    802039a4:	03848993          	addi	s3,s1,56
    802039a8:	00551a97          	auipc	s5,0x551
    802039ac:	208a8a93          	addi	s5,s5,520 # 80754bb0 <FatFs>
    802039b0:	99d6                	add	s3,s3,s5
    802039b2:	854e                	mv	a0,s3
    802039b4:	00003097          	auipc	ra,0x3
    802039b8:	1ba080e7          	jalr	442(ra) # 80206b6e <acquire>
    if (entry != &self_fs->root && entry->valid != 0 && entry->ref == 1) {
    802039bc:	830a0a13          	addi	s4,s4,-2000
    802039c0:	94d2                	add	s1,s1,s4
    802039c2:	94d6                	add	s1,s1,s5
    802039c4:	01248a63          	beq	s1,s2,802039d8 <eput+0x5c>
    802039c8:	11691783          	lh	a5,278(s2)
    802039cc:	c791                	beqz	a5,802039d8 <eput+0x5c>
    802039ce:	11892703          	lw	a4,280(s2)
    802039d2:	4785                	li	a5,1
    802039d4:	02f70663          	beq	a4,a5,80203a00 <eput+0x84>
    entry->ref--;
    802039d8:	11892783          	lw	a5,280(s2)
    802039dc:	37fd                	addiw	a5,a5,-1
    802039de:	10f92c23          	sw	a5,280(s2)
    release(&self_fs->ecache.lock);
    802039e2:	854e                	mv	a0,s3
    802039e4:	00003097          	auipc	ra,0x3
    802039e8:	1de080e7          	jalr	478(ra) # 80206bc2 <release>
}
    802039ec:	70e2                	ld	ra,56(sp)
    802039ee:	7442                	ld	s0,48(sp)
    802039f0:	74a2                	ld	s1,40(sp)
    802039f2:	7902                	ld	s2,32(sp)
    802039f4:	69e2                	ld	s3,24(sp)
    802039f6:	6a42                	ld	s4,16(sp)
    802039f8:	6aa2                	ld	s5,8(sp)
    802039fa:	6b02                	ld	s6,0(sp)
    802039fc:	6121                	addi	sp,sp,64
    802039fe:	8082                	ret
        acquiresleep(&entry->lock);
    80203a00:	14090a13          	addi	s4,s2,320
    80203a04:	8552                	mv	a0,s4
    80203a06:	00003097          	auipc	ra,0x3
    80203a0a:	23e080e7          	jalr	574(ra) # 80206c44 <acquiresleep>
        entry->next->prev = entry->prev;
    80203a0e:	13093703          	ld	a4,304(s2)
    80203a12:	13893783          	ld	a5,312(s2)
    80203a16:	12f73c23          	sd	a5,312(a4)
        entry->prev->next = entry->next;
    80203a1a:	13093703          	ld	a4,304(s2)
    80203a1e:	12e7b823          	sd	a4,304(a5) # 10000130 <_entry-0x701ffed0>
        entry->next = self_fs->root.next;
    80203a22:	6795                	lui	a5,0x5
    80203a24:	9b878713          	addi	a4,a5,-1608 # 49b8 <_entry-0x801fb648>
    80203a28:	02eb0b33          	mul	s6,s6,a4
    80203a2c:	9b56                	add	s6,s6,s5
    80203a2e:	9b3e                	add	s6,s6,a5
    80203a30:	960b3783          	ld	a5,-1696(s6)
    80203a34:	12f93823          	sd	a5,304(s2)
        entry->prev = &self_fs->root;
    80203a38:	12993c23          	sd	s1,312(s2)
        self_fs->root.next->prev = entry;
    80203a3c:	960b3783          	ld	a5,-1696(s6)
    80203a40:	1327bc23          	sd	s2,312(a5)
        self_fs->root.next = entry;
    80203a44:	972b3023          	sd	s2,-1696(s6)
        release(&self_fs->ecache.lock);
    80203a48:	854e                	mv	a0,s3
    80203a4a:	00003097          	auipc	ra,0x3
    80203a4e:	178080e7          	jalr	376(ra) # 80206bc2 <release>
        if (entry->valid == -1) {       // this means some one has called eremove()
    80203a52:	11691703          	lh	a4,278(s2)
    80203a56:	57fd                	li	a5,-1
    80203a58:	06f70263          	beq	a4,a5,80203abc <eput+0x140>
            elock(entry->parent);
    80203a5c:	12893503          	ld	a0,296(s2)
    80203a60:	00000097          	auipc	ra,0x0
    80203a64:	e98080e7          	jalr	-360(ra) # 802038f8 <elock>
            eupdate(entry);
    80203a68:	854a                	mv	a0,s2
    80203a6a:	00000097          	auipc	ra,0x0
    80203a6e:	c12080e7          	jalr	-1006(ra) # 8020367c <eupdate>
            eunlock(entry->parent);
    80203a72:	12893503          	ld	a0,296(s2)
    80203a76:	00000097          	auipc	ra,0x0
    80203a7a:	eb8080e7          	jalr	-328(ra) # 8020392e <eunlock>
        releasesleep(&entry->lock);
    80203a7e:	8552                	mv	a0,s4
    80203a80:	00003097          	auipc	ra,0x3
    80203a84:	20e080e7          	jalr	526(ra) # 80206c8e <releasesleep>
        struct dirent *eparent = entry->parent;
    80203a88:	12893483          	ld	s1,296(s2)
        acquire(&self_fs->ecache.lock);
    80203a8c:	854e                	mv	a0,s3
    80203a8e:	00003097          	auipc	ra,0x3
    80203a92:	0e0080e7          	jalr	224(ra) # 80206b6e <acquire>
        entry->ref--;
    80203a96:	11892783          	lw	a5,280(s2)
    80203a9a:	37fd                	addiw	a5,a5,-1
    80203a9c:	10f92c23          	sw	a5,280(s2)
        release(&self_fs->ecache.lock);
    80203aa0:	854e                	mv	a0,s3
    80203aa2:	00003097          	auipc	ra,0x3
    80203aa6:	120080e7          	jalr	288(ra) # 80206bc2 <release>
        if (entry->ref == 0) {
    80203aaa:	11892783          	lw	a5,280(s2)
    80203aae:	ff9d                	bnez	a5,802039ec <eput+0x70>
            eput(eparent);
    80203ab0:	8526                	mv	a0,s1
    80203ab2:	00000097          	auipc	ra,0x0
    80203ab6:	eca080e7          	jalr	-310(ra) # 8020397c <eput>
    80203aba:	bf0d                	j	802039ec <eput+0x70>
            etrunc(entry);
    80203abc:	854a                	mv	a0,s2
    80203abe:	00000097          	auipc	ra,0x0
    80203ac2:	db0080e7          	jalr	-592(ra) # 8020386e <etrunc>
    80203ac6:	bf65                	j	80203a7e <eput+0x102>

0000000080203ac8 <estat>:
{
    80203ac8:	1101                	addi	sp,sp,-32
    80203aca:	ec06                	sd	ra,24(sp)
    80203acc:	e822                	sd	s0,16(sp)
    80203ace:	e426                	sd	s1,8(sp)
    80203ad0:	e04a                	sd	s2,0(sp)
    80203ad2:	1000                	addi	s0,sp,32
    80203ad4:	892a                	mv	s2,a0
    80203ad6:	84ae                	mv	s1,a1
    strncpy(st->name, de->filename, STAT_MAX_NAME);
    80203ad8:	02000613          	li	a2,32
    80203adc:	85aa                	mv	a1,a0
    80203ade:	8526                	mv	a0,s1
    80203ae0:	ffffd097          	auipc	ra,0xffffd
    80203ae4:	3ac080e7          	jalr	940(ra) # 80200e8c <strncpy>
    st->type = (de->attribute & ATTR_DIRECTORY) ? T_DIR : T_FILE;
    80203ae8:	10094783          	lbu	a5,256(s2)
    80203aec:	8bc1                	andi	a5,a5,16
    80203aee:	0017b793          	seqz	a5,a5
    80203af2:	0785                	addi	a5,a5,1
    80203af4:	02f49423          	sh	a5,40(s1)
    st->dev = de->dev;
    80203af8:	11494783          	lbu	a5,276(s2)
    80203afc:	d0dc                	sw	a5,36(s1)
    st->size = de->file_size;
    80203afe:	10896783          	lwu	a5,264(s2)
    80203b02:	f89c                	sd	a5,48(s1)
}
    80203b04:	60e2                	ld	ra,24(sp)
    80203b06:	6442                	ld	s0,16(sp)
    80203b08:	64a2                	ld	s1,8(sp)
    80203b0a:	6902                	ld	s2,0(sp)
    80203b0c:	6105                	addi	sp,sp,32
    80203b0e:	8082                	ret

0000000080203b10 <enext>:
 * @return  -1      meet the end of dir
 *          0       find empty slots
 *          1       find a file with all its entries
 */
int enext(struct dirent *dp, struct dirent *ep, uint off, int *count)
{
    80203b10:	7119                	addi	sp,sp,-128
    80203b12:	fc86                	sd	ra,120(sp)
    80203b14:	f8a2                	sd	s0,112(sp)
    80203b16:	f4a6                	sd	s1,104(sp)
    80203b18:	f0ca                	sd	s2,96(sp)
    80203b1a:	ecce                	sd	s3,88(sp)
    80203b1c:	e8d2                	sd	s4,80(sp)
    80203b1e:	e4d6                	sd	s5,72(sp)
    80203b20:	e0da                	sd	s6,64(sp)
    80203b22:	fc5e                	sd	s7,56(sp)
    80203b24:	f862                	sd	s8,48(sp)
    80203b26:	f466                	sd	s9,40(sp)
    80203b28:	f06a                	sd	s10,32(sp)
    80203b2a:	0100                	addi	s0,sp,128
    if (!(dp->attribute & ATTR_DIRECTORY))
    80203b2c:	10054783          	lbu	a5,256(a0)
    80203b30:	8bc1                	andi	a5,a5,16
    80203b32:	cfb5                	beqz	a5,80203bae <enext+0x9e>
    80203b34:	892a                	mv	s2,a0
    80203b36:	8bae                	mv	s7,a1
    80203b38:	84b2                	mv	s1,a2
    80203b3a:	8a36                	mv	s4,a3
        panic("enext not dir");
    if (ep->valid)
    80203b3c:	11659783          	lh	a5,278(a1)
    80203b40:	efbd                	bnez	a5,80203bbe <enext+0xae>
        panic("enext ep valid");
    if (off % 32)
    80203b42:	01f67793          	andi	a5,a2,31
    80203b46:	e7c1                	bnez	a5,80203bce <enext+0xbe>
        panic("enext not align");
    if (dp->valid != 1) { return -1; }
    80203b48:	11651703          	lh	a4,278(a0)
    80203b4c:	4785                	li	a5,1
    80203b4e:	557d                	li	a0,-1
    80203b50:	16f71763          	bne	a4,a5,80203cbe <enext+0x1ae>
    
    if(dp->mnt) dp = &(FatFs[dp->dev].root);
    80203b54:	11c92783          	lw	a5,284(s2)
    80203b58:	c385                	beqz	a5,80203b78 <enext+0x68>
    80203b5a:	11494903          	lbu	s2,276(s2)
    80203b5e:	6795                	lui	a5,0x5
    80203b60:	9b878713          	addi	a4,a5,-1608 # 49b8 <_entry-0x801fb648>
    80203b64:	02e90933          	mul	s2,s2,a4
    80203b68:	83078793          	addi	a5,a5,-2000
    80203b6c:	993e                	add	s2,s2,a5
    80203b6e:	00551517          	auipc	a0,0x551
    80203b72:	04250513          	addi	a0,a0,66 # 80754bb0 <FatFs>
    80203b76:	992a                	add	s2,s2,a0
    struct fs * self_fs = &FatFs[dp->dev];
    80203b78:	11494983          	lbu	s3,276(s2)
    80203b7c:	6795                	lui	a5,0x5
    80203b7e:	9b878793          	addi	a5,a5,-1608 # 49b8 <_entry-0x801fb648>
    80203b82:	02f989b3          	mul	s3,s3,a5
    80203b86:	00551797          	auipc	a5,0x551
    80203b8a:	02a78793          	addi	a5,a5,42 # 80754bb0 <FatFs>
    80203b8e:	99be                	add	s3,s3,a5

    union dentry de;
    int cnt = 0;
    memset(ep->filename, 0, FAT32_MAX_FILENAME + 1);
    80203b90:	8d5e                	mv	s10,s7
    80203b92:	10000613          	li	a2,256
    80203b96:	4581                	li	a1,0
    80203b98:	855e                	mv	a0,s7
    80203b9a:	ffffd097          	auipc	ra,0xffffd
    80203b9e:	1da080e7          	jalr	474(ra) # 80200d74 <memset>
    int cnt = 0;
    80203ba2:	4a81                	li	s5,0

    for (int off2; (off2 = reloc_clus(self_fs, dp, off, 0)) != -1; off += 32) {
    80203ba4:	5b7d                	li	s6,-1
        if (rw_clus(self_fs, dp->cur_clus, 0, 0, (uint64)&de, off2, 32) != 32 || de.lne.order == END_OF_ENTRY) {//?????
            return -1;
        }
        if (de.lne.order == EMPTY_ENTRY) {
    80203ba6:	0e500c13          	li	s8,229
            continue;
        } else if (cnt) {
            *count = cnt;
            return 0;
        }
        if (de.lne.attr == ATTR_LONG_NAME) {
    80203baa:	4cbd                	li	s9,15
    for (int off2; (off2 = reloc_clus(self_fs, dp, off, 0)) != -1; off += 32) {
    80203bac:	a085                	j	80203c0c <enext+0xfc>
        panic("enext not dir");
    80203bae:	0000e517          	auipc	a0,0xe
    80203bb2:	83250513          	addi	a0,a0,-1998 # 802113e0 <rodata_start+0x3e0>
    80203bb6:	00003097          	auipc	ra,0x3
    80203bba:	318080e7          	jalr	792(ra) # 80206ece <panic>
        panic("enext ep valid");
    80203bbe:	0000e517          	auipc	a0,0xe
    80203bc2:	83250513          	addi	a0,a0,-1998 # 802113f0 <rodata_start+0x3f0>
    80203bc6:	00003097          	auipc	ra,0x3
    80203bca:	308080e7          	jalr	776(ra) # 80206ece <panic>
        panic("enext not align");
    80203bce:	0000e517          	auipc	a0,0xe
    80203bd2:	83250513          	addi	a0,a0,-1998 # 80211400 <rodata_start+0x400>
    80203bd6:	00003097          	auipc	ra,0x3
    80203bda:	2f8080e7          	jalr	760(ra) # 80206ece <panic>
            cnt++;
    80203bde:	2a85                	addiw	s5,s5,1
            continue;
    80203be0:	a025                	j	80203c08 <enext+0xf8>
            *count = cnt;
    80203be2:	015a2023          	sw	s5,0(s4)
            return 0;
    80203be6:	4501                	li	a0,0
    80203be8:	a8d9                	j	80203cbe <enext+0x1ae>
            int lcnt = de.lne.order & ~LAST_LONG_ENTRY;
            if (de.lne.order & LAST_LONG_ENTRY) {
                *count = lcnt + 1;                              // plus the s-n-e;
                count = 0;
            }
            read_entry_name(ep->filename + (lcnt - 1) * CHAR_LONG_NAME, &de);
    80203bea:	fff5079b          	addiw	a5,a0,-1
    80203bee:	0017951b          	slliw	a0,a5,0x1
    80203bf2:	9d3d                	addw	a0,a0,a5
    80203bf4:	0025151b          	slliw	a0,a0,0x2
    80203bf8:	9d3d                	addw	a0,a0,a5
    80203bfa:	f8040593          	addi	a1,s0,-128
    80203bfe:	956a                	add	a0,a0,s10
    80203c00:	fffff097          	auipc	ra,0xfffff
    80203c04:	e72080e7          	jalr	-398(ra) # 80202a72 <read_entry_name>
    for (int off2; (off2 = reloc_clus(self_fs, dp, off, 0)) != -1; off += 32) {
    80203c08:	0204849b          	addiw	s1,s1,32
    80203c0c:	4681                	li	a3,0
    80203c0e:	8626                	mv	a2,s1
    80203c10:	85ca                	mv	a1,s2
    80203c12:	854e                	mv	a0,s3
    80203c14:	fffff097          	auipc	ra,0xfffff
    80203c18:	a96080e7          	jalr	-1386(ra) # 802026aa <reloc_clus>
    80203c1c:	0b650163          	beq	a0,s6,80203cbe <enext+0x1ae>
        if (rw_clus(self_fs, dp->cur_clus, 0, 0, (uint64)&de, off2, 32) != 32 || de.lne.order == END_OF_ENTRY) {//?????
    80203c20:	02000813          	li	a6,32
    80203c24:	0005079b          	sext.w	a5,a0
    80203c28:	f8040713          	addi	a4,s0,-128
    80203c2c:	4681                	li	a3,0
    80203c2e:	4601                	li	a2,0
    80203c30:	10c92583          	lw	a1,268(s2)
    80203c34:	854e                	mv	a0,s3
    80203c36:	fffff097          	auipc	ra,0xfffff
    80203c3a:	b84080e7          	jalr	-1148(ra) # 802027ba <rw_clus>
    80203c3e:	2501                	sext.w	a0,a0
    80203c40:	02000793          	li	a5,32
    80203c44:	06f51c63          	bne	a0,a5,80203cbc <enext+0x1ac>
    80203c48:	f8044783          	lbu	a5,-128(s0)
    80203c4c:	c7d9                	beqz	a5,80203cda <enext+0x1ca>
        if (de.lne.order == EMPTY_ENTRY) {
    80203c4e:	f98788e3          	beq	a5,s8,80203bde <enext+0xce>
        } else if (cnt) {
    80203c52:	f80a98e3          	bnez	s5,80203be2 <enext+0xd2>
        if (de.lne.attr == ATTR_LONG_NAME) {
    80203c56:	f8b44703          	lbu	a4,-117(s0)
    80203c5a:	01971d63          	bne	a4,s9,80203c74 <enext+0x164>
            int lcnt = de.lne.order & ~LAST_LONG_ENTRY;
    80203c5e:	0bf7f513          	andi	a0,a5,191
            if (de.lne.order & LAST_LONG_ENTRY) {
    80203c62:	0407f793          	andi	a5,a5,64
    80203c66:	d3d1                	beqz	a5,80203bea <enext+0xda>
                *count = lcnt + 1;                              // plus the s-n-e;
    80203c68:	0015079b          	addiw	a5,a0,1
    80203c6c:	00fa2023          	sw	a5,0(s4)
                count = 0;
    80203c70:	4a01                	li	s4,0
    80203c72:	bfa5                	j	80203bea <enext+0xda>
        } else {
            if (count) {
    80203c74:	000a0c63          	beqz	s4,80203c8c <enext+0x17c>
                *count = 1;
    80203c78:	4785                	li	a5,1
    80203c7a:	00fa2023          	sw	a5,0(s4)
                read_entry_name(ep->filename, &de);
    80203c7e:	f8040593          	addi	a1,s0,-128
    80203c82:	855e                	mv	a0,s7
    80203c84:	fffff097          	auipc	ra,0xfffff
    80203c88:	dee080e7          	jalr	-530(ra) # 80202a72 <read_entry_name>
    entry->attribute = d->sne.attr;
    80203c8c:	f8b44783          	lbu	a5,-117(s0)
    80203c90:	10fb8023          	sb	a5,256(s7)
    entry->first_clus = ((uint32)d->sne.fst_clus_hi << 16) | d->sne.fst_clus_lo;
    80203c94:	f9445783          	lhu	a5,-108(s0)
    80203c98:	0107979b          	slliw	a5,a5,0x10
    80203c9c:	f9a45703          	lhu	a4,-102(s0)
    80203ca0:	8fd9                	or	a5,a5,a4
    80203ca2:	2781                	sext.w	a5,a5
    80203ca4:	10fba223          	sw	a5,260(s7)
    entry->file_size = d->sne.file_size;
    80203ca8:	f9c42703          	lw	a4,-100(s0)
    80203cac:	10eba423          	sw	a4,264(s7)
    entry->cur_clus = entry->first_clus;
    80203cb0:	10fba623          	sw	a5,268(s7)
    entry->clus_cnt = 0;
    80203cb4:	100ba823          	sw	zero,272(s7)
            }
            read_entry_info(ep, &de);
            return 1;
    80203cb8:	4505                	li	a0,1
}
    80203cba:	a011                	j	80203cbe <enext+0x1ae>
            return -1;
    80203cbc:	557d                	li	a0,-1
        }
    }

    return -1;
}
    80203cbe:	70e6                	ld	ra,120(sp)
    80203cc0:	7446                	ld	s0,112(sp)
    80203cc2:	74a6                	ld	s1,104(sp)
    80203cc4:	7906                	ld	s2,96(sp)
    80203cc6:	69e6                	ld	s3,88(sp)
    80203cc8:	6a46                	ld	s4,80(sp)
    80203cca:	6aa6                	ld	s5,72(sp)
    80203ccc:	6b06                	ld	s6,64(sp)
    80203cce:	7be2                	ld	s7,56(sp)
    80203cd0:	7c42                	ld	s8,48(sp)
    80203cd2:	7ca2                	ld	s9,40(sp)
    80203cd4:	7d02                	ld	s10,32(sp)
    80203cd6:	6109                	addi	sp,sp,128
    80203cd8:	8082                	ret
            return -1;
    80203cda:	557d                	li	a0,-1
    80203cdc:	b7cd                	j	80203cbe <enext+0x1ae>

0000000080203cde <dirlookup>:
 * @param   dp          entry of a directory file
 * @param   filename    target filename
 * @param   poff        offset of proper empty entry slots from the beginning of the dir
 */
struct dirent *dirlookup(struct dirent *dp, char *filename, uint *poff)
{
    80203cde:	715d                	addi	sp,sp,-80
    80203ce0:	e486                	sd	ra,72(sp)
    80203ce2:	e0a2                	sd	s0,64(sp)
    80203ce4:	fc26                	sd	s1,56(sp)
    80203ce6:	f84a                	sd	s2,48(sp)
    80203ce8:	f44e                	sd	s3,40(sp)
    80203cea:	f052                	sd	s4,32(sp)
    80203cec:	ec56                	sd	s5,24(sp)
    80203cee:	e85a                	sd	s6,16(sp)
    80203cf0:	0880                	addi	s0,sp,80
    struct fs * self_fs = &FatFs[dp->dev];
    80203cf2:	11454a03          	lbu	s4,276(a0)
    if (!(dp->attribute & ATTR_DIRECTORY))
    80203cf6:	10054783          	lbu	a5,256(a0)
    80203cfa:	8bc1                	andi	a5,a5,16
    80203cfc:	c3bd                	beqz	a5,80203d62 <dirlookup+0x84>
    80203cfe:	84aa                	mv	s1,a0
    80203d00:	89ae                	mv	s3,a1
    80203d02:	8ab2                	mv	s5,a2
        panic("dirlookup not DIR");
    if (strncmp(filename, ".", FAT32_MAX_FILENAME) == 0) {
    80203d04:	0ff00613          	li	a2,255
    80203d08:	0000d597          	auipc	a1,0xd
    80203d0c:	72058593          	addi	a1,a1,1824 # 80211428 <rodata_start+0x428>
    80203d10:	854e                	mv	a0,s3
    80203d12:	ffffd097          	auipc	ra,0xffffd
    80203d16:	13e080e7          	jalr	318(ra) # 80200e50 <strncmp>
    80203d1a:	cd21                	beqz	a0,80203d72 <dirlookup+0x94>
        return edup(dp);
    } else if (strncmp(filename, "..", FAT32_MAX_FILENAME) == 0) {
    80203d1c:	0ff00613          	li	a2,255
    80203d20:	0000d597          	auipc	a1,0xd
    80203d24:	71058593          	addi	a1,a1,1808 # 80211430 <rodata_start+0x430>
    80203d28:	854e                	mv	a0,s3
    80203d2a:	ffffd097          	auipc	ra,0xffffd
    80203d2e:	126080e7          	jalr	294(ra) # 80200e50 <strncmp>
    80203d32:	e925                	bnez	a0,80203da2 <dirlookup+0xc4>
        if (dp == &self_fs->root) {
    80203d34:	6715                	lui	a4,0x5
    80203d36:	9b870793          	addi	a5,a4,-1608 # 49b8 <_entry-0x801fb648>
    80203d3a:	02fa07b3          	mul	a5,s4,a5
    80203d3e:	83070713          	addi	a4,a4,-2000
    80203d42:	97ba                	add	a5,a5,a4
    80203d44:	00551717          	auipc	a4,0x551
    80203d48:	e6c70713          	addi	a4,a4,-404 # 80754bb0 <FatFs>
    80203d4c:	97ba                	add	a5,a5,a4
    80203d4e:	04f48363          	beq	s1,a5,80203d94 <dirlookup+0xb6>
            return edup(&self_fs->root);
        }
        return edup(dp->parent);
    80203d52:	1284b503          	ld	a0,296(s1)
    80203d56:	00000097          	auipc	ra,0x0
    80203d5a:	8d4080e7          	jalr	-1836(ra) # 8020362a <edup>
    80203d5e:	892a                	mv	s2,a0
    80203d60:	a839                	j	80203d7e <dirlookup+0xa0>
        panic("dirlookup not DIR");
    80203d62:	0000d517          	auipc	a0,0xd
    80203d66:	6ae50513          	addi	a0,a0,1710 # 80211410 <rodata_start+0x410>
    80203d6a:	00003097          	auipc	ra,0x3
    80203d6e:	164080e7          	jalr	356(ra) # 80206ece <panic>
        return edup(dp);
    80203d72:	8526                	mv	a0,s1
    80203d74:	00000097          	auipc	ra,0x0
    80203d78:	8b6080e7          	jalr	-1866(ra) # 8020362a <edup>
    80203d7c:	892a                	mv	s2,a0
    if (poff) {
        *poff = off;
    }
    eput(ep);
    return NULL;
}
    80203d7e:	854a                	mv	a0,s2
    80203d80:	60a6                	ld	ra,72(sp)
    80203d82:	6406                	ld	s0,64(sp)
    80203d84:	74e2                	ld	s1,56(sp)
    80203d86:	7942                	ld	s2,48(sp)
    80203d88:	79a2                	ld	s3,40(sp)
    80203d8a:	7a02                	ld	s4,32(sp)
    80203d8c:	6ae2                	ld	s5,24(sp)
    80203d8e:	6b42                	ld	s6,16(sp)
    80203d90:	6161                	addi	sp,sp,80
    80203d92:	8082                	ret
            return edup(&self_fs->root);
    80203d94:	8526                	mv	a0,s1
    80203d96:	00000097          	auipc	ra,0x0
    80203d9a:	894080e7          	jalr	-1900(ra) # 8020362a <edup>
    80203d9e:	892a                	mv	s2,a0
    80203da0:	bff9                	j	80203d7e <dirlookup+0xa0>
    if (dp->valid != 1) {
    80203da2:	11649703          	lh	a4,278(s1)
    80203da6:	4785                	li	a5,1
        return NULL;
    80203da8:	4901                	li	s2,0
    if (dp->valid != 1) {
    80203daa:	fcf71ae3          	bne	a4,a5,80203d7e <dirlookup+0xa0>
    if(dp->mnt) dp = &(FatFs[dp->dev].root);
    80203dae:	11c4a783          	lw	a5,284(s1)
    80203db2:	c385                	beqz	a5,80203dd2 <dirlookup+0xf4>
    80203db4:	1144c483          	lbu	s1,276(s1)
    80203db8:	6795                	lui	a5,0x5
    80203dba:	9b878713          	addi	a4,a5,-1608 # 49b8 <_entry-0x801fb648>
    80203dbe:	02e484b3          	mul	s1,s1,a4
    80203dc2:	83078793          	addi	a5,a5,-2000
    80203dc6:	94be                	add	s1,s1,a5
    80203dc8:	00551517          	auipc	a0,0x551
    80203dcc:	de850513          	addi	a0,a0,-536 # 80754bb0 <FatFs>
    80203dd0:	94aa                	add	s1,s1,a0
    struct dirent *ep = eget(dp, filename);
    80203dd2:	85ce                	mv	a1,s3
    80203dd4:	8526                	mv	a0,s1
    80203dd6:	fffff097          	auipc	ra,0xfffff
    80203dda:	b30080e7          	jalr	-1232(ra) # 80202906 <eget>
    80203dde:	892a                	mv	s2,a0
    if (ep->valid == 1) { return ep; }                               // self_fs->ecache hits
    80203de0:	11651703          	lh	a4,278(a0)
    80203de4:	4785                	li	a5,1
    80203de6:	f8f70ce3          	beq	a4,a5,80203d7e <dirlookup+0xa0>
    int len = strlen(filename);
    80203dea:	854e                	mv	a0,s3
    80203dec:	ffffd097          	auipc	ra,0xffffd
    80203df0:	110080e7          	jalr	272(ra) # 80200efc <strlen>
    int count = 0;
    80203df4:	fa042e23          	sw	zero,-68(s0)
    struct fs * self_fs = &FatFs[dp->dev];
    80203df8:	6795                	lui	a5,0x5
    80203dfa:	9b878793          	addi	a5,a5,-1608 # 49b8 <_entry-0x801fb648>
    80203dfe:	02fa07b3          	mul	a5,s4,a5
    reloc_clus(self_fs, dp, 0, 0);
    80203e02:	4681                	li	a3,0
    80203e04:	4601                	li	a2,0
    80203e06:	85a6                	mv	a1,s1
    80203e08:	00551517          	auipc	a0,0x551
    80203e0c:	da850513          	addi	a0,a0,-600 # 80754bb0 <FatFs>
    80203e10:	953e                	add	a0,a0,a5
    80203e12:	fffff097          	auipc	ra,0xfffff
    80203e16:	898080e7          	jalr	-1896(ra) # 802026aa <reloc_clus>
    uint off = 0;
    80203e1a:	4a01                	li	s4,0
    while ((type = enext(dp, ep, off, &count) != -1)) {//?????
    80203e1c:	5b7d                	li	s6,-1
    80203e1e:	fbc40693          	addi	a3,s0,-68
    80203e22:	8652                	mv	a2,s4
    80203e24:	85ca                	mv	a1,s2
    80203e26:	8526                	mv	a0,s1
    80203e28:	00000097          	auipc	ra,0x0
    80203e2c:	ce8080e7          	jalr	-792(ra) # 80203b10 <enext>
    80203e30:	03650f63          	beq	a0,s6,80203e6e <dirlookup+0x190>
        } else if (strncmp(filename, ep->filename, FAT32_MAX_FILENAME) == 0) {
    80203e34:	0ff00613          	li	a2,255
    80203e38:	85ca                	mv	a1,s2
    80203e3a:	854e                	mv	a0,s3
    80203e3c:	ffffd097          	auipc	ra,0xffffd
    80203e40:	014080e7          	jalr	20(ra) # 80200e50 <strncmp>
    80203e44:	c901                	beqz	a0,80203e54 <dirlookup+0x176>
        off += count << 5;
    80203e46:	fbc42783          	lw	a5,-68(s0)
    80203e4a:	0057979b          	slliw	a5,a5,0x5
    80203e4e:	01478a3b          	addw	s4,a5,s4
    80203e52:	b7f1                	j	80203e1e <dirlookup+0x140>
            ep->parent = edup(dp);
    80203e54:	8526                	mv	a0,s1
    80203e56:	fffff097          	auipc	ra,0xfffff
    80203e5a:	7d4080e7          	jalr	2004(ra) # 8020362a <edup>
    80203e5e:	12a93423          	sd	a0,296(s2)
            ep->off = off;
    80203e62:	13492023          	sw	s4,288(s2)
            ep->valid = 1;
    80203e66:	4785                	li	a5,1
    80203e68:	10f91b23          	sh	a5,278(s2)
            return ep;
    80203e6c:	bf09                	j	80203d7e <dirlookup+0xa0>
    if (poff) {
    80203e6e:	000a8463          	beqz	s5,80203e76 <dirlookup+0x198>
        *poff = off;
    80203e72:	014aa023          	sw	s4,0(s5)
    eput(ep);
    80203e76:	854a                	mv	a0,s2
    80203e78:	00000097          	auipc	ra,0x0
    80203e7c:	b04080e7          	jalr	-1276(ra) # 8020397c <eput>
    return NULL;
    80203e80:	4901                	li	s2,0
    80203e82:	bdf5                	j	80203d7e <dirlookup+0xa0>

0000000080203e84 <ealloc>:
{
    80203e84:	715d                	addi	sp,sp,-80
    80203e86:	e486                	sd	ra,72(sp)
    80203e88:	e0a2                	sd	s0,64(sp)
    80203e8a:	fc26                	sd	s1,56(sp)
    80203e8c:	f84a                	sd	s2,48(sp)
    80203e8e:	f44e                	sd	s3,40(sp)
    80203e90:	f052                	sd	s4,32(sp)
    80203e92:	ec56                	sd	s5,24(sp)
    80203e94:	0880                	addi	s0,sp,80
    80203e96:	84aa                	mv	s1,a0
    80203e98:	852e                	mv	a0,a1
    80203e9a:	89b2                	mv	s3,a2
    if(dp->mnt) dp = &(FatFs[dp->dev].root);
    80203e9c:	11c4a783          	lw	a5,284(s1)
    80203ea0:	c385                	beqz	a5,80203ec0 <ealloc+0x3c>
    80203ea2:	1144c483          	lbu	s1,276(s1)
    80203ea6:	6795                	lui	a5,0x5
    80203ea8:	9b878713          	addi	a4,a5,-1608 # 49b8 <_entry-0x801fb648>
    80203eac:	02e484b3          	mul	s1,s1,a4
    80203eb0:	83078793          	addi	a5,a5,-2000
    80203eb4:	94be                	add	s1,s1,a5
    80203eb6:	00551797          	auipc	a5,0x551
    80203eba:	cfa78793          	addi	a5,a5,-774 # 80754bb0 <FatFs>
    80203ebe:	94be                	add	s1,s1,a5
    if (!(dp->attribute & ATTR_DIRECTORY)) {
    80203ec0:	1004c783          	lbu	a5,256(s1)
    80203ec4:	8bc1                	andi	a5,a5,16
    80203ec6:	c7b1                	beqz	a5,80203f12 <ealloc+0x8e>
    if (dp->valid != 1 || !(name = formatname(name))) {        // detect illegal character
    80203ec8:	11649703          	lh	a4,278(s1)
    80203ecc:	4785                	li	a5,1
        return NULL;
    80203ece:	4901                	li	s2,0
    if (dp->valid != 1 || !(name = formatname(name))) {        // detect illegal character
    80203ed0:	02f71763          	bne	a4,a5,80203efe <ealloc+0x7a>
    struct fs * self_fs = &FatFs[dp->dev];
    80203ed4:	1144ca83          	lbu	s5,276(s1)
    if (dp->valid != 1 || !(name = formatname(name))) {        // detect illegal character
    80203ed8:	fffff097          	auipc	ra,0xfffff
    80203edc:	2b2080e7          	jalr	690(ra) # 8020318a <formatname>
    80203ee0:	8a2a                	mv	s4,a0
    80203ee2:	12050163          	beqz	a0,80204004 <ealloc+0x180>
    uint off = 0;
    80203ee6:	fa042e23          	sw	zero,-68(s0)
    if ((ep = dirlookup(dp, name, &off)) != 0) {      // entry exists
    80203eea:	fbc40613          	addi	a2,s0,-68
    80203eee:	85aa                	mv	a1,a0
    80203ef0:	8526                	mv	a0,s1
    80203ef2:	00000097          	auipc	ra,0x0
    80203ef6:	dec080e7          	jalr	-532(ra) # 80203cde <dirlookup>
    80203efa:	892a                	mv	s2,a0
    80203efc:	c11d                	beqz	a0,80203f22 <ealloc+0x9e>
}
    80203efe:	854a                	mv	a0,s2
    80203f00:	60a6                	ld	ra,72(sp)
    80203f02:	6406                	ld	s0,64(sp)
    80203f04:	74e2                	ld	s1,56(sp)
    80203f06:	7942                	ld	s2,48(sp)
    80203f08:	79a2                	ld	s3,40(sp)
    80203f0a:	7a02                	ld	s4,32(sp)
    80203f0c:	6ae2                	ld	s5,24(sp)
    80203f0e:	6161                	addi	sp,sp,80
    80203f10:	8082                	ret
        panic("ealloc not dir");
    80203f12:	0000d517          	auipc	a0,0xd
    80203f16:	52650513          	addi	a0,a0,1318 # 80211438 <rodata_start+0x438>
    80203f1a:	00003097          	auipc	ra,0x3
    80203f1e:	fb4080e7          	jalr	-76(ra) # 80206ece <panic>
    ep = eget(dp, name);
    80203f22:	85d2                	mv	a1,s4
    80203f24:	8526                	mv	a0,s1
    80203f26:	fffff097          	auipc	ra,0xfffff
    80203f2a:	9e0080e7          	jalr	-1568(ra) # 80202906 <eget>
    80203f2e:	892a                	mv	s2,a0
    elock(ep);
    80203f30:	00000097          	auipc	ra,0x0
    80203f34:	9c8080e7          	jalr	-1592(ra) # 802038f8 <elock>
    ep->attribute = attr;
    80203f38:	11390023          	sb	s3,256(s2)
    ep->file_size = 0;
    80203f3c:	10092423          	sw	zero,264(s2)
    ep->first_clus = 0;
    80203f40:	10092223          	sw	zero,260(s2)
    ep->parent = edup(dp);
    80203f44:	8526                	mv	a0,s1
    80203f46:	fffff097          	auipc	ra,0xfffff
    80203f4a:	6e4080e7          	jalr	1764(ra) # 8020362a <edup>
    80203f4e:	12a93423          	sd	a0,296(s2)
    ep->off = off;
    80203f52:	fbc42783          	lw	a5,-68(s0)
    80203f56:	12f92023          	sw	a5,288(s2)
    ep->clus_cnt = 0;
    80203f5a:	10092823          	sw	zero,272(s2)
    ep->cur_clus = 0;
    80203f5e:	10092623          	sw	zero,268(s2)
    ep->dirty = 0;
    80203f62:	10090aa3          	sb	zero,277(s2)
    strncpy(ep->filename, name, FAT32_MAX_FILENAME);
    80203f66:	0ff00613          	li	a2,255
    80203f6a:	85d2                	mv	a1,s4
    80203f6c:	854a                	mv	a0,s2
    80203f6e:	ffffd097          	auipc	ra,0xffffd
    80203f72:	f1e080e7          	jalr	-226(ra) # 80200e8c <strncpy>
    ep->filename[FAT32_MAX_FILENAME] = '\0';
    80203f76:	0e090fa3          	sb	zero,255(s2)
    if (attr == ATTR_DIRECTORY) {    // generate "." and ".." for ep
    80203f7a:	47c1                	li	a5,16
    80203f7c:	02f98963          	beq	s3,a5,80203fae <ealloc+0x12a>
        ep->attribute |= ATTR_ARCHIVE;
    80203f80:	10094783          	lbu	a5,256(s2)
    80203f84:	0207e793          	ori	a5,a5,32
    80203f88:	10f90023          	sb	a5,256(s2)
    emake(dp, ep, off);
    80203f8c:	fbc42603          	lw	a2,-68(s0)
    80203f90:	85ca                	mv	a1,s2
    80203f92:	8526                	mv	a0,s1
    80203f94:	fffff097          	auipc	ra,0xfffff
    80203f98:	2ae080e7          	jalr	686(ra) # 80203242 <emake>
    ep->valid = 1;
    80203f9c:	4785                	li	a5,1
    80203f9e:	10f91b23          	sh	a5,278(s2)
    eunlock(ep);
    80203fa2:	854a                	mv	a0,s2
    80203fa4:	00000097          	auipc	ra,0x0
    80203fa8:	98a080e7          	jalr	-1654(ra) # 8020392e <eunlock>
    return ep;
    80203fac:	bf89                	j	80203efe <ealloc+0x7a>
        ep->attribute |= ATTR_DIRECTORY;
    80203fae:	10094783          	lbu	a5,256(s2)
    80203fb2:	0107e793          	ori	a5,a5,16
    80203fb6:	10f90023          	sb	a5,256(s2)
    struct fs * self_fs = &FatFs[dp->dev];
    80203fba:	6515                	lui	a0,0x5
    80203fbc:	9b850513          	addi	a0,a0,-1608 # 49b8 <_entry-0x801fb648>
    80203fc0:	02aa8ab3          	mul	s5,s5,a0
        ep->cur_clus = ep->first_clus = alloc_clus(self_fs, dp->dev);
    80203fc4:	1144c583          	lbu	a1,276(s1)
    80203fc8:	00551517          	auipc	a0,0x551
    80203fcc:	be850513          	addi	a0,a0,-1048 # 80754bb0 <FatFs>
    80203fd0:	9556                	add	a0,a0,s5
    80203fd2:	ffffe097          	auipc	ra,0xffffe
    80203fd6:	538080e7          	jalr	1336(ra) # 8020250a <alloc_clus>
    80203fda:	2501                	sext.w	a0,a0
    80203fdc:	10a92223          	sw	a0,260(s2)
    80203fe0:	10a92623          	sw	a0,268(s2)
        emake(ep, ep, 0);
    80203fe4:	4601                	li	a2,0
    80203fe6:	85ca                	mv	a1,s2
    80203fe8:	854a                	mv	a0,s2
    80203fea:	fffff097          	auipc	ra,0xfffff
    80203fee:	258080e7          	jalr	600(ra) # 80203242 <emake>
        emake(ep, dp, 32);
    80203ff2:	02000613          	li	a2,32
    80203ff6:	85a6                	mv	a1,s1
    80203ff8:	854a                	mv	a0,s2
    80203ffa:	fffff097          	auipc	ra,0xfffff
    80203ffe:	248080e7          	jalr	584(ra) # 80203242 <emake>
    80204002:	b769                	j	80203f8c <ealloc+0x108>
        return NULL;
    80204004:	892a                	mv	s2,a0
    80204006:	bde5                	j	80203efe <ealloc+0x7a>

0000000080204008 <lookup_path>:
}


// FAT32 version of namex in xv6's original file system.
static struct dirent *lookup_path(struct dirent* env,char *path, int parent, char *name,int* devno)
{
    80204008:	711d                	addi	sp,sp,-96
    8020400a:	ec86                	sd	ra,88(sp)
    8020400c:	e8a2                	sd	s0,80(sp)
    8020400e:	e4a6                	sd	s1,72(sp)
    80204010:	e0ca                	sd	s2,64(sp)
    80204012:	fc4e                	sd	s3,56(sp)
    80204014:	f852                	sd	s4,48(sp)
    80204016:	f456                	sd	s5,40(sp)
    80204018:	f05a                	sd	s6,32(sp)
    8020401a:	ec5e                	sd	s7,24(sp)
    8020401c:	e862                	sd	s8,16(sp)
    8020401e:	e466                	sd	s9,8(sp)
    80204020:	e06a                	sd	s10,0(sp)
    80204022:	1080                	addi	s0,sp,96
    80204024:	892e                	mv	s2,a1
    80204026:	8bb2                	mv	s7,a2
    80204028:	8ab6                	mv	s5,a3
    8020402a:	8b3a                	mv	s6,a4
    struct dirent *entry, *next;
    
    struct fs * self_fs;
    if(devno)*devno = -1;
    8020402c:	c319                	beqz	a4,80204032 <lookup_path+0x2a>
    8020402e:	57fd                	li	a5,-1
    80204030:	c31c                	sw	a5,0(a4)
    if (*path == '/') {
    80204032:	00094783          	lbu	a5,0(s2)
    80204036:	02f00713          	li	a4,47
    8020403a:	02e78363          	beq	a5,a4,80204060 <lookup_path+0x58>
        self_fs = &FatFs[0];
        entry = edup(&self_fs->root);
    } else if(env){
    8020403e:	c91d                	beqz	a0,80204074 <lookup_path+0x6c>
        entry = edup(env); 
    80204040:	fffff097          	auipc	ra,0xfffff
    80204044:	5ea080e7          	jalr	1514(ra) # 8020362a <edup>
    80204048:	89aa                	mv	s3,a0
    while (*path == '/') {
    8020404a:	02f00a13          	li	s4,47
    8020404e:	0ff00c13          	li	s8,255
    80204052:	0ff00d13          	li	s10,255
        return NULL;
    }

    while ((path = skipelem(path, name)) != 0) {
        elock(entry);
        if(devno&&entry == dev){
    80204056:	0056ac97          	auipc	s9,0x56a
    8020405a:	112c8c93          	addi	s9,s9,274 # 8076e168 <dev>
    8020405e:	aa0d                	j	80204190 <lookup_path+0x188>
        entry = edup(&self_fs->root);
    80204060:	00555517          	auipc	a0,0x555
    80204064:	38050513          	addi	a0,a0,896 # 807593e0 <FatFs+0x4830>
    80204068:	fffff097          	auipc	ra,0xfffff
    8020406c:	5c2080e7          	jalr	1474(ra) # 8020362a <edup>
    80204070:	89aa                	mv	s3,a0
    80204072:	bfe1                	j	8020404a <lookup_path+0x42>
        return NULL;
    80204074:	89aa                	mv	s3,a0
    } else if (*path != '\0') {
    80204076:	cba1                	beqz	a5,802040c6 <lookup_path+0xbe>
        self_fs = &FatFs[myproc()->cwd->dev];
    80204078:	00006097          	auipc	ra,0x6
    8020407c:	ab2080e7          	jalr	-1358(ra) # 80209b2a <myproc>
        entry = edup(myproc()->cwd);
    80204080:	00006097          	auipc	ra,0x6
    80204084:	aaa080e7          	jalr	-1366(ra) # 80209b2a <myproc>
    80204088:	7d68                	ld	a0,248(a0)
    8020408a:	fffff097          	auipc	ra,0xfffff
    8020408e:	5a0080e7          	jalr	1440(ra) # 8020362a <edup>
    80204092:	89aa                	mv	s3,a0
    80204094:	bf5d                	j	8020404a <lookup_path+0x42>
          eunlock(entry);
    80204096:	854e                	mv	a0,s3
    80204098:	00000097          	auipc	ra,0x0
    8020409c:	896080e7          	jalr	-1898(ra) # 8020392e <eunlock>
          *devno = devlookup(name);
    802040a0:	8556                	mv	a0,s5
    802040a2:	00002097          	auipc	ra,0x2
    802040a6:	46a080e7          	jalr	1130(ra) # 8020650c <devlookup>
    802040aa:	00ab2023          	sw	a0,0(s6)
          return entry;
    802040ae:	a821                	j	802040c6 <lookup_path+0xbe>
        }
        if (!(entry->attribute & ATTR_DIRECTORY)) {
            eunlock(entry);
    802040b0:	854e                	mv	a0,s3
    802040b2:	00000097          	auipc	ra,0x0
    802040b6:	87c080e7          	jalr	-1924(ra) # 8020392e <eunlock>
            eput(entry);
    802040ba:	854e                	mv	a0,s3
    802040bc:	00000097          	auipc	ra,0x0
    802040c0:	8c0080e7          	jalr	-1856(ra) # 8020397c <eput>
            return NULL;
    802040c4:	4981                	li	s3,0
    if (parent) {
        eput(entry);
        return NULL;
    }
    return entry;
}
    802040c6:	854e                	mv	a0,s3
    802040c8:	60e6                	ld	ra,88(sp)
    802040ca:	6446                	ld	s0,80(sp)
    802040cc:	64a6                	ld	s1,72(sp)
    802040ce:	6906                	ld	s2,64(sp)
    802040d0:	79e2                	ld	s3,56(sp)
    802040d2:	7a42                	ld	s4,48(sp)
    802040d4:	7aa2                	ld	s5,40(sp)
    802040d6:	7b02                	ld	s6,32(sp)
    802040d8:	6be2                	ld	s7,24(sp)
    802040da:	6c42                	ld	s8,16(sp)
    802040dc:	6ca2                	ld	s9,8(sp)
    802040de:	6d02                	ld	s10,0(sp)
    802040e0:	6125                	addi	sp,sp,96
    802040e2:	8082                	ret
            eunlock(entry);
    802040e4:	854e                	mv	a0,s3
    802040e6:	00000097          	auipc	ra,0x0
    802040ea:	848080e7          	jalr	-1976(ra) # 8020392e <eunlock>
            return entry;
    802040ee:	bfe1                	j	802040c6 <lookup_path+0xbe>
            eunlock(entry);
    802040f0:	854e                	mv	a0,s3
    802040f2:	00000097          	auipc	ra,0x0
    802040f6:	83c080e7          	jalr	-1988(ra) # 8020392e <eunlock>
            eput(entry);
    802040fa:	854e                	mv	a0,s3
    802040fc:	00000097          	auipc	ra,0x0
    80204100:	880080e7          	jalr	-1920(ra) # 8020397c <eput>
            return NULL;
    80204104:	89ca                	mv	s3,s2
    80204106:	b7c1                	j	802040c6 <lookup_path+0xbe>
    int len = path - s;
    80204108:	412487bb          	subw	a5,s1,s2
    if (len > FAT32_MAX_FILENAME) {
    8020410c:	863e                	mv	a2,a5
    8020410e:	00fc5363          	bge	s8,a5,80204114 <lookup_path+0x10c>
    80204112:	866a                	mv	a2,s10
    80204114:	0006079b          	sext.w	a5,a2
    name[len] = 0;
    80204118:	97d6                	add	a5,a5,s5
    8020411a:	00078023          	sb	zero,0(a5)
    memmove(name, s, len);
    8020411e:	2601                	sext.w	a2,a2
    80204120:	85ca                	mv	a1,s2
    80204122:	8556                	mv	a0,s5
    80204124:	ffffd097          	auipc	ra,0xffffd
    80204128:	cb0080e7          	jalr	-848(ra) # 80200dd4 <memmove>
    while (*path == '/') {
    8020412c:	0004c783          	lbu	a5,0(s1)
    80204130:	01479763          	bne	a5,s4,8020413e <lookup_path+0x136>
        path++;
    80204134:	0485                	addi	s1,s1,1
    while (*path == '/') {
    80204136:	0004c783          	lbu	a5,0(s1)
    8020413a:	ff478de3          	beq	a5,s4,80204134 <lookup_path+0x12c>
        elock(entry);
    8020413e:	854e                	mv	a0,s3
    80204140:	fffff097          	auipc	ra,0xfffff
    80204144:	7b8080e7          	jalr	1976(ra) # 802038f8 <elock>
        if(devno&&entry == dev){
    80204148:	000b0663          	beqz	s6,80204154 <lookup_path+0x14c>
    8020414c:	000cb783          	ld	a5,0(s9)
    80204150:	f53783e3          	beq	a5,s3,80204096 <lookup_path+0x8e>
        if (!(entry->attribute & ATTR_DIRECTORY)) {
    80204154:	1009c783          	lbu	a5,256(s3)
    80204158:	8bc1                	andi	a5,a5,16
    8020415a:	dbb9                	beqz	a5,802040b0 <lookup_path+0xa8>
        if (parent && *path == '\0') {
    8020415c:	000b8563          	beqz	s7,80204166 <lookup_path+0x15e>
    80204160:	0004c783          	lbu	a5,0(s1)
    80204164:	d3c1                	beqz	a5,802040e4 <lookup_path+0xdc>
        if ((next = dirlookup(entry, name, 0)) == 0) {
    80204166:	4601                	li	a2,0
    80204168:	85d6                	mv	a1,s5
    8020416a:	854e                	mv	a0,s3
    8020416c:	00000097          	auipc	ra,0x0
    80204170:	b72080e7          	jalr	-1166(ra) # 80203cde <dirlookup>
    80204174:	892a                	mv	s2,a0
    80204176:	dd2d                	beqz	a0,802040f0 <lookup_path+0xe8>
        eunlock(entry);
    80204178:	854e                	mv	a0,s3
    8020417a:	fffff097          	auipc	ra,0xfffff
    8020417e:	7b4080e7          	jalr	1972(ra) # 8020392e <eunlock>
        eput(entry);
    80204182:	854e                	mv	a0,s3
    80204184:	fffff097          	auipc	ra,0xfffff
    80204188:	7f8080e7          	jalr	2040(ra) # 8020397c <eput>
        entry = next;
    8020418c:	89ca                	mv	s3,s2
        eput(entry);
    8020418e:	8926                	mv	s2,s1
    while (*path == '/') {
    80204190:	00094783          	lbu	a5,0(s2)
    80204194:	03479363          	bne	a5,s4,802041ba <lookup_path+0x1b2>
        path++;
    80204198:	0905                	addi	s2,s2,1
    while (*path == '/') {
    8020419a:	00094783          	lbu	a5,0(s2)
    8020419e:	ff478de3          	beq	a5,s4,80204198 <lookup_path+0x190>
    if (*path == 0) { return NULL; }
    802041a2:	cf89                	beqz	a5,802041bc <lookup_path+0x1b4>
        path++;
    802041a4:	84ca                	mv	s1,s2
    while (*path != '/' && *path != 0) {
    802041a6:	f74781e3          	beq	a5,s4,80204108 <lookup_path+0x100>
        eput(entry);
    802041aa:	84ca                	mv	s1,s2
    while (*path != '/' && *path != 0) {
    802041ac:	dfb1                	beqz	a5,80204108 <lookup_path+0x100>
        path++;
    802041ae:	0485                	addi	s1,s1,1
    while (*path != '/' && *path != 0) {
    802041b0:	0004c783          	lbu	a5,0(s1)
    802041b4:	ff479ce3          	bne	a5,s4,802041ac <lookup_path+0x1a4>
    802041b8:	bf81                	j	80204108 <lookup_path+0x100>
    if (*path == 0) { return NULL; }
    802041ba:	fbe5                	bnez	a5,802041aa <lookup_path+0x1a2>
    if (parent) {
    802041bc:	f00b85e3          	beqz	s7,802040c6 <lookup_path+0xbe>
        eput(entry);
    802041c0:	854e                	mv	a0,s3
    802041c2:	fffff097          	auipc	ra,0xfffff
    802041c6:	7ba080e7          	jalr	1978(ra) # 8020397c <eput>
        return NULL;
    802041ca:	4981                	li	s3,0
    802041cc:	bded                	j	802040c6 <lookup_path+0xbe>

00000000802041ce <isdirempty>:

// Is the directory dp empty except for "." and ".." ?
int
isdirempty(struct dirent *dp)
{
    802041ce:	7165                	addi	sp,sp,-400
    802041d0:	e706                	sd	ra,392(sp)
    802041d2:	e322                	sd	s0,384(sp)
    802041d4:	0b00                	addi	s0,sp,400
  struct dirent ep;
  int count;
  int ret;
  ep.valid = 0;
    802041d6:	f8041b23          	sh	zero,-106(s0)
  ret = enext(dp, &ep, 2 * 32, &count);   // skip the "." and ".."
    802041da:	e7c40693          	addi	a3,s0,-388
    802041de:	04000613          	li	a2,64
    802041e2:	e8040593          	addi	a1,s0,-384
    802041e6:	00000097          	auipc	ra,0x0
    802041ea:	92a080e7          	jalr	-1750(ra) # 80203b10 <enext>
  return ret == -1;
    802041ee:	0505                	addi	a0,a0,1
}
    802041f0:	00153513          	seqz	a0,a0
    802041f4:	60ba                	ld	ra,392(sp)
    802041f6:	641a                	ld	s0,384(sp)
    802041f8:	6159                	addi	sp,sp,400
    802041fa:	8082                	ret

00000000802041fc <hashpath>:

int hashpath(char* name){
    802041fc:	1141                	addi	sp,sp,-16
    802041fe:	e422                	sd	s0,8(sp)
    80204200:	0800                	addi	s0,sp,16
  int hashvalue = 0;
  for(int i = 0;name[i];i++){
    80204202:	00054783          	lbu	a5,0(a0)
    80204206:	cf91                	beqz	a5,80204222 <hashpath+0x26>
    80204208:	872a                	mv	a4,a0
    8020420a:	0007851b          	sext.w	a0,a5
    8020420e:	0705                	addi	a4,a4,1
    hashvalue = hashvalue*128;
    hashvalue += name[i];
    if(hashvalue > NAME_HASH){
    80204210:	000f46b7          	lui	a3,0xf4
    80204214:	24068693          	addi	a3,a3,576 # f4240 <_entry-0x8010bdc0>
      hashvalue = hashvalue%NAME_HASH;
    80204218:	000f4637          	lui	a2,0xf4
    8020421c:	2406061b          	addiw	a2,a2,576
    80204220:	a031                	j	8020422c <hashpath+0x30>
  int hashvalue = 0;
    80204222:	4501                	li	a0,0
    }
  }
  return hashvalue;
}
    80204224:	6422                	ld	s0,8(sp)
    80204226:	0141                	addi	sp,sp,16
    80204228:	8082                	ret
    8020422a:	0705                	addi	a4,a4,1
  for(int i = 0;name[i];i++){
    8020422c:	00074783          	lbu	a5,0(a4)
    80204230:	dbf5                	beqz	a5,80204224 <hashpath+0x28>
    hashvalue = hashvalue*128;
    80204232:	0075151b          	slliw	a0,a0,0x7
    hashvalue += name[i];
    80204236:	9fa9                	addw	a5,a5,a0
    80204238:	0007851b          	sext.w	a0,a5
    if(hashvalue > NAME_HASH){
    8020423c:	fea6d7e3          	bge	a3,a0,8020422a <hashpath+0x2e>
      hashvalue = hashvalue%NAME_HASH;
    80204240:	02c7e53b          	remw	a0,a5,a2
    80204244:	b7dd                	j	8020422a <hashpath+0x2e>

0000000080204246 <ekstat>:


void ekstat(struct dirent *de, struct kstat *st)
{
    80204246:	1101                	addi	sp,sp,-32
    80204248:	ec06                	sd	ra,24(sp)
    8020424a:	e822                	sd	s0,16(sp)
    8020424c:	e426                	sd	s1,8(sp)
    8020424e:	e04a                	sd	s2,0(sp)
    80204250:	1000                	addi	s0,sp,32
    80204252:	892a                	mv	s2,a0
    80204254:	84ae                	mv	s1,a1
    struct fs *self_fs = &FatFs[de->dev];
    80204256:	11454703          	lbu	a4,276(a0)
    st->st_dev = de->dev;
    8020425a:	e198                	sd	a4,0(a1)
    st->st_size = de->file_size;
    8020425c:	10856783          	lwu	a5,264(a0)
    80204260:	f99c                	sd	a5,48(a1)
    st->st_blksize = self_fs->fat.bpb.byts_per_sec;
    80204262:	6695                	lui	a3,0x5
    80204264:	9b868693          	addi	a3,a3,-1608 # 49b8 <_entry-0x801fb648>
    80204268:	02d706b3          	mul	a3,a4,a3
    8020426c:	00551717          	auipc	a4,0x551
    80204270:	94470713          	addi	a4,a4,-1724 # 80754bb0 <FatFs>
    80204274:	9736                	add	a4,a4,a3
    80204276:	02075683          	lhu	a3,32(a4)
    8020427a:	dd94                	sw	a3,56(a1)
    st->st_blocks = (st->st_size + st->st_blksize - 1) / st->st_blksize;
    8020427c:	97b6                	add	a5,a5,a3
    8020427e:	17fd                	addi	a5,a5,-1
    80204280:	02d7c7b3          	div	a5,a5,a3
    80204284:	e1bc                	sd	a5,64(a1)
    st->st_atime_nsec = 0;
    80204286:	0405b823          	sd	zero,80(a1)
    st->st_atime_sec = 0;
    8020428a:	0405b423          	sd	zero,72(a1)
    st->st_ctime_nsec = 0;
    8020428e:	0605b823          	sd	zero,112(a1)
    st->st_ctime_sec = 0;
    80204292:	0605b423          	sd	zero,104(a1)
    st->st_mtime_nsec = 0;
    80204296:	0605b023          	sd	zero,96(a1)
    st->st_mtime_sec = 0;
    8020429a:	0405bc23          	sd	zero,88(a1)
    st->st_uid = 0;
    8020429e:	0005ac23          	sw	zero,24(a1)
    st->st_gid = 0;
    802042a2:	0005ae23          	sw	zero,28(a1)
    st->st_dev = self_fs->devno;
    802042a6:	00076783          	lwu	a5,0(a4)
    802042aa:	e19c                	sd	a5,0(a1)
    st->st_rdev = de->dev;
    802042ac:	11454783          	lbu	a5,276(a0)
    802042b0:	f19c                	sd	a5,32(a1)
    st->st_nlink = 1;
    802042b2:	4785                	li	a5,1
    802042b4:	c9dc                	sw	a5,20(a1)
    st->st_ino = hashpath(de->filename);
    802042b6:	00000097          	auipc	ra,0x0
    802042ba:	f46080e7          	jalr	-186(ra) # 802041fc <hashpath>
    802042be:	e488                	sd	a0,8(s1)
    st->st_mode = 0;
    802042c0:	0004a823          	sw	zero,16(s1)
    st->st_mode = (de->attribute & ATTR_DIRECTORY) ? S_IFDIR : S_IFREG;
    802042c4:	10094703          	lbu	a4,256(s2)
    802042c8:	8b41                	andi	a4,a4,16
    802042ca:	6791                	lui	a5,0x4
    802042cc:	e311                	bnez	a4,802042d0 <ekstat+0x8a>
    802042ce:	67a1                	lui	a5,0x8
    st->st_mode |= 0x1ff;
    802042d0:	1ff7e793          	ori	a5,a5,511
    802042d4:	c89c                	sw	a5,16(s1)
}
    802042d6:	60e2                	ld	ra,24(sp)
    802042d8:	6442                	ld	s0,16(sp)
    802042da:	64a2                	ld	s1,8(sp)
    802042dc:	6902                	ld	s2,0(sp)
    802042de:	6105                	addi	sp,sp,32
    802042e0:	8082                	ret

00000000802042e2 <estatfs>:


void estatfs(struct dirent *de, struct statfs *st){
    802042e2:	1141                	addi	sp,sp,-16
    802042e4:	e422                	sd	s0,8(sp)
    802042e6:	0800                	addi	s0,sp,16
    struct fs *self_fs = &FatFs[de->dev];
    802042e8:	11454783          	lbu	a5,276(a0)
    st->f_type = 0;
    802042ec:	0005b023          	sd	zero,0(a1)
    st->f_bsize = self_fs->fat.byts_per_clus;
    802042f0:	6715                	lui	a4,0x5
    802042f2:	9b870713          	addi	a4,a4,-1608 # 49b8 <_entry-0x801fb648>
    802042f6:	02e78733          	mul	a4,a5,a4
    802042fa:	00551797          	auipc	a5,0x551
    802042fe:	8b678793          	addi	a5,a5,-1866 # 80754bb0 <FatFs>
    80204302:	97ba                	add	a5,a5,a4
    80204304:	01c7e703          	lwu	a4,28(a5)
    80204308:	e598                	sd	a4,8(a1)
    st->f_blocks = self_fs->fat.data_clus_cnt;
    8020430a:	0187e703          	lwu	a4,24(a5)
    8020430e:	e998                	sd	a4,16(a1)
    st->f_bfree = self_fs->fat.bpb.rsvd_sec_cnt;
    80204310:	0247d703          	lhu	a4,36(a5)
    80204314:	ed98                	sd	a4,24(a1)
    st->f_bavail = self_fs->fat.bpb.rsvd_sec_cnt-self_fs->fat.bpb.hidd_sec;
    80204316:	0247d703          	lhu	a4,36(a5)
    8020431a:	579c                	lw	a5,40(a5)
    8020431c:	40f707bb          	subw	a5,a4,a5
    80204320:	1782                	slli	a5,a5,0x20
    80204322:	9381                	srli	a5,a5,0x20
    80204324:	f19c                	sd	a5,32(a1)
    st->f_files = FILENUM(self_fs);
    80204326:	47b5                	li	a5,13
    80204328:	f59c                	sd	a5,40(a1)
    st->f_ffree = FILEFREE(self_fs);
    8020432a:	0205b823          	sd	zero,48(a1)
    st->f_namelen = FAT32_MAX_FILENAME;
    8020432e:	0ff00793          	li	a5,255
    80204332:	e1bc                	sd	a5,64(a1)
}
    80204334:	6422                	ld	s0,8(sp)
    80204336:	0141                	addi	sp,sp,16
    80204338:	8082                	ret

000000008020433a <ename>:

struct dirent *ename(struct dirent* env,char *path,int* devno)
{
    8020433a:	716d                	addi	sp,sp,-272
    8020433c:	e606                	sd	ra,264(sp)
    8020433e:	e222                	sd	s0,256(sp)
    80204340:	0a00                	addi	s0,sp,272
    80204342:	8732                	mv	a4,a2
    char name[FAT32_MAX_FILENAME + 1];
    return lookup_path(env,path, 0, name, devno);
    80204344:	ef040693          	addi	a3,s0,-272
    80204348:	4601                	li	a2,0
    8020434a:	00000097          	auipc	ra,0x0
    8020434e:	cbe080e7          	jalr	-834(ra) # 80204008 <lookup_path>
}
    80204352:	60b2                	ld	ra,264(sp)
    80204354:	6412                	ld	s0,256(sp)
    80204356:	6151                	addi	sp,sp,272
    80204358:	8082                	ret

000000008020435a <enameparent>:

struct dirent *enameparent(struct dirent* env,char *path, char *name,int* devno)
{
    8020435a:	1141                	addi	sp,sp,-16
    8020435c:	e406                	sd	ra,8(sp)
    8020435e:	e022                	sd	s0,0(sp)
    80204360:	0800                	addi	s0,sp,16
    80204362:	8736                	mv	a4,a3
    return lookup_path(env,path, 1, name, devno);
    80204364:	86b2                	mv	a3,a2
    80204366:	4605                	li	a2,1
    80204368:	00000097          	auipc	ra,0x0
    8020436c:	ca0080e7          	jalr	-864(ra) # 80204008 <lookup_path>
}
    80204370:	60a2                	ld	ra,8(sp)
    80204372:	6402                	ld	s0,0(sp)
    80204374:	0141                	addi	sp,sp,16
    80204376:	8082                	ret

0000000080204378 <emount>:

int emount(struct fs* fatfs,char* mnt){
    80204378:	1101                	addi	sp,sp,-32
    8020437a:	ec06                	sd	ra,24(sp)
    8020437c:	e822                	sd	s0,16(sp)
    8020437e:	e426                	sd	s1,8(sp)
    80204380:	1000                	addi	s0,sp,32
    80204382:	84aa                	mv	s1,a0
    struct dirent* mntpoint = ename(NULL,mnt,0);
    80204384:	4601                	li	a2,0
    80204386:	4501                	li	a0,0
    80204388:	00000097          	auipc	ra,0x0
    8020438c:	fb2080e7          	jalr	-78(ra) # 8020433a <ename>
    if(mntpoint == NULL||!(mntpoint->attribute&ATTR_DIRECTORY))return -1; 
    80204390:	c90d                	beqz	a0,802043c2 <emount+0x4a>
    80204392:	10054783          	lbu	a5,256(a0)
    80204396:	8bc1                	andi	a5,a5,16
    80204398:	c79d                	beqz	a5,802043c6 <emount+0x4e>
    mntpoint = edup(mntpoint);
    8020439a:	fffff097          	auipc	ra,0xfffff
    8020439e:	290080e7          	jalr	656(ra) # 8020362a <edup>
    mntpoint->mnt = 1;
    802043a2:	4785                	li	a5,1
    802043a4:	10f52e23          	sw	a5,284(a0)
    mntpoint->dev = fatfs->devno;
    802043a8:	409c                	lw	a5,0(s1)
    802043aa:	10f50a23          	sb	a5,276(a0)
    fatfs->root.parent = mntpoint;
    802043ae:	6795                	lui	a5,0x5
    802043b0:	94be                	add	s1,s1,a5
    802043b2:	94a4bc23          	sd	a0,-1704(s1)
    return 0;
    802043b6:	4501                	li	a0,0
}
    802043b8:	60e2                	ld	ra,24(sp)
    802043ba:	6442                	ld	s0,16(sp)
    802043bc:	64a2                	ld	s1,8(sp)
    802043be:	6105                	addi	sp,sp,32
    802043c0:	8082                	ret
    if(mntpoint == NULL||!(mntpoint->attribute&ATTR_DIRECTORY))return -1; 
    802043c2:	557d                	li	a0,-1
    802043c4:	bfd5                	j	802043b8 <emount+0x40>
    802043c6:	557d                	li	a0,-1
    802043c8:	bfc5                	j	802043b8 <emount+0x40>

00000000802043ca <eumount>:

int eumount(char* mnt){
    802043ca:	1101                	addi	sp,sp,-32
    802043cc:	ec06                	sd	ra,24(sp)
    802043ce:	e822                	sd	s0,16(sp)
    802043d0:	e426                	sd	s1,8(sp)
    802043d2:	1000                	addi	s0,sp,32
    802043d4:	85aa                	mv	a1,a0
    struct dirent* mntpoint = ename(NULL,mnt,0);
    802043d6:	4601                	li	a2,0
    802043d8:	4501                	li	a0,0
    802043da:	00000097          	auipc	ra,0x0
    802043de:	f60080e7          	jalr	-160(ra) # 8020433a <ename>
    if(mntpoint == NULL)return -1; 
    802043e2:	c939                	beqz	a0,80204438 <eumount+0x6e>
    802043e4:	84aa                	mv	s1,a0
    if(mntpoint->mnt) mntpoint->mnt=0;
    802043e6:	11c52783          	lw	a5,284(a0)
    802043ea:	c399                	beqz	a5,802043f0 <eumount+0x26>
    802043ec:	10052e23          	sw	zero,284(a0)
    if(FatFs[mntpoint->dev].image)eput(FatFs[mntpoint->dev].image);
    802043f0:	1144c783          	lbu	a5,276(s1)
    802043f4:	6715                	lui	a4,0x5
    802043f6:	9b870713          	addi	a4,a4,-1608 # 49b8 <_entry-0x801fb648>
    802043fa:	02e78733          	mul	a4,a5,a4
    802043fe:	00550797          	auipc	a5,0x550
    80204402:	7b278793          	addi	a5,a5,1970 # 80754bb0 <FatFs>
    80204406:	97ba                	add	a5,a5,a4
    80204408:	6788                	ld	a0,8(a5)
    8020440a:	c509                	beqz	a0,80204414 <eumount+0x4a>
    8020440c:	fffff097          	auipc	ra,0xfffff
    80204410:	570080e7          	jalr	1392(ra) # 8020397c <eput>
    if(mntpoint->parent)mntpoint->dev = mntpoint->parent->dev;
    80204414:	1284b783          	ld	a5,296(s1)
    80204418:	c789                	beqz	a5,80204422 <eumount+0x58>
    8020441a:	1147c783          	lbu	a5,276(a5)
    8020441e:	10f48a23          	sb	a5,276(s1)
    eput(mntpoint);
    80204422:	8526                	mv	a0,s1
    80204424:	fffff097          	auipc	ra,0xfffff
    80204428:	558080e7          	jalr	1368(ra) # 8020397c <eput>
    return 0;
    8020442c:	4501                	li	a0,0
}
    8020442e:	60e2                	ld	ra,24(sp)
    80204430:	6442                	ld	s0,16(sp)
    80204432:	64a2                	ld	s1,8(sp)
    80204434:	6105                	addi	sp,sp,32
    80204436:	8082                	ret
    if(mntpoint == NULL)return -1; 
    80204438:	557d                	li	a0,-1
    8020443a:	bfd5                	j	8020442e <eumount+0x64>

000000008020443c <create>:
}


struct dirent*
create(struct dirent* env, char *path, short type, int mode, int *err)
{
    8020443c:	dc010113          	addi	sp,sp,-576
    80204440:	22113c23          	sd	ra,568(sp)
    80204444:	22813823          	sd	s0,560(sp)
    80204448:	22913423          	sd	s1,552(sp)
    8020444c:	23213023          	sd	s2,544(sp)
    80204450:	21313c23          	sd	s3,536(sp)
    80204454:	21413823          	sd	s4,528(sp)
    80204458:	21513423          	sd	s5,520(sp)
    8020445c:	21613023          	sd	s6,512(sp)
    80204460:	0480                	addi	s0,sp,576
    80204462:	8aaa                	mv	s5,a0
    80204464:	8a2e                	mv	s4,a1
    80204466:	8932                	mv	s2,a2
    80204468:	8b3a                	mv	s6,a4
  if (type == T_DIR) {
    mode = ATTR_DIRECTORY;
  } else if (mode & O_RDONLY) {
    mode = ATTR_READ_ONLY;
  } else {
    mode = 0;  
    8020446a:	fff60993          	addi	s3,a2,-1 # f3fff <_entry-0x8010c001>
    8020446e:	0019b993          	seqz	s3,s3
    80204472:	0992                	slli	s3,s3,0x4
  }

  if((dp = enameparent(env, path, name, 0)) == NULL)
    80204474:	4681                	li	a3,0
    80204476:	ec040613          	addi	a2,s0,-320
    8020447a:	00000097          	auipc	ra,0x0
    8020447e:	ee0080e7          	jalr	-288(ra) # 8020435a <enameparent>
    80204482:	c541                	beqz	a0,8020450a <create+0xce>
    80204484:	84aa                	mv	s1,a0
      return NULL;
    } 
  }
  else
  {
    elock(dp);
    80204486:	fffff097          	auipc	ra,0xfffff
    8020448a:	472080e7          	jalr	1138(ra) # 802038f8 <elock>
  }
  
  if ((ep = ealloc(dp, name, mode)) == NULL) {
    8020448e:	864e                	mv	a2,s3
    80204490:	ec040593          	addi	a1,s0,-320
    80204494:	8526                	mv	a0,s1
    80204496:	00000097          	auipc	ra,0x0
    8020449a:	9ee080e7          	jalr	-1554(ra) # 80203e84 <ealloc>
    8020449e:	89aa                	mv	s3,a0
    802044a0:	14050663          	beqz	a0,802045ec <create+0x1b0>
    eput(dp);
    *err = -EINVAL;
    return NULL;
  }
  
  if ((type == T_DIR && !(ep->attribute & ATTR_DIRECTORY)) ||
    802044a4:	0009079b          	sext.w	a5,s2
    802044a8:	4705                	li	a4,1
    802044aa:	14e78f63          	beq	a5,a4,80204608 <create+0x1cc>
    802044ae:	2901                	sext.w	s2,s2
    802044b0:	4789                	li	a5,2
    802044b2:	00f91763          	bne	s2,a5,802044c0 <create+0x84>
      (type == T_FILE && (ep->attribute & ATTR_DIRECTORY))) {
    802044b6:	10054783          	lbu	a5,256(a0)
    802044ba:	8bc1                	andi	a5,a5,16
    802044bc:	14079b63          	bnez	a5,80204612 <create+0x1d6>
    eput(dp);
    *err = -EINVAL;
    return NULL;
  }

  eunlock(dp);
    802044c0:	8526                	mv	a0,s1
    802044c2:	fffff097          	auipc	ra,0xfffff
    802044c6:	46c080e7          	jalr	1132(ra) # 8020392e <eunlock>
  eput(dp);
    802044ca:	8526                	mv	a0,s1
    802044cc:	fffff097          	auipc	ra,0xfffff
    802044d0:	4b0080e7          	jalr	1200(ra) # 8020397c <eput>
  elock(ep);
    802044d4:	854e                	mv	a0,s3
    802044d6:	fffff097          	auipc	ra,0xfffff
    802044da:	422080e7          	jalr	1058(ra) # 802038f8 <elock>
  *err = 0;
    802044de:	000b2023          	sw	zero,0(s6)
  return ep;
}
    802044e2:	854e                	mv	a0,s3
    802044e4:	23813083          	ld	ra,568(sp)
    802044e8:	23013403          	ld	s0,560(sp)
    802044ec:	22813483          	ld	s1,552(sp)
    802044f0:	22013903          	ld	s2,544(sp)
    802044f4:	21813983          	ld	s3,536(sp)
    802044f8:	21013a03          	ld	s4,528(sp)
    802044fc:	20813a83          	ld	s5,520(sp)
    80204500:	20013b03          	ld	s6,512(sp)
    80204504:	24010113          	addi	sp,sp,576
    80204508:	8082                	ret
  int len = strlen(path);
    8020450a:	8552                	mv	a0,s4
    8020450c:	ffffd097          	auipc	ra,0xffffd
    80204510:	9f0080e7          	jalr	-1552(ra) # 80200efc <strlen>
    80204514:	84aa                	mv	s1,a0
  strncpy(pname, path, len + 1);
    80204516:	0015061b          	addiw	a2,a0,1
    8020451a:	85d2                	mv	a1,s4
    8020451c:	dc040513          	addi	a0,s0,-576
    80204520:	ffffd097          	auipc	ra,0xffffd
    80204524:	96c080e7          	jalr	-1684(ra) # 80200e8c <strncpy>
  int i = len - 1;
    80204528:	fff4871b          	addiw	a4,s1,-1
  if(pname[i] == '/' && i == 0)		// root dir
    8020452c:	fc040793          	addi	a5,s0,-64
    80204530:	97ba                	add	a5,a5,a4
    80204532:	e007c683          	lbu	a3,-512(a5)
    80204536:	02f00793          	li	a5,47
    8020453a:	02f68863          	beq	a3,a5,8020456a <create+0x12e>
  for(; i >= 0; --i)
    8020453e:	06074363          	bltz	a4,802045a4 <create+0x168>
    80204542:	dc040793          	addi	a5,s0,-576
    80204546:	97ba                	add	a5,a5,a4
    80204548:	dbf40693          	addi	a3,s0,-577
    8020454c:	96ba                	add	a3,a3,a4
    8020454e:	1702                	slli	a4,a4,0x20
    80204550:	9301                	srli	a4,a4,0x20
    80204552:	40e68733          	sub	a4,a3,a4
    if(pname[i] == '/')
    80204556:	02f00613          	li	a2,47
    8020455a:	0007c683          	lbu	a3,0(a5)
    8020455e:	04c68163          	beq	a3,a2,802045a0 <create+0x164>
  for(; i >= 0; --i)
    80204562:	17fd                	addi	a5,a5,-1
    80204564:	fee79be3          	bne	a5,a4,8020455a <create+0x11e>
    80204568:	a835                	j	802045a4 <create+0x168>
  if(pname[i] == '/' && i == 0)		// root dir
    8020456a:	c701                	beqz	a4,80204572 <create+0x136>
    i--;
    8020456c:	ffe4871b          	addiw	a4,s1,-2
    80204570:	b7f9                	j	8020453e <create+0x102>
    pname[0] = 0;
    80204572:	dc040023          	sb	zero,-576(s0)
      *err = -EEXIST;
    80204576:	57bd                	li	a5,-17
    80204578:	00fb2023          	sw	a5,0(s6)
      elock(&rootfs->root);
    8020457c:	00567917          	auipc	s2,0x567
    80204580:	6d490913          	addi	s2,s2,1748 # 8076bc50 <rootfs>
    80204584:	00093503          	ld	a0,0(s2)
    80204588:	6995                	lui	s3,0x5
    8020458a:	83098493          	addi	s1,s3,-2000 # 4830 <_entry-0x801fb7d0>
    8020458e:	9526                	add	a0,a0,s1
    80204590:	fffff097          	auipc	ra,0xfffff
    80204594:	368080e7          	jalr	872(ra) # 802038f8 <elock>
      return &rootfs->root;
    80204598:	00093983          	ld	s3,0(s2)
    8020459c:	99a6                	add	s3,s3,s1
    8020459e:	b791                	j	802044e2 <create+0xa6>
      pname[i] = 0;
    802045a0:	00078023          	sb	zero,0(a5)
  int len2 = strlen(pname);
    802045a4:	dc040513          	addi	a0,s0,-576
    802045a8:	ffffd097          	auipc	ra,0xffffd
    802045ac:	954080e7          	jalr	-1708(ra) # 80200efc <strlen>
  strncpy(name, path + len2 + 1, len - len2 + 1);
    802045b0:	40a4863b          	subw	a2,s1,a0
    802045b4:	00150593          	addi	a1,a0,1
    802045b8:	2605                	addiw	a2,a2,1
    802045ba:	95d2                	add	a1,a1,s4
    802045bc:	ec040513          	addi	a0,s0,-320
    802045c0:	ffffd097          	auipc	ra,0xffffd
    802045c4:	8cc080e7          	jalr	-1844(ra) # 80200e8c <strncpy>
    if(pname[0] == 0)
    802045c8:	dc044783          	lbu	a5,-576(s0)
    802045cc:	d7cd                	beqz	a5,80204576 <create+0x13a>
    dp = create(env, pname, T_DIR, O_RDWR, err);
    802045ce:	875a                	mv	a4,s6
    802045d0:	4689                	li	a3,2
    802045d2:	4605                	li	a2,1
    802045d4:	dc040593          	addi	a1,s0,-576
    802045d8:	8556                	mv	a0,s5
    802045da:	00000097          	auipc	ra,0x0
    802045de:	e62080e7          	jalr	-414(ra) # 8020443c <create>
    802045e2:	84aa                	mv	s1,a0
    if(dp == NULL)
    802045e4:	ea0515e3          	bnez	a0,8020448e <create+0x52>
      return NULL;
    802045e8:	89aa                	mv	s3,a0
    802045ea:	bde5                	j	802044e2 <create+0xa6>
    eunlock(dp);
    802045ec:	8526                	mv	a0,s1
    802045ee:	fffff097          	auipc	ra,0xfffff
    802045f2:	340080e7          	jalr	832(ra) # 8020392e <eunlock>
    eput(dp);
    802045f6:	8526                	mv	a0,s1
    802045f8:	fffff097          	auipc	ra,0xfffff
    802045fc:	384080e7          	jalr	900(ra) # 8020397c <eput>
    *err = -EINVAL;
    80204600:	57a9                	li	a5,-22
    80204602:	00fb2023          	sw	a5,0(s6)
    return NULL;
    80204606:	bdf1                	j	802044e2 <create+0xa6>
  if ((type == T_DIR && !(ep->attribute & ATTR_DIRECTORY)) ||
    80204608:	10054783          	lbu	a5,256(a0)
    8020460c:	8bc1                	andi	a5,a5,16
    8020460e:	ea0799e3          	bnez	a5,802044c0 <create+0x84>
    eunlock(dp);
    80204612:	8526                	mv	a0,s1
    80204614:	fffff097          	auipc	ra,0xfffff
    80204618:	31a080e7          	jalr	794(ra) # 8020392e <eunlock>
    eput(ep);
    8020461c:	854e                	mv	a0,s3
    8020461e:	fffff097          	auipc	ra,0xfffff
    80204622:	35e080e7          	jalr	862(ra) # 8020397c <eput>
    eput(dp);
    80204626:	8526                	mv	a0,s1
    80204628:	fffff097          	auipc	ra,0xfffff
    8020462c:	354080e7          	jalr	852(ra) # 8020397c <eput>
    *err = -EINVAL;
    80204630:	57a9                	li	a5,-22
    80204632:	00fb2023          	sw	a5,0(s6)
    return NULL;
    80204636:	4981                	li	s3,0
    80204638:	b56d                	j	802044e2 <create+0xa6>

000000008020463a <pipepoll>:
}


static
uint32 pipepoll(struct file *fp, struct poll_table *pt)
{
    8020463a:	7139                	addi	sp,sp,-64
    8020463c:	fc06                	sd	ra,56(sp)
    8020463e:	f822                	sd	s0,48(sp)
    80204640:	f426                	sd	s1,40(sp)
    80204642:	f04a                	sd	s2,32(sp)
    80204644:	ec4e                	sd	s3,24(sp)
    80204646:	0080                	addi	s0,sp,64
    80204648:	892a                	mv	s2,a0
    8020464a:	89ae                	mv	s3,a1
	uint32 mask = 0;
	struct pipe *pi = fp->pipe;
    8020464c:	6904                	ld	s1,16(a0)
	initlock(&wq->lock, str);
	list_init(&wq->head);
}

static inline int wait_queue_empty(struct wait_queue *wq) {
	return list_empty(&wq->head);
    8020464e:	03048793          	addi	a5,s1,48

	__debug_info("pipepoll", "r/w=%d/%d | ro/wo=%d/%d | rq/wq=%d/%d rn/wn=%d/%d\n",
    80204652:	0384b883          	ld	a7,56(s1)
    80204656:	40f888b3          	sub	a7,a7,a5
    8020465a:	05848793          	addi	a5,s1,88
    8020465e:	0604b803          	ld	a6,96(s1)
    80204662:	40f80833          	sub	a6,a6,a5
    80204666:	0714c783          	lbu	a5,113(s1)
    8020466a:	0704c703          	lbu	a4,112(s1)
    8020466e:	54f4                	lw	a3,108(s1)
    80204670:	e436                	sd	a3,8(sp)
    80204672:	54b4                	lw	a3,104(s1)
    80204674:	e036                	sd	a3,0(sp)
    80204676:	011038b3          	snez	a7,a7
    8020467a:	01003833          	snez	a6,a6
    8020467e:	00954683          	lbu	a3,9(a0)
    80204682:	00854603          	lbu	a2,8(a0)
    80204686:	0000d597          	auipc	a1,0xd
    8020468a:	dc258593          	addi	a1,a1,-574 # 80211448 <rodata_start+0x448>
    8020468e:	0000d517          	auipc	a0,0xd
    80204692:	df250513          	addi	a0,a0,-526 # 80211480 <rodata_start+0x480>
    80204696:	00003097          	auipc	ra,0x3
    8020469a:	a48080e7          	jalr	-1464(ra) # 802070de <__debug_info>
				fp->readable, fp->writable, pi->readopen, pi->writeopen,
				!wait_queue_empty(&pi->rqueue), !wait_queue_empty(&pi->wqueue),
				pi->nread, pi->nwrite);

	if (fp->readable)
    8020469e:	00894783          	lbu	a5,8(s2)
    802046a2:	c3d1                	beqz	a5,80204726 <pipepoll+0xec>


static inline void
poll_wait(struct file * fp, struct wait_queue *wq, struct poll_table *pt)
{
	if (pt && pt->func && wq)
    802046a4:	0a098463          	beqz	s3,8020474c <pipepoll+0x112>
    802046a8:	0009b783          	ld	a5,0(s3)
    802046ac:	cbad                	beqz	a5,8020471e <pipepoll+0xe4>
		pt->func(fp, wq, pt);
    802046ae:	864e                	mv	a2,s3
    802046b0:	04048593          	addi	a1,s1,64
    802046b4:	854a                	mv	a0,s2
    802046b6:	9782                	jalr	a5
		poll_wait(fp, &pi->rqueue, pt);
	if (fp->writable)
    802046b8:	00994783          	lbu	a5,9(s2)
    802046bc:	c781                	beqz	a5,802046c4 <pipepoll+0x8a>
		poll_wait(fp, &pi->wqueue, pt);
    802046be:	01848593          	addi	a1,s1,24
	if (pt && pt->func && wq)
    802046c2:	a895                	j	80204736 <pipepoll+0xfc>

	if (fp->readable) {
    802046c4:	00894783          	lbu	a5,8(s2)
	uint32 mask = 0;
    802046c8:	4501                	li	a0,0
	if (fp->readable) {
    802046ca:	c3b9                	beqz	a5,80204710 <pipepoll+0xd6>
		if (pi->nwrite - pi->nread > 0)			// has something to read
    802046cc:	54e8                	lw	a0,108(s1)
    802046ce:	54bc                	lw	a5,104(s1)
    802046d0:	8d1d                	sub	a0,a0,a5
    802046d2:	00a037b3          	snez	a5,a0
	uint32 mask = 0;
    802046d6:	00a03533          	snez	a0,a0
			mask |= POLLIN;
		if (!pi->writeopen) {
    802046da:	0714c703          	lbu	a4,113(s1)
    802046de:	e701                	bnez	a4,802046e6 <pipepoll+0xac>
			// if (pi->nwrite - pi->nread == 0)
			// 	mask |= POLLPRI;
			// else
				mask |= POLLHUP;
    802046e0:	0107e513          	ori	a0,a5,16
    802046e4:	2501                	sext.w	a0,a0
		}
	}

	if (fp->writable) {
    802046e6:	00994783          	lbu	a5,9(s2)
    802046ea:	c39d                	beqz	a5,80204710 <pipepoll+0xd6>
		if (pi->nwrite - pi->nread < PIPESIZE(pi))	// has room to write
    802046ec:	54f8                	lw	a4,108(s1)
    802046ee:	54bc                	lw	a5,104(s1)
    802046f0:	0734c683          	lbu	a3,115(s1)
    802046f4:	9f1d                	subw	a4,a4,a5
    802046f6:	20000793          	li	a5,512
    802046fa:	00d797bb          	sllw	a5,a5,a3
    802046fe:	00f77463          	bgeu	a4,a5,80204706 <pipepoll+0xcc>
			mask |= POLLOUT;
    80204702:	00456513          	ori	a0,a0,4
		if (!pi->readopen)
    80204706:	0704c783          	lbu	a5,112(s1)
    8020470a:	e399                	bnez	a5,80204710 <pipepoll+0xd6>
			mask |= POLLERR;
    8020470c:	00856513          	ori	a0,a0,8
	}

	return mask;
}
    80204710:	70e2                	ld	ra,56(sp)
    80204712:	7442                	ld	s0,48(sp)
    80204714:	74a2                	ld	s1,40(sp)
    80204716:	7902                	ld	s2,32(sp)
    80204718:	69e2                	ld	s3,24(sp)
    8020471a:	6121                	addi	sp,sp,64
    8020471c:	8082                	ret
	if (fp->writable)
    8020471e:	00994783          	lbu	a5,9(s2)
    80204722:	ffd1                	bnez	a5,802046be <pipepoll+0x84>
    80204724:	b765                	j	802046cc <pipepoll+0x92>
    80204726:	00994783          	lbu	a5,9(s2)
	uint32 mask = 0;
    8020472a:	4501                	li	a0,0
	if (fp->writable)
    8020472c:	d3f5                	beqz	a5,80204710 <pipepoll+0xd6>
    8020472e:	02098263          	beqz	s3,80204752 <pipepoll+0x118>
		poll_wait(fp, &pi->wqueue, pt);
    80204732:	01848593          	addi	a1,s1,24
    80204736:	0009b783          	ld	a5,0(s3)
    8020473a:	cf81                	beqz	a5,80204752 <pipepoll+0x118>
		pt->func(fp, wq, pt);
    8020473c:	864e                	mv	a2,s3
    8020473e:	854a                	mv	a0,s2
    80204740:	9782                	jalr	a5
	if (fp->readable) {
    80204742:	00894783          	lbu	a5,8(s2)
	uint32 mask = 0;
    80204746:	4501                	li	a0,0
	if (fp->readable) {
    80204748:	dfd9                	beqz	a5,802046e6 <pipepoll+0xac>
    8020474a:	b749                	j	802046cc <pipepoll+0x92>
	if (fp->writable)
    8020474c:	00994783          	lbu	a5,9(s2)
    80204750:	dbb5                	beqz	a5,802046c4 <pipepoll+0x8a>
	if (fp->readable) {
    80204752:	00894783          	lbu	a5,8(s2)
	uint32 mask = 0;
    80204756:	4501                	li	a0,0
	if (fp->readable) {
    80204758:	dbd1                	beqz	a5,802046ec <pipepoll+0xb2>
    8020475a:	bf8d                	j	802046cc <pipepoll+0x92>

000000008020475c <pipewakeup>:
{
    8020475c:	1101                	addi	sp,sp,-32
    8020475e:	ec06                	sd	ra,24(sp)
    80204760:	e822                	sd	s0,16(sp)
    80204762:	e426                	sd	s1,8(sp)
    80204764:	e04a                	sd	s2,0(sp)
    80204766:	1000                	addi	s0,sp,32
	queue = (who == PIPE_READER) ? &pi->rqueue : &pi->wqueue;
    80204768:	01850493          	addi	s1,a0,24
    8020476c:	e199                	bnez	a1,80204772 <pipewakeup+0x16>
    8020476e:	04050493          	addi	s1,a0,64
	acquire(&queue->lock);
    80204772:	8926                	mv	s2,s1
    80204774:	8526                	mv	a0,s1
    80204776:	00002097          	auipc	ra,0x2
    8020477a:	3f8080e7          	jalr	1016(ra) # 80206b6e <acquire>
	return head->next == head;
    8020477e:	709c                	ld	a5,32(s1)
    80204780:	04e1                	addi	s1,s1,24
	if (!wait_queue_empty(queue)) {
    80204782:	00978863          	beq	a5,s1,80204792 <pipewakeup+0x36>
		wakeup(wno->chan);
    80204786:	ff87b503          	ld	a0,-8(a5)
    8020478a:	ffffd097          	auipc	ra,0xffffd
    8020478e:	556080e7          	jalr	1366(ra) # 80201ce0 <wakeup>
	release(&queue->lock);
    80204792:	854a                	mv	a0,s2
    80204794:	00002097          	auipc	ra,0x2
    80204798:	42e080e7          	jalr	1070(ra) # 80206bc2 <release>
}
    8020479c:	60e2                	ld	ra,24(sp)
    8020479e:	6442                	ld	s0,16(sp)
    802047a0:	64a2                	ld	s1,8(sp)
    802047a2:	6902                	ld	s2,0(sp)
    802047a4:	6105                	addi	sp,sp,32
    802047a6:	8082                	ret

00000000802047a8 <pipelock>:
{
    802047a8:	7179                	addi	sp,sp,-48
    802047aa:	f406                	sd	ra,40(sp)
    802047ac:	f022                	sd	s0,32(sp)
    802047ae:	ec26                	sd	s1,24(sp)
    802047b0:	e84a                	sd	s2,16(sp)
    802047b2:	e44e                	sd	s3,8(sp)
    802047b4:	e052                	sd	s4,0(sp)
    802047b6:	1800                	addi	s0,sp,48
    802047b8:	892e                	mv	s2,a1
	q = (who == PIPE_READER) ? &pi->rqueue : &pi->wqueue;
    802047ba:	01850493          	addi	s1,a0,24
    802047be:	e219                	bnez	a2,802047c4 <pipelock+0x1c>
    802047c0:	04050493          	addi	s1,a0,64
	acquire(&q->lock);
    802047c4:	8a26                	mv	s4,s1
    802047c6:	8526                	mv	a0,s1
    802047c8:	00002097          	auipc	ra,0x2
    802047cc:	3a6080e7          	jalr	934(ra) # 80206b6e <acquire>
	return wq->head.next == &node->list;
}

// This goes without locking. Add node to the last.
static inline void wait_queue_add(struct wait_queue *wq, struct wait_node *node) {
	list_add_before(&wq->head, &node->list);
    802047d0:	00890993          	addi	s3,s2,8
	__list_insert(node, beforeme->prev, beforeme);
    802047d4:	6c9c                	ld	a5,24(s1)
	prev->next = next->prev = node;
    802047d6:	0134bc23          	sd	s3,24(s1)
    802047da:	0137b423          	sd	s3,8(a5)
    802047de:	01848713          	addi	a4,s1,24
	node->next = next;
    802047e2:	00e93823          	sd	a4,16(s2)
	node->prev = prev;
    802047e6:	00f93423          	sd	a5,8(s2)
	while (!wait_queue_is_first(q, wait)) {
    802047ea:	709c                	ld	a5,32(s1)
    802047ec:	00f98c63          	beq	s3,a5,80204804 <pipelock+0x5c>
		sleep(wait->chan, &q->lock);
    802047f0:	85d2                	mv	a1,s4
    802047f2:	00093503          	ld	a0,0(s2)
    802047f6:	ffffd097          	auipc	ra,0xffffd
    802047fa:	3e0080e7          	jalr	992(ra) # 80201bd6 <sleep>
	while (!wait_queue_is_first(q, wait)) {
    802047fe:	709c                	ld	a5,32(s1)
    80204800:	fef998e3          	bne	s3,a5,802047f0 <pipelock+0x48>
	release(&q->lock);
    80204804:	8552                	mv	a0,s4
    80204806:	00002097          	auipc	ra,0x2
    8020480a:	3bc080e7          	jalr	956(ra) # 80206bc2 <release>
}
    8020480e:	70a2                	ld	ra,40(sp)
    80204810:	7402                	ld	s0,32(sp)
    80204812:	64e2                	ld	s1,24(sp)
    80204814:	6942                	ld	s2,16(sp)
    80204816:	69a2                	ld	s3,8(sp)
    80204818:	6a02                	ld	s4,0(sp)
    8020481a:	6145                	addi	sp,sp,48
    8020481c:	8082                	ret

000000008020481e <pipewritable>:
{
    8020481e:	7139                	addi	sp,sp,-64
    80204820:	fc06                	sd	ra,56(sp)
    80204822:	f822                	sd	s0,48(sp)
    80204824:	f426                	sd	s1,40(sp)
    80204826:	f04a                	sd	s2,32(sp)
    80204828:	ec4e                	sd	s3,24(sp)
    8020482a:	e852                	sd	s4,16(sp)
    8020482c:	e456                	sd	s5,8(sp)
    8020482e:	e05a                	sd	s6,0(sp)
    80204830:	0080                	addi	s0,sp,64
    80204832:	84aa                	mv	s1,a0
	struct proc *pr = myproc();
    80204834:	00005097          	auipc	ra,0x5
    80204838:	2f6080e7          	jalr	758(ra) # 80209b2a <myproc>
    8020483c:	89aa                	mv	s3,a0
	return container_of(wq->head.next, struct wait_node, list);
    8020483e:	0384ba83          	ld	s5,56(s1)
	acquire(&pi->lock);
    80204842:	8526                	mv	a0,s1
    80204844:	00002097          	auipc	ra,0x2
    80204848:	32a080e7          	jalr	810(ra) # 80206b6e <acquire>
	pi->writing = 1;
    8020484c:	4785                	li	a5,1
    8020484e:	06f48923          	sb	a5,114(s1)
	while ((m = pi->nwrite - pi->nread) == PIPESIZE(pi)) {		// pipe is full
    80204852:	06c4a903          	lw	s2,108(s1)
    80204856:	54bc                	lw	a5,104(s1)
    80204858:	40f9093b          	subw	s2,s2,a5
    8020485c:	0734c703          	lbu	a4,115(s1)
    80204860:	20000793          	li	a5,512
    80204864:	00e797bb          	sllw	a5,a5,a4
    80204868:	05279763          	bne	a5,s2,802048b6 <pipewritable+0x98>
    8020486c:	8a26                	mv	s4,s1
    8020486e:	20000b13          	li	s6,512
		if (pr->killed) {
    80204872:	0389a783          	lw	a5,56(s3)
    80204876:	ef8d                	bnez	a5,802048b0 <pipewritable+0x92>
		if (pi->readopen == 0) {
    80204878:	0704c783          	lbu	a5,112(s1)
    8020487c:	cfa9                	beqz	a5,802048d6 <pipewritable+0xb8>
		pipewakeup(pi, PIPE_READER);
    8020487e:	4581                	li	a1,0
    80204880:	8526                	mv	a0,s1
    80204882:	00000097          	auipc	ra,0x0
    80204886:	eda080e7          	jalr	-294(ra) # 8020475c <pipewakeup>
		sleep(wait->chan, &pi->lock);
    8020488a:	85d2                	mv	a1,s4
    8020488c:	ff8ab503          	ld	a0,-8(s5)
    80204890:	ffffd097          	auipc	ra,0xffffd
    80204894:	346080e7          	jalr	838(ra) # 80201bd6 <sleep>
	while ((m = pi->nwrite - pi->nread) == PIPESIZE(pi)) {		// pipe is full
    80204898:	06c4a903          	lw	s2,108(s1)
    8020489c:	54bc                	lw	a5,104(s1)
    8020489e:	40f9093b          	subw	s2,s2,a5
    802048a2:	0734c783          	lbu	a5,115(s1)
    802048a6:	00fb17bb          	sllw	a5,s6,a5
    802048aa:	fd2784e3          	beq	a5,s2,80204872 <pipewritable+0x54>
    802048ae:	a021                	j	802048b6 <pipewritable+0x98>
			pi->writing = 0;
    802048b0:	06048923          	sb	zero,114(s1)
			m = -EINTR;
    802048b4:	5971                	li	s2,-4
	release(&pi->lock);
    802048b6:	8526                	mv	a0,s1
    802048b8:	00002097          	auipc	ra,0x2
    802048bc:	30a080e7          	jalr	778(ra) # 80206bc2 <release>
}
    802048c0:	854a                	mv	a0,s2
    802048c2:	70e2                	ld	ra,56(sp)
    802048c4:	7442                	ld	s0,48(sp)
    802048c6:	74a2                	ld	s1,40(sp)
    802048c8:	7902                	ld	s2,32(sp)
    802048ca:	69e2                	ld	s3,24(sp)
    802048cc:	6a42                	ld	s4,16(sp)
    802048ce:	6aa2                	ld	s5,8(sp)
    802048d0:	6b02                	ld	s6,0(sp)
    802048d2:	6121                	addi	sp,sp,64
    802048d4:	8082                	ret
			pi->writing = 0;
    802048d6:	06048923          	sb	zero,114(s1)
			m = -EPIPE;
    802048da:	5901                	li	s2,-32
			break;
    802048dc:	bfe9                	j	802048b6 <pipewritable+0x98>

00000000802048de <pipereadable>:
{
    802048de:	7139                	addi	sp,sp,-64
    802048e0:	fc06                	sd	ra,56(sp)
    802048e2:	f822                	sd	s0,48(sp)
    802048e4:	f426                	sd	s1,40(sp)
    802048e6:	f04a                	sd	s2,32(sp)
    802048e8:	ec4e                	sd	s3,24(sp)
    802048ea:	e852                	sd	s4,16(sp)
    802048ec:	e456                	sd	s5,8(sp)
    802048ee:	e05a                	sd	s6,0(sp)
    802048f0:	0080                	addi	s0,sp,64
    802048f2:	84aa                	mv	s1,a0
    802048f4:	8b2e                	mv	s6,a1
	struct proc *pr = myproc();
    802048f6:	00005097          	auipc	ra,0x5
    802048fa:	234080e7          	jalr	564(ra) # 80209b2a <myproc>
    802048fe:	89aa                	mv	s3,a0
    80204900:	0604ba83          	ld	s5,96(s1)
	acquire(&pi->lock);
    80204904:	8a26                	mv	s4,s1
    80204906:	8526                	mv	a0,s1
    80204908:	00002097          	auipc	ra,0x2
    8020490c:	266080e7          	jalr	614(ra) # 80206b6e <acquire>
	while ((m = pi->nwrite - pi->nread) == 0) {	// pipe is empty
    80204910:	06c4a903          	lw	s2,108(s1)
    80204914:	54bc                	lw	a5,104(s1)
    80204916:	40f9093b          	subw	s2,s2,a5
    8020491a:	02090163          	beqz	s2,8020493c <pipereadable+0x5e>
    8020491e:	a099                	j	80204964 <pipereadable+0x86>
			sleep(wait->chan, &pi->lock);
    80204920:	85d2                	mv	a1,s4
    80204922:	ff8ab503          	ld	a0,-8(s5)
    80204926:	ffffd097          	auipc	ra,0xffffd
    8020492a:	2b0080e7          	jalr	688(ra) # 80201bd6 <sleep>
	while ((m = pi->nwrite - pi->nread) == 0) {	// pipe is empty
    8020492e:	06c4a903          	lw	s2,108(s1)
    80204932:	54bc                	lw	a5,104(s1)
    80204934:	40f9093b          	subw	s2,s2,a5
    80204938:	02091663          	bnez	s2,80204964 <pipereadable+0x86>
		if (pr->killed) {
    8020493c:	0389a783          	lw	a5,56(s3)
    80204940:	e38d                	bnez	a5,80204962 <pipereadable+0x84>
		if (pi->writeopen == 0) {
    80204942:	0714c783          	lbu	a5,113(s1)
    80204946:	cf9d                	beqz	a5,80204984 <pipereadable+0xa6>
		pipewakeup(pi, PIPE_WRITER);
    80204948:	4585                	li	a1,1
    8020494a:	8526                	mv	a0,s1
    8020494c:	00000097          	auipc	ra,0x0
    80204950:	e10080e7          	jalr	-496(ra) # 8020475c <pipewakeup>
		if (!pi->writing && immediate) {
    80204954:	0724c783          	lbu	a5,114(s1)
    80204958:	f7e1                	bnez	a5,80204920 <pipereadable+0x42>
    8020495a:	fc0b03e3          	beqz	s6,80204920 <pipereadable+0x42>
			m = -1;
    8020495e:	597d                	li	s2,-1
    80204960:	a011                	j	80204964 <pipereadable+0x86>
			m = -EINTR;
    80204962:	5971                	li	s2,-4
	release(&pi->lock);
    80204964:	8526                	mv	a0,s1
    80204966:	00002097          	auipc	ra,0x2
    8020496a:	25c080e7          	jalr	604(ra) # 80206bc2 <release>
}
    8020496e:	854a                	mv	a0,s2
    80204970:	70e2                	ld	ra,56(sp)
    80204972:	7442                	ld	s0,48(sp)
    80204974:	74a2                	ld	s1,40(sp)
    80204976:	7902                	ld	s2,32(sp)
    80204978:	69e2                	ld	s3,24(sp)
    8020497a:	6a42                	ld	s4,16(sp)
    8020497c:	6aa2                	ld	s5,8(sp)
    8020497e:	6b02                	ld	s6,0(sp)
    80204980:	6121                	addi	sp,sp,64
    80204982:	8082                	ret
			m = -EPIPE;
    80204984:	5901                	li	s2,-32
    80204986:	bff9                	j	80204964 <pipereadable+0x86>

0000000080204988 <pipeunlock>:
{
    80204988:	7179                	addi	sp,sp,-48
    8020498a:	f406                	sd	ra,40(sp)
    8020498c:	f022                	sd	s0,32(sp)
    8020498e:	ec26                	sd	s1,24(sp)
    80204990:	e84a                	sd	s2,16(sp)
    80204992:	e44e                	sd	s3,8(sp)
    80204994:	1800                	addi	s0,sp,48
    80204996:	892e                	mv	s2,a1
	q = (who == PIPE_READER) ? &pi->rqueue : &pi->wqueue;
    80204998:	01850493          	addi	s1,a0,24
    8020499c:	e219                	bnez	a2,802049a2 <pipeunlock+0x1a>
    8020499e:	04050493          	addi	s1,a0,64
	acquire(&q->lock);
    802049a2:	89a6                	mv	s3,s1
    802049a4:	8526                	mv	a0,s1
    802049a6:	00002097          	auipc	ra,0x2
    802049aa:	1c8080e7          	jalr	456(ra) # 80206b6e <acquire>
	__list_link(node->prev, node->next);
    802049ae:	00893703          	ld	a4,8(s2)
    802049b2:	01093783          	ld	a5,16(s2)
	prev->next = next;
    802049b6:	e71c                	sd	a5,8(a4)
	next->prev = prev;
    802049b8:	e398                	sd	a4,0(a5)
	return head->next == head;
    802049ba:	709c                	ld	a5,32(s1)
	return list_empty(&wq->head);
    802049bc:	04e1                	addi	s1,s1,24
	if (!wait_queue_empty(q)) {		// wake up the next one
    802049be:	00978863          	beq	a5,s1,802049ce <pipeunlock+0x46>
		wakeup(wait->chan);
    802049c2:	ff87b503          	ld	a0,-8(a5)
    802049c6:	ffffd097          	auipc	ra,0xffffd
    802049ca:	31a080e7          	jalr	794(ra) # 80201ce0 <wakeup>
	release(&q->lock);
    802049ce:	854e                	mv	a0,s3
    802049d0:	00002097          	auipc	ra,0x2
    802049d4:	1f2080e7          	jalr	498(ra) # 80206bc2 <release>
}
    802049d8:	70a2                	ld	ra,40(sp)
    802049da:	7402                	ld	s0,32(sp)
    802049dc:	64e2                	ld	s1,24(sp)
    802049de:	6942                	ld	s2,16(sp)
    802049e0:	69a2                	ld	s3,8(sp)
    802049e2:	6145                	addi	sp,sp,48
    802049e4:	8082                	ret

00000000802049e6 <pipealloc>:
{
    802049e6:	7139                	addi	sp,sp,-64
    802049e8:	fc06                	sd	ra,56(sp)
    802049ea:	f822                	sd	s0,48(sp)
    802049ec:	f426                	sd	s1,40(sp)
    802049ee:	f04a                	sd	s2,32(sp)
    802049f0:	ec4e                	sd	s3,24(sp)
    802049f2:	e852                	sd	s4,16(sp)
    802049f4:	e456                	sd	s5,8(sp)
    802049f6:	0080                	addi	s0,sp,64
    802049f8:	8a2a                	mv	s4,a0
    802049fa:	8aae                	mv	s5,a1
	if ((f0 = filealloc()) == NULL ||
    802049fc:	00001097          	auipc	ra,0x1
    80204a00:	838080e7          	jalr	-1992(ra) # 80205234 <filealloc>
    80204a04:	c57d                	beqz	a0,80204af2 <pipealloc+0x10c>
    80204a06:	892a                	mv	s2,a0
		(f1 = filealloc()) == NULL ||
    80204a08:	00001097          	auipc	ra,0x1
    80204a0c:	82c080e7          	jalr	-2004(ra) # 80205234 <filealloc>
    80204a10:	89aa                	mv	s3,a0
	if ((f0 = filealloc()) == NULL ||
    80204a12:	c561                	beqz	a0,80204ada <pipealloc+0xf4>
		(pi = kmalloc(sizeof(struct pipe))) == NULL)
    80204a14:	28000513          	li	a0,640
    80204a18:	00003097          	auipc	ra,0x3
    80204a1c:	1ac080e7          	jalr	428(ra) # 80207bc4 <kmalloc>
    80204a20:	84aa                	mv	s1,a0
		(f1 = filealloc()) == NULL ||
    80204a22:	cd45                	beqz	a0,80204ada <pipealloc+0xf4>
	pi->readopen = 1;
    80204a24:	4785                	li	a5,1
    80204a26:	06f50823          	sb	a5,112(a0)
	pi->writeopen = 1;
    80204a2a:	06f508a3          	sb	a5,113(a0)
	pi->nwrite = 0;
    80204a2e:	06052623          	sw	zero,108(a0)
	pi->nread = 0;
    80204a32:	06052423          	sw	zero,104(a0)
	pi->writing = 0;
    80204a36:	06050923          	sb	zero,114(a0)
	pi->pdata = pi->data;
    80204a3a:	08050793          	addi	a5,a0,128
    80204a3e:	fd3c                	sd	a5,120(a0)
	pi->size_shift = 0;
    80204a40:	060509a3          	sb	zero,115(a0)
	initlock(&pi->lock, "pipe");
    80204a44:	0000d597          	auipc	a1,0xd
    80204a48:	a4c58593          	addi	a1,a1,-1460 # 80211490 <rodata_start+0x490>
    80204a4c:	00002097          	auipc	ra,0x2
    80204a50:	0de080e7          	jalr	222(ra) # 80206b2a <initlock>
	initlock(&wq->lock, str);
    80204a54:	0000d597          	auipc	a1,0xd
    80204a58:	a4458593          	addi	a1,a1,-1468 # 80211498 <rodata_start+0x498>
    80204a5c:	01848513          	addi	a0,s1,24
    80204a60:	00002097          	auipc	ra,0x2
    80204a64:	0ca080e7          	jalr	202(ra) # 80206b2a <initlock>
	list_init(&wq->head);
    80204a68:	03048793          	addi	a5,s1,48
	node->prev = node->next = node;
    80204a6c:	fc9c                	sd	a5,56(s1)
    80204a6e:	f89c                	sd	a5,48(s1)
	initlock(&wq->lock, str);
    80204a70:	0000d597          	auipc	a1,0xd
    80204a74:	a3858593          	addi	a1,a1,-1480 # 802114a8 <rodata_start+0x4a8>
    80204a78:	04048513          	addi	a0,s1,64
    80204a7c:	00002097          	auipc	ra,0x2
    80204a80:	0ae080e7          	jalr	174(ra) # 80206b2a <initlock>
	list_init(&wq->head);
    80204a84:	05848793          	addi	a5,s1,88
    80204a88:	f0bc                	sd	a5,96(s1)
    80204a8a:	ecbc                	sd	a5,88(s1)
	f0->type = FD_PIPE;
    80204a8c:	4785                	li	a5,1
    80204a8e:	00f92023          	sw	a5,0(s2)
	f0->readable = 1;
    80204a92:	00f90423          	sb	a5,8(s2)
	f0->writable = 0;
    80204a96:	000904a3          	sb	zero,9(s2)
	f0->pipe = pi;
    80204a9a:	00993823          	sd	s1,16(s2)
	f0->poll = pipepoll;
    80204a9e:	00000717          	auipc	a4,0x0
    80204aa2:	b9c70713          	addi	a4,a4,-1124 # 8020463a <pipepoll>
    80204aa6:	02e93823          	sd	a4,48(s2)
	f1->type = FD_PIPE;
    80204aaa:	00f9a023          	sw	a5,0(s3)
	f1->readable = 0;
    80204aae:	00098423          	sb	zero,8(s3)
	f1->writable = 1;
    80204ab2:	00f984a3          	sb	a5,9(s3)
	f1->pipe = pi;
    80204ab6:	0099b823          	sd	s1,16(s3)
	f1->poll = pipepoll;
    80204aba:	02e9b823          	sd	a4,48(s3)
	*pf0 = f0;
    80204abe:	012a3023          	sd	s2,0(s4)
	*pf1 = f1;
    80204ac2:	013ab023          	sd	s3,0(s5)
	return 0;
    80204ac6:	4501                	li	a0,0
}
    80204ac8:	70e2                	ld	ra,56(sp)
    80204aca:	7442                	ld	s0,48(sp)
    80204acc:	74a2                	ld	s1,40(sp)
    80204ace:	7902                	ld	s2,32(sp)
    80204ad0:	69e2                	ld	s3,24(sp)
    80204ad2:	6a42                	ld	s4,16(sp)
    80204ad4:	6aa2                	ld	s5,8(sp)
    80204ad6:	6121                	addi	sp,sp,64
    80204ad8:	8082                	ret
		fileclose(f0);
    80204ada:	854a                	mv	a0,s2
    80204adc:	00001097          	auipc	ra,0x1
    80204ae0:	814080e7          	jalr	-2028(ra) # 802052f0 <fileclose>
	if (f1)
    80204ae4:	00098763          	beqz	s3,80204af2 <pipealloc+0x10c>
		fileclose(f1);
    80204ae8:	854e                	mv	a0,s3
    80204aea:	00001097          	auipc	ra,0x1
    80204aee:	806080e7          	jalr	-2042(ra) # 802052f0 <fileclose>
	*pf0 = *pf1 = NULL;
    80204af2:	000ab023          	sd	zero,0(s5)
    80204af6:	000a3023          	sd	zero,0(s4)
	return -ENOMEM;
    80204afa:	5551                	li	a0,-12
    80204afc:	b7f1                	j	80204ac8 <pipealloc+0xe2>

0000000080204afe <pipeclose>:
{
    80204afe:	1101                	addi	sp,sp,-32
    80204b00:	ec06                	sd	ra,24(sp)
    80204b02:	e822                	sd	s0,16(sp)
    80204b04:	e426                	sd	s1,8(sp)
    80204b06:	e04a                	sd	s2,0(sp)
    80204b08:	1000                	addi	s0,sp,32
    80204b0a:	84aa                	mv	s1,a0
    80204b0c:	892e                	mv	s2,a1
	acquire(&pi->lock);
    80204b0e:	00002097          	auipc	ra,0x2
    80204b12:	060080e7          	jalr	96(ra) # 80206b6e <acquire>
	if (writable) {
    80204b16:	04090063          	beqz	s2,80204b56 <pipeclose+0x58>
		pi->writeopen = 0;
    80204b1a:	060488a3          	sb	zero,113(s1)
		pipewakeup(pi, PIPE_READER);
    80204b1e:	4581                	li	a1,0
    80204b20:	8526                	mv	a0,s1
    80204b22:	00000097          	auipc	ra,0x0
    80204b26:	c3a080e7          	jalr	-966(ra) # 8020475c <pipewakeup>
	if (pi->readopen == 0 && pi->writeopen == 0) {
    80204b2a:	0704d783          	lhu	a5,112(s1)
    80204b2e:	e7a1                	bnez	a5,80204b76 <pipeclose+0x78>
		release(&pi->lock);
    80204b30:	8526                	mv	a0,s1
    80204b32:	00002097          	auipc	ra,0x2
    80204b36:	090080e7          	jalr	144(ra) # 80206bc2 <release>
		if (pi->size_shift)
    80204b3a:	0734c783          	lbu	a5,115(s1)
    80204b3e:	e78d                	bnez	a5,80204b68 <pipeclose+0x6a>
		kfree(pi);
    80204b40:	8526                	mv	a0,s1
    80204b42:	00003097          	auipc	ra,0x3
    80204b46:	2cc080e7          	jalr	716(ra) # 80207e0e <kfree>
}
    80204b4a:	60e2                	ld	ra,24(sp)
    80204b4c:	6442                	ld	s0,16(sp)
    80204b4e:	64a2                	ld	s1,8(sp)
    80204b50:	6902                	ld	s2,0(sp)
    80204b52:	6105                	addi	sp,sp,32
    80204b54:	8082                	ret
		pi->readopen = 0;
    80204b56:	06048823          	sb	zero,112(s1)
		pipewakeup(pi, PIPE_WRITER);
    80204b5a:	4585                	li	a1,1
    80204b5c:	8526                	mv	a0,s1
    80204b5e:	00000097          	auipc	ra,0x0
    80204b62:	bfe080e7          	jalr	-1026(ra) # 8020475c <pipewakeup>
    80204b66:	b7d1                	j	80204b2a <pipeclose+0x2c>
			freepage_n((uint64)pi->pdata, 4);
    80204b68:	4591                	li	a1,4
    80204b6a:	7ca8                	ld	a0,120(s1)
    80204b6c:	00003097          	auipc	ra,0x3
    80204b70:	d88080e7          	jalr	-632(ra) # 802078f4 <freepage_n>
    80204b74:	b7f1                	j	80204b40 <pipeclose+0x42>
		release(&pi->lock);
    80204b76:	8526                	mv	a0,s1
    80204b78:	00002097          	auipc	ra,0x2
    80204b7c:	04a080e7          	jalr	74(ra) # 80206bc2 <release>
}
    80204b80:	b7e9                	j	80204b4a <pipeclose+0x4c>

0000000080204b82 <pipewrite>:
{
    80204b82:	7135                	addi	sp,sp,-160
    80204b84:	ed06                	sd	ra,152(sp)
    80204b86:	e922                	sd	s0,144(sp)
    80204b88:	e526                	sd	s1,136(sp)
    80204b8a:	e14a                	sd	s2,128(sp)
    80204b8c:	fcce                	sd	s3,120(sp)
    80204b8e:	f8d2                	sd	s4,112(sp)
    80204b90:	f4d6                	sd	s5,104(sp)
    80204b92:	f0da                	sd	s6,96(sp)
    80204b94:	ecde                	sd	s7,88(sp)
    80204b96:	e8e2                	sd	s8,80(sp)
    80204b98:	e4e6                	sd	s9,72(sp)
    80204b9a:	e0ea                	sd	s10,64(sp)
    80204b9c:	fc6e                	sd	s11,56(sp)
    80204b9e:	1100                	addi	s0,sp,160
    80204ba0:	84aa                	mv	s1,a0
    80204ba2:	8bae                	mv	s7,a1
    80204ba4:	8c32                	mv	s8,a2
    80204ba6:	8936                	mv	s2,a3
    80204ba8:	f6d43423          	sd	a3,-152(s0)
	wait.chan = &wait;
    80204bac:	f7840593          	addi	a1,s0,-136
    80204bb0:	f6b43c23          	sd	a1,-136(s0)
	pipelock(pi, &wait, PIPE_WRITER);		// block other writers
    80204bb4:	4605                	li	a2,1
    80204bb6:	00000097          	auipc	ra,0x0
    80204bba:	bf2080e7          	jalr	-1038(ra) # 802047a8 <pipelock>
	if (!pi->size_shift && n > PIPE_SIZE && 
    80204bbe:	0734c783          	lbu	a5,115(s1)
    80204bc2:	e3b1                	bnez	a5,80204c06 <pipewrite+0x84>
    80204bc4:	20000713          	li	a4,512
    80204bc8:	03275f63          	bge	a4,s2,80204c06 <pipewrite+0x84>
    80204bcc:	54b8                	lw	a4,104(s1)
    80204bce:	54fc                	lw	a5,108(s1)
    80204bd0:	00f70c63          	beq	a4,a5,80204be8 <pipewrite+0x66>
	char *const pipebound = pi->pdata + PIPESIZE(pi);
    80204bd4:	0734cb03          	lbu	s6,115(s1)
    80204bd8:	20000793          	li	a5,512
    80204bdc:	016797bb          	sllw	a5,a5,s6
    80204be0:	0784bb03          	ld	s6,120(s1)
    80204be4:	9b3e                	add	s6,s6,a5
	for (i = 0; i < n;) {
    80204be6:	a81d                	j	80204c1c <pipewrite+0x9a>
		char *bigger = allocpage_n(4);
    80204be8:	4511                	li	a0,4
    80204bea:	00003097          	auipc	ra,0x3
    80204bee:	cb0080e7          	jalr	-848(ra) # 8020789a <allocpage_n>
		if (bigger) {
    80204bf2:	d16d                	beqz	a0,80204bd4 <pipewrite+0x52>
			pi->nwrite = pi->nread = 0;
    80204bf4:	0604a423          	sw	zero,104(s1)
    80204bf8:	0604a623          	sw	zero,108(s1)
			pi->pdata = bigger;
    80204bfc:	fca8                	sd	a0,120(s1)
			pi->size_shift = 5;
    80204bfe:	4795                	li	a5,5
    80204c00:	06f489a3          	sb	a5,115(s1)
    80204c04:	bfc1                	j	80204bd4 <pipewrite+0x52>
	char *const pipebound = pi->pdata + PIPESIZE(pi);
    80204c06:	20000b13          	li	s6,512
    80204c0a:	00fb17bb          	sllw	a5,s6,a5
    80204c0e:	0784bb03          	ld	s6,120(s1)
    80204c12:	9b3e                	add	s6,s6,a5
	for (i = 0; i < n;) {
    80204c14:	f6843783          	ld	a5,-152(s0)
    80204c18:	0cf05963          	blez	a5,80204cea <pipewrite+0x168>
{
    80204c1c:	4a81                	li	s5,0
		m = (PIPESIZE(pi) - m < n - i) ?	// amount of bytes to write
    80204c1e:	20000c93          	li	s9,512
		if ((m = pipewritable(pi)) < 0) {
    80204c22:	8526                	mv	a0,s1
    80204c24:	00000097          	auipc	ra,0x0
    80204c28:	bfa080e7          	jalr	-1030(ra) # 8020481e <pipewritable>
    80204c2c:	10054a63          	bltz	a0,80204d40 <pipewrite+0x1be>
		m = (PIPESIZE(pi) - m < n - i) ?	// amount of bytes to write
    80204c30:	0734c783          	lbu	a5,115(s1)
    80204c34:	00fc973b          	sllw	a4,s9,a5
    80204c38:	40a7053b          	subw	a0,a4,a0
    80204c3c:	f6843783          	ld	a5,-152(s0)
    80204c40:	415787bb          	subw	a5,a5,s5
    80204c44:	86be                	mv	a3,a5
    80204c46:	2781                	sext.w	a5,a5
    80204c48:	0005061b          	sext.w	a2,a0
    80204c4c:	00f65363          	bge	a2,a5,80204c52 <pipewrite+0xd0>
    80204c50:	86aa                	mv	a3,a0
    80204c52:	00068d9b          	sext.w	s11,a3
		int mm = m > PIPESIZE(pi) / 2 ? (PIPESIZE(pi) / 2) : m;
    80204c56:	01f7579b          	srliw	a5,a4,0x1f
    80204c5a:	9fb9                	addw	a5,a5,a4
    80204c5c:	4017d79b          	sraiw	a5,a5,0x1
    80204c60:	8d3e                	mv	s10,a5
    80204c62:	2781                	sext.w	a5,a5
    80204c64:	00fdd363          	bge	s11,a5,80204c6a <pipewrite+0xe8>
    80204c68:	8d36                	mv	s10,a3
    80204c6a:	2d01                	sext.w	s10,s10
		while (m > 0) {					// pipe is a loop in a buf
    80204c6c:	07b05263          	blez	s11,80204cd0 <pipewrite+0x14e>
			while (mm > 0) {
    80204c70:	05a05c63          	blez	s10,80204cc8 <pipewrite+0x146>
    80204c74:	89ea                	mv	s3,s10
    80204c76:	a805                	j	80204ca6 <pipewrite+0x124>
				int count = (pipebound - paddr < mm) ? pipebound - paddr : mm;
    80204c78:	00090a1b          	sext.w	s4,s2
				if (either_copyin(user,paddr, addr + i, count) < 0) {
    80204c7c:	86d2                	mv	a3,s4
    80204c7e:	018a8633          	add	a2,s5,s8
    80204c82:	855e                	mv	a0,s7
    80204c84:	00005097          	auipc	ra,0x5
    80204c88:	89a080e7          	jalr	-1894(ra) # 8020951e <either_copyin>
    80204c8c:	06054063          	bltz	a0,80204cec <pipewrite+0x16a>
				i += count;
    80204c90:	015a0abb          	addw	s5,s4,s5
				pi->nwrite += count;
    80204c94:	54fc                	lw	a5,108(s1)
    80204c96:	0127893b          	addw	s2,a5,s2
    80204c9a:	0724a623          	sw	s2,108(s1)
				mm -= count;
    80204c9e:	414989bb          	subw	s3,s3,s4
			while (mm > 0) {
    80204ca2:	03305363          	blez	s3,80204cc8 <pipewrite+0x146>
				char *paddr = pi->pdata + pi->nwrite % PIPESIZE(pi);
    80204ca6:	0734c583          	lbu	a1,115(s1)
    80204caa:	00bc95bb          	sllw	a1,s9,a1
    80204cae:	35fd                	addiw	a1,a1,-1
    80204cb0:	54fc                	lw	a5,108(s1)
    80204cb2:	8dfd                	and	a1,a1,a5
    80204cb4:	1582                	slli	a1,a1,0x20
    80204cb6:	9181                	srli	a1,a1,0x20
    80204cb8:	7cbc                	ld	a5,120(s1)
    80204cba:	95be                	add	a1,a1,a5
				int count = (pipebound - paddr < mm) ? pipebound - paddr : mm;
    80204cbc:	40bb0933          	sub	s2,s6,a1
    80204cc0:	fb29dce3          	bge	s3,s2,80204c78 <pipewrite+0xf6>
    80204cc4:	894e                	mv	s2,s3
    80204cc6:	bf4d                	j	80204c78 <pipewrite+0xf6>
			m -= mm;
    80204cc8:	41ad8dbb          	subw	s11,s11,s10
			if ((mm = m) > 0) {
    80204ccc:	01b04763          	bgtz	s11,80204cda <pipewrite+0x158>
	for (i = 0; i < n;) {
    80204cd0:	f6843783          	ld	a5,-152(s0)
    80204cd4:	f4fac7e3          	blt	s5,a5,80204c22 <pipewrite+0xa0>
    80204cd8:	a811                	j	80204cec <pipewrite+0x16a>
				pipewakeup(pi, PIPE_READER);
    80204cda:	4581                	li	a1,0
    80204cdc:	8526                	mv	a0,s1
    80204cde:	00000097          	auipc	ra,0x0
    80204ce2:	a7e080e7          	jalr	-1410(ra) # 8020475c <pipewakeup>
    80204ce6:	8d6e                	mv	s10,s11
    80204ce8:	b761                	j	80204c70 <pipewrite+0xee>
	for (i = 0; i < n;) {
    80204cea:	4a81                	li	s5,0
	acquire(&pi->lock);		// see pipewritable()
    80204cec:	8526                	mv	a0,s1
    80204cee:	00002097          	auipc	ra,0x2
    80204cf2:	e80080e7          	jalr	-384(ra) # 80206b6e <acquire>
	pipewakeup(pi, PIPE_READER);
    80204cf6:	4581                	li	a1,0
    80204cf8:	8526                	mv	a0,s1
    80204cfa:	00000097          	auipc	ra,0x0
    80204cfe:	a62080e7          	jalr	-1438(ra) # 8020475c <pipewakeup>
	pi->writing = 0;
    80204d02:	06048923          	sb	zero,114(s1)
	release(&pi->lock);
    80204d06:	8526                	mv	a0,s1
    80204d08:	00002097          	auipc	ra,0x2
    80204d0c:	eba080e7          	jalr	-326(ra) # 80206bc2 <release>
	pipeunlock(pi, &wait, PIPE_WRITER);
    80204d10:	4605                	li	a2,1
    80204d12:	f7840593          	addi	a1,s0,-136
    80204d16:	8526                	mv	a0,s1
    80204d18:	00000097          	auipc	ra,0x0
    80204d1c:	c70080e7          	jalr	-912(ra) # 80204988 <pipeunlock>
}
    80204d20:	8556                	mv	a0,s5
    80204d22:	60ea                	ld	ra,152(sp)
    80204d24:	644a                	ld	s0,144(sp)
    80204d26:	64aa                	ld	s1,136(sp)
    80204d28:	690a                	ld	s2,128(sp)
    80204d2a:	79e6                	ld	s3,120(sp)
    80204d2c:	7a46                	ld	s4,112(sp)
    80204d2e:	7aa6                	ld	s5,104(sp)
    80204d30:	7b06                	ld	s6,96(sp)
    80204d32:	6be6                	ld	s7,88(sp)
    80204d34:	6c46                	ld	s8,80(sp)
    80204d36:	6ca6                	ld	s9,72(sp)
    80204d38:	6d06                	ld	s10,64(sp)
    80204d3a:	7de2                	ld	s11,56(sp)
    80204d3c:	610d                	addi	sp,sp,160
    80204d3e:	8082                	ret
		if ((m = pipewritable(pi)) < 0) {
    80204d40:	8aaa                	mv	s5,a0
    80204d42:	b7f9                	j	80204d10 <pipewrite+0x18e>

0000000080204d44 <piperead>:
{
    80204d44:	7135                	addi	sp,sp,-160
    80204d46:	ed06                	sd	ra,152(sp)
    80204d48:	e922                	sd	s0,144(sp)
    80204d4a:	e526                	sd	s1,136(sp)
    80204d4c:	e14a                	sd	s2,128(sp)
    80204d4e:	fcce                	sd	s3,120(sp)
    80204d50:	f8d2                	sd	s4,112(sp)
    80204d52:	f4d6                	sd	s5,104(sp)
    80204d54:	f0da                	sd	s6,96(sp)
    80204d56:	ecde                	sd	s7,88(sp)
    80204d58:	e8e2                	sd	s8,80(sp)
    80204d5a:	e4e6                	sd	s9,72(sp)
    80204d5c:	e0ea                	sd	s10,64(sp)
    80204d5e:	fc6e                	sd	s11,56(sp)
    80204d60:	1100                	addi	s0,sp,160
    80204d62:	84aa                	mv	s1,a0
    80204d64:	8c2e                	mv	s8,a1
    80204d66:	8cb2                	mv	s9,a2
    80204d68:	8936                	mv	s2,a3
    80204d6a:	f6d43423          	sd	a3,-152(s0)
	wait.chan = &wait;
    80204d6e:	f7840593          	addi	a1,s0,-136
    80204d72:	f6b43c23          	sd	a1,-136(s0)
	pipelock(pi, &wait, PIPE_READER);	// block other readers
    80204d76:	4601                	li	a2,0
    80204d78:	00000097          	auipc	ra,0x0
    80204d7c:	a30080e7          	jalr	-1488(ra) # 802047a8 <pipelock>
	while (tot < n) {
    80204d80:	0f205263          	blez	s2,80204e64 <piperead+0x120>
	int tot = 0, m;
    80204d84:	4b01                	li	s6,0
		char *const pipebound = pi->pdata + PIPESIZE(pi);
    80204d86:	20000d13          	li	s10,512
		if ((m = pipereadable(pi, tot > 0)) < 0) {
    80204d8a:	016025b3          	sgtz	a1,s6
    80204d8e:	8526                	mv	a0,s1
    80204d90:	00000097          	auipc	ra,0x0
    80204d94:	b4e080e7          	jalr	-1202(ra) # 802048de <pipereadable>
    80204d98:	04054763          	bltz	a0,80204de6 <piperead+0xa2>
		if (m > n - tot)
    80204d9c:	f6843783          	ld	a5,-152(s0)
    80204da0:	416787bb          	subw	a5,a5,s6
    80204da4:	86be                	mv	a3,a5
    80204da6:	2781                	sext.w	a5,a5
    80204da8:	00f55363          	bge	a0,a5,80204dae <piperead+0x6a>
    80204dac:	86aa                	mv	a3,a0
    80204dae:	00068d9b          	sext.w	s11,a3
		char *const pipebound = pi->pdata + PIPESIZE(pi);
    80204db2:	0734c783          	lbu	a5,115(s1)
    80204db6:	00fd173b          	sllw	a4,s10,a5
    80204dba:	0007079b          	sext.w	a5,a4
    80204dbe:	0784bb83          	ld	s7,120(s1)
    80204dc2:	9bbe                	add	s7,s7,a5
		int mm = m > PIPESIZE(pi) / 2 ? (PIPESIZE(pi) / 2) : m;
    80204dc4:	01f7579b          	srliw	a5,a4,0x1f
    80204dc8:	9fb9                	addw	a5,a5,a4
    80204dca:	4017d79b          	sraiw	a5,a5,0x1
    80204dce:	8abe                	mv	s5,a5
    80204dd0:	2781                	sext.w	a5,a5
    80204dd2:	00fdd363          	bge	s11,a5,80204dd8 <piperead+0x94>
    80204dd6:	8ab6                	mv	s5,a3
    80204dd8:	2a81                	sext.w	s5,s5
		while (m > 0) {
    80204dda:	07b05863          	blez	s11,80204e4a <piperead+0x106>
			for (int i = 0; i < mm;) {
    80204dde:	07505263          	blez	s5,80204e42 <piperead+0xfe>
    80204de2:	4901                	li	s2,0
    80204de4:	a825                	j	80204e1c <piperead+0xd8>
			if (tot == 0)
    80204de6:	0a0b1063          	bnez	s6,80204e86 <piperead+0x142>
		if ((m = pipereadable(pi, tot > 0)) < 0) {
    80204dea:	8b2a                	mv	s6,a0
    80204dec:	a869                	j	80204e86 <piperead+0x142>
				int count = (pipebound - paddr < mm - i) ? pipebound - paddr : mm - i;
    80204dee:	00098a1b          	sext.w	s4,s3
				if (either_copyout(user, addr + i, paddr, count) < 0) {
    80204df2:	86d2                	mv	a3,s4
    80204df4:	019905b3          	add	a1,s2,s9
    80204df8:	8562                	mv	a0,s8
    80204dfa:	00004097          	auipc	ra,0x4
    80204dfe:	6ce080e7          	jalr	1742(ra) # 802094c8 <either_copyout>
    80204e02:	06054263          	bltz	a0,80204e66 <piperead+0x122>
				pi->nread += count;
    80204e06:	54bc                	lw	a5,104(s1)
    80204e08:	013789bb          	addw	s3,a5,s3
    80204e0c:	0734a423          	sw	s3,104(s1)
				i += count;
    80204e10:	012a093b          	addw	s2,s4,s2
				tot += count;
    80204e14:	016a0b3b          	addw	s6,s4,s6
			for (int i = 0; i < mm;) {
    80204e18:	03595563          	bge	s2,s5,80204e42 <piperead+0xfe>
				char *paddr = pi->pdata + pi->nread % PIPESIZE(pi);
    80204e1c:	0734c603          	lbu	a2,115(s1)
    80204e20:	00cd163b          	sllw	a2,s10,a2
    80204e24:	367d                	addiw	a2,a2,-1
    80204e26:	54bc                	lw	a5,104(s1)
    80204e28:	8e7d                	and	a2,a2,a5
    80204e2a:	1602                	slli	a2,a2,0x20
    80204e2c:	9201                	srli	a2,a2,0x20
    80204e2e:	7cbc                	ld	a5,120(s1)
    80204e30:	963e                	add	a2,a2,a5
				int count = (pipebound - paddr < mm - i) ? pipebound - paddr : mm - i;
    80204e32:	40cb87b3          	sub	a5,s7,a2
    80204e36:	412a89bb          	subw	s3,s5,s2
    80204e3a:	fb37dae3          	bge	a5,s3,80204dee <piperead+0xaa>
    80204e3e:	89be                	mv	s3,a5
    80204e40:	b77d                	j	80204dee <piperead+0xaa>
			m -= mm;
    80204e42:	415d8dbb          	subw	s11,s11,s5
			if ((mm = m) > 0) {
    80204e46:	01b04763          	bgtz	s11,80204e54 <piperead+0x110>
	while (tot < n) {
    80204e4a:	f6843783          	ld	a5,-152(s0)
    80204e4e:	f2fb4ee3          	blt	s6,a5,80204d8a <piperead+0x46>
    80204e52:	a811                	j	80204e66 <piperead+0x122>
				pipewakeup(pi, PIPE_WRITER);
    80204e54:	4585                	li	a1,1
    80204e56:	8526                	mv	a0,s1
    80204e58:	00000097          	auipc	ra,0x0
    80204e5c:	904080e7          	jalr	-1788(ra) # 8020475c <pipewakeup>
    80204e60:	8aee                	mv	s5,s11
    80204e62:	bfb5                	j	80204dde <piperead+0x9a>
	int tot = 0, m;
    80204e64:	4b01                	li	s6,0
	acquire(&pi->lock);		// see pipewritable()
    80204e66:	8526                	mv	a0,s1
    80204e68:	00002097          	auipc	ra,0x2
    80204e6c:	d06080e7          	jalr	-762(ra) # 80206b6e <acquire>
	pipewakeup(pi, PIPE_WRITER);
    80204e70:	4585                	li	a1,1
    80204e72:	8526                	mv	a0,s1
    80204e74:	00000097          	auipc	ra,0x0
    80204e78:	8e8080e7          	jalr	-1816(ra) # 8020475c <pipewakeup>
	release(&pi->lock);
    80204e7c:	8526                	mv	a0,s1
    80204e7e:	00002097          	auipc	ra,0x2
    80204e82:	d44080e7          	jalr	-700(ra) # 80206bc2 <release>
	pipeunlock(pi, &wait, PIPE_READER);
    80204e86:	4601                	li	a2,0
    80204e88:	f7840593          	addi	a1,s0,-136
    80204e8c:	8526                	mv	a0,s1
    80204e8e:	00000097          	auipc	ra,0x0
    80204e92:	afa080e7          	jalr	-1286(ra) # 80204988 <pipeunlock>
}
    80204e96:	855a                	mv	a0,s6
    80204e98:	60ea                	ld	ra,152(sp)
    80204e9a:	644a                	ld	s0,144(sp)
    80204e9c:	64aa                	ld	s1,136(sp)
    80204e9e:	690a                	ld	s2,128(sp)
    80204ea0:	79e6                	ld	s3,120(sp)
    80204ea2:	7a46                	ld	s4,112(sp)
    80204ea4:	7aa6                	ld	s5,104(sp)
    80204ea6:	7b06                	ld	s6,96(sp)
    80204ea8:	6be6                	ld	s7,88(sp)
    80204eaa:	6c46                	ld	s8,80(sp)
    80204eac:	6ca6                	ld	s9,72(sp)
    80204eae:	6d06                	ld	s10,64(sp)
    80204eb0:	7de2                	ld	s11,56(sp)
    80204eb2:	610d                	addi	sp,sp,160
    80204eb4:	8082                	ret

0000000080204eb6 <pipewritev>:
{
    80204eb6:	7135                	addi	sp,sp,-160
    80204eb8:	ed06                	sd	ra,152(sp)
    80204eba:	e922                	sd	s0,144(sp)
    80204ebc:	e526                	sd	s1,136(sp)
    80204ebe:	e14a                	sd	s2,128(sp)
    80204ec0:	fcce                	sd	s3,120(sp)
    80204ec2:	f8d2                	sd	s4,112(sp)
    80204ec4:	f4d6                	sd	s5,104(sp)
    80204ec6:	f0da                	sd	s6,96(sp)
    80204ec8:	ecde                	sd	s7,88(sp)
    80204eca:	e8e2                	sd	s8,80(sp)
    80204ecc:	e4e6                	sd	s9,72(sp)
    80204ece:	e0ea                	sd	s10,64(sp)
    80204ed0:	fc6e                	sd	s11,56(sp)
    80204ed2:	1100                	addi	s0,sp,160
    80204ed4:	84aa                	mv	s1,a0
    80204ed6:	89ae                	mv	s3,a1
    80204ed8:	8932                	mv	s2,a2
	char *const pipebound = pi->pdata + PIPESIZE(pi);
    80204eda:	07354783          	lbu	a5,115(a0)
    80204ede:	20000c13          	li	s8,512
    80204ee2:	00fc17bb          	sllw	a5,s8,a5
    80204ee6:	07853c03          	ld	s8,120(a0)
    80204eea:	9c3e                	add	s8,s8,a5
	wait.chan = &wait;
    80204eec:	f7840593          	addi	a1,s0,-136
    80204ef0:	f6b43c23          	sd	a1,-136(s0)
	pipelock(pi, &wait, PIPE_WRITER);	// block other writers
    80204ef4:	4605                	li	a2,1
    80204ef6:	00000097          	auipc	ra,0x0
    80204efa:	8b2080e7          	jalr	-1870(ra) # 802047a8 <pipelock>
	for (int i = 0; i < count; i++) {
    80204efe:	0f205563          	blez	s2,80204fe8 <pipewritev+0x132>
    80204f02:	8dce                	mv	s11,s3
    80204f04:	fff9079b          	addiw	a5,s2,-1
    80204f08:	1782                	slli	a5,a5,0x20
    80204f0a:	9381                	srli	a5,a5,0x20
    80204f0c:	0792                	slli	a5,a5,0x4
    80204f0e:	09c1                	addi	s3,s3,16
    80204f10:	97ce                	add	a5,a5,s3
    80204f12:	f6f43423          	sd	a5,-152(s0)
	int ret = 0;
    80204f16:	4b01                	li	s6,0
			m = (PIPESIZE(pi) - m < n - j) ? PIPESIZE(pi) - m : n - j;		// amount of bytes to write
    80204f18:	20000c93          	li	s9,512
		uint64 addr = (uint64)ioarr[i].iov_base;
    80204f1c:	000dbb83          	ld	s7,0(s11)
		uint64 n = ioarr[i].iov_len;
    80204f20:	008ded03          	lwu	s10,8(s11)
		struct vma* vma = myproc()->vma;
    80204f24:	00005097          	auipc	ra,0x5
    80204f28:	c06080e7          	jalr	-1018(ra) # 80209b2a <myproc>
    80204f2c:	17053903          	ld	s2,368(a0)
		if (!addr_locate_vma(vma, addr)||!addr_locate_vma(vma, addr+n-1))
    80204f30:	85de                	mv	a1,s7
    80204f32:	854a                	mv	a0,s2
    80204f34:	00005097          	auipc	ra,0x5
    80204f38:	dd4080e7          	jalr	-556(ra) # 80209d08 <addr_locate_vma>
    80204f3c:	c55d                	beqz	a0,80204fea <pipewritev+0x134>
    80204f3e:	01ab85b3          	add	a1,s7,s10
    80204f42:	15fd                	addi	a1,a1,-1
    80204f44:	854a                	mv	a0,s2
    80204f46:	00005097          	auipc	ra,0x5
    80204f4a:	dc2080e7          	jalr	-574(ra) # 80209d08 <addr_locate_vma>
    80204f4e:	cd51                	beqz	a0,80204fea <pipewritev+0x134>
		for (j = 0; j < n;) {
    80204f50:	020d0c63          	beqz	s10,80204f88 <pipewritev+0xd2>
    80204f54:	4a81                	li	s5,0
    80204f56:	4981                	li	s3,0
			int m = pipewritable(pi);
    80204f58:	8526                	mv	a0,s1
    80204f5a:	00000097          	auipc	ra,0x0
    80204f5e:	8c4080e7          	jalr	-1852(ra) # 8020481e <pipewritable>
			if (m < 0) {
    80204f62:	0c054e63          	bltz	a0,8020503e <pipewritev+0x188>
			m = (PIPESIZE(pi) - m < n - j) ? PIPESIZE(pi) - m : n - j;		// amount of bytes to write
    80204f66:	0734c903          	lbu	s2,115(s1)
    80204f6a:	012c993b          	sllw	s2,s9,s2
    80204f6e:	413d09b3          	sub	s3,s10,s3
    80204f72:	40a9093b          	subw	s2,s2,a0
    80204f76:	0129f363          	bgeu	s3,s2,80204f7c <pipewritev+0xc6>
    80204f7a:	894e                	mv	s2,s3
    80204f7c:	2901                	sext.w	s2,s2
			while (m > 0) {							// pipe is a loop in a buf
    80204f7e:	05204463          	bgtz	s2,80204fc6 <pipewritev+0x110>
		for (j = 0; j < n;) {
    80204f82:	89d6                	mv	s3,s5
    80204f84:	fdaaeae3          	bltu	s5,s10,80204f58 <pipewritev+0xa2>
	for (int i = 0; i < count; i++) {
    80204f88:	0dc1                	addi	s11,s11,16
    80204f8a:	f6843783          	ld	a5,-152(s0)
    80204f8e:	f8fd97e3          	bne	s11,a5,80204f1c <pipewritev+0x66>
    80204f92:	a8a1                	j	80204fea <pipewritev+0x134>
				int cnt = (pipebound - paddr < m) ? pipebound - paddr : m;
    80204f94:	000a099b          	sext.w	s3,s4
				if (either_copyin(1, paddr, addr + j, cnt) < 0)
    80204f98:	86ce                	mv	a3,s3
    80204f9a:	017a8633          	add	a2,s5,s7
    80204f9e:	4505                	li	a0,1
    80204fa0:	00004097          	auipc	ra,0x4
    80204fa4:	57e080e7          	jalr	1406(ra) # 8020951e <either_copyin>
    80204fa8:	04054163          	bltz	a0,80204fea <pipewritev+0x134>
				m -= cnt;
    80204fac:	4139093b          	subw	s2,s2,s3
				j += cnt;
    80204fb0:	01598abb          	addw	s5,s3,s5
				pi->nwrite += cnt;
    80204fb4:	54fc                	lw	a5,108(s1)
    80204fb6:	01478a3b          	addw	s4,a5,s4
    80204fba:	0744a623          	sw	s4,108(s1)
				ret += cnt;
    80204fbe:	01698b3b          	addw	s6,s3,s6
			while (m > 0) {							// pipe is a loop in a buf
    80204fc2:	fd2050e3          	blez	s2,80204f82 <pipewritev+0xcc>
				char *paddr = pi->pdata + pi->nwrite % PIPESIZE(pi);
    80204fc6:	0734c583          	lbu	a1,115(s1)
    80204fca:	00bc95bb          	sllw	a1,s9,a1
    80204fce:	35fd                	addiw	a1,a1,-1
    80204fd0:	54fc                	lw	a5,108(s1)
    80204fd2:	8dfd                	and	a1,a1,a5
    80204fd4:	1582                	slli	a1,a1,0x20
    80204fd6:	9181                	srli	a1,a1,0x20
    80204fd8:	7cbc                	ld	a5,120(s1)
    80204fda:	95be                	add	a1,a1,a5
				int cnt = (pipebound - paddr < m) ? pipebound - paddr : m;
    80204fdc:	40bc0a33          	sub	s4,s8,a1
    80204fe0:	fb495ae3          	bge	s2,s4,80204f94 <pipewritev+0xde>
    80204fe4:	8a4a                	mv	s4,s2
    80204fe6:	b77d                	j	80204f94 <pipewritev+0xde>
	int ret = 0;
    80204fe8:	4b01                	li	s6,0
	acquire(&pi->lock);		// see pipewritable()
    80204fea:	8526                	mv	a0,s1
    80204fec:	00002097          	auipc	ra,0x2
    80204ff0:	b82080e7          	jalr	-1150(ra) # 80206b6e <acquire>
	pipewakeup(pi, PIPE_READER);
    80204ff4:	4581                	li	a1,0
    80204ff6:	8526                	mv	a0,s1
    80204ff8:	fffff097          	auipc	ra,0xfffff
    80204ffc:	764080e7          	jalr	1892(ra) # 8020475c <pipewakeup>
	pi->writing = 0;
    80205000:	06048923          	sb	zero,114(s1)
	release(&pi->lock);
    80205004:	8526                	mv	a0,s1
    80205006:	00002097          	auipc	ra,0x2
    8020500a:	bbc080e7          	jalr	-1092(ra) # 80206bc2 <release>
	pipeunlock(pi, &wait, PIPE_WRITER);
    8020500e:	4605                	li	a2,1
    80205010:	f7840593          	addi	a1,s0,-136
    80205014:	8526                	mv	a0,s1
    80205016:	00000097          	auipc	ra,0x0
    8020501a:	972080e7          	jalr	-1678(ra) # 80204988 <pipeunlock>
}
    8020501e:	855a                	mv	a0,s6
    80205020:	60ea                	ld	ra,152(sp)
    80205022:	644a                	ld	s0,144(sp)
    80205024:	64aa                	ld	s1,136(sp)
    80205026:	690a                	ld	s2,128(sp)
    80205028:	79e6                	ld	s3,120(sp)
    8020502a:	7a46                	ld	s4,112(sp)
    8020502c:	7aa6                	ld	s5,104(sp)
    8020502e:	7b06                	ld	s6,96(sp)
    80205030:	6be6                	ld	s7,88(sp)
    80205032:	6c46                	ld	s8,80(sp)
    80205034:	6ca6                	ld	s9,72(sp)
    80205036:	6d06                	ld	s10,64(sp)
    80205038:	7de2                	ld	s11,56(sp)
    8020503a:	610d                	addi	sp,sp,160
    8020503c:	8082                	ret
				ret = -EPIPE;
    8020503e:	5b01                	li	s6,-32
    80205040:	b7f9                	j	8020500e <pipewritev+0x158>

0000000080205042 <pipereadv>:
{
    80205042:	7135                	addi	sp,sp,-160
    80205044:	ed06                	sd	ra,152(sp)
    80205046:	e922                	sd	s0,144(sp)
    80205048:	e526                	sd	s1,136(sp)
    8020504a:	e14a                	sd	s2,128(sp)
    8020504c:	fcce                	sd	s3,120(sp)
    8020504e:	f8d2                	sd	s4,112(sp)
    80205050:	f4d6                	sd	s5,104(sp)
    80205052:	f0da                	sd	s6,96(sp)
    80205054:	ecde                	sd	s7,88(sp)
    80205056:	e8e2                	sd	s8,80(sp)
    80205058:	e4e6                	sd	s9,72(sp)
    8020505a:	e0ea                	sd	s10,64(sp)
    8020505c:	fc6e                	sd	s11,56(sp)
    8020505e:	1100                	addi	s0,sp,160
    80205060:	84aa                	mv	s1,a0
    80205062:	89ae                	mv	s3,a1
    80205064:	8932                	mv	s2,a2
	char *const pipebound = pi->pdata + PIPESIZE(pi);
    80205066:	07354783          	lbu	a5,115(a0)
    8020506a:	20000c93          	li	s9,512
    8020506e:	00fc97bb          	sllw	a5,s9,a5
    80205072:	07853c83          	ld	s9,120(a0)
    80205076:	9cbe                	add	s9,s9,a5
	wait.chan = &wait;
    80205078:	f7840593          	addi	a1,s0,-136
    8020507c:	f6b43c23          	sd	a1,-136(s0)
	pipelock(pi, &wait, PIPE_READER);	// block other readers
    80205080:	4601                	li	a2,0
    80205082:	fffff097          	auipc	ra,0xfffff
    80205086:	726080e7          	jalr	1830(ra) # 802047a8 <pipelock>
	if ((ndata = pipereadable(pi, 0)) < 0) {
    8020508a:	4581                	li	a1,0
    8020508c:	8526                	mv	a0,s1
    8020508e:	00000097          	auipc	ra,0x0
    80205092:	850080e7          	jalr	-1968(ra) # 802048de <pipereadable>
    80205096:	12054563          	bltz	a0,802051c0 <pipereadv+0x17e>
    8020509a:	8aaa                	mv	s5,a0
	for (int i = 0; i < count && ndata > 0; i++) {
    8020509c:	0d205763          	blez	s2,8020516a <pipereadv+0x128>
    802050a0:	10a05e63          	blez	a0,802051bc <pipereadv+0x17a>
    802050a4:	8dce                	mv	s11,s3
    802050a6:	fff9079b          	addiw	a5,s2,-1
    802050aa:	1782                	slli	a5,a5,0x20
    802050ac:	9381                	srli	a5,a5,0x20
    802050ae:	0792                	slli	a5,a5,0x4
    802050b0:	97ce                	add	a5,a5,s3
    802050b2:	f6f43423          	sd	a5,-152(s0)
	int ndata, ret = 0;
    802050b6:	4b81                	li	s7,0
			char *paddr = pi->pdata + pi->nread % PIPESIZE(pi);
    802050b8:	20000d13          	li	s10,512
		uint64 addr = (uint64)ioarr[i].iov_base;
    802050bc:	000dbc03          	ld	s8,0(s11)
		uint64 n = ioarr[i].iov_len;
    802050c0:	008de903          	lwu	s2,8(s11)
		int m = n < ndata ? n : ndata;
    802050c4:	8b56                	mv	s6,s5
    802050c6:	01597363          	bgeu	s2,s5,802050cc <pipereadv+0x8a>
    802050ca:	8b4a                	mv	s6,s2
    802050cc:	2b01                	sext.w	s6,s6
		struct vma* vma = myproc()->vma;
    802050ce:	00005097          	auipc	ra,0x5
    802050d2:	a5c080e7          	jalr	-1444(ra) # 80209b2a <myproc>
    802050d6:	17053983          	ld	s3,368(a0)
		if (!addr_locate_vma(vma, addr)||!addr_locate_vma(vma, addr+n-1))
    802050da:	85e2                	mv	a1,s8
    802050dc:	854e                	mv	a0,s3
    802050de:	00005097          	auipc	ra,0x5
    802050e2:	c2a080e7          	jalr	-982(ra) # 80209d08 <addr_locate_vma>
    802050e6:	c159                	beqz	a0,8020516c <pipereadv+0x12a>
    802050e8:	012c05b3          	add	a1,s8,s2
    802050ec:	15fd                	addi	a1,a1,-1
    802050ee:	854e                	mv	a0,s3
    802050f0:	00005097          	auipc	ra,0x5
    802050f4:	c18080e7          	jalr	-1000(ra) # 80209d08 <addr_locate_vma>
    802050f8:	c935                	beqz	a0,8020516c <pipereadv+0x12a>
		for (j = 0; j < m;) {
    802050fa:	07605063          	blez	s6,8020515a <pipereadv+0x118>
    802050fe:	4901                	li	s2,0
    80205100:	a815                	j	80205134 <pipereadv+0xf2>
			int cnt = (pipebound - paddr < m - j) ? pipebound - paddr : m - j;
    80205102:	000a099b          	sext.w	s3,s4
			if (either_copyout(1, addr + j, paddr, cnt) < 0)
    80205106:	86ce                	mv	a3,s3
    80205108:	018905b3          	add	a1,s2,s8
    8020510c:	4505                	li	a0,1
    8020510e:	00004097          	auipc	ra,0x4
    80205112:	3ba080e7          	jalr	954(ra) # 802094c8 <either_copyout>
    80205116:	04054b63          	bltz	a0,8020516c <pipereadv+0x12a>
			pi->nread += cnt;
    8020511a:	54bc                	lw	a5,104(s1)
    8020511c:	01478a3b          	addw	s4,a5,s4
    80205120:	0744a423          	sw	s4,104(s1)
			j += cnt;
    80205124:	0129893b          	addw	s2,s3,s2
			ret += cnt;
    80205128:	01798bbb          	addw	s7,s3,s7
			ndata -= cnt;
    8020512c:	413a8abb          	subw	s5,s5,s3
		for (j = 0; j < m;) {
    80205130:	03695563          	bge	s2,s6,8020515a <pipereadv+0x118>
			char *paddr = pi->pdata + pi->nread % PIPESIZE(pi);
    80205134:	0734c603          	lbu	a2,115(s1)
    80205138:	00cd163b          	sllw	a2,s10,a2
    8020513c:	367d                	addiw	a2,a2,-1
    8020513e:	54bc                	lw	a5,104(s1)
    80205140:	8e7d                	and	a2,a2,a5
    80205142:	1602                	slli	a2,a2,0x20
    80205144:	9201                	srli	a2,a2,0x20
    80205146:	7cbc                	ld	a5,120(s1)
    80205148:	963e                	add	a2,a2,a5
			int cnt = (pipebound - paddr < m - j) ? pipebound - paddr : m - j;
    8020514a:	40cc87b3          	sub	a5,s9,a2
    8020514e:	412b0a3b          	subw	s4,s6,s2
    80205152:	fb47d8e3          	bge	a5,s4,80205102 <pipereadv+0xc0>
    80205156:	8a3e                	mv	s4,a5
    80205158:	b76d                	j	80205102 <pipereadv+0xc0>
	for (int i = 0; i < count && ndata > 0; i++) {
    8020515a:	f6843783          	ld	a5,-152(s0)
    8020515e:	00fd8763          	beq	s11,a5,8020516c <pipereadv+0x12a>
    80205162:	0dc1                	addi	s11,s11,16
    80205164:	f5504ce3          	bgtz	s5,802050bc <pipereadv+0x7a>
    80205168:	a011                	j	8020516c <pipereadv+0x12a>
	int ndata, ret = 0;
    8020516a:	4b81                	li	s7,0
	acquire(&pi->lock);		// see pipewritable()
    8020516c:	8526                	mv	a0,s1
    8020516e:	00002097          	auipc	ra,0x2
    80205172:	a00080e7          	jalr	-1536(ra) # 80206b6e <acquire>
	pipewakeup(pi, PIPE_WRITER);
    80205176:	4585                	li	a1,1
    80205178:	8526                	mv	a0,s1
    8020517a:	fffff097          	auipc	ra,0xfffff
    8020517e:	5e2080e7          	jalr	1506(ra) # 8020475c <pipewakeup>
	release(&pi->lock);
    80205182:	8526                	mv	a0,s1
    80205184:	00002097          	auipc	ra,0x2
    80205188:	a3e080e7          	jalr	-1474(ra) # 80206bc2 <release>
	pipeunlock(pi, &wait, PIPE_READER);
    8020518c:	4601                	li	a2,0
    8020518e:	f7840593          	addi	a1,s0,-136
    80205192:	8526                	mv	a0,s1
    80205194:	fffff097          	auipc	ra,0xfffff
    80205198:	7f4080e7          	jalr	2036(ra) # 80204988 <pipeunlock>
}
    8020519c:	855e                	mv	a0,s7
    8020519e:	60ea                	ld	ra,152(sp)
    802051a0:	644a                	ld	s0,144(sp)
    802051a2:	64aa                	ld	s1,136(sp)
    802051a4:	690a                	ld	s2,128(sp)
    802051a6:	79e6                	ld	s3,120(sp)
    802051a8:	7a46                	ld	s4,112(sp)
    802051aa:	7aa6                	ld	s5,104(sp)
    802051ac:	7b06                	ld	s6,96(sp)
    802051ae:	6be6                	ld	s7,88(sp)
    802051b0:	6c46                	ld	s8,80(sp)
    802051b2:	6ca6                	ld	s9,72(sp)
    802051b4:	6d06                	ld	s10,64(sp)
    802051b6:	7de2                	ld	s11,56(sp)
    802051b8:	610d                	addi	sp,sp,160
    802051ba:	8082                	ret
	int ndata, ret = 0;
    802051bc:	4b81                	li	s7,0
    802051be:	b77d                	j	8020516c <pipereadv+0x12a>
		ret = -EPIPE;
    802051c0:	5b81                	li	s7,-32
    802051c2:	b7e9                	j	8020518c <pipereadv+0x14a>

00000000802051c4 <fileinit>:

extern int disk_init_flag;

void
fileinit(void)
{
    802051c4:	1101                	addi	sp,sp,-32
    802051c6:	ec06                	sd	ra,24(sp)
    802051c8:	e822                	sd	s0,16(sp)
    802051ca:	e426                	sd	s1,8(sp)
    802051cc:	e04a                	sd	s2,0(sp)
    802051ce:	1000                	addi	s0,sp,32
  initlock(&ftable.lock, "ftable");
    802051d0:	0000c597          	auipc	a1,0xc
    802051d4:	2e858593          	addi	a1,a1,744 # 802114b8 <rodata_start+0x4b8>
    802051d8:	00567517          	auipc	a0,0x567
    802051dc:	a8850513          	addi	a0,a0,-1400 # 8076bc60 <ftable>
    802051e0:	00002097          	auipc	ra,0x2
    802051e4:	94a080e7          	jalr	-1718(ra) # 80206b2a <initlock>
  disk_init_flag = 0;
    802051e8:	00543797          	auipc	a5,0x543
    802051ec:	fa07ac23          	sw	zero,-72(a5) # 807481a0 <disk_init_flag>
  struct file *f;
  for(f = ftable.file; f < ftable.file + NFILE; f++){
    802051f0:	00567497          	auipc	s1,0x567
    802051f4:	a8848493          	addi	s1,s1,-1400 # 8076bc78 <ftable+0x18>
    802051f8:	00569917          	auipc	s2,0x569
    802051fc:	d3890913          	addi	s2,s2,-712 # 8076df30 <devsw>
    memset(f, 0, sizeof(struct file));
    80205200:	05800613          	li	a2,88
    80205204:	4581                	li	a1,0
    80205206:	8526                	mv	a0,s1
    80205208:	ffffc097          	auipc	ra,0xffffc
    8020520c:	b6c080e7          	jalr	-1172(ra) # 80200d74 <memset>
  for(f = ftable.file; f < ftable.file + NFILE; f++){
    80205210:	05848493          	addi	s1,s1,88
    80205214:	ff2496e3          	bne	s1,s2,80205200 <fileinit+0x3c>
  }
  #ifdef DEBUG
  printf("fileinit\n");
    80205218:	0000c517          	auipc	a0,0xc
    8020521c:	2a850513          	addi	a0,a0,680 # 802114c0 <rodata_start+0x4c0>
    80205220:	00002097          	auipc	ra,0x2
    80205224:	cf8080e7          	jalr	-776(ra) # 80206f18 <printf>
  #endif
}
    80205228:	60e2                	ld	ra,24(sp)
    8020522a:	6442                	ld	s0,16(sp)
    8020522c:	64a2                	ld	s1,8(sp)
    8020522e:	6902                	ld	s2,0(sp)
    80205230:	6105                	addi	sp,sp,32
    80205232:	8082                	ret

0000000080205234 <filealloc>:

// Allocate a file structure.
struct file*
filealloc(void)
{
    80205234:	1101                	addi	sp,sp,-32
    80205236:	ec06                	sd	ra,24(sp)
    80205238:	e822                	sd	s0,16(sp)
    8020523a:	e426                	sd	s1,8(sp)
    8020523c:	1000                	addi	s0,sp,32
  struct file *f;

  acquire(&ftable.lock);
    8020523e:	00567517          	auipc	a0,0x567
    80205242:	a2250513          	addi	a0,a0,-1502 # 8076bc60 <ftable>
    80205246:	00002097          	auipc	ra,0x2
    8020524a:	928080e7          	jalr	-1752(ra) # 80206b6e <acquire>
  for(f = ftable.file; f < ftable.file + NFILE; f++){
    8020524e:	00567497          	auipc	s1,0x567
    80205252:	a2a48493          	addi	s1,s1,-1494 # 8076bc78 <ftable+0x18>
    80205256:	00569717          	auipc	a4,0x569
    8020525a:	cda70713          	addi	a4,a4,-806 # 8076df30 <devsw>
    if(f->ref == 0){
    8020525e:	40dc                	lw	a5,4(s1)
    80205260:	cf99                	beqz	a5,8020527e <filealloc+0x4a>
  for(f = ftable.file; f < ftable.file + NFILE; f++){
    80205262:	05848493          	addi	s1,s1,88
    80205266:	fee49ce3          	bne	s1,a4,8020525e <filealloc+0x2a>
      f->ref = 1;
      release(&ftable.lock);
      return f;
    }
  }
  release(&ftable.lock);
    8020526a:	00567517          	auipc	a0,0x567
    8020526e:	9f650513          	addi	a0,a0,-1546 # 8076bc60 <ftable>
    80205272:	00002097          	auipc	ra,0x2
    80205276:	950080e7          	jalr	-1712(ra) # 80206bc2 <release>
  return NULL;
    8020527a:	4481                	li	s1,0
    8020527c:	a819                	j	80205292 <filealloc+0x5e>
      f->ref = 1;
    8020527e:	4785                	li	a5,1
    80205280:	c0dc                	sw	a5,4(s1)
      release(&ftable.lock);
    80205282:	00567517          	auipc	a0,0x567
    80205286:	9de50513          	addi	a0,a0,-1570 # 8076bc60 <ftable>
    8020528a:	00002097          	auipc	ra,0x2
    8020528e:	938080e7          	jalr	-1736(ra) # 80206bc2 <release>
}
    80205292:	8526                	mv	a0,s1
    80205294:	60e2                	ld	ra,24(sp)
    80205296:	6442                	ld	s0,16(sp)
    80205298:	64a2                	ld	s1,8(sp)
    8020529a:	6105                	addi	sp,sp,32
    8020529c:	8082                	ret

000000008020529e <filedup>:

// Increment ref count for file f.
struct file*
filedup(struct file *f)
{
    8020529e:	1101                	addi	sp,sp,-32
    802052a0:	ec06                	sd	ra,24(sp)
    802052a2:	e822                	sd	s0,16(sp)
    802052a4:	e426                	sd	s1,8(sp)
    802052a6:	1000                	addi	s0,sp,32
    802052a8:	84aa                	mv	s1,a0
  acquire(&ftable.lock);
    802052aa:	00567517          	auipc	a0,0x567
    802052ae:	9b650513          	addi	a0,a0,-1610 # 8076bc60 <ftable>
    802052b2:	00002097          	auipc	ra,0x2
    802052b6:	8bc080e7          	jalr	-1860(ra) # 80206b6e <acquire>
  if(f->ref < 1)
    802052ba:	40dc                	lw	a5,4(s1)
    802052bc:	02f05263          	blez	a5,802052e0 <filedup+0x42>
    panic("filedup");
  f->ref++;
    802052c0:	2785                	addiw	a5,a5,1
    802052c2:	c0dc                	sw	a5,4(s1)
  release(&ftable.lock);
    802052c4:	00567517          	auipc	a0,0x567
    802052c8:	99c50513          	addi	a0,a0,-1636 # 8076bc60 <ftable>
    802052cc:	00002097          	auipc	ra,0x2
    802052d0:	8f6080e7          	jalr	-1802(ra) # 80206bc2 <release>
  return f;
}
    802052d4:	8526                	mv	a0,s1
    802052d6:	60e2                	ld	ra,24(sp)
    802052d8:	6442                	ld	s0,16(sp)
    802052da:	64a2                	ld	s1,8(sp)
    802052dc:	6105                	addi	sp,sp,32
    802052de:	8082                	ret
    panic("filedup");
    802052e0:	0000c517          	auipc	a0,0xc
    802052e4:	1f050513          	addi	a0,a0,496 # 802114d0 <rodata_start+0x4d0>
    802052e8:	00002097          	auipc	ra,0x2
    802052ec:	be6080e7          	jalr	-1050(ra) # 80206ece <panic>

00000000802052f0 <fileclose>:

// Close file f.  (Decrement ref count, close when reaches 0.)
void
fileclose(struct file *f)
{
    802052f0:	7139                	addi	sp,sp,-64
    802052f2:	fc06                	sd	ra,56(sp)
    802052f4:	f822                	sd	s0,48(sp)
    802052f6:	f426                	sd	s1,40(sp)
    802052f8:	f04a                	sd	s2,32(sp)
    802052fa:	ec4e                	sd	s3,24(sp)
    802052fc:	e852                	sd	s4,16(sp)
    802052fe:	e456                	sd	s5,8(sp)
    80205300:	0080                	addi	s0,sp,64
    80205302:	84aa                	mv	s1,a0
  struct file ff;

  acquire(&ftable.lock);
    80205304:	00567517          	auipc	a0,0x567
    80205308:	95c50513          	addi	a0,a0,-1700 # 8076bc60 <ftable>
    8020530c:	00002097          	auipc	ra,0x2
    80205310:	862080e7          	jalr	-1950(ra) # 80206b6e <acquire>
  if(f->ref < 1)
    80205314:	40dc                	lw	a5,4(s1)
    80205316:	04f05863          	blez	a5,80205366 <fileclose+0x76>
    panic("fileclose");
  if(--f->ref > 0){
    8020531a:	37fd                	addiw	a5,a5,-1
    8020531c:	0007871b          	sext.w	a4,a5
    80205320:	c0dc                	sw	a5,4(s1)
    80205322:	04e04a63          	bgtz	a4,80205376 <fileclose+0x86>
    release(&ftable.lock);
    return;
  }
  ff = *f;
    80205326:	0004a903          	lw	s2,0(s1)
    8020532a:	0094ca03          	lbu	s4,9(s1)
    8020532e:	0104b983          	ld	s3,16(s1)
    80205332:	0184ba83          	ld	s5,24(s1)
  f->ref = 0;
    80205336:	0004a223          	sw	zero,4(s1)
  f->type = FD_NONE;
    8020533a:	0004a023          	sw	zero,0(s1)
  release(&ftable.lock);
    8020533e:	00567517          	auipc	a0,0x567
    80205342:	92250513          	addi	a0,a0,-1758 # 8076bc60 <ftable>
    80205346:	00002097          	auipc	ra,0x2
    8020534a:	87c080e7          	jalr	-1924(ra) # 80206bc2 <release>

  if(ff.type == FD_PIPE){
    8020534e:	4785                	li	a5,1
    80205350:	04f90463          	beq	s2,a5,80205398 <fileclose+0xa8>
    pipeclose(ff.pipe, ff.writable);
  } else if(ff.type == FD_ENTRY){
    80205354:	4789                	li	a5,2
    80205356:	02f91863          	bne	s2,a5,80205386 <fileclose+0x96>
    eput(ff.ep);
    8020535a:	8556                	mv	a0,s5
    8020535c:	ffffe097          	auipc	ra,0xffffe
    80205360:	620080e7          	jalr	1568(ra) # 8020397c <eput>
    80205364:	a00d                	j	80205386 <fileclose+0x96>
    panic("fileclose");
    80205366:	0000c517          	auipc	a0,0xc
    8020536a:	17250513          	addi	a0,a0,370 # 802114d8 <rodata_start+0x4d8>
    8020536e:	00002097          	auipc	ra,0x2
    80205372:	b60080e7          	jalr	-1184(ra) # 80206ece <panic>
    release(&ftable.lock);
    80205376:	00567517          	auipc	a0,0x567
    8020537a:	8ea50513          	addi	a0,a0,-1814 # 8076bc60 <ftable>
    8020537e:	00002097          	auipc	ra,0x2
    80205382:	844080e7          	jalr	-1980(ra) # 80206bc2 <release>
  } else if (ff.type == FD_DEVICE) {

  }
}
    80205386:	70e2                	ld	ra,56(sp)
    80205388:	7442                	ld	s0,48(sp)
    8020538a:	74a2                	ld	s1,40(sp)
    8020538c:	7902                	ld	s2,32(sp)
    8020538e:	69e2                	ld	s3,24(sp)
    80205390:	6a42                	ld	s4,16(sp)
    80205392:	6aa2                	ld	s5,8(sp)
    80205394:	6121                	addi	sp,sp,64
    80205396:	8082                	ret
    pipeclose(ff.pipe, ff.writable);
    80205398:	85d2                	mv	a1,s4
    8020539a:	854e                	mv	a0,s3
    8020539c:	fffff097          	auipc	ra,0xfffff
    802053a0:	762080e7          	jalr	1890(ra) # 80204afe <pipeclose>
    802053a4:	b7cd                	j	80205386 <fileclose+0x96>

00000000802053a6 <fileillegal>:

int fileillegal(struct file* f){
  switch (f->type) {
    802053a6:	411c                	lw	a5,0(a0)
    802053a8:	4709                	li	a4,2
    802053aa:	06e78e63          	beq	a5,a4,80205426 <fileillegal+0x80>
int fileillegal(struct file* f){
    802053ae:	1101                	addi	sp,sp,-32
    802053b0:	ec06                	sd	ra,24(sp)
    802053b2:	e822                	sd	s0,16(sp)
    802053b4:	e426                	sd	s1,8(sp)
    802053b6:	e04a                	sd	s2,0(sp)
    802053b8:	1000                	addi	s0,sp,32
    802053ba:	84aa                	mv	s1,a0
  switch (f->type) {
    802053bc:	9bf5                	andi	a5,a5,-3
    802053be:	4705                	li	a4,1
    802053c0:	00e78a63          	beq	a5,a4,802053d4 <fileillegal+0x2e>
        if(f->major < 0 || f->major >= getdevnum() || !devsw[f->major].read || !devsw[f->major].write)
          return 1;
    case FD_ENTRY:
        break;
    default:
      panic("fileillegal");
    802053c4:	0000c517          	auipc	a0,0xc
    802053c8:	12450513          	addi	a0,a0,292 # 802114e8 <rodata_start+0x4e8>
    802053cc:	00002097          	auipc	ra,0x2
    802053d0:	b02080e7          	jalr	-1278(ra) # 80206ece <panic>
        if(f->major < 0 || f->major >= getdevnum() || !devsw[f->major].read || !devsw[f->major].write)
    802053d4:	02851903          	lh	s2,40(a0)
          return 1;
    802053d8:	4505                	li	a0,1
        if(f->major < 0 || f->major >= getdevnum() || !devsw[f->major].read || !devsw[f->major].write)
    802053da:	04094063          	bltz	s2,8020541a <fileillegal+0x74>
    802053de:	00001097          	auipc	ra,0x1
    802053e2:	d72080e7          	jalr	-654(ra) # 80206150 <getdevnum>
    802053e6:	87aa                	mv	a5,a0
    802053e8:	2901                	sext.w	s2,s2
          return 1;
    802053ea:	4505                	li	a0,1
        if(f->major < 0 || f->major >= getdevnum() || !devsw[f->major].read || !devsw[f->major].write)
    802053ec:	02f95763          	bge	s2,a5,8020541a <fileillegal+0x74>
    802053f0:	02849703          	lh	a4,40(s1)
    802053f4:	00371793          	slli	a5,a4,0x3
    802053f8:	8f99                	sub	a5,a5,a4
    802053fa:	078e                	slli	a5,a5,0x3
    802053fc:	00569697          	auipc	a3,0x569
    80205400:	b3468693          	addi	a3,a3,-1228 # 8076df30 <devsw>
    80205404:	97b6                	add	a5,a5,a3
    80205406:	779c                	ld	a5,40(a5)
    80205408:	c38d                	beqz	a5,8020542a <fileillegal+0x84>
    8020540a:	00371793          	slli	a5,a4,0x3
    8020540e:	8f99                	sub	a5,a5,a4
    80205410:	078e                	slli	a5,a5,0x3
    80205412:	97b6                	add	a5,a5,a3
    80205414:	7b88                	ld	a0,48(a5)
          return 1;
    80205416:	00153513          	seqz	a0,a0
      return 1;
  }
  return 0;
}
    8020541a:	60e2                	ld	ra,24(sp)
    8020541c:	6442                	ld	s0,16(sp)
    8020541e:	64a2                	ld	s1,8(sp)
    80205420:	6902                	ld	s2,0(sp)
    80205422:	6105                	addi	sp,sp,32
    80205424:	8082                	ret
  switch (f->type) {
    80205426:	4501                	li	a0,0
}
    80205428:	8082                	ret
          return 1;
    8020542a:	4505                	li	a0,1
    8020542c:	b7fd                	j	8020541a <fileillegal+0x74>

000000008020542e <print_f_info>:

void print_f_info(struct file* f){
    8020542e:	1141                	addi	sp,sp,-16
    80205430:	e406                	sd	ra,8(sp)
    80205432:	e022                	sd	s0,0(sp)
    80205434:	0800                	addi	s0,sp,16
  switch (f->type) {
    80205436:	411c                	lw	a5,0(a0)
    80205438:	4709                	li	a4,2
    8020543a:	04e78863          	beq	a5,a4,8020548a <print_f_info+0x5c>
    8020543e:	00f76f63          	bltu	a4,a5,8020545c <print_f_info+0x2e>
    80205442:	cfb1                	beqz	a5,8020549e <print_f_info+0x70>
    case FD_PIPE:
        printf("[file]PIPE\n");
    80205444:	0000c517          	auipc	a0,0xc
    80205448:	0b450513          	addi	a0,a0,180 # 802114f8 <rodata_start+0x4f8>
    8020544c:	00002097          	auipc	ra,0x2
    80205450:	acc080e7          	jalr	-1332(ra) # 80206f18 <printf>
    case FD_NONE:
        printf("[file]NONE\n");
    	return;
  }

}
    80205454:	60a2                	ld	ra,8(sp)
    80205456:	6402                	ld	s0,0(sp)
    80205458:	0141                	addi	sp,sp,16
    8020545a:	8082                	ret
  switch (f->type) {
    8020545c:	470d                	li	a4,3
    8020545e:	fee79be3          	bne	a5,a4,80205454 <print_f_info+0x26>
        printf("[file]DEVICE name:%s\n",devsw[f->major].name);
    80205462:	02851583          	lh	a1,40(a0)
    80205466:	00359793          	slli	a5,a1,0x3
    8020546a:	8f8d                	sub	a5,a5,a1
    8020546c:	078e                	slli	a5,a5,0x3
    8020546e:	00569597          	auipc	a1,0x569
    80205472:	ac258593          	addi	a1,a1,-1342 # 8076df30 <devsw>
    80205476:	95be                	add	a1,a1,a5
    80205478:	0000c517          	auipc	a0,0xc
    8020547c:	09050513          	addi	a0,a0,144 # 80211508 <rodata_start+0x508>
    80205480:	00002097          	auipc	ra,0x2
    80205484:	a98080e7          	jalr	-1384(ra) # 80206f18 <printf>
        break;
    80205488:	b7f1                	j	80205454 <print_f_info+0x26>
        printf("[file]ENTRY name:%s\n",f->ep->filename);
    8020548a:	6d0c                	ld	a1,24(a0)
    8020548c:	0000c517          	auipc	a0,0xc
    80205490:	09450513          	addi	a0,a0,148 # 80211520 <rodata_start+0x520>
    80205494:	00002097          	auipc	ra,0x2
    80205498:	a84080e7          	jalr	-1404(ra) # 80206f18 <printf>
        break;
    8020549c:	bf65                	j	80205454 <print_f_info+0x26>
        printf("[file]NONE\n");
    8020549e:	0000c517          	auipc	a0,0xc
    802054a2:	09a50513          	addi	a0,a0,154 # 80211538 <rodata_start+0x538>
    802054a6:	00002097          	auipc	ra,0x2
    802054aa:	a72080e7          	jalr	-1422(ra) # 80206f18 <printf>
    	return;
    802054ae:	b75d                	j	80205454 <print_f_info+0x26>

00000000802054b0 <fileiolock>:

void fileiolock(struct file* f){
    802054b0:	1141                	addi	sp,sp,-16
    802054b2:	e406                	sd	ra,8(sp)
    802054b4:	e022                	sd	s0,0(sp)
    802054b6:	0800                	addi	s0,sp,16
  switch (f->type) {
    802054b8:	411c                	lw	a5,0(a0)
    802054ba:	4709                	li	a4,2
    802054bc:	02e78863          	beq	a5,a4,802054ec <fileiolock+0x3c>
    802054c0:	470d                	li	a4,3
    802054c2:	02e79163          	bne	a5,a4,802054e4 <fileiolock+0x34>
    case FD_PIPE:
        break;
    case FD_DEVICE:
        acquire(&(devsw + f->major)->lk);
    802054c6:	02851503          	lh	a0,40(a0)
    802054ca:	00351793          	slli	a5,a0,0x3
    802054ce:	8f89                	sub	a5,a5,a0
    802054d0:	078e                	slli	a5,a5,0x3
    802054d2:	00569517          	auipc	a0,0x569
    802054d6:	a6e50513          	addi	a0,a0,-1426 # 8076df40 <devsw+0x10>
    802054da:	953e                	add	a0,a0,a5
    802054dc:	00001097          	auipc	ra,0x1
    802054e0:	692080e7          	jalr	1682(ra) # 80206b6e <acquire>
        elock(f->ep);
        break;
    case FD_NONE:
    	return;
  }
}
    802054e4:	60a2                	ld	ra,8(sp)
    802054e6:	6402                	ld	s0,0(sp)
    802054e8:	0141                	addi	sp,sp,16
    802054ea:	8082                	ret
        elock(f->ep);
    802054ec:	6d08                	ld	a0,24(a0)
    802054ee:	ffffe097          	auipc	ra,0xffffe
    802054f2:	40a080e7          	jalr	1034(ra) # 802038f8 <elock>
        break;
    802054f6:	b7fd                	j	802054e4 <fileiolock+0x34>

00000000802054f8 <fileiounlock>:

void fileiounlock(struct file* f){
    802054f8:	1141                	addi	sp,sp,-16
    802054fa:	e406                	sd	ra,8(sp)
    802054fc:	e022                	sd	s0,0(sp)
    802054fe:	0800                	addi	s0,sp,16
  switch (f->type) {
    80205500:	411c                	lw	a5,0(a0)
    80205502:	4709                	li	a4,2
    80205504:	02e78863          	beq	a5,a4,80205534 <fileiounlock+0x3c>
    80205508:	470d                	li	a4,3
    8020550a:	02e79163          	bne	a5,a4,8020552c <fileiounlock+0x34>
    case FD_PIPE:
        break;
    case FD_DEVICE:
        release(&(devsw + f->major)->lk);
    8020550e:	02851503          	lh	a0,40(a0)
    80205512:	00351793          	slli	a5,a0,0x3
    80205516:	8f89                	sub	a5,a5,a0
    80205518:	078e                	slli	a5,a5,0x3
    8020551a:	00569517          	auipc	a0,0x569
    8020551e:	a2650513          	addi	a0,a0,-1498 # 8076df40 <devsw+0x10>
    80205522:	953e                	add	a0,a0,a5
    80205524:	00001097          	auipc	ra,0x1
    80205528:	69e080e7          	jalr	1694(ra) # 80206bc2 <release>
        eunlock(f->ep);
        break;
    case FD_NONE:
    	return;
  }
}
    8020552c:	60a2                	ld	ra,8(sp)
    8020552e:	6402                	ld	s0,0(sp)
    80205530:	0141                	addi	sp,sp,16
    80205532:	8082                	ret
        eunlock(f->ep);
    80205534:	6d08                	ld	a0,24(a0)
    80205536:	ffffe097          	auipc	ra,0xffffe
    8020553a:	3f8080e7          	jalr	1016(ra) # 8020392e <eunlock>
        break;
    8020553e:	b7fd                	j	8020552c <fileiounlock+0x34>

0000000080205540 <fileinput>:

uint64
fileinput(struct file* f, int user, uint64 addr, int n, uint64 off){
    80205540:	1141                	addi	sp,sp,-16
    80205542:	e406                	sd	ra,8(sp)
    80205544:	e022                	sd	s0,0(sp)
    80205546:	0800                	addi	s0,sp,16
    80205548:	87aa                	mv	a5,a0
    8020554a:	88ae                	mv	a7,a1
    8020554c:	85b2                	mv	a1,a2
    8020554e:	863a                	mv	a2,a4
  uint64 r = 0;
  switch (f->type) {
    80205550:	00052803          	lw	a6,0(a0)
    80205554:	4709                	li	a4,2
    80205556:	04e80563          	beq	a6,a4,802055a0 <fileinput+0x60>
    8020555a:	470d                	li	a4,3
    8020555c:	02e80263          	beq	a6,a4,80205580 <fileinput+0x40>
    80205560:	4705                	li	a4,1
    80205562:	4501                	li	a0,0
    80205564:	00e80663          	beq	a6,a4,80205570 <fileinput+0x30>
        break;
    case FD_NONE:
    	return 0;
  }
  return r;
}
    80205568:	60a2                	ld	ra,8(sp)
    8020556a:	6402                	ld	s0,0(sp)
    8020556c:	0141                	addi	sp,sp,16
    8020556e:	8082                	ret
        r = piperead(f->pipe, user, addr, n);
    80205570:	862e                	mv	a2,a1
    80205572:	85c6                	mv	a1,a7
    80205574:	6b88                	ld	a0,16(a5)
    80205576:	fffff097          	auipc	ra,0xfffff
    8020557a:	7ce080e7          	jalr	1998(ra) # 80204d44 <piperead>
        break;
    8020557e:	b7ed                	j	80205568 <fileinput+0x28>
        r = (devsw + f->major)->read(user, addr, n);
    80205580:	02851703          	lh	a4,40(a0)
    80205584:	00371793          	slli	a5,a4,0x3
    80205588:	8f99                	sub	a5,a5,a4
    8020558a:	078e                	slli	a5,a5,0x3
    8020558c:	00569717          	auipc	a4,0x569
    80205590:	9a470713          	addi	a4,a4,-1628 # 8076df30 <devsw>
    80205594:	97ba                	add	a5,a5,a4
    80205596:	779c                	ld	a5,40(a5)
    80205598:	8636                	mv	a2,a3
    8020559a:	8546                	mv	a0,a7
    8020559c:	9782                	jalr	a5
        break;
    8020559e:	b7e9                	j	80205568 <fileinput+0x28>
        r = eread(f->ep, user, addr, off, n);
    802055a0:	8736                	mv	a4,a3
    802055a2:	0006069b          	sext.w	a3,a2
    802055a6:	862e                	mv	a2,a1
    802055a8:	85c6                	mv	a1,a7
    802055aa:	6d08                	ld	a0,24(a0)
    802055ac:	ffffe097          	auipc	ra,0xffffe
    802055b0:	96c080e7          	jalr	-1684(ra) # 80202f18 <eread>
        break;
    802055b4:	bf55                	j	80205568 <fileinput+0x28>

00000000802055b6 <fileoutput>:

uint64
fileoutput(struct file* f, int user, uint64 addr, int n, uint64 off){
    802055b6:	1141                	addi	sp,sp,-16
    802055b8:	e406                	sd	ra,8(sp)
    802055ba:	e022                	sd	s0,0(sp)
    802055bc:	0800                	addi	s0,sp,16
    802055be:	87aa                	mv	a5,a0
    802055c0:	88ae                	mv	a7,a1
    802055c2:	85b2                	mv	a1,a2
    802055c4:	863a                	mv	a2,a4
  uint64 r = 0;
  switch (f->type) {
    802055c6:	00052803          	lw	a6,0(a0)
    802055ca:	4709                	li	a4,2
    802055cc:	04e80563          	beq	a6,a4,80205616 <fileoutput+0x60>
    802055d0:	470d                	li	a4,3
    802055d2:	02e80263          	beq	a6,a4,802055f6 <fileoutput+0x40>
    802055d6:	4705                	li	a4,1
    802055d8:	4501                	li	a0,0
    802055da:	00e80663          	beq	a6,a4,802055e6 <fileoutput+0x30>
        break;
    case FD_NONE:
    	return 0;
  }
  return r;
}
    802055de:	60a2                	ld	ra,8(sp)
    802055e0:	6402                	ld	s0,0(sp)
    802055e2:	0141                	addi	sp,sp,16
    802055e4:	8082                	ret
        r = pipewrite(f->pipe, user, addr, n);
    802055e6:	862e                	mv	a2,a1
    802055e8:	85c6                	mv	a1,a7
    802055ea:	6b88                	ld	a0,16(a5)
    802055ec:	fffff097          	auipc	ra,0xfffff
    802055f0:	596080e7          	jalr	1430(ra) # 80204b82 <pipewrite>
        break;
    802055f4:	b7ed                	j	802055de <fileoutput+0x28>
        r = (devsw + f->major)->write(user, addr, n);
    802055f6:	02851703          	lh	a4,40(a0)
    802055fa:	00371793          	slli	a5,a4,0x3
    802055fe:	8f99                	sub	a5,a5,a4
    80205600:	078e                	slli	a5,a5,0x3
    80205602:	00569717          	auipc	a4,0x569
    80205606:	92e70713          	addi	a4,a4,-1746 # 8076df30 <devsw>
    8020560a:	97ba                	add	a5,a5,a4
    8020560c:	7b9c                	ld	a5,48(a5)
    8020560e:	8636                	mv	a2,a3
    80205610:	8546                	mv	a0,a7
    80205612:	9782                	jalr	a5
        break;
    80205614:	b7e9                	j	802055de <fileoutput+0x28>
        r = ewrite(f->ep, user, addr, off, n);
    80205616:	8736                	mv	a4,a3
    80205618:	0006069b          	sext.w	a3,a2
    8020561c:	862e                	mv	a2,a1
    8020561e:	85c6                	mv	a1,a7
    80205620:	6d08                	ld	a0,24(a0)
    80205622:	ffffe097          	auipc	ra,0xffffe
    80205626:	a0c080e7          	jalr	-1524(ra) # 8020302e <ewrite>
        break;
    8020562a:	bf55                	j	802055de <fileoutput+0x28>

000000008020562c <filestat>:
filestat(struct file *f, uint64 addr)
{
  // struct proc *p = myproc();
  struct stat st;
  
  if(f->type == FD_ENTRY){
    8020562c:	4118                	lw	a4,0(a0)
    8020562e:	4789                	li	a5,2
    80205630:	04f71d63          	bne	a4,a5,8020568a <filestat+0x5e>
{
    80205634:	711d                	addi	sp,sp,-96
    80205636:	ec86                	sd	ra,88(sp)
    80205638:	e8a2                	sd	s0,80(sp)
    8020563a:	e4a6                	sd	s1,72(sp)
    8020563c:	e0ca                	sd	s2,64(sp)
    8020563e:	1080                	addi	s0,sp,96
    80205640:	84aa                	mv	s1,a0
    80205642:	892e                	mv	s2,a1
    elock(f->ep);
    80205644:	6d08                	ld	a0,24(a0)
    80205646:	ffffe097          	auipc	ra,0xffffe
    8020564a:	2b2080e7          	jalr	690(ra) # 802038f8 <elock>
    estat(f->ep, &st);
    8020564e:	fa840593          	addi	a1,s0,-88
    80205652:	6c88                	ld	a0,24(s1)
    80205654:	ffffe097          	auipc	ra,0xffffe
    80205658:	474080e7          	jalr	1140(ra) # 80203ac8 <estat>
    eunlock(f->ep);
    8020565c:	6c88                	ld	a0,24(s1)
    8020565e:	ffffe097          	auipc	ra,0xffffe
    80205662:	2d0080e7          	jalr	720(ra) # 8020392e <eunlock>
    // if(copyout(p->pagetable, addr, (char *)&st, sizeof(st)) < 0)
    if(either_copyout(1, addr, (char *)&st, sizeof(st)) < 0)
    80205666:	03800693          	li	a3,56
    8020566a:	fa840613          	addi	a2,s0,-88
    8020566e:	85ca                	mv	a1,s2
    80205670:	4505                	li	a0,1
    80205672:	00004097          	auipc	ra,0x4
    80205676:	e56080e7          	jalr	-426(ra) # 802094c8 <either_copyout>
    8020567a:	41f5551b          	sraiw	a0,a0,0x1f
      return -1;
    return 0;
  }
  return -1;
}
    8020567e:	60e6                	ld	ra,88(sp)
    80205680:	6446                	ld	s0,80(sp)
    80205682:	64a6                	ld	s1,72(sp)
    80205684:	6906                	ld	s2,64(sp)
    80205686:	6125                	addi	sp,sp,96
    80205688:	8082                	ret
  return -1;
    8020568a:	557d                	li	a0,-1
}
    8020568c:	8082                	ret

000000008020568e <filekstat>:

// Get metadata about file f.
// addr is a user virtual address, pointing to a struct stat.
int
filekstat(struct file *f, uint64 addr)
{
    8020568e:	7171                	addi	sp,sp,-176
    80205690:	f506                	sd	ra,168(sp)
    80205692:	f122                	sd	s0,160(sp)
    80205694:	ed26                	sd	s1,152(sp)
    80205696:	e94a                	sd	s2,144(sp)
    80205698:	e54e                	sd	s3,136(sp)
    8020569a:	1900                	addi	s0,sp,176
    8020569c:	84aa                	mv	s1,a0
    8020569e:	892e                	mv	s2,a1
  //struct proc *p = myproc();
  struct kstat kst;
  
  if(f->type == FD_ENTRY){
    802056a0:	411c                	lw	a5,0(a0)
    802056a2:	4709                	li	a4,2
    802056a4:	08e78863          	beq	a5,a4,80205734 <filekstat+0xa6>
    kst.st_mtime_nsec = f->t1_sec;
    if(kst.st_mtime_sec == 0x000000003ffffffe)kst.st_mtime_sec = 0;
    if(kst.st_atime_sec == 0x000000003ffffffe)kst.st_atime_sec = 0;
    if(kst.st_mtime_nsec == 0x0000000100000000)kst.st_mtime_sec = 0x0000000100000000;
    if(kst.st_atime_nsec == 0x0000000100000000)kst.st_atime_sec = 0x0000000100000000;
  }else if(f->type == FD_DEVICE){
    802056a8:	470d                	li	a4,3
    802056aa:	10e79463          	bne	a5,a4,802057b2 <filekstat+0x124>
    if(f->major < 0 || f->major >= getdevnum() || !devsw[f->major].read)
    802056ae:	02851983          	lh	s3,40(a0)
    802056b2:	1009c263          	bltz	s3,802057b6 <filekstat+0x128>
    802056b6:	00001097          	auipc	ra,0x1
    802056ba:	a9a080e7          	jalr	-1382(ra) # 80206150 <getdevnum>
    802056be:	2981                	sext.w	s3,s3
    802056c0:	0ea9dd63          	bge	s3,a0,802057ba <filekstat+0x12c>
    802056c4:	02849703          	lh	a4,40(s1)
    802056c8:	00371793          	slli	a5,a4,0x3
    802056cc:	8f99                	sub	a5,a5,a4
    802056ce:	078e                	slli	a5,a5,0x3
    802056d0:	00569697          	auipc	a3,0x569
    802056d4:	86068693          	addi	a3,a3,-1952 # 8076df30 <devsw>
    802056d8:	97b6                	add	a5,a5,a3
    802056da:	779c                	ld	a5,40(a5)
    802056dc:	c3ed                	beqz	a5,802057be <filekstat+0x130>
          return -1;
    struct devsw* mydev = devsw + f->major;
    802056de:	00371493          	slli	s1,a4,0x3
    802056e2:	8c99                	sub	s1,s1,a4
    802056e4:	048e                	slli	s1,s1,0x3
    802056e6:	94b6                	add	s1,s1,a3
    acquire(&mydev->lk);
    802056e8:	01048993          	addi	s3,s1,16
    802056ec:	854e                	mv	a0,s3
    802056ee:	00001097          	auipc	ra,0x1
    802056f2:	480080e7          	jalr	1152(ra) # 80206b6e <acquire>
    devkstat(mydev,&kst);
    802056f6:	f5040593          	addi	a1,s0,-176
    802056fa:	8526                	mv	a0,s1
    802056fc:	00001097          	auipc	ra,0x1
    80205700:	e5c080e7          	jalr	-420(ra) # 80206558 <devkstat>
    release(&mydev->lk);
    80205704:	854e                	mv	a0,s3
    80205706:	00001097          	auipc	ra,0x1
    8020570a:	4bc080e7          	jalr	1212(ra) # 80206bc2 <release>
  }else {
    return -1;
  }    
  if(either_copyout(1, addr, (char *)&kst, sizeof(kst)) < 0)
    8020570e:	08000693          	li	a3,128
    80205712:	f5040613          	addi	a2,s0,-176
    80205716:	85ca                	mv	a1,s2
    80205718:	4505                	li	a0,1
    8020571a:	00004097          	auipc	ra,0x4
    8020571e:	dae080e7          	jalr	-594(ra) # 802094c8 <either_copyout>
    80205722:	41f5551b          	sraiw	a0,a0,0x1f
    // if(copyout2(addr, (char *)&kst, sizeof(kst)) < 0)
      return -1;
  return 0;
}
    80205726:	70aa                	ld	ra,168(sp)
    80205728:	740a                	ld	s0,160(sp)
    8020572a:	64ea                	ld	s1,152(sp)
    8020572c:	694a                	ld	s2,144(sp)
    8020572e:	69aa                	ld	s3,136(sp)
    80205730:	614d                	addi	sp,sp,176
    80205732:	8082                	ret
    elock(f->ep);
    80205734:	6d08                	ld	a0,24(a0)
    80205736:	ffffe097          	auipc	ra,0xffffe
    8020573a:	1c2080e7          	jalr	450(ra) # 802038f8 <elock>
    ekstat(f->ep, &kst);
    8020573e:	f5040593          	addi	a1,s0,-176
    80205742:	6c88                	ld	a0,24(s1)
    80205744:	fffff097          	auipc	ra,0xfffff
    80205748:	b02080e7          	jalr	-1278(ra) # 80204246 <ekstat>
    eunlock(f->ep);
    8020574c:	6c88                	ld	a0,24(s1)
    8020574e:	ffffe097          	auipc	ra,0xffffe
    80205752:	1e0080e7          	jalr	480(ra) # 8020392e <eunlock>
    kst.st_atime_sec = f->t0_nsec;
    80205756:	60b0                	ld	a2,64(s1)
    80205758:	f8c43c23          	sd	a2,-104(s0)
    kst.st_atime_nsec = f->t0_sec;
    8020575c:	7c98                	ld	a4,56(s1)
    8020575e:	fae43023          	sd	a4,-96(s0)
    kst.st_mtime_sec = f->t1_nsec;
    80205762:	68ac                	ld	a1,80(s1)
    80205764:	fab43423          	sd	a1,-88(s0)
    kst.st_mtime_nsec = f->t1_sec;
    80205768:	64b4                	ld	a3,72(s1)
    8020576a:	fad43823          	sd	a3,-80(s0)
    if(kst.st_mtime_sec == 0x000000003ffffffe)kst.st_mtime_sec = 0;
    8020576e:	400007b7          	lui	a5,0x40000
    80205772:	17f9                	addi	a5,a5,-2
    80205774:	02f58463          	beq	a1,a5,8020579c <filekstat+0x10e>
    if(kst.st_atime_sec == 0x000000003ffffffe)kst.st_atime_sec = 0;
    80205778:	400007b7          	lui	a5,0x40000
    8020577c:	17f9                	addi	a5,a5,-2
    8020577e:	02f60263          	beq	a2,a5,802057a2 <filekstat+0x114>
    if(kst.st_mtime_nsec == 0x0000000100000000)kst.st_mtime_sec = 0x0000000100000000;
    80205782:	4785                	li	a5,1
    80205784:	1782                	slli	a5,a5,0x20
    80205786:	02f68163          	beq	a3,a5,802057a8 <filekstat+0x11a>
    if(kst.st_atime_nsec == 0x0000000100000000)kst.st_atime_sec = 0x0000000100000000;
    8020578a:	4785                	li	a5,1
    8020578c:	1782                	slli	a5,a5,0x20
    8020578e:	f8f710e3          	bne	a4,a5,8020570e <filekstat+0x80>
    80205792:	4785                	li	a5,1
    80205794:	1782                	slli	a5,a5,0x20
    80205796:	f8f43c23          	sd	a5,-104(s0)
    8020579a:	bf95                	j	8020570e <filekstat+0x80>
    if(kst.st_mtime_sec == 0x000000003ffffffe)kst.st_mtime_sec = 0;
    8020579c:	fa043423          	sd	zero,-88(s0)
    802057a0:	bfe1                	j	80205778 <filekstat+0xea>
    if(kst.st_atime_sec == 0x000000003ffffffe)kst.st_atime_sec = 0;
    802057a2:	f8043c23          	sd	zero,-104(s0)
    802057a6:	bff1                	j	80205782 <filekstat+0xf4>
    if(kst.st_mtime_nsec == 0x0000000100000000)kst.st_mtime_sec = 0x0000000100000000;
    802057a8:	4785                	li	a5,1
    802057aa:	1782                	slli	a5,a5,0x20
    802057ac:	faf43423          	sd	a5,-88(s0)
    802057b0:	bfe9                	j	8020578a <filekstat+0xfc>
    return -1;
    802057b2:	557d                	li	a0,-1
    802057b4:	bf8d                	j	80205726 <filekstat+0x98>
          return -1;
    802057b6:	557d                	li	a0,-1
    802057b8:	b7bd                	j	80205726 <filekstat+0x98>
    802057ba:	557d                	li	a0,-1
    802057bc:	b7ad                	j	80205726 <filekstat+0x98>
    802057be:	557d                	li	a0,-1
    802057c0:	b79d                	j	80205726 <filekstat+0x98>

00000000802057c2 <fileread>:

// Read from file f.
// addr is a user virtual address.
int
fileread(struct file *f, uint64 addr, int n)
{
    802057c2:	7179                	addi	sp,sp,-48
    802057c4:	f406                	sd	ra,40(sp)
    802057c6:	f022                	sd	s0,32(sp)
    802057c8:	ec26                	sd	s1,24(sp)
    802057ca:	e84a                	sd	s2,16(sp)
    802057cc:	e44e                	sd	s3,8(sp)
    802057ce:	e052                	sd	s4,0(sp)
    802057d0:	1800                	addi	s0,sp,48
  int r = 0;
  if(f->readable == 0){
    802057d2:	00854783          	lbu	a5,8(a0)
    802057d6:	cbed                	beqz	a5,802058c8 <fileread+0x106>
    802057d8:	84aa                	mv	s1,a0
    802057da:	892e                	mv	s2,a1
    802057dc:	89b2                	mv	s3,a2
    return -1;
  }
  //printf("[file read]\n");
  //print_f_info(f);
  switch (f->type) {
    802057de:	411c                	lw	a5,0(a0)
    802057e0:	4709                	li	a4,2
    802057e2:	0ae78963          	beq	a5,a4,80205894 <fileread+0xd2>
    802057e6:	470d                	li	a4,3
    802057e8:	04e78663          	beq	a5,a4,80205834 <fileread+0x72>
    802057ec:	4705                	li	a4,1
    802057ee:	00e78a63          	beq	a5,a4,80205802 <fileread+0x40>
        if((r = eread(f->ep, 1, addr, f->off, n)) > 0)
          f->off += r;
        eunlock(f->ep);
        break;
    default:
      panic("fileread");
    802057f2:	0000c517          	auipc	a0,0xc
    802057f6:	d5650513          	addi	a0,a0,-682 # 80211548 <rodata_start+0x548>
    802057fa:	00001097          	auipc	ra,0x1
    802057fe:	6d4080e7          	jalr	1748(ra) # 80206ece <panic>
        r = piperead(f->pipe, 1, addr, n);
    80205802:	86b2                	mv	a3,a2
    80205804:	862e                	mv	a2,a1
    80205806:	4585                	li	a1,1
    80205808:	6908                	ld	a0,16(a0)
    8020580a:	fffff097          	auipc	ra,0xfffff
    8020580e:	53a080e7          	jalr	1338(ra) # 80204d44 <piperead>
        if(r<0)r = 0;
    80205812:	fff54913          	not	s2,a0
    80205816:	43f95913          	srai	s2,s2,0x3f
    8020581a:	01257533          	and	a0,a0,s2
    8020581e:	0005091b          	sext.w	s2,a0
  }
  //printf("[file read]r:%p\n",r);
  return r;
}
    80205822:	854a                	mv	a0,s2
    80205824:	70a2                	ld	ra,40(sp)
    80205826:	7402                	ld	s0,32(sp)
    80205828:	64e2                	ld	s1,24(sp)
    8020582a:	6942                	ld	s2,16(sp)
    8020582c:	69a2                	ld	s3,8(sp)
    8020582e:	6a02                	ld	s4,0(sp)
    80205830:	6145                	addi	sp,sp,48
    80205832:	8082                	ret
        if(f->major < 0 || f->major >= getdevnum() || !devsw[f->major].read)
    80205834:	02851a03          	lh	s4,40(a0)
    80205838:	080a4a63          	bltz	s4,802058cc <fileread+0x10a>
    8020583c:	00001097          	auipc	ra,0x1
    80205840:	914080e7          	jalr	-1772(ra) # 80206150 <getdevnum>
    80205844:	2a01                	sext.w	s4,s4
    80205846:	08aa5563          	bge	s4,a0,802058d0 <fileread+0x10e>
    8020584a:	02849703          	lh	a4,40(s1)
    8020584e:	00371793          	slli	a5,a4,0x3
    80205852:	8f99                	sub	a5,a5,a4
    80205854:	078e                	slli	a5,a5,0x3
    80205856:	00568697          	auipc	a3,0x568
    8020585a:	6da68693          	addi	a3,a3,1754 # 8076df30 <devsw>
    8020585e:	97b6                	add	a5,a5,a3
    80205860:	779c                	ld	a5,40(a5)
    80205862:	cbad                	beqz	a5,802058d4 <fileread+0x112>
        struct devsw* mydev = devsw + f->major;
    80205864:	00371493          	slli	s1,a4,0x3
    80205868:	8c99                	sub	s1,s1,a4
    8020586a:	048e                	slli	s1,s1,0x3
    8020586c:	94b6                	add	s1,s1,a3
        acquire(&mydev->lk);
    8020586e:	01048a13          	addi	s4,s1,16
    80205872:	8552                	mv	a0,s4
    80205874:	00001097          	auipc	ra,0x1
    80205878:	2fa080e7          	jalr	762(ra) # 80206b6e <acquire>
        r = mydev->read(1, addr, n);
    8020587c:	749c                	ld	a5,40(s1)
    8020587e:	864e                	mv	a2,s3
    80205880:	85ca                	mv	a1,s2
    80205882:	4505                	li	a0,1
    80205884:	9782                	jalr	a5
    80205886:	892a                	mv	s2,a0
        release(&mydev->lk);
    80205888:	8552                	mv	a0,s4
    8020588a:	00001097          	auipc	ra,0x1
    8020588e:	338080e7          	jalr	824(ra) # 80206bc2 <release>
        break;
    80205892:	bf41                	j	80205822 <fileread+0x60>
        elock(f->ep);
    80205894:	6d08                	ld	a0,24(a0)
    80205896:	ffffe097          	auipc	ra,0xffffe
    8020589a:	062080e7          	jalr	98(ra) # 802038f8 <elock>
        if((r = eread(f->ep, 1, addr, f->off, n)) > 0)
    8020589e:	874e                	mv	a4,s3
    802058a0:	5094                	lw	a3,32(s1)
    802058a2:	864a                	mv	a2,s2
    802058a4:	4585                	li	a1,1
    802058a6:	6c88                	ld	a0,24(s1)
    802058a8:	ffffd097          	auipc	ra,0xffffd
    802058ac:	670080e7          	jalr	1648(ra) # 80202f18 <eread>
    802058b0:	892a                	mv	s2,a0
    802058b2:	00a05563          	blez	a0,802058bc <fileread+0xfa>
          f->off += r;
    802058b6:	709c                	ld	a5,32(s1)
    802058b8:	97aa                	add	a5,a5,a0
    802058ba:	f09c                	sd	a5,32(s1)
        eunlock(f->ep);
    802058bc:	6c88                	ld	a0,24(s1)
    802058be:	ffffe097          	auipc	ra,0xffffe
    802058c2:	070080e7          	jalr	112(ra) # 8020392e <eunlock>
        break;
    802058c6:	bfb1                	j	80205822 <fileread+0x60>
    return -1;
    802058c8:	597d                	li	s2,-1
    802058ca:	bfa1                	j	80205822 <fileread+0x60>
          return -1;
    802058cc:	597d                	li	s2,-1
    802058ce:	bf91                	j	80205822 <fileread+0x60>
    802058d0:	597d                	li	s2,-1
    802058d2:	bf81                	j	80205822 <fileread+0x60>
    802058d4:	597d                	li	s2,-1
    802058d6:	b7b1                	j	80205822 <fileread+0x60>

00000000802058d8 <filewrite>:

// Write to file f.
// addr is a user virtual address.
int
filewrite(struct file *f, uint64 addr, int n)
{
    802058d8:	7179                	addi	sp,sp,-48
    802058da:	f406                	sd	ra,40(sp)
    802058dc:	f022                	sd	s0,32(sp)
    802058de:	ec26                	sd	s1,24(sp)
    802058e0:	e84a                	sd	s2,16(sp)
    802058e2:	e44e                	sd	s3,8(sp)
    802058e4:	e052                	sd	s4,0(sp)
    802058e6:	1800                	addi	s0,sp,48
  int ret = 0;
  //printf("major:%d off:%p\n",f->major,consolewrite-(char*)(devsw[f->major].write));
  if(f->writable == 0)
    802058e8:	00954783          	lbu	a5,9(a0)
    802058ec:	c7e5                	beqz	a5,802059d4 <filewrite+0xfc>
    802058ee:	84aa                	mv	s1,a0
    802058f0:	892e                	mv	s2,a1
    802058f2:	89b2                	mv	s3,a2
    return -1;
  if(f->type == FD_PIPE){
    802058f4:	411c                	lw	a5,0(a0)
    802058f6:	4705                	li	a4,1
    802058f8:	04e78763          	beq	a5,a4,80205946 <filewrite+0x6e>
    ret = pipewrite(f->pipe, 1, addr, n);
  } else if(f->type == FD_DEVICE){
    802058fc:	470d                	li	a4,3
    802058fe:	04e78e63          	beq	a5,a4,8020595a <filewrite+0x82>
    struct devsw* mydev = devsw + f->major;
    struct spinlock* dlk = &(mydev->lk);
    acquire(dlk);
    ret = mydev->write(1, addr, n);
    release(dlk);
  } else if(f->type == FD_ENTRY){
    80205902:	4709                	li	a4,2
    80205904:	0ce79063          	bne	a5,a4,802059c4 <filewrite+0xec>
    elock(f->ep);
    80205908:	6d08                	ld	a0,24(a0)
    8020590a:	ffffe097          	auipc	ra,0xffffe
    8020590e:	fee080e7          	jalr	-18(ra) # 802038f8 <elock>
    if (ewrite(f->ep, 1, addr, f->off, n) == n) {
    80205912:	874e                	mv	a4,s3
    80205914:	5094                	lw	a3,32(s1)
    80205916:	864a                	mv	a2,s2
    80205918:	4585                	li	a1,1
    8020591a:	6c88                	ld	a0,24(s1)
    8020591c:	ffffd097          	auipc	ra,0xffffd
    80205920:	712080e7          	jalr	1810(ra) # 8020302e <ewrite>
      ret = n;
      f->off += n;
    } else {
      ret = -1;
    80205924:	597d                	li	s2,-1
    if (ewrite(f->ep, 1, addr, f->off, n) == n) {
    80205926:	09350a63          	beq	a0,s3,802059ba <filewrite+0xe2>
    }
    eunlock(f->ep);
    8020592a:	6c88                	ld	a0,24(s1)
    8020592c:	ffffe097          	auipc	ra,0xffffe
    80205930:	002080e7          	jalr	2(ra) # 8020392e <eunlock>
  } else {
    panic("filewrite");
  }

  return ret;
}
    80205934:	854a                	mv	a0,s2
    80205936:	70a2                	ld	ra,40(sp)
    80205938:	7402                	ld	s0,32(sp)
    8020593a:	64e2                	ld	s1,24(sp)
    8020593c:	6942                	ld	s2,16(sp)
    8020593e:	69a2                	ld	s3,8(sp)
    80205940:	6a02                	ld	s4,0(sp)
    80205942:	6145                	addi	sp,sp,48
    80205944:	8082                	ret
    ret = pipewrite(f->pipe, 1, addr, n);
    80205946:	86b2                	mv	a3,a2
    80205948:	862e                	mv	a2,a1
    8020594a:	4585                	li	a1,1
    8020594c:	6908                	ld	a0,16(a0)
    8020594e:	fffff097          	auipc	ra,0xfffff
    80205952:	234080e7          	jalr	564(ra) # 80204b82 <pipewrite>
    80205956:	892a                	mv	s2,a0
    80205958:	bff1                	j	80205934 <filewrite+0x5c>
    if(f->major < 0 || f->major >= getdevnum() || !devsw[f->major].write)
    8020595a:	02851a03          	lh	s4,40(a0)
    8020595e:	060a4d63          	bltz	s4,802059d8 <filewrite+0x100>
    80205962:	00000097          	auipc	ra,0x0
    80205966:	7ee080e7          	jalr	2030(ra) # 80206150 <getdevnum>
    8020596a:	2a01                	sext.w	s4,s4
    8020596c:	06aa5863          	bge	s4,a0,802059dc <filewrite+0x104>
    80205970:	02849703          	lh	a4,40(s1)
    80205974:	00371793          	slli	a5,a4,0x3
    80205978:	8f99                	sub	a5,a5,a4
    8020597a:	078e                	slli	a5,a5,0x3
    8020597c:	00568697          	auipc	a3,0x568
    80205980:	5b468693          	addi	a3,a3,1460 # 8076df30 <devsw>
    80205984:	97b6                	add	a5,a5,a3
    80205986:	7b9c                	ld	a5,48(a5)
    80205988:	cfa1                	beqz	a5,802059e0 <filewrite+0x108>
    struct devsw* mydev = devsw + f->major;
    8020598a:	00371493          	slli	s1,a4,0x3
    8020598e:	8c99                	sub	s1,s1,a4
    80205990:	048e                	slli	s1,s1,0x3
    80205992:	94b6                	add	s1,s1,a3
    struct spinlock* dlk = &(mydev->lk);
    80205994:	01048a13          	addi	s4,s1,16
    acquire(dlk);
    80205998:	8552                	mv	a0,s4
    8020599a:	00001097          	auipc	ra,0x1
    8020599e:	1d4080e7          	jalr	468(ra) # 80206b6e <acquire>
    ret = mydev->write(1, addr, n);
    802059a2:	789c                	ld	a5,48(s1)
    802059a4:	864e                	mv	a2,s3
    802059a6:	85ca                	mv	a1,s2
    802059a8:	4505                	li	a0,1
    802059aa:	9782                	jalr	a5
    802059ac:	892a                	mv	s2,a0
    release(dlk);
    802059ae:	8552                	mv	a0,s4
    802059b0:	00001097          	auipc	ra,0x1
    802059b4:	212080e7          	jalr	530(ra) # 80206bc2 <release>
    802059b8:	bfb5                	j	80205934 <filewrite+0x5c>
      f->off += n;
    802059ba:	709c                	ld	a5,32(s1)
    802059bc:	97ce                	add	a5,a5,s3
    802059be:	f09c                	sd	a5,32(s1)
      ret = n;
    802059c0:	894e                	mv	s2,s3
    802059c2:	b7a5                	j	8020592a <filewrite+0x52>
    panic("filewrite");
    802059c4:	0000c517          	auipc	a0,0xc
    802059c8:	b9450513          	addi	a0,a0,-1132 # 80211558 <rodata_start+0x558>
    802059cc:	00001097          	auipc	ra,0x1
    802059d0:	502080e7          	jalr	1282(ra) # 80206ece <panic>
    return -1;
    802059d4:	597d                	li	s2,-1
    802059d6:	bfb9                	j	80205934 <filewrite+0x5c>
      return -1;
    802059d8:	597d                	li	s2,-1
    802059da:	bfa9                	j	80205934 <filewrite+0x5c>
    802059dc:	597d                	li	s2,-1
    802059de:	bf99                	j	80205934 <filewrite+0x5c>
    802059e0:	597d                	li	s2,-1
    802059e2:	bf89                	j	80205934 <filewrite+0x5c>

00000000802059e4 <filesend>:

uint64
filesend(struct file* fin,struct file* fout,uint64 addr,uint64 n){
    802059e4:	bb010113          	addi	sp,sp,-1104
    802059e8:	44113423          	sd	ra,1096(sp)
    802059ec:	44813023          	sd	s0,1088(sp)
    802059f0:	42913c23          	sd	s1,1080(sp)
    802059f4:	43213823          	sd	s2,1072(sp)
    802059f8:	43313423          	sd	s3,1064(sp)
    802059fc:	43413023          	sd	s4,1056(sp)
    80205a00:	41513c23          	sd	s5,1048(sp)
    80205a04:	41613823          	sd	s6,1040(sp)
    80205a08:	45010413          	addi	s0,sp,1104
    80205a0c:	89aa                	mv	s3,a0
    80205a0e:	892e                	mv	s2,a1
    80205a10:	8b32                	mv	s6,a2
    80205a12:	84b6                	mv	s1,a3
  uint64 off = 0;
    80205a14:	fa043c23          	sd	zero,-72(s0)
  uint64 rlen = 0;
  uint64 wlen = 0;
  uint64 ret = 0;
  if(addr){
    80205a18:	ee1d                	bnez	a2,80205a56 <filesend+0x72>
    if(either_copyin(1,&off,addr,sizeof(uint64))<0){
      __debug_warn("[filesend]obtain addr bad\n");
      return -1;
    }
  }else{
    off = fin->off;
    80205a1a:	711c                	ld	a5,32(a0)
    80205a1c:	faf43c23          	sd	a5,-72(s0)
  }
  if(fileillegal(fin)||fileillegal(fout)){
    80205a20:	854e                	mv	a0,s3
    80205a22:	00000097          	auipc	ra,0x0
    80205a26:	984080e7          	jalr	-1660(ra) # 802053a6 <fileillegal>
    80205a2a:	e931                	bnez	a0,80205a7e <filesend+0x9a>
    80205a2c:	854a                	mv	a0,s2
    80205a2e:	00000097          	auipc	ra,0x0
    80205a32:	978080e7          	jalr	-1672(ra) # 802053a6 <fileillegal>
    80205a36:	e521                	bnez	a0,80205a7e <filesend+0x9a>
  }
  //printf("[filesend]want send n:%p\n",n);
  //printf("[filesend]before send fout off:%p\n",fout->off);
  //print_f_info(fin);
  //print_f_info(fout);
  fileiolock(fin);
    80205a38:	854e                	mv	a0,s3
    80205a3a:	00000097          	auipc	ra,0x0
    80205a3e:	a76080e7          	jalr	-1418(ra) # 802054b0 <fileiolock>
  fileiolock(fout);
    80205a42:	854a                	mv	a0,s2
    80205a44:	00000097          	auipc	ra,0x0
    80205a48:	a6c080e7          	jalr	-1428(ra) # 802054b0 <fileiolock>
  while(n){
    80205a4c:	c0e1                	beqz	s1,80205b0c <filesend+0x128>
  uint64 ret = 0;
    80205a4e:	4a01                	li	s4,0
    char buf[1024];
    rlen = MIN(n,sizeof(buf));
    80205a50:	40000a93          	li	s5,1024
    80205a54:	a07d                	j	80205b02 <filesend+0x11e>
    if(either_copyin(1,&off,addr,sizeof(uint64))<0){
    80205a56:	46a1                	li	a3,8
    80205a58:	fb840593          	addi	a1,s0,-72
    80205a5c:	4505                	li	a0,1
    80205a5e:	00004097          	auipc	ra,0x4
    80205a62:	ac0080e7          	jalr	-1344(ra) # 8020951e <either_copyin>
    80205a66:	fa055de3          	bgez	a0,80205a20 <filesend+0x3c>
      __debug_warn("[filesend]obtain addr bad\n");
    80205a6a:	0000c517          	auipc	a0,0xc
    80205a6e:	afe50513          	addi	a0,a0,-1282 # 80211568 <rodata_start+0x568>
    80205a72:	00002097          	auipc	ra,0x2
    80205a76:	832080e7          	jalr	-1998(ra) # 802072a4 <__debug_warn>
      return -1;
    80205a7a:	5a7d                	li	s4,-1
    80205a7c:	a811                	j	80205a90 <filesend+0xac>
      __debug_warn("[filesend]fin/fout illegal\n");
    80205a7e:	0000c517          	auipc	a0,0xc
    80205a82:	b0a50513          	addi	a0,a0,-1270 # 80211588 <rodata_start+0x588>
    80205a86:	00002097          	auipc	ra,0x2
    80205a8a:	81e080e7          	jalr	-2018(ra) # 802072a4 <__debug_warn>
      return -1;
    80205a8e:	5a7d                	li	s4,-1
  }else{
    fin->off = off;
  }
  //printf("[filesend]ret:%p\n",ret);
  return ret;
}
    80205a90:	8552                	mv	a0,s4
    80205a92:	44813083          	ld	ra,1096(sp)
    80205a96:	44013403          	ld	s0,1088(sp)
    80205a9a:	43813483          	ld	s1,1080(sp)
    80205a9e:	43013903          	ld	s2,1072(sp)
    80205aa2:	42813983          	ld	s3,1064(sp)
    80205aa6:	42013a03          	ld	s4,1056(sp)
    80205aaa:	41813a83          	ld	s5,1048(sp)
    80205aae:	41013b03          	ld	s6,1040(sp)
    80205ab2:	45010113          	addi	sp,sp,1104
    80205ab6:	8082                	ret
    rlen = fileinput(fin,0,(uint64)&buf,rlen,off);
    80205ab8:	fb843703          	ld	a4,-72(s0)
    80205abc:	2681                	sext.w	a3,a3
    80205abe:	bb840613          	addi	a2,s0,-1096
    80205ac2:	4581                	li	a1,0
    80205ac4:	854e                	mv	a0,s3
    80205ac6:	00000097          	auipc	ra,0x0
    80205aca:	a7a080e7          	jalr	-1414(ra) # 80205540 <fileinput>
    off += rlen;
    80205ace:	fb843783          	ld	a5,-72(s0)
    80205ad2:	97aa                	add	a5,a5,a0
    80205ad4:	faf43c23          	sd	a5,-72(s0)
    n -= rlen;
    80205ad8:	8c89                	sub	s1,s1,a0
    if(!rlen){
    80205ada:	c915                	beqz	a0,80205b0e <filesend+0x12a>
    wlen = fileoutput(fout,0,(uint64)&buf,rlen,fout->off);
    80205adc:	02093703          	ld	a4,32(s2)
    80205ae0:	0005069b          	sext.w	a3,a0
    80205ae4:	bb840613          	addi	a2,s0,-1096
    80205ae8:	4581                	li	a1,0
    80205aea:	854a                	mv	a0,s2
    80205aec:	00000097          	auipc	ra,0x0
    80205af0:	aca080e7          	jalr	-1334(ra) # 802055b6 <fileoutput>
    fout->off += wlen;
    80205af4:	02093783          	ld	a5,32(s2)
    80205af8:	97aa                	add	a5,a5,a0
    80205afa:	02f93023          	sd	a5,32(s2)
    ret += wlen;
    80205afe:	9a2a                	add	s4,s4,a0
  while(n){
    80205b00:	c499                	beqz	s1,80205b0e <filesend+0x12a>
    rlen = MIN(n,sizeof(buf));
    80205b02:	86a6                	mv	a3,s1
    80205b04:	fa9afae3          	bgeu	s5,s1,80205ab8 <filesend+0xd4>
    80205b08:	86d6                	mv	a3,s5
    80205b0a:	b77d                	j	80205ab8 <filesend+0xd4>
  uint64 ret = 0;
    80205b0c:	8a26                	mv	s4,s1
  fileiounlock(fout);
    80205b0e:	854a                	mv	a0,s2
    80205b10:	00000097          	auipc	ra,0x0
    80205b14:	9e8080e7          	jalr	-1560(ra) # 802054f8 <fileiounlock>
  fileiounlock(fin);
    80205b18:	854e                	mv	a0,s3
    80205b1a:	00000097          	auipc	ra,0x0
    80205b1e:	9de080e7          	jalr	-1570(ra) # 802054f8 <fileiounlock>
  if(addr){
    80205b22:	000b1763          	bnez	s6,80205b30 <filesend+0x14c>
    fin->off = off;
    80205b26:	fb843783          	ld	a5,-72(s0)
    80205b2a:	02f9b023          	sd	a5,32(s3)
    80205b2e:	b78d                	j	80205a90 <filesend+0xac>
    if(either_copyout(1,addr,&off,sizeof(uint64))<0){
    80205b30:	46a1                	li	a3,8
    80205b32:	fb840613          	addi	a2,s0,-72
    80205b36:	85da                	mv	a1,s6
    80205b38:	4505                	li	a0,1
    80205b3a:	00004097          	auipc	ra,0x4
    80205b3e:	98e080e7          	jalr	-1650(ra) # 802094c8 <either_copyout>
    80205b42:	f40557e3          	bgez	a0,80205a90 <filesend+0xac>
      __debug_warn("[filesend]obtain addr bad\n");
    80205b46:	0000c517          	auipc	a0,0xc
    80205b4a:	a2250513          	addi	a0,a0,-1502 # 80211568 <rodata_start+0x568>
    80205b4e:	00001097          	auipc	ra,0x1
    80205b52:	756080e7          	jalr	1878(ra) # 802072a4 <__debug_warn>
      return -1;
    80205b56:	5a7d                	li	s4,-1
    80205b58:	bf25                	j	80205a90 <filesend+0xac>

0000000080205b5a <dirnext>:
int
dirnext(struct file *f, uint64 addr)
{
  // struct proc *p = myproc();

  if(f->readable == 0 || !(f->ep->attribute & ATTR_DIRECTORY))
    80205b5a:	00854783          	lbu	a5,8(a0)
    80205b5e:	cbd5                	beqz	a5,80205c12 <dirnext+0xb8>
{
    80205b60:	7105                	addi	sp,sp,-480
    80205b62:	ef86                	sd	ra,472(sp)
    80205b64:	eba2                	sd	s0,464(sp)
    80205b66:	e7a6                	sd	s1,456(sp)
    80205b68:	e3ca                	sd	s2,448(sp)
    80205b6a:	ff4e                	sd	s3,440(sp)
    80205b6c:	1380                	addi	s0,sp,480
    80205b6e:	84aa                	mv	s1,a0
    80205b70:	89ae                	mv	s3,a1
  if(f->readable == 0 || !(f->ep->attribute & ATTR_DIRECTORY))
    80205b72:	6d18                	ld	a4,24(a0)
    80205b74:	10074783          	lbu	a5,256(a4)
    80205b78:	8bc1                	andi	a5,a5,16
    return -1;
    80205b7a:	557d                	li	a0,-1
  if(f->readable == 0 || !(f->ep->attribute & ATTR_DIRECTORY))
    80205b7c:	eb81                	bnez	a5,80205b8c <dirnext+0x32>
  // if(copyout(p->pagetable, addr, (char *)&st, sizeof(st)) < 0)
  if(either_copyout(1, addr, (char *)&st, sizeof(st)) < 0)
    return -1;

  return 1;
}
    80205b7e:	60fe                	ld	ra,472(sp)
    80205b80:	645e                	ld	s0,464(sp)
    80205b82:	64be                	ld	s1,456(sp)
    80205b84:	691e                	ld	s2,448(sp)
    80205b86:	79fa                	ld	s3,440(sp)
    80205b88:	613d                	addi	sp,sp,480
    80205b8a:	8082                	ret
  int count = 0;
    80205b8c:	e2042223          	sw	zero,-476(s0)
  elock(f->ep);
    80205b90:	853a                	mv	a0,a4
    80205b92:	ffffe097          	auipc	ra,0xffffe
    80205b96:	d66080e7          	jalr	-666(ra) # 802038f8 <elock>
  while ((ret = enext(f->ep, &de, f->off, &count)) == 0) {  // skip empty entry
    80205b9a:	a801                	j	80205baa <dirnext+0x50>
    f->off += count * 32;
    80205b9c:	e2442783          	lw	a5,-476(s0)
    80205ba0:	0057971b          	slliw	a4,a5,0x5
    80205ba4:	709c                	ld	a5,32(s1)
    80205ba6:	97ba                	add	a5,a5,a4
    80205ba8:	f09c                	sd	a5,32(s1)
  while ((ret = enext(f->ep, &de, f->off, &count)) == 0) {  // skip empty entry
    80205baa:	e2440693          	addi	a3,s0,-476
    80205bae:	5090                	lw	a2,32(s1)
    80205bb0:	e6040593          	addi	a1,s0,-416
    80205bb4:	6c88                	ld	a0,24(s1)
    80205bb6:	ffffe097          	auipc	ra,0xffffe
    80205bba:	f5a080e7          	jalr	-166(ra) # 80203b10 <enext>
    80205bbe:	892a                	mv	s2,a0
    80205bc0:	dd71                	beqz	a0,80205b9c <dirnext+0x42>
  eunlock(f->ep);
    80205bc2:	6c88                	ld	a0,24(s1)
    80205bc4:	ffffe097          	auipc	ra,0xffffe
    80205bc8:	d6a080e7          	jalr	-662(ra) # 8020392e <eunlock>
  if (ret == -1)
    80205bcc:	57fd                	li	a5,-1
    return 0;
    80205bce:	4501                	li	a0,0
  if (ret == -1)
    80205bd0:	faf907e3          	beq	s2,a5,80205b7e <dirnext+0x24>
  f->off += count * 32;
    80205bd4:	e2442783          	lw	a5,-476(s0)
    80205bd8:	0057971b          	slliw	a4,a5,0x5
    80205bdc:	709c                	ld	a5,32(s1)
    80205bde:	97ba                	add	a5,a5,a4
    80205be0:	f09c                	sd	a5,32(s1)
  estat(&de, &st);
    80205be2:	e2840593          	addi	a1,s0,-472
    80205be6:	e6040513          	addi	a0,s0,-416
    80205bea:	ffffe097          	auipc	ra,0xffffe
    80205bee:	ede080e7          	jalr	-290(ra) # 80203ac8 <estat>
  if(either_copyout(1, addr, (char *)&st, sizeof(st)) < 0)
    80205bf2:	03800693          	li	a3,56
    80205bf6:	e2840613          	addi	a2,s0,-472
    80205bfa:	85ce                	mv	a1,s3
    80205bfc:	4505                	li	a0,1
    80205bfe:	00004097          	auipc	ra,0x4
    80205c02:	8ca080e7          	jalr	-1846(ra) # 802094c8 <either_copyout>
    80205c06:	87aa                	mv	a5,a0
  return 1;
    80205c08:	4505                	li	a0,1
  if(either_copyout(1, addr, (char *)&st, sizeof(st)) < 0)
    80205c0a:	f607dae3          	bgez	a5,80205b7e <dirnext+0x24>
    return -1;
    80205c0e:	557d                	li	a0,-1
    80205c10:	b7bd                	j	80205b7e <dirnext+0x24>
    return -1;
    80205c12:	557d                	li	a0,-1
}
    80205c14:	8082                	ret

0000000080205c16 <findfile>:

struct file*
findfile(char* path)
{
    80205c16:	7139                	addi	sp,sp,-64
    80205c18:	fc06                	sd	ra,56(sp)
    80205c1a:	f822                	sd	s0,48(sp)
    80205c1c:	f426                	sd	s1,40(sp)
    80205c1e:	f04a                	sd	s2,32(sp)
    80205c20:	ec4e                	sd	s3,24(sp)
    80205c22:	0080                	addi	s0,sp,64
    80205c24:	85aa                	mv	a1,a0
  int dev;
  struct dirent* ep = ename(NULL,path,&dev);
    80205c26:	fcc40613          	addi	a2,s0,-52
    80205c2a:	4501                	li	a0,0
    80205c2c:	ffffe097          	auipc	ra,0xffffe
    80205c30:	70e080e7          	jalr	1806(ra) # 8020433a <ename>
    80205c34:	892a                	mv	s2,a0
  struct proc* p = myproc();
    80205c36:	00004097          	auipc	ra,0x4
    80205c3a:	ef4080e7          	jalr	-268(ra) # 80209b2a <myproc>
  if(ep == NULL)return NULL;
    80205c3e:	0a090963          	beqz	s2,80205cf0 <findfile+0xda>
    80205c42:	89aa                	mv	s3,a0
  elock(ep);
    80205c44:	854a                	mv	a0,s2
    80205c46:	ffffe097          	auipc	ra,0xffffe
    80205c4a:	cb2080e7          	jalr	-846(ra) # 802038f8 <elock>
  for(int i = 0;i<NOFILEMAX(p);i++){
    80205c4e:	0e09b783          	ld	a5,224(s3)
    80205c52:	85be                	mv	a1,a5
    80205c54:	06500713          	li	a4,101
    80205c58:	00f75463          	bge	a4,a5,80205c60 <findfile+0x4a>
    80205c5c:	06500593          	li	a1,101
    80205c60:	06f05d63          	blez	a5,80205cda <findfile+0xc4>
    if(p->ofile[i]->type==FD_ENTRY&&p->ofile[i]->ep==ep){
      eunlock(ep);
      eput(ep);
      return p->ofile[i];
    }
    if(p->ofile[i]->type==FD_DEVICE&&p->ofile[i]->major==dev){
    80205c64:	fcc42503          	lw	a0,-52(s0)
    80205c68:	0e89b703          	ld	a4,232(s3)
    80205c6c:	4781                	li	a5,0
    if(p->ofile[i]->type==FD_ENTRY&&p->ofile[i]->ep==ep){
    80205c6e:	4809                	li	a6,2
    if(p->ofile[i]->type==FD_DEVICE&&p->ofile[i]->major==dev){
    80205c70:	488d                	li	a7,3
    80205c72:	a801                	j	80205c82 <findfile+0x6c>
    if(p->ofile[i]->type==FD_ENTRY&&p->ofile[i]->ep==ep){
    80205c74:	6e94                	ld	a3,24(a3)
    80205c76:	05268263          	beq	a3,s2,80205cba <findfile+0xa4>
  for(int i = 0;i<NOFILEMAX(p);i++){
    80205c7a:	0785                	addi	a5,a5,1
    80205c7c:	0721                	addi	a4,a4,8
    80205c7e:	04b7de63          	bge	a5,a1,80205cda <findfile+0xc4>
    if(p->ofile[i]->type==FD_ENTRY&&p->ofile[i]->ep==ep){
    80205c82:	00379493          	slli	s1,a5,0x3
    80205c86:	6314                	ld	a3,0(a4)
    80205c88:	4290                	lw	a2,0(a3)
    80205c8a:	ff0605e3          	beq	a2,a6,80205c74 <findfile+0x5e>
    if(p->ofile[i]->type==FD_DEVICE&&p->ofile[i]->major==dev){
    80205c8e:	ff1616e3          	bne	a2,a7,80205c7a <findfile+0x64>
    80205c92:	02869683          	lh	a3,40(a3)
    80205c96:	fea692e3          	bne	a3,a0,80205c7a <findfile+0x64>
      eunlock(ep);
    80205c9a:	854a                	mv	a0,s2
    80205c9c:	ffffe097          	auipc	ra,0xffffe
    80205ca0:	c92080e7          	jalr	-878(ra) # 8020392e <eunlock>
      eput(ep);
    80205ca4:	854a                	mv	a0,s2
    80205ca6:	ffffe097          	auipc	ra,0xffffe
    80205caa:	cd6080e7          	jalr	-810(ra) # 8020397c <eput>
      return p->ofile[i];
    80205cae:	0e89b783          	ld	a5,232(s3)
    80205cb2:	94be                	add	s1,s1,a5
    80205cb4:	0004b903          	ld	s2,0(s1)
    80205cb8:	a825                	j	80205cf0 <findfile+0xda>
      eunlock(ep);
    80205cba:	854a                	mv	a0,s2
    80205cbc:	ffffe097          	auipc	ra,0xffffe
    80205cc0:	c72080e7          	jalr	-910(ra) # 8020392e <eunlock>
      eput(ep);
    80205cc4:	854a                	mv	a0,s2
    80205cc6:	ffffe097          	auipc	ra,0xffffe
    80205cca:	cb6080e7          	jalr	-842(ra) # 8020397c <eput>
      return p->ofile[i];
    80205cce:	0e89b783          	ld	a5,232(s3)
    80205cd2:	94be                	add	s1,s1,a5
    80205cd4:	0004b903          	ld	s2,0(s1)
    80205cd8:	a821                	j	80205cf0 <findfile+0xda>
    }
  }
  eunlock(ep);
    80205cda:	854a                	mv	a0,s2
    80205cdc:	ffffe097          	auipc	ra,0xffffe
    80205ce0:	c52080e7          	jalr	-942(ra) # 8020392e <eunlock>
  eput(ep);
    80205ce4:	854a                	mv	a0,s2
    80205ce6:	ffffe097          	auipc	ra,0xffffe
    80205cea:	c96080e7          	jalr	-874(ra) # 8020397c <eput>
  return NULL;
    80205cee:	4901                	li	s2,0
}
    80205cf0:	854a                	mv	a0,s2
    80205cf2:	70e2                	ld	ra,56(sp)
    80205cf4:	7442                	ld	s0,48(sp)
    80205cf6:	74a2                	ld	s1,40(sp)
    80205cf8:	7902                	ld	s2,32(sp)
    80205cfa:	69e2                	ld	s3,24(sp)
    80205cfc:	6121                	addi	sp,sp,64
    80205cfe:	8082                	ret

0000000080205d00 <dirent_next>:


int
dirent_next(struct file *f, uint64 addr, int n)
{
    80205d00:	d1010113          	addi	sp,sp,-752
    80205d04:	2e113423          	sd	ra,744(sp)
    80205d08:	2e813023          	sd	s0,736(sp)
    80205d0c:	2c913c23          	sd	s1,728(sp)
    80205d10:	2d213823          	sd	s2,720(sp)
    80205d14:	2d313423          	sd	s3,712(sp)
    80205d18:	2d413023          	sd	s4,704(sp)
    80205d1c:	2b513c23          	sd	s5,696(sp)
    80205d20:	2b613823          	sd	s6,688(sp)
    80205d24:	2b713423          	sd	s7,680(sp)
    80205d28:	2b813023          	sd	s8,672(sp)
    80205d2c:	29913c23          	sd	s9,664(sp)
    80205d30:	1d80                	addi	s0,sp,752
  if(f->readable == 0 || !(f->ep->attribute & ATTR_DIRECTORY))
    80205d32:	00854783          	lbu	a5,8(a0)
    80205d36:	14078463          	beqz	a5,80205e7e <dirent_next+0x17e>
    80205d3a:	892a                	mv	s2,a0
    80205d3c:	8a2e                	mv	s4,a1
    80205d3e:	89b2                	mv	s3,a2
    80205d40:	6d08                	ld	a0,24(a0)
    80205d42:	10054783          	lbu	a5,256(a0)
    80205d46:	8bc1                	andi	a5,a5,16
    80205d48:	12078d63          	beqz	a5,80205e82 <dirent_next+0x182>
    return -1;
  //printf("[dirent next]addr:%p n:%p\n",addr,n);
  struct dirent de;
  struct linux_dirent64 lde;
  int count = 0;
    80205d4c:	d0042a23          	sw	zero,-748(s0)
  int ret;
  int copysize = 0;
  elock(f->ep);
    80205d50:	ffffe097          	auipc	ra,0xffffe
    80205d54:	ba8080e7          	jalr	-1112(ra) # 802038f8 <elock>
  int copysize = 0;
    80205d58:	4a81                	li	s5,0
    // empty entry
    if(ret == 0) {
      continue;
    }
    // end of file, return 0
    if(ret == -1) {
    80205d5a:	5bfd                	li	s7,-1
    memcpy(lde.d_name, de.filename, sizeof(de.filename));
    lde.d_type = (de.attribute & ATTR_DIRECTORY) ? T_DIR : T_FILE;
    lde.d_ino = 0;
    // Size of this dent, varies from length of filename.
    int size = sizeof(struct linux_dirent64) - sizeof(lde.d_name) + strlen(lde.d_name) + 1;
    size += (sizeof(uint64) - (size % sizeof(uint64))) % sizeof(uint64); // Align to 8.
    80205d5c:	5c1d                	li	s8,-25
    lde.d_reclen = size;
    int realsize = lde.d_reclen;
    80205d5e:	6b41                	lui	s6,0x10
    80205d60:	1b7d                	addi	s6,s6,-1
    lde.d_off = f->off;
    80205d62:	02093603          	ld	a2,32(s2)
    80205d66:	d2c43023          	sd	a2,-736(s0)
    ret = enext(f->ep, &de, f->off, &count);
    80205d6a:	d1440693          	addi	a3,s0,-748
    80205d6e:	2601                	sext.w	a2,a2
    80205d70:	e3040593          	addi	a1,s0,-464
    80205d74:	01893503          	ld	a0,24(s2)
    80205d78:	ffffe097          	auipc	ra,0xffffe
    80205d7c:	d98080e7          	jalr	-616(ra) # 80203b10 <enext>
    f->off += count * 32;
    80205d80:	d1442783          	lw	a5,-748(s0)
    80205d84:	0057971b          	slliw	a4,a5,0x5
    80205d88:	02093783          	ld	a5,32(s2)
    80205d8c:	97ba                	add	a5,a5,a4
    80205d8e:	02f93023          	sd	a5,32(s2)
    if(ret == 0) {
    80205d92:	d961                	beqz	a0,80205d62 <dirent_next+0x62>
    if(ret == -1) {
    80205d94:	07750d63          	beq	a0,s7,80205e0e <dirent_next+0x10e>
    memcpy(lde.d_name, de.filename, sizeof(de.filename));
    80205d98:	10000613          	li	a2,256
    80205d9c:	e3040593          	addi	a1,s0,-464
    80205da0:	d2b40513          	addi	a0,s0,-725
    80205da4:	ffffb097          	auipc	ra,0xffffb
    80205da8:	094080e7          	jalr	148(ra) # 80200e38 <memcpy>
    lde.d_type = (de.attribute & ATTR_DIRECTORY) ? T_DIR : T_FILE;
    80205dac:	f3044783          	lbu	a5,-208(s0)
    80205db0:	8bc1                	andi	a5,a5,16
    80205db2:	0017b793          	seqz	a5,a5
    80205db6:	0785                	addi	a5,a5,1
    80205db8:	d2f40523          	sb	a5,-726(s0)
    lde.d_ino = 0;
    80205dbc:	d0043c23          	sd	zero,-744(s0)
    int size = sizeof(struct linux_dirent64) - sizeof(lde.d_name) + strlen(lde.d_name) + 1;
    80205dc0:	d2b40513          	addi	a0,s0,-725
    80205dc4:	ffffb097          	auipc	ra,0xffffb
    80205dc8:	138080e7          	jalr	312(ra) # 80200efc <strlen>
    size += (sizeof(uint64) - (size % sizeof(uint64))) % sizeof(uint64); // Align to 8.
    80205dcc:	40ac04bb          	subw	s1,s8,a0
    80205dd0:	889d                	andi	s1,s1,7
    int size = sizeof(struct linux_dirent64) - sizeof(lde.d_name) + strlen(lde.d_name) + 1;
    80205dd2:	2565                	addiw	a0,a0,25
    size += (sizeof(uint64) - (size % sizeof(uint64))) % sizeof(uint64); // Align to 8.
    80205dd4:	9ca9                	addw	s1,s1,a0
    lde.d_reclen = size;
    80205dd6:	03049c93          	slli	s9,s1,0x30
    80205dda:	030cdc93          	srli	s9,s9,0x30
    80205dde:	d3941423          	sh	s9,-728(s0)
    int realsize = lde.d_reclen;
    80205de2:	009b74b3          	and	s1,s6,s1
    80205de6:	2481                	sext.w	s1,s1
    // buf size limits
    if(lde.d_reclen > n) {
    80205de8:	0699cb63          	blt	s3,s1,80205e5e <dirent_next+0x15e>
      break;
    }

    // copy error, return -1
    if(either_copyout(1,addr, (char *)&lde, realsize) < 0){
    80205dec:	86e6                	mv	a3,s9
    80205dee:	d1840613          	addi	a2,s0,-744
    80205df2:	85d2                	mv	a1,s4
    80205df4:	4505                	li	a0,1
    80205df6:	00003097          	auipc	ra,0x3
    80205dfa:	6d2080e7          	jalr	1746(ra) # 802094c8 <either_copyout>
    80205dfe:	04054863          	bltz	a0,80205e4e <dirent_next+0x14e>
      eunlock(f->ep);
      return -1;
    }
    
    addr += realsize;
    80205e02:	9a66                	add	s4,s4,s9
    n -= realsize;
    80205e04:	409989bb          	subw	s3,s3,s1
    copysize += realsize;
    80205e08:	009a8abb          	addw	s5,s5,s1
    80205e0c:	bf99                	j	80205d62 <dirent_next+0x62>
      eunlock(f->ep);
    80205e0e:	01893503          	ld	a0,24(s2)
    80205e12:	ffffe097          	auipc	ra,0xffffe
    80205e16:	b1c080e7          	jalr	-1252(ra) # 8020392e <eunlock>
  }
  eunlock(f->ep);

  f->off += count * 32;
  return copysize; 
}
    80205e1a:	8556                	mv	a0,s5
    80205e1c:	2e813083          	ld	ra,744(sp)
    80205e20:	2e013403          	ld	s0,736(sp)
    80205e24:	2d813483          	ld	s1,728(sp)
    80205e28:	2d013903          	ld	s2,720(sp)
    80205e2c:	2c813983          	ld	s3,712(sp)
    80205e30:	2c013a03          	ld	s4,704(sp)
    80205e34:	2b813a83          	ld	s5,696(sp)
    80205e38:	2b013b03          	ld	s6,688(sp)
    80205e3c:	2a813b83          	ld	s7,680(sp)
    80205e40:	2a013c03          	ld	s8,672(sp)
    80205e44:	29813c83          	ld	s9,664(sp)
    80205e48:	2f010113          	addi	sp,sp,752
    80205e4c:	8082                	ret
      eunlock(f->ep);
    80205e4e:	01893503          	ld	a0,24(s2)
    80205e52:	ffffe097          	auipc	ra,0xffffe
    80205e56:	adc080e7          	jalr	-1316(ra) # 8020392e <eunlock>
      return -1;
    80205e5a:	5afd                	li	s5,-1
    80205e5c:	bf7d                	j	80205e1a <dirent_next+0x11a>
  eunlock(f->ep);
    80205e5e:	01893503          	ld	a0,24(s2)
    80205e62:	ffffe097          	auipc	ra,0xffffe
    80205e66:	acc080e7          	jalr	-1332(ra) # 8020392e <eunlock>
  f->off += count * 32;
    80205e6a:	d1442783          	lw	a5,-748(s0)
    80205e6e:	0057971b          	slliw	a4,a5,0x5
    80205e72:	02093783          	ld	a5,32(s2)
    80205e76:	97ba                	add	a5,a5,a4
    80205e78:	02f93023          	sd	a5,32(s2)
  return copysize; 
    80205e7c:	bf79                	j	80205e1a <dirent_next+0x11a>
    return -1;
    80205e7e:	5afd                	li	s5,-1
    80205e80:	bf69                	j	80205e1a <dirent_next+0x11a>
    80205e82:	5afd                	li	s5,-1
    80205e84:	bf59                	j	80205e1a <dirent_next+0x11a>

0000000080205e86 <filelseek>:

uint64 
filelseek(struct file *f, uint64 offset, int whence)
{
    80205e86:	7179                	addi	sp,sp,-48
    80205e88:	f406                	sd	ra,40(sp)
    80205e8a:	f022                	sd	s0,32(sp)
    80205e8c:	ec26                	sd	s1,24(sp)
    80205e8e:	e84a                	sd	s2,16(sp)
    80205e90:	e44e                	sd	s3,8(sp)
    80205e92:	e052                	sd	s4,0(sp)
    80205e94:	1800                	addi	s0,sp,48
    80205e96:	84aa                	mv	s1,a0
    80205e98:	8a2e                	mv	s4,a1
    80205e9a:	8932                	mv	s2,a2
  uint64 ret = -1;
  switch (f->type)
    80205e9c:	411c                	lw	a5,0(a0)
    80205e9e:	4705                	li	a4,1
    80205ea0:	06e78263          	beq	a5,a4,80205f04 <filelseek+0x7e>
    80205ea4:	4709                	li	a4,2
    80205ea6:	59fd                	li	s3,-1
    80205ea8:	02e79463          	bne	a5,a4,80205ed0 <filelseek+0x4a>
  {
  case FD_ENTRY: 
    elock(f->ep);
    80205eac:	6d08                	ld	a0,24(a0)
    80205eae:	ffffe097          	auipc	ra,0xffffe
    80205eb2:	a4a080e7          	jalr	-1462(ra) # 802038f8 <elock>
    switch (whence)
    80205eb6:	4785                	li	a5,1
    80205eb8:	02f90963          	beq	s2,a5,80205eea <filelseek+0x64>
    80205ebc:	4789                	li	a5,2
    80205ebe:	02f90c63          	beq	s2,a5,80205ef6 <filelseek+0x70>
    80205ec2:	02090063          	beqz	s2,80205ee2 <filelseek+0x5c>
      ret = f->off = f->ep->file_size + offset;
      break;
    default:
      break;
    }
    eunlock(f->ep);
    80205ec6:	6c88                	ld	a0,24(s1)
    80205ec8:	ffffe097          	auipc	ra,0xffffe
    80205ecc:	a66080e7          	jalr	-1434(ra) # 8020392e <eunlock>
  default:
    break;
  }

  return ret;
}
    80205ed0:	854e                	mv	a0,s3
    80205ed2:	70a2                	ld	ra,40(sp)
    80205ed4:	7402                	ld	s0,32(sp)
    80205ed6:	64e2                	ld	s1,24(sp)
    80205ed8:	6942                	ld	s2,16(sp)
    80205eda:	69a2                	ld	s3,8(sp)
    80205edc:	6a02                	ld	s4,0(sp)
    80205ede:	6145                	addi	sp,sp,48
    80205ee0:	8082                	ret
      ret = f->off = offset;
    80205ee2:	0344b023          	sd	s4,32(s1)
    80205ee6:	89d2                	mv	s3,s4
      break;
    80205ee8:	bff9                	j	80205ec6 <filelseek+0x40>
      ret = (f->off += offset);
    80205eea:	0204b983          	ld	s3,32(s1)
    80205eee:	99d2                	add	s3,s3,s4
    80205ef0:	0334b023          	sd	s3,32(s1)
      break;
    80205ef4:	bfc9                	j	80205ec6 <filelseek+0x40>
      ret = f->off = f->ep->file_size + offset;
    80205ef6:	6c9c                	ld	a5,24(s1)
    80205ef8:	1087e983          	lwu	s3,264(a5) # 40000108 <_entry-0x401ffef8>
    80205efc:	99d2                	add	s3,s3,s4
    80205efe:	0334b023          	sd	s3,32(s1)
      break;
    80205f02:	b7d1                	j	80205ec6 <filelseek+0x40>
    acquire(&f->pipe->lock);
    80205f04:	6908                	ld	a0,16(a0)
    80205f06:	00001097          	auipc	ra,0x1
    80205f0a:	c68080e7          	jalr	-920(ra) # 80206b6e <acquire>
    switch (whence)
    80205f0e:	00090c63          	beqz	s2,80205f26 <filelseek+0xa0>
    80205f12:	4785                	li	a5,1
    80205f14:	59fd                	li	s3,-1
    80205f16:	00f91b63          	bne	s2,a5,80205f2c <filelseek+0xa6>
        ret = (f->off += offset);
    80205f1a:	0204b983          	ld	s3,32(s1)
    80205f1e:	99d2                	add	s3,s3,s4
    80205f20:	0334b023          	sd	s3,32(s1)
        break;
    80205f24:	a021                	j	80205f2c <filelseek+0xa6>
        ret = f->off = offset;
    80205f26:	0344b023          	sd	s4,32(s1)
    80205f2a:	89d2                	mv	s3,s4
    release(&f->pipe->lock);
    80205f2c:	6888                	ld	a0,16(s1)
    80205f2e:	00001097          	auipc	ra,0x1
    80205f32:	c94080e7          	jalr	-876(ra) # 80206bc2 <release>
    break;
    80205f36:	bf69                	j	80205ed0 <filelseek+0x4a>
	...

0000000080205f42 <rtcread>:
  return -1;
}

int
rtcread(int user_dst, uint64 addr, int n)
{
    80205f42:	1141                	addi	sp,sp,-16
    80205f44:	e422                	sd	s0,8(sp)
    80205f46:	0800                	addi	s0,sp,16
  return 0;
}
    80205f48:	4501                	li	a0,0
    80205f4a:	6422                	ld	s0,8(sp)
    80205f4c:	0141                	addi	sp,sp,16
    80205f4e:	8082                	ret

0000000080205f50 <rtcwrite>:

int
rtcwrite(int user_dst, uint64 addr, int n)
{
    80205f50:	1141                	addi	sp,sp,-16
    80205f52:	e422                	sd	s0,8(sp)
    80205f54:	0800                	addi	s0,sp,16
  return 0;
}
    80205f56:	4501                	li	a0,0
    80205f58:	6422                	ld	s0,8(sp)
    80205f5a:	0141                	addi	sp,sp,16
    80205f5c:	8082                	ret

0000000080205f5e <nullread>:

int
nullread(int user_dst,uint64 addr,int n){
    80205f5e:	1141                	addi	sp,sp,-16
    80205f60:	e422                	sd	s0,8(sp)
    80205f62:	0800                	addi	s0,sp,16
  return 0;
}
    80205f64:	4501                	li	a0,0
    80205f66:	6422                	ld	s0,8(sp)
    80205f68:	0141                	addi	sp,sp,16
    80205f6a:	8082                	ret

0000000080205f6c <nullwrite>:

int
nullwrite(int user_dst,uint64 addr,int n){
    80205f6c:	1141                	addi	sp,sp,-16
    80205f6e:	e422                	sd	s0,8(sp)
    80205f70:	0800                	addi	s0,sp,16
  return n;
}
    80205f72:	8532                	mv	a0,a2
    80205f74:	6422                	ld	s0,8(sp)
    80205f76:	0141                	addi	sp,sp,16
    80205f78:	8082                	ret

0000000080205f7a <zerowrite>:
    return n;
  }
}

int
zerowrite(int user_dst,uint64 addr,int n){
    80205f7a:	1141                	addi	sp,sp,-16
    80205f7c:	e422                	sd	s0,8(sp)
    80205f7e:	0800                	addi	s0,sp,16
  return n;
}
    80205f80:	8532                	mv	a0,a2
    80205f82:	6422                	ld	s0,8(sp)
    80205f84:	0141                	addi	sp,sp,16
    80205f86:	8082                	ret

0000000080205f88 <zeroread>:
zeroread(int user_dst,uint64 addr,int n){
    80205f88:	1101                	addi	sp,sp,-32
    80205f8a:	ec06                	sd	ra,24(sp)
    80205f8c:	e822                	sd	s0,16(sp)
    80205f8e:	e426                	sd	s1,8(sp)
    80205f90:	1000                	addi	s0,sp,32
    80205f92:	87aa                	mv	a5,a0
    80205f94:	852e                	mv	a0,a1
    80205f96:	84b2                	mv	s1,a2
  if(user_dst)return zero_out(addr,n);
    80205f98:	cb99                	beqz	a5,80205fae <zeroread+0x26>
    80205f9a:	85b2                	mv	a1,a2
    80205f9c:	00003097          	auipc	ra,0x3
    80205fa0:	4a0080e7          	jalr	1184(ra) # 8020943c <zero_out>
}
    80205fa4:	60e2                	ld	ra,24(sp)
    80205fa6:	6442                	ld	s0,16(sp)
    80205fa8:	64a2                	ld	s1,8(sp)
    80205faa:	6105                	addi	sp,sp,32
    80205fac:	8082                	ret
    memset((void*)addr,0,n);
    80205fae:	4581                	li	a1,0
    80205fb0:	ffffb097          	auipc	ra,0xffffb
    80205fb4:	dc4080e7          	jalr	-572(ra) # 80200d74 <memset>
    return n;
    80205fb8:	8526                	mv	a0,s1
    80205fba:	b7ed                	j	80205fa4 <zeroread+0x1c>

0000000080205fbc <consoleread>:

int
consoleread(int user_dst,uint64 addr,int n){
    80205fbc:	7109                	addi	sp,sp,-384
    80205fbe:	fe86                	sd	ra,376(sp)
    80205fc0:	faa2                	sd	s0,368(sp)
    80205fc2:	f6a6                	sd	s1,360(sp)
    80205fc4:	f2ca                	sd	s2,352(sp)
    80205fc6:	eece                	sd	s3,344(sp)
    80205fc8:	ead2                	sd	s4,336(sp)
    80205fca:	e6d6                	sd	s5,328(sp)
    80205fcc:	e2da                	sd	s6,320(sp)
    80205fce:	fe5e                	sd	s7,312(sp)
    80205fd0:	fa62                	sd	s8,304(sp)
    80205fd2:	f666                	sd	s9,296(sp)
    80205fd4:	f26a                	sd	s10,288(sp)
    80205fd6:	ee6e                	sd	s11,280(sp)
    80205fd8:	0300                	addi	s0,sp,384
    80205fda:	e8a43423          	sd	a0,-376(s0)
    80205fde:	8cb2                	mv	s9,a2
  char readbuf[CONSOLE_BUF_LEN];
  int ret = 0;
  int interp = 0;
  while(n&&!interp){
    80205fe0:	c65d                	beqz	a2,8020608e <consoleread+0xd2>
    80205fe2:	8d2e                	mv	s10,a1
  int ret = 0;
    80205fe4:	4d81                	li	s11,0
    int len = MIN(n,CONSOLE_BUF_LEN);
    int i;
    for(i=0;i<len;i++){
    80205fe6:	4901                	li	s2,0
      char c = 0;
      while((c=sbi_console_getchar())==255);
    80205fe8:	0ff00993          	li	s3,255
      c = c==13?10:c;
    80205fec:	4c35                	li	s8,13
      readbuf[i] = c;
      consputc(c);
      if(c == 10){
    80205fee:	4ba9                	li	s7,10
    80205ff0:	a895                	j	80206064 <consoleread+0xa8>
      readbuf[i] = c;
    80205ff2:	009a8023          	sb	s1,0(s5)
      consputc(c);
    80205ff6:	8526                	mv	a0,s1
    80205ff8:	00001097          	auipc	ra,0x1
    80205ffc:	d14080e7          	jalr	-748(ra) # 80206d0c <consputc>
      if(c == 10){
    80206000:	09748563          	beq	s1,s7,8020608a <consoleread+0xce>
    for(i=0;i<len;i++){
    80206004:	2a05                	addiw	s4,s4,1
    80206006:	0a85                	addi	s5,s5,1
    80206008:	076a5c63          	bge	s4,s6,80206080 <consoleread+0xc4>
	SBI_EXT_HSM_HART_STOP,
	SBI_EXT_HSM_HART_STATUS,
};

static int inline sbi_call(uint64 which, uint64 arg0, uint64 arg1, uint64 arg2) {
    register uint64 a0 asm("a0") = arg0;
    8020600c:	854a                	mv	a0,s2
    register uint64 a1 asm("a1") = arg1;
    8020600e:	85ca                	mv	a1,s2
    register uint64 a2 asm("a2") = arg2;
    80206010:	864a                	mv	a2,s2
    register uint64 a7 asm("a7") = which;
    80206012:	4889                	li	a7,2
    asm volatile("ecall"
    80206014:	00000073          	ecall
      while((c=sbi_console_getchar())==255);
    80206018:	0ff57493          	andi	s1,a0,255
    8020601c:	ff3488e3          	beq	s1,s3,8020600c <consoleread+0x50>
      c = c==13?10:c;
    80206020:	fd8499e3          	bne	s1,s8,80205ff2 <consoleread+0x36>
      readbuf[i] = c;
    80206024:	4729                	li	a4,10
    80206026:	f9040793          	addi	a5,s0,-112
    8020602a:	97d2                	add	a5,a5,s4
    8020602c:	f0e78023          	sb	a4,-256(a5)
      consputc(c);
    80206030:	855e                	mv	a0,s7
    80206032:	00001097          	auipc	ra,0x1
    80206036:	cda080e7          	jalr	-806(ra) # 80206d0c <consputc>
        interp = 1;
    8020603a:	4485                	li	s1,1
        break;
      }
    }
    if(either_copyout(user_dst,addr,readbuf,i)<0){
    8020603c:	86d2                	mv	a3,s4
    8020603e:	e9040613          	addi	a2,s0,-368
    80206042:	85ea                	mv	a1,s10
    80206044:	e8843503          	ld	a0,-376(s0)
    80206048:	00003097          	auipc	ra,0x3
    8020604c:	480080e7          	jalr	1152(ra) # 802094c8 <either_copyout>
    80206050:	04054063          	bltz	a0,80206090 <consoleread+0xd4>
      return ret;
    }
    n -= i;
    80206054:	414c8cbb          	subw	s9,s9,s4
    ret += i;
    80206058:	014d8dbb          	addw	s11,s11,s4
    addr += i;
    8020605c:	9d52                	add	s10,s10,s4
  while(n&&!interp){
    8020605e:	020c8963          	beqz	s9,80206090 <consoleread+0xd4>
    80206062:	e49d                	bnez	s1,80206090 <consoleread+0xd4>
    int len = MIN(n,CONSOLE_BUF_LEN);
    80206064:	8b66                	mv	s6,s9
    80206066:	10000793          	li	a5,256
    8020606a:	0197d463          	bge	a5,s9,80206072 <consoleread+0xb6>
    8020606e:	10000b13          	li	s6,256
    80206072:	2b01                	sext.w	s6,s6
    for(i=0;i<len;i++){
    80206074:	01905863          	blez	s9,80206084 <consoleread+0xc8>
    80206078:	e9040a93          	addi	s5,s0,-368
    8020607c:	8a4a                	mv	s4,s2
    8020607e:	b779                	j	8020600c <consoleread+0x50>
    80206080:	84ca                	mv	s1,s2
    80206082:	bf6d                	j	8020603c <consoleread+0x80>
    80206084:	8a4a                	mv	s4,s2
    80206086:	84ca                	mv	s1,s2
    80206088:	bf55                	j	8020603c <consoleread+0x80>
        interp = 1;
    8020608a:	4485                	li	s1,1
    8020608c:	bf45                	j	8020603c <consoleread+0x80>
  int ret = 0;
    8020608e:	8db2                	mv	s11,a2
  }
  return ret;
}
    80206090:	856e                	mv	a0,s11
    80206092:	70f6                	ld	ra,376(sp)
    80206094:	7456                	ld	s0,368(sp)
    80206096:	74b6                	ld	s1,360(sp)
    80206098:	7916                	ld	s2,352(sp)
    8020609a:	69f6                	ld	s3,344(sp)
    8020609c:	6a56                	ld	s4,336(sp)
    8020609e:	6ab6                	ld	s5,328(sp)
    802060a0:	6b16                	ld	s6,320(sp)
    802060a2:	7bf2                	ld	s7,312(sp)
    802060a4:	7c52                	ld	s8,304(sp)
    802060a6:	7cb2                	ld	s9,296(sp)
    802060a8:	7d12                	ld	s10,288(sp)
    802060aa:	6df2                	ld	s11,280(sp)
    802060ac:	6119                	addi	sp,sp,384
    802060ae:	8082                	ret

00000000802060b0 <consolewrite>:

int
consolewrite(int user_dst,uint64 addr,int n){
    802060b0:	710d                	addi	sp,sp,-352
    802060b2:	ee86                	sd	ra,344(sp)
    802060b4:	eaa2                	sd	s0,336(sp)
    802060b6:	e6a6                	sd	s1,328(sp)
    802060b8:	e2ca                	sd	s2,320(sp)
    802060ba:	fe4e                	sd	s3,312(sp)
    802060bc:	fa52                	sd	s4,304(sp)
    802060be:	f656                	sd	s5,296(sp)
    802060c0:	f25a                	sd	s6,288(sp)
    802060c2:	ee5e                	sd	s7,280(sp)
    802060c4:	ea62                	sd	s8,272(sp)
    802060c6:	e666                	sd	s9,264(sp)
    802060c8:	e26a                	sd	s10,256(sp)
    802060ca:	1280                	addi	s0,sp,352
    802060cc:	8a32                	mv	s4,a2
  char writebuf[CONSOLE_BUF_LEN];
  int ret = 0;
  while(n){
    802060ce:	c22d                	beqz	a2,80206130 <consolewrite+0x80>
    802060d0:	8baa                	mv	s7,a0
    802060d2:	8aae                	mv	s5,a1
  int ret = 0;
    802060d4:	4b01                	li	s6,0
    int len = MIN(n,CONSOLE_BUF_LEN);
    802060d6:	10000c13          	li	s8,256
    802060da:	10000d13          	li	s10,256
    if(either_copyin(user_dst,writebuf,addr,len)<0){
      return ret;
    }
    for(int i=0;i<len;i++){
    802060de:	4c81                	li	s9,0
    802060e0:	a099                	j	80206126 <consolewrite+0x76>
    int len = MIN(n,CONSOLE_BUF_LEN);
    802060e2:	2981                	sext.w	s3,s3
    if(either_copyin(user_dst,writebuf,addr,len)<0){
    802060e4:	86ce                	mv	a3,s3
    802060e6:	8656                	mv	a2,s5
    802060e8:	ea040593          	addi	a1,s0,-352
    802060ec:	855e                	mv	a0,s7
    802060ee:	00003097          	auipc	ra,0x3
    802060f2:	430080e7          	jalr	1072(ra) # 8020951e <either_copyin>
    802060f6:	02054e63          	bltz	a0,80206132 <consolewrite+0x82>
    for(int i=0;i<len;i++){
    802060fa:	01405f63          	blez	s4,80206118 <consolewrite+0x68>
    802060fe:	ea040913          	addi	s2,s0,-352
    80206102:	84e6                	mv	s1,s9
      consputc(writebuf[i]);
    80206104:	00094503          	lbu	a0,0(s2)
    80206108:	00001097          	auipc	ra,0x1
    8020610c:	c04080e7          	jalr	-1020(ra) # 80206d0c <consputc>
    for(int i=0;i<len;i++){
    80206110:	2485                	addiw	s1,s1,1
    80206112:	0905                	addi	s2,s2,1
    80206114:	ff34c8e3          	blt	s1,s3,80206104 <consolewrite+0x54>
    }
    n -= len;
    80206118:	413a0a3b          	subw	s4,s4,s3
    ret += len;
    8020611c:	01698b3b          	addw	s6,s3,s6
    addr += len;
    80206120:	9ace                	add	s5,s5,s3
  while(n){
    80206122:	000a0863          	beqz	s4,80206132 <consolewrite+0x82>
    int len = MIN(n,CONSOLE_BUF_LEN);
    80206126:	89d2                	mv	s3,s4
    80206128:	fb4c5de3          	bge	s8,s4,802060e2 <consolewrite+0x32>
    8020612c:	89ea                	mv	s3,s10
    8020612e:	bf55                	j	802060e2 <consolewrite+0x32>
  int ret = 0;
    80206130:	8b32                	mv	s6,a2
  }
  return ret;
}
    80206132:	855a                	mv	a0,s6
    80206134:	60f6                	ld	ra,344(sp)
    80206136:	6456                	ld	s0,336(sp)
    80206138:	64b6                	ld	s1,328(sp)
    8020613a:	6916                	ld	s2,320(sp)
    8020613c:	79f2                	ld	s3,312(sp)
    8020613e:	7a52                	ld	s4,304(sp)
    80206140:	7ab2                	ld	s5,296(sp)
    80206142:	7b12                	ld	s6,288(sp)
    80206144:	6bf2                	ld	s7,280(sp)
    80206146:	6c52                	ld	s8,272(sp)
    80206148:	6cb2                	ld	s9,264(sp)
    8020614a:	6d12                	ld	s10,256(sp)
    8020614c:	6135                	addi	sp,sp,352
    8020614e:	8082                	ret

0000000080206150 <getdevnum>:
int getdevnum(){
    80206150:	1141                	addi	sp,sp,-16
    80206152:	e422                	sd	s0,8(sp)
    80206154:	0800                	addi	s0,sp,16
}
    80206156:	00568517          	auipc	a0,0x568
    8020615a:	00a52503          	lw	a0,10(a0) # 8076e160 <devnum>
    8020615e:	6422                	ld	s0,8(sp)
    80206160:	0141                	addi	sp,sp,16
    80206162:	8082                	ret

0000000080206164 <allocdev>:
allocdev(char* name,int (*devread)(int, uint64, int),int (*devwrite)(int, uint64, int)){
    80206164:	7139                	addi	sp,sp,-64
    80206166:	fc06                	sd	ra,56(sp)
    80206168:	f822                	sd	s0,48(sp)
    8020616a:	f426                	sd	s1,40(sp)
    8020616c:	f04a                	sd	s2,32(sp)
    8020616e:	ec4e                	sd	s3,24(sp)
    80206170:	e852                	sd	s4,16(sp)
    80206172:	e456                	sd	s5,8(sp)
    80206174:	0080                	addi	s0,sp,64
    80206176:	8aaa                	mv	s5,a0
  if(devnum == NDEV){
    80206178:	00568517          	auipc	a0,0x568
    8020617c:	fe852503          	lw	a0,-24(a0) # 8076e160 <devnum>
    80206180:	47a9                	li	a5,10
    80206182:	06f50e63          	beq	a0,a5,802061fe <allocdev+0x9a>
    80206186:	8a2e                	mv	s4,a1
    80206188:	8932                	mv	s2,a2
  strncpy(devsw[devnum].name,name,DEV_NAME_MAX+1);
    8020618a:	00568497          	auipc	s1,0x568
    8020618e:	da648493          	addi	s1,s1,-602 # 8076df30 <devsw>
    80206192:	00351793          	slli	a5,a0,0x3
    80206196:	8f89                	sub	a5,a5,a0
    80206198:	078e                	slli	a5,a5,0x3
    8020619a:	4635                	li	a2,13
    8020619c:	85d6                	mv	a1,s5
    8020619e:	00f48533          	add	a0,s1,a5
    802061a2:	ffffb097          	auipc	ra,0xffffb
    802061a6:	cea080e7          	jalr	-790(ra) # 80200e8c <strncpy>
  initlock(&devsw[devnum].lk,name);
    802061aa:	00568997          	auipc	s3,0x568
    802061ae:	fb698993          	addi	s3,s3,-74 # 8076e160 <devnum>
    802061b2:	0009a503          	lw	a0,0(s3)
    802061b6:	00351793          	slli	a5,a0,0x3
    802061ba:	8f89                	sub	a5,a5,a0
    802061bc:	078e                	slli	a5,a5,0x3
    802061be:	07c1                	addi	a5,a5,16
    802061c0:	85d6                	mv	a1,s5
    802061c2:	00f48533          	add	a0,s1,a5
    802061c6:	00001097          	auipc	ra,0x1
    802061ca:	964080e7          	jalr	-1692(ra) # 80206b2a <initlock>
  devsw[devnum].read = devread;
    802061ce:	0009a783          	lw	a5,0(s3)
    802061d2:	00379713          	slli	a4,a5,0x3
    802061d6:	8f1d                	sub	a4,a4,a5
    802061d8:	070e                	slli	a4,a4,0x3
    802061da:	94ba                	add	s1,s1,a4
    802061dc:	0344b423          	sd	s4,40(s1)
  devsw[devnum].write = devwrite;
    802061e0:	0324b823          	sd	s2,48(s1)
  devnum++;
    802061e4:	2785                	addiw	a5,a5,1
    802061e6:	00f9a023          	sw	a5,0(s3)
  return 0;
    802061ea:	4501                	li	a0,0
}
    802061ec:	70e2                	ld	ra,56(sp)
    802061ee:	7442                	ld	s0,48(sp)
    802061f0:	74a2                	ld	s1,40(sp)
    802061f2:	7902                	ld	s2,32(sp)
    802061f4:	69e2                	ld	s3,24(sp)
    802061f6:	6a42                	ld	s4,16(sp)
    802061f8:	6aa2                	ld	s5,8(sp)
    802061fa:	6121                	addi	sp,sp,64
    802061fc:	8082                	ret
    __debug_warn("[dev]no more space for device\n");
    802061fe:	0000b517          	auipc	a0,0xb
    80206202:	3aa50513          	addi	a0,a0,938 # 802115a8 <rodata_start+0x5a8>
    80206206:	00001097          	auipc	ra,0x1
    8020620a:	09e080e7          	jalr	158(ra) # 802072a4 <__debug_warn>
    return -1;
    8020620e:	557d                	li	a0,-1
    80206210:	bff1                	j	802061ec <allocdev+0x88>

0000000080206212 <devinit>:
{
    80206212:	7179                	addi	sp,sp,-48
    80206214:	f406                	sd	ra,40(sp)
    80206216:	f022                	sd	s0,32(sp)
    80206218:	ec26                	sd	s1,24(sp)
    8020621a:	1800                	addi	s0,sp,48
  int err = 0;
    8020621c:	fc042e23          	sw	zero,-36(s0)
  devnum = 0;
    80206220:	00568797          	auipc	a5,0x568
    80206224:	f407a023          	sw	zero,-192(a5) # 8076e160 <devnum>
  dev = create(NULL,"/dev",T_DIR,0, &err);
    80206228:	fdc40713          	addi	a4,s0,-36
    8020622c:	4681                	li	a3,0
    8020622e:	4605                	li	a2,1
    80206230:	0000b597          	auipc	a1,0xb
    80206234:	39858593          	addi	a1,a1,920 # 802115c8 <rodata_start+0x5c8>
    80206238:	4501                	li	a0,0
    8020623a:	ffffe097          	auipc	ra,0xffffe
    8020623e:	202080e7          	jalr	514(ra) # 8020443c <create>
    80206242:	00568797          	auipc	a5,0x568
    80206246:	f2a7b323          	sd	a0,-218(a5) # 8076e168 <dev>
  eunlock(dev);
    8020624a:	ffffd097          	auipc	ra,0xffffd
    8020624e:	6e4080e7          	jalr	1764(ra) # 8020392e <eunlock>
  ep = create(NULL,"/etc/passwd", T_FILE, 0, &err);
    80206252:	fdc40713          	addi	a4,s0,-36
    80206256:	4681                	li	a3,0
    80206258:	4609                	li	a2,2
    8020625a:	0000b597          	auipc	a1,0xb
    8020625e:	37658593          	addi	a1,a1,886 # 802115d0 <rodata_start+0x5d0>
    80206262:	4501                	li	a0,0
    80206264:	ffffe097          	auipc	ra,0xffffe
    80206268:	1d8080e7          	jalr	472(ra) # 8020443c <create>
    8020626c:	84aa                	mv	s1,a0
  eunlock(ep);
    8020626e:	ffffd097          	auipc	ra,0xffffd
    80206272:	6c0080e7          	jalr	1728(ra) # 8020392e <eunlock>
  eput(ep);
    80206276:	8526                	mv	a0,s1
    80206278:	ffffd097          	auipc	ra,0xffffd
    8020627c:	704080e7          	jalr	1796(ra) # 8020397c <eput>
  ep = create(NULL,"/etc/localtime", T_FILE, 0, &err);
    80206280:	fdc40713          	addi	a4,s0,-36
    80206284:	4681                	li	a3,0
    80206286:	4609                	li	a2,2
    80206288:	0000b597          	auipc	a1,0xb
    8020628c:	35858593          	addi	a1,a1,856 # 802115e0 <rodata_start+0x5e0>
    80206290:	4501                	li	a0,0
    80206292:	ffffe097          	auipc	ra,0xffffe
    80206296:	1aa080e7          	jalr	426(ra) # 8020443c <create>
    8020629a:	84aa                	mv	s1,a0
  ewrite(ep, 0, (uint64)localtime, 0, localtime_size);
    8020629c:	00510717          	auipc	a4,0x510
    802062a0:	9ae72703          	lw	a4,-1618(a4) # 80715c4a <localtime_size>
    802062a4:	4681                	li	a3,0
    802062a6:	0050f617          	auipc	a2,0x50f
    802062aa:	e9060613          	addi	a2,a2,-368 # 80715136 <localtime>
    802062ae:	4581                	li	a1,0
    802062b0:	ffffd097          	auipc	ra,0xffffd
    802062b4:	d7e080e7          	jalr	-642(ra) # 8020302e <ewrite>
  eunlock(ep);
    802062b8:	8526                	mv	a0,s1
    802062ba:	ffffd097          	auipc	ra,0xffffd
    802062be:	674080e7          	jalr	1652(ra) # 8020392e <eunlock>
  eput(ep);
    802062c2:	8526                	mv	a0,s1
    802062c4:	ffffd097          	auipc	ra,0xffffd
    802062c8:	6b8080e7          	jalr	1720(ra) # 8020397c <eput>
  ep = create(NULL,"/etc/adjtime", T_FILE, 0, &err);
    802062cc:	fdc40713          	addi	a4,s0,-36
    802062d0:	4681                	li	a3,0
    802062d2:	4609                	li	a2,2
    802062d4:	0000b597          	auipc	a1,0xb
    802062d8:	31c58593          	addi	a1,a1,796 # 802115f0 <rodata_start+0x5f0>
    802062dc:	4501                	li	a0,0
    802062de:	ffffe097          	auipc	ra,0xffffe
    802062e2:	15e080e7          	jalr	350(ra) # 8020443c <create>
    802062e6:	84aa                	mv	s1,a0
  eunlock(ep);
    802062e8:	ffffd097          	auipc	ra,0xffffd
    802062ec:	646080e7          	jalr	1606(ra) # 8020392e <eunlock>
  eput(ep);
    802062f0:	8526                	mv	a0,s1
    802062f2:	ffffd097          	auipc	ra,0xffffd
    802062f6:	68a080e7          	jalr	1674(ra) # 8020397c <eput>
  ep = create(NULL,"/etc/group", T_FILE, 0, &err);
    802062fa:	fdc40713          	addi	a4,s0,-36
    802062fe:	4681                	li	a3,0
    80206300:	4609                	li	a2,2
    80206302:	0000b597          	auipc	a1,0xb
    80206306:	2fe58593          	addi	a1,a1,766 # 80211600 <rodata_start+0x600>
    8020630a:	4501                	li	a0,0
    8020630c:	ffffe097          	auipc	ra,0xffffe
    80206310:	130080e7          	jalr	304(ra) # 8020443c <create>
    80206314:	84aa                	mv	s1,a0
  eunlock(ep);
    80206316:	ffffd097          	auipc	ra,0xffffd
    8020631a:	618080e7          	jalr	1560(ra) # 8020392e <eunlock>
  eput(ep);
    8020631e:	8526                	mv	a0,s1
    80206320:	ffffd097          	auipc	ra,0xffffd
    80206324:	65c080e7          	jalr	1628(ra) # 8020397c <eput>
  ep = create(NULL, "/proc/mounts", T_FILE, 0, &err);
    80206328:	fdc40713          	addi	a4,s0,-36
    8020632c:	4681                	li	a3,0
    8020632e:	4609                	li	a2,2
    80206330:	0000b597          	auipc	a1,0xb
    80206334:	2e058593          	addi	a1,a1,736 # 80211610 <rodata_start+0x610>
    80206338:	4501                	li	a0,0
    8020633a:	ffffe097          	auipc	ra,0xffffe
    8020633e:	102080e7          	jalr	258(ra) # 8020443c <create>
    80206342:	84aa                	mv	s1,a0
  ewrite(ep, 0, (uint64)mounts, 0, mounts_size);
    80206344:	00510717          	auipc	a4,0x510
    80206348:	93a72703          	lw	a4,-1734(a4) # 80715c7e <mounts_size>
    8020634c:	4681                	li	a3,0
    8020634e:	00510617          	auipc	a2,0x510
    80206352:	90060613          	addi	a2,a2,-1792 # 80715c4e <mounts>
    80206356:	4581                	li	a1,0
    80206358:	ffffd097          	auipc	ra,0xffffd
    8020635c:	cd6080e7          	jalr	-810(ra) # 8020302e <ewrite>
  eunlock(ep);
    80206360:	8526                	mv	a0,s1
    80206362:	ffffd097          	auipc	ra,0xffffd
    80206366:	5cc080e7          	jalr	1484(ra) # 8020392e <eunlock>
  eput(ep);
    8020636a:	8526                	mv	a0,s1
    8020636c:	ffffd097          	auipc	ra,0xffffd
    80206370:	610080e7          	jalr	1552(ra) # 8020397c <eput>
  ep = create(NULL, "/proc/meminfo", T_FILE, 0, &err);
    80206374:	fdc40713          	addi	a4,s0,-36
    80206378:	4681                	li	a3,0
    8020637a:	4609                	li	a2,2
    8020637c:	0000b597          	auipc	a1,0xb
    80206380:	2a458593          	addi	a1,a1,676 # 80211620 <rodata_start+0x620>
    80206384:	4501                	li	a0,0
    80206386:	ffffe097          	auipc	ra,0xffffe
    8020638a:	0b6080e7          	jalr	182(ra) # 8020443c <create>
    8020638e:	84aa                	mv	s1,a0
  ewrite(ep, 0, (uint64)meminfo, 0, meminfo_size);
    80206390:	00510717          	auipc	a4,0x510
    80206394:	e7b72703          	lw	a4,-389(a4) # 8071620b <meminfo_size>
    80206398:	4681                	li	a3,0
    8020639a:	00510617          	auipc	a2,0x510
    8020639e:	8e860613          	addi	a2,a2,-1816 # 80715c82 <meminfo>
    802063a2:	4581                	li	a1,0
    802063a4:	ffffd097          	auipc	ra,0xffffd
    802063a8:	c8a080e7          	jalr	-886(ra) # 8020302e <ewrite>
  eunlock(ep);
    802063ac:	8526                	mv	a0,s1
    802063ae:	ffffd097          	auipc	ra,0xffffd
    802063b2:	580080e7          	jalr	1408(ra) # 8020392e <eunlock>
  eput(ep);
    802063b6:	8526                	mv	a0,s1
    802063b8:	ffffd097          	auipc	ra,0xffffd
    802063bc:	5c4080e7          	jalr	1476(ra) # 8020397c <eput>
  ep = create(NULL,"/mytest.sh",T_FILE,0, &err);
    802063c0:	fdc40713          	addi	a4,s0,-36
    802063c4:	4681                	li	a3,0
    802063c6:	4609                	li	a2,2
    802063c8:	0000b597          	auipc	a1,0xb
    802063cc:	26858593          	addi	a1,a1,616 # 80211630 <rodata_start+0x630>
    802063d0:	4501                	li	a0,0
    802063d2:	ffffe097          	auipc	ra,0xffffe
    802063d6:	06a080e7          	jalr	106(ra) # 8020443c <create>
    802063da:	84aa                	mv	s1,a0
  ewrite(ep, 0, (uint64)sacrifice_start, 0, sacrifice_size);
    802063dc:	0050f717          	auipc	a4,0x50f
    802063e0:	d5672703          	lw	a4,-682(a4) # 80715132 <sacrifice_size>
    802063e4:	4681                	li	a3,0
    802063e6:	0050f617          	auipc	a2,0x50f
    802063ea:	cd460613          	addi	a2,a2,-812 # 807150ba <sacrifice_start>
    802063ee:	4581                	li	a1,0
    802063f0:	ffffd097          	auipc	ra,0xffffd
    802063f4:	c3e080e7          	jalr	-962(ra) # 8020302e <ewrite>
  eunlock(ep);
    802063f8:	8526                	mv	a0,s1
    802063fa:	ffffd097          	auipc	ra,0xffffd
    802063fe:	534080e7          	jalr	1332(ra) # 8020392e <eunlock>
  eput(ep);
    80206402:	8526                	mv	a0,s1
    80206404:	ffffd097          	auipc	ra,0xffffd
    80206408:	578080e7          	jalr	1400(ra) # 8020397c <eput>
  ep = create(NULL,"/bin/ls",T_FILE,0, &err);
    8020640c:	fdc40713          	addi	a4,s0,-36
    80206410:	4681                	li	a3,0
    80206412:	4609                	li	a2,2
    80206414:	0000b597          	auipc	a1,0xb
    80206418:	22c58593          	addi	a1,a1,556 # 80211640 <rodata_start+0x640>
    8020641c:	4501                	li	a0,0
    8020641e:	ffffe097          	auipc	ra,0xffffe
    80206422:	01e080e7          	jalr	30(ra) # 8020443c <create>
    80206426:	84aa                	mv	s1,a0
  eunlock(ep);
    80206428:	ffffd097          	auipc	ra,0xffffd
    8020642c:	506080e7          	jalr	1286(ra) # 8020392e <eunlock>
  eput(ep);
    80206430:	8526                	mv	a0,s1
    80206432:	ffffd097          	auipc	ra,0xffffd
    80206436:	54a080e7          	jalr	1354(ra) # 8020397c <eput>
  __debug_info("devinit\n");
    8020643a:	0000b517          	auipc	a0,0xb
    8020643e:	20e50513          	addi	a0,a0,526 # 80211648 <rodata_start+0x648>
    80206442:	00001097          	auipc	ra,0x1
    80206446:	c9c080e7          	jalr	-868(ra) # 802070de <__debug_info>
  memset(devsw,0,NDEV*sizeof(struct devsw));
    8020644a:	23000613          	li	a2,560
    8020644e:	4581                	li	a1,0
    80206450:	00568517          	auipc	a0,0x568
    80206454:	ae050513          	addi	a0,a0,-1312 # 8076df30 <devsw>
    80206458:	ffffb097          	auipc	ra,0xffffb
    8020645c:	91c080e7          	jalr	-1764(ra) # 80200d74 <memset>
  allocdev("console",consoleread,consolewrite);
    80206460:	00000617          	auipc	a2,0x0
    80206464:	c5060613          	addi	a2,a2,-944 # 802060b0 <consolewrite>
    80206468:	00000597          	auipc	a1,0x0
    8020646c:	b5458593          	addi	a1,a1,-1196 # 80205fbc <consoleread>
    80206470:	0000b517          	auipc	a0,0xb
    80206474:	1e850513          	addi	a0,a0,488 # 80211658 <rodata_start+0x658>
    80206478:	00000097          	auipc	ra,0x0
    8020647c:	cec080e7          	jalr	-788(ra) # 80206164 <allocdev>
  allocdev("tty",consoleread,consolewrite);
    80206480:	00000617          	auipc	a2,0x0
    80206484:	c3060613          	addi	a2,a2,-976 # 802060b0 <consolewrite>
    80206488:	00000597          	auipc	a1,0x0
    8020648c:	b3458593          	addi	a1,a1,-1228 # 80205fbc <consoleread>
    80206490:	0000b517          	auipc	a0,0xb
    80206494:	1d050513          	addi	a0,a0,464 # 80211660 <rodata_start+0x660>
    80206498:	00000097          	auipc	ra,0x0
    8020649c:	ccc080e7          	jalr	-820(ra) # 80206164 <allocdev>
  allocdev("null",nullread,nullwrite);
    802064a0:	00000617          	auipc	a2,0x0
    802064a4:	acc60613          	addi	a2,a2,-1332 # 80205f6c <nullwrite>
    802064a8:	00000597          	auipc	a1,0x0
    802064ac:	ab658593          	addi	a1,a1,-1354 # 80205f5e <nullread>
    802064b0:	0000b517          	auipc	a0,0xb
    802064b4:	1b850513          	addi	a0,a0,440 # 80211668 <rodata_start+0x668>
    802064b8:	00000097          	auipc	ra,0x0
    802064bc:	cac080e7          	jalr	-852(ra) # 80206164 <allocdev>
  allocdev("zero",zeroread,zerowrite);
    802064c0:	00000617          	auipc	a2,0x0
    802064c4:	aba60613          	addi	a2,a2,-1350 # 80205f7a <zerowrite>
    802064c8:	00000597          	auipc	a1,0x0
    802064cc:	ac058593          	addi	a1,a1,-1344 # 80205f88 <zeroread>
    802064d0:	0000b517          	auipc	a0,0xb
    802064d4:	1a050513          	addi	a0,a0,416 # 80211670 <rodata_start+0x670>
    802064d8:	00000097          	auipc	ra,0x0
    802064dc:	c8c080e7          	jalr	-884(ra) # 80206164 <allocdev>
  allocdev("rtc",rtcread,rtcwrite);
    802064e0:	00000617          	auipc	a2,0x0
    802064e4:	a7060613          	addi	a2,a2,-1424 # 80205f50 <rtcwrite>
    802064e8:	00000597          	auipc	a1,0x0
    802064ec:	a5a58593          	addi	a1,a1,-1446 # 80205f42 <rtcread>
    802064f0:	0000b517          	auipc	a0,0xb
    802064f4:	18850513          	addi	a0,a0,392 # 80211678 <rodata_start+0x678>
    802064f8:	00000097          	auipc	ra,0x0
    802064fc:	c6c080e7          	jalr	-916(ra) # 80206164 <allocdev>
}
    80206500:	4501                	li	a0,0
    80206502:	70a2                	ld	ra,40(sp)
    80206504:	7402                	ld	s0,32(sp)
    80206506:	64e2                	ld	s1,24(sp)
    80206508:	6145                	addi	sp,sp,48
    8020650a:	8082                	ret

000000008020650c <devlookup>:
{
    8020650c:	7179                	addi	sp,sp,-48
    8020650e:	f406                	sd	ra,40(sp)
    80206510:	f022                	sd	s0,32(sp)
    80206512:	ec26                	sd	s1,24(sp)
    80206514:	e84a                	sd	s2,16(sp)
    80206516:	e44e                	sd	s3,8(sp)
    80206518:	e052                	sd	s4,0(sp)
    8020651a:	1800                	addi	s0,sp,48
    8020651c:	89aa                	mv	s3,a0
  for(int i = 0;i < NDEV;i++){
    8020651e:	00568917          	auipc	s2,0x568
    80206522:	a1290913          	addi	s2,s2,-1518 # 8076df30 <devsw>
    80206526:	4481                	li	s1,0
    80206528:	4a29                	li	s4,10
    if(strncmp(name,devsw[i].name,DEV_NAME_MAX+1)==0){
    8020652a:	4635                	li	a2,13
    8020652c:	85ca                	mv	a1,s2
    8020652e:	854e                	mv	a0,s3
    80206530:	ffffb097          	auipc	ra,0xffffb
    80206534:	920080e7          	jalr	-1760(ra) # 80200e50 <strncmp>
    80206538:	c519                	beqz	a0,80206546 <devlookup+0x3a>
  for(int i = 0;i < NDEV;i++){
    8020653a:	2485                	addiw	s1,s1,1
    8020653c:	03890913          	addi	s2,s2,56
    80206540:	ff4495e3          	bne	s1,s4,8020652a <devlookup+0x1e>
  return -1;
    80206544:	54fd                	li	s1,-1
}
    80206546:	8526                	mv	a0,s1
    80206548:	70a2                	ld	ra,40(sp)
    8020654a:	7402                	ld	s0,32(sp)
    8020654c:	64e2                	ld	s1,24(sp)
    8020654e:	6942                	ld	s2,16(sp)
    80206550:	69a2                	ld	s3,8(sp)
    80206552:	6a02                	ld	s4,0(sp)
    80206554:	6145                	addi	sp,sp,48
    80206556:	8082                	ret

0000000080206558 <devkstat>:

int 
devkstat(struct devsw* mydev, struct kstat* st){
    80206558:	1101                	addi	sp,sp,-32
    8020655a:	ec06                	sd	ra,24(sp)
    8020655c:	e822                	sd	s0,16(sp)
    8020655e:	e426                	sd	s1,8(sp)
    80206560:	1000                	addi	s0,sp,32
    80206562:	84ae                	mv	s1,a1
    st->st_dev = mydev-devsw;
    80206564:	00568797          	auipc	a5,0x568
    80206568:	9cc78793          	addi	a5,a5,-1588 # 8076df30 <devsw>
    8020656c:	40f507b3          	sub	a5,a0,a5
    80206570:	878d                	srai	a5,a5,0x3
    80206572:	0000e717          	auipc	a4,0xe
    80206576:	c8673703          	ld	a4,-890(a4) # 802141f8 <erodata+0x8>
    8020657a:	02e787b3          	mul	a5,a5,a4
    8020657e:	e19c                	sd	a5,0(a1)
    st->st_size = 0;
    80206580:	0205b823          	sd	zero,48(a1)
    st->st_blksize = 128;
    80206584:	08000793          	li	a5,128
    80206588:	dd9c                	sw	a5,56(a1)
    st->st_blocks = 0;
    8020658a:	0405b023          	sd	zero,64(a1)
    st->st_atime_nsec = 0;
    8020658e:	0405b823          	sd	zero,80(a1)
    st->st_atime_sec = 0;
    80206592:	0405b423          	sd	zero,72(a1)
    st->st_ctime_nsec = 0;
    80206596:	0605b823          	sd	zero,112(a1)
    st->st_ctime_sec = 0;
    8020659a:	0605b423          	sd	zero,104(a1)
    st->st_mtime_nsec = 0;
    8020659e:	0605b023          	sd	zero,96(a1)
    st->st_mtime_sec = 0;
    802065a2:	0405bc23          	sd	zero,88(a1)
    st->st_uid = 0;
    802065a6:	0005ac23          	sw	zero,24(a1)
    st->st_gid = 0;
    802065aa:	0005ae23          	sw	zero,28(a1)
    st->st_rdev = 0;
    802065ae:	0205b023          	sd	zero,32(a1)
    st->st_nlink = 1;
    802065b2:	4785                	li	a5,1
    802065b4:	c9dc                	sw	a5,20(a1)
    st->st_ino = hashpath(mydev->name);
    802065b6:	ffffe097          	auipc	ra,0xffffe
    802065ba:	c46080e7          	jalr	-954(ra) # 802041fc <hashpath>
    802065be:	e488                	sd	a0,8(s1)
    st->st_mode = S_IFCHR;
    802065c0:	6789                	lui	a5,0x2
    802065c2:	c89c                	sw	a5,16(s1)
  return 0;
}
    802065c4:	4501                	li	a0,0
    802065c6:	60e2                	ld	ra,24(sp)
    802065c8:	6442                	ld	s0,16(sp)
    802065ca:	64a2                	ld	s1,8(sp)
    802065cc:	6105                	addi	sp,sp,32
    802065ce:	8082                	ret

00000000802065d0 <swtch>:
    802065d0:	00153023          	sd	ra,0(a0)
    802065d4:	00253423          	sd	sp,8(a0)
    802065d8:	e900                	sd	s0,16(a0)
    802065da:	ed04                	sd	s1,24(a0)
    802065dc:	03253023          	sd	s2,32(a0)
    802065e0:	03353423          	sd	s3,40(a0)
    802065e4:	03453823          	sd	s4,48(a0)
    802065e8:	03553c23          	sd	s5,56(a0)
    802065ec:	05653023          	sd	s6,64(a0)
    802065f0:	05753423          	sd	s7,72(a0)
    802065f4:	05853823          	sd	s8,80(a0)
    802065f8:	05953c23          	sd	s9,88(a0)
    802065fc:	07a53023          	sd	s10,96(a0)
    80206600:	07b53423          	sd	s11,104(a0)
    80206604:	0005b083          	ld	ra,0(a1)
    80206608:	0085b103          	ld	sp,8(a1)
    8020660c:	6980                	ld	s0,16(a1)
    8020660e:	6d84                	ld	s1,24(a1)
    80206610:	0205b903          	ld	s2,32(a1)
    80206614:	0285b983          	ld	s3,40(a1)
    80206618:	0305ba03          	ld	s4,48(a1)
    8020661c:	0385ba83          	ld	s5,56(a1)
    80206620:	0405bb03          	ld	s6,64(a1)
    80206624:	0485bb83          	ld	s7,72(a1)
    80206628:	0505bc03          	ld	s8,80(a1)
    8020662c:	0585bc83          	ld	s9,88(a1)
    80206630:	0605bd03          	ld	s10,96(a1)
    80206634:	0685bd83          	ld	s11,104(a1)
    80206638:	8082                	ret

000000008020663a <set_sigaction>:

int set_sigaction(
	int signum, 
	struct sigaction const *act, 
	struct sigaction *oldact 
) {
    8020663a:	7179                	addi	sp,sp,-48
    8020663c:	f406                	sd	ra,40(sp)
    8020663e:	f022                	sd	s0,32(sp)
    80206640:	ec26                	sd	s1,24(sp)
    80206642:	e84a                	sd	s2,16(sp)
    80206644:	e44e                	sd	s3,8(sp)
    80206646:	e052                	sd	s4,0(sp)
    80206648:	1800                	addi	s0,sp,48
    8020664a:	84aa                	mv	s1,a0
    8020664c:	892e                	mv	s2,a1
    8020664e:	89b2                	mv	s3,a2
	struct proc *p = myproc();
    80206650:	00003097          	auipc	ra,0x3
    80206654:	4da080e7          	jalr	1242(ra) # 80209b2a <myproc>
    80206658:	8a2a                	mv	s4,a0
	ksigaction_t const* tmp = p->sig_act;
    8020665a:	18853783          	ld	a5,392(a0)
	while (NULL != tmp) {
    8020665e:	c791                	beqz	a5,8020666a <set_sigaction+0x30>
		if (tmp->signum == signum) {
    80206660:	5398                	lw	a4,32(a5)
    80206662:	02970563          	beq	a4,s1,8020668c <set_sigaction+0x52>
		tmp = tmp->next;
    80206666:	639c                	ld	a5,0(a5)
	while (NULL != tmp) {
    80206668:	ffe5                	bnez	a5,80206660 <set_sigaction+0x26>

	ksigaction_t *tmp = __search_sig(p, signum);
	// printf("pid %d search %d find %p\n", p->pid, signum, tmp);

	if (NULL != oldact && NULL != tmp) {
    8020666a:	04098563          	beqz	s3,802066b4 <set_sigaction+0x7a>
		// for (int i = 0; i < len; i ++) {
		// 	oldact->sa_mask.__val[i] = tmp->sigact.sa_mask.__val[i];
		// }
	}

	if (NULL != act) {
    8020666e:	02090a63          	beqz	s2,802066a2 <set_sigaction+0x68>
		if (NULL == tmp) {
			// insert a new action into the proc 
			// ksigaction_t *new = kmalloc(sizeof(ksigaction_t));
            		ksigaction_t *new = kmalloc(sizeof(ksigaction_t));
    80206672:	02800513          	li	a0,40
    80206676:	00001097          	auipc	ra,0x1
    8020667a:	54e080e7          	jalr	1358(ra) # 80207bc4 <kmalloc>
    8020667e:	87aa                	mv	a5,a0
	ksig->next = p->sig_act;
    80206680:	188a3703          	ld	a4,392(s4)
    80206684:	e118                	sd	a4,0(a0)
	p->sig_act = ksig;
    80206686:	18aa3423          	sd	a0,392(s4)
}
    8020668a:	a801                	j	8020669a <set_sigaction+0x60>
	if (NULL != oldact && NULL != tmp) {
    8020668c:	02098763          	beqz	s3,802066ba <set_sigaction+0x80>
		oldact->__sigaction_handler = tmp->sigact.__sigaction_handler;
    80206690:	6798                	ld	a4,8(a5)
    80206692:	00e9b023          	sd	a4,0(s3)
	if (NULL != act) {
    80206696:	00090663          	beqz	s2,802066a2 <set_sigaction+0x68>
			__insert_sig(p, new);
			tmp = new;
		}

		// tmp->sigact.sa_flags = act->sa_flags;
		tmp->sigact.__sigaction_handler = act->__sigaction_handler;
    8020669a:	00093703          	ld	a4,0(s2)
    8020669e:	e798                	sd	a4,8(a5)
		// for (int i = 0; i < len; i ++) {
		// 	tmp->sigact.sa_mask.__val[i] = act->sa_mask.__val[i];
		// }
		tmp->signum = signum;
    802066a0:	d384                	sw	s1,32(a5)
	}


	return 0;
}
    802066a2:	4501                	li	a0,0
    802066a4:	70a2                	ld	ra,40(sp)
    802066a6:	7402                	ld	s0,32(sp)
    802066a8:	64e2                	ld	s1,24(sp)
    802066aa:	6942                	ld	s2,16(sp)
    802066ac:	69a2                	ld	s3,8(sp)
    802066ae:	6a02                	ld	s4,0(sp)
    802066b0:	6145                	addi	sp,sp,48
    802066b2:	8082                	ret
	if (NULL != act) {
    802066b4:	fe0907e3          	beqz	s2,802066a2 <set_sigaction+0x68>
    802066b8:	bf6d                	j	80206672 <set_sigaction+0x38>
    802066ba:	fe0910e3          	bnez	s2,8020669a <set_sigaction+0x60>
    802066be:	b7d5                	j	802066a2 <set_sigaction+0x68>

00000000802066c0 <sigprocmask>:

int sigprocmask(
	int how, 
	__sigset_t *set, 
	__sigset_t *oldset
) {
    802066c0:	7179                	addi	sp,sp,-48
    802066c2:	f406                	sd	ra,40(sp)
    802066c4:	f022                	sd	s0,32(sp)
    802066c6:	ec26                	sd	s1,24(sp)
    802066c8:	e84a                	sd	s2,16(sp)
    802066ca:	e44e                	sd	s3,8(sp)
    802066cc:	1800                	addi	s0,sp,48
    802066ce:	84aa                	mv	s1,a0
    802066d0:	89ae                	mv	s3,a1
    802066d2:	8932                	mv	s2,a2
	struct proc *p = myproc();
    802066d4:	00003097          	auipc	ra,0x3
    802066d8:	456080e7          	jalr	1110(ra) # 80209b2a <myproc>


	for (int i = 0; i < SIGSET_LEN; i ++) {
		if (NULL != oldset) {
    802066dc:	00090663          	beqz	s2,802066e8 <sigprocmask+0x28>
			oldset->__val[i] = p->sig_set.__val[i];
    802066e0:	19053783          	ld	a5,400(a0)
    802066e4:	00f93023          	sd	a5,0(s2)
		}

		switch (how) {
    802066e8:	4785                	li	a5,1
    802066ea:	02f48c63          	beq	s1,a5,80206722 <sigprocmask+0x62>
    802066ee:	4789                	li	a5,2
    802066f0:	04f48363          	beq	s1,a5,80206736 <sigprocmask+0x76>
    802066f4:	cc99                	beqz	s1,80206712 <sigprocmask+0x52>
				// panic("invalid how\n");
		}
	}

	// SIGTERM cannot be masked 
	p->sig_set.__val[0] &= 1ul << SIGTERM;
    802066f6:	19053783          	ld	a5,400(a0)
    802066fa:	6721                	lui	a4,0x8
    802066fc:	8ff9                	and	a5,a5,a4
    802066fe:	18f53823          	sd	a5,400(a0)

	return 0;
}
    80206702:	4501                	li	a0,0
    80206704:	70a2                	ld	ra,40(sp)
    80206706:	7402                	ld	s0,32(sp)
    80206708:	64e2                	ld	s1,24(sp)
    8020670a:	6942                	ld	s2,16(sp)
    8020670c:	69a2                	ld	s3,8(sp)
    8020670e:	6145                	addi	sp,sp,48
    80206710:	8082                	ret
				p->sig_set.__val[i] |= set->__val[i];
    80206712:	19053783          	ld	a5,400(a0)
    80206716:	0009b703          	ld	a4,0(s3)
    8020671a:	8fd9                	or	a5,a5,a4
    8020671c:	18f53823          	sd	a5,400(a0)
				break;
    80206720:	bfd9                	j	802066f6 <sigprocmask+0x36>
				p->sig_set.__val[i] &= ~(set->__val[i]);
    80206722:	0009b783          	ld	a5,0(s3)
    80206726:	fff7c713          	not	a4,a5
    8020672a:	19053783          	ld	a5,400(a0)
    8020672e:	8ff9                	and	a5,a5,a4
    80206730:	18f53823          	sd	a5,400(a0)
				break;
    80206734:	b7c9                	j	802066f6 <sigprocmask+0x36>
				p->sig_set.__val[i] = set->__val[i];
    80206736:	0009b783          	ld	a5,0(s3)
    8020673a:	18f53823          	sd	a5,400(a0)
				break;
    8020673e:	bf65                	j	802066f6 <sigprocmask+0x36>

0000000080206740 <sighandle>:

extern char sig_trampoline[];
extern char sig_handler[];
extern char default_sigaction[];

void sighandle(void) {
    80206740:	7139                	addi	sp,sp,-64
    80206742:	fc06                	sd	ra,56(sp)
    80206744:	f822                	sd	s0,48(sp)
    80206746:	f426                	sd	s1,40(sp)
    80206748:	f04a                	sd	s2,32(sp)
    8020674a:	ec4e                	sd	s3,24(sp)
    8020674c:	e852                	sd	s4,16(sp)
    8020674e:	e456                	sd	s5,8(sp)
    80206750:	0080                	addi	s0,sp,64
	struct proc *p = myproc();
    80206752:	00003097          	auipc	ra,0x3
    80206756:	3d8080e7          	jalr	984(ra) # 80209b2a <myproc>

	int signum = 0;
	if (p->killed) {
    8020675a:	03852903          	lw	s2,56(a0)
    8020675e:	0e090763          	beqz	s2,8020684c <sighandle+0x10c>
    80206762:	89aa                	mv	s3,a0
		signum = p->killed;

		const int len = sizeof(unsigned long) * 8;
		int i = (unsigned long)(p->killed) / len;
    80206764:	40695593          	srai	a1,s2,0x6
		int bit = (unsigned long)(p->killed) % len;
    80206768:	03f97613          	andi	a2,s2,63
		p->sig_pending.__val[i] &= ~(1ul << bit++);
    8020676c:	00160793          	addi	a5,a2,1
    80206770:	00359713          	slli	a4,a1,0x3
    80206774:	972a                	add	a4,a4,a0
    80206776:	4685                	li	a3,1
    80206778:	00c696b3          	sll	a3,a3,a2
    8020677c:	fff6c693          	not	a3,a3
    80206780:	19873603          	ld	a2,408(a4) # 8198 <_entry-0x801f7e68>
    80206784:	8ef1                	and	a3,a3,a2
    80206786:	18d73c23          	sd	a3,408(a4)
		p->killed = 0;
    8020678a:	02052c23          	sw	zero,56(a0)

		for (; i < SIGSET_LEN; i ++) {
			while (bit < len) {
    8020678e:	03f00513          	li	a0,63
    80206792:	04000613          	li	a2,64
		for (; i < SIGSET_LEN; i ++) {
    80206796:	4805                	li	a6,1
    80206798:	02b04463          	bgtz	a1,802067c0 <sighandle+0x80>
			while (bit < len) {
    8020679c:	0cf54163          	blt	a0,a5,8020685e <sighandle+0x11e>
				if (p->sig_pending.__val[i] & (1ul << bit)) {
    802067a0:	00f6d733          	srl	a4,a3,a5
    802067a4:	8b05                	andi	a4,a4,1
    802067a6:	eb01                	bnez	a4,802067b6 <sighandle+0x76>
					p->killed = i * len + bit; // p->killed
					goto start_handle;
				}
				bit ++;
    802067a8:	2785                	addiw	a5,a5,1
			while (bit < len) {
    802067aa:	0ac78a63          	beq	a5,a2,8020685e <sighandle+0x11e>
				if (p->sig_pending.__val[i] & (1ul << bit)) {
    802067ae:	00f6d733          	srl	a4,a3,a5
    802067b2:	8b05                	andi	a4,a4,1
    802067b4:	db75                	beqz	a4,802067a8 <sighandle+0x68>
					p->killed = i * len + bit; // p->killed
    802067b6:	0065959b          	slliw	a1,a1,0x6
    802067ba:	9fad                	addw	a5,a5,a1
    802067bc:	02f9ac23          	sw	a5,56(s3)
	ksigaction_t const* tmp = p->sig_act;
    802067c0:	1889b483          	ld	s1,392(s3)
	while (NULL != tmp) {
    802067c4:	10048a63          	beqz	s1,802068d8 <sighandle+0x198>
		if (tmp->signum == signum) {
    802067c8:	509c                	lw	a5,32(s1)
    802067ca:	09278e63          	beq	a5,s2,80206866 <sighandle+0x126>
		tmp = tmp->next;
    802067ce:	6084                	ld	s1,0(s1)
	while (NULL != tmp) {
    802067d0:	fce5                	bnez	s1,802067c8 <sighandle+0x88>

	// fast skip 
	// if (NULL == sigact && SIGCHLD == signum) {
	// 	return ;
	// }
	if (SIGCHLD == signum && 
    802067d2:	47c5                	li	a5,17
    802067d4:	06f90c63          	beq	s2,a5,8020684c <sighandle+0x10c>
		(NULL == sigact || NULL == sigact->sigact.__sigaction_handler.sa_handler)) {
			return;
	}

	frame = kmalloc(sizeof(struct sig_frame));
    802067d8:	4561                	li	a0,24
    802067da:	00001097          	auipc	ra,0x1
    802067de:	3ea080e7          	jalr	1002(ra) # 80207bc4 <kmalloc>
    802067e2:	8aaa                	mv	s5,a0
        // frame = allocpage();
	tf = kmalloc(sizeof(struct trapframe));
    802067e4:	12000513          	li	a0,288
    802067e8:	00001097          	auipc	ra,0x1
    802067ec:	3dc080e7          	jalr	988(ra) # 80207bc4 <kmalloc>
    802067f0:	8a2a                	mv	s4,a0
	// 		p->sig_set.__val[i] &= sigact->sigact.sa_mask.__val[i];
	// 	}
	// }

	// store proc's trapframe 
	frame->tf = p->trapframe;
    802067f2:	0689b783          	ld	a5,104(s3)
    802067f6:	00fab423          	sd	a5,8(s5)
	tf->epc = (uint64)(SIG_TRAMPOLINE + ((uint64)sig_handler - (uint64)sig_trampoline));
    802067fa:	0000a617          	auipc	a2,0xa
    802067fe:	80660613          	addi	a2,a2,-2042 # 80210000 <_sig_trampoline>
    80206802:	02000737          	lui	a4,0x2000
    80206806:	00009797          	auipc	a5,0x9
    8020680a:	7fa78793          	addi	a5,a5,2042 # 80210000 <_sig_trampoline>
    8020680e:	177d                	addi	a4,a4,-1
    80206810:	0736                	slli	a4,a4,0xd
    80206812:	97ba                	add	a5,a5,a4
    80206814:	8f91                	sub	a5,a5,a2
    80206816:	ed1c                	sd	a5,24(a0)
	tf->sp = p->trapframe->sp;
    80206818:	0689b783          	ld	a5,104(s3)
    8020681c:	7b9c                	ld	a5,48(a5)
    8020681e:	f91c                	sd	a5,48(a0)
	tf->a0 = signum;
    80206820:	07253823          	sd	s2,112(a0)
		__debug_info("do signal_handler\n");
		tf->a1 = (uint64)(sigact->sigact.__sigaction_handler.sa_handler);
	}
	else {
		// use the default handler 
		tf->a1 = (uint64)(SIG_TRAMPOLINE + ((uint64)default_sigaction - (uint64)sig_trampoline));
    80206824:	02000737          	lui	a4,0x2000
    80206828:	00009797          	auipc	a5,0x9
    8020682c:	7e278793          	addi	a5,a5,2018 # 8021000a <default_sigaction>
    80206830:	177d                	addi	a4,a4,-1
    80206832:	0736                	slli	a4,a4,0xd
    80206834:	97ba                	add	a5,a5,a4
    80206836:	8f91                	sub	a5,a5,a2
    80206838:	06fa3c23          	sd	a5,120(s4)
	}
	p->trapframe = tf;
    8020683c:	0749b423          	sd	s4,104(s3)

	// insert sig_frame into proc's sig_frame list 
	frame->next = p->sig_frame;
    80206840:	1a09b783          	ld	a5,416(s3)
    80206844:	00fab823          	sd	a5,16(s5)
	p->sig_frame = frame;
    80206848:	1b59b023          	sd	s5,416(s3)
}
    8020684c:	70e2                	ld	ra,56(sp)
    8020684e:	7442                	ld	s0,48(sp)
    80206850:	74a2                	ld	s1,40(sp)
    80206852:	7902                	ld	s2,32(sp)
    80206854:	69e2                	ld	s3,24(sp)
    80206856:	6a42                	ld	s4,16(sp)
    80206858:	6aa2                	ld	s5,8(sp)
    8020685a:	6121                	addi	sp,sp,64
    8020685c:	8082                	ret
		for (; i < SIGSET_LEN; i ++) {
    8020685e:	2585                	addiw	a1,a1,1
    80206860:	f3059ee3          	bne	a1,a6,8020679c <sighandle+0x5c>
    80206864:	bfb1                	j	802067c0 <sighandle+0x80>
	if (SIGCHLD == signum && 
    80206866:	47c5                	li	a5,17
    80206868:	0cf91263          	bne	s2,a5,8020692c <sighandle+0x1ec>
		(NULL == sigact || NULL == sigact->sigact.__sigaction_handler.sa_handler)) {
    8020686c:	649c                	ld	a5,8(s1)
    8020686e:	dff9                	beqz	a5,8020684c <sighandle+0x10c>
	frame = kmalloc(sizeof(struct sig_frame));
    80206870:	4561                	li	a0,24
    80206872:	00001097          	auipc	ra,0x1
    80206876:	352080e7          	jalr	850(ra) # 80207bc4 <kmalloc>
    8020687a:	8aaa                	mv	s5,a0
	tf = kmalloc(sizeof(struct trapframe));
    8020687c:	12000513          	li	a0,288
    80206880:	00001097          	auipc	ra,0x1
    80206884:	344080e7          	jalr	836(ra) # 80207bc4 <kmalloc>
    80206888:	8a2a                	mv	s4,a0
	frame->tf = p->trapframe;
    8020688a:	0689b783          	ld	a5,104(s3)
    8020688e:	00fab423          	sd	a5,8(s5)
	tf->epc = (uint64)(SIG_TRAMPOLINE + ((uint64)sig_handler - (uint64)sig_trampoline));
    80206892:	00009617          	auipc	a2,0x9
    80206896:	76e60613          	addi	a2,a2,1902 # 80210000 <_sig_trampoline>
    8020689a:	020006b7          	lui	a3,0x2000
    8020689e:	00009717          	auipc	a4,0x9
    802068a2:	76270713          	addi	a4,a4,1890 # 80210000 <_sig_trampoline>
    802068a6:	16fd                	addi	a3,a3,-1
    802068a8:	06b6                	slli	a3,a3,0xd
    802068aa:	9736                	add	a4,a4,a3
    802068ac:	8f11                	sub	a4,a4,a2
    802068ae:	ed18                	sd	a4,24(a0)
	tf->sp = p->trapframe->sp;
    802068b0:	0689b783          	ld	a5,104(s3)
    802068b4:	7b9c                	ld	a5,48(a5)
    802068b6:	f91c                	sd	a5,48(a0)
	tf->a0 = signum;
    802068b8:	47c5                	li	a5,17
    802068ba:	f93c                	sd	a5,112(a0)
	if (NULL != sigact && sigact->sigact.__sigaction_handler.sa_handler) {
    802068bc:	649c                	ld	a5,8(s1)
    802068be:	d3bd                	beqz	a5,80206824 <sighandle+0xe4>
		__debug_info("do signal_handler\n");
    802068c0:	0000b517          	auipc	a0,0xb
    802068c4:	dc050513          	addi	a0,a0,-576 # 80211680 <rodata_start+0x680>
    802068c8:	00001097          	auipc	ra,0x1
    802068cc:	816080e7          	jalr	-2026(ra) # 802070de <__debug_info>
		tf->a1 = (uint64)(sigact->sigact.__sigaction_handler.sa_handler);
    802068d0:	649c                	ld	a5,8(s1)
    802068d2:	06fa3c23          	sd	a5,120(s4)
    802068d6:	b79d                	j	8020683c <sighandle+0xfc>
	if (SIGCHLD == signum && 
    802068d8:	47c5                	li	a5,17
    802068da:	f6f909e3          	beq	s2,a5,8020684c <sighandle+0x10c>
	frame = kmalloc(sizeof(struct sig_frame));
    802068de:	4561                	li	a0,24
    802068e0:	00001097          	auipc	ra,0x1
    802068e4:	2e4080e7          	jalr	740(ra) # 80207bc4 <kmalloc>
    802068e8:	8aaa                	mv	s5,a0
	tf = kmalloc(sizeof(struct trapframe));
    802068ea:	12000513          	li	a0,288
    802068ee:	00001097          	auipc	ra,0x1
    802068f2:	2d6080e7          	jalr	726(ra) # 80207bc4 <kmalloc>
    802068f6:	8a2a                	mv	s4,a0
	frame->tf = p->trapframe;
    802068f8:	0689b783          	ld	a5,104(s3)
    802068fc:	00fab423          	sd	a5,8(s5)
	tf->epc = (uint64)(SIG_TRAMPOLINE + ((uint64)sig_handler - (uint64)sig_trampoline));
    80206900:	00009617          	auipc	a2,0x9
    80206904:	70060613          	addi	a2,a2,1792 # 80210000 <_sig_trampoline>
    80206908:	02000737          	lui	a4,0x2000
    8020690c:	00009797          	auipc	a5,0x9
    80206910:	6f478793          	addi	a5,a5,1780 # 80210000 <_sig_trampoline>
    80206914:	177d                	addi	a4,a4,-1
    80206916:	0736                	slli	a4,a4,0xd
    80206918:	97ba                	add	a5,a5,a4
    8020691a:	8f91                	sub	a5,a5,a2
    8020691c:	ed1c                	sd	a5,24(a0)
	tf->sp = p->trapframe->sp;
    8020691e:	0689b783          	ld	a5,104(s3)
    80206922:	7b9c                	ld	a5,48(a5)
    80206924:	f91c                	sd	a5,48(a0)
	tf->a0 = signum;
    80206926:	07253823          	sd	s2,112(a0)
	if (NULL != sigact && sigact->sigact.__sigaction_handler.sa_handler) {
    8020692a:	bded                	j	80206824 <sighandle+0xe4>
	frame = kmalloc(sizeof(struct sig_frame));
    8020692c:	4561                	li	a0,24
    8020692e:	00001097          	auipc	ra,0x1
    80206932:	296080e7          	jalr	662(ra) # 80207bc4 <kmalloc>
    80206936:	8aaa                	mv	s5,a0
	tf = kmalloc(sizeof(struct trapframe));
    80206938:	12000513          	li	a0,288
    8020693c:	00001097          	auipc	ra,0x1
    80206940:	288080e7          	jalr	648(ra) # 80207bc4 <kmalloc>
    80206944:	8a2a                	mv	s4,a0
	frame->tf = p->trapframe;
    80206946:	0689b783          	ld	a5,104(s3)
    8020694a:	00fab423          	sd	a5,8(s5)
	tf->epc = (uint64)(SIG_TRAMPOLINE + ((uint64)sig_handler - (uint64)sig_trampoline));
    8020694e:	00009617          	auipc	a2,0x9
    80206952:	6b260613          	addi	a2,a2,1714 # 80210000 <_sig_trampoline>
    80206956:	02000737          	lui	a4,0x2000
    8020695a:	00009797          	auipc	a5,0x9
    8020695e:	6a678793          	addi	a5,a5,1702 # 80210000 <_sig_trampoline>
    80206962:	177d                	addi	a4,a4,-1
    80206964:	0736                	slli	a4,a4,0xd
    80206966:	97ba                	add	a5,a5,a4
    80206968:	8f91                	sub	a5,a5,a2
    8020696a:	ed1c                	sd	a5,24(a0)
	tf->sp = p->trapframe->sp;
    8020696c:	0689b783          	ld	a5,104(s3)
    80206970:	7b9c                	ld	a5,48(a5)
    80206972:	f91c                	sd	a5,48(a0)
	tf->a0 = signum;
    80206974:	07253823          	sd	s2,112(a0)
	if (NULL != sigact && sigact->sigact.__sigaction_handler.sa_handler) {
    80206978:	b791                	j	802068bc <sighandle+0x17c>

000000008020697a <sigframefree>:

void sigframefree(struct sig_frame *head) {
	while (NULL != head) {
    8020697a:	c94d                	beqz	a0,80206a2c <sigframefree+0xb2>
void sigframefree(struct sig_frame *head) {
    8020697c:	7139                	addi	sp,sp,-64
    8020697e:	fc06                	sd	ra,56(sp)
    80206980:	f822                	sd	s0,48(sp)
    80206982:	f426                	sd	s1,40(sp)
    80206984:	f04a                	sd	s2,32(sp)
    80206986:	ec4e                	sd	s3,24(sp)
    80206988:	e852                	sd	s4,16(sp)
    8020698a:	e456                	sd	s5,8(sp)
    8020698c:	0080                	addi	s0,sp,64
    8020698e:	84aa                	mv	s1,a0
		struct sig_frame *next = head->next;
		if(next == head)
		{
		  __debug_warn("[sigframefree] loop!\n");
		}
		__debug_info("[sigframefree] free trapframe %p\n", head->tf);
    80206990:	0000ba17          	auipc	s4,0xb
    80206994:	d20a0a13          	addi	s4,s4,-736 # 802116b0 <rodata_start+0x6b0>
		kfree(head->tf);
		__debug_info("[sigframefree] free %p\n", head);
    80206998:	0000b997          	auipc	s3,0xb
    8020699c:	d4098993          	addi	s3,s3,-704 # 802116d8 <rodata_start+0x6d8>
		  __debug_warn("[sigframefree] loop!\n");
    802069a0:	0000ba97          	auipc	s5,0xb
    802069a4:	cf8a8a93          	addi	s5,s5,-776 # 80211698 <rodata_start+0x698>
    802069a8:	a82d                	j	802069e2 <sigframefree+0x68>
    802069aa:	8556                	mv	a0,s5
    802069ac:	00001097          	auipc	ra,0x1
    802069b0:	8f8080e7          	jalr	-1800(ra) # 802072a4 <__debug_warn>
		__debug_info("[sigframefree] free trapframe %p\n", head->tf);
    802069b4:	648c                	ld	a1,8(s1)
    802069b6:	8552                	mv	a0,s4
    802069b8:	00000097          	auipc	ra,0x0
    802069bc:	726080e7          	jalr	1830(ra) # 802070de <__debug_info>
		kfree(head->tf);
    802069c0:	6488                	ld	a0,8(s1)
    802069c2:	00001097          	auipc	ra,0x1
    802069c6:	44c080e7          	jalr	1100(ra) # 80207e0e <kfree>
		__debug_info("[sigframefree] free %p\n", head);
    802069ca:	85a6                	mv	a1,s1
    802069cc:	854e                	mv	a0,s3
    802069ce:	00000097          	auipc	ra,0x0
    802069d2:	710080e7          	jalr	1808(ra) # 802070de <__debug_info>
		kfree(head);
    802069d6:	8526                	mv	a0,s1
    802069d8:	00001097          	auipc	ra,0x1
    802069dc:	436080e7          	jalr	1078(ra) # 80207e0e <kfree>
		head = next;
    802069e0:	84ca                	mv	s1,s2
		struct sig_frame *next = head->next;
    802069e2:	0104b903          	ld	s2,16(s1)
		if(next == head)
    802069e6:	fc9902e3          	beq	s2,s1,802069aa <sigframefree+0x30>
		__debug_info("[sigframefree] free trapframe %p\n", head->tf);
    802069ea:	648c                	ld	a1,8(s1)
    802069ec:	8552                	mv	a0,s4
    802069ee:	00000097          	auipc	ra,0x0
    802069f2:	6f0080e7          	jalr	1776(ra) # 802070de <__debug_info>
		kfree(head->tf);
    802069f6:	6488                	ld	a0,8(s1)
    802069f8:	00001097          	auipc	ra,0x1
    802069fc:	416080e7          	jalr	1046(ra) # 80207e0e <kfree>
		__debug_info("[sigframefree] free %p\n", head);
    80206a00:	85a6                	mv	a1,s1
    80206a02:	854e                	mv	a0,s3
    80206a04:	00000097          	auipc	ra,0x0
    80206a08:	6da080e7          	jalr	1754(ra) # 802070de <__debug_info>
		kfree(head);
    80206a0c:	8526                	mv	a0,s1
    80206a0e:	00001097          	auipc	ra,0x1
    80206a12:	400080e7          	jalr	1024(ra) # 80207e0e <kfree>
	while (NULL != head) {
    80206a16:	fc0915e3          	bnez	s2,802069e0 <sigframefree+0x66>
	}
}
    80206a1a:	70e2                	ld	ra,56(sp)
    80206a1c:	7442                	ld	s0,48(sp)
    80206a1e:	74a2                	ld	s1,40(sp)
    80206a20:	7902                	ld	s2,32(sp)
    80206a22:	69e2                	ld	s3,24(sp)
    80206a24:	6a42                	ld	s4,16(sp)
    80206a26:	6aa2                	ld	s5,8(sp)
    80206a28:	6121                	addi	sp,sp,64
    80206a2a:	8082                	ret
    80206a2c:	8082                	ret

0000000080206a2e <sigaction_free>:

void sigaction_free(ksigaction_t *head) {
    80206a2e:	1101                	addi	sp,sp,-32
    80206a30:	ec06                	sd	ra,24(sp)
    80206a32:	e822                	sd	s0,16(sp)
    80206a34:	e426                	sd	s1,8(sp)
    80206a36:	1000                	addi	s0,sp,32
    80206a38:	84aa                	mv	s1,a0
	while (NULL != head) {
    80206a3a:	c901                	beqz	a0,80206a4a <sigaction_free+0x1c>
		ksigaction_t *next = head->next;
    80206a3c:	8526                	mv	a0,s1
    80206a3e:	6084                	ld	s1,0(s1)
		kfree(head);
    80206a40:	00001097          	auipc	ra,0x1
    80206a44:	3ce080e7          	jalr	974(ra) # 80207e0e <kfree>
	while (NULL != head) {
    80206a48:	f8f5                	bnez	s1,80206a3c <sigaction_free+0xe>
		head = next;
	}
}
    80206a4a:	60e2                	ld	ra,24(sp)
    80206a4c:	6442                	ld	s0,16(sp)
    80206a4e:	64a2                	ld	s1,8(sp)
    80206a50:	6105                	addi	sp,sp,32
    80206a52:	8082                	ret

0000000080206a54 <sigaction_copy>:

int sigaction_copy(ksigaction_t **pdst, ksigaction_t const *src) {
    80206a54:	1101                	addi	sp,sp,-32
    80206a56:	ec06                	sd	ra,24(sp)
    80206a58:	e822                	sd	s0,16(sp)
    80206a5a:	e426                	sd	s1,8(sp)
    80206a5c:	e04a                	sd	s2,0(sp)
    80206a5e:	1000                	addi	s0,sp,32
    80206a60:	892a                	mv	s2,a0
    80206a62:	84ae                	mv	s1,a1
	ksigaction_t *tmp = NULL;

	*pdst = NULL;
    80206a64:	00053023          	sd	zero,0(a0)
	if (NULL == src) {
    80206a68:	c1b5                	beqz	a1,80206acc <sigaction_copy+0x78>
		return 0;
	}

	while (NULL != src) {
		tmp = kmalloc(sizeof(ksigaction_t));
    80206a6a:	02800513          	li	a0,40
    80206a6e:	00001097          	auipc	ra,0x1
    80206a72:	156080e7          	jalr	342(ra) # 80207bc4 <kmalloc>
		if (NULL == tmp) {
    80206a76:	c505                	beqz	a0,80206a9e <sigaction_copy+0x4a>
			sigaction_free(*pdst);
			*pdst = NULL;
			return -1;
		}

		*tmp = *src;
    80206a78:	608c                	ld	a1,0(s1)
    80206a7a:	6490                	ld	a2,8(s1)
    80206a7c:	6894                	ld	a3,16(s1)
    80206a7e:	6c98                	ld	a4,24(s1)
    80206a80:	709c                	ld	a5,32(s1)
    80206a82:	e10c                	sd	a1,0(a0)
    80206a84:	e510                	sd	a2,8(a0)
    80206a86:	e914                	sd	a3,16(a0)
    80206a88:	ed18                	sd	a4,24(a0)
    80206a8a:	f11c                	sd	a5,32(a0)
		tmp->next = *pdst;
    80206a8c:	00093783          	ld	a5,0(s2)
    80206a90:	e11c                	sd	a5,0(a0)
		*pdst = tmp;
    80206a92:	00a93023          	sd	a0,0(s2)

		src = src->next;
    80206a96:	6084                	ld	s1,0(s1)
	while (NULL != src) {
    80206a98:	f8e9                	bnez	s1,80206a6a <sigaction_copy+0x16>
	}

	return 0;
    80206a9a:	4501                	li	a0,0
    80206a9c:	a015                	j	80206ac0 <sigaction_copy+0x6c>
			__debug_warn("[sigaction_copy] fail to alloc\n");
    80206a9e:	0000b517          	auipc	a0,0xb
    80206aa2:	c5250513          	addi	a0,a0,-942 # 802116f0 <rodata_start+0x6f0>
    80206aa6:	00000097          	auipc	ra,0x0
    80206aaa:	7fe080e7          	jalr	2046(ra) # 802072a4 <__debug_warn>
			sigaction_free(*pdst);
    80206aae:	00093503          	ld	a0,0(s2)
    80206ab2:	00000097          	auipc	ra,0x0
    80206ab6:	f7c080e7          	jalr	-132(ra) # 80206a2e <sigaction_free>
			*pdst = NULL;
    80206aba:	00093023          	sd	zero,0(s2)
			return -1;
    80206abe:	557d                	li	a0,-1
}
    80206ac0:	60e2                	ld	ra,24(sp)
    80206ac2:	6442                	ld	s0,16(sp)
    80206ac4:	64a2                	ld	s1,8(sp)
    80206ac6:	6902                	ld	s2,0(sp)
    80206ac8:	6105                	addi	sp,sp,32
    80206aca:	8082                	ret
		return 0;
    80206acc:	4501                	li	a0,0
    80206ace:	bfcd                	j	80206ac0 <sigaction_copy+0x6c>

0000000080206ad0 <sigreturn>:

void sigreturn(void) {
    80206ad0:	1101                	addi	sp,sp,-32
    80206ad2:	ec06                	sd	ra,24(sp)
    80206ad4:	e822                	sd	s0,16(sp)
    80206ad6:	e426                	sd	s1,8(sp)
    80206ad8:	e04a                	sd	s2,0(sp)
    80206ada:	1000                	addi	s0,sp,32
	struct proc *p = myproc();
    80206adc:	00003097          	auipc	ra,0x3
    80206ae0:	04e080e7          	jalr	78(ra) # 80209b2a <myproc>
    80206ae4:	84aa                	mv	s1,a0

	if (NULL == p->sig_frame) {	// it's not in a sighandler!
    80206ae6:	1a053783          	ld	a5,416(a0)
    80206aea:	cb95                	beqz	a5,80206b1e <sigreturn+0x4e>
		exit(-1);
	}

	struct sig_frame *frame = p->sig_frame;
    80206aec:	1a04b903          	ld	s2,416(s1)
	// for (int i = 0; i < SIGSET_LEN; i ++) {
	// 	p->sig_set.__val[i] = frame->mask.__val[i];
	// }
	freepage(p->trapframe);
    80206af0:	74a8                	ld	a0,104(s1)
    80206af2:	00001097          	auipc	ra,0x1
    80206af6:	eea080e7          	jalr	-278(ra) # 802079dc <_freepage>
	p->trapframe = frame->tf;
    80206afa:	00893783          	ld	a5,8(s2)
    80206afe:	f4bc                	sd	a5,104(s1)

	// remove this frame from list 
	p->sig_frame = frame->next;
    80206b00:	01093783          	ld	a5,16(s2)
    80206b04:	1af4b023          	sd	a5,416(s1)
	freepage(frame);
    80206b08:	854a                	mv	a0,s2
    80206b0a:	00001097          	auipc	ra,0x1
    80206b0e:	ed2080e7          	jalr	-302(ra) # 802079dc <_freepage>
}
    80206b12:	60e2                	ld	ra,24(sp)
    80206b14:	6442                	ld	s0,16(sp)
    80206b16:	64a2                	ld	s1,8(sp)
    80206b18:	6902                	ld	s2,0(sp)
    80206b1a:	6105                	addi	sp,sp,32
    80206b1c:	8082                	ret
		exit(-1);
    80206b1e:	557d                	li	a0,-1
    80206b20:	ffffb097          	auipc	ra,0xffffb
    80206b24:	7ba080e7          	jalr	1978(ra) # 802022da <exit>
    80206b28:	b7d1                	j	80206aec <sigreturn+0x1c>

0000000080206b2a <initlock>:



void
initlock(struct spinlock *lk, char *name)
{
    80206b2a:	1141                	addi	sp,sp,-16
    80206b2c:	e422                	sd	s0,8(sp)
    80206b2e:	0800                	addi	s0,sp,16
  lk->name = name;
    80206b30:	e50c                	sd	a1,8(a0)
  lk->locked = 0;
    80206b32:	00052023          	sw	zero,0(a0)
  lk->cpu = 0;
    80206b36:	00053823          	sd	zero,16(a0)
}
    80206b3a:	6422                	ld	s0,8(sp)
    80206b3c:	0141                	addi	sp,sp,16
    80206b3e:	8082                	ret

0000000080206b40 <holding>:
// Interrupts must be off.
int
holding(struct spinlock *lk)
{
  int r;
  r = (lk->locked && lk->cpu == mycpu());
    80206b40:	411c                	lw	a5,0(a0)
    80206b42:	e399                	bnez	a5,80206b48 <holding+0x8>
    80206b44:	4501                	li	a0,0
  return r;
}
    80206b46:	8082                	ret
{
    80206b48:	1101                	addi	sp,sp,-32
    80206b4a:	ec06                	sd	ra,24(sp)
    80206b4c:	e822                	sd	s0,16(sp)
    80206b4e:	e426                	sd	s1,8(sp)
    80206b50:	1000                	addi	s0,sp,32
  r = (lk->locked && lk->cpu == mycpu());
    80206b52:	6904                	ld	s1,16(a0)
    80206b54:	00003097          	auipc	ra,0x3
    80206b58:	fba080e7          	jalr	-70(ra) # 80209b0e <mycpu>
    80206b5c:	40a48533          	sub	a0,s1,a0
    80206b60:	00153513          	seqz	a0,a0
}
    80206b64:	60e2                	ld	ra,24(sp)
    80206b66:	6442                	ld	s0,16(sp)
    80206b68:	64a2                	ld	s1,8(sp)
    80206b6a:	6105                	addi	sp,sp,32
    80206b6c:	8082                	ret

0000000080206b6e <acquire>:
{
    80206b6e:	1101                	addi	sp,sp,-32
    80206b70:	ec06                	sd	ra,24(sp)
    80206b72:	e822                	sd	s0,16(sp)
    80206b74:	e426                	sd	s1,8(sp)
    80206b76:	1000                	addi	s0,sp,32
    80206b78:	84aa                	mv	s1,a0
  push_off(); // disable interrupts to avoid deadlock.
    80206b7a:	ffffa097          	auipc	ra,0xffffa
    80206b7e:	488080e7          	jalr	1160(ra) # 80201002 <push_off>
  if(holding(lk))
    80206b82:	8526                	mv	a0,s1
    80206b84:	00000097          	auipc	ra,0x0
    80206b88:	fbc080e7          	jalr	-68(ra) # 80206b40 <holding>
  while(__sync_lock_test_and_set(&lk->locked, 1) != 0)
    80206b8c:	4705                	li	a4,1
  if(holding(lk))
    80206b8e:	e115                	bnez	a0,80206bb2 <acquire+0x44>
  while(__sync_lock_test_and_set(&lk->locked, 1) != 0)
    80206b90:	87ba                	mv	a5,a4
    80206b92:	0cf4a7af          	amoswap.w.aq	a5,a5,(s1)
    80206b96:	2781                	sext.w	a5,a5
    80206b98:	ffe5                	bnez	a5,80206b90 <acquire+0x22>
  __sync_synchronize();
    80206b9a:	0ff0000f          	fence
  lk->cpu = mycpu();
    80206b9e:	00003097          	auipc	ra,0x3
    80206ba2:	f70080e7          	jalr	-144(ra) # 80209b0e <mycpu>
    80206ba6:	e888                	sd	a0,16(s1)
}
    80206ba8:	60e2                	ld	ra,24(sp)
    80206baa:	6442                	ld	s0,16(sp)
    80206bac:	64a2                	ld	s1,8(sp)
    80206bae:	6105                	addi	sp,sp,32
    80206bb0:	8082                	ret
    panic("acquire");
    80206bb2:	0000b517          	auipc	a0,0xb
    80206bb6:	b5e50513          	addi	a0,a0,-1186 # 80211710 <rodata_start+0x710>
    80206bba:	00000097          	auipc	ra,0x0
    80206bbe:	314080e7          	jalr	788(ra) # 80206ece <panic>

0000000080206bc2 <release>:
{
    80206bc2:	1101                	addi	sp,sp,-32
    80206bc4:	ec06                	sd	ra,24(sp)
    80206bc6:	e822                	sd	s0,16(sp)
    80206bc8:	e426                	sd	s1,8(sp)
    80206bca:	1000                	addi	s0,sp,32
    80206bcc:	84aa                	mv	s1,a0
  if(!holding(lk))
    80206bce:	00000097          	auipc	ra,0x0
    80206bd2:	f72080e7          	jalr	-142(ra) # 80206b40 <holding>
    80206bd6:	c115                	beqz	a0,80206bfa <release+0x38>
  lk->cpu = 0;
    80206bd8:	0004b823          	sd	zero,16(s1)
  __sync_synchronize();
    80206bdc:	0ff0000f          	fence
  __sync_lock_release(&lk->locked);
    80206be0:	0f50000f          	fence	iorw,ow
    80206be4:	0804a02f          	amoswap.w	zero,zero,(s1)
  pop_off();
    80206be8:	ffffa097          	auipc	ra,0xffffa
    80206bec:	466080e7          	jalr	1126(ra) # 8020104e <pop_off>
}
    80206bf0:	60e2                	ld	ra,24(sp)
    80206bf2:	6442                	ld	s0,16(sp)
    80206bf4:	64a2                	ld	s1,8(sp)
    80206bf6:	6105                	addi	sp,sp,32
    80206bf8:	8082                	ret
    panic("release");
    80206bfa:	0000b517          	auipc	a0,0xb
    80206bfe:	b1e50513          	addi	a0,a0,-1250 # 80211718 <rodata_start+0x718>
    80206c02:	00000097          	auipc	ra,0x0
    80206c06:	2cc080e7          	jalr	716(ra) # 80206ece <panic>

0000000080206c0a <initsleeplock>:

extern int fat32_init_flag;

void
initsleeplock(struct sleeplock *lk, char *name)
{
    80206c0a:	1101                	addi	sp,sp,-32
    80206c0c:	ec06                	sd	ra,24(sp)
    80206c0e:	e822                	sd	s0,16(sp)
    80206c10:	e426                	sd	s1,8(sp)
    80206c12:	e04a                	sd	s2,0(sp)
    80206c14:	1000                	addi	s0,sp,32
    80206c16:	84aa                	mv	s1,a0
    80206c18:	892e                	mv	s2,a1
  initlock(&lk->lk, "sleep lock");
    80206c1a:	0000b597          	auipc	a1,0xb
    80206c1e:	b0658593          	addi	a1,a1,-1274 # 80211720 <rodata_start+0x720>
    80206c22:	0521                	addi	a0,a0,8
    80206c24:	00000097          	auipc	ra,0x0
    80206c28:	f06080e7          	jalr	-250(ra) # 80206b2a <initlock>
  lk->name = name;
    80206c2c:	0324b023          	sd	s2,32(s1)
  lk->locked = 0;
    80206c30:	0004a023          	sw	zero,0(s1)
  lk->pid = 0;
    80206c34:	0204a423          	sw	zero,40(s1)
}
    80206c38:	60e2                	ld	ra,24(sp)
    80206c3a:	6442                	ld	s0,16(sp)
    80206c3c:	64a2                	ld	s1,8(sp)
    80206c3e:	6902                	ld	s2,0(sp)
    80206c40:	6105                	addi	sp,sp,32
    80206c42:	8082                	ret

0000000080206c44 <acquiresleep>:

void
acquiresleep(struct sleeplock *lk)
{
    80206c44:	1101                	addi	sp,sp,-32
    80206c46:	ec06                	sd	ra,24(sp)
    80206c48:	e822                	sd	s0,16(sp)
    80206c4a:	e426                	sd	s1,8(sp)
    80206c4c:	e04a                	sd	s2,0(sp)
    80206c4e:	1000                	addi	s0,sp,32
    80206c50:	84aa                	mv	s1,a0
  acquire(&lk->lk);
    80206c52:	00850913          	addi	s2,a0,8
    80206c56:	854a                	mv	a0,s2
    80206c58:	00000097          	auipc	ra,0x0
    80206c5c:	f16080e7          	jalr	-234(ra) # 80206b6e <acquire>
  while (lk->locked) {
    80206c60:	409c                	lw	a5,0(s1)
    80206c62:	cb89                	beqz	a5,80206c74 <acquiresleep+0x30>
    sleep(lk, &lk->lk);
    80206c64:	85ca                	mv	a1,s2
    80206c66:	8526                	mv	a0,s1
    80206c68:	ffffb097          	auipc	ra,0xffffb
    80206c6c:	f6e080e7          	jalr	-146(ra) # 80201bd6 <sleep>
  while (lk->locked) {
    80206c70:	409c                	lw	a5,0(s1)
    80206c72:	fbed                	bnez	a5,80206c64 <acquiresleep+0x20>
  }
  lk->locked = 1;
    80206c74:	4785                	li	a5,1
    80206c76:	c09c                	sw	a5,0(s1)
  //lk->pid = myproc()->pid;
  release(&lk->lk);
    80206c78:	854a                	mv	a0,s2
    80206c7a:	00000097          	auipc	ra,0x0
    80206c7e:	f48080e7          	jalr	-184(ra) # 80206bc2 <release>
}
    80206c82:	60e2                	ld	ra,24(sp)
    80206c84:	6442                	ld	s0,16(sp)
    80206c86:	64a2                	ld	s1,8(sp)
    80206c88:	6902                	ld	s2,0(sp)
    80206c8a:	6105                	addi	sp,sp,32
    80206c8c:	8082                	ret

0000000080206c8e <releasesleep>:

void
releasesleep(struct sleeplock *lk)
{
    80206c8e:	1101                	addi	sp,sp,-32
    80206c90:	ec06                	sd	ra,24(sp)
    80206c92:	e822                	sd	s0,16(sp)
    80206c94:	e426                	sd	s1,8(sp)
    80206c96:	e04a                	sd	s2,0(sp)
    80206c98:	1000                	addi	s0,sp,32
    80206c9a:	84aa                	mv	s1,a0
  acquire(&lk->lk);
    80206c9c:	00850913          	addi	s2,a0,8
    80206ca0:	854a                	mv	a0,s2
    80206ca2:	00000097          	auipc	ra,0x0
    80206ca6:	ecc080e7          	jalr	-308(ra) # 80206b6e <acquire>
  lk->locked = 0;
    80206caa:	0004a023          	sw	zero,0(s1)
  lk->pid = 0;
    80206cae:	0204a423          	sw	zero,40(s1)
  wakeup(lk);
    80206cb2:	8526                	mv	a0,s1
    80206cb4:	ffffb097          	auipc	ra,0xffffb
    80206cb8:	02c080e7          	jalr	44(ra) # 80201ce0 <wakeup>
  release(&lk->lk);
    80206cbc:	854a                	mv	a0,s2
    80206cbe:	00000097          	auipc	ra,0x0
    80206cc2:	f04080e7          	jalr	-252(ra) # 80206bc2 <release>
}
    80206cc6:	60e2                	ld	ra,24(sp)
    80206cc8:	6442                	ld	s0,16(sp)
    80206cca:	64a2                	ld	s1,8(sp)
    80206ccc:	6902                	ld	s2,0(sp)
    80206cce:	6105                	addi	sp,sp,32
    80206cd0:	8082                	ret

0000000080206cd2 <holdingsleep>:

int
holdingsleep(struct sleeplock *lk)
{
    80206cd2:	1101                	addi	sp,sp,-32
    80206cd4:	ec06                	sd	ra,24(sp)
    80206cd6:	e822                	sd	s0,16(sp)
    80206cd8:	e426                	sd	s1,8(sp)
    80206cda:	e04a                	sd	s2,0(sp)
    80206cdc:	1000                	addi	s0,sp,32
    80206cde:	84aa                	mv	s1,a0
  int r;
  
  acquire(&lk->lk);
    80206ce0:	00850913          	addi	s2,a0,8
    80206ce4:	854a                	mv	a0,s2
    80206ce6:	00000097          	auipc	ra,0x0
    80206cea:	e88080e7          	jalr	-376(ra) # 80206b6e <acquire>
  //r = lk->locked && (lk->pid == myproc()->pid);
  r = lk->locked && 1;
    80206cee:	4084                	lw	s1,0(s1)
    80206cf0:	009034b3          	snez	s1,s1
  release(&lk->lk);
    80206cf4:	854a                	mv	a0,s2
    80206cf6:	00000097          	auipc	ra,0x0
    80206cfa:	ecc080e7          	jalr	-308(ra) # 80206bc2 <release>
  return r;
}
    80206cfe:	8526                	mv	a0,s1
    80206d00:	60e2                	ld	ra,24(sp)
    80206d02:	6442                	ld	s0,16(sp)
    80206d04:	64a2                	ld	s1,8(sp)
    80206d06:	6902                	ld	s2,0(sp)
    80206d08:	6105                	addi	sp,sp,32
    80206d0a:	8082                	ret

0000000080206d0c <consputc>:
static struct {
  struct spinlock lock;
  int locking;
} pr;

void consputc(int c) {
    80206d0c:	1141                	addi	sp,sp,-16
    80206d0e:	e422                	sd	s0,8(sp)
    80206d10:	0800                	addi	s0,sp,16
  if(c == BACKSPACE){
    80206d12:	10000793          	li	a5,256
    80206d16:	00f50a63          	beq	a0,a5,80206d2a <consputc+0x1e>
    register uint64 a1 asm("a1") = arg1;
    80206d1a:	4581                	li	a1,0
    register uint64 a2 asm("a2") = arg2;
    80206d1c:	4601                	li	a2,0
    register uint64 a7 asm("a7") = which;
    80206d1e:	4885                	li	a7,1
    asm volatile("ecall"
    80206d20:	00000073          	ecall
    sbi_console_putchar(' ');
    sbi_console_putchar('\b');
  } else {
    sbi_console_putchar(c);
  }
}
    80206d24:	6422                	ld	s0,8(sp)
    80206d26:	0141                	addi	sp,sp,16
    80206d28:	8082                	ret
    register uint64 a0 asm("a0") = arg0;
    80206d2a:	4521                	li	a0,8
    register uint64 a1 asm("a1") = arg1;
    80206d2c:	4581                	li	a1,0
    register uint64 a2 asm("a2") = arg2;
    80206d2e:	4601                	li	a2,0
    register uint64 a7 asm("a7") = which;
    80206d30:	4885                	li	a7,1
    asm volatile("ecall"
    80206d32:	00000073          	ecall
    register uint64 a0 asm("a0") = arg0;
    80206d36:	02000513          	li	a0,32
    asm volatile("ecall"
    80206d3a:	00000073          	ecall
    register uint64 a0 asm("a0") = arg0;
    80206d3e:	4521                	li	a0,8
    asm volatile("ecall"
    80206d40:	00000073          	ecall
	return ret;
}

static inline void sbi_console_putchar(int c) {
    sbi_call(SBI_CONSOLE_PUTCHAR, c, 0, 0);
}
    80206d44:	b7c5                	j	80206d24 <consputc+0x18>

0000000080206d46 <printint>:
    }
}

static void
printint(int xx, int base, int sign)
{
    80206d46:	7179                	addi	sp,sp,-48
    80206d48:	f406                	sd	ra,40(sp)
    80206d4a:	f022                	sd	s0,32(sp)
    80206d4c:	ec26                	sd	s1,24(sp)
    80206d4e:	e84a                	sd	s2,16(sp)
    80206d50:	1800                	addi	s0,sp,48
  char buf[16];
  int i;
  uint x;

  if(sign && (sign = xx < 0))
    80206d52:	c219                	beqz	a2,80206d58 <printint+0x12>
    80206d54:	08054663          	bltz	a0,80206de0 <printint+0x9a>
    x = -xx;
  else
    x = xx;
    80206d58:	2501                	sext.w	a0,a0
    80206d5a:	4881                	li	a7,0
    80206d5c:	fd040693          	addi	a3,s0,-48

  i = 0;
    80206d60:	4701                	li	a4,0
  do {
    buf[i++] = digits[x % base];
    80206d62:	2581                	sext.w	a1,a1
    80206d64:	0000b617          	auipc	a2,0xb
    80206d68:	b6460613          	addi	a2,a2,-1180 # 802118c8 <digits>
    80206d6c:	883a                	mv	a6,a4
    80206d6e:	2705                	addiw	a4,a4,1
    80206d70:	02b577bb          	remuw	a5,a0,a1
    80206d74:	1782                	slli	a5,a5,0x20
    80206d76:	9381                	srli	a5,a5,0x20
    80206d78:	97b2                	add	a5,a5,a2
    80206d7a:	0007c783          	lbu	a5,0(a5)
    80206d7e:	00f68023          	sb	a5,0(a3) # 2000000 <_entry-0x7e200000>
  } while((x /= base) != 0);
    80206d82:	0005079b          	sext.w	a5,a0
    80206d86:	02b5553b          	divuw	a0,a0,a1
    80206d8a:	0685                	addi	a3,a3,1
    80206d8c:	feb7f0e3          	bgeu	a5,a1,80206d6c <printint+0x26>

  if(sign)
    80206d90:	00088b63          	beqz	a7,80206da6 <printint+0x60>
    buf[i++] = '-';
    80206d94:	fe040793          	addi	a5,s0,-32
    80206d98:	973e                	add	a4,a4,a5
    80206d9a:	02d00793          	li	a5,45
    80206d9e:	fef70823          	sb	a5,-16(a4) # 1fffff0 <_entry-0x7e200010>
    80206da2:	0028071b          	addiw	a4,a6,2

  while(--i >= 0)
    80206da6:	02e05763          	blez	a4,80206dd4 <printint+0x8e>
    80206daa:	fd040793          	addi	a5,s0,-48
    80206dae:	00e784b3          	add	s1,a5,a4
    80206db2:	fff78913          	addi	s2,a5,-1
    80206db6:	993a                	add	s2,s2,a4
    80206db8:	377d                	addiw	a4,a4,-1
    80206dba:	1702                	slli	a4,a4,0x20
    80206dbc:	9301                	srli	a4,a4,0x20
    80206dbe:	40e90933          	sub	s2,s2,a4
    consputc(buf[i]);
    80206dc2:	fff4c503          	lbu	a0,-1(s1)
    80206dc6:	00000097          	auipc	ra,0x0
    80206dca:	f46080e7          	jalr	-186(ra) # 80206d0c <consputc>
  while(--i >= 0)
    80206dce:	14fd                	addi	s1,s1,-1
    80206dd0:	ff2499e3          	bne	s1,s2,80206dc2 <printint+0x7c>
}
    80206dd4:	70a2                	ld	ra,40(sp)
    80206dd6:	7402                	ld	s0,32(sp)
    80206dd8:	64e2                	ld	s1,24(sp)
    80206dda:	6942                	ld	s2,16(sp)
    80206ddc:	6145                	addi	sp,sp,48
    80206dde:	8082                	ret
    x = -xx;
    80206de0:	40a0053b          	negw	a0,a0
  if(sign && (sign = xx < 0))
    80206de4:	4885                	li	a7,1
    x = -xx;
    80206de6:	bf9d                	j	80206d5c <printint+0x16>

0000000080206de8 <printptr>:


static void
printptr(uint64 x)
{
    80206de8:	7179                	addi	sp,sp,-48
    80206dea:	f406                	sd	ra,40(sp)
    80206dec:	f022                	sd	s0,32(sp)
    80206dee:	ec26                	sd	s1,24(sp)
    80206df0:	e84a                	sd	s2,16(sp)
    80206df2:	e44e                	sd	s3,8(sp)
    80206df4:	1800                	addi	s0,sp,48
    80206df6:	84aa                	mv	s1,a0
  int i;
  consputc('0');
    80206df8:	03000513          	li	a0,48
    80206dfc:	00000097          	auipc	ra,0x0
    80206e00:	f10080e7          	jalr	-240(ra) # 80206d0c <consputc>
  consputc('x');
    80206e04:	07800513          	li	a0,120
    80206e08:	00000097          	auipc	ra,0x0
    80206e0c:	f04080e7          	jalr	-252(ra) # 80206d0c <consputc>
    80206e10:	4941                	li	s2,16
  for (i = 0; i < (sizeof(uint64) * 2); i++, x <<= 4)
    consputc(digits[x >> (sizeof(uint64) * 8 - 4)]);
    80206e12:	0000b997          	auipc	s3,0xb
    80206e16:	ab698993          	addi	s3,s3,-1354 # 802118c8 <digits>
    80206e1a:	03c4d793          	srli	a5,s1,0x3c
    80206e1e:	97ce                	add	a5,a5,s3
    80206e20:	0007c503          	lbu	a0,0(a5)
    80206e24:	00000097          	auipc	ra,0x0
    80206e28:	ee8080e7          	jalr	-280(ra) # 80206d0c <consputc>
  for (i = 0; i < (sizeof(uint64) * 2); i++, x <<= 4)
    80206e2c:	0492                	slli	s1,s1,0x4
    80206e2e:	397d                	addiw	s2,s2,-1
    80206e30:	fe0915e3          	bnez	s2,80206e1a <printptr+0x32>
}
    80206e34:	70a2                	ld	ra,40(sp)
    80206e36:	7402                	ld	s0,32(sp)
    80206e38:	64e2                	ld	s1,24(sp)
    80206e3a:	6942                	ld	s2,16(sp)
    80206e3c:	69a2                	ld	s3,8(sp)
    80206e3e:	6145                	addi	sp,sp,48
    80206e40:	8082                	ret

0000000080206e42 <printstring>:
void printstring(const char* s) {
    80206e42:	1101                	addi	sp,sp,-32
    80206e44:	ec06                	sd	ra,24(sp)
    80206e46:	e822                	sd	s0,16(sp)
    80206e48:	e426                	sd	s1,8(sp)
    80206e4a:	1000                	addi	s0,sp,32
    80206e4c:	84aa                	mv	s1,a0
    while (*s)
    80206e4e:	00054503          	lbu	a0,0(a0)
    80206e52:	c909                	beqz	a0,80206e64 <printstring+0x22>
        consputc(*s++);
    80206e54:	0485                	addi	s1,s1,1
    80206e56:	00000097          	auipc	ra,0x0
    80206e5a:	eb6080e7          	jalr	-330(ra) # 80206d0c <consputc>
    while (*s)
    80206e5e:	0004c503          	lbu	a0,0(s1)
    80206e62:	f96d                	bnez	a0,80206e54 <printstring+0x12>
}
    80206e64:	60e2                	ld	ra,24(sp)
    80206e66:	6442                	ld	s0,16(sp)
    80206e68:	64a2                	ld	s1,8(sp)
    80206e6a:	6105                	addi	sp,sp,32
    80206e6c:	8082                	ret

0000000080206e6e <backtrace>:
  for(;;)
    ;
}

void backtrace()
{
    80206e6e:	7179                	addi	sp,sp,-48
    80206e70:	f406                	sd	ra,40(sp)
    80206e72:	f022                	sd	s0,32(sp)
    80206e74:	ec26                	sd	s1,24(sp)
    80206e76:	e84a                	sd	s2,16(sp)
    80206e78:	e44e                	sd	s3,8(sp)
    80206e7a:	1800                	addi	s0,sp,48
  asm volatile("mv %0, s0" : "=r" (x) );
    80206e7c:	8922                	mv	s2,s0
  uint64 *fp = (uint64 *)r_fp();
    80206e7e:	84ca                	mv	s1,s2
  uint64 *bottom = (uint64 *)PGROUNDUP((uint64)fp);
    80206e80:	6785                	lui	a5,0x1
    80206e82:	17fd                	addi	a5,a5,-1
    80206e84:	993e                	add	s2,s2,a5
    80206e86:	77fd                	lui	a5,0xfffff
    80206e88:	00f97933          	and	s2,s2,a5
  printf("backtrace:\n");
    80206e8c:	0000b517          	auipc	a0,0xb
    80206e90:	8a450513          	addi	a0,a0,-1884 # 80211730 <rodata_start+0x730>
    80206e94:	00000097          	auipc	ra,0x0
    80206e98:	084080e7          	jalr	132(ra) # 80206f18 <printf>
  while (fp < bottom) {
    80206e9c:	0324f263          	bgeu	s1,s2,80206ec0 <backtrace+0x52>
    uint64 ra = *(fp - 1);
    printf("%p\n", ra - 4);
    80206ea0:	0000b997          	auipc	s3,0xb
    80206ea4:	ea098993          	addi	s3,s3,-352 # 80211d40 <digits+0x478>
    80206ea8:	ff84b583          	ld	a1,-8(s1)
    80206eac:	15f1                	addi	a1,a1,-4
    80206eae:	854e                	mv	a0,s3
    80206eb0:	00000097          	auipc	ra,0x0
    80206eb4:	068080e7          	jalr	104(ra) # 80206f18 <printf>
    fp = (uint64 *)*(fp - 2);
    80206eb8:	ff04b483          	ld	s1,-16(s1)
  while (fp < bottom) {
    80206ebc:	ff24e6e3          	bltu	s1,s2,80206ea8 <backtrace+0x3a>
  }
}
    80206ec0:	70a2                	ld	ra,40(sp)
    80206ec2:	7402                	ld	s0,32(sp)
    80206ec4:	64e2                	ld	s1,24(sp)
    80206ec6:	6942                	ld	s2,16(sp)
    80206ec8:	69a2                	ld	s3,8(sp)
    80206eca:	6145                	addi	sp,sp,48
    80206ecc:	8082                	ret

0000000080206ece <panic>:
{
    80206ece:	1101                	addi	sp,sp,-32
    80206ed0:	ec06                	sd	ra,24(sp)
    80206ed2:	e822                	sd	s0,16(sp)
    80206ed4:	e426                	sd	s1,8(sp)
    80206ed6:	1000                	addi	s0,sp,32
    80206ed8:	84aa                	mv	s1,a0
  printf("panic: ");
    80206eda:	0000b517          	auipc	a0,0xb
    80206ede:	86650513          	addi	a0,a0,-1946 # 80211740 <rodata_start+0x740>
    80206ee2:	00000097          	auipc	ra,0x0
    80206ee6:	036080e7          	jalr	54(ra) # 80206f18 <printf>
  printf(s);
    80206eea:	8526                	mv	a0,s1
    80206eec:	00000097          	auipc	ra,0x0
    80206ef0:	02c080e7          	jalr	44(ra) # 80206f18 <printf>
  printf("\n");
    80206ef4:	0000b517          	auipc	a0,0xb
    80206ef8:	da450513          	addi	a0,a0,-604 # 80211c98 <digits+0x3d0>
    80206efc:	00000097          	auipc	ra,0x0
    80206f00:	01c080e7          	jalr	28(ra) # 80206f18 <printf>
  backtrace();
    80206f04:	00000097          	auipc	ra,0x0
    80206f08:	f6a080e7          	jalr	-150(ra) # 80206e6e <backtrace>
  panicked = 1; // freeze uart output from other CPUs
    80206f0c:	4785                	li	a5,1
    80206f0e:	00567717          	auipc	a4,0x567
    80206f12:	28f72123          	sw	a5,642(a4) # 8076e190 <panicked>
  for(;;)
    80206f16:	a001                	j	80206f16 <panic+0x48>

0000000080206f18 <printf>:
{
    80206f18:	7135                	addi	sp,sp,-160
    80206f1a:	ec86                	sd	ra,88(sp)
    80206f1c:	e8a2                	sd	s0,80(sp)
    80206f1e:	e4a6                	sd	s1,72(sp)
    80206f20:	e0ca                	sd	s2,64(sp)
    80206f22:	fc4e                	sd	s3,56(sp)
    80206f24:	f852                	sd	s4,48(sp)
    80206f26:	f456                	sd	s5,40(sp)
    80206f28:	f05a                	sd	s6,32(sp)
    80206f2a:	ec5e                	sd	s7,24(sp)
    80206f2c:	e862                	sd	s8,16(sp)
    80206f2e:	1080                	addi	s0,sp,96
    80206f30:	89aa                	mv	s3,a0
    80206f32:	e40c                	sd	a1,8(s0)
    80206f34:	e810                	sd	a2,16(s0)
    80206f36:	ec14                	sd	a3,24(s0)
    80206f38:	f018                	sd	a4,32(s0)
    80206f3a:	f41c                	sd	a5,40(s0)
    80206f3c:	03043823          	sd	a6,48(s0)
    80206f40:	03143c23          	sd	a7,56(s0)
  locking = pr.locking;
    80206f44:	00567b97          	auipc	s7,0x567
    80206f48:	244bab83          	lw	s7,580(s7) # 8076e188 <pr+0x18>
  if(locking)
    80206f4c:	020b9763          	bnez	s7,80206f7a <printf+0x62>
  if (fmt == 0)
    80206f50:	02098e63          	beqz	s3,80206f8c <printf+0x74>
  va_start(ap, fmt);
    80206f54:	00840793          	addi	a5,s0,8
    80206f58:	faf43423          	sd	a5,-88(s0)
  for(i = 0; (c = fmt[i] & 0xff) != 0; i++){
    80206f5c:	0009c503          	lbu	a0,0(s3)
    80206f60:	14050863          	beqz	a0,802070b0 <printf+0x198>
    80206f64:	4481                	li	s1,0
    if(c != '%'){
    80206f66:	02500a13          	li	s4,37
    switch(c){
    80206f6a:	4ad5                	li	s5,21
    80206f6c:	0000a917          	auipc	s2,0xa
    80206f70:	7fc90913          	addi	s2,s2,2044 # 80211768 <rodata_start+0x768>
      for(; *s; s++)
    80206f74:	02800c13          	li	s8,40
    80206f78:	a82d                	j	80206fb2 <printf+0x9a>
    acquire(&pr.lock);
    80206f7a:	00567517          	auipc	a0,0x567
    80206f7e:	1f650513          	addi	a0,a0,502 # 8076e170 <pr>
    80206f82:	00000097          	auipc	ra,0x0
    80206f86:	bec080e7          	jalr	-1044(ra) # 80206b6e <acquire>
    80206f8a:	b7d9                	j	80206f50 <printf+0x38>
    panic("null fmt");
    80206f8c:	0000a517          	auipc	a0,0xa
    80206f90:	7c450513          	addi	a0,a0,1988 # 80211750 <rodata_start+0x750>
    80206f94:	00000097          	auipc	ra,0x0
    80206f98:	f3a080e7          	jalr	-198(ra) # 80206ece <panic>
      consputc(c);
    80206f9c:	00000097          	auipc	ra,0x0
    80206fa0:	d70080e7          	jalr	-656(ra) # 80206d0c <consputc>
  for(i = 0; (c = fmt[i] & 0xff) != 0; i++){
    80206fa4:	2485                	addiw	s1,s1,1
    80206fa6:	009987b3          	add	a5,s3,s1
    80206faa:	0007c503          	lbu	a0,0(a5) # fffffffffffff000 <kernel_end+0xffffffff7f890000>
    80206fae:	10050163          	beqz	a0,802070b0 <printf+0x198>
    if(c != '%'){
    80206fb2:	ff4515e3          	bne	a0,s4,80206f9c <printf+0x84>
    c = fmt[++i] & 0xff;
    80206fb6:	2485                	addiw	s1,s1,1
    80206fb8:	009987b3          	add	a5,s3,s1
    80206fbc:	0007c783          	lbu	a5,0(a5)
    80206fc0:	00078b1b          	sext.w	s6,a5
    if(c == 0)
    80206fc4:	c7f5                	beqz	a5,802070b0 <printf+0x198>
    switch(c){
    80206fc6:	0d478463          	beq	a5,s4,8020708e <printf+0x176>
    80206fca:	f9d7871b          	addiw	a4,a5,-99
    80206fce:	0ff77713          	andi	a4,a4,255
    80206fd2:	0ceae463          	bltu	s5,a4,8020709a <printf+0x182>
    80206fd6:	f9d7879b          	addiw	a5,a5,-99
    80206fda:	0ff7f713          	andi	a4,a5,255
    80206fde:	0aeaee63          	bltu	s5,a4,8020709a <printf+0x182>
    80206fe2:	00271793          	slli	a5,a4,0x2
    80206fe6:	97ca                	add	a5,a5,s2
    80206fe8:	439c                	lw	a5,0(a5)
    80206fea:	97ca                	add	a5,a5,s2
    80206fec:	8782                	jr	a5
      consputc(va_arg(ap, int));
    80206fee:	fa843783          	ld	a5,-88(s0)
    80206ff2:	00878713          	addi	a4,a5,8
    80206ff6:	fae43423          	sd	a4,-88(s0)
    80206ffa:	4388                	lw	a0,0(a5)
    80206ffc:	00000097          	auipc	ra,0x0
    80207000:	d10080e7          	jalr	-752(ra) # 80206d0c <consputc>
      break;
    80207004:	b745                	j	80206fa4 <printf+0x8c>
      printint(va_arg(ap, int), 10, 1);
    80207006:	fa843783          	ld	a5,-88(s0)
    8020700a:	00878713          	addi	a4,a5,8
    8020700e:	fae43423          	sd	a4,-88(s0)
    80207012:	4605                	li	a2,1
    80207014:	45a9                	li	a1,10
    80207016:	4388                	lw	a0,0(a5)
    80207018:	00000097          	auipc	ra,0x0
    8020701c:	d2e080e7          	jalr	-722(ra) # 80206d46 <printint>
      break;
    80207020:	b751                	j	80206fa4 <printf+0x8c>
      printint(va_arg(ap, int), 16, 1);
    80207022:	fa843783          	ld	a5,-88(s0)
    80207026:	00878713          	addi	a4,a5,8
    8020702a:	fae43423          	sd	a4,-88(s0)
    8020702e:	4605                	li	a2,1
    80207030:	45c1                	li	a1,16
    80207032:	4388                	lw	a0,0(a5)
    80207034:	00000097          	auipc	ra,0x0
    80207038:	d12080e7          	jalr	-750(ra) # 80206d46 <printint>
      break;
    8020703c:	b7a5                	j	80206fa4 <printf+0x8c>
      printptr(va_arg(ap, uint64));
    8020703e:	fa843783          	ld	a5,-88(s0)
    80207042:	00878713          	addi	a4,a5,8
    80207046:	fae43423          	sd	a4,-88(s0)
    8020704a:	6388                	ld	a0,0(a5)
    8020704c:	00000097          	auipc	ra,0x0
    80207050:	d9c080e7          	jalr	-612(ra) # 80206de8 <printptr>
      break;
    80207054:	bf81                	j	80206fa4 <printf+0x8c>
      if((s = va_arg(ap, char*)) == 0)
    80207056:	fa843783          	ld	a5,-88(s0)
    8020705a:	00878713          	addi	a4,a5,8
    8020705e:	fae43423          	sd	a4,-88(s0)
    80207062:	0007bb03          	ld	s6,0(a5)
    80207066:	000b0e63          	beqz	s6,80207082 <printf+0x16a>
      for(; *s; s++)
    8020706a:	000b4503          	lbu	a0,0(s6) # 10000 <_entry-0x801f0000>
    8020706e:	d91d                	beqz	a0,80206fa4 <printf+0x8c>
        consputc(*s);
    80207070:	00000097          	auipc	ra,0x0
    80207074:	c9c080e7          	jalr	-868(ra) # 80206d0c <consputc>
      for(; *s; s++)
    80207078:	0b05                	addi	s6,s6,1
    8020707a:	000b4503          	lbu	a0,0(s6)
    8020707e:	f96d                	bnez	a0,80207070 <printf+0x158>
    80207080:	b715                	j	80206fa4 <printf+0x8c>
        s = "(null)";
    80207082:	0000ab17          	auipc	s6,0xa
    80207086:	6c6b0b13          	addi	s6,s6,1734 # 80211748 <rodata_start+0x748>
      for(; *s; s++)
    8020708a:	8562                	mv	a0,s8
    8020708c:	b7d5                	j	80207070 <printf+0x158>
      consputc('%');
    8020708e:	8552                	mv	a0,s4
    80207090:	00000097          	auipc	ra,0x0
    80207094:	c7c080e7          	jalr	-900(ra) # 80206d0c <consputc>
      break;
    80207098:	b731                	j	80206fa4 <printf+0x8c>
      consputc('%');
    8020709a:	8552                	mv	a0,s4
    8020709c:	00000097          	auipc	ra,0x0
    802070a0:	c70080e7          	jalr	-912(ra) # 80206d0c <consputc>
      consputc(c);
    802070a4:	855a                	mv	a0,s6
    802070a6:	00000097          	auipc	ra,0x0
    802070aa:	c66080e7          	jalr	-922(ra) # 80206d0c <consputc>
      break;
    802070ae:	bddd                	j	80206fa4 <printf+0x8c>
  if(locking)
    802070b0:	000b9e63          	bnez	s7,802070cc <printf+0x1b4>
}
    802070b4:	60e6                	ld	ra,88(sp)
    802070b6:	6446                	ld	s0,80(sp)
    802070b8:	64a6                	ld	s1,72(sp)
    802070ba:	6906                	ld	s2,64(sp)
    802070bc:	79e2                	ld	s3,56(sp)
    802070be:	7a42                	ld	s4,48(sp)
    802070c0:	7aa2                	ld	s5,40(sp)
    802070c2:	7b02                	ld	s6,32(sp)
    802070c4:	6be2                	ld	s7,24(sp)
    802070c6:	6c42                	ld	s8,16(sp)
    802070c8:	610d                	addi	sp,sp,160
    802070ca:	8082                	ret
    release(&pr.lock);
    802070cc:	00567517          	auipc	a0,0x567
    802070d0:	0a450513          	addi	a0,a0,164 # 8076e170 <pr>
    802070d4:	00000097          	auipc	ra,0x0
    802070d8:	aee080e7          	jalr	-1298(ra) # 80206bc2 <release>
}
    802070dc:	bfe1                	j	802070b4 <printf+0x19c>

00000000802070de <__debug_info>:

void
__debug_info(char *fmt, ...){
    802070de:	7135                	addi	sp,sp,-160
    802070e0:	ec86                	sd	ra,88(sp)
    802070e2:	e8a2                	sd	s0,80(sp)
    802070e4:	e4a6                	sd	s1,72(sp)
    802070e6:	e0ca                	sd	s2,64(sp)
    802070e8:	fc4e                	sd	s3,56(sp)
    802070ea:	f852                	sd	s4,48(sp)
    802070ec:	f456                	sd	s5,40(sp)
    802070ee:	f05a                	sd	s6,32(sp)
    802070f0:	ec5e                	sd	s7,24(sp)
    802070f2:	e862                	sd	s8,16(sp)
    802070f4:	1080                	addi	s0,sp,96
    802070f6:	89aa                	mv	s3,a0
    802070f8:	e40c                	sd	a1,8(s0)
    802070fa:	e810                	sd	a2,16(s0)
    802070fc:	ec14                	sd	a3,24(s0)
    802070fe:	f018                	sd	a4,32(s0)
    80207100:	f41c                	sd	a5,40(s0)
    80207102:	03043823          	sd	a6,48(s0)
    80207106:	03143c23          	sd	a7,56(s0)
#ifdef DEBUG
  va_list ap;
  int i, c;
  int locking;
  char *s;
  locking = pr.locking;
    8020710a:	00567b97          	auipc	s7,0x567
    8020710e:	07ebab83          	lw	s7,126(s7) # 8076e188 <pr+0x18>
  if(locking)
    80207112:	020b9763          	bnez	s7,80207140 <__debug_info+0x62>
    acquire(&pr.lock);
  
  if (fmt == 0)
    80207116:	02098e63          	beqz	s3,80207152 <__debug_info+0x74>
    panic("null fmt");

  va_start(ap, fmt);
    8020711a:	00840793          	addi	a5,s0,8
    8020711e:	faf43423          	sd	a5,-88(s0)
  for(i = 0; (c = fmt[i] & 0xff) != 0; i++){
    80207122:	0009c503          	lbu	a0,0(s3)
    80207126:	14050863          	beqz	a0,80207276 <__debug_info+0x198>
    8020712a:	4481                	li	s1,0
    if(c != '%'){
    8020712c:	02500a13          	li	s4,37
      continue;
    }
    c = fmt[++i] & 0xff;
    if(c == 0)
      break;
    switch(c){
    80207130:	4ad5                	li	s5,21
    80207132:	0000a917          	auipc	s2,0xa
    80207136:	68e90913          	addi	s2,s2,1678 # 802117c0 <rodata_start+0x7c0>
      printptr(va_arg(ap, uint64));
      break;
    case 's':
      if((s = va_arg(ap, char*)) == 0)
        s = "(null)";
      for(; *s; s++)
    8020713a:	02800c13          	li	s8,40
    8020713e:	a82d                	j	80207178 <__debug_info+0x9a>
    acquire(&pr.lock);
    80207140:	00567517          	auipc	a0,0x567
    80207144:	03050513          	addi	a0,a0,48 # 8076e170 <pr>
    80207148:	00000097          	auipc	ra,0x0
    8020714c:	a26080e7          	jalr	-1498(ra) # 80206b6e <acquire>
    80207150:	b7d9                	j	80207116 <__debug_info+0x38>
    panic("null fmt");
    80207152:	0000a517          	auipc	a0,0xa
    80207156:	5fe50513          	addi	a0,a0,1534 # 80211750 <rodata_start+0x750>
    8020715a:	00000097          	auipc	ra,0x0
    8020715e:	d74080e7          	jalr	-652(ra) # 80206ece <panic>
      consputc(c);
    80207162:	00000097          	auipc	ra,0x0
    80207166:	baa080e7          	jalr	-1110(ra) # 80206d0c <consputc>
  for(i = 0; (c = fmt[i] & 0xff) != 0; i++){
    8020716a:	2485                	addiw	s1,s1,1
    8020716c:	009987b3          	add	a5,s3,s1
    80207170:	0007c503          	lbu	a0,0(a5)
    80207174:	10050163          	beqz	a0,80207276 <__debug_info+0x198>
    if(c != '%'){
    80207178:	ff4515e3          	bne	a0,s4,80207162 <__debug_info+0x84>
    c = fmt[++i] & 0xff;
    8020717c:	2485                	addiw	s1,s1,1
    8020717e:	009987b3          	add	a5,s3,s1
    80207182:	0007c783          	lbu	a5,0(a5)
    80207186:	00078b1b          	sext.w	s6,a5
    if(c == 0)
    8020718a:	c7f5                	beqz	a5,80207276 <__debug_info+0x198>
    switch(c){
    8020718c:	0d478463          	beq	a5,s4,80207254 <__debug_info+0x176>
    80207190:	f9d7871b          	addiw	a4,a5,-99
    80207194:	0ff77713          	andi	a4,a4,255
    80207198:	0ceae463          	bltu	s5,a4,80207260 <__debug_info+0x182>
    8020719c:	f9d7879b          	addiw	a5,a5,-99
    802071a0:	0ff7f713          	andi	a4,a5,255
    802071a4:	0aeaee63          	bltu	s5,a4,80207260 <__debug_info+0x182>
    802071a8:	00271793          	slli	a5,a4,0x2
    802071ac:	97ca                	add	a5,a5,s2
    802071ae:	439c                	lw	a5,0(a5)
    802071b0:	97ca                	add	a5,a5,s2
    802071b2:	8782                	jr	a5
      consputc(va_arg(ap, int));
    802071b4:	fa843783          	ld	a5,-88(s0)
    802071b8:	00878713          	addi	a4,a5,8
    802071bc:	fae43423          	sd	a4,-88(s0)
    802071c0:	4388                	lw	a0,0(a5)
    802071c2:	00000097          	auipc	ra,0x0
    802071c6:	b4a080e7          	jalr	-1206(ra) # 80206d0c <consputc>
      break;
    802071ca:	b745                	j	8020716a <__debug_info+0x8c>
      printint(va_arg(ap, int), 10, 1);
    802071cc:	fa843783          	ld	a5,-88(s0)
    802071d0:	00878713          	addi	a4,a5,8
    802071d4:	fae43423          	sd	a4,-88(s0)
    802071d8:	4605                	li	a2,1
    802071da:	45a9                	li	a1,10
    802071dc:	4388                	lw	a0,0(a5)
    802071de:	00000097          	auipc	ra,0x0
    802071e2:	b68080e7          	jalr	-1176(ra) # 80206d46 <printint>
      break;
    802071e6:	b751                	j	8020716a <__debug_info+0x8c>
      printint(va_arg(ap, int), 16, 1);
    802071e8:	fa843783          	ld	a5,-88(s0)
    802071ec:	00878713          	addi	a4,a5,8
    802071f0:	fae43423          	sd	a4,-88(s0)
    802071f4:	4605                	li	a2,1
    802071f6:	45c1                	li	a1,16
    802071f8:	4388                	lw	a0,0(a5)
    802071fa:	00000097          	auipc	ra,0x0
    802071fe:	b4c080e7          	jalr	-1204(ra) # 80206d46 <printint>
      break;
    80207202:	b7a5                	j	8020716a <__debug_info+0x8c>
      printptr(va_arg(ap, uint64));
    80207204:	fa843783          	ld	a5,-88(s0)
    80207208:	00878713          	addi	a4,a5,8
    8020720c:	fae43423          	sd	a4,-88(s0)
    80207210:	6388                	ld	a0,0(a5)
    80207212:	00000097          	auipc	ra,0x0
    80207216:	bd6080e7          	jalr	-1066(ra) # 80206de8 <printptr>
      break;
    8020721a:	bf81                	j	8020716a <__debug_info+0x8c>
      if((s = va_arg(ap, char*)) == 0)
    8020721c:	fa843783          	ld	a5,-88(s0)
    80207220:	00878713          	addi	a4,a5,8
    80207224:	fae43423          	sd	a4,-88(s0)
    80207228:	0007bb03          	ld	s6,0(a5)
    8020722c:	000b0e63          	beqz	s6,80207248 <__debug_info+0x16a>
      for(; *s; s++)
    80207230:	000b4503          	lbu	a0,0(s6)
    80207234:	d91d                	beqz	a0,8020716a <__debug_info+0x8c>
        consputc(*s);
    80207236:	00000097          	auipc	ra,0x0
    8020723a:	ad6080e7          	jalr	-1322(ra) # 80206d0c <consputc>
      for(; *s; s++)
    8020723e:	0b05                	addi	s6,s6,1
    80207240:	000b4503          	lbu	a0,0(s6)
    80207244:	f96d                	bnez	a0,80207236 <__debug_info+0x158>
    80207246:	b715                	j	8020716a <__debug_info+0x8c>
        s = "(null)";
    80207248:	0000ab17          	auipc	s6,0xa
    8020724c:	500b0b13          	addi	s6,s6,1280 # 80211748 <rodata_start+0x748>
      for(; *s; s++)
    80207250:	8562                	mv	a0,s8
    80207252:	b7d5                	j	80207236 <__debug_info+0x158>
      break;
    case '%':
      consputc('%');
    80207254:	8552                	mv	a0,s4
    80207256:	00000097          	auipc	ra,0x0
    8020725a:	ab6080e7          	jalr	-1354(ra) # 80206d0c <consputc>
      break;
    8020725e:	b731                	j	8020716a <__debug_info+0x8c>
    default:
      // Print unknown % sequence to draw attention.
      consputc('%');
    80207260:	8552                	mv	a0,s4
    80207262:	00000097          	auipc	ra,0x0
    80207266:	aaa080e7          	jalr	-1366(ra) # 80206d0c <consputc>
      consputc(c);
    8020726a:	855a                	mv	a0,s6
    8020726c:	00000097          	auipc	ra,0x0
    80207270:	aa0080e7          	jalr	-1376(ra) # 80206d0c <consputc>
      break;
    80207274:	bddd                	j	8020716a <__debug_info+0x8c>
    }
    
  }
  if(locking)
    80207276:	000b9e63          	bnez	s7,80207292 <__debug_info+0x1b4>
    release(&pr.lock);
#endif    
}
    8020727a:	60e6                	ld	ra,88(sp)
    8020727c:	6446                	ld	s0,80(sp)
    8020727e:	64a6                	ld	s1,72(sp)
    80207280:	6906                	ld	s2,64(sp)
    80207282:	79e2                	ld	s3,56(sp)
    80207284:	7a42                	ld	s4,48(sp)
    80207286:	7aa2                	ld	s5,40(sp)
    80207288:	7b02                	ld	s6,32(sp)
    8020728a:	6be2                	ld	s7,24(sp)
    8020728c:	6c42                	ld	s8,16(sp)
    8020728e:	610d                	addi	sp,sp,160
    80207290:	8082                	ret
    release(&pr.lock);
    80207292:	00567517          	auipc	a0,0x567
    80207296:	ede50513          	addi	a0,a0,-290 # 8076e170 <pr>
    8020729a:	00000097          	auipc	ra,0x0
    8020729e:	928080e7          	jalr	-1752(ra) # 80206bc2 <release>
}
    802072a2:	bfe1                	j	8020727a <__debug_info+0x19c>

00000000802072a4 <__debug_warn>:

void
__debug_warn(char *fmt, ...){
    802072a4:	7135                	addi	sp,sp,-160
    802072a6:	ec86                	sd	ra,88(sp)
    802072a8:	e8a2                	sd	s0,80(sp)
    802072aa:	e4a6                	sd	s1,72(sp)
    802072ac:	e0ca                	sd	s2,64(sp)
    802072ae:	fc4e                	sd	s3,56(sp)
    802072b0:	f852                	sd	s4,48(sp)
    802072b2:	f456                	sd	s5,40(sp)
    802072b4:	f05a                	sd	s6,32(sp)
    802072b6:	ec5e                	sd	s7,24(sp)
    802072b8:	e862                	sd	s8,16(sp)
    802072ba:	1080                	addi	s0,sp,96
    802072bc:	89aa                	mv	s3,a0
    802072be:	e40c                	sd	a1,8(s0)
    802072c0:	e810                	sd	a2,16(s0)
    802072c2:	ec14                	sd	a3,24(s0)
    802072c4:	f018                	sd	a4,32(s0)
    802072c6:	f41c                	sd	a5,40(s0)
    802072c8:	03043823          	sd	a6,48(s0)
    802072cc:	03143c23          	sd	a7,56(s0)
#ifdef WARNING
  va_list ap;
  int i, c;
  int locking;
  char *s;
  locking = pr.locking;
    802072d0:	00567b97          	auipc	s7,0x567
    802072d4:	eb8bab83          	lw	s7,-328(s7) # 8076e188 <pr+0x18>
  if(locking)
    802072d8:	020b9f63          	bnez	s7,80207316 <__debug_warn+0x72>
    acquire(&pr.lock);
  
  if (fmt == 0)
    802072dc:	04098663          	beqz	s3,80207328 <__debug_warn+0x84>
    panic("null fmt");
  printstring(warningstr);
    802072e0:	0050f517          	auipc	a0,0x50f
    802072e4:	f3050513          	addi	a0,a0,-208 # 80716210 <warningstr>
    802072e8:	00000097          	auipc	ra,0x0
    802072ec:	b5a080e7          	jalr	-1190(ra) # 80206e42 <printstring>
  va_start(ap, fmt);
    802072f0:	00840793          	addi	a5,s0,8
    802072f4:	faf43423          	sd	a5,-88(s0)
  for(i = 0; (c = fmt[i] & 0xff) != 0; i++){
    802072f8:	0009c503          	lbu	a0,0(s3)
    802072fc:	14050863          	beqz	a0,8020744c <__debug_warn+0x1a8>
    80207300:	4481                	li	s1,0
    if(c != '%'){
    80207302:	02500a13          	li	s4,37
      continue;
    }
    c = fmt[++i] & 0xff;
    if(c == 0)
      break;
    switch(c){
    80207306:	4ad5                	li	s5,21
    80207308:	0000a917          	auipc	s2,0xa
    8020730c:	51090913          	addi	s2,s2,1296 # 80211818 <rodata_start+0x818>
      printptr(va_arg(ap, uint64));
      break;
    case 's':
      if((s = va_arg(ap, char*)) == 0)
        s = "(null)";
      for(; *s; s++)
    80207310:	02800c13          	li	s8,40
    80207314:	a82d                	j	8020734e <__debug_warn+0xaa>
    acquire(&pr.lock);
    80207316:	00567517          	auipc	a0,0x567
    8020731a:	e5a50513          	addi	a0,a0,-422 # 8076e170 <pr>
    8020731e:	00000097          	auipc	ra,0x0
    80207322:	850080e7          	jalr	-1968(ra) # 80206b6e <acquire>
    80207326:	bf5d                	j	802072dc <__debug_warn+0x38>
    panic("null fmt");
    80207328:	0000a517          	auipc	a0,0xa
    8020732c:	42850513          	addi	a0,a0,1064 # 80211750 <rodata_start+0x750>
    80207330:	00000097          	auipc	ra,0x0
    80207334:	b9e080e7          	jalr	-1122(ra) # 80206ece <panic>
      consputc(c);
    80207338:	00000097          	auipc	ra,0x0
    8020733c:	9d4080e7          	jalr	-1580(ra) # 80206d0c <consputc>
  for(i = 0; (c = fmt[i] & 0xff) != 0; i++){
    80207340:	2485                	addiw	s1,s1,1
    80207342:	009987b3          	add	a5,s3,s1
    80207346:	0007c503          	lbu	a0,0(a5)
    8020734a:	10050163          	beqz	a0,8020744c <__debug_warn+0x1a8>
    if(c != '%'){
    8020734e:	ff4515e3          	bne	a0,s4,80207338 <__debug_warn+0x94>
    c = fmt[++i] & 0xff;
    80207352:	2485                	addiw	s1,s1,1
    80207354:	009987b3          	add	a5,s3,s1
    80207358:	0007c783          	lbu	a5,0(a5)
    8020735c:	00078b1b          	sext.w	s6,a5
    if(c == 0)
    80207360:	c7f5                	beqz	a5,8020744c <__debug_warn+0x1a8>
    switch(c){
    80207362:	0d478463          	beq	a5,s4,8020742a <__debug_warn+0x186>
    80207366:	f9d7871b          	addiw	a4,a5,-99
    8020736a:	0ff77713          	andi	a4,a4,255
    8020736e:	0ceae463          	bltu	s5,a4,80207436 <__debug_warn+0x192>
    80207372:	f9d7879b          	addiw	a5,a5,-99
    80207376:	0ff7f713          	andi	a4,a5,255
    8020737a:	0aeaee63          	bltu	s5,a4,80207436 <__debug_warn+0x192>
    8020737e:	00271793          	slli	a5,a4,0x2
    80207382:	97ca                	add	a5,a5,s2
    80207384:	439c                	lw	a5,0(a5)
    80207386:	97ca                	add	a5,a5,s2
    80207388:	8782                	jr	a5
      consputc(va_arg(ap, int));
    8020738a:	fa843783          	ld	a5,-88(s0)
    8020738e:	00878713          	addi	a4,a5,8
    80207392:	fae43423          	sd	a4,-88(s0)
    80207396:	4388                	lw	a0,0(a5)
    80207398:	00000097          	auipc	ra,0x0
    8020739c:	974080e7          	jalr	-1676(ra) # 80206d0c <consputc>
      break;
    802073a0:	b745                	j	80207340 <__debug_warn+0x9c>
      printint(va_arg(ap, int), 10, 1);
    802073a2:	fa843783          	ld	a5,-88(s0)
    802073a6:	00878713          	addi	a4,a5,8
    802073aa:	fae43423          	sd	a4,-88(s0)
    802073ae:	4605                	li	a2,1
    802073b0:	45a9                	li	a1,10
    802073b2:	4388                	lw	a0,0(a5)
    802073b4:	00000097          	auipc	ra,0x0
    802073b8:	992080e7          	jalr	-1646(ra) # 80206d46 <printint>
      break;
    802073bc:	b751                	j	80207340 <__debug_warn+0x9c>
      printint(va_arg(ap, int), 16, 1);
    802073be:	fa843783          	ld	a5,-88(s0)
    802073c2:	00878713          	addi	a4,a5,8
    802073c6:	fae43423          	sd	a4,-88(s0)
    802073ca:	4605                	li	a2,1
    802073cc:	45c1                	li	a1,16
    802073ce:	4388                	lw	a0,0(a5)
    802073d0:	00000097          	auipc	ra,0x0
    802073d4:	976080e7          	jalr	-1674(ra) # 80206d46 <printint>
      break;
    802073d8:	b7a5                	j	80207340 <__debug_warn+0x9c>
      printptr(va_arg(ap, uint64));
    802073da:	fa843783          	ld	a5,-88(s0)
    802073de:	00878713          	addi	a4,a5,8
    802073e2:	fae43423          	sd	a4,-88(s0)
    802073e6:	6388                	ld	a0,0(a5)
    802073e8:	00000097          	auipc	ra,0x0
    802073ec:	a00080e7          	jalr	-1536(ra) # 80206de8 <printptr>
      break;
    802073f0:	bf81                	j	80207340 <__debug_warn+0x9c>
      if((s = va_arg(ap, char*)) == 0)
    802073f2:	fa843783          	ld	a5,-88(s0)
    802073f6:	00878713          	addi	a4,a5,8
    802073fa:	fae43423          	sd	a4,-88(s0)
    802073fe:	0007bb03          	ld	s6,0(a5)
    80207402:	000b0e63          	beqz	s6,8020741e <__debug_warn+0x17a>
      for(; *s; s++)
    80207406:	000b4503          	lbu	a0,0(s6)
    8020740a:	d91d                	beqz	a0,80207340 <__debug_warn+0x9c>
        consputc(*s);
    8020740c:	00000097          	auipc	ra,0x0
    80207410:	900080e7          	jalr	-1792(ra) # 80206d0c <consputc>
      for(; *s; s++)
    80207414:	0b05                	addi	s6,s6,1
    80207416:	000b4503          	lbu	a0,0(s6)
    8020741a:	f96d                	bnez	a0,8020740c <__debug_warn+0x168>
    8020741c:	b715                	j	80207340 <__debug_warn+0x9c>
        s = "(null)";
    8020741e:	0000ab17          	auipc	s6,0xa
    80207422:	32ab0b13          	addi	s6,s6,810 # 80211748 <rodata_start+0x748>
      for(; *s; s++)
    80207426:	8562                	mv	a0,s8
    80207428:	b7d5                	j	8020740c <__debug_warn+0x168>
      break;
    case '%':
      consputc('%');
    8020742a:	8552                	mv	a0,s4
    8020742c:	00000097          	auipc	ra,0x0
    80207430:	8e0080e7          	jalr	-1824(ra) # 80206d0c <consputc>
      break;
    80207434:	b731                	j	80207340 <__debug_warn+0x9c>
    default:
      // Print unknown % sequence to draw attention.
      consputc('%');
    80207436:	8552                	mv	a0,s4
    80207438:	00000097          	auipc	ra,0x0
    8020743c:	8d4080e7          	jalr	-1836(ra) # 80206d0c <consputc>
      consputc(c);
    80207440:	855a                	mv	a0,s6
    80207442:	00000097          	auipc	ra,0x0
    80207446:	8ca080e7          	jalr	-1846(ra) # 80206d0c <consputc>
      break;
    8020744a:	bddd                	j	80207340 <__debug_warn+0x9c>
    }
    
  }
  if(locking)
    8020744c:	000b9e63          	bnez	s7,80207468 <__debug_warn+0x1c4>
    release(&pr.lock);
#endif
}
    80207450:	60e6                	ld	ra,88(sp)
    80207452:	6446                	ld	s0,80(sp)
    80207454:	64a6                	ld	s1,72(sp)
    80207456:	6906                	ld	s2,64(sp)
    80207458:	79e2                	ld	s3,56(sp)
    8020745a:	7a42                	ld	s4,48(sp)
    8020745c:	7aa2                	ld	s5,40(sp)
    8020745e:	7b02                	ld	s6,32(sp)
    80207460:	6be2                	ld	s7,24(sp)
    80207462:	6c42                	ld	s8,16(sp)
    80207464:	610d                	addi	sp,sp,160
    80207466:	8082                	ret
    release(&pr.lock);
    80207468:	00567517          	auipc	a0,0x567
    8020746c:	d0850513          	addi	a0,a0,-760 # 8076e170 <pr>
    80207470:	fffff097          	auipc	ra,0xfffff
    80207474:	752080e7          	jalr	1874(ra) # 80206bc2 <release>
}
    80207478:	bfe1                	j	80207450 <__debug_warn+0x1ac>

000000008020747a <__debug_error>:

void
__debug_error(char *fmt, ...){
    8020747a:	7135                	addi	sp,sp,-160
    8020747c:	ec86                	sd	ra,88(sp)
    8020747e:	e8a2                	sd	s0,80(sp)
    80207480:	e4a6                	sd	s1,72(sp)
    80207482:	e0ca                	sd	s2,64(sp)
    80207484:	fc4e                	sd	s3,56(sp)
    80207486:	f852                	sd	s4,48(sp)
    80207488:	f456                	sd	s5,40(sp)
    8020748a:	f05a                	sd	s6,32(sp)
    8020748c:	ec5e                	sd	s7,24(sp)
    8020748e:	e862                	sd	s8,16(sp)
    80207490:	1080                	addi	s0,sp,96
    80207492:	8a2a                	mv	s4,a0
    80207494:	e40c                	sd	a1,8(s0)
    80207496:	e810                	sd	a2,16(s0)
    80207498:	ec14                	sd	a3,24(s0)
    8020749a:	f018                	sd	a4,32(s0)
    8020749c:	f41c                	sd	a5,40(s0)
    8020749e:	03043823          	sd	a6,48(s0)
    802074a2:	03143c23          	sd	a7,56(s0)
#ifdef ERROR
  va_list ap;
  int i, c;
  int locking;
  char *s;
  locking = pr.locking;
    802074a6:	00567b17          	auipc	s6,0x567
    802074aa:	ce2b2b03          	lw	s6,-798(s6) # 8076e188 <pr+0x18>
  if(locking)
    802074ae:	020b1f63          	bnez	s6,802074ec <__debug_error+0x72>
    acquire(&pr.lock);
  
  if (fmt == 0)
    802074b2:	040a0663          	beqz	s4,802074fe <__debug_error+0x84>
    panic("null fmt");

  printstring(errorstr);
    802074b6:	0050f517          	auipc	a0,0x50f
    802074ba:	d8250513          	addi	a0,a0,-638 # 80716238 <errorstr>
    802074be:	00000097          	auipc	ra,0x0
    802074c2:	984080e7          	jalr	-1660(ra) # 80206e42 <printstring>
  va_start(ap, fmt);
    802074c6:	00840793          	addi	a5,s0,8
    802074ca:	faf43423          	sd	a5,-88(s0)
  for(i = 0; (c = fmt[i] & 0xff) != 0; i++){
    802074ce:	000a4503          	lbu	a0,0(s4)
    802074d2:	14050863          	beqz	a0,80207622 <__debug_error+0x1a8>
    802074d6:	4981                	li	s3,0
    if(c != '%'){
    802074d8:	02500a93          	li	s5,37
      continue;
    }
    c = fmt[++i] & 0xff;
    if(c == 0)
      break;
    switch(c){
    802074dc:	4955                	li	s2,21
    802074de:	0000a497          	auipc	s1,0xa
    802074e2:	39248493          	addi	s1,s1,914 # 80211870 <rodata_start+0x870>
      printptr(va_arg(ap, uint64));
      break;
    case 's':
      if((s = va_arg(ap, char*)) == 0)
        s = "(null)";
      for(; *s; s++)
    802074e6:	02800c13          	li	s8,40
    802074ea:	a82d                	j	80207524 <__debug_error+0xaa>
    acquire(&pr.lock);
    802074ec:	00567517          	auipc	a0,0x567
    802074f0:	c8450513          	addi	a0,a0,-892 # 8076e170 <pr>
    802074f4:	fffff097          	auipc	ra,0xfffff
    802074f8:	67a080e7          	jalr	1658(ra) # 80206b6e <acquire>
    802074fc:	bf5d                	j	802074b2 <__debug_error+0x38>
    panic("null fmt");
    802074fe:	0000a517          	auipc	a0,0xa
    80207502:	25250513          	addi	a0,a0,594 # 80211750 <rodata_start+0x750>
    80207506:	00000097          	auipc	ra,0x0
    8020750a:	9c8080e7          	jalr	-1592(ra) # 80206ece <panic>
      consputc(c);
    8020750e:	fffff097          	auipc	ra,0xfffff
    80207512:	7fe080e7          	jalr	2046(ra) # 80206d0c <consputc>
  for(i = 0; (c = fmt[i] & 0xff) != 0; i++){
    80207516:	2985                	addiw	s3,s3,1
    80207518:	013a07b3          	add	a5,s4,s3
    8020751c:	0007c503          	lbu	a0,0(a5)
    80207520:	10050163          	beqz	a0,80207622 <__debug_error+0x1a8>
    if(c != '%'){
    80207524:	ff5515e3          	bne	a0,s5,8020750e <__debug_error+0x94>
    c = fmt[++i] & 0xff;
    80207528:	2985                	addiw	s3,s3,1
    8020752a:	013a07b3          	add	a5,s4,s3
    8020752e:	0007c783          	lbu	a5,0(a5)
    80207532:	00078b9b          	sext.w	s7,a5
    if(c == 0)
    80207536:	c7f5                	beqz	a5,80207622 <__debug_error+0x1a8>
    switch(c){
    80207538:	0d578463          	beq	a5,s5,80207600 <__debug_error+0x186>
    8020753c:	f9d7871b          	addiw	a4,a5,-99
    80207540:	0ff77713          	andi	a4,a4,255
    80207544:	0ce96463          	bltu	s2,a4,8020760c <__debug_error+0x192>
    80207548:	f9d7879b          	addiw	a5,a5,-99
    8020754c:	0ff7f713          	andi	a4,a5,255
    80207550:	0ae96e63          	bltu	s2,a4,8020760c <__debug_error+0x192>
    80207554:	00271793          	slli	a5,a4,0x2
    80207558:	97a6                	add	a5,a5,s1
    8020755a:	439c                	lw	a5,0(a5)
    8020755c:	97a6                	add	a5,a5,s1
    8020755e:	8782                	jr	a5
      consputc(va_arg(ap, int));
    80207560:	fa843783          	ld	a5,-88(s0)
    80207564:	00878713          	addi	a4,a5,8
    80207568:	fae43423          	sd	a4,-88(s0)
    8020756c:	4388                	lw	a0,0(a5)
    8020756e:	fffff097          	auipc	ra,0xfffff
    80207572:	79e080e7          	jalr	1950(ra) # 80206d0c <consputc>
      break;
    80207576:	b745                	j	80207516 <__debug_error+0x9c>
      printint(va_arg(ap, int), 10, 1);
    80207578:	fa843783          	ld	a5,-88(s0)
    8020757c:	00878713          	addi	a4,a5,8
    80207580:	fae43423          	sd	a4,-88(s0)
    80207584:	4605                	li	a2,1
    80207586:	45a9                	li	a1,10
    80207588:	4388                	lw	a0,0(a5)
    8020758a:	fffff097          	auipc	ra,0xfffff
    8020758e:	7bc080e7          	jalr	1980(ra) # 80206d46 <printint>
      break;
    80207592:	b751                	j	80207516 <__debug_error+0x9c>
      printint(va_arg(ap, int), 16, 1);
    80207594:	fa843783          	ld	a5,-88(s0)
    80207598:	00878713          	addi	a4,a5,8
    8020759c:	fae43423          	sd	a4,-88(s0)
    802075a0:	4605                	li	a2,1
    802075a2:	45c1                	li	a1,16
    802075a4:	4388                	lw	a0,0(a5)
    802075a6:	fffff097          	auipc	ra,0xfffff
    802075aa:	7a0080e7          	jalr	1952(ra) # 80206d46 <printint>
      break;
    802075ae:	b7a5                	j	80207516 <__debug_error+0x9c>
      printptr(va_arg(ap, uint64));
    802075b0:	fa843783          	ld	a5,-88(s0)
    802075b4:	00878713          	addi	a4,a5,8
    802075b8:	fae43423          	sd	a4,-88(s0)
    802075bc:	6388                	ld	a0,0(a5)
    802075be:	00000097          	auipc	ra,0x0
    802075c2:	82a080e7          	jalr	-2006(ra) # 80206de8 <printptr>
      break;
    802075c6:	bf81                	j	80207516 <__debug_error+0x9c>
      if((s = va_arg(ap, char*)) == 0)
    802075c8:	fa843783          	ld	a5,-88(s0)
    802075cc:	00878713          	addi	a4,a5,8
    802075d0:	fae43423          	sd	a4,-88(s0)
    802075d4:	0007bb83          	ld	s7,0(a5)
    802075d8:	000b8e63          	beqz	s7,802075f4 <__debug_error+0x17a>
      for(; *s; s++)
    802075dc:	000bc503          	lbu	a0,0(s7)
    802075e0:	d91d                	beqz	a0,80207516 <__debug_error+0x9c>
        consputc(*s);
    802075e2:	fffff097          	auipc	ra,0xfffff
    802075e6:	72a080e7          	jalr	1834(ra) # 80206d0c <consputc>
      for(; *s; s++)
    802075ea:	0b85                	addi	s7,s7,1
    802075ec:	000bc503          	lbu	a0,0(s7)
    802075f0:	f96d                	bnez	a0,802075e2 <__debug_error+0x168>
    802075f2:	b715                	j	80207516 <__debug_error+0x9c>
        s = "(null)";
    802075f4:	0000ab97          	auipc	s7,0xa
    802075f8:	154b8b93          	addi	s7,s7,340 # 80211748 <rodata_start+0x748>
      for(; *s; s++)
    802075fc:	8562                	mv	a0,s8
    802075fe:	b7d5                	j	802075e2 <__debug_error+0x168>
      break;
    case '%':
      consputc('%');
    80207600:	8556                	mv	a0,s5
    80207602:	fffff097          	auipc	ra,0xfffff
    80207606:	70a080e7          	jalr	1802(ra) # 80206d0c <consputc>
      break;
    8020760a:	b731                	j	80207516 <__debug_error+0x9c>
    default:
      // Print unknown % sequence to draw attention.
      consputc('%');
    8020760c:	8556                	mv	a0,s5
    8020760e:	fffff097          	auipc	ra,0xfffff
    80207612:	6fe080e7          	jalr	1790(ra) # 80206d0c <consputc>
      consputc(c);
    80207616:	855e                	mv	a0,s7
    80207618:	fffff097          	auipc	ra,0xfffff
    8020761c:	6f4080e7          	jalr	1780(ra) # 80206d0c <consputc>
      break;
    80207620:	bddd                	j	80207516 <__debug_error+0x9c>
    }
    
  }
  if(locking)
    80207622:	000b1c63          	bnez	s6,8020763a <__debug_error+0x1c0>
    release(&pr.lock);
  
  backtrace();
    80207626:	00000097          	auipc	ra,0x0
    8020762a:	848080e7          	jalr	-1976(ra) # 80206e6e <backtrace>
  panicked = 1; // freeze uart output from other CPUs
    8020762e:	4785                	li	a5,1
    80207630:	00567717          	auipc	a4,0x567
    80207634:	b6f72023          	sw	a5,-1184(a4) # 8076e190 <panicked>
  for(;;)
    80207638:	a001                	j	80207638 <__debug_error+0x1be>
    release(&pr.lock);
    8020763a:	00567517          	auipc	a0,0x567
    8020763e:	b3650513          	addi	a0,a0,-1226 # 8076e170 <pr>
    80207642:	fffff097          	auipc	ra,0xfffff
    80207646:	580080e7          	jalr	1408(ra) # 80206bc2 <release>
    8020764a:	bff1                	j	80207626 <__debug_error+0x1ac>

000000008020764c <printfinit>:
#endif
}

void
printfinit(void)
{
    8020764c:	1101                	addi	sp,sp,-32
    8020764e:	ec06                	sd	ra,24(sp)
    80207650:	e822                	sd	s0,16(sp)
    80207652:	e426                	sd	s1,8(sp)
    80207654:	1000                	addi	s0,sp,32
  initlock(&pr.lock, "pr");
    80207656:	00567497          	auipc	s1,0x567
    8020765a:	b1a48493          	addi	s1,s1,-1254 # 8076e170 <pr>
    8020765e:	0000a597          	auipc	a1,0xa
    80207662:	10258593          	addi	a1,a1,258 # 80211760 <rodata_start+0x760>
    80207666:	8526                	mv	a0,s1
    80207668:	fffff097          	auipc	ra,0xfffff
    8020766c:	4c2080e7          	jalr	1218(ra) # 80206b2a <initlock>
  pr.locking = 1;   // changed, used to be 1
    80207670:	4785                	li	a5,1
    80207672:	cc9c                	sw	a5,24(s1)
}
    80207674:	60e2                	ld	ra,24(sp)
    80207676:	6442                	ld	s0,16(sp)
    80207678:	64a2                	ld	s1,8(sp)
    8020767a:	6105                	addi	sp,sp,32
    8020767c:	8082                	ret

000000008020767e <print_logo>:
    printf(" /  .'.  \\ \\-'\\   /   \\  `-' /        \\       / |  |'->  `|  |_)  |  |'->\\-'\\   /    |  `---.,------.)\\  '-'(_ .'\n");
    printf("`--'   '--'    `-'     `----'          `-----'  `--'      `--'    `--'       `-'     `------'`------'  `-----'   \n");
*/
}
#else
void print_logo() {
    8020767e:	1141                	addi	sp,sp,-16
    80207680:	e422                	sd	s0,8(sp)
    80207682:	0800                	addi	s0,sp,16
    printf("   \\   \\ |    \\   '   /, | .-.  '  (,------. (_|  | |  |  (|  '--.   |  |'.'|  |  |  |_|( OO )\n");
    printf("  .'    \\_)    \\     /__)' \\  |  |  '------'   |  | |  |   |  .--'   |  |   |  |  |  | | `-' /\n");
    printf(" /  .'.  \\      \\   /    \\  `'  /              '  '-'  '-. |  `---.  |  |   |  | ('  '-'(_.-'\n");
    printf("'--'   '--'      `-'      `----'                `-----'--' `------'  `--'   `--'   `-----'\n");
*/
}
    80207684:	6422                	ld	s0,8(sp)
    80207686:	0141                	addi	sp,sp,16
    80207688:	8082                	ret

000000008020768a <__mul_alloc_no_lock>:
#define __leave_sin_cs \
	release(&single.lock);


// Allocate n pages 
static void *__mul_alloc_no_lock(uint64 n) {
    8020768a:	1141                	addi	sp,sp,-16
    8020768c:	e422                	sd	s0,8(sp)
    8020768e:	0800                	addi	s0,sp,16
    80207690:	872a                	mv	a4,a0
	struct run *pa;
	struct run **pprev;

	pa = multiple.freelist;
    80207692:	00567517          	auipc	a0,0x567
    80207696:	b1e53503          	ld	a0,-1250(a0) # 8076e1b0 <multiple+0x18>
	pprev = &(multiple.freelist);

	while (NULL != pa) {
    8020769a:	cd05                	beqz	a0,802076d2 <__mul_alloc_no_lock+0x48>
	pprev = &(multiple.freelist);
    8020769c:	00567697          	auipc	a3,0x567
    802076a0:	b1468693          	addi	a3,a3,-1260 # 8076e1b0 <multiple+0x18>
		if (pa->npage >= n) {
    802076a4:	651c                	ld	a5,8(a0)
    802076a6:	00e7f663          	bgeu	a5,a4,802076b2 <__mul_alloc_no_lock+0x28>

			multiple.npage -= n;
			break;
		}

		pprev = &(pa->next);
    802076aa:	86aa                	mv	a3,a0
		pa = pa->next;
    802076ac:	6108                	ld	a0,0(a0)
	while (NULL != pa) {
    802076ae:	f97d                	bnez	a0,802076a4 <__mul_alloc_no_lock+0x1a>
    802076b0:	a00d                	j	802076d2 <__mul_alloc_no_lock+0x48>
				(uint64)pa + PGSIZE * (pa->npage - n)
    802076b2:	8f99                	sub	a5,a5,a4
    802076b4:	00c79613          	slli	a2,a5,0xc
    802076b8:	962a                	add	a2,a2,a0
			if (pa == ret) {	// this block is used up, remove it
    802076ba:	00a60f63          	beq	a2,a0,802076d8 <__mul_alloc_no_lock+0x4e>
				pa->npage -= n;
    802076be:	e51c                	sd	a5,8(a0)
				pa = ret;
    802076c0:	8532                	mv	a0,a2
			multiple.npage -= n;
    802076c2:	00567697          	auipc	a3,0x567
    802076c6:	ad668693          	addi	a3,a3,-1322 # 8076e198 <multiple>
    802076ca:	729c                	ld	a5,32(a3)
    802076cc:	40e78733          	sub	a4,a5,a4
    802076d0:	f298                	sd	a4,32(a3)
	}

	return (void*)pa;
}
    802076d2:	6422                	ld	s0,8(sp)
    802076d4:	0141                	addi	sp,sp,16
    802076d6:	8082                	ret
				*pprev = pa->next;
    802076d8:	611c                	ld	a5,0(a0)
    802076da:	e29c                	sd	a5,0(a3)
    802076dc:	b7dd                	j	802076c2 <__mul_alloc_no_lock+0x38>

00000000802076de <__mul_free_no_lock>:

// free n pages
static void __mul_free_no_lock(uint64 start, uint64 n) {
    802076de:	1141                	addi	sp,sp,-16
    802076e0:	e422                	sd	s0,8(sp)
    802076e2:	0800                	addi	s0,sp,16
	if (NULL == multiple.freelist) {
    802076e4:	00567797          	auipc	a5,0x567
    802076e8:	acc7b783          	ld	a5,-1332(a5) # 8076e1b0 <multiple+0x18>
    802076ec:	c7a1                	beqz	a5,80207734 <__mul_free_no_lock+0x56>
	}

	struct run *prev = NULL;
	struct run *next = multiple.freelist;
	while (NULL != next) {
		if ((uint64)next > start) {
    802076ee:	06f56963          	bltu	a0,a5,80207760 <__mul_free_no_lock+0x82>
			break;
		}
		else {
			prev = next;
			next = next->next;
    802076f2:	873e                	mv	a4,a5
    802076f4:	639c                	ld	a5,0(a5)
	while (NULL != next) {
    802076f6:	c399                	beqz	a5,802076fc <__mul_free_no_lock+0x1e>
		if ((uint64)next > start) {
    802076f8:	fef57de3          	bgeu	a0,a5,802076f2 <__mul_free_no_lock+0x14>
		}
	}

	struct run *pa = (struct run*)start;
    802076fc:	86aa                	mv	a3,a0
	pa->next = next;
    802076fe:	e11c                	sd	a5,0(a0)
	pa->npage = n;
    80207700:	e50c                	sd	a1,8(a0)

	// merge with previous 
	if (NULL != prev) {
		if (((uint64)prev + prev->npage * PGSIZE) == (uint64)pa) {
    80207702:	00873803          	ld	a6,8(a4)
    80207706:	00c81613          	slli	a2,a6,0xc
    8020770a:	963a                	add	a2,a2,a4
    8020770c:	02a60f63          	beq	a2,a0,8020774a <__mul_free_no_lock+0x6c>
			prev->npage += n;
			pa = prev;
		}
		else {
			prev->next = pa;
    80207710:	e308                	sd	a0,0(a4)
		multiple.freelist = pa;
		pa->npage = n;
	}

	// merge with next 
	if (NULL != next) {
    80207712:	c799                	beqz	a5,80207720 <__mul_free_no_lock+0x42>
		if (((uint64)pa + pa->npage * PGSIZE) == (uint64)next) {
    80207714:	6690                	ld	a2,8(a3)
    80207716:	00c61713          	slli	a4,a2,0xc
    8020771a:	9736                	add	a4,a4,a3
    8020771c:	02e78c63          	beq	a5,a4,80207754 <__mul_free_no_lock+0x76>
			pa->npage += next->npage;
			pa->next = next->next;
		}
	}

	multiple.npage += n;
    80207720:	00567717          	auipc	a4,0x567
    80207724:	a7870713          	addi	a4,a4,-1416 # 8076e198 <multiple>
    80207728:	731c                	ld	a5,32(a4)
    8020772a:	95be                	add	a1,a1,a5
    8020772c:	f30c                	sd	a1,32(a4)
}
    8020772e:	6422                	ld	s0,8(sp)
    80207730:	0141                	addi	sp,sp,16
    80207732:	8082                	ret
		multiple.freelist = (struct run*)start;
    80207734:	00567797          	auipc	a5,0x567
    80207738:	a6478793          	addi	a5,a5,-1436 # 8076e198 <multiple>
    8020773c:	ef88                	sd	a0,24(a5)
		multiple.freelist->npage = n;
    8020773e:	e50c                	sd	a1,8(a0)
		multiple.freelist->next = NULL;
    80207740:	6f98                	ld	a4,24(a5)
    80207742:	00073023          	sd	zero,0(a4)
		multiple.npage = n;
    80207746:	f38c                	sd	a1,32(a5)
		return ;
    80207748:	b7dd                	j	8020772e <__mul_free_no_lock+0x50>
			prev->npage += n;
    8020774a:	982e                	add	a6,a6,a1
    8020774c:	01073423          	sd	a6,8(a4)
			pa = prev;
    80207750:	86ba                	mv	a3,a4
    80207752:	b7c1                	j	80207712 <__mul_free_no_lock+0x34>
			pa->npage += next->npage;
    80207754:	6798                	ld	a4,8(a5)
    80207756:	963a                	add	a2,a2,a4
    80207758:	e690                	sd	a2,8(a3)
			pa->next = next->next;
    8020775a:	639c                	ld	a5,0(a5)
    8020775c:	e29c                	sd	a5,0(a3)
    8020775e:	b7c9                	j	80207720 <__mul_free_no_lock+0x42>
	struct run *pa = (struct run*)start;
    80207760:	86aa                	mv	a3,a0
	pa->next = next;
    80207762:	e11c                	sd	a5,0(a0)
		multiple.freelist = pa;
    80207764:	00567717          	auipc	a4,0x567
    80207768:	a4a73623          	sd	a0,-1460(a4) # 8076e1b0 <multiple+0x18>
		pa->npage = n;
    8020776c:	e50c                	sd	a1,8(a0)
	if (NULL != next) {
    8020776e:	b75d                	j	80207714 <__mul_free_no_lock+0x36>

0000000080207770 <kpminit>:
		start += PGSIZE;
	}
	__leave_sin_cs 
}

void kpminit(void) {
    80207770:	7139                	addi	sp,sp,-64
    80207772:	fc06                	sd	ra,56(sp)
    80207774:	f822                	sd	s0,48(sp)
    80207776:	f426                	sd	s1,40(sp)
    80207778:	f04a                	sd	s2,32(sp)
    8020777a:	ec4e                	sd	s3,24(sp)
    8020777c:	e852                	sd	s4,16(sp)
    8020777e:	e456                	sd	s5,8(sp)
    80207780:	0080                	addi	s0,sp,64
	// init multiple 
	multiple.freelist = NULL;
    80207782:	00567917          	auipc	s2,0x567
    80207786:	a1690913          	addi	s2,s2,-1514 # 8076e198 <multiple>
    8020778a:	00093c23          	sd	zero,24(s2)
	multiple.npage = 0;
    8020778e:	02093023          	sd	zero,32(s2)
	initlock(&multiple.lock, "multi-lock");
    80207792:	0000a597          	auipc	a1,0xa
    80207796:	14e58593          	addi	a1,a1,334 # 802118e0 <digits+0x18>
    8020779a:	854a                	mv	a0,s2
    8020779c:	fffff097          	auipc	ra,0xfffff
    802077a0:	38e080e7          	jalr	910(ra) # 80206b2a <initlock>

	// init single 
	single.freelist = NULL;
    802077a4:	04093023          	sd	zero,64(s2)
	single.npage = 0;
    802077a8:	04093423          	sd	zero,72(s2)
	initlock(&single.lock, "single-lock");
    802077ac:	00567a17          	auipc	s4,0x567
    802077b0:	a14a0a13          	addi	s4,s4,-1516 # 8076e1c0 <single>
    802077b4:	0000a597          	auipc	a1,0xa
    802077b8:	13c58593          	addi	a1,a1,316 # 802118f0 <digits+0x28>
    802077bc:	8552                	mv	a0,s4
    802077be:	fffff097          	auipc	ra,0xfffff
    802077c2:	36c080e7          	jalr	876(ra) # 80206b2a <initlock>

	__mul_freerange((uint64)kernel_end, START_SINGLE);
    802077c6:	0050f497          	auipc	s1,0x50f
    802077ca:	a7a48493          	addi	s1,s1,-1414 # 80716240 <START_SINGLE>
	uint64 start = PGROUNDUP(pa_start);
    802077ce:	7afd                	lui	s5,0xfffff
    802077d0:	00569997          	auipc	s3,0x569
    802077d4:	82f98993          	addi	s3,s3,-2001 # 8076ffff <kernel_end+0xfff>
    802077d8:	0159f7b3          	and	a5,s3,s5
	uint64 npage = (pa_end - start) / PGSIZE;
    802077dc:	0004b983          	ld	s3,0(s1)
    802077e0:	40f989b3          	sub	s3,s3,a5
    802077e4:	00c9d993          	srli	s3,s3,0xc
	__enter_mul_cs 
    802077e8:	854a                	mv	a0,s2
    802077ea:	fffff097          	auipc	ra,0xfffff
    802077ee:	384080e7          	jalr	900(ra) # 80206b6e <acquire>
	__mul_free_no_lock(pa_start, npage);
    802077f2:	85ce                	mv	a1,s3
    802077f4:	00568517          	auipc	a0,0x568
    802077f8:	80c50513          	addi	a0,a0,-2036 # 8076f000 <kernel_end>
    802077fc:	00000097          	auipc	ra,0x0
    80207800:	ee2080e7          	jalr	-286(ra) # 802076de <__mul_free_no_lock>
	__leave_mul_cs 
    80207804:	854a                	mv	a0,s2
    80207806:	fffff097          	auipc	ra,0xfffff
    8020780a:	3bc080e7          	jalr	956(ra) # 80206bc2 <release>
	uint64 start = PGROUNDUP(pa_start);
    8020780e:	6084                	ld	s1,0(s1)
    80207810:	6785                	lui	a5,0x1
    80207812:	17fd                	addi	a5,a5,-1
    80207814:	94be                	add	s1,s1,a5
    80207816:	0154f4b3          	and	s1,s1,s5
	__enter_sin_cs 
    8020781a:	8552                	mv	a0,s4
    8020781c:	fffff097          	auipc	ra,0xfffff
    80207820:	352080e7          	jalr	850(ra) # 80206b6e <acquire>
	while (start < pa_end) {
    80207824:	47c5                	li	a5,17
    80207826:	07ee                	slli	a5,a5,0x1b
    80207828:	00f4ff63          	bgeu	s1,a5,80207846 <kpminit+0xd6>
	page->next = single.freelist;
    8020782c:	87ca                	mv	a5,s2
		start += PGSIZE;
    8020782e:	6605                	lui	a2,0x1
	while (start < pa_end) {
    80207830:	46c5                	li	a3,17
    80207832:	06ee                	slli	a3,a3,0x1b
	page->next = single.freelist;
    80207834:	63b8                	ld	a4,64(a5)
    80207836:	e098                	sd	a4,0(s1)
	single.freelist = page;
    80207838:	e3a4                	sd	s1,64(a5)
	single.npage += 1;
    8020783a:	67b8                	ld	a4,72(a5)
    8020783c:	0705                	addi	a4,a4,1
    8020783e:	e7b8                	sd	a4,72(a5)
		start += PGSIZE;
    80207840:	94b2                	add	s1,s1,a2
	while (start < pa_end) {
    80207842:	fed4e9e3          	bltu	s1,a3,80207834 <kpminit+0xc4>
	__leave_sin_cs 
    80207846:	00567497          	auipc	s1,0x567
    8020784a:	95248493          	addi	s1,s1,-1710 # 8076e198 <multiple>
    8020784e:	00567517          	auipc	a0,0x567
    80207852:	97250513          	addi	a0,a0,-1678 # 8076e1c0 <single>
    80207856:	fffff097          	auipc	ra,0xfffff
    8020785a:	36c080e7          	jalr	876(ra) # 80206bc2 <release>
	__sin_freerange(START_SINGLE, PHYSTOP);

	__debug_info("kpminit kernel_end: %p, start_single: %p, phystop: %p, npage %d\n", 
    8020785e:	7098                	ld	a4,32(s1)
    80207860:	64bc                	ld	a5,72(s1)
    80207862:	973e                	add	a4,a4,a5
    80207864:	46c5                	li	a3,17
    80207866:	06ee                	slli	a3,a3,0x1b
    80207868:	0050f617          	auipc	a2,0x50f
    8020786c:	9d863603          	ld	a2,-1576(a2) # 80716240 <START_SINGLE>
    80207870:	00567597          	auipc	a1,0x567
    80207874:	79058593          	addi	a1,a1,1936 # 8076f000 <kernel_end>
    80207878:	0000a517          	auipc	a0,0xa
    8020787c:	08850513          	addi	a0,a0,136 # 80211900 <digits+0x38>
    80207880:	00000097          	auipc	ra,0x0
    80207884:	85e080e7          	jalr	-1954(ra) # 802070de <__debug_info>
			kernel_end, (void*)START_SINGLE, (void*)PHYSTOP, multiple.npage + single.npage);
}
    80207888:	70e2                	ld	ra,56(sp)
    8020788a:	7442                	ld	s0,48(sp)
    8020788c:	74a2                	ld	s1,40(sp)
    8020788e:	7902                	ld	s2,32(sp)
    80207890:	69e2                	ld	s3,24(sp)
    80207892:	6a42                	ld	s4,16(sp)
    80207894:	6aa2                	ld	s5,8(sp)
    80207896:	6121                	addi	sp,sp,64
    80207898:	8082                	ret

000000008020789a <allocpage_n>:

void *allocpage_n(uint64 n) {
    8020789a:	7179                	addi	sp,sp,-48
    8020789c:	f406                	sd	ra,40(sp)
    8020789e:	f022                	sd	s0,32(sp)
    802078a0:	ec26                	sd	s1,24(sp)
    802078a2:	e84a                	sd	s2,16(sp)
    802078a4:	e44e                	sd	s3,8(sp)
    802078a6:	1800                	addi	s0,sp,48
    802078a8:	892a                	mv	s2,a0
	//__debug_assert("allocpage_n", n > 1, "n = %d\n", n);

	void *ret;
	__enter_mul_cs 
    802078aa:	00567997          	auipc	s3,0x567
    802078ae:	8ee98993          	addi	s3,s3,-1810 # 8076e198 <multiple>
    802078b2:	854e                	mv	a0,s3
    802078b4:	fffff097          	auipc	ra,0xfffff
    802078b8:	2ba080e7          	jalr	698(ra) # 80206b6e <acquire>
	ret = __mul_alloc_no_lock(n);
    802078bc:	854a                	mv	a0,s2
    802078be:	00000097          	auipc	ra,0x0
    802078c2:	dcc080e7          	jalr	-564(ra) # 8020768a <__mul_alloc_no_lock>
    802078c6:	84aa                	mv	s1,a0
	__leave_mul_cs 
    802078c8:	854e                	mv	a0,s3
    802078ca:	fffff097          	auipc	ra,0xfffff
    802078ce:	2f8080e7          	jalr	760(ra) # 80206bc2 <release>

	#ifdef DEBUG
	if (NULL != ret) {
    802078d2:	c889                	beqz	s1,802078e4 <allocpage_n+0x4a>
		memset(ret, 0x5, n * PGSIZE);
    802078d4:	00c9161b          	slliw	a2,s2,0xc
    802078d8:	4595                	li	a1,5
    802078da:	8526                	mv	a0,s1
    802078dc:	ffff9097          	auipc	ra,0xffff9
    802078e0:	498080e7          	jalr	1176(ra) # 80200d74 <memset>
	}
	#endif 
	//__debug_info("allocpage_n", "%p %d page(s)\n", ret, n);

	return ret;
}
    802078e4:	8526                	mv	a0,s1
    802078e6:	70a2                	ld	ra,40(sp)
    802078e8:	7402                	ld	s0,32(sp)
    802078ea:	64e2                	ld	s1,24(sp)
    802078ec:	6942                	ld	s2,16(sp)
    802078ee:	69a2                	ld	s3,8(sp)
    802078f0:	6145                	addi	sp,sp,48
    802078f2:	8082                	ret

00000000802078f4 <freepage_n>:

void freepage_n(uint64 start, uint64 n) {
    802078f4:	7179                	addi	sp,sp,-48
    802078f6:	f406                	sd	ra,40(sp)
    802078f8:	f022                	sd	s0,32(sp)
    802078fa:	ec26                	sd	s1,24(sp)
    802078fc:	e84a                	sd	s2,16(sp)
    802078fe:	e44e                	sd	s3,8(sp)
    80207900:	1800                	addi	s0,sp,48
    80207902:	84aa                	mv	s1,a0
    80207904:	892e                	mv	s2,a1
		(start >= (uint64)kernel_end && start < START_SINGLE) && 
		(0 == start % PGSIZE) && n > 1, 
		"start = %p, n = %d\n", start, n
	);
*/
	__enter_mul_cs 
    80207906:	00567997          	auipc	s3,0x567
    8020790a:	89298993          	addi	s3,s3,-1902 # 8076e198 <multiple>
    8020790e:	854e                	mv	a0,s3
    80207910:	fffff097          	auipc	ra,0xfffff
    80207914:	25e080e7          	jalr	606(ra) # 80206b6e <acquire>
	__mul_free_no_lock(start, n);
    80207918:	85ca                	mv	a1,s2
    8020791a:	8526                	mv	a0,s1
    8020791c:	00000097          	auipc	ra,0x0
    80207920:	dc2080e7          	jalr	-574(ra) # 802076de <__mul_free_no_lock>
	__leave_mul_cs 
    80207924:	854e                	mv	a0,s3
    80207926:	fffff097          	auipc	ra,0xfffff
    8020792a:	29c080e7          	jalr	668(ra) # 80206bc2 <release>

	//__debug_info("freepage_n", "%p %d page(s)\n", start, n);
}
    8020792e:	70a2                	ld	ra,40(sp)
    80207930:	7402                	ld	s0,32(sp)
    80207932:	64e2                	ld	s1,24(sp)
    80207934:	6942                	ld	s2,16(sp)
    80207936:	69a2                	ld	s3,8(sp)
    80207938:	6145                	addi	sp,sp,48
    8020793a:	8082                	ret

000000008020793c <_allocpage>:

uint64 _allocpage(void) {
    8020793c:	1101                	addi	sp,sp,-32
    8020793e:	ec06                	sd	ra,24(sp)
    80207940:	e822                	sd	s0,16(sp)
    80207942:	e426                	sd	s1,8(sp)
    80207944:	e04a                	sd	s2,0(sp)
    80207946:	1000                	addi	s0,sp,32
	struct run *ret;

	__enter_sin_cs 
    80207948:	00567517          	auipc	a0,0x567
    8020794c:	87850513          	addi	a0,a0,-1928 # 8076e1c0 <single>
    80207950:	fffff097          	auipc	ra,0xfffff
    80207954:	21e080e7          	jalr	542(ra) # 80206b6e <acquire>
	struct run *ret = single.freelist;
    80207958:	00567497          	auipc	s1,0x567
    8020795c:	8804b483          	ld	s1,-1920(s1) # 8076e1d8 <single+0x18>
	if (NULL != ret) {
    80207960:	c0a1                	beqz	s1,802079a0 <_allocpage+0x64>
		single.freelist = ret->next;
    80207962:	6098                	ld	a4,0(s1)
    80207964:	00567797          	auipc	a5,0x567
    80207968:	83478793          	addi	a5,a5,-1996 # 8076e198 <multiple>
    8020796c:	e3b8                	sd	a4,64(a5)
		single.npage -= 1;
    8020796e:	67b8                	ld	a4,72(a5)
    80207970:	177d                	addi	a4,a4,-1
    80207972:	e7b8                	sd	a4,72(a5)
	ret = __sin_alloc_no_lock();
	__leave_sin_cs 
    80207974:	00567517          	auipc	a0,0x567
    80207978:	84c50513          	addi	a0,a0,-1972 # 8076e1c0 <single>
    8020797c:	fffff097          	auipc	ra,0xfffff
    80207980:	246080e7          	jalr	582(ra) # 80206bc2 <release>
		__leave_mul_cs 
	}
	
	#ifdef DEBUG
	if (NULL != ret) {
		memset(ret, 5, PGSIZE);
    80207984:	6605                	lui	a2,0x1
    80207986:	4595                	li	a1,5
    80207988:	8526                	mv	a0,s1
    8020798a:	ffff9097          	auipc	ra,0xffff9
    8020798e:	3ea080e7          	jalr	1002(ra) # 80200d74 <memset>
	#endif 
	
	//__debug_info("allocpage %p\n", ret);

	return (uint64)ret;
}
    80207992:	8526                	mv	a0,s1
    80207994:	60e2                	ld	ra,24(sp)
    80207996:	6442                	ld	s0,16(sp)
    80207998:	64a2                	ld	s1,8(sp)
    8020799a:	6902                	ld	s2,0(sp)
    8020799c:	6105                	addi	sp,sp,32
    8020799e:	8082                	ret
	__leave_sin_cs 
    802079a0:	00566917          	auipc	s2,0x566
    802079a4:	7f890913          	addi	s2,s2,2040 # 8076e198 <multiple>
    802079a8:	00567517          	auipc	a0,0x567
    802079ac:	81850513          	addi	a0,a0,-2024 # 8076e1c0 <single>
    802079b0:	fffff097          	auipc	ra,0xfffff
    802079b4:	212080e7          	jalr	530(ra) # 80206bc2 <release>
		__enter_mul_cs 
    802079b8:	854a                	mv	a0,s2
    802079ba:	fffff097          	auipc	ra,0xfffff
    802079be:	1b4080e7          	jalr	436(ra) # 80206b6e <acquire>
		ret = __mul_alloc_no_lock(1);
    802079c2:	4505                	li	a0,1
    802079c4:	00000097          	auipc	ra,0x0
    802079c8:	cc6080e7          	jalr	-826(ra) # 8020768a <__mul_alloc_no_lock>
    802079cc:	84aa                	mv	s1,a0
		__leave_mul_cs 
    802079ce:	854a                	mv	a0,s2
    802079d0:	fffff097          	auipc	ra,0xfffff
    802079d4:	1f2080e7          	jalr	498(ra) # 80206bc2 <release>
	if (NULL != ret) {
    802079d8:	dccd                	beqz	s1,80207992 <_allocpage+0x56>
    802079da:	b76d                	j	80207984 <_allocpage+0x48>

00000000802079dc <_freepage>:

void _freepage(uint64 pa) {
    802079dc:	7179                	addi	sp,sp,-48
    802079de:	f406                	sd	ra,40(sp)
    802079e0:	f022                	sd	s0,32(sp)
    802079e2:	ec26                	sd	s1,24(sp)
    802079e4:	e84a                	sd	s2,16(sp)
    802079e6:	e44e                	sd	s3,8(sp)
    802079e8:	1800                	addi	s0,sp,48
    802079ea:	84aa                	mv	s1,a0
		(start >= (uint64)kernel_end && start < PHYSTOP) && 
		0 == start % PGSIZE, 
		"start = %p\n", start
	);
*/
	if (start < START_SINGLE) {
    802079ec:	0050f797          	auipc	a5,0x50f
    802079f0:	8547b783          	ld	a5,-1964(a5) # 80716240 <START_SINGLE>
    802079f4:	02f57d63          	bgeu	a0,a5,80207a2e <_freepage+0x52>
		__enter_mul_cs 
    802079f8:	00566917          	auipc	s2,0x566
    802079fc:	7a090913          	addi	s2,s2,1952 # 8076e198 <multiple>
    80207a00:	854a                	mv	a0,s2
    80207a02:	fffff097          	auipc	ra,0xfffff
    80207a06:	16c080e7          	jalr	364(ra) # 80206b6e <acquire>
		__mul_free_no_lock(start, 1);
    80207a0a:	4585                	li	a1,1
    80207a0c:	8526                	mv	a0,s1
    80207a0e:	00000097          	auipc	ra,0x0
    80207a12:	cd0080e7          	jalr	-816(ra) # 802076de <__mul_free_no_lock>
		__leave_mul_cs 
    80207a16:	854a                	mv	a0,s2
    80207a18:	fffff097          	auipc	ra,0xfffff
    80207a1c:	1aa080e7          	jalr	426(ra) # 80206bc2 <release>
		__sin_free_no_lock(start);
		__leave_sin_cs 
	}

	//__debug_info("freepage", "%p\n", start);
}
    80207a20:	70a2                	ld	ra,40(sp)
    80207a22:	7402                	ld	s0,32(sp)
    80207a24:	64e2                	ld	s1,24(sp)
    80207a26:	6942                	ld	s2,16(sp)
    80207a28:	69a2                	ld	s3,8(sp)
    80207a2a:	6145                	addi	sp,sp,48
    80207a2c:	8082                	ret
		__enter_sin_cs 
    80207a2e:	00566917          	auipc	s2,0x566
    80207a32:	76a90913          	addi	s2,s2,1898 # 8076e198 <multiple>
    80207a36:	00566997          	auipc	s3,0x566
    80207a3a:	78a98993          	addi	s3,s3,1930 # 8076e1c0 <single>
    80207a3e:	854e                	mv	a0,s3
    80207a40:	fffff097          	auipc	ra,0xfffff
    80207a44:	12e080e7          	jalr	302(ra) # 80206b6e <acquire>
	page->next = single.freelist;
    80207a48:	04093783          	ld	a5,64(s2)
    80207a4c:	e09c                	sd	a5,0(s1)
	single.freelist = page;
    80207a4e:	04993023          	sd	s1,64(s2)
	single.npage += 1;
    80207a52:	04893783          	ld	a5,72(s2)
    80207a56:	0785                	addi	a5,a5,1
    80207a58:	04f93423          	sd	a5,72(s2)
		__leave_sin_cs 
    80207a5c:	854e                	mv	a0,s3
    80207a5e:	fffff097          	auipc	ra,0xfffff
    80207a62:	164080e7          	jalr	356(ra) # 80206bc2 <release>
}
    80207a66:	bf6d                	j	80207a20 <_freepage+0x44>

0000000080207a68 <idlepages>:

uint64 idlepages(void) {
    80207a68:	1141                	addi	sp,sp,-16
    80207a6a:	e422                	sd	s0,8(sp)
    80207a6c:	0800                	addi	s0,sp,16
	return multiple.npage + single.npage;
    80207a6e:	00566797          	auipc	a5,0x566
    80207a72:	72a78793          	addi	a5,a5,1834 # 8076e198 <multiple>
    80207a76:	7388                	ld	a0,32(a5)
    80207a78:	67bc                	ld	a5,72(a5)
}
    80207a7a:	953e                	add	a0,a0,a5
    80207a7c:	6422                	ld	s0,8(sp)
    80207a7e:	0141                	addi	sp,sp,16
    80207a80:	8082                	ret

0000000080207a82 <pm_dump>:

void pm_dump(void) {
    80207a82:	1101                	addi	sp,sp,-32
    80207a84:	ec06                	sd	ra,24(sp)
    80207a86:	e822                	sd	s0,16(sp)
    80207a88:	e426                	sd	s1,8(sp)
    80207a8a:	e04a                	sd	s2,0(sp)
    80207a8c:	1000                	addi	s0,sp,32
	__enter_mul_cs 
    80207a8e:	00566917          	auipc	s2,0x566
    80207a92:	70a90913          	addi	s2,s2,1802 # 8076e198 <multiple>
    80207a96:	854a                	mv	a0,s2
    80207a98:	fffff097          	auipc	ra,0xfffff
    80207a9c:	0d6080e7          	jalr	214(ra) # 80206b6e <acquire>
	struct run *pa = multiple.freelist;
    80207aa0:	01893483          	ld	s1,24(s2)
	printf("multiple avail: %d\n", multiple.npage);
    80207aa4:	02093583          	ld	a1,32(s2)
    80207aa8:	0000a517          	auipc	a0,0xa
    80207aac:	ea050513          	addi	a0,a0,-352 # 80211948 <digits+0x80>
    80207ab0:	fffff097          	auipc	ra,0xfffff
    80207ab4:	468080e7          	jalr	1128(ra) # 80206f18 <printf>
	while (NULL != pa) {
    80207ab8:	cc91                	beqz	s1,80207ad4 <pm_dump+0x52>
		printf("\t%p %d\n", pa, pa->npage);
    80207aba:	0000a917          	auipc	s2,0xa
    80207abe:	ea690913          	addi	s2,s2,-346 # 80211960 <digits+0x98>
    80207ac2:	6490                	ld	a2,8(s1)
    80207ac4:	85a6                	mv	a1,s1
    80207ac6:	854a                	mv	a0,s2
    80207ac8:	fffff097          	auipc	ra,0xfffff
    80207acc:	450080e7          	jalr	1104(ra) # 80206f18 <printf>
		pa = pa->next;
    80207ad0:	6084                	ld	s1,0(s1)
	while (NULL != pa) {
    80207ad2:	f8e5                	bnez	s1,80207ac2 <pm_dump+0x40>
	}
	__leave_mul_cs 
    80207ad4:	00566917          	auipc	s2,0x566
    80207ad8:	6c490913          	addi	s2,s2,1732 # 8076e198 <multiple>
    80207adc:	854a                	mv	a0,s2
    80207ade:	fffff097          	auipc	ra,0xfffff
    80207ae2:	0e4080e7          	jalr	228(ra) # 80206bc2 <release>

	__enter_sin_cs 
    80207ae6:	00566497          	auipc	s1,0x566
    80207aea:	6da48493          	addi	s1,s1,1754 # 8076e1c0 <single>
    80207aee:	8526                	mv	a0,s1
    80207af0:	fffff097          	auipc	ra,0xfffff
    80207af4:	07e080e7          	jalr	126(ra) # 80206b6e <acquire>
	printf("single avail: %d\n", single.npage);
    80207af8:	04893583          	ld	a1,72(s2)
    80207afc:	0000a517          	auipc	a0,0xa
    80207b00:	e6c50513          	addi	a0,a0,-404 # 80211968 <digits+0xa0>
    80207b04:	fffff097          	auipc	ra,0xfffff
    80207b08:	414080e7          	jalr	1044(ra) # 80206f18 <printf>
	__leave_sin_cs 
    80207b0c:	8526                	mv	a0,s1
    80207b0e:	fffff097          	auipc	ra,0xfffff
    80207b12:	0b4080e7          	jalr	180(ra) # 80206bc2 <release>
}
    80207b16:	60e2                	ld	ra,24(sp)
    80207b18:	6442                	ld	s0,16(sp)
    80207b1a:	64a2                	ld	s1,8(sp)
    80207b1c:	6902                	ld	s2,0(sp)
    80207b1e:	6105                	addi	sp,sp,32
    80207b20:	8082                	ret

0000000080207b22 <kmallocinit>:
#define ROUNDUP16(n) \
	(((n) + 15) & ~0x0f)

// as kmalloc() use allocpage() and freepage, 
// kmallocinit() should be called at least after kpminit() 
void kmallocinit(void) {
    80207b22:	1101                	addi	sp,sp,-32
    80207b24:	ec06                	sd	ra,24(sp)
    80207b26:	e822                	sd	s0,16(sp)
    80207b28:	e426                	sd	s1,8(sp)
    80207b2a:	1000                	addi	s0,sp,32
	// init adam 
	initlock(&(kmem_adam.lock), "kmem_adam");
    80207b2c:	00566497          	auipc	s1,0x566
    80207b30:	6bc48493          	addi	s1,s1,1724 # 8076e1e8 <kmem_adam>
    80207b34:	0000a597          	auipc	a1,0xa
    80207b38:	e4c58593          	addi	a1,a1,-436 # 80211980 <digits+0xb8>
    80207b3c:	8526                	mv	a0,s1
    80207b3e:	fffff097          	auipc	ra,0xfffff
    80207b42:	fec080e7          	jalr	-20(ra) # 80206b2a <initlock>
	kmem_adam.list = NULL;
    80207b46:	0204b023          	sd	zero,32(s1)
	kmem_adam.next = NULL;
    80207b4a:	0204b423          	sd	zero,40(s1)
	kmem_adam.npages = 0;
    80207b4e:	00049e23          	sh	zero,28(s1)
	kmem_adam.nobjs = 0;
    80207b52:	00049f23          	sh	zero,30(s1)
	kmem_adam.obj_size = 
    80207b56:	03000793          	li	a5,48
    80207b5a:	cc9c                	sw	a5,24(s1)
			ROUNDUP16(sizeof(struct kmem_allocator));

	// init kmem_table 
	for (uint8 i = 0; i < KMEM_TABLE_SIZE; i++) {
    80207b5c:	00566797          	auipc	a5,0x566
    80207b60:	6bc78793          	addi	a5,a5,1724 # 8076e218 <kmem_table>
    80207b64:	00566717          	auipc	a4,0x566
    80207b68:	73c70713          	addi	a4,a4,1852 # 8076e2a0 <kmem_table_lock>
		kmem_table[i] = NULL;
    80207b6c:	0007b023          	sd	zero,0(a5)
	for (uint8 i = 0; i < KMEM_TABLE_SIZE; i++) {
    80207b70:	07a1                	addi	a5,a5,8
    80207b72:	fee79de3          	bne	a5,a4,80207b6c <kmallocinit+0x4a>
	}
	int hash = _hash(kmem_adam.obj_size);
	kmem_table[hash] = &kmem_adam;
    80207b76:	00566797          	auipc	a5,0x566
    80207b7a:	67278793          	addi	a5,a5,1650 # 8076e1e8 <kmem_adam>
    80207b7e:	f3dc                	sd	a5,160(a5)
	initlock(&kmem_table_lock, "kmem_table");
    80207b80:	0000a597          	auipc	a1,0xa
    80207b84:	e1058593          	addi	a1,a1,-496 # 80211990 <digits+0xc8>
    80207b88:	00566517          	auipc	a0,0x566
    80207b8c:	71850513          	addi	a0,a0,1816 # 8076e2a0 <kmem_table_lock>
    80207b90:	fffff097          	auipc	ra,0xfffff
    80207b94:	f9a080e7          	jalr	-102(ra) # 80206b2a <initlock>
	printf("kmallocinit KMEM_NODE_FIX: %p\n", KMEM_NODE_FIX);
    80207b98:	45e9                	li	a1,26
    80207b9a:	0000a517          	auipc	a0,0xa
    80207b9e:	e0650513          	addi	a0,a0,-506 # 802119a0 <digits+0xd8>
    80207ba2:	fffff097          	auipc	ra,0xfffff
    80207ba6:	376080e7          	jalr	886(ra) # 80206f18 <printf>
	__debug_info("kmalloc init\n");
    80207baa:	0000a517          	auipc	a0,0xa
    80207bae:	e1650513          	addi	a0,a0,-490 # 802119c0 <digits+0xf8>
    80207bb2:	fffff097          	auipc	ra,0xfffff
    80207bb6:	52c080e7          	jalr	1324(ra) # 802070de <__debug_info>
}
    80207bba:	60e2                	ld	ra,24(sp)
    80207bbc:	6442                	ld	s0,16(sp)
    80207bbe:	64a2                	ld	s1,8(sp)
    80207bc0:	6105                	addi	sp,sp,32
    80207bc2:	8082                	ret

0000000080207bc4 <kmalloc>:
	// leave critical section 

	return tmp;
}

void *kmalloc(uint size) {
    80207bc4:	7179                	addi	sp,sp,-48
    80207bc6:	f406                	sd	ra,40(sp)
    80207bc8:	f022                	sd	s0,32(sp)
    80207bca:	ec26                	sd	s1,24(sp)
    80207bcc:	e84a                	sd	s2,16(sp)
    80207bce:	e44e                	sd	s3,8(sp)
    80207bd0:	1800                	addi	s0,sp,48
	// border check for `size`
	if (KMEM_OBJ_MIN_SIZE > size) {
    80207bd2:	47fd                	li	a5,31
    80207bd4:	08a7fd63          	bgeu	a5,a0,80207c6e <kmalloc+0xaa>
    80207bd8:	89aa                	mv	s3,a0
		//__debug_warn("kmalloc size %d too small, reset to %d\n", size, KMEM_OBJ_MIN_SIZE);
		size = KMEM_OBJ_MIN_SIZE;
	}
	else if (KMEM_OBJ_MAX_SIZE < size) {
    80207bda:	6785                	lui	a5,0x1
    80207bdc:	fd078793          	addi	a5,a5,-48 # fd0 <_entry-0x801ff030>
    80207be0:	06a7ec63          	bltu	a5,a0,80207c58 <kmalloc+0x94>
		__debug_error("kmalloc size %d out of border\n", size);
		return NULL;
	}
	struct kmem_allocator *alloc = get_allocator(size);
    80207be4:	02099513          	slli	a0,s3,0x20
    80207be8:	9101                	srli	a0,a0,0x20
    80207bea:	00000097          	auipc	ra,0x0
    80207bee:	13a080e7          	jalr	314(ra) # 80207d24 <get_allocator>
    80207bf2:	84aa                	mv	s1,a0

	// if failed to alloc 
	if (NULL == alloc) {
    80207bf4:	c141                	beqz	a0,80207c74 <kmalloc+0xb0>
		__debug_error("kmalloc fail to get allocator\n");
		return NULL;
	}

	// enter critical section `alloc`
	acquire(&(alloc->lock));
    80207bf6:	fffff097          	auipc	ra,0xfffff
    80207bfa:	f78080e7          	jalr	-136(ra) # 80206b6e <acquire>

	// if no page available 
	if (NULL == alloc->list) {
    80207bfe:	0204b903          	ld	s2,32(s1)
    80207c02:	08090363          	beqz	s2,80207c88 <kmalloc+0xc4>
		tmp->table[capa - 1] = TABLE_END;

		alloc->list = tmp;
	}

	alloc->nobjs++;
    80207c06:	01e4d783          	lhu	a5,30(s1)
    80207c0a:	2785                	addiw	a5,a5,1
    80207c0c:	00f49f23          	sh	a5,30(s1)

	// now the allocator should be ready 
	struct kmem_node *node = alloc->list;
    80207c10:	709c                	ld	a5,32(s1)
	void *ret;		// the address to be returned 
	ret = (void*)(node->config.obj_addr + 
			((uint64)node->avail) * node->config.obj_size);
    80207c12:	0187c703          	lbu	a4,24(a5)
    80207c16:	0087b903          	ld	s2,8(a5)
    80207c1a:	03270933          	mul	s2,a4,s2
	ret = (void*)(node->config.obj_addr + 
    80207c1e:	6b94                	ld	a3,16(a5)
    80207c20:	9936                	add	s2,s2,a3
	// update `avail` and `cnt`
	node->cnt += 1;
    80207c22:	0197c683          	lbu	a3,25(a5)
    80207c26:	2685                	addiw	a3,a3,1
    80207c28:	00d78ca3          	sb	a3,25(a5)
	node->avail = node->table[node->avail];
    80207c2c:	973e                	add	a4,a4,a5
    80207c2e:	01a74703          	lbu	a4,26(a4)
    80207c32:	00e78c23          	sb	a4,24(a5)

	// if kmem_node is fully allocated 
	if (TABLE_END == node->avail) {
    80207c36:	0ff00693          	li	a3,255
    80207c3a:	0ed70263          	beq	a4,a3,80207d1e <kmalloc+0x15a>
		alloc->list = node->next;
	}

	release(&(alloc->lock));
    80207c3e:	8526                	mv	a0,s1
    80207c40:	fffff097          	auipc	ra,0xfffff
    80207c44:	f82080e7          	jalr	-126(ra) # 80206bc2 <release>
	// leave critical section `alloc`

	return ret;
}
    80207c48:	854a                	mv	a0,s2
    80207c4a:	70a2                	ld	ra,40(sp)
    80207c4c:	7402                	ld	s0,32(sp)
    80207c4e:	64e2                	ld	s1,24(sp)
    80207c50:	6942                	ld	s2,16(sp)
    80207c52:	69a2                	ld	s3,8(sp)
    80207c54:	6145                	addi	sp,sp,48
    80207c56:	8082                	ret
		__debug_error("kmalloc size %d out of border\n", size);
    80207c58:	85aa                	mv	a1,a0
    80207c5a:	0000a517          	auipc	a0,0xa
    80207c5e:	d7650513          	addi	a0,a0,-650 # 802119d0 <digits+0x108>
    80207c62:	00000097          	auipc	ra,0x0
    80207c66:	818080e7          	jalr	-2024(ra) # 8020747a <__debug_error>
		return NULL;
    80207c6a:	4901                	li	s2,0
    80207c6c:	bff1                	j	80207c48 <kmalloc+0x84>
		size = KMEM_OBJ_MIN_SIZE;
    80207c6e:	02000993          	li	s3,32
    80207c72:	bf8d                	j	80207be4 <kmalloc+0x20>
		__debug_error("kmalloc fail to get allocator\n");
    80207c74:	0000a517          	auipc	a0,0xa
    80207c78:	d7c50513          	addi	a0,a0,-644 # 802119f0 <digits+0x128>
    80207c7c:	fffff097          	auipc	ra,0xfffff
    80207c80:	7fe080e7          	jalr	2046(ra) # 8020747a <__debug_error>
		return NULL;
    80207c84:	8926                	mv	s2,s1
    80207c86:	b7c9                	j	80207c48 <kmalloc+0x84>
		struct kmem_node *tmp = (struct kmem_node*)allocpage();
    80207c88:	00000097          	auipc	ra,0x0
    80207c8c:	cb4080e7          	jalr	-844(ra) # 8020793c <_allocpage>
    80207c90:	86aa                	mv	a3,a0
		if (NULL == tmp) {
    80207c92:	c925                	beqz	a0,80207d02 <kmalloc+0x13e>
		alloc->npages++;
    80207c94:	01c4d783          	lhu	a5,28(s1)
    80207c98:	2785                	addiw	a5,a5,1
    80207c9a:	00f49e23          	sh	a5,28(s1)
		uint roundup_size = ROUNDUP16(size);
    80207c9e:	29bd                	addiw	s3,s3,15
    80207ca0:	ff09f993          	andi	s3,s3,-16
    80207ca4:	0009871b          	sext.w	a4,s3
		uint8 capa = _calc_capa(roundup_size);
    80207ca8:	2985                	addiw	s3,s3,1
    80207caa:	6785                	lui	a5,0x1
    80207cac:	3781                	addiw	a5,a5,-32
    80207cae:	0337d9bb          	divuw	s3,a5,s3
		tmp->next = NULL;
    80207cb2:	00053023          	sd	zero,0(a0)
		tmp->config.obj_size = roundup_size;
    80207cb6:	02071793          	slli	a5,a4,0x20
    80207cba:	9381                	srli	a5,a5,0x20
    80207cbc:	e51c                	sd	a5,8(a0)
		tmp->config.obj_addr = (uint64)tmp + ROUNDUP16(KMEM_NODE_FIX + capa);
    80207cbe:	0ff9f793          	andi	a5,s3,255
    80207cc2:	02978793          	addi	a5,a5,41 # 1029 <_entry-0x801fefd7>
    80207cc6:	9bc1                	andi	a5,a5,-16
    80207cc8:	97aa                	add	a5,a5,a0
    80207cca:	e91c                	sd	a5,16(a0)
		tmp->avail = 0;
    80207ccc:	00050c23          	sb	zero,24(a0)
		tmp->cnt = 0;
    80207cd0:	00050ca3          	sb	zero,25(a0)
		for (uint8 i = 0; i < capa - 1; i ++) {
    80207cd4:	0ff9f993          	andi	s3,s3,255
    80207cd8:	39fd                	addiw	s3,s3,-1
    80207cda:	01305e63          	blez	s3,80207cf6 <kmalloc+0x132>
    80207cde:	4781                	li	a5,0
    80207ce0:	4701                	li	a4,0
			tmp->table[i] = i + 1;
    80207ce2:	2785                	addiw	a5,a5,1
    80207ce4:	0ff7f793          	andi	a5,a5,255
    80207ce8:	9736                	add	a4,a4,a3
    80207cea:	00f70d23          	sb	a5,26(a4)
		for (uint8 i = 0; i < capa - 1; i ++) {
    80207cee:	0007871b          	sext.w	a4,a5
    80207cf2:	ff3748e3          	blt	a4,s3,80207ce2 <kmalloc+0x11e>
		tmp->table[capa - 1] = TABLE_END;
    80207cf6:	99aa                	add	s3,s3,a0
    80207cf8:	57fd                	li	a5,-1
    80207cfa:	00f98d23          	sb	a5,26(s3)
		alloc->list = tmp;
    80207cfe:	f088                	sd	a0,32(s1)
    80207d00:	b719                	j	80207c06 <kmalloc+0x42>
			release(&(alloc->lock));
    80207d02:	8526                	mv	a0,s1
    80207d04:	fffff097          	auipc	ra,0xfffff
    80207d08:	ebe080e7          	jalr	-322(ra) # 80206bc2 <release>
			__debug_warn("kmalloc fail to allocate a node\n");
    80207d0c:	0000a517          	auipc	a0,0xa
    80207d10:	d0450513          	addi	a0,a0,-764 # 80211a10 <digits+0x148>
    80207d14:	fffff097          	auipc	ra,0xfffff
    80207d18:	590080e7          	jalr	1424(ra) # 802072a4 <__debug_warn>
			return NULL;
    80207d1c:	b735                	j	80207c48 <kmalloc+0x84>
		alloc->list = node->next;
    80207d1e:	639c                	ld	a5,0(a5)
    80207d20:	f09c                	sd	a5,32(s1)
    80207d22:	bf31                	j	80207c3e <kmalloc+0x7a>

0000000080207d24 <get_allocator>:
static struct kmem_allocator *get_allocator(uint64 raw_size) {
    80207d24:	7179                	addi	sp,sp,-48
    80207d26:	f406                	sd	ra,40(sp)
    80207d28:	f022                	sd	s0,32(sp)
    80207d2a:	ec26                	sd	s1,24(sp)
    80207d2c:	e84a                	sd	s2,16(sp)
    80207d2e:	e44e                	sd	s3,8(sp)
    80207d30:	1800                	addi	s0,sp,48
	uint64 roundup_size = ROUNDUP16(raw_size);
    80207d32:	00f50913          	addi	s2,a0,15
    80207d36:	ff097913          	andi	s2,s2,-16
	uint64 hash = _hash(roundup_size);
    80207d3a:	49c5                	li	s3,17
    80207d3c:	033979b3          	remu	s3,s2,s3
	for (struct kmem_allocator *tmp = kmem_table[hash]; 
    80207d40:	00399713          	slli	a4,s3,0x3
    80207d44:	00566797          	auipc	a5,0x566
    80207d48:	4a478793          	addi	a5,a5,1188 # 8076e1e8 <kmem_adam>
    80207d4c:	97ba                	add	a5,a5,a4
    80207d4e:	7b84                	ld	s1,48(a5)
    80207d50:	c499                	beqz	s1,80207d5e <get_allocator+0x3a>
		if (roundup_size == tmp->obj_size) {
    80207d52:	0184e783          	lwu	a5,24(s1)
    80207d56:	09278463          	beq	a5,s2,80207dde <get_allocator+0xba>
			NULL != tmp; tmp = tmp->next) {
    80207d5a:	7484                	ld	s1,40(s1)
	for (struct kmem_allocator *tmp = kmem_table[hash]; 
    80207d5c:	f8fd                	bnez	s1,80207d52 <get_allocator+0x2e>
	acquire(&kmem_table_lock);
    80207d5e:	00566517          	auipc	a0,0x566
    80207d62:	54250513          	addi	a0,a0,1346 # 8076e2a0 <kmem_table_lock>
    80207d66:	fffff097          	auipc	ra,0xfffff
    80207d6a:	e08080e7          	jalr	-504(ra) # 80206b6e <acquire>
	if (NULL != kmem_table[hash] && 
    80207d6e:	00399713          	slli	a4,s3,0x3
    80207d72:	00566797          	auipc	a5,0x566
    80207d76:	47678793          	addi	a5,a5,1142 # 8076e1e8 <kmem_adam>
    80207d7a:	97ba                	add	a5,a5,a4
    80207d7c:	7b9c                	ld	a5,48(a5)
    80207d7e:	c789                	beqz	a5,80207d88 <get_allocator+0x64>
			kmem_table[hash]->obj_size == roundup_size) {
    80207d80:	0187e783          	lwu	a5,24(a5)
	if (NULL != kmem_table[hash] && 
    80207d84:	07278563          	beq	a5,s2,80207dee <get_allocator+0xca>
	struct kmem_allocator *tmp = _malloc_allocator();
    80207d88:	03000513          	li	a0,48
    80207d8c:	00000097          	auipc	ra,0x0
    80207d90:	e38080e7          	jalr	-456(ra) # 80207bc4 <kmalloc>
    80207d94:	84aa                	mv	s1,a0
	if (NULL != tmp) {
    80207d96:	cd05                	beqz	a0,80207dce <get_allocator+0xaa>
		initlock(&(tmp->lock), "kmem_alloc");
    80207d98:	0000a597          	auipc	a1,0xa
    80207d9c:	ca058593          	addi	a1,a1,-864 # 80211a38 <digits+0x170>
    80207da0:	fffff097          	auipc	ra,0xfffff
    80207da4:	d8a080e7          	jalr	-630(ra) # 80206b2a <initlock>
		tmp->list = NULL;
    80207da8:	0204b023          	sd	zero,32(s1)
		tmp->obj_size = roundup_size;
    80207dac:	0124ac23          	sw	s2,24(s1)
		tmp->npages = 0;
    80207db0:	00049e23          	sh	zero,28(s1)
		tmp->nobjs = 0;
    80207db4:	00049f23          	sh	zero,30(s1)
		tmp->next = kmem_table[hash];
    80207db8:	098e                	slli	s3,s3,0x3
    80207dba:	00566797          	auipc	a5,0x566
    80207dbe:	42e78793          	addi	a5,a5,1070 # 8076e1e8 <kmem_adam>
    80207dc2:	99be                	add	s3,s3,a5
    80207dc4:	0309b783          	ld	a5,48(s3)
    80207dc8:	f49c                	sd	a5,40(s1)
		kmem_table[hash] = tmp;
    80207dca:	0299b823          	sd	s1,48(s3)
	release(&kmem_table_lock);
    80207dce:	00566517          	auipc	a0,0x566
    80207dd2:	4d250513          	addi	a0,a0,1234 # 8076e2a0 <kmem_table_lock>
    80207dd6:	fffff097          	auipc	ra,0xfffff
    80207dda:	dec080e7          	jalr	-532(ra) # 80206bc2 <release>
}
    80207dde:	8526                	mv	a0,s1
    80207de0:	70a2                	ld	ra,40(sp)
    80207de2:	7402                	ld	s0,32(sp)
    80207de4:	64e2                	ld	s1,24(sp)
    80207de6:	6942                	ld	s2,16(sp)
    80207de8:	69a2                	ld	s3,8(sp)
    80207dea:	6145                	addi	sp,sp,48
    80207dec:	8082                	ret
		release(&kmem_table_lock);
    80207dee:	00566517          	auipc	a0,0x566
    80207df2:	4b250513          	addi	a0,a0,1202 # 8076e2a0 <kmem_table_lock>
    80207df6:	fffff097          	auipc	ra,0xfffff
    80207dfa:	dcc080e7          	jalr	-564(ra) # 80206bc2 <release>
		return kmem_table[hash];
    80207dfe:	098e                	slli	s3,s3,0x3
    80207e00:	00566797          	auipc	a5,0x566
    80207e04:	3e878793          	addi	a5,a5,1000 # 8076e1e8 <kmem_adam>
    80207e08:	97ce                	add	a5,a5,s3
    80207e0a:	7b84                	ld	s1,48(a5)
    80207e0c:	bfc9                	j	80207dde <get_allocator+0xba>

0000000080207e0e <kfree>:

// `addr` must be an address that's allocated before, pass an unallocated 
// address may cause undetectable troubles. 
void kfree(void *addr) {
    80207e0e:	7179                	addi	sp,sp,-48
    80207e10:	f406                	sd	ra,40(sp)
    80207e12:	f022                	sd	s0,32(sp)
    80207e14:	ec26                	sd	s1,24(sp)
    80207e16:	e84a                	sd	s2,16(sp)
    80207e18:	e44e                	sd	s3,8(sp)
    80207e1a:	e052                	sd	s4,0(sp)
    80207e1c:	1800                	addi	s0,sp,48
    80207e1e:	892a                	mv	s2,a0
	struct kmem_node *node = (struct kmem_node*)PGROUNDDOWN((uint64)addr);
    80207e20:	74fd                	lui	s1,0xfffff
    80207e22:	8ce9                	and	s1,s1,a0
    80207e24:	8a26                	mv	s4,s1
	uint8 avail = ((uint64)addr - node->config.obj_addr) / node->config.obj_size;
    80207e26:	6488                	ld	a0,8(s1)
    80207e28:	689c                	ld	a5,16(s1)
    80207e2a:	40f90933          	sub	s2,s2,a5
    80207e2e:	02a95933          	divu	s2,s2,a0
    80207e32:	0ff97913          	andi	s2,s2,255

	struct kmem_allocator *alloc = get_allocator(node->config.obj_size);
    80207e36:	00000097          	auipc	ra,0x0
    80207e3a:	eee080e7          	jalr	-274(ra) # 80207d24 <get_allocator>
    80207e3e:	89aa                	mv	s3,a0

	//__debug_info("kfree alloc: %p, addr: %p\n", alloc, addr);
	// enter critical section `alloc`
	acquire(&(alloc->lock));
    80207e40:	fffff097          	auipc	ra,0xfffff
    80207e44:	d2e080e7          	jalr	-722(ra) # 80206b6e <acquire>

	alloc->nobjs--;
    80207e48:	01e9d783          	lhu	a5,30(s3)
    80207e4c:	37fd                	addiw	a5,a5,-1
    80207e4e:	00f99f23          	sh	a5,30(s3)

	// if `node` used to be fully allocated, then re-link it to `alloc`
	if (TABLE_END == node->avail) {
    80207e52:	0184c703          	lbu	a4,24(s1) # fffffffffffff018 <kernel_end+0xffffffff7f890018>
    80207e56:	0ff00793          	li	a5,255
    80207e5a:	06f70563          	beq	a4,a5,80207ec4 <kfree+0xb6>
		alloc->list = node;
		//__debug_info("kfree pickup\n");
	}

	// node should be on alloc->list 
	node->table[avail] = node->avail;
    80207e5e:	009907b3          	add	a5,s2,s1
    80207e62:	0184c703          	lbu	a4,24(s1)
    80207e66:	00e78d23          	sb	a4,26(a5)
	node->avail = avail;
    80207e6a:	01248c23          	sb	s2,24(s1)
	node->cnt -= 1;
    80207e6e:	0194c783          	lbu	a5,25(s1)
    80207e72:	37fd                	addiw	a5,a5,-1
    80207e74:	0ff7f793          	andi	a5,a5,255
    80207e78:	00f48ca3          	sb	a5,25(s1)

	// if kmem_node has no allocated obj 
	if (0 == node->cnt) {
    80207e7c:	e79d                	bnez	a5,80207eaa <kfree+0x9c>
		//__debug_info("kfree drop\n");
		struct kmem_node **pprev = &(alloc->list);
		struct kmem_node *tmp = alloc->list;
    80207e7e:	0209b783          	ld	a5,32(s3)

		while (NULL != tmp && node != tmp) {
    80207e82:	c7b9                	beqz	a5,80207ed0 <kfree+0xc2>
    80207e84:	06fa0663          	beq	s4,a5,80207ef0 <kfree+0xe2>
			pprev = &(tmp->next);
			tmp = tmp->next;
    80207e88:	873e                	mv	a4,a5
    80207e8a:	639c                	ld	a5,0(a5)
		while (NULL != tmp && node != tmp) {
    80207e8c:	c3b1                	beqz	a5,80207ed0 <kfree+0xc2>
    80207e8e:	fefa1de3          	bne	s4,a5,80207e88 <kfree+0x7a>
			printf("%p -> ", it);
		}
		printf("\n");
		#endif 

		*pprev = tmp->next;
    80207e92:	639c                	ld	a5,0(a5)
    80207e94:	e31c                	sd	a5,0(a4)
		//__debug_info("kfree alloc->list = %p\n", alloc->list);
		//__debug_info("kfree tmp = %p\n", tmp);

		freepage(node);
    80207e96:	8526                	mv	a0,s1
    80207e98:	00000097          	auipc	ra,0x0
    80207e9c:	b44080e7          	jalr	-1212(ra) # 802079dc <_freepage>
		alloc->npages--;
    80207ea0:	01c9d783          	lhu	a5,28(s3)
    80207ea4:	37fd                	addiw	a5,a5,-1
    80207ea6:	00f99e23          	sh	a5,28(s3)
	}

	release(&(alloc->lock));
    80207eaa:	854e                	mv	a0,s3
    80207eac:	fffff097          	auipc	ra,0xfffff
    80207eb0:	d16080e7          	jalr	-746(ra) # 80206bc2 <release>
	// leave critical section `alloc`
}
    80207eb4:	70a2                	ld	ra,40(sp)
    80207eb6:	7402                	ld	s0,32(sp)
    80207eb8:	64e2                	ld	s1,24(sp)
    80207eba:	6942                	ld	s2,16(sp)
    80207ebc:	69a2                	ld	s3,8(sp)
    80207ebe:	6a02                	ld	s4,0(sp)
    80207ec0:	6145                	addi	sp,sp,48
    80207ec2:	8082                	ret
		node->next = alloc->list;
    80207ec4:	0209b783          	ld	a5,32(s3)
    80207ec8:	e09c                	sd	a5,0(s1)
		alloc->list = node;
    80207eca:	0299b023          	sd	s1,32(s3)
    80207ece:	bf41                	j	80207e5e <kfree+0x50>
			__debug_error("free NULL == tmp\n");
    80207ed0:	0000a517          	auipc	a0,0xa
    80207ed4:	b7850513          	addi	a0,a0,-1160 # 80211a48 <digits+0x180>
    80207ed8:	fffff097          	auipc	ra,0xfffff
    80207edc:	5a2080e7          	jalr	1442(ra) # 8020747a <__debug_error>
			panic("kfree(): linked list broken!\n");
    80207ee0:	0000a517          	auipc	a0,0xa
    80207ee4:	b8050513          	addi	a0,a0,-1152 # 80211a60 <digits+0x198>
    80207ee8:	fffff097          	auipc	ra,0xfffff
    80207eec:	fe6080e7          	jalr	-26(ra) # 80206ece <panic>
		struct kmem_node **pprev = &(alloc->list);
    80207ef0:	02098713          	addi	a4,s3,32
    80207ef4:	bf79                	j	80207e92 <kfree+0x84>

0000000080207ef6 <kvminithart>:

// Switch h/w page table register to the kernel's page table,
// and enable paging.
void
kvminithart()
{
    80207ef6:	1141                	addi	sp,sp,-16
    80207ef8:	e406                	sd	ra,8(sp)
    80207efa:	e022                	sd	s0,0(sp)
    80207efc:	0800                	addi	s0,sp,16
  w_satp(MAKE_SATP(kernel_pagetable));
    80207efe:	00566797          	auipc	a5,0x566
    80207f02:	3ba7b783          	ld	a5,954(a5) # 8076e2b8 <kernel_pagetable>
    80207f06:	83b1                	srli	a5,a5,0xc
    80207f08:	577d                	li	a4,-1
    80207f0a:	177e                	slli	a4,a4,0x3f
    80207f0c:	8fd9                	or	a5,a5,a4
  asm volatile("csrw satp, %0" : : "r" (x));
    80207f0e:	18079073          	csrw	satp,a5
  asm volatile("sfence.vma");
    80207f12:	12000073          	sfence.vma
  // reg_info();
  sfence_vma();
  __debug_info("kvminithart\n");
    80207f16:	0000a517          	auipc	a0,0xa
    80207f1a:	b6a50513          	addi	a0,a0,-1174 # 80211a80 <digits+0x1b8>
    80207f1e:	fffff097          	auipc	ra,0xfffff
    80207f22:	1c0080e7          	jalr	448(ra) # 802070de <__debug_info>
}
    80207f26:	60a2                	ld	ra,8(sp)
    80207f28:	6402                	ld	s0,0(sp)
    80207f2a:	0141                	addi	sp,sp,16
    80207f2c:	8082                	ret

0000000080207f2e <walk>:
  }
}

pte_t *
walk(pagetable_t pagetable, uint64 va, int alloc)
{
    80207f2e:	715d                	addi	sp,sp,-80
    80207f30:	e486                	sd	ra,72(sp)
    80207f32:	e0a2                	sd	s0,64(sp)
    80207f34:	fc26                	sd	s1,56(sp)
    80207f36:	f84a                	sd	s2,48(sp)
    80207f38:	f44e                	sd	s3,40(sp)
    80207f3a:	f052                	sd	s4,32(sp)
    80207f3c:	ec56                	sd	s5,24(sp)
    80207f3e:	e85a                	sd	s6,16(sp)
    80207f40:	e45e                	sd	s7,8(sp)
    80207f42:	0880                	addi	s0,sp,80
    80207f44:	84aa                	mv	s1,a0
    80207f46:	89ae                	mv	s3,a1
    80207f48:	8b32                	mv	s6,a2
  if(va >= MAXVA)
    80207f4a:	57fd                	li	a5,-1
    80207f4c:	83e9                	srli	a5,a5,0x1a
    80207f4e:	4af9                	li	s5,30
    panic("walk");

  for(int level = 2; level > 0; level--) {
    80207f50:	4bb1                	li	s7,12
  if(va >= MAXVA)
    80207f52:	04b7f363          	bgeu	a5,a1,80207f98 <walk+0x6a>
    panic("walk");
    80207f56:	0000a517          	auipc	a0,0xa
    80207f5a:	b3a50513          	addi	a0,a0,-1222 # 80211a90 <digits+0x1c8>
    80207f5e:	fffff097          	auipc	ra,0xfffff
    80207f62:	f70080e7          	jalr	-144(ra) # 80206ece <panic>
    pte_t *pte = &pagetable[PX(level, va)];
    if(*pte & PTE_V) {
      pagetable = (pagetable_t)PTE2PA(*pte);
    } else {
      if(!alloc || (pagetable = (pde_t*)allocpage()) == NULL)
    80207f66:	060b0863          	beqz	s6,80207fd6 <walk+0xa8>
    80207f6a:	00000097          	auipc	ra,0x0
    80207f6e:	9d2080e7          	jalr	-1582(ra) # 8020793c <_allocpage>
    80207f72:	8a2a                	mv	s4,a0
    80207f74:	84aa                	mv	s1,a0
    80207f76:	c135                	beqz	a0,80207fda <walk+0xac>
        return NULL;
      
      memset(pagetable, 0, PGSIZE);
    80207f78:	6605                	lui	a2,0x1
    80207f7a:	4581                	li	a1,0
    80207f7c:	ffff9097          	auipc	ra,0xffff9
    80207f80:	df8080e7          	jalr	-520(ra) # 80200d74 <memset>
      *pte = PA2PTE(pagetable) | PTE_V;
    80207f84:	00ca5a13          	srli	s4,s4,0xc
    80207f88:	0a2a                	slli	s4,s4,0xa
    80207f8a:	001a6a13          	ori	s4,s4,1
    80207f8e:	01493023          	sd	s4,0(s2)
  for(int level = 2; level > 0; level--) {
    80207f92:	3add                	addiw	s5,s5,-9
    80207f94:	037a8063          	beq	s5,s7,80207fb4 <walk+0x86>
    pte_t *pte = &pagetable[PX(level, va)];
    80207f98:	0159d933          	srl	s2,s3,s5
    80207f9c:	1ff97913          	andi	s2,s2,511
    80207fa0:	090e                	slli	s2,s2,0x3
    80207fa2:	9926                	add	s2,s2,s1
    if(*pte & PTE_V) {
    80207fa4:	00093483          	ld	s1,0(s2)
    80207fa8:	0014f793          	andi	a5,s1,1
    80207fac:	dfcd                	beqz	a5,80207f66 <walk+0x38>
      pagetable = (pagetable_t)PTE2PA(*pte);
    80207fae:	80a9                	srli	s1,s1,0xa
    80207fb0:	04b2                	slli	s1,s1,0xc
    80207fb2:	b7c5                	j	80207f92 <walk+0x64>
    }
  }
  return &pagetable[PX(0, va)];
    80207fb4:	00c9d513          	srli	a0,s3,0xc
    80207fb8:	1ff57513          	andi	a0,a0,511
    80207fbc:	050e                	slli	a0,a0,0x3
    80207fbe:	9526                	add	a0,a0,s1
}
    80207fc0:	60a6                	ld	ra,72(sp)
    80207fc2:	6406                	ld	s0,64(sp)
    80207fc4:	74e2                	ld	s1,56(sp)
    80207fc6:	7942                	ld	s2,48(sp)
    80207fc8:	79a2                	ld	s3,40(sp)
    80207fca:	7a02                	ld	s4,32(sp)
    80207fcc:	6ae2                	ld	s5,24(sp)
    80207fce:	6b42                	ld	s6,16(sp)
    80207fd0:	6ba2                	ld	s7,8(sp)
    80207fd2:	6161                	addi	sp,sp,80
    80207fd4:	8082                	ret
        return NULL;
    80207fd6:	4501                	li	a0,0
    80207fd8:	b7e5                	j	80207fc0 <walk+0x92>
    80207fda:	4501                	li	a0,0
    80207fdc:	b7d5                	j	80207fc0 <walk+0x92>

0000000080207fde <mappages>:
{
    80207fde:	715d                	addi	sp,sp,-80
    80207fe0:	e486                	sd	ra,72(sp)
    80207fe2:	e0a2                	sd	s0,64(sp)
    80207fe4:	fc26                	sd	s1,56(sp)
    80207fe6:	f84a                	sd	s2,48(sp)
    80207fe8:	f44e                	sd	s3,40(sp)
    80207fea:	f052                	sd	s4,32(sp)
    80207fec:	ec56                	sd	s5,24(sp)
    80207fee:	e85a                	sd	s6,16(sp)
    80207ff0:	e45e                	sd	s7,8(sp)
    80207ff2:	0880                	addi	s0,sp,80
    80207ff4:	8b2a                	mv	s6,a0
    80207ff6:	8aba                	mv	s5,a4
  a = PGROUNDDOWN(va);
    80207ff8:	777d                	lui	a4,0xfffff
    80207ffa:	00e5f7b3          	and	a5,a1,a4
  last = PGROUNDDOWN(va + size - 1);
    80207ffe:	167d                	addi	a2,a2,-1
    80208000:	00b609b3          	add	s3,a2,a1
    80208004:	00e9f9b3          	and	s3,s3,a4
  a = PGROUNDDOWN(va);
    80208008:	893e                	mv	s2,a5
    8020800a:	40f68a33          	sub	s4,a3,a5
    a += PGSIZE;
    8020800e:	6b85                	lui	s7,0x1
    80208010:	a821                	j	80208028 <mappages+0x4a>
      *pte = PA2PTE(pa) | perm | PTE_V | PTE_A | PTE_D;
    80208012:	80b1                	srli	s1,s1,0xc
    80208014:	00a49793          	slli	a5,s1,0xa
    80208018:	0157e7b3          	or	a5,a5,s5
    8020801c:	0c17e793          	ori	a5,a5,193
    80208020:	e11c                	sd	a5,0(a0)
      return 0;
    80208022:	4501                	li	a0,0
    80208024:	a81d                	j	8020805a <mappages+0x7c>
    a += PGSIZE;
    80208026:	995e                	add	s2,s2,s7
  for(;;){
    80208028:	012a04b3          	add	s1,s4,s2
    if((pte = walk(pagetable, a, 1)) == NULL)
    8020802c:	4605                	li	a2,1
    8020802e:	85ca                	mv	a1,s2
    80208030:	855a                	mv	a0,s6
    80208032:	00000097          	auipc	ra,0x0
    80208036:	efc080e7          	jalr	-260(ra) # 80207f2e <walk>
    8020803a:	cd19                	beqz	a0,80208058 <mappages+0x7a>
    if(*pte & PTE_V){
    8020803c:	611c                	ld	a5,0(a0)
    8020803e:	8b85                	andi	a5,a5,1
    80208040:	fbe9                	bnez	a5,80208012 <mappages+0x34>
    *pte = PA2PTE(pa) | perm | PTE_V | PTE_A | PTE_D;
    80208042:	80b1                	srli	s1,s1,0xc
    80208044:	04aa                	slli	s1,s1,0xa
    80208046:	0154e4b3          	or	s1,s1,s5
    8020804a:	0c14e493          	ori	s1,s1,193
    8020804e:	e104                	sd	s1,0(a0)
    if(a == last)
    80208050:	fd391be3          	bne	s2,s3,80208026 <mappages+0x48>
  return 0;
    80208054:	4501                	li	a0,0
    80208056:	a011                	j	8020805a <mappages+0x7c>
      return -1;
    80208058:	557d                	li	a0,-1
}
    8020805a:	60a6                	ld	ra,72(sp)
    8020805c:	6406                	ld	s0,64(sp)
    8020805e:	74e2                	ld	s1,56(sp)
    80208060:	7942                	ld	s2,48(sp)
    80208062:	79a2                	ld	s3,40(sp)
    80208064:	7a02                	ld	s4,32(sp)
    80208066:	6ae2                	ld	s5,24(sp)
    80208068:	6b42                	ld	s6,16(sp)
    8020806a:	6ba2                	ld	s7,8(sp)
    8020806c:	6161                	addi	sp,sp,80
    8020806e:	8082                	ret

0000000080208070 <kvmmap>:
{
    80208070:	1141                	addi	sp,sp,-16
    80208072:	e406                	sd	ra,8(sp)
    80208074:	e022                	sd	s0,0(sp)
    80208076:	0800                	addi	s0,sp,16
    80208078:	8736                	mv	a4,a3
  if(mappages(kernel_pagetable, va, sz, pa, perm) != 0)
    8020807a:	86ae                	mv	a3,a1
    8020807c:	85aa                	mv	a1,a0
    8020807e:	00566517          	auipc	a0,0x566
    80208082:	23a53503          	ld	a0,570(a0) # 8076e2b8 <kernel_pagetable>
    80208086:	00000097          	auipc	ra,0x0
    8020808a:	f58080e7          	jalr	-168(ra) # 80207fde <mappages>
    8020808e:	e509                	bnez	a0,80208098 <kvmmap+0x28>
}
    80208090:	60a2                	ld	ra,8(sp)
    80208092:	6402                	ld	s0,0(sp)
    80208094:	0141                	addi	sp,sp,16
    80208096:	8082                	ret
    panic("kvmmap");
    80208098:	0000a517          	auipc	a0,0xa
    8020809c:	a0050513          	addi	a0,a0,-1536 # 80211a98 <digits+0x1d0>
    802080a0:	fffff097          	auipc	ra,0xfffff
    802080a4:	e2e080e7          	jalr	-466(ra) # 80206ece <panic>

00000000802080a8 <kvminit>:
{
    802080a8:	1101                	addi	sp,sp,-32
    802080aa:	ec06                	sd	ra,24(sp)
    802080ac:	e822                	sd	s0,16(sp)
    802080ae:	e426                	sd	s1,8(sp)
    802080b0:	1000                	addi	s0,sp,32
  kernel_pagetable = (pagetable_t) allocpage();
    802080b2:	00000097          	auipc	ra,0x0
    802080b6:	88a080e7          	jalr	-1910(ra) # 8020793c <_allocpage>
    802080ba:	00566797          	auipc	a5,0x566
    802080be:	1ea7bf23          	sd	a0,510(a5) # 8076e2b8 <kernel_pagetable>
  memset(kernel_pagetable, 0, PGSIZE);
    802080c2:	6605                	lui	a2,0x1
    802080c4:	4581                	li	a1,0
    802080c6:	ffff9097          	auipc	ra,0xffff9
    802080ca:	cae080e7          	jalr	-850(ra) # 80200d74 <memset>
  kvmmap(CLINT_V, CLINT, 0x10000, PTE_R | PTE_W);
    802080ce:	4699                	li	a3,6
    802080d0:	6641                	lui	a2,0x10
    802080d2:	020005b7          	lui	a1,0x2000
    802080d6:	01f81537          	lui	a0,0x1f81
    802080da:	0536                	slli	a0,a0,0xd
    802080dc:	00000097          	auipc	ra,0x0
    802080e0:	f94080e7          	jalr	-108(ra) # 80208070 <kvmmap>
  kvmmap(PLIC_V, PLIC, 0x400000, PTE_R | PTE_W);
    802080e4:	4699                	li	a3,6
    802080e6:	00400637          	lui	a2,0x400
    802080ea:	0c0005b7          	lui	a1,0xc000
    802080ee:	00fc3537          	lui	a0,0xfc3
    802080f2:	053a                	slli	a0,a0,0xe
    802080f4:	00000097          	auipc	ra,0x0
    802080f8:	f7c080e7          	jalr	-132(ra) # 80208070 <kvmmap>
  kvmmap(RAMDISK, RAMDISK, 0x5000000, PTE_R | PTE_W);
    802080fc:	4699                	li	a3,6
    802080fe:	05000637          	lui	a2,0x5000
    80208102:	45a5                	li	a1,9
    80208104:	05f2                	slli	a1,a1,0x1c
    80208106:	852e                	mv	a0,a1
    80208108:	00000097          	auipc	ra,0x0
    8020810c:	f68080e7          	jalr	-152(ra) # 80208070 <kvmmap>
  kvmmap(KERNBASE, KERNBASE, (uint64)etext - KERNBASE, PTE_R|PTE_X);
    80208110:	00007497          	auipc	s1,0x7
    80208114:	ef048493          	addi	s1,s1,-272 # 8020f000 <_trampoline>
    80208118:	46a9                	li	a3,10
    8020811a:	bff00613          	li	a2,-1025
    8020811e:	0656                	slli	a2,a2,0x15
    80208120:	9626                	add	a2,a2,s1
    80208122:	40100593          	li	a1,1025
    80208126:	05d6                	slli	a1,a1,0x15
    80208128:	852e                	mv	a0,a1
    8020812a:	00000097          	auipc	ra,0x0
    8020812e:	f46080e7          	jalr	-186(ra) # 80208070 <kvmmap>
  kvmmap((uint64)etext, (uint64)etext, PHYSTOP - (uint64)etext, PTE_R | PTE_W);
    80208132:	4699                	li	a3,6
    80208134:	4645                	li	a2,17
    80208136:	066e                	slli	a2,a2,0x1b
    80208138:	8e05                	sub	a2,a2,s1
    8020813a:	85a6                	mv	a1,s1
    8020813c:	8526                	mv	a0,s1
    8020813e:	00000097          	auipc	ra,0x0
    80208142:	f32080e7          	jalr	-206(ra) # 80208070 <kvmmap>
  kvmmap(TRAMPOLINE, (uint64)trampoline, PGSIZE, PTE_R | PTE_X);
    80208146:	46a9                	li	a3,10
    80208148:	6605                	lui	a2,0x1
    8020814a:	00007597          	auipc	a1,0x7
    8020814e:	eb658593          	addi	a1,a1,-330 # 8020f000 <_trampoline>
    80208152:	04000537          	lui	a0,0x4000
    80208156:	157d                	addi	a0,a0,-1
    80208158:	0532                	slli	a0,a0,0xc
    8020815a:	00000097          	auipc	ra,0x0
    8020815e:	f16080e7          	jalr	-234(ra) # 80208070 <kvmmap>
  kvmmap(SIG_TRAMPOLINE, (uint64)sig_trampoline, PGSIZE, PTE_R | PTE_X);
    80208162:	46a9                	li	a3,10
    80208164:	6605                	lui	a2,0x1
    80208166:	00008597          	auipc	a1,0x8
    8020816a:	e9a58593          	addi	a1,a1,-358 # 80210000 <_sig_trampoline>
    8020816e:	02000537          	lui	a0,0x2000
    80208172:	157d                	addi	a0,a0,-1
    80208174:	0536                	slli	a0,a0,0xd
    80208176:	00000097          	auipc	ra,0x0
    8020817a:	efa080e7          	jalr	-262(ra) # 80208070 <kvmmap>
  __debug_info("kvminit\n");
    8020817e:	0000a517          	auipc	a0,0xa
    80208182:	92250513          	addi	a0,a0,-1758 # 80211aa0 <digits+0x1d8>
    80208186:	fffff097          	auipc	ra,0xfffff
    8020818a:	f58080e7          	jalr	-168(ra) # 802070de <__debug_info>
}
    8020818e:	60e2                	ld	ra,24(sp)
    80208190:	6442                	ld	s0,16(sp)
    80208192:	64a2                	ld	s1,8(sp)
    80208194:	6105                	addi	sp,sp,32
    80208196:	8082                	ret

0000000080208198 <vmunmap>:
{
    80208198:	715d                	addi	sp,sp,-80
    8020819a:	e486                	sd	ra,72(sp)
    8020819c:	e0a2                	sd	s0,64(sp)
    8020819e:	fc26                	sd	s1,56(sp)
    802081a0:	f84a                	sd	s2,48(sp)
    802081a2:	f44e                	sd	s3,40(sp)
    802081a4:	f052                	sd	s4,32(sp)
    802081a6:	ec56                	sd	s5,24(sp)
    802081a8:	e85a                	sd	s6,16(sp)
    802081aa:	e45e                	sd	s7,8(sp)
    802081ac:	0880                	addi	s0,sp,80
  if((va % PGSIZE) != 0)
    802081ae:	03459793          	slli	a5,a1,0x34
    802081b2:	e795                	bnez	a5,802081de <vmunmap+0x46>
    802081b4:	8a2a                	mv	s4,a0
    802081b6:	892e                	mv	s2,a1
    802081b8:	8ab6                	mv	s5,a3
  for(a = va; a < va + npages*PGSIZE; a += PGSIZE){
    802081ba:	0632                	slli	a2,a2,0xc
    802081bc:	00b609b3          	add	s3,a2,a1
    if(PTE_FLAGS(*pte) == PTE_V)
    802081c0:	4b85                	li	s7,1
  for(a = va; a < va + npages*PGSIZE; a += PGSIZE){
    802081c2:	6b05                	lui	s6,0x1
    802081c4:	0735e863          	bltu	a1,s3,80208234 <vmunmap+0x9c>
}
    802081c8:	60a6                	ld	ra,72(sp)
    802081ca:	6406                	ld	s0,64(sp)
    802081cc:	74e2                	ld	s1,56(sp)
    802081ce:	7942                	ld	s2,48(sp)
    802081d0:	79a2                	ld	s3,40(sp)
    802081d2:	7a02                	ld	s4,32(sp)
    802081d4:	6ae2                	ld	s5,24(sp)
    802081d6:	6b42                	ld	s6,16(sp)
    802081d8:	6ba2                	ld	s7,8(sp)
    802081da:	6161                	addi	sp,sp,80
    802081dc:	8082                	ret
    panic("vmunmap: not aligned");
    802081de:	0000a517          	auipc	a0,0xa
    802081e2:	8d250513          	addi	a0,a0,-1838 # 80211ab0 <digits+0x1e8>
    802081e6:	fffff097          	auipc	ra,0xfffff
    802081ea:	ce8080e7          	jalr	-792(ra) # 80206ece <panic>
      panic("vmunmap: walk");
    802081ee:	0000a517          	auipc	a0,0xa
    802081f2:	8da50513          	addi	a0,a0,-1830 # 80211ac8 <digits+0x200>
    802081f6:	fffff097          	auipc	ra,0xfffff
    802081fa:	cd8080e7          	jalr	-808(ra) # 80206ece <panic>
      panic("vmunmap: not mapped");
    802081fe:	0000a517          	auipc	a0,0xa
    80208202:	8da50513          	addi	a0,a0,-1830 # 80211ad8 <digits+0x210>
    80208206:	fffff097          	auipc	ra,0xfffff
    8020820a:	cc8080e7          	jalr	-824(ra) # 80206ece <panic>
      panic("vmunmap: not a leaf");
    8020820e:	0000a517          	auipc	a0,0xa
    80208212:	8e250513          	addi	a0,a0,-1822 # 80211af0 <digits+0x228>
    80208216:	fffff097          	auipc	ra,0xfffff
    8020821a:	cb8080e7          	jalr	-840(ra) # 80206ece <panic>
      uint64 pa = PTE2PA(*pte);
    8020821e:	8129                	srli	a0,a0,0xa
      kfree((void*)pa);
    80208220:	0532                	slli	a0,a0,0xc
    80208222:	00000097          	auipc	ra,0x0
    80208226:	bec080e7          	jalr	-1044(ra) # 80207e0e <kfree>
    *pte = 0;
    8020822a:	0004b023          	sd	zero,0(s1)
  for(a = va; a < va + npages*PGSIZE; a += PGSIZE){
    8020822e:	995a                	add	s2,s2,s6
    80208230:	f9397ce3          	bgeu	s2,s3,802081c8 <vmunmap+0x30>
    if((pte = walk(pagetable, a, 0)) == 0)
    80208234:	4601                	li	a2,0
    80208236:	85ca                	mv	a1,s2
    80208238:	8552                	mv	a0,s4
    8020823a:	00000097          	auipc	ra,0x0
    8020823e:	cf4080e7          	jalr	-780(ra) # 80207f2e <walk>
    80208242:	84aa                	mv	s1,a0
    80208244:	d54d                	beqz	a0,802081ee <vmunmap+0x56>
    if((*pte & PTE_V) == 0)
    80208246:	6108                	ld	a0,0(a0)
    80208248:	00157793          	andi	a5,a0,1
    8020824c:	dbcd                	beqz	a5,802081fe <vmunmap+0x66>
    if(PTE_FLAGS(*pte) == PTE_V)
    8020824e:	3ff57793          	andi	a5,a0,1023
    80208252:	fb778ee3          	beq	a5,s7,8020820e <vmunmap+0x76>
    if(do_free){
    80208256:	fc0a8ae3          	beqz	s5,8020822a <vmunmap+0x92>
    8020825a:	b7d1                	j	8020821e <vmunmap+0x86>

000000008020825c <walkaddr>:
walkaddr(pagetable_t pagetable, uint64 va)
{
  pte_t *pte;
  uint64 pa;

  if(va >= MAXVA)
    8020825c:	57fd                	li	a5,-1
    8020825e:	83e9                	srli	a5,a5,0x1a
    80208260:	00b7f463          	bgeu	a5,a1,80208268 <walkaddr+0xc>
    return NULL;
    80208264:	4501                	li	a0,0
    return NULL;
  if((*pte & PTE_U) == 0)
    return NULL;
  pa = PTE2PA(*pte);
  return pa;
}
    80208266:	8082                	ret
{
    80208268:	1141                	addi	sp,sp,-16
    8020826a:	e406                	sd	ra,8(sp)
    8020826c:	e022                	sd	s0,0(sp)
    8020826e:	0800                	addi	s0,sp,16
  pte = walk(pagetable, va, 0);
    80208270:	4601                	li	a2,0
    80208272:	00000097          	auipc	ra,0x0
    80208276:	cbc080e7          	jalr	-836(ra) # 80207f2e <walk>
  if(pte == 0)
    8020827a:	c105                	beqz	a0,8020829a <walkaddr+0x3e>
  if((*pte & PTE_V) == 0)
    8020827c:	611c                	ld	a5,0(a0)
  if((*pte & PTE_U) == 0)
    8020827e:	0117f693          	andi	a3,a5,17
    80208282:	4745                	li	a4,17
    return NULL;
    80208284:	4501                	li	a0,0
  if((*pte & PTE_U) == 0)
    80208286:	00e68663          	beq	a3,a4,80208292 <walkaddr+0x36>
}
    8020828a:	60a2                	ld	ra,8(sp)
    8020828c:	6402                	ld	s0,0(sp)
    8020828e:	0141                	addi	sp,sp,16
    80208290:	8082                	ret
  pa = PTE2PA(*pte);
    80208292:	00a7d513          	srli	a0,a5,0xa
    80208296:	0532                	slli	a0,a0,0xc
  return pa;
    80208298:	bfcd                	j	8020828a <walkaddr+0x2e>
    return NULL;
    8020829a:	4501                	li	a0,0
    8020829c:	b7fd                	j	8020828a <walkaddr+0x2e>

000000008020829e <experm>:
experm(pagetable_t pagetable, uint64 va,uint64 perm)
{
  pte_t *pte;
  uint64 pa;

  if(va >= MAXVA)
    8020829e:	57fd                	li	a5,-1
    802082a0:	83e9                	srli	a5,a5,0x1a
    802082a2:	00b7f463          	bgeu	a5,a1,802082aa <experm+0xc>
    return NULL;
    802082a6:	4501                	li	a0,0
  if((*pte & PTE_U) == 0)
    return NULL;
  *pte |= perm;
  pa = PTE2PA(*pte);
  return pa;
}
    802082a8:	8082                	ret
{
    802082aa:	1101                	addi	sp,sp,-32
    802082ac:	ec06                	sd	ra,24(sp)
    802082ae:	e822                	sd	s0,16(sp)
    802082b0:	e426                	sd	s1,8(sp)
    802082b2:	1000                	addi	s0,sp,32
    802082b4:	84b2                	mv	s1,a2
  pte = walk(pagetable, va, 0);
    802082b6:	4601                	li	a2,0
    802082b8:	00000097          	auipc	ra,0x0
    802082bc:	c76080e7          	jalr	-906(ra) # 80207f2e <walk>
    802082c0:	87aa                	mv	a5,a0
  if(pte == 0)
    802082c2:	c11d                	beqz	a0,802082e8 <experm+0x4a>
  if((*pte & PTE_V) == 0)
    802082c4:	6110                	ld	a2,0(a0)
  if((*pte & PTE_U) == 0)
    802082c6:	01167693          	andi	a3,a2,17
    802082ca:	4745                	li	a4,17
    return NULL;
    802082cc:	4501                	li	a0,0
  if((*pte & PTE_U) == 0)
    802082ce:	00e68763          	beq	a3,a4,802082dc <experm+0x3e>
}
    802082d2:	60e2                	ld	ra,24(sp)
    802082d4:	6442                	ld	s0,16(sp)
    802082d6:	64a2                	ld	s1,8(sp)
    802082d8:	6105                	addi	sp,sp,32
    802082da:	8082                	ret
  *pte |= perm;
    802082dc:	8e45                	or	a2,a2,s1
    802082de:	e390                	sd	a2,0(a5)
  pa = PTE2PA(*pte);
    802082e0:	8229                	srli	a2,a2,0xa
    802082e2:	00c61513          	slli	a0,a2,0xc
  return pa;
    802082e6:	b7f5                	j	802082d2 <experm+0x34>
    return NULL;
    802082e8:	4501                	li	a0,0
    802082ea:	b7e5                	j	802082d2 <experm+0x34>

00000000802082ec <kwalkaddr>:


uint64
kwalkaddr(pagetable_t kpt, uint64 va)
{
    802082ec:	1101                	addi	sp,sp,-32
    802082ee:	ec06                	sd	ra,24(sp)
    802082f0:	e822                	sd	s0,16(sp)
    802082f2:	e426                	sd	s1,8(sp)
    802082f4:	1000                	addi	s0,sp,32
  uint64 off = va % PGSIZE;
    802082f6:	03459793          	slli	a5,a1,0x34
    802082fa:	0347d493          	srli	s1,a5,0x34
  pte_t *pte;
  uint64 pa;
  
  pte = walk(kpt, va, 0);
    802082fe:	4601                	li	a2,0
    80208300:	00000097          	auipc	ra,0x0
    80208304:	c2e080e7          	jalr	-978(ra) # 80207f2e <walk>
  if(pte == 0)
    80208308:	cd09                	beqz	a0,80208322 <kwalkaddr+0x36>
    panic("kvmpa");
  if((*pte & PTE_V) == 0)
    8020830a:	6108                	ld	a0,0(a0)
    8020830c:	00157793          	andi	a5,a0,1
    80208310:	c38d                	beqz	a5,80208332 <kwalkaddr+0x46>
    panic("kvmpa");
  pa = PTE2PA(*pte);
    80208312:	8129                	srli	a0,a0,0xa
    80208314:	0532                	slli	a0,a0,0xc
  return pa+off;
}
    80208316:	9526                	add	a0,a0,s1
    80208318:	60e2                	ld	ra,24(sp)
    8020831a:	6442                	ld	s0,16(sp)
    8020831c:	64a2                	ld	s1,8(sp)
    8020831e:	6105                	addi	sp,sp,32
    80208320:	8082                	ret
    panic("kvmpa");
    80208322:	00009517          	auipc	a0,0x9
    80208326:	7e650513          	addi	a0,a0,2022 # 80211b08 <digits+0x240>
    8020832a:	fffff097          	auipc	ra,0xfffff
    8020832e:	ba4080e7          	jalr	-1116(ra) # 80206ece <panic>
    panic("kvmpa");
    80208332:	00009517          	auipc	a0,0x9
    80208336:	7d650513          	addi	a0,a0,2006 # 80211b08 <digits+0x240>
    8020833a:	fffff097          	auipc	ra,0xfffff
    8020833e:	b94080e7          	jalr	-1132(ra) # 80206ece <panic>

0000000080208342 <kvmpa>:
{
    80208342:	1141                	addi	sp,sp,-16
    80208344:	e406                	sd	ra,8(sp)
    80208346:	e022                	sd	s0,0(sp)
    80208348:	0800                	addi	s0,sp,16
    8020834a:	85aa                	mv	a1,a0
  return kwalkaddr(kernel_pagetable, va);
    8020834c:	00566517          	auipc	a0,0x566
    80208350:	f6c53503          	ld	a0,-148(a0) # 8076e2b8 <kernel_pagetable>
    80208354:	00000097          	auipc	ra,0x0
    80208358:	f98080e7          	jalr	-104(ra) # 802082ec <kwalkaddr>
}
    8020835c:	60a2                	ld	ra,8(sp)
    8020835e:	6402                	ld	s0,0(sp)
    80208360:	0141                	addi	sp,sp,16
    80208362:	8082                	ret

0000000080208364 <kwalkaddr1>:



uint64
kwalkaddr1(pagetable_t kpt, uint64 va)
{
    80208364:	1101                	addi	sp,sp,-32
    80208366:	ec06                	sd	ra,24(sp)
    80208368:	e822                	sd	s0,16(sp)
    8020836a:	e426                	sd	s1,8(sp)
    8020836c:	1000                	addi	s0,sp,32
    8020836e:	84ae                	mv	s1,a1
  uint64 off = va % PGSIZE;
  pte_t *pte;
  uint64 pa;
  
  pte = walk(kpt, va, 0);
    80208370:	4601                	li	a2,0
    80208372:	00000097          	auipc	ra,0x0
    80208376:	bbc080e7          	jalr	-1092(ra) # 80207f2e <walk>
  if(pte == 0)
    8020837a:	c10d                	beqz	a0,8020839c <kwalkaddr1+0x38>
    return NULL;
  if((*pte & PTE_V) == 0)
    8020837c:	611c                	ld	a5,0(a0)
    8020837e:	0017f513          	andi	a0,a5,1
    80208382:	c901                	beqz	a0,80208392 <kwalkaddr1+0x2e>
    return NULL;
  pa = PTE2PA(*pte);
    80208384:	00a7d513          	srli	a0,a5,0xa
    80208388:	0532                	slli	a0,a0,0xc
  uint64 off = va % PGSIZE;
    8020838a:	03449593          	slli	a1,s1,0x34
    8020838e:	91d1                	srli	a1,a1,0x34
  return pa+off;
    80208390:	952e                	add	a0,a0,a1
}
    80208392:	60e2                	ld	ra,24(sp)
    80208394:	6442                	ld	s0,16(sp)
    80208396:	64a2                	ld	s1,8(sp)
    80208398:	6105                	addi	sp,sp,32
    8020839a:	8082                	ret
    return NULL;
    8020839c:	4501                	li	a0,0
    8020839e:	bfd5                	j	80208392 <kwalkaddr1+0x2e>

00000000802083a0 <uvmdealloc>:
// process size.  Returns the new process size.
uint64
uvmdealloc(pagetable_t pagetable, uint64 start, uint64 end)
{
  
  if(start>=end)return -1;
    802083a0:	04c5f063          	bgeu	a1,a2,802083e0 <uvmdealloc+0x40>
  if(PGROUNDUP(start) < PGROUNDUP(end)){
    802083a4:	6785                	lui	a5,0x1
    802083a6:	17fd                	addi	a5,a5,-1
    802083a8:	95be                	add	a1,a1,a5
    802083aa:	777d                	lui	a4,0xfffff
    802083ac:	8df9                	and	a1,a1,a4
    802083ae:	963e                	add	a2,a2,a5
    802083b0:	8e79                	and	a2,a2,a4
    int npages = (PGROUNDUP(end) - PGROUNDUP(start)) / PGSIZE;
    vmunmap(pagetable, PGROUNDUP(start), npages, 1);
  }

  return 0;
    802083b2:	4781                	li	a5,0
  if(PGROUNDUP(start) < PGROUNDUP(end)){
    802083b4:	00c5e463          	bltu	a1,a2,802083bc <uvmdealloc+0x1c>
}
    802083b8:	853e                	mv	a0,a5
    802083ba:	8082                	ret
{
    802083bc:	1141                	addi	sp,sp,-16
    802083be:	e406                	sd	ra,8(sp)
    802083c0:	e022                	sd	s0,0(sp)
    802083c2:	0800                	addi	s0,sp,16
    int npages = (PGROUNDUP(end) - PGROUNDUP(start)) / PGSIZE;
    802083c4:	8e0d                	sub	a2,a2,a1
    802083c6:	8231                	srli	a2,a2,0xc
    vmunmap(pagetable, PGROUNDUP(start), npages, 1);
    802083c8:	4685                	li	a3,1
    802083ca:	2601                	sext.w	a2,a2
    802083cc:	00000097          	auipc	ra,0x0
    802083d0:	dcc080e7          	jalr	-564(ra) # 80208198 <vmunmap>
  return 0;
    802083d4:	4781                	li	a5,0
}
    802083d6:	853e                	mv	a0,a5
    802083d8:	60a2                	ld	ra,8(sp)
    802083da:	6402                	ld	s0,0(sp)
    802083dc:	0141                	addi	sp,sp,16
    802083de:	8082                	ret
  if(start>=end)return -1;
    802083e0:	57fd                	li	a5,-1
    802083e2:	bfd9                	j	802083b8 <uvmdealloc+0x18>

00000000802083e4 <uvmalloc>:
  if(start>=end)return -1;
    802083e4:	0ac5fd63          	bgeu	a1,a2,8020849e <uvmalloc+0xba>
{
    802083e8:	7139                	addi	sp,sp,-64
    802083ea:	fc06                	sd	ra,56(sp)
    802083ec:	f822                	sd	s0,48(sp)
    802083ee:	f426                	sd	s1,40(sp)
    802083f0:	f04a                	sd	s2,32(sp)
    802083f2:	ec4e                	sd	s3,24(sp)
    802083f4:	e852                	sd	s4,16(sp)
    802083f6:	e456                	sd	s5,8(sp)
    802083f8:	e05a                	sd	s6,0(sp)
    802083fa:	0080                	addi	s0,sp,64
    802083fc:	8a2a                	mv	s4,a0
    802083fe:	8b2e                	mv	s6,a1
    80208400:	89b2                	mv	s3,a2
    80208402:	8ab6                	mv	s5,a3
  for(a = start; a < end; a += PGSIZE){
    80208404:	892e                	mv	s2,a1
    mem = allocpage();
    80208406:	fffff097          	auipc	ra,0xfffff
    8020840a:	536080e7          	jalr	1334(ra) # 8020793c <_allocpage>
    8020840e:	84aa                	mv	s1,a0
    if(mem == NULL){
    80208410:	c51d                	beqz	a0,8020843e <uvmalloc+0x5a>
    memset(mem, 0, PGSIZE);
    80208412:	6605                	lui	a2,0x1
    80208414:	4581                	li	a1,0
    80208416:	ffff9097          	auipc	ra,0xffff9
    8020841a:	95e080e7          	jalr	-1698(ra) # 80200d74 <memset>
    if (mappages(pagetable, a, PGSIZE, (uint64)mem, perm) != 0) {
    8020841e:	8756                	mv	a4,s5
    80208420:	86a6                	mv	a3,s1
    80208422:	6605                	lui	a2,0x1
    80208424:	85ca                	mv	a1,s2
    80208426:	8552                	mv	a0,s4
    80208428:	00000097          	auipc	ra,0x0
    8020842c:	bb6080e7          	jalr	-1098(ra) # 80207fde <mappages>
    80208430:	e129                	bnez	a0,80208472 <uvmalloc+0x8e>
  for(a = start; a < end; a += PGSIZE){
    80208432:	6785                	lui	a5,0x1
    80208434:	993e                	add	s2,s2,a5
    80208436:	fd3968e3          	bltu	s2,s3,80208406 <uvmalloc+0x22>
  return 0;
    8020843a:	4501                	li	a0,0
    8020843c:	a00d                	j	8020845e <uvmalloc+0x7a>
      uvmdealloc(pagetable, start, a);
    8020843e:	864a                	mv	a2,s2
    80208440:	85da                	mv	a1,s6
    80208442:	8552                	mv	a0,s4
    80208444:	00000097          	auipc	ra,0x0
    80208448:	f5c080e7          	jalr	-164(ra) # 802083a0 <uvmdealloc>
      printf("uvmalloc kalloc failed\n");
    8020844c:	00009517          	auipc	a0,0x9
    80208450:	6c450513          	addi	a0,a0,1732 # 80211b10 <digits+0x248>
    80208454:	fffff097          	auipc	ra,0xfffff
    80208458:	ac4080e7          	jalr	-1340(ra) # 80206f18 <printf>
      return -1;
    8020845c:	557d                	li	a0,-1
}
    8020845e:	70e2                	ld	ra,56(sp)
    80208460:	7442                	ld	s0,48(sp)
    80208462:	74a2                	ld	s1,40(sp)
    80208464:	7902                	ld	s2,32(sp)
    80208466:	69e2                	ld	s3,24(sp)
    80208468:	6a42                	ld	s4,16(sp)
    8020846a:	6aa2                	ld	s5,8(sp)
    8020846c:	6b02                	ld	s6,0(sp)
    8020846e:	6121                	addi	sp,sp,64
    80208470:	8082                	ret
      freepage(mem);
    80208472:	8526                	mv	a0,s1
    80208474:	fffff097          	auipc	ra,0xfffff
    80208478:	568080e7          	jalr	1384(ra) # 802079dc <_freepage>
      uvmdealloc(pagetable, start, a);
    8020847c:	864a                	mv	a2,s2
    8020847e:	85da                	mv	a1,s6
    80208480:	8552                	mv	a0,s4
    80208482:	00000097          	auipc	ra,0x0
    80208486:	f1e080e7          	jalr	-226(ra) # 802083a0 <uvmdealloc>
      printf("[uvmalloc]map user page failed\n");
    8020848a:	00009517          	auipc	a0,0x9
    8020848e:	69e50513          	addi	a0,a0,1694 # 80211b28 <digits+0x260>
    80208492:	fffff097          	auipc	ra,0xfffff
    80208496:	a86080e7          	jalr	-1402(ra) # 80206f18 <printf>
      return -1;
    8020849a:	557d                	li	a0,-1
    8020849c:	b7c9                	j	8020845e <uvmalloc+0x7a>
  if(start>=end)return -1;
    8020849e:	557d                	li	a0,-1
}
    802084a0:	8082                	ret

00000000802084a2 <freewalk>:

// Recursively free page-table pages.
// All leaf mappings must already have been removed.
void
freewalk(pagetable_t pagetable)
{
    802084a2:	715d                	addi	sp,sp,-80
    802084a4:	e486                	sd	ra,72(sp)
    802084a6:	e0a2                	sd	s0,64(sp)
    802084a8:	fc26                	sd	s1,56(sp)
    802084aa:	f84a                	sd	s2,48(sp)
    802084ac:	f44e                	sd	s3,40(sp)
    802084ae:	f052                	sd	s4,32(sp)
    802084b0:	ec56                	sd	s5,24(sp)
    802084b2:	e85a                	sd	s6,16(sp)
    802084b4:	e45e                	sd	s7,8(sp)
    802084b6:	e062                	sd	s8,0(sp)
    802084b8:	0880                	addi	s0,sp,80
    802084ba:	8baa                	mv	s7,a0
    802084bc:	892a                	mv	s2,a0
    802084be:	4481                	li	s1,0
  //printf("[freewalk]enter %p\n",pagetable);
  // there are 2^9 = 512 PTEs in a page table.
  for(int i = 0; i < 512; i++){
    pte_t pte = pagetable[i];
    if(pagetable[i]==kernel_pagetable[i])continue;
    802084c0:	00566a17          	auipc	s4,0x566
    802084c4:	df8a0a13          	addi	s4,s4,-520 # 8076e2b8 <kernel_pagetable>
    if((pte & PTE_V) && (pte & (PTE_R|PTE_W|PTE_X) ) == 0){
    802084c8:	4a85                	li	s5,1
      uint64 child = PTE2PA(pte);
      freewalk((pagetable_t)child);
      pagetable[i] = 0;
    } 
    else if(pte & PTE_V){
      __debug_warn("freewalk: leaf %d\n",i);
    802084ca:	00009b17          	auipc	s6,0x9
    802084ce:	67eb0b13          	addi	s6,s6,1662 # 80211b48 <digits+0x280>
  for(int i = 0; i < 512; i++){
    802084d2:	20000993          	li	s3,512
    802084d6:	a01d                	j	802084fc <freewalk+0x5a>
      uint64 child = PTE2PA(pte);
    802084d8:	8129                	srli	a0,a0,0xa
      freewalk((pagetable_t)child);
    802084da:	0532                	slli	a0,a0,0xc
    802084dc:	00000097          	auipc	ra,0x0
    802084e0:	fc6080e7          	jalr	-58(ra) # 802084a2 <freewalk>
      pagetable[i] = 0;
    802084e4:	00093023          	sd	zero,0(s2)
    802084e8:	a031                	j	802084f4 <freewalk+0x52>
      __debug_warn("freewalk: leaf %d\n",i);
    802084ea:	855a                	mv	a0,s6
    802084ec:	fffff097          	auipc	ra,0xfffff
    802084f0:	db8080e7          	jalr	-584(ra) # 802072a4 <__debug_warn>
  for(int i = 0; i < 512; i++){
    802084f4:	0485                	addi	s1,s1,1
    802084f6:	0921                	addi	s2,s2,8
    802084f8:	03348563          	beq	s1,s3,80208522 <freewalk+0x80>
    802084fc:	0004859b          	sext.w	a1,s1
    pte_t pte = pagetable[i];
    80208500:	00093503          	ld	a0,0(s2)
    if(pagetable[i]==kernel_pagetable[i])continue;
    80208504:	000a3783          	ld	a5,0(s4)
    80208508:	00349713          	slli	a4,s1,0x3
    8020850c:	97ba                	add	a5,a5,a4
    8020850e:	639c                	ld	a5,0(a5)
    80208510:	fea782e3          	beq	a5,a0,802084f4 <freewalk+0x52>
    if((pte & PTE_V) && (pte & (PTE_R|PTE_W|PTE_X) ) == 0){
    80208514:	00f57793          	andi	a5,a0,15
    80208518:	fd5780e3          	beq	a5,s5,802084d8 <freewalk+0x36>
    else if(pte & PTE_V){
    8020851c:	8905                	andi	a0,a0,1
    8020851e:	d979                	beqz	a0,802084f4 <freewalk+0x52>
    80208520:	b7e9                	j	802084ea <freewalk+0x48>
      //pagetable[i]=0;
    }
  }
  freepage((void*)pagetable);
    80208522:	855e                	mv	a0,s7
    80208524:	fffff097          	auipc	ra,0xfffff
    80208528:	4b8080e7          	jalr	1208(ra) # 802079dc <_freepage>
}
    8020852c:	60a6                	ld	ra,72(sp)
    8020852e:	6406                	ld	s0,64(sp)
    80208530:	74e2                	ld	s1,56(sp)
    80208532:	7942                	ld	s2,48(sp)
    80208534:	79a2                	ld	s3,40(sp)
    80208536:	7a02                	ld	s4,32(sp)
    80208538:	6ae2                	ld	s5,24(sp)
    8020853a:	6b42                	ld	s6,16(sp)
    8020853c:	6ba2                	ld	s7,8(sp)
    8020853e:	6c02                	ld	s8,0(sp)
    80208540:	6161                	addi	sp,sp,80
    80208542:	8082                	ret

0000000080208544 <kvmcreate>:

// create an empty user page table.
// returns 0 if out of memory.
pagetable_t
kvmcreate()
{
    80208544:	1101                	addi	sp,sp,-32
    80208546:	ec06                	sd	ra,24(sp)
    80208548:	e822                	sd	s0,16(sp)
    8020854a:	e426                	sd	s1,8(sp)
    8020854c:	e04a                	sd	s2,0(sp)
    8020854e:	1000                	addi	s0,sp,32
  pagetable_t pagetable;
  pagetable = (pagetable_t) allocpage();
    80208550:	fffff097          	auipc	ra,0xfffff
    80208554:	3ec080e7          	jalr	1004(ra) # 8020793c <_allocpage>
  if(pagetable == NULL)
    return NULL;
    80208558:	4901                	li	s2,0
  if(pagetable == NULL)
    8020855a:	c11d                	beqz	a0,80208580 <kvmcreate+0x3c>
    8020855c:	84aa                	mv	s1,a0
  pagetable = (pagetable_t) allocpage();
    8020855e:	892a                	mv	s2,a0
  memset(pagetable, 0, PGSIZE);
    80208560:	6605                	lui	a2,0x1
    80208562:	4581                	li	a1,0
    80208564:	ffff9097          	auipc	ra,0xffff9
    80208568:	810080e7          	jalr	-2032(ra) # 80200d74 <memset>
  memmove(pagetable, kernel_pagetable, PGSIZE);
    8020856c:	6605                	lui	a2,0x1
    8020856e:	00566597          	auipc	a1,0x566
    80208572:	d4a5b583          	ld	a1,-694(a1) # 8076e2b8 <kernel_pagetable>
    80208576:	8526                	mv	a0,s1
    80208578:	ffff9097          	auipc	ra,0xffff9
    8020857c:	85c080e7          	jalr	-1956(ra) # 80200dd4 <memmove>
  return pagetable;
}
    80208580:	854a                	mv	a0,s2
    80208582:	60e2                	ld	ra,24(sp)
    80208584:	6442                	ld	s0,16(sp)
    80208586:	64a2                	ld	s1,8(sp)
    80208588:	6902                	ld	s2,0(sp)
    8020858a:	6105                	addi	sp,sp,32
    8020858c:	8082                	ret

000000008020858e <uvmfree>:

// Free user memory pages,
// then free page-table pages.
void
uvmfree(struct proc *p)
{
    8020858e:	1101                	addi	sp,sp,-32
    80208590:	ec06                	sd	ra,24(sp)
    80208592:	e822                	sd	s0,16(sp)
    80208594:	e426                	sd	s1,8(sp)
    80208596:	1000                	addi	s0,sp,32
    80208598:	84aa                	mv	s1,a0
  free_vma_list(p);
    8020859a:	00002097          	auipc	ra,0x2
    8020859e:	b48080e7          	jalr	-1208(ra) # 8020a0e2 <free_vma_list>
  // vmunmap(pagetable, 0, PGROUNDUP(sz)/PGSIZE, 1);
  freewalk(p->pagetable);
    802085a2:	70a8                	ld	a0,96(s1)
    802085a4:	00000097          	auipc	ra,0x0
    802085a8:	efe080e7          	jalr	-258(ra) # 802084a2 <freewalk>
}
    802085ac:	60e2                	ld	ra,24(sp)
    802085ae:	6442                	ld	s0,16(sp)
    802085b0:	64a2                	ld	s1,8(sp)
    802085b2:	6105                	addi	sp,sp,32
    802085b4:	8082                	ret

00000000802085b6 <uvmprotect>:


int 
uvmprotect(uint64 va, uint64 len, int perm)
{
    802085b6:	7139                	addi	sp,sp,-64
    802085b8:	fc06                	sd	ra,56(sp)
    802085ba:	f822                	sd	s0,48(sp)
    802085bc:	f426                	sd	s1,40(sp)
    802085be:	f04a                	sd	s2,32(sp)
    802085c0:	ec4e                	sd	s3,24(sp)
    802085c2:	e852                	sd	s4,16(sp)
    802085c4:	e456                	sd	s5,8(sp)
    802085c6:	e05a                	sd	s6,0(sp)
    802085c8:	0080                	addi	s0,sp,64
    802085ca:	89aa                	mv	s3,a0
    802085cc:	892e                	mv	s2,a1
    802085ce:	8ab2                	mv	s5,a2
  int fence = 0;
  uint64 i;
  pte_t *pte = NULL;
  struct proc *p = myproc();
    802085d0:	00001097          	auipc	ra,0x1
    802085d4:	55a080e7          	jalr	1370(ra) # 80209b2a <myproc>
  if(va % PGSIZE != 0)
    802085d8:	03499793          	slli	a5,s3,0x34
    802085dc:	efb9                	bnez	a5,8020863a <uvmprotect+0x84>
    802085de:	8a2a                	mv	s4,a0
  {
    __debug_warn("[uvmprotect] va is illegal\n");
    return -EINVAL;
  }

  if(len % PGSIZE)
    802085e0:	03491793          	slli	a5,s2,0x34
    802085e4:	0347d493          	srli	s1,a5,0x34
    802085e8:	e3bd                	bnez	a5,8020864e <uvmprotect+0x98>
  {
    __debug_warn("[uvmprotect] len is illegal\n");
    return -EINVAL;
  }
  
  struct vma *vma = (struct vma*)find_map_fix(p, va, len);
    802085ea:	864a                	mv	a2,s2
    802085ec:	85ce                	mv	a1,s3
    802085ee:	00002097          	auipc	ra,0x2
    802085f2:	454080e7          	jalr	1108(ra) # 8020aa42 <find_map_fix>
  if(!vma) vma = part_locate_vma(p->vma, va, va + len);
    802085f6:	c535                	beqz	a0,80208662 <uvmprotect+0xac>
  {
    __debug_warn("[uvmprotect] memory illegal\n");
    return -EINVAL;
  }
  
  if(vma->type == MMAP && vma->fd != -1)
    802085f8:	4118                	lw	a4,0(a0)
    802085fa:	4799                	li	a5,6
    802085fc:	08f70763          	beq	a4,a5,8020868a <uvmprotect+0xd4>
    {
      return -EINVAL;
    }
  }
  
  for(i = 0; i < len; i += PGSIZE)
    80208600:	6b05                	lui	s6,0x1
      return -ENOMEM;
    }
  }
  if(fence)
    sfence_vma();
  return 0;
    80208602:	4501                	li	a0,0
  for(i = 0; i < len; i += PGSIZE)
    80208604:	0c090863          	beqz	s2,802086d4 <uvmprotect+0x11e>
    pte = walk(p->pagetable, va + i, 0);
    80208608:	4601                	li	a2,0
    8020860a:	009985b3          	add	a1,s3,s1
    8020860e:	060a3503          	ld	a0,96(s4)
    80208612:	00000097          	auipc	ra,0x0
    80208616:	91c080e7          	jalr	-1764(ra) # 80207f2e <walk>
    if(pte == NULL)
    8020861a:	c545                	beqz	a0,802086c2 <uvmprotect+0x10c>
    if(*pte & PTE_V)
    8020861c:	611c                	ld	a5,0(a0)
    8020861e:	0017f713          	andi	a4,a5,1
    80208622:	c379                	beqz	a4,802086e8 <uvmprotect+0x132>
      *pte = (*pte & ~(PTE_W | PTE_R | PTE_X)) | perm;
    80208624:	9bc5                	andi	a5,a5,-15
    80208626:	0157e7b3          	or	a5,a5,s5
    8020862a:	e11c                	sd	a5,0(a0)
  for(i = 0; i < len; i += PGSIZE)
    8020862c:	94da                	add	s1,s1,s6
    8020862e:	fd24ede3          	bltu	s1,s2,80208608 <uvmprotect+0x52>
    80208632:	12000073          	sfence.vma
  return 0;
    80208636:	4501                	li	a0,0
}
    80208638:	a871                	j	802086d4 <uvmprotect+0x11e>
    __debug_warn("[uvmprotect] va is illegal\n");
    8020863a:	00009517          	auipc	a0,0x9
    8020863e:	52650513          	addi	a0,a0,1318 # 80211b60 <digits+0x298>
    80208642:	fffff097          	auipc	ra,0xfffff
    80208646:	c62080e7          	jalr	-926(ra) # 802072a4 <__debug_warn>
    return -EINVAL;
    8020864a:	5529                	li	a0,-22
    8020864c:	a061                	j	802086d4 <uvmprotect+0x11e>
    __debug_warn("[uvmprotect] len is illegal\n");
    8020864e:	00009517          	auipc	a0,0x9
    80208652:	53250513          	addi	a0,a0,1330 # 80211b80 <digits+0x2b8>
    80208656:	fffff097          	auipc	ra,0xfffff
    8020865a:	c4e080e7          	jalr	-946(ra) # 802072a4 <__debug_warn>
    return -EINVAL;
    8020865e:	5529                	li	a0,-22
    80208660:	a895                	j	802086d4 <uvmprotect+0x11e>
  if(!vma) vma = part_locate_vma(p->vma, va, va + len);
    80208662:	01298633          	add	a2,s3,s2
    80208666:	85ce                	mv	a1,s3
    80208668:	170a3503          	ld	a0,368(s4)
    8020866c:	00001097          	auipc	ra,0x1
    80208670:	6ca080e7          	jalr	1738(ra) # 80209d36 <part_locate_vma>
  if(vma == NULL)
    80208674:	f151                	bnez	a0,802085f8 <uvmprotect+0x42>
    __debug_warn("[uvmprotect] memory illegal\n");
    80208676:	00009517          	auipc	a0,0x9
    8020867a:	52a50513          	addi	a0,a0,1322 # 80211ba0 <digits+0x2d8>
    8020867e:	fffff097          	auipc	ra,0xfffff
    80208682:	c26080e7          	jalr	-986(ra) # 802072a4 <__debug_warn>
    return -EINVAL;
    80208686:	5529                	li	a0,-22
    80208688:	a0b1                	j	802086d4 <uvmprotect+0x11e>
  if(vma->type == MMAP && vma->fd != -1)
    8020868a:	515c                	lw	a5,36(a0)
    8020868c:	577d                	li	a4,-1
    8020868e:	f6e789e3          	beq	a5,a4,80208600 <uvmprotect+0x4a>
    struct file *f = p->ofile[vma->fd];
    80208692:	0e8a3703          	ld	a4,232(s4)
    80208696:	078e                	slli	a5,a5,0x3
    80208698:	97ba                	add	a5,a5,a4
    8020869a:	639c                	ld	a5,0(a5)
    if(f == NULL)
    8020869c:	cb89                	beqz	a5,802086ae <uvmprotect+0xf8>
    if(!(f->writable) && (perm & PTE_W))
    8020869e:	0097c783          	lbu	a5,9(a5) # 1009 <_entry-0x801feff7>
    802086a2:	ffb9                	bnez	a5,80208600 <uvmprotect+0x4a>
    802086a4:	004af793          	andi	a5,s5,4
    802086a8:	dfa1                	beqz	a5,80208600 <uvmprotect+0x4a>
      return -EINVAL;
    802086aa:	5529                	li	a0,-22
    802086ac:	a025                	j	802086d4 <uvmprotect+0x11e>
      __debug_warn("[uvmprotect] something wrong in MMAP memoryn\n");
    802086ae:	00009517          	auipc	a0,0x9
    802086b2:	51250513          	addi	a0,a0,1298 # 80211bc0 <digits+0x2f8>
    802086b6:	fffff097          	auipc	ra,0xfffff
    802086ba:	bee080e7          	jalr	-1042(ra) # 802072a4 <__debug_warn>
      return -EINVAL;
    802086be:	5529                	li	a0,-22
    802086c0:	a811                	j	802086d4 <uvmprotect+0x11e>
      __debug_warn("[uvmprotect] page not mapped\n");
    802086c2:	00009517          	auipc	a0,0x9
    802086c6:	52e50513          	addi	a0,a0,1326 # 80211bf0 <digits+0x328>
    802086ca:	fffff097          	auipc	ra,0xfffff
    802086ce:	bda080e7          	jalr	-1062(ra) # 802072a4 <__debug_warn>
      return -ENOMEM;
    802086d2:	5551                	li	a0,-12
}
    802086d4:	70e2                	ld	ra,56(sp)
    802086d6:	7442                	ld	s0,48(sp)
    802086d8:	74a2                	ld	s1,40(sp)
    802086da:	7902                	ld	s2,32(sp)
    802086dc:	69e2                	ld	s3,24(sp)
    802086de:	6a42                	ld	s4,16(sp)
    802086e0:	6aa2                	ld	s5,8(sp)
    802086e2:	6b02                	ld	s6,0(sp)
    802086e4:	6121                	addi	sp,sp,64
    802086e6:	8082                	ret
      __debug_warn("[uvmprotect] page is invalid\n");
    802086e8:	00009517          	auipc	a0,0x9
    802086ec:	52850513          	addi	a0,a0,1320 # 80211c10 <digits+0x348>
    802086f0:	fffff097          	auipc	ra,0xfffff
    802086f4:	bb4080e7          	jalr	-1100(ra) # 802072a4 <__debug_warn>
      return -ENOMEM;
    802086f8:	5551                	li	a0,-12
    802086fa:	bfe9                	j	802086d4 <uvmprotect+0x11e>

00000000802086fc <plicinit>:

//
// the riscv Platform Level Interrupt Controller (PLIC).
//

void plicinit(void) {
    802086fc:	1141                	addi	sp,sp,-16
    802086fe:	e406                	sd	ra,8(sp)
    80208700:	e022                	sd	s0,0(sp)
    80208702:	0800                	addi	s0,sp,16
    // set desired IRQ priorities non-zero (otherwise disabled).
    //writed(1,PLIC_V + VIRTIO0_IRQ * 4);
    //writed(1, PLIC_V + DISK_IRQ * sizeof(uint32));
    writed(1, PLIC_V + UART1_IRQ * sizeof(uint32));
    80208704:	00fc37b7          	lui	a5,0xfc3
    80208708:	07ba                	slli	a5,a5,0xe
    8020870a:	4705                	li	a4,1
    8020870c:	cbd8                	sw	a4,20(a5)
    //writed(1, PLIC_V + UART1_IRQ * sizeof(uint32));
#ifdef	DEBUG
     printf("plicinit\n");
    8020870e:	00009517          	auipc	a0,0x9
    80208712:	52250513          	addi	a0,a0,1314 # 80211c30 <digits+0x368>
    80208716:	fffff097          	auipc	ra,0xfffff
    8020871a:	802080e7          	jalr	-2046(ra) # 80206f18 <printf>
#endif 
}
    8020871e:	60a2                	ld	ra,8(sp)
    80208720:	6402                	ld	s0,0(sp)
    80208722:	0141                	addi	sp,sp,16
    80208724:	8082                	ret

0000000080208726 <plicinithart>:

void plicinithart(void) {
    80208726:	1141                	addi	sp,sp,-16
    80208728:	e406                	sd	ra,8(sp)
    8020872a:	e022                	sd	s0,0(sp)
    8020872c:	0800                	addi	s0,sp,16
    int hart = cpuid();
    8020872e:	00001097          	auipc	ra,0x1
    80208732:	3d0080e7          	jalr	976(ra) # 80209afe <cpuid>
    // set uart's enable bit for this hart's S-mode.
    *(uint32 *)PLIC_SENABLE(hart) = (1 << UART1_IRQ);
    80208736:	0085171b          	slliw	a4,a0,0x8
    8020873a:	01f867b7          	lui	a5,0x1f86
    8020873e:	0785                	addi	a5,a5,1
    80208740:	07b6                	slli	a5,a5,0xd
    80208742:	97ba                	add	a5,a5,a4
    80208744:	02000713          	li	a4,32
    80208748:	c398                	sw	a4,0(a5)
    // set this hart's S-mode priority threshold to 0.
    *(uint32 *)PLIC_SPRIORITY(hart) = 0;
    8020874a:	00d5151b          	slliw	a0,a0,0xd
    8020874e:	1f8617b7          	lui	a5,0x1f861
    80208752:	07a6                	slli	a5,a5,0x9
    80208754:	953e                	add	a0,a0,a5
    80208756:	00052023          	sw	zero,0(a0)
#ifdef DEBUG
     printf("plichartinit\n");
    8020875a:	00009517          	auipc	a0,0x9
    8020875e:	4e650513          	addi	a0,a0,1254 # 80211c40 <digits+0x378>
    80208762:	ffffe097          	auipc	ra,0xffffe
    80208766:	7b6080e7          	jalr	1974(ra) # 80206f18 <printf>
#endif 
}
    8020876a:	60a2                	ld	ra,8(sp)
    8020876c:	6402                	ld	s0,0(sp)
    8020876e:	0141                	addi	sp,sp,16
    80208770:	8082                	ret

0000000080208772 <plic_claim>:

// ask the PLIC what interrupt we should serve.
int plic_claim(void) {
    80208772:	1141                	addi	sp,sp,-16
    80208774:	e406                	sd	ra,8(sp)
    80208776:	e022                	sd	s0,0(sp)
    80208778:	0800                	addi	s0,sp,16
    int hart = cpuid();
    8020877a:	00001097          	auipc	ra,0x1
    8020877e:	384080e7          	jalr	900(ra) # 80209afe <cpuid>
    int irq = *(uint32 *)PLIC_SCLAIM(hart);
    80208782:	00d5179b          	slliw	a5,a0,0xd
    80208786:	1f861537          	lui	a0,0x1f861
    8020878a:	0526                	slli	a0,a0,0x9
    8020878c:	953e                	add	a0,a0,a5
    return irq;
}
    8020878e:	4148                	lw	a0,4(a0)
    80208790:	60a2                	ld	ra,8(sp)
    80208792:	6402                	ld	s0,0(sp)
    80208794:	0141                	addi	sp,sp,16
    80208796:	8082                	ret

0000000080208798 <plic_complete>:

// tell the PLIC we've served this IRQ.
void plic_complete(int irq) {
    80208798:	1101                	addi	sp,sp,-32
    8020879a:	ec06                	sd	ra,24(sp)
    8020879c:	e822                	sd	s0,16(sp)
    8020879e:	e426                	sd	s1,8(sp)
    802087a0:	1000                	addi	s0,sp,32
    802087a2:	84aa                	mv	s1,a0
    int hart = cpuid();
    802087a4:	00001097          	auipc	ra,0x1
    802087a8:	35a080e7          	jalr	858(ra) # 80209afe <cpuid>
    *(uint32 *)PLIC_SCLAIM(hart) = irq;
    802087ac:	00d5151b          	slliw	a0,a0,0xd
    802087b0:	1f8617b7          	lui	a5,0x1f861
    802087b4:	07a6                	slli	a5,a5,0x9
    802087b6:	97aa                	add	a5,a5,a0
    802087b8:	c3c4                	sw	s1,4(a5)
}
    802087ba:	60e2                	ld	ra,24(sp)
    802087bc:	6442                	ld	s0,16(sp)
    802087be:	64a2                	ld	s1,8(sp)
    802087c0:	6105                	addi	sp,sp,32
    802087c2:	8082                	ret

00000000802087c4 <timerinit>:
#include "include/proc.h"

struct spinlock tickslock;
uint ticks;

void timerinit() {
    802087c4:	1141                	addi	sp,sp,-16
    802087c6:	e406                	sd	ra,8(sp)
    802087c8:	e022                	sd	s0,0(sp)
    802087ca:	0800                	addi	s0,sp,16
    initlock(&tickslock, "time");
    802087cc:	00009597          	auipc	a1,0x9
    802087d0:	e2c58593          	addi	a1,a1,-468 # 802115f8 <rodata_start+0x5f8>
    802087d4:	00566517          	auipc	a0,0x566
    802087d8:	aec50513          	addi	a0,a0,-1300 # 8076e2c0 <tickslock>
    802087dc:	ffffe097          	auipc	ra,0xffffe
    802087e0:	34e080e7          	jalr	846(ra) # 80206b2a <initlock>
    ticks = 0;
    802087e4:	00566797          	auipc	a5,0x566
    802087e8:	ae07aa23          	sw	zero,-1292(a5) # 8076e2d8 <ticks>
    #ifdef DEBUG
    printf("timerinit\n");
    802087ec:	00009517          	auipc	a0,0x9
    802087f0:	46450513          	addi	a0,a0,1124 # 80211c50 <digits+0x388>
    802087f4:	ffffe097          	auipc	ra,0xffffe
    802087f8:	724080e7          	jalr	1828(ra) # 80206f18 <printf>
    #endif
}
    802087fc:	60a2                	ld	ra,8(sp)
    802087fe:	6402                	ld	s0,0(sp)
    80208800:	0141                	addi	sp,sp,16
    80208802:	8082                	ret

0000000080208804 <set_next_timeout>:

void
set_next_timeout() {
    80208804:	1141                	addi	sp,sp,-16
    80208806:	e422                	sd	s0,8(sp)
    80208808:	0800                	addi	s0,sp,16
  asm volatile("rdtime %0" : "=r" (x) );
    8020880a:	c0102573          	rdtime	a0
    // if comment the `printf` line below
    // the timer will not work.

    // this bug seems to disappear automatically
    // printf("");
    set_timer(r_time() + INTERVAL);
    8020880e:	000997b7          	lui	a5,0x99
    80208812:	96878793          	addi	a5,a5,-1688 # 98968 <_entry-0x80167698>
    80208816:	953e                	add	a0,a0,a5
	register uint64 a1 asm ("a1") = (uint64)(arg1);
    80208818:	4581                	li	a1,0
	register uint64 a2 asm ("a2") = (uint64)(arg2);
    8020881a:	4601                	li	a2,0
	register uint64 a3 asm ("a3") = (uint64)(arg3);
    8020881c:	4681                	li	a3,0
	register uint64 a4 asm ("a4") = (uint64)(arg4);
    8020881e:	4701                	li	a4,0
	register uint64 a5 asm ("a5") = (uint64)(arg5);
    80208820:	4781                	li	a5,0
	register uint64 a6 asm ("a6") = (uint64)(fid);
    80208822:	4801                	li	a6,0
	register uint64 a7 asm ("a7") = (uint64)(ext);
    80208824:	544958b7          	lui	a7,0x54495
    80208828:	d4588893          	addi	a7,a7,-699 # 54494d45 <_entry-0x2bd6b2bb>
	asm volatile ("ecall"
    8020882c:	00000073          	ecall
}
    80208830:	6422                	ld	s0,8(sp)
    80208832:	0141                	addi	sp,sp,16
    80208834:	8082                	ret

0000000080208836 <timer_tick>:

void timer_tick() {
    80208836:	1101                	addi	sp,sp,-32
    80208838:	ec06                	sd	ra,24(sp)
    8020883a:	e822                	sd	s0,16(sp)
    8020883c:	e426                	sd	s1,8(sp)
    8020883e:	1000                	addi	s0,sp,32
    acquire(&tickslock);
    80208840:	00566497          	auipc	s1,0x566
    80208844:	a8048493          	addi	s1,s1,-1408 # 8076e2c0 <tickslock>
    80208848:	8526                	mv	a0,s1
    8020884a:	ffffe097          	auipc	ra,0xffffe
    8020884e:	324080e7          	jalr	804(ra) # 80206b6e <acquire>
    ticks++;
    80208852:	00566517          	auipc	a0,0x566
    80208856:	a8650513          	addi	a0,a0,-1402 # 8076e2d8 <ticks>
    8020885a:	411c                	lw	a5,0(a0)
    8020885c:	2785                	addiw	a5,a5,1
    8020885e:	c11c                	sw	a5,0(a0)
    wakeup(&ticks);
    80208860:	ffff9097          	auipc	ra,0xffff9
    80208864:	480080e7          	jalr	1152(ra) # 80201ce0 <wakeup>
    release(&tickslock);
    80208868:	8526                	mv	a0,s1
    8020886a:	ffffe097          	auipc	ra,0xffffe
    8020886e:	358080e7          	jalr	856(ra) # 80206bc2 <release>
    set_next_timeout();
    80208872:	00000097          	auipc	ra,0x0
    80208876:	f92080e7          	jalr	-110(ra) # 80208804 <set_next_timeout>
}
    8020887a:	60e2                	ld	ra,24(sp)
    8020887c:	6442                	ld	s0,16(sp)
    8020887e:	64a2                	ld	s1,8(sp)
    80208880:	6105                	addi	sp,sp,32
    80208882:	8082                	ret

0000000080208884 <get_time_ms>:

uint64 get_time_ms() {
    80208884:	1141                	addi	sp,sp,-16
    80208886:	e422                	sd	s0,8(sp)
    80208888:	0800                	addi	s0,sp,16
    8020888a:	c0102573          	rdtime	a0
    uint64 time = r_time();
    return time / (TICK_FREQ / MSEC_PER_SEC);
}
    8020888e:	3e800793          	li	a5,1000
    80208892:	02f55533          	divu	a0,a0,a5
    80208896:	6422                	ld	s0,8(sp)
    80208898:	0141                	addi	sp,sp,16
    8020889a:	8082                	ret

000000008020889c <get_time_us>:

uint64 get_time_us() {
    8020889c:	1141                	addi	sp,sp,-16
    8020889e:	e422                	sd	s0,8(sp)
    802088a0:	0800                	addi	s0,sp,16
    802088a2:	c0102573          	rdtime	a0
    return r_time() * USEC_PER_SEC / TICK_FREQ;
    802088a6:	000f47b7          	lui	a5,0xf4
    802088aa:	24078793          	addi	a5,a5,576 # f4240 <_entry-0x8010bdc0>
    802088ae:	02f50533          	mul	a0,a0,a5
}
    802088b2:	02f55533          	divu	a0,a0,a5
    802088b6:	6422                	ld	s0,8(sp)
    802088b8:	0141                	addi	sp,sp,16
    802088ba:	8082                	ret

00000000802088bc <get_timeval>:

struct timeval get_timeval(){
    802088bc:	1101                	addi	sp,sp,-32
    802088be:	ec22                	sd	s0,24(sp)
    802088c0:	1000                	addi	s0,sp,32
    802088c2:	c01027f3          	rdtime	a5
   uint64 time = r_time();
   return (struct timeval){
     .sec = time / (TICK_FREQ),
     .usec = time / (TICK_FREQ / MSEC_PER_SEC),
   };
}
    802088c6:	000f4537          	lui	a0,0xf4
    802088ca:	24050513          	addi	a0,a0,576 # f4240 <_entry-0x8010bdc0>
    802088ce:	02a7d533          	divu	a0,a5,a0
    802088d2:	3e800593          	li	a1,1000
    802088d6:	02b7d5b3          	divu	a1,a5,a1
    802088da:	6462                	ld	s0,24(sp)
    802088dc:	6105                	addi	sp,sp,32
    802088de:	8082                	ret

00000000802088e0 <main>:
}
*/

void
main(unsigned long hartid, unsigned long dtb_pa)
{
    802088e0:	7139                	addi	sp,sp,-64
    802088e2:	fc06                	sd	ra,56(sp)
    802088e4:	f822                	sd	s0,48(sp)
    802088e6:	f426                	sd	s1,40(sp)
    802088e8:	f04a                	sd	s2,32(sp)
    802088ea:	ec4e                	sd	s3,24(sp)
    802088ec:	e852                	sd	s4,16(sp)
    802088ee:	e456                	sd	s5,8(sp)
    802088f0:	0080                	addi	s0,sp,64
    802088f2:	84aa                	mv	s1,a0
  asm volatile("mv tp, %0" : : "r" (hartid));
    802088f4:	822a                	mv	tp,a0
  inithartid(hartid);
  booted[hartid]=1;
    802088f6:	00251713          	slli	a4,a0,0x2
    802088fa:	00566797          	auipc	a5,0x566
    802088fe:	9e678793          	addi	a5,a5,-1562 # 8076e2e0 <booted>
    80208902:	97ba                	add	a5,a5,a4
    80208904:	4705                	li	a4,1
    80208906:	c398                	sw	a4,0(a5)
  
  if (__first_boot_magic == 0x5a5a) { /* boot hart not fixed 1 */
    80208908:	0050e697          	auipc	a3,0x50e
    8020890c:	9406b683          	ld	a3,-1728(a3) # 80716248 <__first_boot_magic>
    80208910:	6799                	lui	a5,0x6
    80208912:	a5a78793          	addi	a5,a5,-1446 # 5a5a <_entry-0x801fa5a6>
    started=1;
  }
  else
  {
    // hart 1
    while (started == 0)
    80208916:	00566717          	auipc	a4,0x566
    8020891a:	a3270713          	addi	a4,a4,-1486 # 8076e348 <started>
  if (__first_boot_magic == 0x5a5a) { /* boot hart not fixed 1 */
    8020891e:	04f68563          	beq	a3,a5,80208968 <main+0x88>
    while (started == 0)
    80208922:	431c                	lw	a5,0(a4)
    80208924:	2781                	sext.w	a5,a5
    80208926:	dff5                	beqz	a5,80208922 <main+0x42>
    ;
    printf("hart %d enter main()...\n", hartid);
    80208928:	85a6                	mv	a1,s1
    8020892a:	00009517          	auipc	a0,0x9
    8020892e:	37650513          	addi	a0,a0,886 # 80211ca0 <digits+0x3d8>
    80208932:	ffffe097          	auipc	ra,0xffffe
    80208936:	5e6080e7          	jalr	1510(ra) # 80206f18 <printf>
    kvminithart();
    8020893a:	fffff097          	auipc	ra,0xfffff
    8020893e:	5bc080e7          	jalr	1468(ra) # 80207ef6 <kvminithart>
    trapinithart();  // install kernel trap vector, including interrupt handler
    80208942:	00000097          	auipc	ra,0x0
    80208946:	24c080e7          	jalr	588(ra) # 80208b8e <trapinithart>
    __sync_synchronize();
    8020894a:	0ff0000f          	fence
  }
  printf("hart %d scheduler!\n", hartid);
    8020894e:	85a6                	mv	a1,s1
    80208950:	00009517          	auipc	a0,0x9
    80208954:	37050513          	addi	a0,a0,880 # 80211cc0 <digits+0x3f8>
    80208958:	ffffe097          	auipc	ra,0xffffe
    8020895c:	5c0080e7          	jalr	1472(ra) # 80206f18 <printf>
  scheduler();
    80208960:	ffff9097          	auipc	ra,0xffff9
    80208964:	da0080e7          	jalr	-608(ra) # 80201700 <scheduler>
    __first_boot_magic = 0;
    80208968:	0050e797          	auipc	a5,0x50e
    8020896c:	8e07b023          	sd	zero,-1824(a5) # 80716248 <__first_boot_magic>
    cpuinit();
    80208970:	00001097          	auipc	ra,0x1
    80208974:	168080e7          	jalr	360(ra) # 80209ad8 <cpuinit>
    printfinit();
    80208978:	fffff097          	auipc	ra,0xfffff
    8020897c:	cd4080e7          	jalr	-812(ra) # 8020764c <printfinit>
    printf("hart %d enter main() from %p...\n", hartid,_entry);
    80208980:	ffff7617          	auipc	a2,0xffff7
    80208984:	68060613          	addi	a2,a2,1664 # 80200000 <_entry>
    80208988:	85a6                	mv	a1,s1
    8020898a:	00009517          	auipc	a0,0x9
    8020898e:	2d650513          	addi	a0,a0,726 # 80211c60 <digits+0x398>
    80208992:	ffffe097          	auipc	ra,0xffffe
    80208996:	586080e7          	jalr	1414(ra) # 80206f18 <printf>
    8020899a:	4905                	li	s2,1
	register uint64 a7 asm ("a7") = (uint64)(ext);
    8020899c:	004859b7          	lui	s3,0x485
    802089a0:	34d98993          	addi	s3,s3,845 # 48534d <_entry-0x7fd7acb3>
        printf("cpu#%d state:%d\r\n", i, sbi_hsm_hart_status(i));
    802089a4:	00009a97          	auipc	s5,0x9
    802089a8:	2e4a8a93          	addi	s5,s5,740 # 80211c88 <digits+0x3c0>
    for(int i = 1; i < NCPU; i++) {
    802089ac:	4a15                	li	s4,5
    802089ae:	a811                	j	802089c2 <main+0xe2>
        printf("cpu#%d state:%d\r\n", i, sbi_hsm_hart_status(i));
    802089b0:	859a                	mv	a1,t1
    802089b2:	8556                	mv	a0,s5
    802089b4:	ffffe097          	auipc	ra,0xffffe
    802089b8:	564080e7          	jalr	1380(ra) # 80206f18 <printf>
    for(int i = 1; i < NCPU; i++) {
    802089bc:	0905                	addi	s2,s2,1
    802089be:	03490463          	beq	s2,s4,802089e6 <main+0x106>
    802089c2:	0009031b          	sext.w	t1,s2
	register uint64 a0 asm ("a0") = (uint64)(arg0);
    802089c6:	854a                	mv	a0,s2
	register uint64 a1 asm ("a1") = (uint64)(arg1);
    802089c8:	4581                	li	a1,0
	register uint64 a2 asm ("a2") = (uint64)(arg2);
    802089ca:	4601                	li	a2,0
	register uint64 a3 asm ("a3") = (uint64)(arg3);
    802089cc:	4681                	li	a3,0
	register uint64 a4 asm ("a4") = (uint64)(arg4);
    802089ce:	4701                	li	a4,0
	register uint64 a5 asm ("a5") = (uint64)(arg5);
    802089d0:	4781                	li	a5,0
	register uint64 a6 asm ("a6") = (uint64)(fid);
    802089d2:	4809                	li	a6,2
	register uint64 a7 asm ("a7") = (uint64)(ext);
    802089d4:	88ce                	mv	a7,s3
	asm volatile ("ecall"
    802089d6:	00000073          	ecall
}

static inline int sbi_hsm_hart_status(unsigned long hart){
    struct sbiret ret;
    ret = a_sbi_ecall(0x48534D, 2, hart, 0, 0, 0, 0, 0);
    return (ret.error != 0 ? (int)ret.error : (int)ret.value);
    802089da:	0005861b          	sext.w	a2,a1
    802089de:	d969                	beqz	a0,802089b0 <main+0xd0>
    802089e0:	0005061b          	sext.w	a2,a0
    802089e4:	b7f1                	j	802089b0 <main+0xd0>
    kpminit();
    802089e6:	fffff097          	auipc	ra,0xfffff
    802089ea:	d8a080e7          	jalr	-630(ra) # 80207770 <kpminit>
    kmallocinit();
    802089ee:	fffff097          	auipc	ra,0xfffff
    802089f2:	134080e7          	jalr	308(ra) # 80207b22 <kmallocinit>
    kvminit();       // create kernel page table
    802089f6:	fffff097          	auipc	ra,0xfffff
    802089fa:	6b2080e7          	jalr	1714(ra) # 802080a8 <kvminit>
    kvminithart();   // turn on paging
    802089fe:	fffff097          	auipc	ra,0xfffff
    80208a02:	4f8080e7          	jalr	1272(ra) # 80207ef6 <kvminithart>
    timerinit();     // init a lock for timer
    80208a06:	00000097          	auipc	ra,0x0
    80208a0a:	dbe080e7          	jalr	-578(ra) # 802087c4 <timerinit>
    trapinithart();  // install kernel trap vector, including interrupt handler
    80208a0e:	00000097          	auipc	ra,0x0
    80208a12:	180080e7          	jalr	384(ra) # 80208b8e <trapinithart>
    procinit();
    80208a16:	ffff9097          	auipc	ra,0xffff9
    80208a1a:	8d4080e7          	jalr	-1836(ra) # 802012ea <procinit>
    plicinit();
    80208a1e:	00000097          	auipc	ra,0x0
    80208a22:	cde080e7          	jalr	-802(ra) # 802086fc <plicinit>
    binit();
    80208a26:	ffff7097          	auipc	ra,0xffff7
    80208a2a:	616080e7          	jalr	1558(ra) # 8020003c <binit>
    disk_init();
    80208a2e:	ffff8097          	auipc	ra,0xffff8
    80208a32:	2d8080e7          	jalr	728(ra) # 80200d06 <disk_init>
    fs_init();
    80208a36:	ffffa097          	auipc	ra,0xffffa
    80208a3a:	3bc080e7          	jalr	956(ra) # 80202df2 <fs_init>
    logbufinit();
    80208a3e:	00005097          	auipc	ra,0x5
    80208a42:	042080e7          	jalr	66(ra) # 8020da80 <logbufinit>
    devinit();
    80208a46:	ffffd097          	auipc	ra,0xffffd
    80208a4a:	7cc080e7          	jalr	1996(ra) # 80206212 <devinit>
    fileinit();
    80208a4e:	ffffc097          	auipc	ra,0xffffc
    80208a52:	776080e7          	jalr	1910(ra) # 802051c4 <fileinit>
      userinit();
    80208a56:	ffff9097          	auipc	ra,0xffff9
    80208a5a:	300080e7          	jalr	768(ra) # 80201d56 <userinit>
    __sync_synchronize();
    80208a5e:	0ff0000f          	fence
    for(int i = 1; i < NCPU; i++) {
    80208a62:	00566e17          	auipc	t3,0x566
    80208a66:	87ee0e13          	addi	t3,t3,-1922 # 8076e2e0 <booted>
    __sync_synchronize();
    80208a6a:	4305                	li	t1,1
          start_hart(i, (uint64)_entry, 0);
    80208a6c:	ffff7f17          	auipc	t5,0xffff7
    80208a70:	594f0f13          	addi	t5,t5,1428 # 80200000 <_entry>
	register uint64 a7 asm ("a7") = (uint64)(ext);
    80208a74:	004858b7          	lui	a7,0x485
    80208a78:	34d88893          	addi	a7,a7,845 # 48534d <_entry-0x7fd7acb3>
    for(int i = 1; i < NCPU; i++) {
    80208a7c:	4e95                	li	t4,5
    80208a7e:	a029                	j	80208a88 <main+0x1a8>
    80208a80:	0305                	addi	t1,t1,1
    80208a82:	0e11                	addi	t3,t3,4
    80208a84:	03d30063          	beq	t1,t4,80208aa4 <main+0x1c4>
        if(hartid!=i&&booted[i]==0){
    80208a88:	fe648ce3          	beq	s1,t1,80208a80 <main+0x1a0>
    80208a8c:	004e2783          	lw	a5,4(t3)
    80208a90:	fbe5                	bnez	a5,80208a80 <main+0x1a0>
	register uint64 a0 asm ("a0") = (uint64)(arg0);
    80208a92:	851a                	mv	a0,t1
	register uint64 a1 asm ("a1") = (uint64)(arg1);
    80208a94:	85fa                	mv	a1,t5
	register uint64 a2 asm ("a2") = (uint64)(arg2);
    80208a96:	4601                	li	a2,0
	register uint64 a3 asm ("a3") = (uint64)(arg3);
    80208a98:	4681                	li	a3,0
	register uint64 a4 asm ("a4") = (uint64)(arg4);
    80208a9a:	4701                	li	a4,0
	register uint64 a6 asm ("a6") = (uint64)(fid);
    80208a9c:	4801                	li	a6,0
	asm volatile ("ecall"
    80208a9e:	00000073          	ecall
}
    80208aa2:	bff9                	j	80208a80 <main+0x1a0>
    started=1;
    80208aa4:	4785                	li	a5,1
    80208aa6:	00566717          	auipc	a4,0x566
    80208aaa:	8af72123          	sw	a5,-1886(a4) # 8076e348 <started>
    80208aae:	b545                	j	8020894e <main+0x6e>

0000000080208ab0 <__get_boot_hartid>:
}

int
__get_boot_hartid(int a0)
{
    80208ab0:	1141                	addi	sp,sp,-16
    80208ab2:	e422                	sd	s0,8(sp)
    80208ab4:	0800                	addi	s0,sp,16
    80208ab6:	8eaa                	mv	t4,a0
    80208ab8:	4301                	li	t1,0
	register uint64 a7 asm ("a7") = (uint64)(ext);
    80208aba:	004858b7          	lui	a7,0x485
    80208abe:	34d88893          	addi	a7,a7,845 # 48534d <_entry-0x7fd7acb3>
    int i;
    for (i = 0; i < 5; i++)
    80208ac2:	4e15                	li	t3,5
    80208ac4:	a029                	j	80208ace <__get_boot_hartid+0x1e>
    {
        if (sbi_hsm_hart_status(i) == 0)
    80208ac6:	c585                	beqz	a1,80208aee <__get_boot_hartid+0x3e>
    for (i = 0; i < 5; i++)
    80208ac8:	0305                	addi	t1,t1,1
    80208aca:	03c30363          	beq	t1,t3,80208af0 <__get_boot_hartid+0x40>
    80208ace:	00030f1b          	sext.w	t5,t1
	register uint64 a0 asm ("a0") = (uint64)(arg0);
    80208ad2:	851a                	mv	a0,t1
	register uint64 a1 asm ("a1") = (uint64)(arg1);
    80208ad4:	4581                	li	a1,0
	register uint64 a2 asm ("a2") = (uint64)(arg2);
    80208ad6:	4601                	li	a2,0
	register uint64 a3 asm ("a3") = (uint64)(arg3);
    80208ad8:	4681                	li	a3,0
	register uint64 a4 asm ("a4") = (uint64)(arg4);
    80208ada:	4701                	li	a4,0
	register uint64 a5 asm ("a5") = (uint64)(arg5);
    80208adc:	4781                	li	a5,0
	register uint64 a6 asm ("a6") = (uint64)(fid);
    80208ade:	4809                	li	a6,2
	asm volatile ("ecall"
    80208ae0:	00000073          	ecall
    return (ret.error != 0 ? (int)ret.error : (int)ret.value);
    80208ae4:	2581                	sext.w	a1,a1
    80208ae6:	d165                	beqz	a0,80208ac6 <__get_boot_hartid+0x16>
    80208ae8:	0005059b          	sext.w	a1,a0
    80208aec:	bfe9                	j	80208ac6 <__get_boot_hartid+0x16>
    80208aee:	8efa                	mv	t4,t5
        {
            return i;
        }
    }
    return a0;
}
    80208af0:	8576                	mv	a0,t4
    80208af2:	6422                	ld	s0,8(sp)
    80208af4:	0141                	addi	sp,sp,16
    80208af6:	8082                	ret
	...

0000000080208b00 <kernelvec>:
    80208b00:	7111                	addi	sp,sp,-256
    80208b02:	e006                	sd	ra,0(sp)
    80208b04:	e40a                	sd	sp,8(sp)
    80208b06:	e80e                	sd	gp,16(sp)
    80208b08:	ec12                	sd	tp,24(sp)
    80208b0a:	f016                	sd	t0,32(sp)
    80208b0c:	f41a                	sd	t1,40(sp)
    80208b0e:	f81e                	sd	t2,48(sp)
    80208b10:	fc22                	sd	s0,56(sp)
    80208b12:	e0a6                	sd	s1,64(sp)
    80208b14:	e4aa                	sd	a0,72(sp)
    80208b16:	e8ae                	sd	a1,80(sp)
    80208b18:	ecb2                	sd	a2,88(sp)
    80208b1a:	f0b6                	sd	a3,96(sp)
    80208b1c:	f4ba                	sd	a4,104(sp)
    80208b1e:	f8be                	sd	a5,112(sp)
    80208b20:	fcc2                	sd	a6,120(sp)
    80208b22:	e146                	sd	a7,128(sp)
    80208b24:	e54a                	sd	s2,136(sp)
    80208b26:	e94e                	sd	s3,144(sp)
    80208b28:	ed52                	sd	s4,152(sp)
    80208b2a:	f156                	sd	s5,160(sp)
    80208b2c:	f55a                	sd	s6,168(sp)
    80208b2e:	f95e                	sd	s7,176(sp)
    80208b30:	fd62                	sd	s8,184(sp)
    80208b32:	e1e6                	sd	s9,192(sp)
    80208b34:	e5ea                	sd	s10,200(sp)
    80208b36:	e9ee                	sd	s11,208(sp)
    80208b38:	edf2                	sd	t3,216(sp)
    80208b3a:	f1f6                	sd	t4,224(sp)
    80208b3c:	f5fa                	sd	t5,232(sp)
    80208b3e:	f9fe                	sd	t6,240(sp)
    80208b40:	184000ef          	jal	ra,80208cc4 <kerneltrap>
    80208b44:	6082                	ld	ra,0(sp)
    80208b46:	6122                	ld	sp,8(sp)
    80208b48:	61c2                	ld	gp,16(sp)
    80208b4a:	7282                	ld	t0,32(sp)
    80208b4c:	7322                	ld	t1,40(sp)
    80208b4e:	73c2                	ld	t2,48(sp)
    80208b50:	7462                	ld	s0,56(sp)
    80208b52:	6486                	ld	s1,64(sp)
    80208b54:	6526                	ld	a0,72(sp)
    80208b56:	65c6                	ld	a1,80(sp)
    80208b58:	6666                	ld	a2,88(sp)
    80208b5a:	7686                	ld	a3,96(sp)
    80208b5c:	7726                	ld	a4,104(sp)
    80208b5e:	77c6                	ld	a5,112(sp)
    80208b60:	7866                	ld	a6,120(sp)
    80208b62:	688a                	ld	a7,128(sp)
    80208b64:	692a                	ld	s2,136(sp)
    80208b66:	69ca                	ld	s3,144(sp)
    80208b68:	6a6a                	ld	s4,152(sp)
    80208b6a:	7a8a                	ld	s5,160(sp)
    80208b6c:	7b2a                	ld	s6,168(sp)
    80208b6e:	7bca                	ld	s7,176(sp)
    80208b70:	7c6a                	ld	s8,184(sp)
    80208b72:	6c8e                	ld	s9,192(sp)
    80208b74:	6d2e                	ld	s10,200(sp)
    80208b76:	6dce                	ld	s11,208(sp)
    80208b78:	6e6e                	ld	t3,216(sp)
    80208b7a:	7e8e                	ld	t4,224(sp)
    80208b7c:	7f2e                	ld	t5,232(sp)
    80208b7e:	7fce                	ld	t6,240(sp)
    80208b80:	6111                	addi	sp,sp,256
    80208b82:	10200073          	sret
	...

0000000080208b8e <trapinithart>:
// }

// set up to take exceptions and traps while in the kernel.
void
trapinithart(void)
{
    80208b8e:	1141                	addi	sp,sp,-16
    80208b90:	e406                	sd	ra,8(sp)
    80208b92:	e022                	sd	s0,0(sp)
    80208b94:	0800                	addi	s0,sp,16
  asm volatile("csrw stvec, %0" : : "r" (x));
    80208b96:	00000797          	auipc	a5,0x0
    80208b9a:	f6a78793          	addi	a5,a5,-150 # 80208b00 <kernelvec>
    80208b9e:	10579073          	csrw	stvec,a5
  asm volatile("csrr %0, sstatus" : "=r" (x) );
    80208ba2:	100027f3          	csrr	a5,sstatus
  w_stvec((uint64)kernelvec);
  w_sstatus(r_sstatus() | SSTATUS_SIE);
    80208ba6:	0027e793          	ori	a5,a5,2
  asm volatile("csrw sstatus, %0" : : "r" (x));
    80208baa:	10079073          	csrw	sstatus,a5
  asm volatile("csrr %0, sie" : "=r" (x) );
    80208bae:	104027f3          	csrr	a5,sie
  // enable supervisor-mode timer interrupts.
  w_sie(r_sie() | SIE_SEIE | SIE_SSIE | SIE_STIE);
    80208bb2:	2227e793          	ori	a5,a5,546
  asm volatile("csrw sie, %0" : : "r" (x));
    80208bb6:	10479073          	csrw	sie,a5
  set_next_timeout();
    80208bba:	00000097          	auipc	ra,0x0
    80208bbe:	c4a080e7          	jalr	-950(ra) # 80208804 <set_next_timeout>
  __debug_info("trapinithart\n");
    80208bc2:	00009517          	auipc	a0,0x9
    80208bc6:	11650513          	addi	a0,a0,278 # 80211cd8 <digits+0x410>
    80208bca:	ffffe097          	auipc	ra,0xffffe
    80208bce:	514080e7          	jalr	1300(ra) # 802070de <__debug_info>
}
    80208bd2:	60a2                	ld	ra,8(sp)
    80208bd4:	6402                	ld	s0,0(sp)
    80208bd6:	0141                	addi	sp,sp,16
    80208bd8:	8082                	ret

0000000080208bda <usertrapret>:
  usertrapret();
}


void
usertrapret(){
    80208bda:	1141                	addi	sp,sp,-16
    80208bdc:	e406                	sd	ra,8(sp)
    80208bde:	e022                	sd	s0,0(sp)
    80208be0:	0800                	addi	s0,sp,16
  struct proc *p = myproc();
    80208be2:	00001097          	auipc	ra,0x1
    80208be6:	f48080e7          	jalr	-184(ra) # 80209b2a <myproc>
  asm volatile("csrr %0, sstatus" : "=r" (x) );
    80208bea:	100027f3          	csrr	a5,sstatus
  w_sstatus(r_sstatus() & ~SSTATUS_SIE);
    80208bee:	9bf5                	andi	a5,a5,-3
  asm volatile("csrw sstatus, %0" : : "r" (x));
    80208bf0:	10079073          	csrw	sstatus,a5
  // we're about to switch the destination of traps from
  // kerneltrap() to usertrap(), so turn off interrupts until
  // we're back in user space, where usertrap() is correct.
  intr_off();
  // send syscalls, interrupts, and exceptions to trampoline.S
  w_stvec(TRAMPOLINE + (uservec - trampoline));
    80208bf4:	00006617          	auipc	a2,0x6
    80208bf8:	40c60613          	addi	a2,a2,1036 # 8020f000 <_trampoline>
    80208bfc:	00006697          	auipc	a3,0x6
    80208c00:	40468693          	addi	a3,a3,1028 # 8020f000 <_trampoline>
    80208c04:	8e91                	sub	a3,a3,a2
    80208c06:	040007b7          	lui	a5,0x4000
    80208c0a:	17fd                	addi	a5,a5,-1
    80208c0c:	07b2                	slli	a5,a5,0xc
    80208c0e:	96be                	add	a3,a3,a5
  asm volatile("csrw stvec, %0" : : "r" (x));
    80208c10:	10569073          	csrw	stvec,a3

  // set up trapframe values that uservec will need when
  // the process next re-enters the kernel.
  p->trapframe->kernel_satp = r_satp();         // kernel page table
    80208c14:	7538                	ld	a4,104(a0)
  asm volatile("csrr %0, satp" : "=r" (x) );
    80208c16:	180026f3          	csrr	a3,satp
    80208c1a:	e314                	sd	a3,0(a4)
  p->trapframe->kernel_sp = p->kstack + PGSIZE; // process's kernel stack
    80208c1c:	7538                	ld	a4,104(a0)
    80208c1e:	6934                	ld	a3,80(a0)
    80208c20:	6585                	lui	a1,0x1
    80208c22:	96ae                	add	a3,a3,a1
    80208c24:	e714                	sd	a3,8(a4)
  p->trapframe->kernel_trap = (uint64)usertrap;
    80208c26:	7538                	ld	a4,104(a0)
    80208c28:	00000697          	auipc	a3,0x0
    80208c2c:	3e868693          	addi	a3,a3,1000 # 80209010 <usertrap>
    80208c30:	eb14                	sd	a3,16(a4)
  p->trapframe->kernel_hartid = r_tp();         // hartid for cpuid()
    80208c32:	7538                	ld	a4,104(a0)
  asm volatile("mv %0, tp" : "=r" (x) );
    80208c34:	8692                	mv	a3,tp
    80208c36:	f314                	sd	a3,32(a4)
  asm volatile("csrr %0, sstatus" : "=r" (x) );
    80208c38:	100026f3          	csrr	a3,sstatus
  // set up the registers that trampoline.S's sret will use
  // to get to user space.
  
  // set S Previous Privilege mode to User.
  unsigned long x = r_sstatus();
  x &= ~SSTATUS_SPP; // clear SPP to 0 for user mode
    80208c3c:	eff6f693          	andi	a3,a3,-257
  x |= SSTATUS_SPIE; // enable interrupts in user mode
    80208c40:	0206e693          	ori	a3,a3,32
  asm volatile("csrw sstatus, %0" : : "r" (x));
    80208c44:	10069073          	csrw	sstatus,a3
  w_sstatus(x);

  // set S Exception Program Counter to the saved user pc.
  w_sepc(p->trapframe->epc);
    80208c48:	7538                	ld	a4,104(a0)
  asm volatile("csrw sepc, %0" : : "r" (x));
    80208c4a:	6f18                	ld	a4,24(a4)
    80208c4c:	14171073          	csrw	sepc,a4

  // tell trampoline.S the user page table to switch to.
  // printf("[usertrapret]p->pagetable: %p\n", p->pagetable);
  uint64 satp = MAKE_SATP(p->pagetable);
    80208c50:	712c                	ld	a1,96(a0)
    80208c52:	81b1                	srli	a1,a1,0xc

  // jump to trampoline.S at the top of memory, which 
  // switches to the user page table, restores user registers,
  // and switches to user mode with sret.

  uint64 fn = TRAMPOLINE + (userret - trampoline);
    80208c54:	00006717          	auipc	a4,0x6
    80208c58:	43c70713          	addi	a4,a4,1084 # 8020f090 <userret>
    80208c5c:	8f11                	sub	a4,a4,a2
    80208c5e:	97ba                	add	a5,a5,a4
  
  ((void (*)(uint64,uint64))fn)(TRAPFRAME, satp);
    80208c60:	577d                	li	a4,-1
    80208c62:	177e                	slli	a4,a4,0x3f
    80208c64:	8dd9                	or	a1,a1,a4
    80208c66:	7ffff537          	lui	a0,0x7ffff
    80208c6a:	9782                	jalr	a5
}
    80208c6c:	60a2                	ld	ra,8(sp)
    80208c6e:	6402                	ld	s0,0(sp)
    80208c70:	0141                	addi	sp,sp,16
    80208c72:	8082                	ret

0000000080208c74 <devintr>:
// Check if it's an external/software interrupt, 
// and handle it. 
// returns  2 if timer interrupt, 
//          1 if other device, 
//          0 if not recognized. 
int devintr(void) {
    80208c74:	1141                	addi	sp,sp,-16
    80208c76:	e406                	sd	ra,8(sp)
    80208c78:	e022                	sd	s0,0(sp)
    80208c7a:	0800                	addi	s0,sp,16
  asm volatile("csrr %0, scause" : "=r" (x) );
    80208c7c:	14202773          	csrr	a4,scause
	uint64 scause = r_scause();
	//printf("devintr scause:%p\n",scause);

	// handle external interrupt 
	if ((0x8000000000000000L & scause) && 9 == (scause & 0xff)) 
    80208c80:	00074c63          	bltz	a4,80208c98 <devintr+0x24>
		sbi_set_mie();
		#endif 

		return 1;
	}
	else if (0x8000000000000005L == scause) {
    80208c84:	57fd                	li	a5,-1
    80208c86:	17fe                	slli	a5,a5,0x3f
    80208c88:	0795                	addi	a5,a5,5
		timer_tick();
                //proc_tick();
		return 2;
	}
	else { return 0;}
    80208c8a:	4501                	li	a0,0
	else if (0x8000000000000005L == scause) {
    80208c8c:	02f70663          	beq	a4,a5,80208cb8 <devintr+0x44>
}
    80208c90:	60a2                	ld	ra,8(sp)
    80208c92:	6402                	ld	s0,0(sp)
    80208c94:	0141                	addi	sp,sp,16
    80208c96:	8082                	ret
	if ((0x8000000000000000L & scause) && 9 == (scause & 0xff)) 
    80208c98:	0ff77793          	andi	a5,a4,255
    80208c9c:	46a5                	li	a3,9
    80208c9e:	fed793e3          	bne	a5,a3,80208c84 <devintr+0x10>
		printf("irq:%d\n",irq);
    80208ca2:	4581                	li	a1,0
    80208ca4:	00009517          	auipc	a0,0x9
    80208ca8:	04450513          	addi	a0,a0,68 # 80211ce8 <digits+0x420>
    80208cac:	ffffe097          	auipc	ra,0xffffe
    80208cb0:	26c080e7          	jalr	620(ra) # 80206f18 <printf>
		return 1;
    80208cb4:	4505                	li	a0,1
    80208cb6:	bfe9                	j	80208c90 <devintr+0x1c>
		timer_tick();
    80208cb8:	00000097          	auipc	ra,0x0
    80208cbc:	b7e080e7          	jalr	-1154(ra) # 80208836 <timer_tick>
		return 2;
    80208cc0:	4509                	li	a0,2
    80208cc2:	b7f9                	j	80208c90 <devintr+0x1c>

0000000080208cc4 <kerneltrap>:
kerneltrap() {
    80208cc4:	7179                	addi	sp,sp,-48
    80208cc6:	f406                	sd	ra,40(sp)
    80208cc8:	f022                	sd	s0,32(sp)
    80208cca:	ec26                	sd	s1,24(sp)
    80208ccc:	e84a                	sd	s2,16(sp)
    80208cce:	e44e                	sd	s3,8(sp)
    80208cd0:	1800                	addi	s0,sp,48
  asm volatile("csrr %0, sepc" : "=r" (x) );
    80208cd2:	14102973          	csrr	s2,sepc
  asm volatile("csrr %0, sstatus" : "=r" (x) );
    80208cd6:	100024f3          	csrr	s1,sstatus
  asm volatile("csrr %0, scause" : "=r" (x) );
    80208cda:	142029f3          	csrr	s3,scause
  if((sstatus & SSTATUS_SPP) == 0)
    80208cde:	1004f793          	andi	a5,s1,256
    80208ce2:	cb85                	beqz	a5,80208d12 <kerneltrap+0x4e>
  asm volatile("csrr %0, sstatus" : "=r" (x) );
    80208ce4:	100027f3          	csrr	a5,sstatus
  return (x & SSTATUS_SIE) != 0;
    80208ce8:	8b89                	andi	a5,a5,2
  if(intr_get() != 0)
    80208cea:	ef85                	bnez	a5,80208d22 <kerneltrap+0x5e>
  if((which_dev = devintr()) == 0){
    80208cec:	00000097          	auipc	ra,0x0
    80208cf0:	f88080e7          	jalr	-120(ra) # 80208c74 <devintr>
    80208cf4:	cd1d                	beqz	a0,80208d32 <kerneltrap+0x6e>
  if(which_dev == 2 && myproc() != 0 && myproc()->state == RUNNING) {
    80208cf6:	4789                	li	a5,2
    80208cf8:	08f50b63          	beq	a0,a5,80208d8e <kerneltrap+0xca>
  asm volatile("csrw sepc, %0" : : "r" (x));
    80208cfc:	14191073          	csrw	sepc,s2
  asm volatile("csrw sstatus, %0" : : "r" (x));
    80208d00:	10049073          	csrw	sstatus,s1
}
    80208d04:	70a2                	ld	ra,40(sp)
    80208d06:	7402                	ld	s0,32(sp)
    80208d08:	64e2                	ld	s1,24(sp)
    80208d0a:	6942                	ld	s2,16(sp)
    80208d0c:	69a2                	ld	s3,8(sp)
    80208d0e:	6145                	addi	sp,sp,48
    80208d10:	8082                	ret
    panic("kerneltrap: not from supervisor mode");
    80208d12:	00009517          	auipc	a0,0x9
    80208d16:	fde50513          	addi	a0,a0,-34 # 80211cf0 <digits+0x428>
    80208d1a:	ffffe097          	auipc	ra,0xffffe
    80208d1e:	1b4080e7          	jalr	436(ra) # 80206ece <panic>
    panic("kerneltrap: interrupts enabled");
    80208d22:	00009517          	auipc	a0,0x9
    80208d26:	ff650513          	addi	a0,a0,-10 # 80211d18 <digits+0x450>
    80208d2a:	ffffe097          	auipc	ra,0xffffe
    80208d2e:	1a4080e7          	jalr	420(ra) # 80206ece <panic>
    printf("\nscause %p\n", scause);
    80208d32:	85ce                	mv	a1,s3
    80208d34:	00009517          	auipc	a0,0x9
    80208d38:	00450513          	addi	a0,a0,4 # 80211d38 <digits+0x470>
    80208d3c:	ffffe097          	auipc	ra,0xffffe
    80208d40:	1dc080e7          	jalr	476(ra) # 80206f18 <printf>
  asm volatile("csrr %0, sepc" : "=r" (x) );
    80208d44:	141025f3          	csrr	a1,sepc
  asm volatile("csrr %0, stval" : "=r" (x) );
    80208d48:	14302673          	csrr	a2,stval
  asm volatile("mv %0, tp" : "=r" (x) );
    80208d4c:	8692                	mv	a3,tp
    printf("sepc=%p stval=%p hart=%d\n", r_sepc(), r_stval(), r_tp());
    80208d4e:	00009517          	auipc	a0,0x9
    80208d52:	ffa50513          	addi	a0,a0,-6 # 80211d48 <digits+0x480>
    80208d56:	ffffe097          	auipc	ra,0xffffe
    80208d5a:	1c2080e7          	jalr	450(ra) # 80206f18 <printf>
    struct proc *p = myproc();
    80208d5e:	00001097          	auipc	ra,0x1
    80208d62:	dcc080e7          	jalr	-564(ra) # 80209b2a <myproc>
    if (p != 0) {
    80208d66:	cd01                	beqz	a0,80208d7e <kerneltrap+0xba>
      printf("pid: %d, name: %s\n", p->pid, p->name);
    80208d68:	10050613          	addi	a2,a0,256
    80208d6c:	412c                	lw	a1,64(a0)
    80208d6e:	00009517          	auipc	a0,0x9
    80208d72:	ffa50513          	addi	a0,a0,-6 # 80211d68 <digits+0x4a0>
    80208d76:	ffffe097          	auipc	ra,0xffffe
    80208d7a:	1a2080e7          	jalr	418(ra) # 80206f18 <printf>
    panic("kerneltrap");
    80208d7e:	00009517          	auipc	a0,0x9
    80208d82:	00250513          	addi	a0,a0,2 # 80211d80 <digits+0x4b8>
    80208d86:	ffffe097          	auipc	ra,0xffffe
    80208d8a:	148080e7          	jalr	328(ra) # 80206ece <panic>
  if(which_dev == 2 && myproc() != 0 && myproc()->state == RUNNING) {
    80208d8e:	00001097          	auipc	ra,0x1
    80208d92:	d9c080e7          	jalr	-612(ra) # 80209b2a <myproc>
    80208d96:	d13d                	beqz	a0,80208cfc <kerneltrap+0x38>
    80208d98:	00001097          	auipc	ra,0x1
    80208d9c:	d92080e7          	jalr	-622(ra) # 80209b2a <myproc>
    80208da0:	5118                	lw	a4,32(a0)
    80208da2:	478d                	li	a5,3
    80208da4:	f4f71ce3          	bne	a4,a5,80208cfc <kerneltrap+0x38>
    yield();
    80208da8:	ffff9097          	auipc	ra,0xffff9
    80208dac:	3a0080e7          	jalr	928(ra) # 80202148 <yield>
    80208db0:	b7b1                	j	80208cfc <kerneltrap+0x38>

0000000080208db2 <trapframedump>:


void trapframedump(struct trapframe *tf)
{
    80208db2:	1101                	addi	sp,sp,-32
    80208db4:	ec06                	sd	ra,24(sp)
    80208db6:	e822                	sd	s0,16(sp)
    80208db8:	e426                	sd	s1,8(sp)
    80208dba:	1000                	addi	s0,sp,32
    80208dbc:	84aa                	mv	s1,a0
  printf("a0: %p\t", tf->a0);
    80208dbe:	792c                	ld	a1,112(a0)
    80208dc0:	00009517          	auipc	a0,0x9
    80208dc4:	fd050513          	addi	a0,a0,-48 # 80211d90 <digits+0x4c8>
    80208dc8:	ffffe097          	auipc	ra,0xffffe
    80208dcc:	150080e7          	jalr	336(ra) # 80206f18 <printf>
  printf("a1: %p\t", tf->a1);
    80208dd0:	7cac                	ld	a1,120(s1)
    80208dd2:	00009517          	auipc	a0,0x9
    80208dd6:	fc650513          	addi	a0,a0,-58 # 80211d98 <digits+0x4d0>
    80208dda:	ffffe097          	auipc	ra,0xffffe
    80208dde:	13e080e7          	jalr	318(ra) # 80206f18 <printf>
  printf("a2: %p\t", tf->a2);
    80208de2:	60cc                	ld	a1,128(s1)
    80208de4:	00009517          	auipc	a0,0x9
    80208de8:	fbc50513          	addi	a0,a0,-68 # 80211da0 <digits+0x4d8>
    80208dec:	ffffe097          	auipc	ra,0xffffe
    80208df0:	12c080e7          	jalr	300(ra) # 80206f18 <printf>
  printf("a3: %p\n", tf->a3);
    80208df4:	64cc                	ld	a1,136(s1)
    80208df6:	00009517          	auipc	a0,0x9
    80208dfa:	fb250513          	addi	a0,a0,-78 # 80211da8 <digits+0x4e0>
    80208dfe:	ffffe097          	auipc	ra,0xffffe
    80208e02:	11a080e7          	jalr	282(ra) # 80206f18 <printf>
  printf("a4: %p\t", tf->a4);
    80208e06:	68cc                	ld	a1,144(s1)
    80208e08:	00009517          	auipc	a0,0x9
    80208e0c:	fa850513          	addi	a0,a0,-88 # 80211db0 <digits+0x4e8>
    80208e10:	ffffe097          	auipc	ra,0xffffe
    80208e14:	108080e7          	jalr	264(ra) # 80206f18 <printf>
  printf("a5: %p\t", tf->a5);
    80208e18:	6ccc                	ld	a1,152(s1)
    80208e1a:	00009517          	auipc	a0,0x9
    80208e1e:	f9e50513          	addi	a0,a0,-98 # 80211db8 <digits+0x4f0>
    80208e22:	ffffe097          	auipc	ra,0xffffe
    80208e26:	0f6080e7          	jalr	246(ra) # 80206f18 <printf>
  printf("a6: %p\t", tf->a6);
    80208e2a:	70cc                	ld	a1,160(s1)
    80208e2c:	00009517          	auipc	a0,0x9
    80208e30:	f9450513          	addi	a0,a0,-108 # 80211dc0 <digits+0x4f8>
    80208e34:	ffffe097          	auipc	ra,0xffffe
    80208e38:	0e4080e7          	jalr	228(ra) # 80206f18 <printf>
  printf("a7: %p\n", tf->a7);
    80208e3c:	74cc                	ld	a1,168(s1)
    80208e3e:	00009517          	auipc	a0,0x9
    80208e42:	f8a50513          	addi	a0,a0,-118 # 80211dc8 <digits+0x500>
    80208e46:	ffffe097          	auipc	ra,0xffffe
    80208e4a:	0d2080e7          	jalr	210(ra) # 80206f18 <printf>
  printf("t0: %p\t", tf->t0);
    80208e4e:	64ac                	ld	a1,72(s1)
    80208e50:	00009517          	auipc	a0,0x9
    80208e54:	f8050513          	addi	a0,a0,-128 # 80211dd0 <digits+0x508>
    80208e58:	ffffe097          	auipc	ra,0xffffe
    80208e5c:	0c0080e7          	jalr	192(ra) # 80206f18 <printf>
  printf("t1: %p\t", tf->t1);
    80208e60:	68ac                	ld	a1,80(s1)
    80208e62:	00009517          	auipc	a0,0x9
    80208e66:	f7650513          	addi	a0,a0,-138 # 80211dd8 <digits+0x510>
    80208e6a:	ffffe097          	auipc	ra,0xffffe
    80208e6e:	0ae080e7          	jalr	174(ra) # 80206f18 <printf>
  printf("t2: %p\t", tf->t2);
    80208e72:	6cac                	ld	a1,88(s1)
    80208e74:	00009517          	auipc	a0,0x9
    80208e78:	f6c50513          	addi	a0,a0,-148 # 80211de0 <digits+0x518>
    80208e7c:	ffffe097          	auipc	ra,0xffffe
    80208e80:	09c080e7          	jalr	156(ra) # 80206f18 <printf>
  printf("t3: %p\n", tf->t3);
    80208e84:	1004b583          	ld	a1,256(s1)
    80208e88:	00009517          	auipc	a0,0x9
    80208e8c:	f6050513          	addi	a0,a0,-160 # 80211de8 <digits+0x520>
    80208e90:	ffffe097          	auipc	ra,0xffffe
    80208e94:	088080e7          	jalr	136(ra) # 80206f18 <printf>
  printf("t4: %p\t", tf->t4);
    80208e98:	1084b583          	ld	a1,264(s1)
    80208e9c:	00009517          	auipc	a0,0x9
    80208ea0:	f5450513          	addi	a0,a0,-172 # 80211df0 <digits+0x528>
    80208ea4:	ffffe097          	auipc	ra,0xffffe
    80208ea8:	074080e7          	jalr	116(ra) # 80206f18 <printf>
  printf("t5: %p\t", tf->t5);
    80208eac:	1104b583          	ld	a1,272(s1)
    80208eb0:	00009517          	auipc	a0,0x9
    80208eb4:	f4850513          	addi	a0,a0,-184 # 80211df8 <digits+0x530>
    80208eb8:	ffffe097          	auipc	ra,0xffffe
    80208ebc:	060080e7          	jalr	96(ra) # 80206f18 <printf>
  printf("t6: %p\t", tf->t6);
    80208ec0:	1184b583          	ld	a1,280(s1)
    80208ec4:	00009517          	auipc	a0,0x9
    80208ec8:	f3c50513          	addi	a0,a0,-196 # 80211e00 <digits+0x538>
    80208ecc:	ffffe097          	auipc	ra,0xffffe
    80208ed0:	04c080e7          	jalr	76(ra) # 80206f18 <printf>
  printf("s0: %p\n", tf->s0);
    80208ed4:	70ac                	ld	a1,96(s1)
    80208ed6:	00009517          	auipc	a0,0x9
    80208eda:	f3250513          	addi	a0,a0,-206 # 80211e08 <digits+0x540>
    80208ede:	ffffe097          	auipc	ra,0xffffe
    80208ee2:	03a080e7          	jalr	58(ra) # 80206f18 <printf>
  printf("s1: %p\t", tf->s1);
    80208ee6:	74ac                	ld	a1,104(s1)
    80208ee8:	00009517          	auipc	a0,0x9
    80208eec:	f2850513          	addi	a0,a0,-216 # 80211e10 <digits+0x548>
    80208ef0:	ffffe097          	auipc	ra,0xffffe
    80208ef4:	028080e7          	jalr	40(ra) # 80206f18 <printf>
  printf("s2: %p\t", tf->s2);
    80208ef8:	78cc                	ld	a1,176(s1)
    80208efa:	00009517          	auipc	a0,0x9
    80208efe:	f1e50513          	addi	a0,a0,-226 # 80211e18 <digits+0x550>
    80208f02:	ffffe097          	auipc	ra,0xffffe
    80208f06:	016080e7          	jalr	22(ra) # 80206f18 <printf>
  printf("s3: %p\t", tf->s3);
    80208f0a:	7ccc                	ld	a1,184(s1)
    80208f0c:	00009517          	auipc	a0,0x9
    80208f10:	f1450513          	addi	a0,a0,-236 # 80211e20 <digits+0x558>
    80208f14:	ffffe097          	auipc	ra,0xffffe
    80208f18:	004080e7          	jalr	4(ra) # 80206f18 <printf>
  printf("s4: %p\n", tf->s4);
    80208f1c:	60ec                	ld	a1,192(s1)
    80208f1e:	00009517          	auipc	a0,0x9
    80208f22:	f0a50513          	addi	a0,a0,-246 # 80211e28 <digits+0x560>
    80208f26:	ffffe097          	auipc	ra,0xffffe
    80208f2a:	ff2080e7          	jalr	-14(ra) # 80206f18 <printf>
  printf("s5: %p\t", tf->s5);
    80208f2e:	64ec                	ld	a1,200(s1)
    80208f30:	00009517          	auipc	a0,0x9
    80208f34:	f0050513          	addi	a0,a0,-256 # 80211e30 <digits+0x568>
    80208f38:	ffffe097          	auipc	ra,0xffffe
    80208f3c:	fe0080e7          	jalr	-32(ra) # 80206f18 <printf>
  printf("s6: %p\t", tf->s6);
    80208f40:	68ec                	ld	a1,208(s1)
    80208f42:	00009517          	auipc	a0,0x9
    80208f46:	ef650513          	addi	a0,a0,-266 # 80211e38 <digits+0x570>
    80208f4a:	ffffe097          	auipc	ra,0xffffe
    80208f4e:	fce080e7          	jalr	-50(ra) # 80206f18 <printf>
  printf("s7: %p\t", tf->s7);
    80208f52:	6cec                	ld	a1,216(s1)
    80208f54:	00009517          	auipc	a0,0x9
    80208f58:	eec50513          	addi	a0,a0,-276 # 80211e40 <digits+0x578>
    80208f5c:	ffffe097          	auipc	ra,0xffffe
    80208f60:	fbc080e7          	jalr	-68(ra) # 80206f18 <printf>
  printf("s8: %p\n", tf->s8);
    80208f64:	70ec                	ld	a1,224(s1)
    80208f66:	00009517          	auipc	a0,0x9
    80208f6a:	ee250513          	addi	a0,a0,-286 # 80211e48 <digits+0x580>
    80208f6e:	ffffe097          	auipc	ra,0xffffe
    80208f72:	faa080e7          	jalr	-86(ra) # 80206f18 <printf>
  printf("s9: %p\t", tf->s9);
    80208f76:	74ec                	ld	a1,232(s1)
    80208f78:	00009517          	auipc	a0,0x9
    80208f7c:	ed850513          	addi	a0,a0,-296 # 80211e50 <digits+0x588>
    80208f80:	ffffe097          	auipc	ra,0xffffe
    80208f84:	f98080e7          	jalr	-104(ra) # 80206f18 <printf>
  printf("s10: %p\t", tf->s10);
    80208f88:	78ec                	ld	a1,240(s1)
    80208f8a:	00009517          	auipc	a0,0x9
    80208f8e:	ece50513          	addi	a0,a0,-306 # 80211e58 <digits+0x590>
    80208f92:	ffffe097          	auipc	ra,0xffffe
    80208f96:	f86080e7          	jalr	-122(ra) # 80206f18 <printf>
  printf("s11: %p\t", tf->s11);
    80208f9a:	7cec                	ld	a1,248(s1)
    80208f9c:	00009517          	auipc	a0,0x9
    80208fa0:	ecc50513          	addi	a0,a0,-308 # 80211e68 <digits+0x5a0>
    80208fa4:	ffffe097          	auipc	ra,0xffffe
    80208fa8:	f74080e7          	jalr	-140(ra) # 80206f18 <printf>
  printf("ra: %p\n", tf->ra);
    80208fac:	748c                	ld	a1,40(s1)
    80208fae:	00009517          	auipc	a0,0x9
    80208fb2:	eca50513          	addi	a0,a0,-310 # 80211e78 <digits+0x5b0>
    80208fb6:	ffffe097          	auipc	ra,0xffffe
    80208fba:	f62080e7          	jalr	-158(ra) # 80206f18 <printf>
  printf("sp: %p\t", tf->sp);
    80208fbe:	788c                	ld	a1,48(s1)
    80208fc0:	00009517          	auipc	a0,0x9
    80208fc4:	ec050513          	addi	a0,a0,-320 # 80211e80 <digits+0x5b8>
    80208fc8:	ffffe097          	auipc	ra,0xffffe
    80208fcc:	f50080e7          	jalr	-176(ra) # 80206f18 <printf>
  printf("gp: %p\t", tf->gp);
    80208fd0:	7c8c                	ld	a1,56(s1)
    80208fd2:	00009517          	auipc	a0,0x9
    80208fd6:	eb650513          	addi	a0,a0,-330 # 80211e88 <digits+0x5c0>
    80208fda:	ffffe097          	auipc	ra,0xffffe
    80208fde:	f3e080e7          	jalr	-194(ra) # 80206f18 <printf>
  printf("tp: %p\t", tf->tp);
    80208fe2:	60ac                	ld	a1,64(s1)
    80208fe4:	00009517          	auipc	a0,0x9
    80208fe8:	eac50513          	addi	a0,a0,-340 # 80211e90 <digits+0x5c8>
    80208fec:	ffffe097          	auipc	ra,0xffffe
    80208ff0:	f2c080e7          	jalr	-212(ra) # 80206f18 <printf>
  printf("epc: %p\n", tf->epc);
    80208ff4:	6c8c                	ld	a1,24(s1)
    80208ff6:	00009517          	auipc	a0,0x9
    80208ffa:	ea250513          	addi	a0,a0,-350 # 80211e98 <digits+0x5d0>
    80208ffe:	ffffe097          	auipc	ra,0xffffe
    80209002:	f1a080e7          	jalr	-230(ra) # 80206f18 <printf>
}
    80209006:	60e2                	ld	ra,24(sp)
    80209008:	6442                	ld	s0,16(sp)
    8020900a:	64a2                	ld	s1,8(sp)
    8020900c:	6105                	addi	sp,sp,32
    8020900e:	8082                	ret

0000000080209010 <usertrap>:
{
    80209010:	7179                	addi	sp,sp,-48
    80209012:	f406                	sd	ra,40(sp)
    80209014:	f022                	sd	s0,32(sp)
    80209016:	ec26                	sd	s1,24(sp)
    80209018:	e84a                	sd	s2,16(sp)
    8020901a:	e44e                	sd	s3,8(sp)
    8020901c:	1800                	addi	s0,sp,48
  asm volatile("csrr %0, sstatus" : "=r" (x) );
    8020901e:	100027f3          	csrr	a5,sstatus
  if((r_sstatus() & SSTATUS_SPP) != 0)
    80209022:	1007f793          	andi	a5,a5,256
    80209026:	efbd                	bnez	a5,802090a4 <usertrap+0x94>
  asm volatile("csrw stvec, %0" : : "r" (x));
    80209028:	00000797          	auipc	a5,0x0
    8020902c:	ad878793          	addi	a5,a5,-1320 # 80208b00 <kernelvec>
    80209030:	10579073          	csrw	stvec,a5
  struct proc *p = myproc();
    80209034:	00001097          	auipc	ra,0x1
    80209038:	af6080e7          	jalr	-1290(ra) # 80209b2a <myproc>
    8020903c:	84aa                	mv	s1,a0
  p->trapframe->epc = r_sepc();
    8020903e:	753c                	ld	a5,104(a0)
  asm volatile("csrr %0, sepc" : "=r" (x) );
    80209040:	14102773          	csrr	a4,sepc
    80209044:	ef98                	sd	a4,24(a5)
  asm volatile("csrr %0, scause" : "=r" (x) );
    80209046:	142029f3          	csrr	s3,scause
  if(cause == EXCP_ENV_CALL){
    8020904a:	47a1                	li	a5,8
    8020904c:	06f99a63          	bne	s3,a5,802090c0 <usertrap+0xb0>
    if(p->killed == SIGTERM)
    80209050:	5d18                	lw	a4,56(a0)
    80209052:	47bd                	li	a5,15
    80209054:	06f70063          	beq	a4,a5,802090b4 <usertrap+0xa4>
    p->trapframe->epc += 4;
    80209058:	74b8                	ld	a4,104(s1)
    8020905a:	6f1c                	ld	a5,24(a4)
    8020905c:	0791                	addi	a5,a5,4
    8020905e:	ef1c                	sd	a5,24(a4)
  asm volatile("csrr %0, sstatus" : "=r" (x) );
    80209060:	100027f3          	csrr	a5,sstatus
  w_sstatus(r_sstatus() | SSTATUS_SIE);
    80209064:	0027e793          	ori	a5,a5,2
  asm volatile("csrw sstatus, %0" : : "r" (x));
    80209068:	10079073          	csrw	sstatus,a5
    syscall();
    8020906c:	00005097          	auipc	ra,0x5
    80209070:	236080e7          	jalr	566(ra) # 8020e2a2 <syscall>
  if (p->killed) {
    80209074:	5c9c                	lw	a5,56(s1)
    80209076:	cf81                	beqz	a5,8020908e <usertrap+0x7e>
    80209078:	4901                	li	s2,0
		if (SIGTERM == p->killed)
    8020907a:	473d                	li	a4,15
    8020907c:	08e78b63          	beq	a5,a4,80209112 <usertrap+0x102>
		sighandle();
    80209080:	ffffd097          	auipc	ra,0xffffd
    80209084:	6c0080e7          	jalr	1728(ra) # 80206740 <sighandle>
  if(which_dev == 2){
    80209088:	4789                	li	a5,2
    8020908a:	0af90f63          	beq	s2,a5,80209148 <usertrap+0x138>
  usertrapret();
    8020908e:	00000097          	auipc	ra,0x0
    80209092:	b4c080e7          	jalr	-1204(ra) # 80208bda <usertrapret>
}
    80209096:	70a2                	ld	ra,40(sp)
    80209098:	7402                	ld	s0,32(sp)
    8020909a:	64e2                	ld	s1,24(sp)
    8020909c:	6942                	ld	s2,16(sp)
    8020909e:	69a2                	ld	s3,8(sp)
    802090a0:	6145                	addi	sp,sp,48
    802090a2:	8082                	ret
    panic("usertrap: not from user mode");
    802090a4:	00009517          	auipc	a0,0x9
    802090a8:	e0450513          	addi	a0,a0,-508 # 80211ea8 <digits+0x5e0>
    802090ac:	ffffe097          	auipc	ra,0xffffe
    802090b0:	e22080e7          	jalr	-478(ra) # 80206ece <panic>
      exit(-1);
    802090b4:	557d                	li	a0,-1
    802090b6:	ffff9097          	auipc	ra,0xffff9
    802090ba:	224080e7          	jalr	548(ra) # 802022da <exit>
    802090be:	bf69                	j	80209058 <usertrap+0x48>
  else if((which_dev = devintr()) != 0){
    802090c0:	00000097          	auipc	ra,0x0
    802090c4:	bb4080e7          	jalr	-1100(ra) # 80208c74 <devintr>
    802090c8:	892a                	mv	s2,a0
    802090ca:	ed25                	bnez	a0,80209142 <usertrap+0x132>
  else if(cause == 3){
    802090cc:	478d                	li	a5,3
    802090ce:	04f98863          	beq	s3,a5,8020911e <usertrap+0x10e>
  asm volatile("csrr %0, scause" : "=r" (x) );
    802090d2:	142025f3          	csrr	a1,scause
  	printf("\nusertrap(): unexpected scause %p pid=%d %s\n", r_scause(), p->pid, p->name);
    802090d6:	10048693          	addi	a3,s1,256
    802090da:	40b0                	lw	a2,64(s1)
    802090dc:	00009517          	auipc	a0,0x9
    802090e0:	df450513          	addi	a0,a0,-524 # 80211ed0 <digits+0x608>
    802090e4:	ffffe097          	auipc	ra,0xffffe
    802090e8:	e34080e7          	jalr	-460(ra) # 80206f18 <printf>
  asm volatile("csrr %0, sepc" : "=r" (x) );
    802090ec:	141025f3          	csrr	a1,sepc
  asm volatile("csrr %0, stval" : "=r" (x) );
    802090f0:	14302673          	csrr	a2,stval
        printf("            sepc=%p stval=%p\n", r_sepc(), r_stval());
    802090f4:	00009517          	auipc	a0,0x9
    802090f8:	e0c50513          	addi	a0,a0,-500 # 80211f00 <digits+0x638>
    802090fc:	ffffe097          	auipc	ra,0xffffe
    80209100:	e1c080e7          	jalr	-484(ra) # 80206f18 <printf>
        trapframedump(p->trapframe);
    80209104:	74a8                	ld	a0,104(s1)
    80209106:	00000097          	auipc	ra,0x0
    8020910a:	cac080e7          	jalr	-852(ra) # 80208db2 <trapframedump>
        p->killed = SIGTERM;
    8020910e:	47bd                	li	a5,15
    80209110:	dc9c                	sw	a5,56(s1)
			exit(-1);
    80209112:	557d                	li	a0,-1
    80209114:	ffff9097          	auipc	ra,0xffff9
    80209118:	1c6080e7          	jalr	454(ra) # 802022da <exit>
    8020911c:	b795                	j	80209080 <usertrap+0x70>
    printf("ebreak\n");
    8020911e:	00009517          	auipc	a0,0x9
    80209122:	daa50513          	addi	a0,a0,-598 # 80211ec8 <digits+0x600>
    80209126:	ffffe097          	auipc	ra,0xffffe
    8020912a:	df2080e7          	jalr	-526(ra) # 80206f18 <printf>
    trapframedump(p->trapframe);
    8020912e:	74a8                	ld	a0,104(s1)
    80209130:	00000097          	auipc	ra,0x0
    80209134:	c82080e7          	jalr	-894(ra) # 80208db2 <trapframedump>
    p->trapframe->epc += 2;
    80209138:	74b8                	ld	a4,104(s1)
    8020913a:	6f1c                	ld	a5,24(a4)
    8020913c:	0789                	addi	a5,a5,2
    8020913e:	ef1c                	sd	a5,24(a4)
    80209140:	bf15                	j	80209074 <usertrap+0x64>
  if (p->killed) {
    80209142:	5c9c                	lw	a5,56(s1)
    80209144:	d3b1                	beqz	a5,80209088 <usertrap+0x78>
    80209146:	bf15                	j	8020907a <usertrap+0x6a>
    yield();
    80209148:	ffff9097          	auipc	ra,0xffff9
    8020914c:	000080e7          	jalr	ra # 80202148 <yield>
    p->ivswtch += 1;
    80209150:	1c84a783          	lw	a5,456(s1)
    80209154:	2785                	addiw	a5,a5,1
    80209156:	1cf4a423          	sw	a5,456(s1)
    8020915a:	bf15                	j	8020908e <usertrap+0x7e>

000000008020915c <copyout>:
int
copyout(pagetable_t pagetable, uint64 dstva, char *src, uint64 len)
{
  uint64 n, va0, pa0;

  while(len > 0){
    8020915c:	c6bd                	beqz	a3,802091ca <copyout+0x6e>
{
    8020915e:	715d                	addi	sp,sp,-80
    80209160:	e486                	sd	ra,72(sp)
    80209162:	e0a2                	sd	s0,64(sp)
    80209164:	fc26                	sd	s1,56(sp)
    80209166:	f84a                	sd	s2,48(sp)
    80209168:	f44e                	sd	s3,40(sp)
    8020916a:	f052                	sd	s4,32(sp)
    8020916c:	ec56                	sd	s5,24(sp)
    8020916e:	e85a                	sd	s6,16(sp)
    80209170:	e45e                	sd	s7,8(sp)
    80209172:	e062                	sd	s8,0(sp)
    80209174:	0880                	addi	s0,sp,80
    80209176:	8b2a                	mv	s6,a0
    80209178:	8c2e                	mv	s8,a1
    8020917a:	8a32                	mv	s4,a2
    8020917c:	89b6                	mv	s3,a3
    va0 = PGROUNDDOWN(dstva);
    8020917e:	7bfd                	lui	s7,0xfffff
    pa0 = walkaddr(pagetable, va0);
    if(pa0 == NULL)
      return -1;
    n = PGSIZE - (dstva - va0);
    80209180:	6a85                	lui	s5,0x1
    80209182:	a015                	j	802091a6 <copyout+0x4a>
    if(n > len)
      n = len;
    memmove((void *)(pa0 + (dstva - va0)), src, n);
    80209184:	9562                	add	a0,a0,s8
    80209186:	0004861b          	sext.w	a2,s1
    8020918a:	85d2                	mv	a1,s4
    8020918c:	41250533          	sub	a0,a0,s2
    80209190:	ffff8097          	auipc	ra,0xffff8
    80209194:	c44080e7          	jalr	-956(ra) # 80200dd4 <memmove>

    len -= n;
    80209198:	409989b3          	sub	s3,s3,s1
    src += n;
    8020919c:	9a26                	add	s4,s4,s1
    dstva = va0 + PGSIZE;
    8020919e:	01590c33          	add	s8,s2,s5
  while(len > 0){
    802091a2:	02098263          	beqz	s3,802091c6 <copyout+0x6a>
    va0 = PGROUNDDOWN(dstva);
    802091a6:	017c7933          	and	s2,s8,s7
    pa0 = walkaddr(pagetable, va0);
    802091aa:	85ca                	mv	a1,s2
    802091ac:	855a                	mv	a0,s6
    802091ae:	fffff097          	auipc	ra,0xfffff
    802091b2:	0ae080e7          	jalr	174(ra) # 8020825c <walkaddr>
    if(pa0 == NULL)
    802091b6:	cd01                	beqz	a0,802091ce <copyout+0x72>
    n = PGSIZE - (dstva - va0);
    802091b8:	418904b3          	sub	s1,s2,s8
    802091bc:	94d6                	add	s1,s1,s5
    if(n > len)
    802091be:	fc99f3e3          	bgeu	s3,s1,80209184 <copyout+0x28>
    802091c2:	84ce                	mv	s1,s3
    802091c4:	b7c1                	j	80209184 <copyout+0x28>
  }
  return 0;
    802091c6:	4501                	li	a0,0
    802091c8:	a021                	j	802091d0 <copyout+0x74>
    802091ca:	4501                	li	a0,0
}
    802091cc:	8082                	ret
      return -1;
    802091ce:	557d                	li	a0,-1
}
    802091d0:	60a6                	ld	ra,72(sp)
    802091d2:	6406                	ld	s0,64(sp)
    802091d4:	74e2                	ld	s1,56(sp)
    802091d6:	7942                	ld	s2,48(sp)
    802091d8:	79a2                	ld	s3,40(sp)
    802091da:	7a02                	ld	s4,32(sp)
    802091dc:	6ae2                	ld	s5,24(sp)
    802091de:	6b42                	ld	s6,16(sp)
    802091e0:	6ba2                	ld	s7,8(sp)
    802091e2:	6c02                	ld	s8,0(sp)
    802091e4:	6161                	addi	sp,sp,80
    802091e6:	8082                	ret

00000000802091e8 <copyout2>:

int
copyout2(uint64 dstva, char *src, uint64 len)
{
    802091e8:	7179                	addi	sp,sp,-48
    802091ea:	f406                	sd	ra,40(sp)
    802091ec:	f022                	sd	s0,32(sp)
    802091ee:	ec26                	sd	s1,24(sp)
    802091f0:	e84a                	sd	s2,16(sp)
    802091f2:	e44e                	sd	s3,8(sp)
    802091f4:	1800                	addi	s0,sp,48
    802091f6:	84aa                	mv	s1,a0
    802091f8:	89ae                	mv	s3,a1
    802091fa:	8932                	mv	s2,a2
  uint64 sz = myproc()->sz;
    802091fc:	00001097          	auipc	ra,0x1
    80209200:	92e080e7          	jalr	-1746(ra) # 80209b2a <myproc>
    80209204:	6d3c                	ld	a5,88(a0)
  if (dstva + len > sz || dstva >= sz) {
    80209206:	01248733          	add	a4,s1,s2
    8020920a:	02e7e463          	bltu	a5,a4,80209232 <copyout2+0x4a>
    8020920e:	02f4f463          	bgeu	s1,a5,80209236 <copyout2+0x4e>
    return -1;
  }
  memmove((void *)dstva, src, len);
    80209212:	0009061b          	sext.w	a2,s2
    80209216:	85ce                	mv	a1,s3
    80209218:	8526                	mv	a0,s1
    8020921a:	ffff8097          	auipc	ra,0xffff8
    8020921e:	bba080e7          	jalr	-1094(ra) # 80200dd4 <memmove>
  return 0;
    80209222:	4501                	li	a0,0
}
    80209224:	70a2                	ld	ra,40(sp)
    80209226:	7402                	ld	s0,32(sp)
    80209228:	64e2                	ld	s1,24(sp)
    8020922a:	6942                	ld	s2,16(sp)
    8020922c:	69a2                	ld	s3,8(sp)
    8020922e:	6145                	addi	sp,sp,48
    80209230:	8082                	ret
    return -1;
    80209232:	557d                	li	a0,-1
    80209234:	bfc5                	j	80209224 <copyout2+0x3c>
    80209236:	557d                	li	a0,-1
    80209238:	b7f5                	j	80209224 <copyout2+0x3c>

000000008020923a <copyin>:
int
copyin(pagetable_t pagetable, char *dst, uint64 srcva, uint64 len)
{
  uint64 n, va0, pa0;

  while(len > 0){
    8020923a:	c6bd                	beqz	a3,802092a8 <copyin+0x6e>
{
    8020923c:	715d                	addi	sp,sp,-80
    8020923e:	e486                	sd	ra,72(sp)
    80209240:	e0a2                	sd	s0,64(sp)
    80209242:	fc26                	sd	s1,56(sp)
    80209244:	f84a                	sd	s2,48(sp)
    80209246:	f44e                	sd	s3,40(sp)
    80209248:	f052                	sd	s4,32(sp)
    8020924a:	ec56                	sd	s5,24(sp)
    8020924c:	e85a                	sd	s6,16(sp)
    8020924e:	e45e                	sd	s7,8(sp)
    80209250:	e062                	sd	s8,0(sp)
    80209252:	0880                	addi	s0,sp,80
    80209254:	8b2a                	mv	s6,a0
    80209256:	8a2e                	mv	s4,a1
    80209258:	8c32                	mv	s8,a2
    8020925a:	89b6                	mv	s3,a3
    va0 = PGROUNDDOWN(srcva);
    8020925c:	7bfd                	lui	s7,0xfffff
    pa0 = walkaddr(pagetable, va0);
    if(pa0 == NULL)
      return -1;
    n = PGSIZE - (srcva - va0);
    8020925e:	6a85                	lui	s5,0x1
    80209260:	a015                	j	80209284 <copyin+0x4a>
    if(n > len)
      n = len;
    memmove(dst, (void *)(pa0 + (srcva - va0)), n);
    80209262:	9562                	add	a0,a0,s8
    80209264:	0004861b          	sext.w	a2,s1
    80209268:	412505b3          	sub	a1,a0,s2
    8020926c:	8552                	mv	a0,s4
    8020926e:	ffff8097          	auipc	ra,0xffff8
    80209272:	b66080e7          	jalr	-1178(ra) # 80200dd4 <memmove>

    len -= n;
    80209276:	409989b3          	sub	s3,s3,s1
    dst += n;
    8020927a:	9a26                	add	s4,s4,s1
    srcva = va0 + PGSIZE;
    8020927c:	01590c33          	add	s8,s2,s5
  while(len > 0){
    80209280:	02098263          	beqz	s3,802092a4 <copyin+0x6a>
    va0 = PGROUNDDOWN(srcva);
    80209284:	017c7933          	and	s2,s8,s7
    pa0 = walkaddr(pagetable, va0);
    80209288:	85ca                	mv	a1,s2
    8020928a:	855a                	mv	a0,s6
    8020928c:	fffff097          	auipc	ra,0xfffff
    80209290:	fd0080e7          	jalr	-48(ra) # 8020825c <walkaddr>
    if(pa0 == NULL)
    80209294:	cd01                	beqz	a0,802092ac <copyin+0x72>
    n = PGSIZE - (srcva - va0);
    80209296:	418904b3          	sub	s1,s2,s8
    8020929a:	94d6                	add	s1,s1,s5
    if(n > len)
    8020929c:	fc99f3e3          	bgeu	s3,s1,80209262 <copyin+0x28>
    802092a0:	84ce                	mv	s1,s3
    802092a2:	b7c1                	j	80209262 <copyin+0x28>
  }
  return 0;
    802092a4:	4501                	li	a0,0
    802092a6:	a021                	j	802092ae <copyin+0x74>
    802092a8:	4501                	li	a0,0
}
    802092aa:	8082                	ret
      return -1;
    802092ac:	557d                	li	a0,-1
}
    802092ae:	60a6                	ld	ra,72(sp)
    802092b0:	6406                	ld	s0,64(sp)
    802092b2:	74e2                	ld	s1,56(sp)
    802092b4:	7942                	ld	s2,48(sp)
    802092b6:	79a2                	ld	s3,40(sp)
    802092b8:	7a02                	ld	s4,32(sp)
    802092ba:	6ae2                	ld	s5,24(sp)
    802092bc:	6b42                	ld	s6,16(sp)
    802092be:	6ba2                	ld	s7,8(sp)
    802092c0:	6c02                	ld	s8,0(sp)
    802092c2:	6161                	addi	sp,sp,80
    802092c4:	8082                	ret

00000000802092c6 <copyin2>:

int
copyin2(char *dst, uint64 srcva, uint64 len)
{
    802092c6:	7179                	addi	sp,sp,-48
    802092c8:	f406                	sd	ra,40(sp)
    802092ca:	f022                	sd	s0,32(sp)
    802092cc:	ec26                	sd	s1,24(sp)
    802092ce:	e84a                	sd	s2,16(sp)
    802092d0:	e44e                	sd	s3,8(sp)
    802092d2:	1800                	addi	s0,sp,48
    802092d4:	89aa                	mv	s3,a0
    802092d6:	84ae                	mv	s1,a1
    802092d8:	8932                	mv	s2,a2
  uint64 sz = myproc()->sz;
    802092da:	00001097          	auipc	ra,0x1
    802092de:	850080e7          	jalr	-1968(ra) # 80209b2a <myproc>
    802092e2:	6d3c                	ld	a5,88(a0)
  if (srcva + len > sz || srcva >= sz) {
    802092e4:	01248733          	add	a4,s1,s2
    802092e8:	02e7e463          	bltu	a5,a4,80209310 <copyin2+0x4a>
    802092ec:	02f4f463          	bgeu	s1,a5,80209314 <copyin2+0x4e>
    return -1;
  }
  memmove(dst, (void *)srcva, len);
    802092f0:	0009061b          	sext.w	a2,s2
    802092f4:	85a6                	mv	a1,s1
    802092f6:	854e                	mv	a0,s3
    802092f8:	ffff8097          	auipc	ra,0xffff8
    802092fc:	adc080e7          	jalr	-1316(ra) # 80200dd4 <memmove>
  return 0;
    80209300:	4501                	li	a0,0
}
    80209302:	70a2                	ld	ra,40(sp)
    80209304:	7402                	ld	s0,32(sp)
    80209306:	64e2                	ld	s1,24(sp)
    80209308:	6942                	ld	s2,16(sp)
    8020930a:	69a2                	ld	s3,8(sp)
    8020930c:	6145                	addi	sp,sp,48
    8020930e:	8082                	ret
    return -1;
    80209310:	557d                	li	a0,-1
    80209312:	bfc5                	j	80209302 <copyin2+0x3c>
    80209314:	557d                	li	a0,-1
    80209316:	b7f5                	j	80209302 <copyin2+0x3c>

0000000080209318 <copyinstr>:
copyinstr(pagetable_t pagetable, char *dst, uint64 srcva, uint64 max)
{
  uint64 n, va0, pa0;
  int got_null = 0;

  while(got_null == 0 && max > 0){
    80209318:	c6c5                	beqz	a3,802093c0 <copyinstr+0xa8>
{
    8020931a:	715d                	addi	sp,sp,-80
    8020931c:	e486                	sd	ra,72(sp)
    8020931e:	e0a2                	sd	s0,64(sp)
    80209320:	fc26                	sd	s1,56(sp)
    80209322:	f84a                	sd	s2,48(sp)
    80209324:	f44e                	sd	s3,40(sp)
    80209326:	f052                	sd	s4,32(sp)
    80209328:	ec56                	sd	s5,24(sp)
    8020932a:	e85a                	sd	s6,16(sp)
    8020932c:	e45e                	sd	s7,8(sp)
    8020932e:	0880                	addi	s0,sp,80
    80209330:	8a2a                	mv	s4,a0
    80209332:	8b2e                	mv	s6,a1
    80209334:	8bb2                	mv	s7,a2
    80209336:	84b6                	mv	s1,a3
    va0 = PGROUNDDOWN(srcva);
    80209338:	7afd                	lui	s5,0xfffff
    pa0 = walkaddr(pagetable, va0);
    if(pa0 == NULL)
      return -1;
    n = PGSIZE - (srcva - va0);
    8020933a:	6985                	lui	s3,0x1
    8020933c:	a035                	j	80209368 <copyinstr+0x50>
      n = max;

    char *p = (char *) (pa0 + (srcva - va0));
    while(n > 0){
      if(*p == '\0'){
        *dst = '\0';
    8020933e:	00078023          	sb	zero,0(a5)
    80209342:	4785                	li	a5,1
      dst++;
    }

    srcva = va0 + PGSIZE;
  }
  if(got_null){
    80209344:	0017b793          	seqz	a5,a5
    80209348:	40f00533          	neg	a0,a5
    return 0;
  } else {
    return -1;
  }
}
    8020934c:	60a6                	ld	ra,72(sp)
    8020934e:	6406                	ld	s0,64(sp)
    80209350:	74e2                	ld	s1,56(sp)
    80209352:	7942                	ld	s2,48(sp)
    80209354:	79a2                	ld	s3,40(sp)
    80209356:	7a02                	ld	s4,32(sp)
    80209358:	6ae2                	ld	s5,24(sp)
    8020935a:	6b42                	ld	s6,16(sp)
    8020935c:	6ba2                	ld	s7,8(sp)
    8020935e:	6161                	addi	sp,sp,80
    80209360:	8082                	ret
    srcva = va0 + PGSIZE;
    80209362:	01390bb3          	add	s7,s2,s3
  while(got_null == 0 && max > 0){
    80209366:	c8a9                	beqz	s1,802093b8 <copyinstr+0xa0>
    va0 = PGROUNDDOWN(srcva);
    80209368:	015bf933          	and	s2,s7,s5
    pa0 = walkaddr(pagetable, va0);
    8020936c:	85ca                	mv	a1,s2
    8020936e:	8552                	mv	a0,s4
    80209370:	fffff097          	auipc	ra,0xfffff
    80209374:	eec080e7          	jalr	-276(ra) # 8020825c <walkaddr>
    if(pa0 == NULL)
    80209378:	c131                	beqz	a0,802093bc <copyinstr+0xa4>
    n = PGSIZE - (srcva - va0);
    8020937a:	41790833          	sub	a6,s2,s7
    8020937e:	984e                	add	a6,a6,s3
    if(n > max)
    80209380:	0104f363          	bgeu	s1,a6,80209386 <copyinstr+0x6e>
    80209384:	8826                	mv	a6,s1
    char *p = (char *) (pa0 + (srcva - va0));
    80209386:	955e                	add	a0,a0,s7
    80209388:	41250533          	sub	a0,a0,s2
    while(n > 0){
    8020938c:	fc080be3          	beqz	a6,80209362 <copyinstr+0x4a>
    80209390:	985a                	add	a6,a6,s6
    80209392:	87da                	mv	a5,s6
      if(*p == '\0'){
    80209394:	41650633          	sub	a2,a0,s6
    80209398:	14fd                	addi	s1,s1,-1
    8020939a:	9b26                	add	s6,s6,s1
    8020939c:	00f60733          	add	a4,a2,a5
    802093a0:	00074703          	lbu	a4,0(a4)
    802093a4:	df49                	beqz	a4,8020933e <copyinstr+0x26>
        *dst = *p;
    802093a6:	00e78023          	sb	a4,0(a5)
      --max;
    802093aa:	40fb04b3          	sub	s1,s6,a5
      dst++;
    802093ae:	0785                	addi	a5,a5,1
    while(n > 0){
    802093b0:	ff0796e3          	bne	a5,a6,8020939c <copyinstr+0x84>
      dst++;
    802093b4:	8b42                	mv	s6,a6
    802093b6:	b775                	j	80209362 <copyinstr+0x4a>
    802093b8:	4781                	li	a5,0
    802093ba:	b769                	j	80209344 <copyinstr+0x2c>
      return -1;
    802093bc:	557d                	li	a0,-1
    802093be:	b779                	j	8020934c <copyinstr+0x34>
  int got_null = 0;
    802093c0:	4781                	li	a5,0
  if(got_null){
    802093c2:	0017b793          	seqz	a5,a5
    802093c6:	40f00533          	neg	a0,a5
}
    802093ca:	8082                	ret

00000000802093cc <copyinstr2>:

int
copyinstr2(char *dst, uint64 srcva, uint64 max)
{
    802093cc:	7179                	addi	sp,sp,-48
    802093ce:	f406                	sd	ra,40(sp)
    802093d0:	f022                	sd	s0,32(sp)
    802093d2:	ec26                	sd	s1,24(sp)
    802093d4:	e84a                	sd	s2,16(sp)
    802093d6:	e44e                	sd	s3,8(sp)
    802093d8:	1800                	addi	s0,sp,48
    802093da:	89aa                	mv	s3,a0
    802093dc:	84ae                	mv	s1,a1
    802093de:	8932                	mv	s2,a2
  int got_null = 0;
  uint64 sz = myproc()->sz;
    802093e0:	00000097          	auipc	ra,0x0
    802093e4:	74a080e7          	jalr	1866(ra) # 80209b2a <myproc>
    802093e8:	6d34                	ld	a3,88(a0)
  while(srcva < sz && max > 0){
    802093ea:	04d4f363          	bgeu	s1,a3,80209430 <copyinstr2+0x64>
    802093ee:	04090363          	beqz	s2,80209434 <copyinstr2+0x68>
    802093f2:	01298633          	add	a2,s3,s2
    802093f6:	8e85                	sub	a3,a3,s1
    802093f8:	96ce                	add	a3,a3,s3
    802093fa:	87ce                	mv	a5,s3
    char *p = (char *)srcva;
    if(*p == '\0'){
    802093fc:	413485b3          	sub	a1,s1,s3
    80209400:	00b78733          	add	a4,a5,a1
    80209404:	00074703          	lbu	a4,0(a4)
    80209408:	cb11                	beqz	a4,8020941c <copyinstr2+0x50>
      *dst = '\0';
      got_null = 1;
      break;
    } else {
      *dst = *p;
    8020940a:	00e78023          	sb	a4,0(a5)
    }
    --max;
    srcva++;
    dst++;
    8020940e:	0785                	addi	a5,a5,1
  while(srcva < sz && max > 0){
    80209410:	02d78463          	beq	a5,a3,80209438 <copyinstr2+0x6c>
    80209414:	fec796e3          	bne	a5,a2,80209400 <copyinstr2+0x34>
  }
  if(got_null){
    return 0;
  } else {
    return -1;
    80209418:	557d                	li	a0,-1
    8020941a:	a021                	j	80209422 <copyinstr2+0x56>
      *dst = '\0';
    8020941c:	00078023          	sb	zero,0(a5)
    return 0;
    80209420:	4501                	li	a0,0
  }
}
    80209422:	70a2                	ld	ra,40(sp)
    80209424:	7402                	ld	s0,32(sp)
    80209426:	64e2                	ld	s1,24(sp)
    80209428:	6942                	ld	s2,16(sp)
    8020942a:	69a2                	ld	s3,8(sp)
    8020942c:	6145                	addi	sp,sp,48
    8020942e:	8082                	ret
    return -1;
    80209430:	557d                	li	a0,-1
    80209432:	bfc5                	j	80209422 <copyinstr2+0x56>
    80209434:	557d                	li	a0,-1
    80209436:	b7f5                	j	80209422 <copyinstr2+0x56>
    80209438:	557d                	li	a0,-1
    8020943a:	b7e5                	j	80209422 <copyinstr2+0x56>

000000008020943c <zero_out>:
// Copy from kernel to user.
// Copy len bytes from src to virtual address dstva in a given page table.
// Return 0 on success, -1 on error.
int
zero_out(uint64 dstva, uint64 len)
{
    8020943c:	715d                	addi	sp,sp,-80
    8020943e:	e486                	sd	ra,72(sp)
    80209440:	e0a2                	sd	s0,64(sp)
    80209442:	fc26                	sd	s1,56(sp)
    80209444:	f84a                	sd	s2,48(sp)
    80209446:	f44e                	sd	s3,40(sp)
    80209448:	f052                	sd	s4,32(sp)
    8020944a:	ec56                	sd	s5,24(sp)
    8020944c:	e85a                	sd	s6,16(sp)
    8020944e:	e45e                	sd	s7,8(sp)
    80209450:	0880                	addi	s0,sp,80
    80209452:	8a2a                	mv	s4,a0
    80209454:	89ae                	mv	s3,a1
  uint64 n, va0, pa0;
  pagetable_t pagetable = myproc()->pagetable;
    80209456:	00000097          	auipc	ra,0x0
    8020945a:	6d4080e7          	jalr	1748(ra) # 80209b2a <myproc>
    8020945e:	06053b03          	ld	s6,96(a0)
  while(len > 0){
    80209462:	04098563          	beqz	s3,802094ac <zero_out+0x70>
    va0 = PGROUNDDOWN(dstva);
    80209466:	7bfd                	lui	s7,0xfffff
    pa0 = walkaddr(pagetable, va0);
    if(pa0 == NULL)
      return -1;
    n = PGSIZE - (dstva - va0);
    80209468:	6a85                	lui	s5,0x1
    8020946a:	a00d                	j	8020948c <zero_out+0x50>
    if(n > len)
      n = len;
    memset((void *)(pa0 + (dstva - va0)), 0, n);
    8020946c:	9552                	add	a0,a0,s4
    8020946e:	0004861b          	sext.w	a2,s1
    80209472:	4581                	li	a1,0
    80209474:	41250533          	sub	a0,a0,s2
    80209478:	ffff8097          	auipc	ra,0xffff8
    8020947c:	8fc080e7          	jalr	-1796(ra) # 80200d74 <memset>

    len -= n;
    80209480:	409989b3          	sub	s3,s3,s1
    dstva = va0 + PGSIZE;
    80209484:	01590a33          	add	s4,s2,s5
  while(len > 0){
    80209488:	02098263          	beqz	s3,802094ac <zero_out+0x70>
    va0 = PGROUNDDOWN(dstva);
    8020948c:	017a7933          	and	s2,s4,s7
    pa0 = walkaddr(pagetable, va0);
    80209490:	85ca                	mv	a1,s2
    80209492:	855a                	mv	a0,s6
    80209494:	fffff097          	auipc	ra,0xfffff
    80209498:	dc8080e7          	jalr	-568(ra) # 8020825c <walkaddr>
    if(pa0 == NULL)
    8020949c:	c505                	beqz	a0,802094c4 <zero_out+0x88>
    n = PGSIZE - (dstva - va0);
    8020949e:	414904b3          	sub	s1,s2,s4
    802094a2:	94d6                	add	s1,s1,s5
    if(n > len)
    802094a4:	fc99f4e3          	bgeu	s3,s1,8020946c <zero_out+0x30>
    802094a8:	84ce                	mv	s1,s3
    802094aa:	b7c9                	j	8020946c <zero_out+0x30>
  }
  return len;
    802094ac:	4501                	li	a0,0
}
    802094ae:	60a6                	ld	ra,72(sp)
    802094b0:	6406                	ld	s0,64(sp)
    802094b2:	74e2                	ld	s1,56(sp)
    802094b4:	7942                	ld	s2,48(sp)
    802094b6:	79a2                	ld	s3,40(sp)
    802094b8:	7a02                	ld	s4,32(sp)
    802094ba:	6ae2                	ld	s5,24(sp)
    802094bc:	6b42                	ld	s6,16(sp)
    802094be:	6ba2                	ld	s7,8(sp)
    802094c0:	6161                	addi	sp,sp,80
    802094c2:	8082                	ret
      return -1;
    802094c4:	557d                	li	a0,-1
    802094c6:	b7e5                	j	802094ae <zero_out+0x72>

00000000802094c8 <either_copyout>:
// Copy to either a user address, or kernel address,
// depending on usr_dst.
// Returns 0 on success, -1 on error.
int
either_copyout(int user_dst, uint64 dst, void *src, uint64 len)
{
    802094c8:	7179                	addi	sp,sp,-48
    802094ca:	f406                	sd	ra,40(sp)
    802094cc:	f022                	sd	s0,32(sp)
    802094ce:	ec26                	sd	s1,24(sp)
    802094d0:	e84a                	sd	s2,16(sp)
    802094d2:	e44e                	sd	s3,8(sp)
    802094d4:	e052                	sd	s4,0(sp)
    802094d6:	1800                	addi	s0,sp,48
    802094d8:	84aa                	mv	s1,a0
    802094da:	892e                	mv	s2,a1
    802094dc:	89b2                	mv	s3,a2
    802094de:	8a36                	mv	s4,a3
  struct proc *p = myproc();
    802094e0:	00000097          	auipc	ra,0x0
    802094e4:	64a080e7          	jalr	1610(ra) # 80209b2a <myproc>
  if(user_dst){
    802094e8:	c08d                	beqz	s1,8020950a <either_copyout+0x42>
    return copyout(p->pagetable, dst, src, len);
    802094ea:	86d2                	mv	a3,s4
    802094ec:	864e                	mv	a2,s3
    802094ee:	85ca                	mv	a1,s2
    802094f0:	7128                	ld	a0,96(a0)
    802094f2:	00000097          	auipc	ra,0x0
    802094f6:	c6a080e7          	jalr	-918(ra) # 8020915c <copyout>
  } else {
    memmove((char *)dst, src, len);
    return 0;
  }
}
    802094fa:	70a2                	ld	ra,40(sp)
    802094fc:	7402                	ld	s0,32(sp)
    802094fe:	64e2                	ld	s1,24(sp)
    80209500:	6942                	ld	s2,16(sp)
    80209502:	69a2                	ld	s3,8(sp)
    80209504:	6a02                	ld	s4,0(sp)
    80209506:	6145                	addi	sp,sp,48
    80209508:	8082                	ret
    memmove((char *)dst, src, len);
    8020950a:	000a061b          	sext.w	a2,s4
    8020950e:	85ce                	mv	a1,s3
    80209510:	854a                	mv	a0,s2
    80209512:	ffff8097          	auipc	ra,0xffff8
    80209516:	8c2080e7          	jalr	-1854(ra) # 80200dd4 <memmove>
    return 0;
    8020951a:	8526                	mv	a0,s1
    8020951c:	bff9                	j	802094fa <either_copyout+0x32>

000000008020951e <either_copyin>:
// Copy from either a user address, or kernel address,
// depending on usr_src.
// Returns 0 on success, -1 on error.
int
either_copyin( int user_src,void *dst, uint64 src, uint64 len)
{
    8020951e:	7179                	addi	sp,sp,-48
    80209520:	f406                	sd	ra,40(sp)
    80209522:	f022                	sd	s0,32(sp)
    80209524:	ec26                	sd	s1,24(sp)
    80209526:	e84a                	sd	s2,16(sp)
    80209528:	e44e                	sd	s3,8(sp)
    8020952a:	e052                	sd	s4,0(sp)
    8020952c:	1800                	addi	s0,sp,48
    8020952e:	84aa                	mv	s1,a0
    80209530:	892e                	mv	s2,a1
    80209532:	89b2                	mv	s3,a2
    80209534:	8a36                	mv	s4,a3
  struct proc *p = myproc();
    80209536:	00000097          	auipc	ra,0x0
    8020953a:	5f4080e7          	jalr	1524(ra) # 80209b2a <myproc>
  if(user_src){
    8020953e:	c08d                	beqz	s1,80209560 <either_copyin+0x42>
    return copyin(p->pagetable, dst, src, len);
    80209540:	86d2                	mv	a3,s4
    80209542:	864e                	mv	a2,s3
    80209544:	85ca                	mv	a1,s2
    80209546:	7128                	ld	a0,96(a0)
    80209548:	00000097          	auipc	ra,0x0
    8020954c:	cf2080e7          	jalr	-782(ra) # 8020923a <copyin>
  } else {
    memmove(dst, (char*)src, len);
    return 0;
  }
}
    80209550:	70a2                	ld	ra,40(sp)
    80209552:	7402                	ld	s0,32(sp)
    80209554:	64e2                	ld	s1,24(sp)
    80209556:	6942                	ld	s2,16(sp)
    80209558:	69a2                	ld	s3,8(sp)
    8020955a:	6a02                	ld	s4,0(sp)
    8020955c:	6145                	addi	sp,sp,48
    8020955e:	8082                	ret
    memmove(dst, (char*)src, len);
    80209560:	000a061b          	sext.w	a2,s4
    80209564:	85ce                	mv	a1,s3
    80209566:	854a                	mv	a0,s2
    80209568:	ffff8097          	auipc	ra,0xffff8
    8020956c:	86c080e7          	jalr	-1940(ra) # 80200dd4 <memmove>
    return 0;
    80209570:	8526                	mv	a0,s1
    80209572:	bff9                	j	80209550 <either_copyin+0x32>

0000000080209574 <__poll_func>:

static void __poll_func(struct file *f, struct wait_queue *wq, struct poll_table *pt)
{
	struct poll_wait_queue *pwq = container_of(pt, struct poll_wait_queue, pt);
	struct poll_wait_node *pwn;
	if (pwq->index >= ON_STACK_PWN_NUM)	// we can allocate pages
    80209574:	4e1c                	lw	a5,24(a2)
    80209576:	475d                	li	a4,23
    80209578:	00f75363          	bge	a4,a5,8020957e <__poll_func+0xa>
    8020957c:	8082                	ret
{
    8020957e:	7179                	addi	sp,sp,-48
    80209580:	f406                	sd	ra,40(sp)
    80209582:	f022                	sd	s0,32(sp)
    80209584:	ec26                	sd	s1,24(sp)
    80209586:	e84a                	sd	s2,16(sp)
    80209588:	e44e                	sd	s3,8(sp)
    8020958a:	e052                	sd	s4,0(sp)
    8020958c:	1800                	addi	s0,sp,48
    8020958e:	89ae                	mv	s3,a1
    80209590:	84b2                	mv	s1,a2
		return;

	pwn = &pwq->nodes[pwq->index++];
    80209592:	0017871b          	addiw	a4,a5,1
    80209596:	ce18                	sw	a4,24(a2)
	pwn->node.chan = pwq;
    80209598:	00579713          	slli	a4,a5,0x5
    8020959c:	9732                	add	a4,a4,a2
    8020959e:	f710                	sd	a2,40(a4)
	pwn->queue = wq;
    802095a0:	f30c                	sd	a1,32(a4)
	wait_queue_add_locked(wq, &pwn->node);
    802095a2:	0785                	addi	a5,a5,1
    802095a4:	00579913          	slli	s2,a5,0x5
    802095a8:	00890a13          	addi	s4,s2,8
    802095ac:	9a32                	add	s4,s4,a2
	list_del(&node->list);
}

static inline void wait_queue_add_locked(struct wait_queue *wq, struct wait_node *node)
{
	acquire(&wq->lock);
    802095ae:	852e                	mv	a0,a1
    802095b0:	ffffd097          	auipc	ra,0xffffd
    802095b4:	5be080e7          	jalr	1470(ra) # 80206b6e <acquire>
	list_add_before(&wq->head, &node->list);
    802095b8:	0941                	addi	s2,s2,16
    802095ba:	9926                	add	s2,s2,s1
	__list_insert(node, beforeme->prev, beforeme);
    802095bc:	0189b783          	ld	a5,24(s3) # 1018 <_entry-0x801fefe8>
	prev->next = next->prev = node;
    802095c0:	0129bc23          	sd	s2,24(s3)
    802095c4:	0127b423          	sd	s2,8(a5)
    802095c8:	01898713          	addi	a4,s3,24
	node->next = next;
    802095cc:	00ea3823          	sd	a4,16(s4)
	node->prev = prev;
    802095d0:	00fa3423          	sd	a5,8(s4)
	release(&wq->lock);
    802095d4:	854e                	mv	a0,s3
    802095d6:	ffffd097          	auipc	ra,0xffffd
    802095da:	5ec080e7          	jalr	1516(ra) # 80206bc2 <release>
}
    802095de:	70a2                	ld	ra,40(sp)
    802095e0:	7402                	ld	s0,32(sp)
    802095e2:	64e2                	ld	s1,24(sp)
    802095e4:	6942                	ld	s2,16(sp)
    802095e6:	69a2                	ld	s3,8(sp)
    802095e8:	6a02                	ld	s4,0(sp)
    802095ea:	6145                	addi	sp,sp,48
    802095ec:	8082                	ret

00000000802095ee <ppoll>:
	return ret;
}


int ppoll(struct pollfd *pfds, int nfds, struct timespec *timeout, __sigset_t *sigmask)
{
    802095ee:	1141                	addi	sp,sp,-16
    802095f0:	e422                	sd	s0,8(sp)
    802095f2:	0800                	addi	s0,sp,16
    802095f4:	86aa                	mv	a3,a0
    802095f6:	852e                	mv	a0,a1
	// uint64 expire;
	
	// if (timeout)
	// 	expire	= now + convert_from_timespec(timeout);

	for (int i = 0; i < nfds; i++) {
    802095f8:	02b05163          	blez	a1,8020961a <ppoll+0x2c>
    802095fc:	00668793          	addi	a5,a3,6
    80209600:	fff5871b          	addiw	a4,a1,-1
    80209604:	1702                	slli	a4,a4,0x20
    80209606:	9301                	srli	a4,a4,0x20
    80209608:	070e                	slli	a4,a4,0x3
    8020960a:	06b9                	addi	a3,a3,14
    8020960c:	9736                	add	a4,a4,a3
		pfds[i].revents = POLLIN|POLLOUT;
    8020960e:	4695                	li	a3,5
    80209610:	00d79023          	sh	a3,0(a5)
	for (int i = 0; i < nfds; i++) {
    80209614:	07a1                	addi	a5,a5,8
    80209616:	fee79de3          	bne	a5,a4,80209610 <ppoll+0x22>
	}
	return nfds;
}
    8020961a:	6422                	ld	s0,8(sp)
    8020961c:	0141                	addi	sp,sp,16
    8020961e:	8082                	ret

0000000080209620 <pselect>:
}


int pselect(int nfds, struct fdset *readfds, struct fdset *writefds, struct fdset *exceptfds,
			struct timespec *timeout, __sigset_t *sigmask)
{
    80209620:	a5010113          	addi	sp,sp,-1456
    80209624:	5a113423          	sd	ra,1448(sp)
    80209628:	5a813023          	sd	s0,1440(sp)
    8020962c:	58913c23          	sd	s1,1432(sp)
    80209630:	59213823          	sd	s2,1424(sp)
    80209634:	59313423          	sd	s3,1416(sp)
    80209638:	59413023          	sd	s4,1408(sp)
    8020963c:	57513c23          	sd	s5,1400(sp)
    80209640:	57613823          	sd	s6,1392(sp)
    80209644:	57713423          	sd	s7,1384(sp)
    80209648:	57813023          	sd	s8,1376(sp)
    8020964c:	55913c23          	sd	s9,1368(sp)
    80209650:	55a13823          	sd	s10,1360(sp)
    80209654:	55b13423          	sd	s11,1352(sp)
    80209658:	5b010413          	addi	s0,sp,1456
    8020965c:	a6a43c23          	sd	a0,-1416(s0)
    80209660:	a6b43823          	sd	a1,-1424(s0)
    80209664:	a6c43423          	sd	a2,-1432(s0)
    80209668:	a6d43023          	sd	a3,-1440(s0)
    8020966c:	84ba                	mv	s1,a4
	struct fdset rfds, wfds, exfds;
	uint64 expire;
	struct poll_wait_queue wait;
	struct proc* p = myproc();
    8020966e:	00000097          	auipc	ra,0x0
    80209672:	4bc080e7          	jalr	1212(ra) # 80209b2a <myproc>
    80209676:	8d2a                	mv	s10,a0
	// struct poll_wait_queue *pwait;
	int immediate = 0;
	
	
	__debug_info("pselect", "timeout={%ds, %dns}\n", 
    80209678:	3e048963          	beqz	s1,80209a6a <pselect+0x44a>
    8020967c:	6494                	ld	a3,8(s1)
    8020967e:	6090                	ld	a2,0(s1)
    80209680:	00009597          	auipc	a1,0x9
    80209684:	8a058593          	addi	a1,a1,-1888 # 80211f20 <digits+0x658>
    80209688:	00009517          	auipc	a0,0x9
    8020968c:	8b050513          	addi	a0,a0,-1872 # 80211f38 <digits+0x670>
    80209690:	ffffe097          	auipc	ra,0xffffe
    80209694:	a4e080e7          	jalr	-1458(ra) # 802070de <__debug_info>
	tv->usec = (time % TICK_FREQ) * 1000 / (TICK_FREQ / 1000);
}

static inline uint64 convert_from_timespec(const struct timespec *ts)
{
	uint64 time = ts->tv_sec * TICK_FREQ
    80209698:	6098                	ld	a4,0(s1)
    8020969a:	000f47b7          	lui	a5,0xf4
    8020969e:	24078793          	addi	a5,a5,576 # f4240 <_entry-0x8010bdc0>
    802096a2:	02f70733          	mul	a4,a4,a5
					+ ts->tv_nsec * (TICK_FREQ / 1000 / 100) / 10 / 1000;
    802096a6:	649c                	ld	a5,8(s1)
    802096a8:	3e800693          	li	a3,1000
    802096ac:	02d7c7b3          	div	a5,a5,a3
    802096b0:	973e                	add	a4,a4,a5
    802096b2:	a4e43823          	sd	a4,-1456(s0)
				timeout ? timeout->tv_sec : -1, timeout ? timeout->tv_nsec : -1);

	if (timeout) {
		expire = convert_from_timespec(timeout);
		if (expire == 0)
			immediate = 1;			// don't sleep
    802096b6:	4785                	li	a5,1
    802096b8:	a4f43c23          	sd	a5,-1448(s0)
		if (expire == 0)
    802096bc:	cb19                	beqz	a4,802096d2 <pselect+0xb2>

#include "memlayout.h"
static inline uint64 readtime()
{
	uint64 x;
	x = *(uint64 *)CLINT_VMTIME;
    802096be:	0000b797          	auipc	a5,0xb
    802096c2:	b427b783          	ld	a5,-1214(a5) # 80214200 <erodata+0x10>
		else 
			expire += readtime();	// overflow?
    802096c6:	639c                	ld	a5,0(a5)
    802096c8:	97ba                	add	a5,a5,a4
    802096ca:	a4f43823          	sd	a5,-1456(s0)
	int immediate = 0;
    802096ce:	a4043c23          	sd	zero,-1448(s0)
	if (rarg)
    802096d2:	a7043583          	ld	a1,-1424(s0)
    802096d6:	c5c9                	beqz	a1,80209760 <pselect+0x140>
		memmove(rfds, rarg, sizeof(struct fdset));
    802096d8:	08000613          	li	a2,128
    802096dc:	f1040513          	addi	a0,s0,-240
    802096e0:	ffff7097          	auipc	ra,0xffff7
    802096e4:	6f4080e7          	jalr	1780(ra) # 80200dd4 <memmove>
	if (warg)
    802096e8:	a6843583          	ld	a1,-1432(s0)
    802096ec:	c5c1                	beqz	a1,80209774 <pselect+0x154>
		memmove(wfds, warg, sizeof(struct fdset));
    802096ee:	08000613          	li	a2,128
    802096f2:	e9040513          	addi	a0,s0,-368
    802096f6:	ffff7097          	auipc	ra,0xffff7
    802096fa:	6de080e7          	jalr	1758(ra) # 80200dd4 <memmove>
	if (exarg)
    802096fe:	a6043583          	ld	a1,-1440(s0)
    80209702:	c1d9                	beqz	a1,80209788 <pselect+0x168>
		memmove(exfds, exarg, sizeof(struct fdset));
    80209704:	08000613          	li	a2,128
    80209708:	e1040513          	addi	a0,s0,-496
    8020970c:	ffff7097          	auipc	ra,0xffff7
    80209710:	6c8080e7          	jalr	1736(ra) # 80200dd4 <memmove>
	pwq->pt.func = __poll_func;
    80209714:	00000797          	auipc	a5,0x0
    80209718:	e6078793          	addi	a5,a5,-416 # 80209574 <__poll_func>
    8020971c:	aef43823          	sd	a5,-1296(s0)
	pwq->pt.key = 0;
    80209720:	ae042c23          	sw	zero,-1288(s0)
	pwq->error = 0;
    80209724:	b0043023          	sd	zero,-1280(s0)
	pwq->index = 0;
    80209728:	b0042423          	sw	zero,-1272(s0)

	// Since the node is on stack, if we want other process to get us, we should use pa.
	// pwait = (struct poll_wait_queue *)kwalkaddr(myproc()->pagetable, (uint64)&wait);
	// pwait = &wait;
	poll_init(&wait);
	if (immediate)
    8020972c:	a5843783          	ld	a5,-1448(s0)
    80209730:	c399                	beqz	a5,80209736 <pselect+0x116>
		wait.pt.func = NULL;		// we won't be inserted into any queue in later poll()s
    80209732:	ae043823          	sd	zero,-1296(s0)

	int ret = 0;
	for (;;)
	{
		int i = 0;	// fd iterator
		for (int idx = 0; idx <= (nfds - 1) / NFDBIT; idx++)
    80209736:	a7843783          	ld	a5,-1416(s0)
    8020973a:	37fd                	addiw	a5,a5,-1
    8020973c:	8399                	srli	a5,a5,0x6
    8020973e:	0785                	addi	a5,a5,1
    80209740:	078e                	slli	a5,a5,0x3
    80209742:	a8f43023          	sd	a5,-1408(s0)
    80209746:	ac043423          	sd	zero,-1336(s0)
			if (all == 0) {				// no fd in this part
				i += NFDBIT;
				continue;
			}

			for (int b = 0; b < NFDBIT; b++, i++) {
    8020974a:	aa043823          	sd	zero,-1360(s0)
				uint64 bit = 1L << b;
				if (!(bit & all))		// no fd in this bit
					continue;
	
				struct file *fp = p->ofile[i];
				if (i<0||i>=NOFILEMAX(p)||!fp)				// bad fd
    8020974e:	06500793          	li	a5,101
    80209752:	a8f43823          	sd	a5,-1392(s0)
	return fp->poll(fp, pt);
    80209756:	af040793          	addi	a5,s0,-1296
    8020975a:	a8f43423          	sd	a5,-1400(s0)
    8020975e:	aca5                	j	802099d6 <pselect+0x3b6>
		memset(rfds, 0, sizeof(struct fdset));
    80209760:	08000613          	li	a2,128
    80209764:	4581                	li	a1,0
    80209766:	f1040513          	addi	a0,s0,-240
    8020976a:	ffff7097          	auipc	ra,0xffff7
    8020976e:	60a080e7          	jalr	1546(ra) # 80200d74 <memset>
    80209772:	bf9d                	j	802096e8 <pselect+0xc8>
		memset(wfds, 0, sizeof(struct fdset));
    80209774:	08000613          	li	a2,128
    80209778:	4581                	li	a1,0
    8020977a:	e9040513          	addi	a0,s0,-368
    8020977e:	ffff7097          	auipc	ra,0xffff7
    80209782:	5f6080e7          	jalr	1526(ra) # 80200d74 <memset>
    80209786:	bfa5                	j	802096fe <pselect+0xde>
		memset(exfds, 0, sizeof(struct fdset));
    80209788:	08000613          	li	a2,128
    8020978c:	4581                	li	a1,0
    8020978e:	e1040513          	addi	a0,s0,-496
    80209792:	ffff7097          	auipc	ra,0xffff7
    80209796:	5e2080e7          	jalr	1506(ra) # 80200d74 <memset>
    8020979a:	bfad                	j	80209714 <pselect+0xf4>
				i += NFDBIT;
    8020979c:	0409091b          	addiw	s2,s2,64
		for (int idx = 0; idx <= (nfds - 1) / NFDBIT; idx++)
    802097a0:	0b21                	addi	s6,s6,8
    802097a2:	a8043783          	ld	a5,-1408(s0)
    802097a6:	18fb0c63          	beq	s6,a5,8020993e <pselect+0x31e>
			r = rfds.fd_bits[idx];		// extract fd bits
    802097aa:	f1040793          	addi	a5,s0,-240
    802097ae:	97da                	add	a5,a5,s6
    802097b0:	6398                	ld	a4,0(a5)
    802097b2:	ace43c23          	sd	a4,-1320(s0)
			w = wfds.fd_bits[idx];
    802097b6:	e9040793          	addi	a5,s0,-368
    802097ba:	97da                	add	a5,a5,s6
    802097bc:	6394                	ld	a3,0(a5)
    802097be:	acd43823          	sd	a3,-1328(s0)
			ex = exfds.fd_bits[idx];
    802097c2:	e1040793          	addi	a5,s0,-496
    802097c6:	97da                	add	a5,a5,s6
    802097c8:	639c                	ld	a5,0(a5)
    802097ca:	aaf43c23          	sd	a5,-1352(s0)
			all = r | w | ex;
    802097ce:	00d76ab3          	or	s5,a4,a3
    802097d2:	00faeab3          	or	s5,s5,a5
			if (all == 0) {				// no fd in this part
    802097d6:	fc0a83e3          	beqz	s5,8020979c <pselect+0x17c>
				if (i >= nfds)			// reach end
    802097da:	a7843783          	ld	a5,-1416(s0)
    802097de:	12f95363          	bge	s2,a5,80209904 <pselect+0x2e4>
    802097e2:	8a4a                	mv	s4,s2
    802097e4:	41278cbb          	subw	s9,a5,s2
			for (int b = 0; b < NFDBIT; b++, i++) {
    802097e8:	ab043483          	ld	s1,-1360(s0)
			uint64 rres = 0, wres = 0, exres = 0;
    802097ec:	a8043c23          	sd	zero,-1384(s0)
    802097f0:	aa043023          	sd	zero,-1376(s0)
    802097f4:	aa043423          	sd	zero,-1368(s0)
				uint64 bit = 1L << b;
    802097f8:	4c05                	li	s8,1
			for (int b = 0; b < NFDBIT; b++, i++) {
    802097fa:	04000b93          	li	s7,64
    802097fe:	a08d                	j	80209860 <pselect+0x240>
				
				//__debug_info("pselect", "fd=%d\n", i);
				
				wait.pt.key = POLLEX_SET;
				if (r & bit)
					wait.pt.key |= POLLIN_SET;
    80209800:	47ed                	li	a5,27
    80209802:	aef42c23          	sw	a5,-1288(s0)
    80209806:	a871                	j	802098a2 <pselect+0x282>
					wait.pt.key |= POLLOUT_SET;

				uint32 mask = file_poll(fp, &wait.pt);
				//__debug_info("pselect", "mask=%d\n", mask);

				if ((mask & POLLIN_SET) && (r & bit)) {
    80209808:	0c0d8463          	beqz	s11,802098d0 <pselect+0x2b0>
					rres |= bit;
    8020980c:	aa843703          	ld	a4,-1368(s0)
    80209810:	01376733          	or	a4,a4,s3
    80209814:	aae43423          	sd	a4,-1368(s0)
					ret++;
    80209818:	ac843703          	ld	a4,-1336(s0)
    8020981c:	2705                	addiw	a4,a4,1
    8020981e:	ace43423          	sd	a4,-1336(s0)
					wait.pt.func = NULL;
    80209822:	ab043703          	ld	a4,-1360(s0)
    80209826:	aee43823          	sd	a4,-1296(s0)
    8020982a:	a05d                	j	802098d0 <pselect+0x2b0>
				}
				if ((mask & POLLOUT_SET) && (w & bit)) {
    8020982c:	ac043703          	ld	a4,-1344(s0)
    80209830:	c35d                	beqz	a4,802098d6 <pselect+0x2b6>
					wres |= bit;
    80209832:	aa043703          	ld	a4,-1376(s0)
    80209836:	01376733          	or	a4,a4,s3
    8020983a:	aae43023          	sd	a4,-1376(s0)
					ret++;
    8020983e:	ac843703          	ld	a4,-1336(s0)
    80209842:	2705                	addiw	a4,a4,1
    80209844:	ace43423          	sd	a4,-1336(s0)
					wait.pt.func = NULL;
    80209848:	ab043703          	ld	a4,-1360(s0)
    8020984c:	aee43823          	sd	a4,-1296(s0)
    80209850:	a059                	j	802098d6 <pselect+0x2b6>
			for (int b = 0; b < NFDBIT; b++, i++) {
    80209852:	2485                	addiw	s1,s1,1
    80209854:	2905                	addiw	s2,s2,1
    80209856:	0b748d63          	beq	s1,s7,80209910 <pselect+0x2f0>
				if (i >= nfds)			// reach end
    8020985a:	0a05                	addi	s4,s4,1
    8020985c:	0b948a63          	beq	s1,s9,80209910 <pselect+0x2f0>
				uint64 bit = 1L << b;
    80209860:	009c19b3          	sll	s3,s8,s1
				if (!(bit & all))		// no fd in this bit
    80209864:	013af7b3          	and	a5,s5,s3
    80209868:	d7ed                	beqz	a5,80209852 <pselect+0x232>
				if (i<0||i>=NOFILEMAX(p)||!fp)				// bad fd
    8020986a:	fe0944e3          	bltz	s2,80209852 <pselect+0x232>
    8020986e:	0e0d3783          	ld	a5,224(s10) # 100000e0 <_entry-0x701fff20>
    80209872:	06500713          	li	a4,101
    80209876:	00f75463          	bge	a4,a5,8020987e <pselect+0x25e>
    8020987a:	a9043783          	ld	a5,-1392(s0)
    8020987e:	fcfa5ae3          	bge	s4,a5,80209852 <pselect+0x232>
				struct file *fp = p->ofile[i];
    80209882:	0e8d3783          	ld	a5,232(s10)
    80209886:	003a1713          	slli	a4,s4,0x3
    8020988a:	97ba                	add	a5,a5,a4
    8020988c:	6388                	ld	a0,0(a5)
				if (i<0||i>=NOFILEMAX(p)||!fp)				// bad fd
    8020988e:	d171                	beqz	a0,80209852 <pselect+0x232>
				if (r & bit)
    80209890:	ad843783          	ld	a5,-1320(s0)
    80209894:	0137fdb3          	and	s11,a5,s3
    80209898:	f60d94e3          	bnez	s11,80209800 <pselect+0x1e0>
				wait.pt.key = POLLEX_SET;
    8020989c:	4789                	li	a5,2
    8020989e:	aef42c23          	sw	a5,-1288(s0)
				if (w & bit)
    802098a2:	ad043783          	ld	a5,-1328(s0)
    802098a6:	0137f7b3          	and	a5,a5,s3
    802098aa:	acf43023          	sd	a5,-1344(s0)
    802098ae:	c799                	beqz	a5,802098bc <pselect+0x29c>
					wait.pt.key |= POLLOUT_SET;
    802098b0:	af842783          	lw	a5,-1288(s0)
    802098b4:	00c7e793          	ori	a5,a5,12
    802098b8:	aef42c23          	sw	a5,-1288(s0)
	if (!fp->poll)
    802098bc:	791c                	ld	a5,48(a0)
    802098be:	1c078963          	beqz	a5,80209a90 <pselect+0x470>
	return fp->poll(fp, pt);
    802098c2:	a8843583          	ld	a1,-1400(s0)
    802098c6:	9782                	jalr	a5
    802098c8:	0005079b          	sext.w	a5,a0
				if ((mask & POLLIN_SET) && (r & bit)) {
    802098cc:	8965                	andi	a0,a0,25
    802098ce:	fd0d                	bnez	a0,80209808 <pselect+0x1e8>
				if ((mask & POLLOUT_SET) && (w & bit)) {
    802098d0:	00c7f713          	andi	a4,a5,12
    802098d4:	ff21                	bnez	a4,8020982c <pselect+0x20c>
				}
				if ((mask & POLLEX_SET) && (ex & bit)) {
    802098d6:	8b89                	andi	a5,a5,2
    802098d8:	dfad                	beqz	a5,80209852 <pselect+0x232>
    802098da:	ab843783          	ld	a5,-1352(s0)
    802098de:	0137f7b3          	and	a5,a5,s3
    802098e2:	dba5                	beqz	a5,80209852 <pselect+0x232>
					exres |= bit;
    802098e4:	a9843783          	ld	a5,-1384(s0)
    802098e8:	0137e7b3          	or	a5,a5,s3
    802098ec:	a8f43c23          	sd	a5,-1384(s0)
					ret++;
    802098f0:	ac843783          	ld	a5,-1336(s0)
    802098f4:	2785                	addiw	a5,a5,1
    802098f6:	acf43423          	sd	a5,-1336(s0)
					wait.pt.func = NULL;
    802098fa:	ab043783          	ld	a5,-1360(s0)
    802098fe:	aef43823          	sd	a5,-1296(s0)
    80209902:	bf81                	j	80209852 <pselect+0x232>
			uint64 rres = 0, wres = 0, exres = 0;
    80209904:	a8043c23          	sd	zero,-1384(s0)
    80209908:	aa043023          	sd	zero,-1376(s0)
    8020990c:	aa043423          	sd	zero,-1368(s0)
				}
			}
			if (readfds)
    80209910:	a7043783          	ld	a5,-1424(s0)
    80209914:	c789                	beqz	a5,8020991e <pselect+0x2fe>
				readfds->fd_bits[idx] = rres;
    80209916:	97da                	add	a5,a5,s6
    80209918:	aa843703          	ld	a4,-1368(s0)
    8020991c:	e398                	sd	a4,0(a5)
			if (writefds)
    8020991e:	a6843783          	ld	a5,-1432(s0)
    80209922:	c789                	beqz	a5,8020992c <pselect+0x30c>
				writefds->fd_bits[idx] = wres;
    80209924:	97da                	add	a5,a5,s6
    80209926:	aa043703          	ld	a4,-1376(s0)
    8020992a:	e398                	sd	a4,0(a5)
			if (exceptfds)
    8020992c:	a6043783          	ld	a5,-1440(s0)
    80209930:	e60788e3          	beqz	a5,802097a0 <pselect+0x180>
				exceptfds->fd_bits[idx] = exres;
    80209934:	97da                	add	a5,a5,s6
    80209936:	a9843703          	ld	a4,-1384(s0)
    8020993a:	e398                	sd	a4,0(a5)
    8020993c:	b595                	j	802097a0 <pselect+0x180>
		}
		wait.pt.func = NULL;		// only need to be called once for each file
    8020993e:	ae043823          	sd	zero,-1296(s0)

		if (ret > 0 || immediate)	// got results or don't sleep-wait
    80209942:	ac843783          	ld	a5,-1336(s0)
    80209946:	08f04e63          	bgtz	a5,802099e2 <pselect+0x3c2>
    8020994a:	a5843783          	ld	a5,-1448(s0)
    8020994e:	ebd1                	bnez	a5,802099e2 <pselect+0x3c2>
			break;
		if (wait.error) {
    80209950:	b0043783          	ld	a5,-1280(s0)
    80209954:	e7c1                	bnez	a5,802099dc <pselect+0x3bc>
	struct proc *p = myproc();
    80209956:	00000097          	auipc	ra,0x0
    8020995a:	1d4080e7          	jalr	468(ra) # 80209b2a <myproc>
    8020995e:	892a                	mv	s2,a0
	struct proc *volatile vp = p;
    80209960:	aea43423          	sd	a0,-1304(s0)
	acquire(&p->lock);	// Hold this for sleep().
    80209964:	00850493          	addi	s1,a0,8
    80209968:	8526                	mv	a0,s1
    8020996a:	ffffd097          	auipc	ra,0xffffd
    8020996e:	204080e7          	jalr	516(ra) # 80206b6e <acquire>
	p->sleep_expire = expire;
    80209972:	a5043783          	ld	a5,-1456(s0)
    80209976:	10f93c23          	sd	a5,280(s2)
	sleep(pwq, &p->lock);
    8020997a:	85a6                	mv	a1,s1
    8020997c:	af040513          	addi	a0,s0,-1296
    80209980:	ffff8097          	auipc	ra,0xffff8
    80209984:	256080e7          	jalr	598(ra) # 80201bd6 <sleep>
	if (vp->sleep_expire == 0)
    80209988:	ae843783          	ld	a5,-1304(s0)
    8020998c:	1187b783          	ld	a5,280(a5)
    80209990:	c7cd                	beqz	a5,80209a3a <pselect+0x41a>
		p->sleep_expire = 0;
    80209992:	10093c23          	sd	zero,280(s2)
	release(&p->lock);
    80209996:	8526                	mv	a0,s1
    80209998:	ffffd097          	auipc	ra,0xffffd
    8020999c:	22a080e7          	jalr	554(ra) # 80206bc2 <release>
	__debug_info("poll_sched_timeout", "pwq=%p, ret=%d\n", pwq, ret);
    802099a0:	4681                	li	a3,0
    802099a2:	af040613          	addi	a2,s0,-1296
    802099a6:	00008597          	auipc	a1,0x8
    802099aa:	59a58593          	addi	a1,a1,1434 # 80211f40 <digits+0x678>
    802099ae:	00008517          	auipc	a0,0x8
    802099b2:	5a250513          	addi	a0,a0,1442 # 80211f50 <digits+0x688>
    802099b6:	ffffd097          	auipc	ra,0xffffd
    802099ba:	728080e7          	jalr	1832(ra) # 802070de <__debug_info>
		}

		// at this point, maybe we are already waken up by some
		if (poll_sched_timeout(&wait, expire))
			immediate = 1;
		if (myproc()->killed) {
    802099be:	00000097          	auipc	ra,0x0
    802099c2:	16c080e7          	jalr	364(ra) # 80209b2a <myproc>
    802099c6:	5d1c                	lw	a5,56(a0)
    802099c8:	c799                	beqz	a5,802099d6 <pselect+0x3b6>
			immediate = 1;
			wait.error = -EINTR;
    802099ca:	57f1                	li	a5,-4
    802099cc:	b0f43023          	sd	a5,-1280(s0)
			immediate = 1;
    802099d0:	4785                	li	a5,1
    802099d2:	a4f43c23          	sd	a5,-1448(s0)
		for (int idx = 0; idx <= (nfds - 1) / NFDBIT; idx++)
    802099d6:	4b01                	li	s6,0
		int i = 0;	// fd iterator
    802099d8:	4901                	li	s2,0
    802099da:	bbc1                	j	802097aa <pselect+0x18a>
			ret = wait.error;
    802099dc:	2781                	sext.w	a5,a5
    802099de:	acf43423          	sd	a5,-1336(s0)
	for (int i = 0; i < pwq->index; i++) {
    802099e2:	b0842783          	lw	a5,-1272(s0)
    802099e6:	0af05a63          	blez	a5,80209a9a <pselect+0x47a>
    802099ea:	b1040493          	addi	s1,s0,-1264
    802099ee:	4981                	li	s3,0
    802099f0:	a829                	j	80209a0a <pselect+0x3ea>
		release(&wq->lock);
    802099f2:	854a                	mv	a0,s2
    802099f4:	ffffd097          	auipc	ra,0xffffd
    802099f8:	1ce080e7          	jalr	462(ra) # 80206bc2 <release>
	for (int i = 0; i < pwq->index; i++) {
    802099fc:	2985                	addiw	s3,s3,1
    802099fe:	02048493          	addi	s1,s1,32
    80209a02:	b0842783          	lw	a5,-1272(s0)
    80209a06:	08f9da63          	bge	s3,a5,80209a9a <pselect+0x47a>
		struct wait_queue *wq = pwn->queue;
    80209a0a:	0004b903          	ld	s2,0(s1)
		acquire(&wq->lock);
    80209a0e:	854a                	mv	a0,s2
    80209a10:	ffffd097          	auipc	ra,0xffffd
    80209a14:	15e080e7          	jalr	350(ra) # 80206b6e <acquire>
	__list_link(node->prev, node->next);
    80209a18:	6898                	ld	a4,16(s1)
    80209a1a:	6c9c                	ld	a5,24(s1)
	prev->next = next;
    80209a1c:	e71c                	sd	a5,8(a4)
	next->prev = prev;
    80209a1e:	e398                	sd	a4,0(a5)
	return head->next == head;
    80209a20:	02093783          	ld	a5,32(s2)
	return list_empty(&wq->head);
    80209a24:	01890713          	addi	a4,s2,24
		if (!wait_queue_empty(wq)) {
    80209a28:	fce785e3          	beq	a5,a4,802099f2 <pselect+0x3d2>
			wakeup(node->chan);
    80209a2c:	ff87b503          	ld	a0,-8(a5)
    80209a30:	ffff8097          	auipc	ra,0xffff8
    80209a34:	2b0080e7          	jalr	688(ra) # 80201ce0 <wakeup>
    80209a38:	bf6d                	j	802099f2 <pselect+0x3d2>
	release(&p->lock);
    80209a3a:	8526                	mv	a0,s1
    80209a3c:	ffffd097          	auipc	ra,0xffffd
    80209a40:	186080e7          	jalr	390(ra) # 80206bc2 <release>
	__debug_info("poll_sched_timeout", "pwq=%p, ret=%d\n", pwq, ret);
    80209a44:	4685                	li	a3,1
    80209a46:	af040613          	addi	a2,s0,-1296
    80209a4a:	00008597          	auipc	a1,0x8
    80209a4e:	4f658593          	addi	a1,a1,1270 # 80211f40 <digits+0x678>
    80209a52:	00008517          	auipc	a0,0x8
    80209a56:	4fe50513          	addi	a0,a0,1278 # 80211f50 <digits+0x688>
    80209a5a:	ffffd097          	auipc	ra,0xffffd
    80209a5e:	684080e7          	jalr	1668(ra) # 802070de <__debug_info>
			immediate = 1;
    80209a62:	4785                	li	a5,1
    80209a64:	a4f43c23          	sd	a5,-1448(s0)
    80209a68:	bf99                	j	802099be <pselect+0x39e>
	__debug_info("pselect", "timeout={%ds, %dns}\n", 
    80209a6a:	56fd                	li	a3,-1
    80209a6c:	567d                	li	a2,-1
    80209a6e:	00008597          	auipc	a1,0x8
    80209a72:	4b258593          	addi	a1,a1,1202 # 80211f20 <digits+0x658>
    80209a76:	00008517          	auipc	a0,0x8
    80209a7a:	4c250513          	addi	a0,a0,1218 # 80211f38 <digits+0x670>
    80209a7e:	ffffd097          	auipc	ra,0xffffd
    80209a82:	660080e7          	jalr	1632(ra) # 802070de <__debug_info>
	int immediate = 0;
    80209a86:	a4043c23          	sd	zero,-1448(s0)
		expire = 0;					// infinity
    80209a8a:	a4043823          	sd	zero,-1456(s0)
    80209a8e:	b191                	j	802096d2 <pselect+0xb2>
		return POLLIN|POLLOUT;
    80209a90:	4795                	li	a5,5
				if ((mask & POLLIN_SET) && (r & bit)) {
    80209a92:	d80d8de3          	beqz	s11,8020982c <pselect+0x20c>
		return POLLIN|POLLOUT;
    80209a96:	4795                	li	a5,5
    80209a98:	bb95                	j	8020980c <pselect+0x1ec>

	poll_end(&wait);

	//__debug_info("pselect", "return %d\n", ret);
	return ret;
}
    80209a9a:	ac843503          	ld	a0,-1336(s0)
    80209a9e:	5a813083          	ld	ra,1448(sp)
    80209aa2:	5a013403          	ld	s0,1440(sp)
    80209aa6:	59813483          	ld	s1,1432(sp)
    80209aaa:	59013903          	ld	s2,1424(sp)
    80209aae:	58813983          	ld	s3,1416(sp)
    80209ab2:	58013a03          	ld	s4,1408(sp)
    80209ab6:	57813a83          	ld	s5,1400(sp)
    80209aba:	57013b03          	ld	s6,1392(sp)
    80209abe:	56813b83          	ld	s7,1384(sp)
    80209ac2:	56013c03          	ld	s8,1376(sp)
    80209ac6:	55813c83          	ld	s9,1368(sp)
    80209aca:	55013d03          	ld	s10,1360(sp)
    80209ace:	54813d83          	ld	s11,1352(sp)
    80209ad2:	5b010113          	addi	sp,sp,1456
    80209ad6:	8082                	ret

0000000080209ad8 <cpuinit>:

// #define DEBUG1
struct cpu cpus[NCPU];

void
cpuinit(void){
    80209ad8:	1141                	addi	sp,sp,-16
    80209ada:	e406                	sd	ra,8(sp)
    80209adc:	e022                	sd	s0,0(sp)
    80209ade:	0800                	addi	s0,sp,16
  memset(cpus, 0, sizeof(cpus));
    80209ae0:	28000613          	li	a2,640
    80209ae4:	4581                	li	a1,0
    80209ae6:	00565517          	auipc	a0,0x565
    80209aea:	86a50513          	addi	a0,a0,-1942 # 8076e350 <cpus>
    80209aee:	ffff7097          	auipc	ra,0xffff7
    80209af2:	286080e7          	jalr	646(ra) # 80200d74 <memset>
}
    80209af6:	60a2                	ld	ra,8(sp)
    80209af8:	6402                	ld	s0,0(sp)
    80209afa:	0141                	addi	sp,sp,16
    80209afc:	8082                	ret

0000000080209afe <cpuid>:
// Must be called with interrupts disabled,
// to prevent race with process being moved
// to a different CPU.
int
cpuid()
{
    80209afe:	1141                	addi	sp,sp,-16
    80209b00:	e422                	sd	s0,8(sp)
    80209b02:	0800                	addi	s0,sp,16
  asm volatile("mv %0, tp" : "=r" (x) );
    80209b04:	8512                	mv	a0,tp
  int id = r_tp();
  return id;
}
    80209b06:	2501                	sext.w	a0,a0
    80209b08:	6422                	ld	s0,8(sp)
    80209b0a:	0141                	addi	sp,sp,16
    80209b0c:	8082                	ret

0000000080209b0e <mycpu>:

// Return this CPU's cpu struct.
// Interrupts must be disabled.
struct cpu*
mycpu(void) {
    80209b0e:	1141                	addi	sp,sp,-16
    80209b10:	e422                	sd	s0,8(sp)
    80209b12:	0800                	addi	s0,sp,16
    80209b14:	8792                	mv	a5,tp
  int id = cpuid();
  struct cpu *c = &cpus[id];
    80209b16:	2781                	sext.w	a5,a5
    80209b18:	079e                	slli	a5,a5,0x7
  
  return c;
}
    80209b1a:	00565517          	auipc	a0,0x565
    80209b1e:	83650513          	addi	a0,a0,-1994 # 8076e350 <cpus>
    80209b22:	953e                	add	a0,a0,a5
    80209b24:	6422                	ld	s0,8(sp)
    80209b26:	0141                	addi	sp,sp,16
    80209b28:	8082                	ret

0000000080209b2a <myproc>:

// Return the current struct proc *, or zero if none.
struct proc*
myproc(void) {
    80209b2a:	1101                	addi	sp,sp,-32
    80209b2c:	ec06                	sd	ra,24(sp)
    80209b2e:	e822                	sd	s0,16(sp)
    80209b30:	e426                	sd	s1,8(sp)
    80209b32:	1000                	addi	s0,sp,32
  push_off();
    80209b34:	ffff7097          	auipc	ra,0xffff7
    80209b38:	4ce080e7          	jalr	1230(ra) # 80201002 <push_off>
    80209b3c:	8792                	mv	a5,tp
  struct cpu *c = mycpu();
  struct proc *p = c->proc;
    80209b3e:	2781                	sext.w	a5,a5
    80209b40:	079e                	slli	a5,a5,0x7
    80209b42:	00565717          	auipc	a4,0x565
    80209b46:	80e70713          	addi	a4,a4,-2034 # 8076e350 <cpus>
    80209b4a:	97ba                	add	a5,a5,a4
    80209b4c:	6384                	ld	s1,0(a5)
  pop_off();
    80209b4e:	ffff7097          	auipc	ra,0xffff7
    80209b52:	500080e7          	jalr	1280(ra) # 8020104e <pop_off>
  return p;
}
    80209b56:	8526                	mv	a0,s1
    80209b58:	60e2                	ld	ra,24(sp)
    80209b5a:	6442                	ld	s0,16(sp)
    80209b5c:	64a2                	ld	s1,8(sp)
    80209b5e:	6105                	addi	sp,sp,32
    80209b60:	8082                	ret

0000000080209b62 <alloc_vma>:
  uint64 sz,
  int perm,
  int alloc,
  uint64 pa
)
{
    80209b62:	711d                	addi	sp,sp,-96
    80209b64:	ec86                	sd	ra,88(sp)
    80209b66:	e8a2                	sd	s0,80(sp)
    80209b68:	e4a6                	sd	s1,72(sp)
    80209b6a:	e0ca                	sd	s2,64(sp)
    80209b6c:	fc4e                	sd	s3,56(sp)
    80209b6e:	f852                	sd	s4,48(sp)
    80209b70:	f456                	sd	s5,40(sp)
    80209b72:	f05a                	sd	s6,32(sp)
    80209b74:	ec5e                	sd	s7,24(sp)
    80209b76:	e862                	sd	s8,16(sp)
    80209b78:	e466                	sd	s9,8(sp)
    80209b7a:	e06a                	sd	s10,0(sp)
    80209b7c:	1080                	addi	s0,sp,96
    80209b7e:	8aaa                	mv	s5,a0
  if(p == NULL)
    80209b80:	c545                	beqz	a0,80209c28 <alloc_vma+0xc6>
    80209b82:	8bae                	mv	s7,a1
    80209b84:	8a36                	mv	s4,a3
    80209b86:	8b3a                	mv	s6,a4
    80209b88:	8cbe                	mv	s9,a5
    80209b8a:	8c42                	mv	s8,a6
  {
    __debug_warn("[alloc_vma] proc is null\n");
    return NULL;
  }

  uint64 start = PGROUNDDOWN(addr);
    80209b8c:	77fd                	lui	a5,0xfffff
    80209b8e:	00f679b3          	and	s3,a2,a5
  uint64 end = addr + sz;
  end = PGROUNDUP(end);
    80209b92:	6905                	lui	s2,0x1
    80209b94:	197d                	addi	s2,s2,-1
    80209b96:	9936                	add	s2,s2,a3
    80209b98:	9932                	add	s2,s2,a2
    80209b9a:	00f97933          	and	s2,s2,a5

  struct vma *vma_head = p->vma;
    80209b9e:	17053783          	ld	a5,368(a0)
  struct vma *nvma = vma_head->next;
    80209ba2:	7f84                	ld	s1,56(a5)

  while(nvma != vma_head)
    80209ba4:	00978b63          	beq	a5,s1,80209bba <alloc_vma+0x58>
  {
    if(end <= nvma->addr)
    80209ba8:	6490                	ld	a2,8(s1)
    80209baa:	01267863          	bgeu	a2,s2,80209bba <alloc_vma+0x58>
    {
      break;
    }
    else if (start >= nvma->end)
    80209bae:	6c90                	ld	a2,24(s1)
    80209bb0:	08c9e663          	bltu	s3,a2,80209c3c <alloc_vma+0xda>
    {
      nvma = nvma->next;
    80209bb4:	7c84                	ld	s1,56(s1)
  while(nvma != vma_head)
    80209bb6:	fe9799e3          	bne	a5,s1,80209ba8 <alloc_vma+0x46>
    {
      __debug_warn("[alloc_vma] vma address overflow\n");
      return NULL;
    }
  }
  struct vma *vma = (struct vma*)kmalloc(sizeof(struct vma));
    80209bba:	04000513          	li	a0,64
    80209bbe:	ffffe097          	auipc	ra,0xffffe
    80209bc2:	006080e7          	jalr	6(ra) # 80207bc4 <kmalloc>
    80209bc6:	8d2a                	mv	s10,a0
  if(vma == NULL)
    80209bc8:	c541                	beqz	a0,80209c50 <alloc_vma+0xee>
  {
    __debug_warn("[alloc_vma] vma kmalloc failed\n");
    return NULL;
  }
  
  if(sz != 0)
    80209bca:	000a0763          	beqz	s4,80209bd8 <alloc_vma+0x76>
  {
    if(alloc == 1)
    80209bce:	4785                	li	a5,1
    80209bd0:	08fc8963          	beq	s9,a5,80209c62 <alloc_vma+0x100>
      {
        __debug_warn("[alloc_vma] uvmalloc start = %p, end = %p fail\n", start, end);
        goto bad;
      }
    }
    else if(pa != 0)
    80209bd4:	0a0c1c63          	bnez	s8,80209c8c <alloc_vma+0x12a>
        goto bad;
      }
    }
  }
  
  vma->addr = start;
    80209bd8:	013d3423          	sd	s3,8(s10)
  vma->sz = sz;
    80209bdc:	014d3823          	sd	s4,16(s10)
  vma->end = end;
    80209be0:	012d3c23          	sd	s2,24(s10)
  vma->perm = perm;
    80209be4:	016d2223          	sw	s6,4(s10)
  vma->fd = -1;
    80209be8:	57fd                	li	a5,-1
    80209bea:	02fd2223          	sw	a5,36(s10)
  vma->f_off = 0;
    80209bee:	020d3423          	sd	zero,40(s10)
  vma->type = type;
    80209bf2:	017d2023          	sw	s7,0(s10)

  vma->prev = nvma->prev;
    80209bf6:	789c                	ld	a5,48(s1)
    80209bf8:	02fd3823          	sd	a5,48(s10)
  vma->next = nvma;
    80209bfc:	029d3c23          	sd	s1,56(s10)
  nvma->prev->next = vma;
    80209c00:	789c                	ld	a5,48(s1)
    80209c02:	03a7bc23          	sd	s10,56(a5) # fffffffffffff038 <kernel_end+0xffffffff7f890038>
  nvma->prev = vma;
    80209c06:	03a4b823          	sd	s10,48(s1)
  return vma;

bad:
  kfree(vma);
  return NULL;
}
    80209c0a:	856a                	mv	a0,s10
    80209c0c:	60e6                	ld	ra,88(sp)
    80209c0e:	6446                	ld	s0,80(sp)
    80209c10:	64a6                	ld	s1,72(sp)
    80209c12:	6906                	ld	s2,64(sp)
    80209c14:	79e2                	ld	s3,56(sp)
    80209c16:	7a42                	ld	s4,48(sp)
    80209c18:	7aa2                	ld	s5,40(sp)
    80209c1a:	7b02                	ld	s6,32(sp)
    80209c1c:	6be2                	ld	s7,24(sp)
    80209c1e:	6c42                	ld	s8,16(sp)
    80209c20:	6ca2                	ld	s9,8(sp)
    80209c22:	6d02                	ld	s10,0(sp)
    80209c24:	6125                	addi	sp,sp,96
    80209c26:	8082                	ret
    __debug_warn("[alloc_vma] proc is null\n");
    80209c28:	00008517          	auipc	a0,0x8
    80209c2c:	34050513          	addi	a0,a0,832 # 80211f68 <digits+0x6a0>
    80209c30:	ffffd097          	auipc	ra,0xffffd
    80209c34:	674080e7          	jalr	1652(ra) # 802072a4 <__debug_warn>
    return NULL;
    80209c38:	8d56                	mv	s10,s5
    80209c3a:	bfc1                	j	80209c0a <alloc_vma+0xa8>
      __debug_warn("[alloc_vma] vma address overflow\n");
    80209c3c:	00008517          	auipc	a0,0x8
    80209c40:	34c50513          	addi	a0,a0,844 # 80211f88 <digits+0x6c0>
    80209c44:	ffffd097          	auipc	ra,0xffffd
    80209c48:	660080e7          	jalr	1632(ra) # 802072a4 <__debug_warn>
      return NULL;
    80209c4c:	4d01                	li	s10,0
    80209c4e:	bf75                	j	80209c0a <alloc_vma+0xa8>
    __debug_warn("[alloc_vma] vma kmalloc failed\n");
    80209c50:	00008517          	auipc	a0,0x8
    80209c54:	36050513          	addi	a0,a0,864 # 80211fb0 <digits+0x6e8>
    80209c58:	ffffd097          	auipc	ra,0xffffd
    80209c5c:	64c080e7          	jalr	1612(ra) # 802072a4 <__debug_warn>
    return NULL;
    80209c60:	b76d                	j	80209c0a <alloc_vma+0xa8>
      if(uvmalloc(p->pagetable, start, end, perm) != 0)
    80209c62:	86da                	mv	a3,s6
    80209c64:	864a                	mv	a2,s2
    80209c66:	85ce                	mv	a1,s3
    80209c68:	060ab503          	ld	a0,96(s5) # 1060 <_entry-0x801fefa0>
    80209c6c:	ffffe097          	auipc	ra,0xffffe
    80209c70:	778080e7          	jalr	1912(ra) # 802083e4 <uvmalloc>
    80209c74:	d135                	beqz	a0,80209bd8 <alloc_vma+0x76>
        __debug_warn("[alloc_vma] uvmalloc start = %p, end = %p fail\n", start, end);
    80209c76:	864a                	mv	a2,s2
    80209c78:	85ce                	mv	a1,s3
    80209c7a:	00008517          	auipc	a0,0x8
    80209c7e:	35650513          	addi	a0,a0,854 # 80211fd0 <digits+0x708>
    80209c82:	ffffd097          	auipc	ra,0xffffd
    80209c86:	622080e7          	jalr	1570(ra) # 802072a4 <__debug_warn>
        goto bad;
    80209c8a:	a025                	j	80209cb2 <alloc_vma+0x150>
      if(mappages(p->pagetable, start, sz, pa, perm) != 0)
    80209c8c:	875a                	mv	a4,s6
    80209c8e:	86e2                	mv	a3,s8
    80209c90:	8652                	mv	a2,s4
    80209c92:	85ce                	mv	a1,s3
    80209c94:	060ab503          	ld	a0,96(s5)
    80209c98:	ffffe097          	auipc	ra,0xffffe
    80209c9c:	346080e7          	jalr	838(ra) # 80207fde <mappages>
    80209ca0:	dd05                	beqz	a0,80209bd8 <alloc_vma+0x76>
        __debug_warn("[alloc_vma] mappages failed\n");
    80209ca2:	00008517          	auipc	a0,0x8
    80209ca6:	35e50513          	addi	a0,a0,862 # 80212000 <digits+0x738>
    80209caa:	ffffd097          	auipc	ra,0xffffd
    80209cae:	5fa080e7          	jalr	1530(ra) # 802072a4 <__debug_warn>
  kfree(vma);
    80209cb2:	856a                	mv	a0,s10
    80209cb4:	ffffe097          	auipc	ra,0xffffe
    80209cb8:	15a080e7          	jalr	346(ra) # 80207e0e <kfree>
  return NULL;
    80209cbc:	4d01                	li	s10,0
    80209cbe:	b7b1                	j	80209c0a <alloc_vma+0xa8>

0000000080209cc0 <type_locate_vma>:


struct vma* type_locate_vma(struct vma *head, enum segtype type)
{
    80209cc0:	1141                	addi	sp,sp,-16
    80209cc2:	e422                	sd	s0,8(sp)
    80209cc4:	0800                	addi	s0,sp,16
    80209cc6:	87aa                	mv	a5,a0
  struct vma *vma = NULL;

  if(type == LOAD)
    80209cc8:	4705                	li	a4,1
    80209cca:	00e58f63          	beq	a1,a4,80209ce8 <type_locate_vma+0x28>
      vma = vma->prev;
    }
  }
  else
  {
    vma = head->next;
    80209cce:	7d08                	ld	a0,56(a0)
    while(vma != head)
    80209cd0:	02a78a63          	beq	a5,a0,80209d04 <type_locate_vma+0x44>
    {
      if(vma->type == type)
    80209cd4:	4118                	lw	a4,0(a0)
    80209cd6:	00b70663          	beq	a4,a1,80209ce2 <type_locate_vma+0x22>
      {
        return vma;
      }
      vma = vma->next;
    80209cda:	7d08                	ld	a0,56(a0)
    while(vma != head)
    80209cdc:	fea79ce3          	bne	a5,a0,80209cd4 <type_locate_vma+0x14>
    }
  }
 
  return NULL;
    80209ce0:	4501                	li	a0,0
}
    80209ce2:	6422                	ld	s0,8(sp)
    80209ce4:	0141                	addi	sp,sp,16
    80209ce6:	8082                	ret
    vma = head->prev;
    80209ce8:	7908                	ld	a0,48(a0)
    while(vma != head)
    80209cea:	00a78b63          	beq	a5,a0,80209d00 <type_locate_vma+0x40>
      if(vma->type == type)
    80209cee:	4685                	li	a3,1
    80209cf0:	4118                	lw	a4,0(a0)
    80209cf2:	fed708e3          	beq	a4,a3,80209ce2 <type_locate_vma+0x22>
      vma = vma->prev;
    80209cf6:	7908                	ld	a0,48(a0)
    while(vma != head)
    80209cf8:	fea79ce3          	bne	a5,a0,80209cf0 <type_locate_vma+0x30>
  return NULL;
    80209cfc:	4501                	li	a0,0
    80209cfe:	b7d5                	j	80209ce2 <type_locate_vma+0x22>
    80209d00:	4501                	li	a0,0
    80209d02:	b7c5                	j	80209ce2 <type_locate_vma+0x22>
    80209d04:	4501                	li	a0,0
    80209d06:	bff1                	j	80209ce2 <type_locate_vma+0x22>

0000000080209d08 <addr_locate_vma>:

struct vma *addr_locate_vma(struct vma*head, uint64 addr)
{
    80209d08:	1141                	addi	sp,sp,-16
    80209d0a:	e422                	sd	s0,8(sp)
    80209d0c:	0800                	addi	s0,sp,16
    80209d0e:	872a                	mv	a4,a0
  struct vma *vma = head->next;
    80209d10:	7d08                	ld	a0,56(a0)
  while(vma != head)
    80209d12:	00a71763          	bne	a4,a0,80209d20 <addr_locate_vma+0x18>
    {
      return vma;
    }
    vma = vma->next;
  }
  return NULL;
    80209d16:	4501                	li	a0,0
    80209d18:	a821                	j	80209d30 <addr_locate_vma+0x28>
    vma = vma->next;
    80209d1a:	7d08                	ld	a0,56(a0)
  while(vma != head)
    80209d1c:	00a70963          	beq	a4,a0,80209d2e <addr_locate_vma+0x26>
    if(vma->addr <= addr && addr < vma->end)
    80209d20:	651c                	ld	a5,8(a0)
    80209d22:	fef5ece3          	bltu	a1,a5,80209d1a <addr_locate_vma+0x12>
    80209d26:	6d1c                	ld	a5,24(a0)
    80209d28:	fef5f9e3          	bgeu	a1,a5,80209d1a <addr_locate_vma+0x12>
    80209d2c:	a011                	j	80209d30 <addr_locate_vma+0x28>
  return NULL;
    80209d2e:	4501                	li	a0,0
}
    80209d30:	6422                	ld	s0,8(sp)
    80209d32:	0141                	addi	sp,sp,16
    80209d34:	8082                	ret

0000000080209d36 <part_locate_vma>:

struct vma *part_locate_vma(struct vma *head, uint64 start, uint64 end)
{
    80209d36:	7179                	addi	sp,sp,-48
    80209d38:	f406                	sd	ra,40(sp)
    80209d3a:	f022                	sd	s0,32(sp)
    80209d3c:	ec26                	sd	s1,24(sp)
    80209d3e:	e84a                	sd	s2,16(sp)
    80209d40:	e44e                	sd	s3,8(sp)
    80209d42:	e052                	sd	s4,0(sp)
    80209d44:	1800                	addi	s0,sp,48
    80209d46:	89aa                	mv	s3,a0
    80209d48:	8a2e                	mv	s4,a1
    80209d4a:	8932                	mv	s2,a2
  struct vma *a = addr_locate_vma(head, start);
    80209d4c:	00000097          	auipc	ra,0x0
    80209d50:	fbc080e7          	jalr	-68(ra) # 80209d08 <addr_locate_vma>
    80209d54:	84aa                	mv	s1,a0
  struct vma *b = addr_locate_vma(head, end);
    80209d56:	85ca                	mv	a1,s2
    80209d58:	854e                	mv	a0,s3
    80209d5a:	00000097          	auipc	ra,0x0
    80209d5e:	fae080e7          	jalr	-82(ra) # 80209d08 <addr_locate_vma>
  if(!a || !b || a != b)
    80209d62:	cc81                	beqz	s1,80209d7a <part_locate_vma+0x44>
    80209d64:	c919                	beqz	a0,80209d7a <part_locate_vma+0x44>
    80209d66:	00a49a63          	bne	s1,a0,80209d7a <part_locate_vma+0x44>
  {
    __debug_warn("[part_locate_vma] start = %p, end = %p, not found\n", start, end);
    return NULL;
  }
  return a;
}
    80209d6a:	70a2                	ld	ra,40(sp)
    80209d6c:	7402                	ld	s0,32(sp)
    80209d6e:	64e2                	ld	s1,24(sp)
    80209d70:	6942                	ld	s2,16(sp)
    80209d72:	69a2                	ld	s3,8(sp)
    80209d74:	6a02                	ld	s4,0(sp)
    80209d76:	6145                	addi	sp,sp,48
    80209d78:	8082                	ret
    __debug_warn("[part_locate_vma] start = %p, end = %p, not found\n", start, end);
    80209d7a:	864a                	mv	a2,s2
    80209d7c:	85d2                	mv	a1,s4
    80209d7e:	00008517          	auipc	a0,0x8
    80209d82:	2a250513          	addi	a0,a0,674 # 80212020 <digits+0x758>
    80209d86:	ffffd097          	auipc	ra,0xffffd
    80209d8a:	51e080e7          	jalr	1310(ra) # 802072a4 <__debug_warn>
    return NULL;
    80209d8e:	4501                	li	a0,0
    80209d90:	bfe9                	j	80209d6a <part_locate_vma+0x34>

0000000080209d92 <alloc_mmap_vma>:

struct vma* alloc_mmap_vma(struct proc *p, int flags, uint64 addr, uint64 sz, int perm, int fd ,uint64 f_off)
{
    80209d92:	7139                	addi	sp,sp,-64
    80209d94:	fc06                	sd	ra,56(sp)
    80209d96:	f822                	sd	s0,48(sp)
    80209d98:	f426                	sd	s1,40(sp)
    80209d9a:	f04a                	sd	s2,32(sp)
    80209d9c:	ec4e                	sd	s3,24(sp)
    80209d9e:	e852                	sd	s4,16(sp)
    80209da0:	e456                	sd	s5,8(sp)
    80209da2:	e05a                	sd	s6,0(sp)
    80209da4:	0080                	addi	s0,sp,64
    80209da6:	892a                	mv	s2,a0
    80209da8:	84b2                	mv	s1,a2
    80209daa:	89b6                	mv	s3,a3
    80209dac:	8b3a                	mv	s6,a4
    80209dae:	8abe                	mv	s5,a5
    80209db0:	8a42                	mv	s4,a6
  struct vma *vma = NULL;

  struct vma *mvma = type_locate_vma(p->vma, MMAP);
    80209db2:	4599                	li	a1,6
    80209db4:	17053503          	ld	a0,368(a0)
    80209db8:	00000097          	auipc	ra,0x0
    80209dbc:	f08080e7          	jalr	-248(ra) # 80209cc0 <type_locate_vma>
  if(addr == 0)
    80209dc0:	e491                	bnez	s1,80209dcc <alloc_mmap_vma+0x3a>
  {
    addr = PGROUNDDOWN(mvma->addr - sz);
    80209dc2:	6504                	ld	s1,8(a0)
    80209dc4:	413484b3          	sub	s1,s1,s3
    80209dc8:	767d                	lui	a2,0xfffff
    80209dca:	8cf1                	and	s1,s1,a2
    // __debug_info("[alloc_mmap_vma] addr = %p\n", addr);
  }

  vma = alloc_vma(p, MMAP, addr, sz, perm, 1, NULL);
    80209dcc:	4801                	li	a6,0
    80209dce:	4785                	li	a5,1
    80209dd0:	875a                	mv	a4,s6
    80209dd2:	86ce                	mv	a3,s3
    80209dd4:	8626                	mv	a2,s1
    80209dd6:	4599                	li	a1,6
    80209dd8:	854a                	mv	a0,s2
    80209dda:	00000097          	auipc	ra,0x0
    80209dde:	d88080e7          	jalr	-632(ra) # 80209b62 <alloc_vma>
    80209de2:	84aa                	mv	s1,a0
  if(vma == NULL)
    80209de4:	c105                	beqz	a0,80209e04 <alloc_mmap_vma+0x72>
  {
    __debug_warn("[alloc_mmap_vma] alloc failed\n");
    return NULL;
  }

  vma->fd = fd;
    80209de6:	03552223          	sw	s5,36(a0)
  vma->f_off = f_off;
    80209dea:	03453423          	sd	s4,40(a0)
  return vma;
}
    80209dee:	8526                	mv	a0,s1
    80209df0:	70e2                	ld	ra,56(sp)
    80209df2:	7442                	ld	s0,48(sp)
    80209df4:	74a2                	ld	s1,40(sp)
    80209df6:	7902                	ld	s2,32(sp)
    80209df8:	69e2                	ld	s3,24(sp)
    80209dfa:	6a42                	ld	s4,16(sp)
    80209dfc:	6aa2                	ld	s5,8(sp)
    80209dfe:	6b02                	ld	s6,0(sp)
    80209e00:	6121                	addi	sp,sp,64
    80209e02:	8082                	ret
    __debug_warn("[alloc_mmap_vma] alloc failed\n");
    80209e04:	00008517          	auipc	a0,0x8
    80209e08:	25450513          	addi	a0,a0,596 # 80212058 <digits+0x790>
    80209e0c:	ffffd097          	auipc	ra,0xffffd
    80209e10:	498080e7          	jalr	1176(ra) # 802072a4 <__debug_warn>
    return NULL;
    80209e14:	bfe9                	j	80209dee <alloc_mmap_vma+0x5c>

0000000080209e16 <alloc_stack_vma>:

struct vma *alloc_stack_vma(struct proc *p, uint64 addr, int perm)
{
    80209e16:	7179                	addi	sp,sp,-48
    80209e18:	f406                	sd	ra,40(sp)
    80209e1a:	f022                	sd	s0,32(sp)
    80209e1c:	ec26                	sd	s1,24(sp)
    80209e1e:	e84a                	sd	s2,16(sp)
    80209e20:	e44e                	sd	s3,8(sp)
    80209e22:	e052                	sd	s4,0(sp)
    80209e24:	1800                	addi	s0,sp,48
    80209e26:	89aa                	mv	s3,a0
    80209e28:	84ae                	mv	s1,a1
    80209e2a:	8a32                	mv	s4,a2
  struct vma *vma = type_locate_vma(p->vma, STACK);
    80209e2c:	459d                	li	a1,7
    80209e2e:	17053503          	ld	a0,368(a0)
    80209e32:	00000097          	auipc	ra,0x0
    80209e36:	e8e080e7          	jalr	-370(ra) # 80209cc0 <type_locate_vma>
  uint64 start = PGROUNDDOWN(addr);
    80209e3a:	75fd                	lui	a1,0xfffff
    80209e3c:	8de5                	and	a1,a1,s1
  uint64 end = vma->addr;
    80209e3e:	6510                	ld	a2,8(a0)
  vma->addr = start;
    80209e40:	e50c                	sd	a1,8(a0)
  if(start < USER_STACK_TOP)
    80209e42:	6ffff7b7          	lui	a5,0x6ffff
    80209e46:	02f5e863          	bltu	a1,a5,80209e76 <alloc_stack_vma+0x60>
    80209e4a:	892a                	mv	s2,a0
  {
    __debug_warn("[alloc_stack_vma] stack address illegal\n");
    return NULL;
  }
  vma->sz += (end - start);
    80209e4c:	691c                	ld	a5,16(a0)
    80209e4e:	97b2                	add	a5,a5,a2
    80209e50:	8f8d                	sub	a5,a5,a1
    80209e52:	e91c                	sd	a5,16(a0)
  if(uvmalloc(p->pagetable, start, end, perm) != 0)
    80209e54:	86d2                	mv	a3,s4
    80209e56:	0609b503          	ld	a0,96(s3)
    80209e5a:	ffffe097          	auipc	ra,0xffffe
    80209e5e:	58a080e7          	jalr	1418(ra) # 802083e4 <uvmalloc>
    80209e62:	e505                	bnez	a0,80209e8a <alloc_stack_vma+0x74>
  {
    __debug_warn("[alloc_stack_vma] stack vma alloc fail\n");
    return NULL;
  }
  return vma;
}
    80209e64:	854a                	mv	a0,s2
    80209e66:	70a2                	ld	ra,40(sp)
    80209e68:	7402                	ld	s0,32(sp)
    80209e6a:	64e2                	ld	s1,24(sp)
    80209e6c:	6942                	ld	s2,16(sp)
    80209e6e:	69a2                	ld	s3,8(sp)
    80209e70:	6a02                	ld	s4,0(sp)
    80209e72:	6145                	addi	sp,sp,48
    80209e74:	8082                	ret
    __debug_warn("[alloc_stack_vma] stack address illegal\n");
    80209e76:	00008517          	auipc	a0,0x8
    80209e7a:	20250513          	addi	a0,a0,514 # 80212078 <digits+0x7b0>
    80209e7e:	ffffd097          	auipc	ra,0xffffd
    80209e82:	426080e7          	jalr	1062(ra) # 802072a4 <__debug_warn>
    return NULL;
    80209e86:	4901                	li	s2,0
    80209e88:	bff1                	j	80209e64 <alloc_stack_vma+0x4e>
    __debug_warn("[alloc_stack_vma] stack vma alloc fail\n");
    80209e8a:	00008517          	auipc	a0,0x8
    80209e8e:	21e50513          	addi	a0,a0,542 # 802120a8 <digits+0x7e0>
    80209e92:	ffffd097          	auipc	ra,0xffffd
    80209e96:	412080e7          	jalr	1042(ra) # 802072a4 <__debug_warn>
    return NULL;
    80209e9a:	4901                	li	s2,0
    80209e9c:	b7e1                	j	80209e64 <alloc_stack_vma+0x4e>

0000000080209e9e <alloc_addr_heap_vma>:
 
struct vma *alloc_addr_heap_vma(struct proc *p, uint64 addr, int perm)
{
    80209e9e:	7139                	addi	sp,sp,-64
    80209ea0:	fc06                	sd	ra,56(sp)
    80209ea2:	f822                	sd	s0,48(sp)
    80209ea4:	f426                	sd	s1,40(sp)
    80209ea6:	f04a                	sd	s2,32(sp)
    80209ea8:	ec4e                	sd	s3,24(sp)
    80209eaa:	e852                	sd	s4,16(sp)
    80209eac:	e456                	sd	s5,8(sp)
    80209eae:	0080                	addi	s0,sp,64
    80209eb0:	89aa                	mv	s3,a0
    80209eb2:	84ae                	mv	s1,a1
    80209eb4:	8a32                	mv	s4,a2
  struct vma *vma = type_locate_vma(p->vma, HEAP);
    80209eb6:	17053a83          	ld	s5,368(a0)
    80209eba:	4595                	li	a1,5
    80209ebc:	8556                	mv	a0,s5
    80209ebe:	00000097          	auipc	ra,0x0
    80209ec2:	e02080e7          	jalr	-510(ra) # 80209cc0 <type_locate_vma>
    80209ec6:	892a                	mv	s2,a0
  struct vma *lvma = type_locate_vma(p->vma, LOAD);
    80209ec8:	4585                	li	a1,1
    80209eca:	8556                	mv	a0,s5
    80209ecc:	00000097          	auipc	ra,0x0
    80209ed0:	df4080e7          	jalr	-524(ra) # 80209cc0 <type_locate_vma>
  addr = PGROUNDUP(addr);
    80209ed4:	6585                	lui	a1,0x1
    80209ed6:	15fd                	addi	a1,a1,-1
    80209ed8:	94ae                	add	s1,s1,a1
    80209eda:	75fd                	lui	a1,0xfffff
    80209edc:	8ced                	and	s1,s1,a1
  if(vma == NULL)
    80209ede:	04090363          	beqz	s2,80209f24 <alloc_addr_heap_vma+0x86>
    vma = alloc_vma(p, HEAP, start, sz, perm, 1, NULL);
    return vma;
  }
  else
  {
    if(lvma->end > addr)
    80209ee2:	6d1c                	ld	a5,24(a0)
    80209ee4:	06f4e163          	bltu	s1,a5,80209f46 <alloc_addr_heap_vma+0xa8>
    {
      __debug_warn("[alloc_addr_heap_vma] addr %p illegal\n", addr);
      return vma;
    }
    if(vma->end > addr)
    80209ee8:	01893583          	ld	a1,24(s2) # 1018 <_entry-0x801fefe8>
    80209eec:	08b4f063          	bgeu	s1,a1,80209f6c <alloc_addr_heap_vma+0xce>
    {
      if(uvmdealloc(p->pagetable, addr, vma->end) != 0)
    80209ef0:	862e                	mv	a2,a1
    80209ef2:	85a6                	mv	a1,s1
    80209ef4:	0609b503          	ld	a0,96(s3)
    80209ef8:	ffffe097          	auipc	ra,0xffffe
    80209efc:	4a8080e7          	jalr	1192(ra) # 802083a0 <uvmdealloc>
    80209f00:	ed29                	bnez	a0,80209f5a <alloc_addr_heap_vma+0xbc>
      {
        __debug_warn("[alloc_addr_heap_vma] uvmdealloc fail\n");
        return vma;
      }
      vma->end = addr;
    80209f02:	00993c23          	sd	s1,24(s2)
      vma->sz = (vma->end - vma->addr);
    80209f06:	00893783          	ld	a5,8(s2)
    80209f0a:	8c9d                	sub	s1,s1,a5
    80209f0c:	00993823          	sd	s1,16(s2)
    }
    vma->end = addr;
    vma->sz = (vma->end - vma->addr);
    return vma;
  }
}
    80209f10:	854a                	mv	a0,s2
    80209f12:	70e2                	ld	ra,56(sp)
    80209f14:	7442                	ld	s0,48(sp)
    80209f16:	74a2                	ld	s1,40(sp)
    80209f18:	7902                	ld	s2,32(sp)
    80209f1a:	69e2                	ld	s3,24(sp)
    80209f1c:	6a42                	ld	s4,16(sp)
    80209f1e:	6aa2                	ld	s5,8(sp)
    80209f20:	6121                	addi	sp,sp,64
    80209f22:	8082                	ret
    uint64 start = lvma->end;
    80209f24:	6d10                	ld	a2,24(a0)
    uint64 sz = 0;
    80209f26:	4681                	li	a3,0
    if(start < addr)sz = addr - start ;
    80209f28:	00967463          	bgeu	a2,s1,80209f30 <alloc_addr_heap_vma+0x92>
    80209f2c:	40c486b3          	sub	a3,s1,a2
    vma = alloc_vma(p, HEAP, start, sz, perm, 1, NULL);
    80209f30:	4801                	li	a6,0
    80209f32:	4785                	li	a5,1
    80209f34:	8752                	mv	a4,s4
    80209f36:	4595                	li	a1,5
    80209f38:	854e                	mv	a0,s3
    80209f3a:	00000097          	auipc	ra,0x0
    80209f3e:	c28080e7          	jalr	-984(ra) # 80209b62 <alloc_vma>
    80209f42:	892a                	mv	s2,a0
    return vma;
    80209f44:	b7f1                	j	80209f10 <alloc_addr_heap_vma+0x72>
      __debug_warn("[alloc_addr_heap_vma] addr %p illegal\n", addr);
    80209f46:	85a6                	mv	a1,s1
    80209f48:	00008517          	auipc	a0,0x8
    80209f4c:	18850513          	addi	a0,a0,392 # 802120d0 <digits+0x808>
    80209f50:	ffffd097          	auipc	ra,0xffffd
    80209f54:	354080e7          	jalr	852(ra) # 802072a4 <__debug_warn>
      return vma;
    80209f58:	bf65                	j	80209f10 <alloc_addr_heap_vma+0x72>
        __debug_warn("[alloc_addr_heap_vma] uvmdealloc fail\n");
    80209f5a:	00008517          	auipc	a0,0x8
    80209f5e:	19e50513          	addi	a0,a0,414 # 802120f8 <digits+0x830>
    80209f62:	ffffd097          	auipc	ra,0xffffd
    80209f66:	342080e7          	jalr	834(ra) # 802072a4 <__debug_warn>
        return vma;
    80209f6a:	b75d                	j	80209f10 <alloc_addr_heap_vma+0x72>
    if(uvmalloc(p->pagetable, vma->end, addr, perm) != 0)
    80209f6c:	86d2                	mv	a3,s4
    80209f6e:	8626                	mv	a2,s1
    80209f70:	0609b503          	ld	a0,96(s3)
    80209f74:	ffffe097          	auipc	ra,0xffffe
    80209f78:	470080e7          	jalr	1136(ra) # 802083e4 <uvmalloc>
    80209f7c:	e909                	bnez	a0,80209f8e <alloc_addr_heap_vma+0xf0>
    vma->end = addr;
    80209f7e:	00993c23          	sd	s1,24(s2)
    vma->sz = (vma->end - vma->addr);
    80209f82:	00893783          	ld	a5,8(s2)
    80209f86:	8c9d                	sub	s1,s1,a5
    80209f88:	00993823          	sd	s1,16(s2)
    return vma;
    80209f8c:	b751                	j	80209f10 <alloc_addr_heap_vma+0x72>
      __debug_warn("[alloc_addr_heap_vma] uvmalloc fail\n");
    80209f8e:	00008517          	auipc	a0,0x8
    80209f92:	19250513          	addi	a0,a0,402 # 80212120 <digits+0x858>
    80209f96:	ffffd097          	auipc	ra,0xffffd
    80209f9a:	30e080e7          	jalr	782(ra) # 802072a4 <__debug_warn>
      return vma;
    80209f9e:	bf8d                	j	80209f10 <alloc_addr_heap_vma+0x72>

0000000080209fa0 <alloc_sz_heap_vma>:

struct vma *alloc_sz_heap_vma(struct proc *p, uint64 sz, int perm)
{
    80209fa0:	7139                	addi	sp,sp,-64
    80209fa2:	fc06                	sd	ra,56(sp)
    80209fa4:	f822                	sd	s0,48(sp)
    80209fa6:	f426                	sd	s1,40(sp)
    80209fa8:	f04a                	sd	s2,32(sp)
    80209faa:	ec4e                	sd	s3,24(sp)
    80209fac:	e852                	sd	s4,16(sp)
    80209fae:	e456                	sd	s5,8(sp)
    80209fb0:	0080                	addi	s0,sp,64
    80209fb2:	8aaa                	mv	s5,a0
    80209fb4:	84ae                	mv	s1,a1
    80209fb6:	89b2                	mv	s3,a2
  struct vma *vma = type_locate_vma(p->vma, HEAP);
    80209fb8:	17053903          	ld	s2,368(a0)
    80209fbc:	4595                	li	a1,5
    80209fbe:	854a                	mv	a0,s2
    80209fc0:	00000097          	auipc	ra,0x0
    80209fc4:	d00080e7          	jalr	-768(ra) # 80209cc0 <type_locate_vma>
    80209fc8:	8a2a                	mv	s4,a0
  struct vma *lvma = type_locate_vma(p->vma, LOAD);
    80209fca:	4585                	li	a1,1
    80209fcc:	854a                	mv	a0,s2
    80209fce:	00000097          	auipc	ra,0x0
    80209fd2:	cf2080e7          	jalr	-782(ra) # 80209cc0 <type_locate_vma>
  if(vma == NULL)
    80209fd6:	060a0263          	beqz	s4,8020a03a <alloc_sz_heap_vma+0x9a>
    }
    vma = alloc_vma(p, HEAP, start, sz, perm, 1, NULL);
    return vma;
  }
  
  if(sz != 0)
    80209fda:	c4b1                	beqz	s1,8020a026 <alloc_sz_heap_vma+0x86>
  {
    if(vma->end + sz < lvma->end)
    80209fdc:	018a3583          	ld	a1,24(s4)
    80209fe0:	009587b3          	add	a5,a1,s1
    80209fe4:	6d18                	ld	a4,24(a0)
    80209fe6:	08e7e463          	bltu	a5,a4,8020a06e <alloc_sz_heap_vma+0xce>
    {
      __debug_warn("[alloc_sz_heap_vma] addr illegal\n");
      return NULL;
    }
    
    if(vma->end + sz > vma->end)
    80209fea:	0af5f663          	bgeu	a1,a5,8020a096 <alloc_sz_heap_vma+0xf6>
    {
      if(uvmalloc(p->pagetable, vma->end, PGROUNDUP(vma->end + sz), perm) != 0)
    80209fee:	6605                	lui	a2,0x1
    80209ff0:	167d                	addi	a2,a2,-1
    80209ff2:	97b2                	add	a5,a5,a2
    80209ff4:	86ce                	mv	a3,s3
    80209ff6:	767d                	lui	a2,0xfffff
    80209ff8:	8e7d                	and	a2,a2,a5
    80209ffa:	060ab503          	ld	a0,96(s5)
    80209ffe:	ffffe097          	auipc	ra,0xffffe
    8020a002:	3e6080e7          	jalr	998(ra) # 802083e4 <uvmalloc>
    8020a006:	ed35                	bnez	a0,8020a082 <alloc_sz_heap_vma+0xe2>
      {
        __debug_warn("[alloc_addr_heap_vma] uvmdealloc fail\n");
        return NULL;
      }
    }
    vma->end = PGROUNDUP(vma->end + sz);
    8020a008:	6585                	lui	a1,0x1
    8020a00a:	15fd                	addi	a1,a1,-1
    8020a00c:	94ae                	add	s1,s1,a1
    8020a00e:	018a3583          	ld	a1,24(s4)
    8020a012:	94ae                	add	s1,s1,a1
    8020a014:	77fd                	lui	a5,0xfffff
    8020a016:	8cfd                	and	s1,s1,a5
    8020a018:	009a3c23          	sd	s1,24(s4)
    vma->sz = vma->end - vma->addr;
    8020a01c:	008a3783          	ld	a5,8(s4)
    8020a020:	8c9d                	sub	s1,s1,a5
    8020a022:	009a3823          	sd	s1,16(s4)
  }
  return vma;
}
    8020a026:	8552                	mv	a0,s4
    8020a028:	70e2                	ld	ra,56(sp)
    8020a02a:	7442                	ld	s0,48(sp)
    8020a02c:	74a2                	ld	s1,40(sp)
    8020a02e:	7902                	ld	s2,32(sp)
    8020a030:	69e2                	ld	s3,24(sp)
    8020a032:	6a42                	ld	s4,16(sp)
    8020a034:	6aa2                	ld	s5,8(sp)
    8020a036:	6121                	addi	sp,sp,64
    8020a038:	8082                	ret
    uint64 start = lvma->end;
    8020a03a:	6d10                	ld	a2,24(a0)
    if(start + sz < start)
    8020a03c:	00c487b3          	add	a5,s1,a2
    8020a040:	00c7ee63          	bltu	a5,a2,8020a05c <alloc_sz_heap_vma+0xbc>
    vma = alloc_vma(p, HEAP, start, sz, perm, 1, NULL);
    8020a044:	4801                	li	a6,0
    8020a046:	4785                	li	a5,1
    8020a048:	874e                	mv	a4,s3
    8020a04a:	86a6                	mv	a3,s1
    8020a04c:	4595                	li	a1,5
    8020a04e:	8556                	mv	a0,s5
    8020a050:	00000097          	auipc	ra,0x0
    8020a054:	b12080e7          	jalr	-1262(ra) # 80209b62 <alloc_vma>
    8020a058:	8a2a                	mv	s4,a0
    return vma;
    8020a05a:	b7f1                	j	8020a026 <alloc_sz_heap_vma+0x86>
      __debug_warn("[alloc_sz_heap_vma] addr illegal\n");
    8020a05c:	00008517          	auipc	a0,0x8
    8020a060:	0ec50513          	addi	a0,a0,236 # 80212148 <digits+0x880>
    8020a064:	ffffd097          	auipc	ra,0xffffd
    8020a068:	240080e7          	jalr	576(ra) # 802072a4 <__debug_warn>
      return NULL;
    8020a06c:	bf6d                	j	8020a026 <alloc_sz_heap_vma+0x86>
      __debug_warn("[alloc_sz_heap_vma] addr illegal\n");
    8020a06e:	00008517          	auipc	a0,0x8
    8020a072:	0da50513          	addi	a0,a0,218 # 80212148 <digits+0x880>
    8020a076:	ffffd097          	auipc	ra,0xffffd
    8020a07a:	22e080e7          	jalr	558(ra) # 802072a4 <__debug_warn>
      return NULL;
    8020a07e:	4a01                	li	s4,0
    8020a080:	b75d                	j	8020a026 <alloc_sz_heap_vma+0x86>
        __debug_warn("[alloc_addr_heap_vma] uvmalloc fail\n");
    8020a082:	00008517          	auipc	a0,0x8
    8020a086:	09e50513          	addi	a0,a0,158 # 80212120 <digits+0x858>
    8020a08a:	ffffd097          	auipc	ra,0xffffd
    8020a08e:	21a080e7          	jalr	538(ra) # 802072a4 <__debug_warn>
        return NULL;
    8020a092:	4a01                	li	s4,0
    8020a094:	bf49                	j	8020a026 <alloc_sz_heap_vma+0x86>
      if(uvmdealloc(p->pagetable, PGROUNDDOWN(vma->end + sz), vma->end) != 0)
    8020a096:	862e                	mv	a2,a1
    8020a098:	75fd                	lui	a1,0xfffff
    8020a09a:	8dfd                	and	a1,a1,a5
    8020a09c:	060ab503          	ld	a0,96(s5)
    8020a0a0:	ffffe097          	auipc	ra,0xffffe
    8020a0a4:	300080e7          	jalr	768(ra) # 802083a0 <uvmdealloc>
    8020a0a8:	d125                	beqz	a0,8020a008 <alloc_sz_heap_vma+0x68>
        __debug_warn("[alloc_addr_heap_vma] uvmdealloc fail\n");
    8020a0aa:	00008517          	auipc	a0,0x8
    8020a0ae:	04e50513          	addi	a0,a0,78 # 802120f8 <digits+0x830>
    8020a0b2:	ffffd097          	auipc	ra,0xffffd
    8020a0b6:	1f2080e7          	jalr	498(ra) # 802072a4 <__debug_warn>
        return NULL;
    8020a0ba:	4a01                	li	s4,0
    8020a0bc:	b7ad                	j	8020a026 <alloc_sz_heap_vma+0x86>

000000008020a0be <alloc_load_vma>:

struct vma *alloc_load_vma(struct proc *p, uint64 addr, uint64 sz, int perm)
{
    8020a0be:	1141                	addi	sp,sp,-16
    8020a0c0:	e406                	sd	ra,8(sp)
    8020a0c2:	e022                	sd	s0,0(sp)
    8020a0c4:	0800                	addi	s0,sp,16
    8020a0c6:	8736                	mv	a4,a3
  return alloc_vma(p, LOAD, addr, sz, perm, 1, NULL);
    8020a0c8:	4801                	li	a6,0
    8020a0ca:	4785                	li	a5,1
    8020a0cc:	86b2                	mv	a3,a2
    8020a0ce:	862e                	mv	a2,a1
    8020a0d0:	4585                	li	a1,1
    8020a0d2:	00000097          	auipc	ra,0x0
    8020a0d6:	a90080e7          	jalr	-1392(ra) # 80209b62 <alloc_vma>
}
    8020a0da:	60a2                	ld	ra,8(sp)
    8020a0dc:	6402                	ld	s0,0(sp)
    8020a0de:	0141                	addi	sp,sp,16
    8020a0e0:	8082                	ret

000000008020a0e2 <free_vma_list>:

int free_vma_list(struct proc *p)
{
    8020a0e2:	715d                	addi	sp,sp,-80
    8020a0e4:	e486                	sd	ra,72(sp)
    8020a0e6:	e0a2                	sd	s0,64(sp)
    8020a0e8:	fc26                	sd	s1,56(sp)
    8020a0ea:	f84a                	sd	s2,48(sp)
    8020a0ec:	f44e                	sd	s3,40(sp)
    8020a0ee:	f052                	sd	s4,32(sp)
    8020a0f0:	ec56                	sd	s5,24(sp)
    8020a0f2:	e85a                	sd	s6,16(sp)
    8020a0f4:	e45e                	sd	s7,8(sp)
    8020a0f6:	0880                	addi	s0,sp,80
  struct vma *vma_head = p->vma;
    8020a0f8:	17053b83          	ld	s7,368(a0)
  if(vma_head == NULL)
    8020a0fc:	080b8263          	beqz	s7,8020a180 <free_vma_list+0x9e>
    8020a100:	8a2a                	mv	s4,a0
  {
    return 1;
  }
  struct vma *vma = vma_head->next;
    8020a102:	038bb983          	ld	s3,56(s7) # fffffffffffff038 <kernel_end+0xffffffff7f890038>
  
  while(vma != vma_head)
    8020a106:	073b8663          	beq	s7,s3,8020a172 <free_vma_list+0x90>
    for(a = vma->addr; a < vma->end; a += PGSIZE){
      if((pte = walk(p->pagetable, a, 0)) == 0)
        continue;
      if((*pte & PTE_V) == 0)
        continue;
      if(PTE_FLAGS(*pte) == PTE_V)
    8020a10a:	4b05                	li	s6,1
    for(a = vma->addr; a < vma->end; a += PGSIZE){
    8020a10c:	6a85                	lui	s5,0x1
    8020a10e:	a899                	j	8020a164 <free_vma_list+0x82>
        continue;
      uint64 pa = PTE2PA(*pte);
    8020a110:	8129                	srli	a0,a0,0xa
      //__debug_warn("[free single vma]free:%p\n",pa);
      freepage((void*)pa);
    8020a112:	0532                	slli	a0,a0,0xc
    8020a114:	ffffe097          	auipc	ra,0xffffe
    8020a118:	8c8080e7          	jalr	-1848(ra) # 802079dc <_freepage>
      //__debug_warn("[free vma list]free end\n");
      *pte = 0;
    8020a11c:	0004b023          	sd	zero,0(s1)
    for(a = vma->addr; a < vma->end; a += PGSIZE){
    8020a120:	9956                	add	s2,s2,s5
    8020a122:	0189b783          	ld	a5,24(s3)
    8020a126:	02f97563          	bgeu	s2,a5,8020a150 <free_vma_list+0x6e>
      if((pte = walk(p->pagetable, a, 0)) == 0)
    8020a12a:	4601                	li	a2,0
    8020a12c:	85ca                	mv	a1,s2
    8020a12e:	060a3503          	ld	a0,96(s4)
    8020a132:	ffffe097          	auipc	ra,0xffffe
    8020a136:	dfc080e7          	jalr	-516(ra) # 80207f2e <walk>
    8020a13a:	84aa                	mv	s1,a0
    8020a13c:	d175                	beqz	a0,8020a120 <free_vma_list+0x3e>
      if((*pte & PTE_V) == 0)
    8020a13e:	6108                	ld	a0,0(a0)
    8020a140:	00157793          	andi	a5,a0,1
    8020a144:	dff1                	beqz	a5,8020a120 <free_vma_list+0x3e>
      if(PTE_FLAGS(*pte) == PTE_V)
    8020a146:	3ff57793          	andi	a5,a0,1023
    8020a14a:	fd6793e3          	bne	a5,s6,8020a110 <free_vma_list+0x2e>
    8020a14e:	bfc9                	j	8020a120 <free_vma_list+0x3e>
    }
    vma = vma->next;
    8020a150:	0389b983          	ld	s3,56(s3)
    kfree(vma->prev);
    8020a154:	0309b503          	ld	a0,48(s3)
    8020a158:	ffffe097          	auipc	ra,0xffffe
    8020a15c:	cb6080e7          	jalr	-842(ra) # 80207e0e <kfree>
  while(vma != vma_head)
    8020a160:	013b8963          	beq	s7,s3,8020a172 <free_vma_list+0x90>
    for(a = vma->addr; a < vma->end; a += PGSIZE){
    8020a164:	0089b903          	ld	s2,8(s3)
    8020a168:	0189b783          	ld	a5,24(s3)
    8020a16c:	faf96fe3          	bltu	s2,a5,8020a12a <free_vma_list+0x48>
    8020a170:	b7c5                	j	8020a150 <free_vma_list+0x6e>
  }
  kfree(vma);
    8020a172:	854e                	mv	a0,s3
    8020a174:	ffffe097          	auipc	ra,0xffffe
    8020a178:	c9a080e7          	jalr	-870(ra) # 80207e0e <kfree>
  p->vma = NULL;
    8020a17c:	160a3823          	sd	zero,368(s4)
  return 1;
}
    8020a180:	4505                	li	a0,1
    8020a182:	60a6                	ld	ra,72(sp)
    8020a184:	6406                	ld	s0,64(sp)
    8020a186:	74e2                	ld	s1,56(sp)
    8020a188:	7942                	ld	s2,48(sp)
    8020a18a:	79a2                	ld	s3,40(sp)
    8020a18c:	7a02                	ld	s4,32(sp)
    8020a18e:	6ae2                	ld	s5,24(sp)
    8020a190:	6b42                	ld	s6,16(sp)
    8020a192:	6ba2                	ld	s7,8(sp)
    8020a194:	6161                	addi	sp,sp,80
    8020a196:	8082                	ret

000000008020a198 <vma_list_init>:
{
    8020a198:	1101                	addi	sp,sp,-32
    8020a19a:	ec06                	sd	ra,24(sp)
    8020a19c:	e822                	sd	s0,16(sp)
    8020a19e:	e426                	sd	s1,8(sp)
    8020a1a0:	e04a                	sd	s2,0(sp)
    8020a1a2:	1000                	addi	s0,sp,32
    8020a1a4:	892a                	mv	s2,a0
  if(p == NULL)
    8020a1a6:	cd3d                	beqz	a0,8020a224 <vma_list_init+0x8c>
  struct vma *vma = (struct vma*)kmalloc(sizeof(struct vma));
    8020a1a8:	04000513          	li	a0,64
    8020a1ac:	ffffe097          	auipc	ra,0xffffe
    8020a1b0:	a18080e7          	jalr	-1512(ra) # 80207bc4 <kmalloc>
    8020a1b4:	84aa                	mv	s1,a0
  if(vma == NULL)
    8020a1b6:	c149                	beqz	a0,8020a238 <vma_list_init+0xa0>
  vma->next = vma->prev = vma;
    8020a1b8:	f908                	sd	a0,48(a0)
    8020a1ba:	fd08                	sd	a0,56(a0)
  vma->type = NONE;
    8020a1bc:	00052023          	sw	zero,0(a0)
  p->vma = vma;
    8020a1c0:	16a93823          	sd	a0,368(s2)
  if(alloc_vma(p, TRAP, TRAPFRAME, PGSIZE, PTE_R | PTE_W , 0, (uint64)p->trapframe) == NULL)
    8020a1c4:	06893803          	ld	a6,104(s2)
    8020a1c8:	4781                	li	a5,0
    8020a1ca:	4719                	li	a4,6
    8020a1cc:	6685                	lui	a3,0x1
    8020a1ce:	7ffff637          	lui	a2,0x7ffff
    8020a1d2:	45a1                	li	a1,8
    8020a1d4:	854a                	mv	a0,s2
    8020a1d6:	00000097          	auipc	ra,0x0
    8020a1da:	98c080e7          	jalr	-1652(ra) # 80209b62 <alloc_vma>
    8020a1de:	c535                	beqz	a0,8020a24a <vma_list_init+0xb2>
  if(alloc_vma(p, STACK, PGROUNDDOWN(USER_STACK_BOTTOM - 35 * PGSIZE), 35 * PGSIZE, PTE_R|PTE_W|PTE_U, 1, NULL) == NULL)
    8020a1e0:	4801                	li	a6,0
    8020a1e2:	4785                	li	a5,1
    8020a1e4:	4759                	li	a4,22
    8020a1e6:	000236b7          	lui	a3,0x23
    8020a1ea:	7ffdb637          	lui	a2,0x7ffdb
    8020a1ee:	459d                	li	a1,7
    8020a1f0:	854a                	mv	a0,s2
    8020a1f2:	00000097          	auipc	ra,0x0
    8020a1f6:	970080e7          	jalr	-1680(ra) # 80209b62 <alloc_vma>
    8020a1fa:	c53d                	beqz	a0,8020a268 <vma_list_init+0xd0>
  if(alloc_mmap_vma(p, 0, USER_MMAP_START, 0, 0, 0, 0) == NULL)
    8020a1fc:	4801                	li	a6,0
    8020a1fe:	4781                	li	a5,0
    8020a200:	4701                	li	a4,0
    8020a202:	4681                	li	a3,0
    8020a204:	6fffe637          	lui	a2,0x6fffe
    8020a208:	4581                	li	a1,0
    8020a20a:	854a                	mv	a0,s2
    8020a20c:	00000097          	auipc	ra,0x0
    8020a210:	b86080e7          	jalr	-1146(ra) # 80209d92 <alloc_mmap_vma>
    8020a214:	c13d                	beqz	a0,8020a27a <vma_list_init+0xe2>
}
    8020a216:	8526                	mv	a0,s1
    8020a218:	60e2                	ld	ra,24(sp)
    8020a21a:	6442                	ld	s0,16(sp)
    8020a21c:	64a2                	ld	s1,8(sp)
    8020a21e:	6902                	ld	s2,0(sp)
    8020a220:	6105                	addi	sp,sp,32
    8020a222:	8082                	ret
    __debug_warn("[vma_list_init] proc is NULL\n");
    8020a224:	00008517          	auipc	a0,0x8
    8020a228:	f4c50513          	addi	a0,a0,-180 # 80212170 <digits+0x8a8>
    8020a22c:	ffffd097          	auipc	ra,0xffffd
    8020a230:	078080e7          	jalr	120(ra) # 802072a4 <__debug_warn>
    return NULL;
    8020a234:	84ca                	mv	s1,s2
    8020a236:	b7c5                	j	8020a216 <vma_list_init+0x7e>
    __debug_warn("[vma_list_init] vma kmalloc failed\n");
    8020a238:	00008517          	auipc	a0,0x8
    8020a23c:	f5850513          	addi	a0,a0,-168 # 80212190 <digits+0x8c8>
    8020a240:	ffffd097          	auipc	ra,0xffffd
    8020a244:	064080e7          	jalr	100(ra) # 802072a4 <__debug_warn>
    return NULL;
    8020a248:	b7f9                	j	8020a216 <vma_list_init+0x7e>
    __debug_warn("[vma_list_init] TRAPFRAME vma init fail\n");
    8020a24a:	00008517          	auipc	a0,0x8
    8020a24e:	f6e50513          	addi	a0,a0,-146 # 802121b8 <digits+0x8f0>
    8020a252:	ffffd097          	auipc	ra,0xffffd
    8020a256:	052080e7          	jalr	82(ra) # 802072a4 <__debug_warn>
  free_vma_list(p);
    8020a25a:	854a                	mv	a0,s2
    8020a25c:	00000097          	auipc	ra,0x0
    8020a260:	e86080e7          	jalr	-378(ra) # 8020a0e2 <free_vma_list>
  return NULL;
    8020a264:	4481                	li	s1,0
    8020a266:	bf45                	j	8020a216 <vma_list_init+0x7e>
    __debug_warn("[vma_list_init] stack vma init fail\n");
    8020a268:	00008517          	auipc	a0,0x8
    8020a26c:	f8050513          	addi	a0,a0,-128 # 802121e8 <digits+0x920>
    8020a270:	ffffd097          	auipc	ra,0xffffd
    8020a274:	034080e7          	jalr	52(ra) # 802072a4 <__debug_warn>
    goto bad;
    8020a278:	b7cd                	j	8020a25a <vma_list_init+0xc2>
    __debug_warn("[vma_list_init] mmap vma init fail\n");
    8020a27a:	00008517          	auipc	a0,0x8
    8020a27e:	f9650513          	addi	a0,a0,-106 # 80212210 <digits+0x948>
    8020a282:	ffffd097          	auipc	ra,0xffffd
    8020a286:	022080e7          	jalr	34(ra) # 802072a4 <__debug_warn>
    goto bad;
    8020a28a:	bfc1                	j	8020a25a <vma_list_init+0xc2>

000000008020a28c <addr_sz_locate_vma>:

struct vma *addr_sz_locate_vma(struct vma*head, uint64 addr, uint64 sz)
{
    8020a28c:	1101                	addi	sp,sp,-32
    8020a28e:	ec06                	sd	ra,24(sp)
    8020a290:	e822                	sd	s0,16(sp)
    8020a292:	e426                	sd	s1,8(sp)
    8020a294:	1000                	addi	s0,sp,32
    8020a296:	84aa                	mv	s1,a0
  if(head == NULL)
    8020a298:	c511                	beqz	a0,8020a2a4 <addr_sz_locate_vma+0x18>
  {
    __debug_warn("[addr_sz_locate_vma] head is nil\n");
    return NULL;
  }
  struct vma *vma = head->next;
    8020a29a:	7d08                	ld	a0,56(a0)
  while(vma != head)
    8020a29c:	02a49163          	bne	s1,a0,8020a2be <addr_sz_locate_vma+0x32>
    {
      return vma;
    }
    vma = vma->next;
  }
  return NULL;
    8020a2a0:	4501                	li	a0,0
    8020a2a2:	a035                	j	8020a2ce <addr_sz_locate_vma+0x42>
    __debug_warn("[addr_sz_locate_vma] head is nil\n");
    8020a2a4:	00008517          	auipc	a0,0x8
    8020a2a8:	f9450513          	addi	a0,a0,-108 # 80212238 <digits+0x970>
    8020a2ac:	ffffd097          	auipc	ra,0xffffd
    8020a2b0:	ff8080e7          	jalr	-8(ra) # 802072a4 <__debug_warn>
    return NULL;
    8020a2b4:	8526                	mv	a0,s1
    8020a2b6:	a821                	j	8020a2ce <addr_sz_locate_vma+0x42>
    vma = vma->next;
    8020a2b8:	7d08                	ld	a0,56(a0)
  while(vma != head)
    8020a2ba:	00a48963          	beq	s1,a0,8020a2cc <addr_sz_locate_vma+0x40>
    if(vma->addr == addr && vma->sz == sz)
    8020a2be:	651c                	ld	a5,8(a0)
    8020a2c0:	feb79ce3          	bne	a5,a1,8020a2b8 <addr_sz_locate_vma+0x2c>
    8020a2c4:	691c                	ld	a5,16(a0)
    8020a2c6:	fec799e3          	bne	a5,a2,8020a2b8 <addr_sz_locate_vma+0x2c>
    8020a2ca:	a011                	j	8020a2ce <addr_sz_locate_vma+0x42>
  return NULL;
    8020a2cc:	4501                	li	a0,0
}
    8020a2ce:	60e2                	ld	ra,24(sp)
    8020a2d0:	6442                	ld	s0,16(sp)
    8020a2d2:	64a2                	ld	s1,8(sp)
    8020a2d4:	6105                	addi	sp,sp,32
    8020a2d6:	8082                	ret

000000008020a2d8 <free_vma>:

int free_vma(struct proc *p, struct vma *del)
{
    8020a2d8:	1101                	addi	sp,sp,-32
    8020a2da:	ec06                	sd	ra,24(sp)
    8020a2dc:	e822                	sd	s0,16(sp)
    8020a2de:	e426                	sd	s1,8(sp)
    8020a2e0:	1000                	addi	s0,sp,32
  if(del == NULL)
    8020a2e2:	cd9d                	beqz	a1,8020a320 <free_vma+0x48>
    8020a2e4:	84ae                	mv	s1,a1
  {
    __debug_warn("[free_vma] del is nil\n");
    return 0;
  }
  if(del->prev == NULL || del->next == NULL)
    8020a2e6:	799c                	ld	a5,48(a1)
    8020a2e8:	c7b1                	beqz	a5,8020a334 <free_vma+0x5c>
    8020a2ea:	7d98                	ld	a4,56(a1)
    8020a2ec:	c721                	beqz	a4,8020a334 <free_vma+0x5c>
    return 0;
  }
  
  struct vma *prev = del->prev;
  struct vma *next = del->next;
  prev->next = next;
    8020a2ee:	ff98                	sd	a4,56(a5)
  next->prev = prev;
    8020a2f0:	fb1c                	sd	a5,48(a4)
  del->next = del->prev = NULL;
    8020a2f2:	0205b823          	sd	zero,48(a1) # fffffffffffff030 <kernel_end+0xffffffff7f890030>
    8020a2f6:	0205bc23          	sd	zero,56(a1)
  if(uvmdealloc(p->pagetable, del->addr, del->end) != 0)
    8020a2fa:	6d90                	ld	a2,24(a1)
    8020a2fc:	658c                	ld	a1,8(a1)
    8020a2fe:	7128                	ld	a0,96(a0)
    8020a300:	ffffe097          	auipc	ra,0xffffe
    8020a304:	0a0080e7          	jalr	160(ra) # 802083a0 <uvmdealloc>
    8020a308:	e121                	bnez	a0,8020a348 <free_vma+0x70>
  {
    __debug_warn("[free_vma] uvmdealloc fail\n");
    return 0;
  }
  kfree(del);
    8020a30a:	8526                	mv	a0,s1
    8020a30c:	ffffe097          	auipc	ra,0xffffe
    8020a310:	b02080e7          	jalr	-1278(ra) # 80207e0e <kfree>
  return 1;
    8020a314:	4505                	li	a0,1
}
    8020a316:	60e2                	ld	ra,24(sp)
    8020a318:	6442                	ld	s0,16(sp)
    8020a31a:	64a2                	ld	s1,8(sp)
    8020a31c:	6105                	addi	sp,sp,32
    8020a31e:	8082                	ret
    __debug_warn("[free_vma] del is nil\n");
    8020a320:	00008517          	auipc	a0,0x8
    8020a324:	f4050513          	addi	a0,a0,-192 # 80212260 <digits+0x998>
    8020a328:	ffffd097          	auipc	ra,0xffffd
    8020a32c:	f7c080e7          	jalr	-132(ra) # 802072a4 <__debug_warn>
    return 0;
    8020a330:	4501                	li	a0,0
    8020a332:	b7d5                	j	8020a316 <free_vma+0x3e>
    __debug_warn("[free_vma] del is illegal\n");
    8020a334:	00008517          	auipc	a0,0x8
    8020a338:	f4450513          	addi	a0,a0,-188 # 80212278 <digits+0x9b0>
    8020a33c:	ffffd097          	auipc	ra,0xffffd
    8020a340:	f68080e7          	jalr	-152(ra) # 802072a4 <__debug_warn>
    return 0;
    8020a344:	4501                	li	a0,0
    8020a346:	bfc1                	j	8020a316 <free_vma+0x3e>
    __debug_warn("[free_vma] uvmdealloc fail\n");
    8020a348:	00008517          	auipc	a0,0x8
    8020a34c:	f5050513          	addi	a0,a0,-176 # 80212298 <digits+0x9d0>
    8020a350:	ffffd097          	auipc	ra,0xffffd
    8020a354:	f54080e7          	jalr	-172(ra) # 802072a4 <__debug_warn>
    return 0;
    8020a358:	4501                	li	a0,0
    8020a35a:	bf75                	j	8020a316 <free_vma+0x3e>

000000008020a35c <vma_copy>:

struct vma* vma_copy(struct proc *np, struct vma *head)
{
    8020a35c:	7139                	addi	sp,sp,-64
    8020a35e:	fc06                	sd	ra,56(sp)
    8020a360:	f822                	sd	s0,48(sp)
    8020a362:	f426                	sd	s1,40(sp)
    8020a364:	f04a                	sd	s2,32(sp)
    8020a366:	ec4e                	sd	s3,24(sp)
    8020a368:	e852                	sd	s4,16(sp)
    8020a36a:	e456                	sd	s5,8(sp)
    8020a36c:	e05a                	sd	s6,0(sp)
    8020a36e:	0080                	addi	s0,sp,64
    8020a370:	8b2a                	mv	s6,a0
    8020a372:	8aae                	mv	s5,a1
  struct vma *nvma_head = (struct vma *)kmalloc(sizeof(struct vma));
    8020a374:	04000513          	li	a0,64
    8020a378:	ffffe097          	auipc	ra,0xffffe
    8020a37c:	84c080e7          	jalr	-1972(ra) # 80207bc4 <kmalloc>
  if(nvma_head == NULL)
    8020a380:	cd11                	beqz	a0,8020a39c <vma_copy+0x40>
    8020a382:	89aa                	mv	s3,a0
  {
    __debug_warn("[vma_copy] nvma_head kmalloc failed\n");
    goto err;
  }
  nvma_head->next = nvma_head->prev = nvma_head;
    8020a384:	f908                	sd	a0,48(a0)
    8020a386:	fd08                	sd	a0,56(a0)
  nvma_head->type = NONE;
    8020a388:	00052023          	sw	zero,0(a0)
  np->vma = nvma_head;
    8020a38c:	16ab3823          	sd	a0,368(s6) # 1170 <_entry-0x801fee90>
  struct vma *pvma = head->next;
    8020a390:	038ab903          	ld	s2,56(s5) # 1038 <_entry-0x801fefc8>
  while(pvma != head)
    8020a394:	0d2a8163          	beq	s5,s2,8020a456 <vma_copy+0xfa>
  {
    struct vma *nvma = NULL;
    if(pvma->type == TRAP)
    8020a398:	4a21                	li	s4,8
    8020a39a:	a895                	j	8020a40e <vma_copy+0xb2>
    __debug_warn("[vma_copy] nvma_head kmalloc failed\n");
    8020a39c:	00008517          	auipc	a0,0x8
    8020a3a0:	f1c50513          	addi	a0,a0,-228 # 802122b8 <digits+0x9f0>
    8020a3a4:	ffffd097          	auipc	ra,0xffffd
    8020a3a8:	f00080e7          	jalr	-256(ra) # 802072a4 <__debug_warn>
    goto err;
    8020a3ac:	a069                	j	8020a436 <vma_copy+0xda>
    {
      if((nvma = alloc_vma(np, TRAP, TRAPFRAME, PGSIZE, PTE_R | PTE_W , 0, (uint64)np->trapframe)) == NULL)
    8020a3ae:	068b3803          	ld	a6,104(s6)
    8020a3b2:	4781                	li	a5,0
    8020a3b4:	4719                	li	a4,6
    8020a3b6:	6685                	lui	a3,0x1
    8020a3b8:	7ffff637          	lui	a2,0x7ffff
    8020a3bc:	85d2                	mv	a1,s4
    8020a3be:	855a                	mv	a0,s6
    8020a3c0:	fffff097          	auipc	ra,0xfffff
    8020a3c4:	7a2080e7          	jalr	1954(ra) # 80209b62 <alloc_vma>
    8020a3c8:	ed1d                	bnez	a0,8020a406 <vma_copy+0xaa>
      {
        __debug_warn("[vma_list_init] TRAPFRAME vma init fail\n");
    8020a3ca:	00008517          	auipc	a0,0x8
    8020a3ce:	dee50513          	addi	a0,a0,-530 # 802121b8 <digits+0x8f0>
    8020a3d2:	ffffd097          	auipc	ra,0xffffd
    8020a3d6:	ed2080e7          	jalr	-302(ra) # 802072a4 <__debug_warn>
        goto err;
    8020a3da:	a8b1                	j	8020a436 <vma_copy+0xda>
      if(nvma == NULL)
      {
        __debug_warn("[vma_copy] nvma kmalloc failed\n");
        goto err;
      }
      memmove(nvma, pvma, sizeof(struct vma));
    8020a3dc:	04000613          	li	a2,64
    8020a3e0:	85ca                	mv	a1,s2
    8020a3e2:	ffff7097          	auipc	ra,0xffff7
    8020a3e6:	9f2080e7          	jalr	-1550(ra) # 80200dd4 <memmove>
      nvma->next = nvma->prev = NULL;
    8020a3ea:	0204b823          	sd	zero,48(s1)
    8020a3ee:	0204bc23          	sd	zero,56(s1)
      nvma->prev = nvma_head->prev;
    8020a3f2:	0309b783          	ld	a5,48(s3)
    8020a3f6:	f89c                	sd	a5,48(s1)
      nvma->next = nvma_head;
    8020a3f8:	0334bc23          	sd	s3,56(s1)
      nvma_head->prev->next = nvma;
    8020a3fc:	0309b783          	ld	a5,48(s3)
    8020a400:	ff84                	sd	s1,56(a5)
      nvma_head->prev = nvma;
    8020a402:	0299b823          	sd	s1,48(s3)
    }
    pvma = pvma->next;
    8020a406:	03893903          	ld	s2,56(s2)
  while(pvma != head)
    8020a40a:	052a8663          	beq	s5,s2,8020a456 <vma_copy+0xfa>
    if(pvma->type == TRAP)
    8020a40e:	00092783          	lw	a5,0(s2)
    8020a412:	f9478ee3          	beq	a5,s4,8020a3ae <vma_copy+0x52>
      nvma = (struct vma *)kmalloc(sizeof(struct vma));
    8020a416:	04000513          	li	a0,64
    8020a41a:	ffffd097          	auipc	ra,0xffffd
    8020a41e:	7aa080e7          	jalr	1962(ra) # 80207bc4 <kmalloc>
    8020a422:	84aa                	mv	s1,a0
      if(nvma == NULL)
    8020a424:	fd45                	bnez	a0,8020a3dc <vma_copy+0x80>
        __debug_warn("[vma_copy] nvma kmalloc failed\n");
    8020a426:	00008517          	auipc	a0,0x8
    8020a42a:	eba50513          	addi	a0,a0,-326 # 802122e0 <digits+0xa18>
    8020a42e:	ffffd097          	auipc	ra,0xffffd
    8020a432:	e76080e7          	jalr	-394(ra) # 802072a4 <__debug_warn>
  }
  
  return nvma_head;
  
err:
  np->vma = NULL;
    8020a436:	160b3823          	sd	zero,368(s6)
  __debug_warn("[vm_copy] failed\n");
    8020a43a:	00008517          	auipc	a0,0x8
    8020a43e:	ec650513          	addi	a0,a0,-314 # 80212300 <digits+0xa38>
    8020a442:	ffffd097          	auipc	ra,0xffffd
    8020a446:	e62080e7          	jalr	-414(ra) # 802072a4 <__debug_warn>
  free_vma_list(np);
    8020a44a:	855a                	mv	a0,s6
    8020a44c:	00000097          	auipc	ra,0x0
    8020a450:	c96080e7          	jalr	-874(ra) # 8020a0e2 <free_vma_list>
  return NULL;
    8020a454:	4981                	li	s3,0
}
    8020a456:	854e                	mv	a0,s3
    8020a458:	70e2                	ld	ra,56(sp)
    8020a45a:	7442                	ld	s0,48(sp)
    8020a45c:	74a2                	ld	s1,40(sp)
    8020a45e:	7902                	ld	s2,32(sp)
    8020a460:	69e2                	ld	s3,24(sp)
    8020a462:	6a42                	ld	s4,16(sp)
    8020a464:	6aa2                	ld	s5,8(sp)
    8020a466:	6b02                	ld	s6,0(sp)
    8020a468:	6121                	addi	sp,sp,64
    8020a46a:	8082                	ret

000000008020a46c <vma_deep_mapping>:

int vma_deep_mapping(pagetable_t old, pagetable_t new, const struct vma *vma)
{
    8020a46c:	715d                	addi	sp,sp,-80
    8020a46e:	e486                	sd	ra,72(sp)
    8020a470:	e0a2                	sd	s0,64(sp)
    8020a472:	fc26                	sd	s1,56(sp)
    8020a474:	f84a                	sd	s2,48(sp)
    8020a476:	f44e                	sd	s3,40(sp)
    8020a478:	f052                	sd	s4,32(sp)
    8020a47a:	ec56                	sd	s5,24(sp)
    8020a47c:	e85a                	sd	s6,16(sp)
    8020a47e:	e45e                	sd	s7,8(sp)
    8020a480:	0880                	addi	s0,sp,80
    8020a482:	8b2a                	mv	s6,a0
    8020a484:	8aae                	mv	s5,a1
    8020a486:	8a32                	mv	s4,a2
  uint64 start = vma->addr;
    8020a488:	00863983          	ld	s3,8(a2) # 7ffff008 <_entry-0x200ff8>
  pte_t *pte;
  uint64 pa;
  char *mem;
  long flags;
  
  while(start < vma->end)
    8020a48c:	6e1c                	ld	a5,24(a2)
    8020a48e:	06f9f063          	bgeu	s3,a5,8020a4ee <vma_deep_mapping+0x82>
  {
    if((pte = walk(old, start, 0)) == NULL)
    8020a492:	4601                	li	a2,0
    8020a494:	85ce                	mv	a1,s3
    8020a496:	855a                	mv	a0,s6
    8020a498:	ffffe097          	auipc	ra,0xffffe
    8020a49c:	a96080e7          	jalr	-1386(ra) # 80207f2e <walk>
    8020a4a0:	c125                	beqz	a0,8020a500 <vma_deep_mapping+0x94>
    {
      panic("uvmcopy: pte should exist");
    }
    if((*pte & PTE_V) == 0)
    8020a4a2:	6118                	ld	a4,0(a0)
    8020a4a4:	00177793          	andi	a5,a4,1
    8020a4a8:	c7a5                	beqz	a5,8020a510 <vma_deep_mapping+0xa4>
    {
      panic("uvmcopy: page not present");
    }
    pa = PTE2PA(*pte);
    8020a4aa:	00a75593          	srli	a1,a4,0xa
    8020a4ae:	00c59b93          	slli	s7,a1,0xc
    flags = PTE_FLAGS(*pte);
    8020a4b2:	3ff77493          	andi	s1,a4,1023

    mem = (char *)allocpage();
    8020a4b6:	ffffd097          	auipc	ra,0xffffd
    8020a4ba:	486080e7          	jalr	1158(ra) # 8020793c <_allocpage>
    8020a4be:	892a                	mv	s2,a0

    if(mem == NULL)
    8020a4c0:	c149                	beqz	a0,8020a542 <vma_deep_mapping+0xd6>
    {
      goto err;
    }

    memmove(mem, (char *)pa, PGSIZE);
    8020a4c2:	6605                	lui	a2,0x1
    8020a4c4:	85de                	mv	a1,s7
    8020a4c6:	ffff7097          	auipc	ra,0xffff7
    8020a4ca:	90e080e7          	jalr	-1778(ra) # 80200dd4 <memmove>

    if(mappages(new, start, PGSIZE, (uint64)mem, flags) != 0)
    8020a4ce:	8726                	mv	a4,s1
    8020a4d0:	86ca                	mv	a3,s2
    8020a4d2:	6605                	lui	a2,0x1
    8020a4d4:	85ce                	mv	a1,s3
    8020a4d6:	8556                	mv	a0,s5
    8020a4d8:	ffffe097          	auipc	ra,0xffffe
    8020a4dc:	b06080e7          	jalr	-1274(ra) # 80207fde <mappages>
    8020a4e0:	e121                	bnez	a0,8020a520 <vma_deep_mapping+0xb4>
    {
      __debug_warn("[vma_deep_mapping] start = %p, end = %p\n", vma->addr, vma->end);
      freepage(mem);
      goto err;
    }
    start += PGSIZE;
    8020a4e2:	6785                	lui	a5,0x1
    8020a4e4:	99be                	add	s3,s3,a5
  while(start < vma->end)
    8020a4e6:	018a3783          	ld	a5,24(s4)
    8020a4ea:	faf9e4e3          	bltu	s3,a5,8020a492 <vma_deep_mapping+0x26>
  }
  pa = walkaddr(new, vma->addr);
    8020a4ee:	008a3583          	ld	a1,8(s4)
    8020a4f2:	8556                	mv	a0,s5
    8020a4f4:	ffffe097          	auipc	ra,0xffffe
    8020a4f8:	d68080e7          	jalr	-664(ra) # 8020825c <walkaddr>
  return 0;
    8020a4fc:	4501                	li	a0,0
    8020a4fe:	a8b1                	j	8020a55a <vma_deep_mapping+0xee>
      panic("uvmcopy: pte should exist");
    8020a500:	00008517          	auipc	a0,0x8
    8020a504:	e1850513          	addi	a0,a0,-488 # 80212318 <digits+0xa50>
    8020a508:	ffffd097          	auipc	ra,0xffffd
    8020a50c:	9c6080e7          	jalr	-1594(ra) # 80206ece <panic>
      panic("uvmcopy: page not present");
    8020a510:	00008517          	auipc	a0,0x8
    8020a514:	e2850513          	addi	a0,a0,-472 # 80212338 <digits+0xa70>
    8020a518:	ffffd097          	auipc	ra,0xffffd
    8020a51c:	9b6080e7          	jalr	-1610(ra) # 80206ece <panic>
      __debug_warn("[vma_deep_mapping] start = %p, end = %p\n", vma->addr, vma->end);
    8020a520:	018a3603          	ld	a2,24(s4)
    8020a524:	008a3583          	ld	a1,8(s4)
    8020a528:	00008517          	auipc	a0,0x8
    8020a52c:	e3050513          	addi	a0,a0,-464 # 80212358 <digits+0xa90>
    8020a530:	ffffd097          	auipc	ra,0xffffd
    8020a534:	d74080e7          	jalr	-652(ra) # 802072a4 <__debug_warn>
      freepage(mem);
    8020a538:	854a                	mv	a0,s2
    8020a53a:	ffffd097          	auipc	ra,0xffffd
    8020a53e:	4a2080e7          	jalr	1186(ra) # 802079dc <_freepage>
  
err:
  vmunmap(new, vma->addr, (start - vma->addr) / PGSIZE, 1);
    8020a542:	008a3583          	ld	a1,8(s4)
    8020a546:	40b98633          	sub	a2,s3,a1
    8020a54a:	4685                	li	a3,1
    8020a54c:	8231                	srli	a2,a2,0xc
    8020a54e:	8556                	mv	a0,s5
    8020a550:	ffffe097          	auipc	ra,0xffffe
    8020a554:	c48080e7          	jalr	-952(ra) # 80208198 <vmunmap>
  return -1;
    8020a558:	557d                	li	a0,-1
}
    8020a55a:	60a6                	ld	ra,72(sp)
    8020a55c:	6406                	ld	s0,64(sp)
    8020a55e:	74e2                	ld	s1,56(sp)
    8020a560:	7942                	ld	s2,48(sp)
    8020a562:	79a2                	ld	s3,40(sp)
    8020a564:	7a02                	ld	s4,32(sp)
    8020a566:	6ae2                	ld	s5,24(sp)
    8020a568:	6b42                	ld	s6,16(sp)
    8020a56a:	6ba2                	ld	s7,8(sp)
    8020a56c:	6161                	addi	sp,sp,80
    8020a56e:	8082                	ret

000000008020a570 <vma_shallow_mapping>:

int vma_shallow_mapping(pagetable_t old, pagetable_t new, const struct vma *vma)
{
    8020a570:	7179                	addi	sp,sp,-48
    8020a572:	f406                	sd	ra,40(sp)
    8020a574:	f022                	sd	s0,32(sp)
    8020a576:	ec26                	sd	s1,24(sp)
    8020a578:	e84a                	sd	s2,16(sp)
    8020a57a:	e44e                	sd	s3,8(sp)
    8020a57c:	e052                	sd	s4,0(sp)
    8020a57e:	1800                	addi	s0,sp,48
    8020a580:	8a2a                	mv	s4,a0
    8020a582:	89ae                	mv	s3,a1
    8020a584:	8932                	mv	s2,a2
  uint64 start = vma->addr;
    8020a586:	6604                	ld	s1,8(a2)
  uint64 pa;
  pte_t *pte;
  long flags;

  while(start < vma->end)
    8020a588:	6e1c                	ld	a5,24(a2)
    8020a58a:	08f4f663          	bgeu	s1,a5,8020a616 <vma_shallow_mapping+0xa6>
  {
    if((pte = walk(old, start, 0)) == NULL)
    8020a58e:	4601                	li	a2,0
    8020a590:	85a6                	mv	a1,s1
    8020a592:	8552                	mv	a0,s4
    8020a594:	ffffe097          	auipc	ra,0xffffe
    8020a598:	99a080e7          	jalr	-1638(ra) # 80207f2e <walk>
    8020a59c:	c90d                	beqz	a0,8020a5ce <vma_shallow_mapping+0x5e>
    {
      panic("uvmcopy: pte should exist");
    }
    if((*pte & PTE_V) == 0)
    8020a59e:	6118                	ld	a4,0(a0)
    8020a5a0:	00177793          	andi	a5,a4,1
    8020a5a4:	cf8d                	beqz	a5,8020a5de <vma_shallow_mapping+0x6e>
    {
      panic("uvmcopy: page not present");
    }
    pa = PTE2PA(*pte);
    8020a5a6:	00a75693          	srli	a3,a4,0xa
    flags = PTE_FLAGS(*pte);

    if(mappages(new, start, PGSIZE, pa, flags) != 0)
    8020a5aa:	3ff77713          	andi	a4,a4,1023
    8020a5ae:	06b2                	slli	a3,a3,0xc
    8020a5b0:	6605                	lui	a2,0x1
    8020a5b2:	85a6                	mv	a1,s1
    8020a5b4:	854e                	mv	a0,s3
    8020a5b6:	ffffe097          	auipc	ra,0xffffe
    8020a5ba:	a28080e7          	jalr	-1496(ra) # 80207fde <mappages>
    8020a5be:	e905                	bnez	a0,8020a5ee <vma_shallow_mapping+0x7e>
    {
      goto err;
    }
    start +=PGSIZE;
    8020a5c0:	6785                	lui	a5,0x1
    8020a5c2:	94be                	add	s1,s1,a5
  while(start < vma->end)
    8020a5c4:	01893783          	ld	a5,24(s2)
    8020a5c8:	fcf4e3e3          	bltu	s1,a5,8020a58e <vma_shallow_mapping+0x1e>
    8020a5cc:	a82d                	j	8020a606 <vma_shallow_mapping+0x96>
      panic("uvmcopy: pte should exist");
    8020a5ce:	00008517          	auipc	a0,0x8
    8020a5d2:	d4a50513          	addi	a0,a0,-694 # 80212318 <digits+0xa50>
    8020a5d6:	ffffd097          	auipc	ra,0xffffd
    8020a5da:	8f8080e7          	jalr	-1800(ra) # 80206ece <panic>
      panic("uvmcopy: page not present");
    8020a5de:	00008517          	auipc	a0,0x8
    8020a5e2:	d5a50513          	addi	a0,a0,-678 # 80212338 <digits+0xa70>
    8020a5e6:	ffffd097          	auipc	ra,0xffffd
    8020a5ea:	8e8080e7          	jalr	-1816(ra) # 80206ece <panic>
  }
  return 0;

err:
  vmunmap(new, vma->addr, (start - vma->addr) / PGSIZE, 1);
    8020a5ee:	00893583          	ld	a1,8(s2)
    8020a5f2:	40b48633          	sub	a2,s1,a1
    8020a5f6:	4685                	li	a3,1
    8020a5f8:	8231                	srli	a2,a2,0xc
    8020a5fa:	854e                	mv	a0,s3
    8020a5fc:	ffffe097          	auipc	ra,0xffffe
    8020a600:	b9c080e7          	jalr	-1124(ra) # 80208198 <vmunmap>
  return -1;
    8020a604:	557d                	li	a0,-1
}
    8020a606:	70a2                	ld	ra,40(sp)
    8020a608:	7402                	ld	s0,32(sp)
    8020a60a:	64e2                	ld	s1,24(sp)
    8020a60c:	6942                	ld	s2,16(sp)
    8020a60e:	69a2                	ld	s3,8(sp)
    8020a610:	6a02                	ld	s4,0(sp)
    8020a612:	6145                	addi	sp,sp,48
    8020a614:	8082                	ret
  return 0;
    8020a616:	4501                	li	a0,0
    8020a618:	b7fd                	j	8020a606 <vma_shallow_mapping+0x96>

000000008020a61a <growproc>:

// Grow or shrink user memory by n bytes.
// Return 0 on success, -1 on failure.
uint64
growproc(int n)
{
    8020a61a:	1101                	addi	sp,sp,-32
    8020a61c:	ec06                	sd	ra,24(sp)
    8020a61e:	e822                	sd	s0,16(sp)
    8020a620:	e426                	sd	s1,8(sp)
    8020a622:	1000                	addi	s0,sp,32
    8020a624:	84aa                	mv	s1,a0
  struct proc *p = myproc();
    8020a626:	fffff097          	auipc	ra,0xfffff
    8020a62a:	504080e7          	jalr	1284(ra) # 80209b2a <myproc>
  //printf("[growproc]proc name:%s\n",p->name);
  //printf("[growproc]want grow to %p\n",n);
  struct vma* vma = alloc_addr_heap_vma(p, n, PTE_R|PTE_W|PTE_U);
    8020a62e:	4659                	li	a2,22
    8020a630:	85a6                	mv	a1,s1
    8020a632:	00000097          	auipc	ra,0x0
    8020a636:	86c080e7          	jalr	-1940(ra) # 80209e9e <alloc_addr_heap_vma>
  if(vma == NULL){
    8020a63a:	c519                	beqz	a0,8020a648 <growproc+0x2e>
    __debug_warn("[growproc]alloc heap not found\n");
    return 0;
  }
  //printf("[growproc]actually grow to %p\n",vma->end);
  return vma->end;
    8020a63c:	6d08                	ld	a0,24(a0)
}
    8020a63e:	60e2                	ld	ra,24(sp)
    8020a640:	6442                	ld	s0,16(sp)
    8020a642:	64a2                	ld	s1,8(sp)
    8020a644:	6105                	addi	sp,sp,32
    8020a646:	8082                	ret
    __debug_warn("[growproc]alloc heap not found\n");
    8020a648:	00008517          	auipc	a0,0x8
    8020a64c:	d4050513          	addi	a0,a0,-704 # 80212388 <digits+0xac0>
    8020a650:	ffffd097          	auipc	ra,0xffffd
    8020a654:	c54080e7          	jalr	-940(ra) # 802072a4 <__debug_warn>
    return 0;
    8020a658:	4501                	li	a0,0
    8020a65a:	b7d5                	j	8020a63e <growproc+0x24>

000000008020a65c <growprocsize>:

uint64 growprocsize(uint64 sz)
{
    8020a65c:	1101                	addi	sp,sp,-32
    8020a65e:	ec06                	sd	ra,24(sp)
    8020a660:	e822                	sd	s0,16(sp)
    8020a662:	e426                	sd	s1,8(sp)
    8020a664:	1000                	addi	s0,sp,32
    8020a666:	84aa                	mv	s1,a0
  struct proc *p = myproc();
    8020a668:	fffff097          	auipc	ra,0xfffff
    8020a66c:	4c2080e7          	jalr	1218(ra) # 80209b2a <myproc>
  struct vma *vma = alloc_sz_heap_vma(p, sz, PTE_R|PTE_W|PTE_U);
    8020a670:	4659                	li	a2,22
    8020a672:	85a6                	mv	a1,s1
    8020a674:	00000097          	auipc	ra,0x0
    8020a678:	92c080e7          	jalr	-1748(ra) # 80209fa0 <alloc_sz_heap_vma>
  if(vma == NULL)
    8020a67c:	cd09                	beqz	a0,8020a696 <growprocsize+0x3a>
  {
    __debug_warn("[growproc] alloc heap failed\n");
    return 0;
  }
  return vma->end - PGROUNDUP(sz);
    8020a67e:	6785                	lui	a5,0x1
    8020a680:	17fd                	addi	a5,a5,-1
    8020a682:	94be                	add	s1,s1,a5
    8020a684:	77fd                	lui	a5,0xfffff
    8020a686:	8cfd                	and	s1,s1,a5
    8020a688:	6d08                	ld	a0,24(a0)
    8020a68a:	8d05                	sub	a0,a0,s1
}
    8020a68c:	60e2                	ld	ra,24(sp)
    8020a68e:	6442                	ld	s0,16(sp)
    8020a690:	64a2                	ld	s1,8(sp)
    8020a692:	6105                	addi	sp,sp,32
    8020a694:	8082                	ret
    __debug_warn("[growproc] alloc heap failed\n");
    8020a696:	00008517          	auipc	a0,0x8
    8020a69a:	d1250513          	addi	a0,a0,-750 # 802123a8 <digits+0xae0>
    8020a69e:	ffffd097          	auipc	ra,0xffffd
    8020a6a2:	c06080e7          	jalr	-1018(ra) # 802072a4 <__debug_warn>
    return 0;
    8020a6a6:	4501                	li	a0,0
    8020a6a8:	b7d5                	j	8020a68c <growprocsize+0x30>

000000008020a6aa <print_vma_info>:
  [MMAP]  "MMAP",
};


void print_vma_info(struct proc* p)
{
    8020a6aa:	7139                	addi	sp,sp,-64
    8020a6ac:	fc06                	sd	ra,56(sp)
    8020a6ae:	f822                	sd	s0,48(sp)
    8020a6b0:	f426                	sd	s1,40(sp)
    8020a6b2:	f04a                	sd	s2,32(sp)
    8020a6b4:	ec4e                	sd	s3,24(sp)
    8020a6b6:	e852                	sd	s4,16(sp)
    8020a6b8:	e456                	sd	s5,8(sp)
    8020a6ba:	e05a                	sd	s6,0(sp)
    8020a6bc:	0080                	addi	s0,sp,64
    8020a6be:	89aa                	mv	s3,a0
  struct vma * head = p->vma;
    8020a6c0:	17053a03          	ld	s4,368(a0)
  struct vma * pvma = head->next;
    8020a6c4:	038a3483          	ld	s1,56(s4)
  __debug_info("\t\tva\t\t\tpa\t\t\tsz\t\t\tend\t\ttype\n");
    8020a6c8:	00008517          	auipc	a0,0x8
    8020a6cc:	d0050513          	addi	a0,a0,-768 # 802123c8 <digits+0xb00>
    8020a6d0:	ffffd097          	auipc	ra,0xffffd
    8020a6d4:	a0e080e7          	jalr	-1522(ra) # 802070de <__debug_info>
  while(pvma != head){
    8020a6d8:	049a0463          	beq	s4,s1,8020a720 <print_vma_info+0x76>
    __debug_info("[vma_info]%p\t%p\t%p\t%p\t%s\n", 
    8020a6dc:	00008b17          	auipc	s6,0x8
    8020a6e0:	d9cb0b13          	addi	s6,s6,-612 # 80212478 <vma_type>
    8020a6e4:	00008a97          	auipc	s5,0x8
    8020a6e8:	d04a8a93          	addi	s5,s5,-764 # 802123e8 <digits+0xb20>
    8020a6ec:	0084b903          	ld	s2,8(s1)
    8020a6f0:	85ca                	mv	a1,s2
    8020a6f2:	0609b503          	ld	a0,96(s3)
    8020a6f6:	ffffe097          	auipc	ra,0xffffe
    8020a6fa:	c6e080e7          	jalr	-914(ra) # 80208364 <kwalkaddr1>
    8020a6fe:	862a                	mv	a2,a0
    8020a700:	0004e783          	lwu	a5,0(s1)
    8020a704:	078e                	slli	a5,a5,0x3
    8020a706:	97da                	add	a5,a5,s6
    8020a708:	639c                	ld	a5,0(a5)
    8020a70a:	6c98                	ld	a4,24(s1)
    8020a70c:	6894                	ld	a3,16(s1)
    8020a70e:	85ca                	mv	a1,s2
    8020a710:	8556                	mv	a0,s5
    8020a712:	ffffd097          	auipc	ra,0xffffd
    8020a716:	9cc080e7          	jalr	-1588(ra) # 802070de <__debug_info>
                pvma->addr, kwalkaddr1(p->pagetable,pvma->addr),pvma->sz, pvma->end, vma_type[pvma->type]);
    pvma = pvma->next;
    8020a71a:	7c84                	ld	s1,56(s1)
  while(pvma != head){
    8020a71c:	fc9a18e3          	bne	s4,s1,8020a6ec <print_vma_info+0x42>
  }
}
    8020a720:	70e2                	ld	ra,56(sp)
    8020a722:	7442                	ld	s0,48(sp)
    8020a724:	74a2                	ld	s1,40(sp)
    8020a726:	7902                	ld	s2,32(sp)
    8020a728:	69e2                	ld	s3,24(sp)
    8020a72a:	6a42                	ld	s4,16(sp)
    8020a72c:	6aa2                	ld	s5,8(sp)
    8020a72e:	6b02                	ld	s6,0(sp)
    8020a730:	6121                	addi	sp,sp,64
    8020a732:	8082                	ret

000000008020a734 <print_single_vma>:

void print_single_vma(pagetable_t pagetable,struct vma* v)
{
    8020a734:	1141                	addi	sp,sp,-16
    8020a736:	e406                	sd	ra,8(sp)
    8020a738:	e022                	sd	s0,0(sp)
    8020a73a:	0800                	addi	s0,sp,16
  __debug_info("[vma_info]va %p\tsz %p\tend %p\tname %s\n", 
    8020a73c:	0005e783          	lwu	a5,0(a1)
    8020a740:	00379713          	slli	a4,a5,0x3
    8020a744:	00008797          	auipc	a5,0x8
    8020a748:	d3478793          	addi	a5,a5,-716 # 80212478 <vma_type>
    8020a74c:	97ba                	add	a5,a5,a4
    8020a74e:	6398                	ld	a4,0(a5)
    8020a750:	6d94                	ld	a3,24(a1)
    8020a752:	6990                	ld	a2,16(a1)
    8020a754:	658c                	ld	a1,8(a1)
    8020a756:	00008517          	auipc	a0,0x8
    8020a75a:	cb250513          	addi	a0,a0,-846 # 80212408 <digits+0xb40>
    8020a75e:	ffffd097          	auipc	ra,0xffffd
    8020a762:	980080e7          	jalr	-1664(ra) # 802070de <__debug_info>
                v->addr,v->sz, v->end, vma_type[v->type]);

}
    8020a766:	60a2                	ld	ra,8(sp)
    8020a768:	6402                	ld	s0,0(sp)
    8020a76a:	0141                	addi	sp,sp,16
    8020a76c:	8082                	ret

000000008020a76e <do_mmap_fix>:
#include "include/vm.h"
#include "include/kalloc.h"
#include "include/string.h"

uint64 do_mmap_fix(uint64 start, uint64 len, int flags, int fd, off_t offset)
{
    8020a76e:	7139                	addi	sp,sp,-64
    8020a770:	fc06                	sd	ra,56(sp)
    8020a772:	f822                	sd	s0,48(sp)
    8020a774:	f426                	sd	s1,40(sp)
    8020a776:	f04a                	sd	s2,32(sp)
    8020a778:	ec4e                	sd	s3,24(sp)
    8020a77a:	e852                	sd	s4,16(sp)
    8020a77c:	e456                	sd	s5,8(sp)
    8020a77e:	e05a                	sd	s6,0(sp)
    8020a780:	0080                	addi	s0,sp,64
    8020a782:	8b2a                	mv	s6,a0
    8020a784:	8aae                	mv	s5,a1
    8020a786:	8a32                	mv	s4,a2
    8020a788:	89b6                	mv	s3,a3
    8020a78a:	893a                	mv	s2,a4
    struct proc* p = myproc();
    8020a78c:	fffff097          	auipc	ra,0xfffff
    8020a790:	39e080e7          	jalr	926(ra) # 80209b2a <myproc>
    8020a794:	84aa                	mv	s1,a0
    map_fix* mf = kmalloc(sizeof(map_fix));
    8020a796:	04000513          	li	a0,64
    8020a79a:	ffffd097          	auipc	ra,0xffffd
    8020a79e:	42a080e7          	jalr	1066(ra) # 80207bc4 <kmalloc>
        .addr = start,  //映射起始地址
        .sz = len,
        .flags = flags,
        .fd = fd,
        .f_off = offset,
        .next = p->mf,
    8020a7a2:	1804b703          	ld	a4,384(s1)
    *mf = (map_fix){
    8020a7a6:	00053023          	sd	zero,0(a0)
    8020a7aa:	00053c23          	sd	zero,24(a0)
    8020a7ae:	02053823          	sd	zero,48(a0)
    8020a7b2:	4699                	li	a3,6
    8020a7b4:	c114                	sw	a3,0(a0)
    8020a7b6:	01653423          	sd	s6,8(a0)
    8020a7ba:	01553823          	sd	s5,16(a0)
    8020a7be:	03452023          	sw	s4,32(a0)
    8020a7c2:	03352223          	sw	s3,36(a0)
    8020a7c6:	03253423          	sd	s2,40(a0)
    8020a7ca:	fd18                	sd	a4,56(a0)
        .type = MMAP
    };
    p->mf = mf;
    8020a7cc:	18a4b023          	sd	a0,384(s1)
    return 0;
}
    8020a7d0:	4501                	li	a0,0
    8020a7d2:	70e2                	ld	ra,56(sp)
    8020a7d4:	7442                	ld	s0,48(sp)
    8020a7d6:	74a2                	ld	s1,40(sp)
    8020a7d8:	7902                	ld	s2,32(sp)
    8020a7da:	69e2                	ld	s3,24(sp)
    8020a7dc:	6a42                	ld	s4,16(sp)
    8020a7de:	6aa2                	ld	s5,8(sp)
    8020a7e0:	6b02                	ld	s6,0(sp)
    8020a7e2:	6121                	addi	sp,sp,64
    8020a7e4:	8082                	ret

000000008020a7e6 <do_mmap>:

uint64 do_mmap(uint64 start, uint64 len, int prot, int flags, int fd, off_t offset)
{
    8020a7e6:	7119                	addi	sp,sp,-128
    8020a7e8:	fc86                	sd	ra,120(sp)
    8020a7ea:	f8a2                	sd	s0,112(sp)
    8020a7ec:	f4a6                	sd	s1,104(sp)
    8020a7ee:	f0ca                	sd	s2,96(sp)
    8020a7f0:	ecce                	sd	s3,88(sp)
    8020a7f2:	e8d2                	sd	s4,80(sp)
    8020a7f4:	e4d6                	sd	s5,72(sp)
    8020a7f6:	e0da                	sd	s6,64(sp)
    8020a7f8:	fc5e                	sd	s7,56(sp)
    8020a7fa:	f862                	sd	s8,48(sp)
    8020a7fc:	f466                	sd	s9,40(sp)
    8020a7fe:	f06a                	sd	s10,32(sp)
    8020a800:	ec6e                	sd	s11,24(sp)
    8020a802:	0100                	addi	s0,sp,128
    8020a804:	8b2a                	mv	s6,a0
    8020a806:	8a2e                	mv	s4,a1
    8020a808:	8932                	mv	s2,a2
    8020a80a:	8cb6                	mv	s9,a3
    8020a80c:	84ba                	mv	s1,a4
    8020a80e:	89be                	mv	s3,a5
    struct proc *p = myproc();
    8020a810:	fffff097          	auipc	ra,0xfffff
    8020a814:	31a080e7          	jalr	794(ra) # 80209b2a <myproc>
    8020a818:	8aaa                	mv	s5,a0

    if(flags & MAP_ANONYMOUS)
    8020a81a:	020cf793          	andi	a5,s9,32
    8020a81e:	ebfd                	bnez	a5,8020a914 <do_mmap+0x12e>
    {
        fd = -1;
        goto ignore_fd;
    }

    if(fd < 0)
    8020a820:	0c04c463          	bltz	s1,8020a8e8 <do_mmap+0x102>
    {
        __debug_warn("[do_mmap] fd illegal, fd = %d\n", fd);
        return -1;
    }

    if(fd > NOFILEMAX(p))
    8020a824:	7170                	ld	a2,224(a0)
    8020a826:	06500793          	li	a5,101
    8020a82a:	00c7d463          	bge	a5,a2,8020a832 <do_mmap+0x4c>
    8020a82e:	06500613          	li	a2,101
    8020a832:	0c964663          	blt	a2,s1,8020a8fe <do_mmap+0x118>
        __debug_warn("[do_mmap] fd illegal, fd(%d) > NOFILEMAX(%d)\n", fd, NOFILEMAX(p));
        return -1;
    }

ignore_fd:
    if(offset < 0)
    8020a836:	0e09c163          	bltz	s3,8020a918 <do_mmap+0x132>
    {
        __debug_warn("[do_mmap] offset illegal, offset = %d\n", offset);
        return -1;
    }
    if(start % PGSIZE != 0)
    8020a83a:	034b1793          	slli	a5,s6,0x34
    8020a83e:	ebe5                	bnez	a5,8020a92e <do_mmap+0x148>
        return -1;
    }
    // print_vma_info(p);
    // __debug_info("[dp_mmap] start = %p, len = %p, flags = %p, fd = %d, offset = %d\n", start, len, flags, fd, offset);
    int perm = PTE_U;
    if(prot & PROT_READ) 
    8020a840:	00197793          	andi	a5,s2,1
    int perm = PTE_U;
    8020a844:	4bc1                	li	s7,16
    if(prot & PROT_READ) 
    8020a846:	c399                	beqz	a5,8020a84c <do_mmap+0x66>
        perm  |= (PTE_R | PTE_A);
    8020a848:	05200b93          	li	s7,82
    if(prot & PROT_WRITE)
    8020a84c:	00297793          	andi	a5,s2,2
    8020a850:	c399                	beqz	a5,8020a856 <do_mmap+0x70>
        perm  |= (PTE_W | PTE_D);
    8020a852:	084beb93          	ori	s7,s7,132
    if(prot & PROT_EXEC)
    8020a856:	00497913          	andi	s2,s2,4
    8020a85a:	00090463          	beqz	s2,8020a862 <do_mmap+0x7c>
        perm  |= (PTE_X | PTE_A);
    8020a85e:	048beb93          	ori	s7,s7,72

    struct file *f = fd == -1 ? NULL : p->ofile[fd];
    8020a862:	57fd                	li	a5,-1
    8020a864:	0ef48963          	beq	s1,a5,8020a956 <do_mmap+0x170>
    8020a868:	0e8ab783          	ld	a5,232(s5)
    8020a86c:	00349713          	slli	a4,s1,0x3
    8020a870:	97ba                	add	a5,a5,a4
    8020a872:	0007bc03          	ld	s8,0(a5)
    if(fd != -1 && f == NULL)
    8020a876:	0c0c0663          	beqz	s8,8020a942 <do_mmap+0x15c>
    {
        __debug_warn("[do_mmap] mmap file illegal\n");
        return -1;
    }

    if((flags & MAP_FIXED) && start != 0)
    8020a87a:	010cf793          	andi	a5,s9,16
    8020a87e:	c399                	beqz	a5,8020a884 <do_mmap+0x9e>
    8020a880:	0c0b1d63          	bnez	s6,8020a95a <do_mmap+0x174>
    {
        do_mmap_fix(start, len, flags, fd, offset);
        goto skip_vma;
    }

    struct vma *vma = alloc_mmap_vma(p, flags, start, len, perm, fd, offset);
    8020a884:	884e                	mv	a6,s3
    8020a886:	87a6                	mv	a5,s1
    8020a888:	875e                	mv	a4,s7
    8020a88a:	86d2                	mv	a3,s4
    8020a88c:	865a                	mv	a2,s6
    8020a88e:	85e6                	mv	a1,s9
    8020a890:	8556                	mv	a0,s5
    8020a892:	fffff097          	auipc	ra,0xfffff
    8020a896:	500080e7          	jalr	1280(ra) # 80209d92 <alloc_mmap_vma>
    start = vma->addr;
    8020a89a:	00853b03          	ld	s6,8(a0)
    }

    uint64 mmap_sz ;
skip_vma:
    mmap_sz = 0;
    if(fd != -1)
    8020a89e:	57fd                	li	a5,-1
    8020a8a0:	14f48063          	beq	s1,a5,8020a9e0 <do_mmap+0x1fa>
    {
        mmap_sz = f->ep->file_size - offset;
    8020a8a4:	018c3783          	ld	a5,24(s8)
    8020a8a8:	1087e783          	lwu	a5,264(a5)
    8020a8ac:	413787b3          	sub	a5,a5,s3
        if(len < mmap_sz)
    8020a8b0:	85d2                	mv	a1,s4
    8020a8b2:	0147f363          	bgeu	a5,s4,8020a8b8 <do_mmap+0xd2>
    8020a8b6:	85be                	mv	a1,a5
            mmap_sz = len;
        f->off = offset;
    8020a8b8:	033c3023          	sd	s3,32(s8)
    {
        return start;
    }

    // read and copy file to memory
    uint64 end_pagespace = mmap_sz % PGSIZE;
    8020a8bc:	6a05                	lui	s4,0x1
    8020a8be:	1a7d                	addi	s4,s4,-1
    8020a8c0:	0145fd33          	and	s10,a1,s4
    int page_n = PGROUNDUP(mmap_sz) >> PGSHIFT;
    8020a8c4:	9a2e                	add	s4,s4,a1
    8020a8c6:	00ca5a13          	srli	s4,s4,0xc
    8020a8ca:	2a01                	sext.w	s4,s4
    uint64 va = start;

    for(int i = 0; i < page_n; ++i)
    8020a8cc:	11405563          	blez	s4,8020a9d6 <do_mmap+0x1f0>
    uint64 va = start;
    8020a8d0:	895a                	mv	s2,s6
    for(int i = 0; i < page_n; ++i)
    8020a8d2:	4981                	li	s3,0
        if(pa == NULL)
        {
            __debug_warn("[do_mmap] va = %p, pa not found\n", va);
            return -1;
        }
        if(i != page_n - 1)
    8020a8d4:	fffa0c9b          	addiw	s9,s4,-1
        {
            fileread(f, va, PGSIZE);
        }
        else 
        {
            fileread(f, va, end_pagespace);
    8020a8d8:	000d0d9b          	sext.w	s11,s10
            memset((void *)(pa + end_pagespace), 0, PGSIZE - end_pagespace);
    8020a8dc:	6785                	lui	a5,0x1
    8020a8de:	41a787bb          	subw	a5,a5,s10
    8020a8e2:	f8f43423          	sd	a5,-120(s0)
    8020a8e6:	a0e1                	j	8020a9ae <do_mmap+0x1c8>
        __debug_warn("[do_mmap] fd illegal, fd = %d\n", fd);
    8020a8e8:	85a6                	mv	a1,s1
    8020a8ea:	00008517          	auipc	a0,0x8
    8020a8ee:	bd650513          	addi	a0,a0,-1066 # 802124c0 <vma_type+0x48>
    8020a8f2:	ffffd097          	auipc	ra,0xffffd
    8020a8f6:	9b2080e7          	jalr	-1614(ra) # 802072a4 <__debug_warn>
        return -1;
    8020a8fa:	5b7d                	li	s6,-1
    8020a8fc:	a0d5                	j	8020a9e0 <do_mmap+0x1fa>
        __debug_warn("[do_mmap] fd illegal, fd(%d) > NOFILEMAX(%d)\n", fd, NOFILEMAX(p));
    8020a8fe:	85a6                	mv	a1,s1
    8020a900:	00008517          	auipc	a0,0x8
    8020a904:	be050513          	addi	a0,a0,-1056 # 802124e0 <vma_type+0x68>
    8020a908:	ffffd097          	auipc	ra,0xffffd
    8020a90c:	99c080e7          	jalr	-1636(ra) # 802072a4 <__debug_warn>
        return -1;
    8020a910:	5b7d                	li	s6,-1
    8020a912:	a0f9                	j	8020a9e0 <do_mmap+0x1fa>
        fd = -1;
    8020a914:	54fd                	li	s1,-1
    8020a916:	b705                	j	8020a836 <do_mmap+0x50>
        __debug_warn("[do_mmap] offset illegal, offset = %d\n", offset);
    8020a918:	85ce                	mv	a1,s3
    8020a91a:	00008517          	auipc	a0,0x8
    8020a91e:	bf650513          	addi	a0,a0,-1034 # 80212510 <vma_type+0x98>
    8020a922:	ffffd097          	auipc	ra,0xffffd
    8020a926:	982080e7          	jalr	-1662(ra) # 802072a4 <__debug_warn>
        return -1;
    8020a92a:	5b7d                	li	s6,-1
    8020a92c:	a855                	j	8020a9e0 <do_mmap+0x1fa>
        __debug_warn("[do_mmap] mmap start address not aligned\n");
    8020a92e:	00008517          	auipc	a0,0x8
    8020a932:	c0a50513          	addi	a0,a0,-1014 # 80212538 <vma_type+0xc0>
    8020a936:	ffffd097          	auipc	ra,0xffffd
    8020a93a:	96e080e7          	jalr	-1682(ra) # 802072a4 <__debug_warn>
        return -1;
    8020a93e:	5b7d                	li	s6,-1
    8020a940:	a045                	j	8020a9e0 <do_mmap+0x1fa>
        __debug_warn("[do_mmap] mmap file illegal\n");
    8020a942:	00008517          	auipc	a0,0x8
    8020a946:	c2650513          	addi	a0,a0,-986 # 80212568 <vma_type+0xf0>
    8020a94a:	ffffd097          	auipc	ra,0xffffd
    8020a94e:	95a080e7          	jalr	-1702(ra) # 802072a4 <__debug_warn>
        return -1;
    8020a952:	5b7d                	li	s6,-1
    8020a954:	a071                	j	8020a9e0 <do_mmap+0x1fa>
    struct file *f = fd == -1 ? NULL : p->ofile[fd];
    8020a956:	4c01                	li	s8,0
    8020a958:	b70d                	j	8020a87a <do_mmap+0x94>
        do_mmap_fix(start, len, flags, fd, offset);
    8020a95a:	874e                	mv	a4,s3
    8020a95c:	86a6                	mv	a3,s1
    8020a95e:	8666                	mv	a2,s9
    8020a960:	85d2                	mv	a1,s4
    8020a962:	855a                	mv	a0,s6
    8020a964:	00000097          	auipc	ra,0x0
    8020a968:	e0a080e7          	jalr	-502(ra) # 8020a76e <do_mmap_fix>
        goto skip_vma;
    8020a96c:	bf0d                	j	8020a89e <do_mmap+0xb8>
            __debug_warn("[do_mmap] va = %p, pa not found\n", va);
    8020a96e:	85ca                	mv	a1,s2
    8020a970:	00008517          	auipc	a0,0x8
    8020a974:	c1850513          	addi	a0,a0,-1000 # 80212588 <vma_type+0x110>
    8020a978:	ffffd097          	auipc	ra,0xffffd
    8020a97c:	92c080e7          	jalr	-1748(ra) # 802072a4 <__debug_warn>
            return -1;
    8020a980:	5b7d                	li	s6,-1
    8020a982:	a8b9                	j	8020a9e0 <do_mmap+0x1fa>
            fileread(f, va, end_pagespace);
    8020a984:	866e                	mv	a2,s11
    8020a986:	85ca                	mv	a1,s2
    8020a988:	8562                	mv	a0,s8
    8020a98a:	ffffb097          	auipc	ra,0xffffb
    8020a98e:	e38080e7          	jalr	-456(ra) # 802057c2 <fileread>
            memset((void *)(pa + end_pagespace), 0, PGSIZE - end_pagespace);
    8020a992:	f8843603          	ld	a2,-120(s0)
    8020a996:	4581                	li	a1,0
    8020a998:	009d0533          	add	a0,s10,s1
    8020a99c:	ffff6097          	auipc	ra,0xffff6
    8020a9a0:	3d8080e7          	jalr	984(ra) # 80200d74 <memset>
        }
        va += PGSIZE;
    8020a9a4:	6785                	lui	a5,0x1
    8020a9a6:	993e                	add	s2,s2,a5
    for(int i = 0; i < page_n; ++i)
    8020a9a8:	2985                	addiw	s3,s3,1
    8020a9aa:	033a0663          	beq	s4,s3,8020a9d6 <do_mmap+0x1f0>
        uint64 pa = experm(p->pagetable, va, perm);
    8020a9ae:	865e                	mv	a2,s7
    8020a9b0:	85ca                	mv	a1,s2
    8020a9b2:	060ab503          	ld	a0,96(s5)
    8020a9b6:	ffffe097          	auipc	ra,0xffffe
    8020a9ba:	8e8080e7          	jalr	-1816(ra) # 8020829e <experm>
    8020a9be:	84aa                	mv	s1,a0
        if(pa == NULL)
    8020a9c0:	d55d                	beqz	a0,8020a96e <do_mmap+0x188>
        if(i != page_n - 1)
    8020a9c2:	fd3c81e3          	beq	s9,s3,8020a984 <do_mmap+0x19e>
            fileread(f, va, PGSIZE);
    8020a9c6:	6605                	lui	a2,0x1
    8020a9c8:	85ca                	mv	a1,s2
    8020a9ca:	8562                	mv	a0,s8
    8020a9cc:	ffffb097          	auipc	ra,0xffffb
    8020a9d0:	df6080e7          	jalr	-522(ra) # 802057c2 <fileread>
    8020a9d4:	bfc1                	j	8020a9a4 <do_mmap+0x1be>
    }

    filedup(f);
    8020a9d6:	8562                	mv	a0,s8
    8020a9d8:	ffffb097          	auipc	ra,0xffffb
    8020a9dc:	8c6080e7          	jalr	-1850(ra) # 8020529e <filedup>
    return start;
}
    8020a9e0:	855a                	mv	a0,s6
    8020a9e2:	70e6                	ld	ra,120(sp)
    8020a9e4:	7446                	ld	s0,112(sp)
    8020a9e6:	74a6                	ld	s1,104(sp)
    8020a9e8:	7906                	ld	s2,96(sp)
    8020a9ea:	69e6                	ld	s3,88(sp)
    8020a9ec:	6a46                	ld	s4,80(sp)
    8020a9ee:	6aa6                	ld	s5,72(sp)
    8020a9f0:	6b06                	ld	s6,64(sp)
    8020a9f2:	7be2                	ld	s7,56(sp)
    8020a9f4:	7c42                	ld	s8,48(sp)
    8020a9f6:	7ca2                	ld	s9,40(sp)
    8020a9f8:	7d02                	ld	s10,32(sp)
    8020a9fa:	6de2                	ld	s11,24(sp)
    8020a9fc:	6109                	addi	sp,sp,128
    8020a9fe:	8082                	ret

000000008020aa00 <do_munmap_fix>:

map_fix* do_munmap_fix(struct proc* p,uint64 start, uint64 len){
    8020aa00:	1141                	addi	sp,sp,-16
    8020aa02:	e422                	sd	s0,8(sp)
    8020aa04:	0800                	addi	s0,sp,16
    map_fix* i = p->mf;
    8020aa06:	18053783          	ld	a5,384(a0)
    map_fix* last = NULL;
    while(i){
    8020aa0a:	cb95                	beqz	a5,8020aa3e <do_munmap_fix+0x3e>
    8020aa0c:	882a                	mv	a6,a0
    map_fix* last = NULL;
    8020aa0e:	4681                	li	a3,0
    8020aa10:	a029                	j	8020aa1a <do_munmap_fix+0x1a>
        if(i->addr==start&&i->sz == len){
            goto success;
        }
        last = i;
        i = i->next;
    8020aa12:	7f88                	ld	a0,56(a5)
    while(i){
    8020aa14:	86be                	mv	a3,a5
    8020aa16:	cd01                	beqz	a0,8020aa2e <do_munmap_fix+0x2e>
        i = i->next;
    8020aa18:	87aa                	mv	a5,a0
        if(i->addr==start&&i->sz == len){
    8020aa1a:	6798                	ld	a4,8(a5)
    8020aa1c:	feb71be3          	bne	a4,a1,8020aa12 <do_munmap_fix+0x12>
    8020aa20:	6b98                	ld	a4,16(a5)
    8020aa22:	fec718e3          	bne	a4,a2,8020aa12 <do_munmap_fix+0x12>
    }
    return NULL;
success:
    if(last)last->next = i->next;
    8020aa26:	c699                	beqz	a3,8020aa34 <do_munmap_fix+0x34>
    8020aa28:	7f98                	ld	a4,56(a5)
    8020aa2a:	fe98                	sd	a4,56(a3)
    8020aa2c:	853e                	mv	a0,a5
    else p->mf = i->next;
    return i;
}
    8020aa2e:	6422                	ld	s0,8(sp)
    8020aa30:	0141                	addi	sp,sp,16
    8020aa32:	8082                	ret
    else p->mf = i->next;
    8020aa34:	7f98                	ld	a4,56(a5)
    8020aa36:	18e83023          	sd	a4,384(a6)
    8020aa3a:	853e                	mv	a0,a5
    8020aa3c:	bfcd                	j	8020aa2e <do_munmap_fix+0x2e>
    return NULL;
    8020aa3e:	853e                	mv	a0,a5
    8020aa40:	b7fd                	j	8020aa2e <do_munmap_fix+0x2e>

000000008020aa42 <find_map_fix>:

map_fix * find_map_fix(struct proc *p, uint64 start, uint64 len)
{
    8020aa42:	1141                	addi	sp,sp,-16
    8020aa44:	e422                	sd	s0,8(sp)
    8020aa46:	0800                	addi	s0,sp,16
  map_fix *i = p->mf;
    8020aa48:	18053503          	ld	a0,384(a0)
  while(i)
    8020aa4c:	e501                	bnez	a0,8020aa54 <find_map_fix+0x12>
    8020aa4e:	a809                	j	8020aa60 <find_map_fix+0x1e>
  {
    if(i->addr == start && len <= i->sz)
    {
      return i;
    }
    i = i->next;
    8020aa50:	7d08                	ld	a0,56(a0)
  while(i)
    8020aa52:	c519                	beqz	a0,8020aa60 <find_map_fix+0x1e>
    if(i->addr == start && len <= i->sz)
    8020aa54:	651c                	ld	a5,8(a0)
    8020aa56:	feb79de3          	bne	a5,a1,8020aa50 <find_map_fix+0xe>
    8020aa5a:	691c                	ld	a5,16(a0)
    8020aa5c:	fec7eae3          	bltu	a5,a2,8020aa50 <find_map_fix+0xe>
  }
  return NULL;
}
    8020aa60:	6422                	ld	s0,8(sp)
    8020aa62:	0141                	addi	sp,sp,16
    8020aa64:	8082                	ret

000000008020aa66 <do_munmap>:

uint64 do_munmap(struct proc* np,uint64 start, uint64 len)
{
    8020aa66:	7159                	addi	sp,sp,-112
    8020aa68:	f486                	sd	ra,104(sp)
    8020aa6a:	f0a2                	sd	s0,96(sp)
    8020aa6c:	eca6                	sd	s1,88(sp)
    8020aa6e:	e8ca                	sd	s2,80(sp)
    8020aa70:	e4ce                	sd	s3,72(sp)
    8020aa72:	e0d2                	sd	s4,64(sp)
    8020aa74:	fc56                	sd	s5,56(sp)
    8020aa76:	f85a                	sd	s6,48(sp)
    8020aa78:	f45e                	sd	s7,40(sp)
    8020aa7a:	f062                	sd	s8,32(sp)
    8020aa7c:	ec66                	sd	s9,24(sp)
    8020aa7e:	e86a                	sd	s10,16(sp)
    8020aa80:	e46e                	sd	s11,8(sp)
    8020aa82:	1880                	addi	s0,sp,112
    8020aa84:	8aaa                	mv	s5,a0
    8020aa86:	84ae                	mv	s1,a1
    8020aa88:	8932                	mv	s2,a2
    struct proc *p = np?np:myproc();
    8020aa8a:	cd3d                	beqz	a0,8020ab08 <do_munmap+0xa2>
    map_fix* mf = do_munmap_fix(p,start,len);
    8020aa8c:	864a                	mv	a2,s2
    8020aa8e:	85a6                	mv	a1,s1
    8020aa90:	8556                	mv	a0,s5
    8020aa92:	00000097          	auipc	ra,0x0
    8020aa96:	f6e080e7          	jalr	-146(ra) # 8020aa00 <do_munmap_fix>
    8020aa9a:	8c2a                	mv	s8,a0
    struct vma *vma = mf?mf:addr_sz_locate_vma(p->vma, start, len);
    8020aa9c:	8caa                	mv	s9,a0
    8020aa9e:	c93d                	beqz	a0,8020ab14 <do_munmap+0xae>

    if(vma == NULL || vma->type != MMAP)
    8020aaa0:	000ca703          	lw	a4,0(s9)
    8020aaa4:	4799                	li	a5,6
    8020aaa6:	08f71163          	bne	a4,a5,8020ab28 <do_munmap+0xc2>
    {
        __debug_warn("[do_munmap] munmap address/sz illegal\n");
        return -1;
    }

    if(vma->fd == -1||(vma->flags & MAP_PRIVATE))
    8020aaaa:	024ca783          	lw	a5,36(s9)
    8020aaae:	577d                	li	a4,-1
    8020aab0:	14e78163          	beq	a5,a4,8020abf2 <do_munmap+0x18c>
    8020aab4:	020ca703          	lw	a4,32(s9)
    8020aab8:	8b09                	andi	a4,a4,2
    8020aaba:	12071c63          	bnez	a4,8020abf2 <do_munmap+0x18c>
    {
        goto ignore_wb;
    }

    struct file *f = p->ofile[vma->fd];
    8020aabe:	0e8ab703          	ld	a4,232(s5)
    8020aac2:	078e                	slli	a5,a5,0x3
    8020aac4:	97ba                	add	a5,a5,a4
    8020aac6:	0007bd03          	ld	s10,0(a5) # 1000 <_entry-0x801ff000>
    if(f == NULL)
    8020aaca:	080d0763          	beqz	s10,8020ab58 <do_munmap+0xf2>
        return -1;
    }

    uint64 pa, size, total_size = len;
    uint64 va = start;
    int page_n = (vma->end - vma->addr) >> PGSHIFT;
    8020aace:	018cb783          	ld	a5,24(s9)
    8020aad2:	008cb703          	ld	a4,8(s9)
    8020aad6:	8f99                	sub	a5,a5,a4
    8020aad8:	83b1                	srli	a5,a5,0xc

    f->off = vma->f_off;
    8020aada:	028cb703          	ld	a4,40(s9)
    8020aade:	02ed3023          	sd	a4,32(s10)

    for(int i = 0; i < page_n; ++i)
    8020aae2:	0007871b          	sext.w	a4,a5
    8020aae6:	10e05663          	blez	a4,8020abf2 <do_munmap+0x18c>
    8020aaea:	fff78b9b          	addiw	s7,a5,-1
    8020aaee:	1b82                	slli	s7,s7,0x20
    8020aaf0:	020bdb93          	srli	s7,s7,0x20
    8020aaf4:	0bb2                	slli	s7,s7,0xc
    8020aaf6:	6785                	lui	a5,0x1
    8020aaf8:	97a6                	add	a5,a5,s1
    8020aafa:	9bbe                	add	s7,s7,a5
    {
        size = total_size >= PGSIZE ? PGSIZE : total_size;
    8020aafc:	6b05                	lui	s6,0x1
            __debug_warn("[do_munmap] page not valid\n");
            return -1;
        }
        if((*pte & PTE_U) == 0)
        {
            __debug_warn("[do_munmap] page is not user mode\n");
    8020aafe:	00008d97          	auipc	s11,0x8
    8020ab02:	b22d8d93          	addi	s11,s11,-1246 # 80212620 <vma_type+0x1a8>
    8020ab06:	a055                	j	8020abaa <do_munmap+0x144>
    struct proc *p = np?np:myproc();
    8020ab08:	fffff097          	auipc	ra,0xfffff
    8020ab0c:	022080e7          	jalr	34(ra) # 80209b2a <myproc>
    8020ab10:	8aaa                	mv	s5,a0
    8020ab12:	bfad                	j	8020aa8c <do_munmap+0x26>
    struct vma *vma = mf?mf:addr_sz_locate_vma(p->vma, start, len);
    8020ab14:	864a                	mv	a2,s2
    8020ab16:	85a6                	mv	a1,s1
    8020ab18:	170ab503          	ld	a0,368(s5)
    8020ab1c:	fffff097          	auipc	ra,0xfffff
    8020ab20:	770080e7          	jalr	1904(ra) # 8020a28c <addr_sz_locate_vma>
    8020ab24:	8caa                	mv	s9,a0
    if(vma == NULL || vma->type != MMAP)
    8020ab26:	fd2d                	bnez	a0,8020aaa0 <do_munmap+0x3a>
        __debug_warn("[do_munmap] munmap address/sz illegal\n");
    8020ab28:	00008517          	auipc	a0,0x8
    8020ab2c:	a8850513          	addi	a0,a0,-1400 # 802125b0 <vma_type+0x138>
    8020ab30:	ffffc097          	auipc	ra,0xffffc
    8020ab34:	774080e7          	jalr	1908(ra) # 802072a4 <__debug_warn>
        return -1;
    8020ab38:	557d                	li	a0,-1
        kfree(mf);
    }

    return 0;

}
    8020ab3a:	70a6                	ld	ra,104(sp)
    8020ab3c:	7406                	ld	s0,96(sp)
    8020ab3e:	64e6                	ld	s1,88(sp)
    8020ab40:	6946                	ld	s2,80(sp)
    8020ab42:	69a6                	ld	s3,72(sp)
    8020ab44:	6a06                	ld	s4,64(sp)
    8020ab46:	7ae2                	ld	s5,56(sp)
    8020ab48:	7b42                	ld	s6,48(sp)
    8020ab4a:	7ba2                	ld	s7,40(sp)
    8020ab4c:	7c02                	ld	s8,32(sp)
    8020ab4e:	6ce2                	ld	s9,24(sp)
    8020ab50:	6d42                	ld	s10,16(sp)
    8020ab52:	6da2                	ld	s11,8(sp)
    8020ab54:	6165                	addi	sp,sp,112
    8020ab56:	8082                	ret
        __debug_warn("[do_munmap] open file not found\n");
    8020ab58:	00008517          	auipc	a0,0x8
    8020ab5c:	a8050513          	addi	a0,a0,-1408 # 802125d8 <vma_type+0x160>
    8020ab60:	ffffc097          	auipc	ra,0xffffc
    8020ab64:	744080e7          	jalr	1860(ra) # 802072a4 <__debug_warn>
        return -1;
    8020ab68:	557d                	li	a0,-1
    8020ab6a:	bfc1                	j	8020ab3a <do_munmap+0xd4>
            __debug_warn("[do_munmap] page not valid\n");
    8020ab6c:	00008517          	auipc	a0,0x8
    8020ab70:	a9450513          	addi	a0,a0,-1388 # 80212600 <vma_type+0x188>
    8020ab74:	ffffc097          	auipc	ra,0xffffc
    8020ab78:	730080e7          	jalr	1840(ra) # 802072a4 <__debug_warn>
            return -1;
    8020ab7c:	557d                	li	a0,-1
    8020ab7e:	bf75                	j	8020ab3a <do_munmap+0xd4>
            __debug_warn("[do_munmap] page is not user mode\n");
    8020ab80:	856e                	mv	a0,s11
    8020ab82:	ffffc097          	auipc	ra,0xffffc
    8020ab86:	722080e7          	jalr	1826(ra) # 802072a4 <__debug_warn>
    8020ab8a:	a099                	j	8020abd0 <do_munmap+0x16a>
                __debug_warn("[do_munmap] page' pa is 0\n");
    8020ab8c:	00008517          	auipc	a0,0x8
    8020ab90:	abc50513          	addi	a0,a0,-1348 # 80212648 <vma_type+0x1d0>
    8020ab94:	ffffc097          	auipc	ra,0xffffc
    8020ab98:	710080e7          	jalr	1808(ra) # 802072a4 <__debug_warn>
                return -1;
    8020ab9c:	557d                	li	a0,-1
    8020ab9e:	bf71                	j	8020ab3a <do_munmap+0xd4>
        va += PGSIZE;
    8020aba0:	94da                	add	s1,s1,s6
        total_size -= size;
    8020aba2:	41490933          	sub	s2,s2,s4
    for(int i = 0; i < page_n; ++i)
    8020aba6:	049b8663          	beq	s7,s1,8020abf2 <do_munmap+0x18c>
        size = total_size >= PGSIZE ? PGSIZE : total_size;
    8020abaa:	8a4a                	mv	s4,s2
    8020abac:	012b7363          	bgeu	s6,s2,8020abb2 <do_munmap+0x14c>
    8020abb0:	8a5a                	mv	s4,s6
        pte_t * pte = walk(p->pagetable, va, 0);
    8020abb2:	4601                	li	a2,0
    8020abb4:	85a6                	mv	a1,s1
    8020abb6:	060ab503          	ld	a0,96(s5)
    8020abba:	ffffd097          	auipc	ra,0xffffd
    8020abbe:	374080e7          	jalr	884(ra) # 80207f2e <walk>
    8020abc2:	89aa                	mv	s3,a0
        if((*pte & PTE_V) == 0)
    8020abc4:	611c                	ld	a5,0(a0)
    8020abc6:	0017f713          	andi	a4,a5,1
    8020abca:	d34d                	beqz	a4,8020ab6c <do_munmap+0x106>
        if((*pte & PTE_U) == 0)
    8020abcc:	8bc1                	andi	a5,a5,16
    8020abce:	dbcd                	beqz	a5,8020ab80 <do_munmap+0x11a>
        if(*pte & PTE_D){       // write back when PTE_D bit is 1
    8020abd0:	0009b783          	ld	a5,0(s3)
    8020abd4:	0807f713          	andi	a4,a5,128
    8020abd8:	d761                	beqz	a4,8020aba0 <do_munmap+0x13a>
            pa = PTE2PA(*pte);
    8020abda:	83a9                	srli	a5,a5,0xa
    8020abdc:	07b2                	slli	a5,a5,0xc
            if(!pa){
    8020abde:	d7dd                	beqz	a5,8020ab8c <do_munmap+0x126>
            filewrite(f, va, size);
    8020abe0:	000a061b          	sext.w	a2,s4
    8020abe4:	85a6                	mv	a1,s1
    8020abe6:	856a                	mv	a0,s10
    8020abe8:	ffffb097          	auipc	ra,0xffffb
    8020abec:	cf0080e7          	jalr	-784(ra) # 802058d8 <filewrite>
    8020abf0:	bf45                	j	8020aba0 <do_munmap+0x13a>
    if(!mf && free_vma(p, vma) == 0)
    8020abf2:	000c0963          	beqz	s8,8020ac04 <do_munmap+0x19e>
        kfree(mf);
    8020abf6:	8562                	mv	a0,s8
    8020abf8:	ffffd097          	auipc	ra,0xffffd
    8020abfc:	216080e7          	jalr	534(ra) # 80207e0e <kfree>
    return 0;
    8020ac00:	4501                	li	a0,0
    8020ac02:	bf25                	j	8020ab3a <do_munmap+0xd4>
    if(!mf && free_vma(p, vma) == 0)
    8020ac04:	85e6                	mv	a1,s9
    8020ac06:	8556                	mv	a0,s5
    8020ac08:	fffff097          	auipc	ra,0xfffff
    8020ac0c:	6d0080e7          	jalr	1744(ra) # 8020a2d8 <free_vma>
    8020ac10:	87aa                	mv	a5,a0
    return 0;
    8020ac12:	4501                	li	a0,0
    if(!mf && free_vma(p, vma) == 0)
    8020ac14:	f39d                	bnez	a5,8020ab3a <do_munmap+0xd4>
        __debug_warn("[do_munmap] free vma failed\n");
    8020ac16:	00008517          	auipc	a0,0x8
    8020ac1a:	a5250513          	addi	a0,a0,-1454 # 80212668 <vma_type+0x1f0>
    8020ac1e:	ffffc097          	auipc	ra,0xffffc
    8020ac22:	686080e7          	jalr	1670(ra) # 802072a4 <__debug_warn>
        return -1;
    8020ac26:	557d                	li	a0,-1
    8020ac28:	bf09                	j	8020ab3a <do_munmap+0xd4>

000000008020ac2a <free_map_fix>:

void
free_map_fix(struct proc* p){
    8020ac2a:	1101                	addi	sp,sp,-32
    8020ac2c:	ec06                	sd	ra,24(sp)
    8020ac2e:	e822                	sd	s0,16(sp)
    8020ac30:	e426                	sd	s1,8(sp)
    8020ac32:	e04a                	sd	s2,0(sp)
    8020ac34:	1000                	addi	s0,sp,32
    8020ac36:	892a                	mv	s2,a0
    map_fix* mf = p->mf;
    8020ac38:	18053483          	ld	s1,384(a0)
	map_fix* i = mf;
    map_fix* next;
    while(i){
    8020ac3c:	c899                	beqz	s1,8020ac52 <free_map_fix+0x28>
        next = i->next;
    8020ac3e:	87a6                	mv	a5,s1
    8020ac40:	7c84                	ld	s1,56(s1)
        do_munmap(p,i->addr,i->sz);
    8020ac42:	6b90                	ld	a2,16(a5)
    8020ac44:	678c                	ld	a1,8(a5)
    8020ac46:	854a                	mv	a0,s2
    8020ac48:	00000097          	auipc	ra,0x0
    8020ac4c:	e1e080e7          	jalr	-482(ra) # 8020aa66 <do_munmap>
    while(i){
    8020ac50:	f4fd                	bnez	s1,8020ac3e <free_map_fix+0x14>
        i = next;
    }
}
    8020ac52:	60e2                	ld	ra,24(sp)
    8020ac54:	6442                	ld	s0,16(sp)
    8020ac56:	64a2                	ld	s1,8(sp)
    8020ac58:	6902                	ld	s2,0(sp)
    8020ac5a:	6105                	addi	sp,sp,32
    8020ac5c:	8082                	ret

000000008020ac5e <argraw>:
  return strlen(buf);
}

static uint64
argraw(int n)
{
    8020ac5e:	1101                	addi	sp,sp,-32
    8020ac60:	ec06                	sd	ra,24(sp)
    8020ac62:	e822                	sd	s0,16(sp)
    8020ac64:	e426                	sd	s1,8(sp)
    8020ac66:	1000                	addi	s0,sp,32
    8020ac68:	84aa                	mv	s1,a0
  struct proc *p = myproc();
    8020ac6a:	fffff097          	auipc	ra,0xfffff
    8020ac6e:	ec0080e7          	jalr	-320(ra) # 80209b2a <myproc>
  switch (n) {
    8020ac72:	4795                	li	a5,5
    8020ac74:	0497e163          	bltu	a5,s1,8020acb6 <argraw+0x58>
    8020ac78:	048a                	slli	s1,s1,0x2
    8020ac7a:	00008717          	auipc	a4,0x8
    8020ac7e:	ac670713          	addi	a4,a4,-1338 # 80212740 <vma_type+0x2c8>
    8020ac82:	94ba                	add	s1,s1,a4
    8020ac84:	409c                	lw	a5,0(s1)
    8020ac86:	97ba                	add	a5,a5,a4
    8020ac88:	8782                	jr	a5
  case 0:
    return p->trapframe->a0;
    8020ac8a:	753c                	ld	a5,104(a0)
    8020ac8c:	7ba8                	ld	a0,112(a5)
  case 5:
    return p->trapframe->a5;
  }
  panic("argraw");
  return -1;
}
    8020ac8e:	60e2                	ld	ra,24(sp)
    8020ac90:	6442                	ld	s0,16(sp)
    8020ac92:	64a2                	ld	s1,8(sp)
    8020ac94:	6105                	addi	sp,sp,32
    8020ac96:	8082                	ret
    return p->trapframe->a1;
    8020ac98:	753c                	ld	a5,104(a0)
    8020ac9a:	7fa8                	ld	a0,120(a5)
    8020ac9c:	bfcd                	j	8020ac8e <argraw+0x30>
    return p->trapframe->a2;
    8020ac9e:	753c                	ld	a5,104(a0)
    8020aca0:	63c8                	ld	a0,128(a5)
    8020aca2:	b7f5                	j	8020ac8e <argraw+0x30>
    return p->trapframe->a3;
    8020aca4:	753c                	ld	a5,104(a0)
    8020aca6:	67c8                	ld	a0,136(a5)
    8020aca8:	b7dd                	j	8020ac8e <argraw+0x30>
    return p->trapframe->a4;
    8020acaa:	753c                	ld	a5,104(a0)
    8020acac:	6bc8                	ld	a0,144(a5)
    8020acae:	b7c5                	j	8020ac8e <argraw+0x30>
    return p->trapframe->a5;
    8020acb0:	753c                	ld	a5,104(a0)
    8020acb2:	6fc8                	ld	a0,152(a5)
    8020acb4:	bfe9                	j	8020ac8e <argraw+0x30>
  panic("argraw");
    8020acb6:	00008517          	auipc	a0,0x8
    8020acba:	9d250513          	addi	a0,a0,-1582 # 80212688 <vma_type+0x210>
    8020acbe:	ffffc097          	auipc	ra,0xffffc
    8020acc2:	210080e7          	jalr	528(ra) # 80206ece <panic>

000000008020acc6 <fetchaddr>:
{
    8020acc6:	1141                	addi	sp,sp,-16
    8020acc8:	e406                	sd	ra,8(sp)
    8020acca:	e022                	sd	s0,0(sp)
    8020accc:	0800                	addi	s0,sp,16
    8020acce:	862a                	mv	a2,a0
  if(either_copyin(1,(char*)ip, addr, sizeof(*ip)))
    8020acd0:	46a1                	li	a3,8
    8020acd2:	4505                	li	a0,1
    8020acd4:	fffff097          	auipc	ra,0xfffff
    8020acd8:	84a080e7          	jalr	-1974(ra) # 8020951e <either_copyin>
    8020acdc:	00a03533          	snez	a0,a0
}
    8020ace0:	40a00533          	neg	a0,a0
    8020ace4:	60a2                	ld	ra,8(sp)
    8020ace6:	6402                	ld	s0,0(sp)
    8020ace8:	0141                	addi	sp,sp,16
    8020acea:	8082                	ret

000000008020acec <fetchstr>:
{
    8020acec:	7179                	addi	sp,sp,-48
    8020acee:	f406                	sd	ra,40(sp)
    8020acf0:	f022                	sd	s0,32(sp)
    8020acf2:	ec26                	sd	s1,24(sp)
    8020acf4:	e84a                	sd	s2,16(sp)
    8020acf6:	e44e                	sd	s3,8(sp)
    8020acf8:	1800                	addi	s0,sp,48
    8020acfa:	892a                	mv	s2,a0
    8020acfc:	84ae                	mv	s1,a1
    8020acfe:	89b2                	mv	s3,a2
  struct proc *p = myproc();
    8020ad00:	fffff097          	auipc	ra,0xfffff
    8020ad04:	e2a080e7          	jalr	-470(ra) # 80209b2a <myproc>
  int err = copyinstr(p->pagetable, buf, addr, max);
    8020ad08:	86ce                	mv	a3,s3
    8020ad0a:	864a                	mv	a2,s2
    8020ad0c:	85a6                	mv	a1,s1
    8020ad0e:	7128                	ld	a0,96(a0)
    8020ad10:	ffffe097          	auipc	ra,0xffffe
    8020ad14:	608080e7          	jalr	1544(ra) # 80209318 <copyinstr>
  if(err < 0)
    8020ad18:	00054763          	bltz	a0,8020ad26 <fetchstr+0x3a>
  return strlen(buf);
    8020ad1c:	8526                	mv	a0,s1
    8020ad1e:	ffff6097          	auipc	ra,0xffff6
    8020ad22:	1de080e7          	jalr	478(ra) # 80200efc <strlen>
}
    8020ad26:	70a2                	ld	ra,40(sp)
    8020ad28:	7402                	ld	s0,32(sp)
    8020ad2a:	64e2                	ld	s1,24(sp)
    8020ad2c:	6942                	ld	s2,16(sp)
    8020ad2e:	69a2                	ld	s3,8(sp)
    8020ad30:	6145                	addi	sp,sp,48
    8020ad32:	8082                	ret

000000008020ad34 <argint>:

// Fetch the nth 32-bit system call argument.
int
argint(int n, int *ip)
{
    8020ad34:	1101                	addi	sp,sp,-32
    8020ad36:	ec06                	sd	ra,24(sp)
    8020ad38:	e822                	sd	s0,16(sp)
    8020ad3a:	e426                	sd	s1,8(sp)
    8020ad3c:	1000                	addi	s0,sp,32
    8020ad3e:	84ae                	mv	s1,a1
  *ip = argraw(n);
    8020ad40:	00000097          	auipc	ra,0x0
    8020ad44:	f1e080e7          	jalr	-226(ra) # 8020ac5e <argraw>
    8020ad48:	c088                	sw	a0,0(s1)
  return 0;
}
    8020ad4a:	4501                	li	a0,0
    8020ad4c:	60e2                	ld	ra,24(sp)
    8020ad4e:	6442                	ld	s0,16(sp)
    8020ad50:	64a2                	ld	s1,8(sp)
    8020ad52:	6105                	addi	sp,sp,32
    8020ad54:	8082                	ret

000000008020ad56 <argaddr>:
// Retrieve an argument as a pointer.
// Doesn't check for legality, since
// copyin/copyout will do that.
int
argaddr(int n, uint64 *ip)
{
    8020ad56:	1101                	addi	sp,sp,-32
    8020ad58:	ec06                	sd	ra,24(sp)
    8020ad5a:	e822                	sd	s0,16(sp)
    8020ad5c:	e426                	sd	s1,8(sp)
    8020ad5e:	1000                	addi	s0,sp,32
    8020ad60:	84ae                	mv	s1,a1
  *ip = argraw(n);
    8020ad62:	00000097          	auipc	ra,0x0
    8020ad66:	efc080e7          	jalr	-260(ra) # 8020ac5e <argraw>
    8020ad6a:	e088                	sd	a0,0(s1)
  return 0;
}
    8020ad6c:	4501                	li	a0,0
    8020ad6e:	60e2                	ld	ra,24(sp)
    8020ad70:	6442                	ld	s0,16(sp)
    8020ad72:	64a2                	ld	s1,8(sp)
    8020ad74:	6105                	addi	sp,sp,32
    8020ad76:	8082                	ret

000000008020ad78 <argstr>:
// Fetch the nth word-sized system call argument as a null-terminated string.
// Copies into buf, at most max.
// Returns string length if OK (including nul), -1 if error.
int
argstr(int n, char *buf, int max)
{
    8020ad78:	1101                	addi	sp,sp,-32
    8020ad7a:	ec06                	sd	ra,24(sp)
    8020ad7c:	e822                	sd	s0,16(sp)
    8020ad7e:	e426                	sd	s1,8(sp)
    8020ad80:	e04a                	sd	s2,0(sp)
    8020ad82:	1000                	addi	s0,sp,32
    8020ad84:	84ae                	mv	s1,a1
    8020ad86:	8932                	mv	s2,a2
  *ip = argraw(n);
    8020ad88:	00000097          	auipc	ra,0x0
    8020ad8c:	ed6080e7          	jalr	-298(ra) # 8020ac5e <argraw>
  uint64 addr;
  if(argaddr(n, &addr) < 0)
    return -1;
  //printf("[argstr] str addr:%p\n");
  return fetchstr(addr, buf, max);
    8020ad90:	864a                	mv	a2,s2
    8020ad92:	85a6                	mv	a1,s1
    8020ad94:	00000097          	auipc	ra,0x0
    8020ad98:	f58080e7          	jalr	-168(ra) # 8020acec <fetchstr>
}
    8020ad9c:	60e2                	ld	ra,24(sp)
    8020ad9e:	6442                	ld	s0,16(sp)
    8020ada0:	64a2                	ld	s1,8(sp)
    8020ada2:	6902                	ld	s2,0(sp)
    8020ada4:	6105                	addi	sp,sp,32
    8020ada6:	8082                	ret

000000008020ada8 <argfd>:

int
argfd(int n, int *pfd, struct file **pf)
{
    8020ada8:	7179                	addi	sp,sp,-48
    8020adaa:	f406                	sd	ra,40(sp)
    8020adac:	f022                	sd	s0,32(sp)
    8020adae:	ec26                	sd	s1,24(sp)
    8020adb0:	e84a                	sd	s2,16(sp)
    8020adb2:	e44e                	sd	s3,8(sp)
    8020adb4:	e052                	sd	s4,0(sp)
    8020adb6:	1800                	addi	s0,sp,48
    8020adb8:	8a2a                	mv	s4,a0
    8020adba:	84b2                	mv	s1,a2
  int fd = -1;
  struct file *f = NULL;
  if(pfd)*pfd = -1;
    8020adbc:	c1dd                	beqz	a1,8020ae62 <argfd+0xba>
    8020adbe:	892e                	mv	s2,a1
    8020adc0:	57fd                	li	a5,-1
    8020adc2:	c19c                	sw	a5,0(a1)
  if(pf)*pf = NULL;
    8020adc4:	c62d                	beqz	a2,8020ae2e <argfd+0x86>
    8020adc6:	00063023          	sd	zero,0(a2) # 1000 <_entry-0x801ff000>
  struct proc* p = myproc();
    8020adca:	fffff097          	auipc	ra,0xfffff
    8020adce:	d60080e7          	jalr	-672(ra) # 80209b2a <myproc>
    8020add2:	89aa                	mv	s3,a0
  *ip = argraw(n);
    8020add4:	8552                	mv	a0,s4
    8020add6:	00000097          	auipc	ra,0x0
    8020adda:	e88080e7          	jalr	-376(ra) # 8020ac5e <argraw>
    8020adde:	0005079b          	sext.w	a5,a0
  if(argint(n, &fd) < 0)
    return -1;
  if(pfd)
    *pfd = fd;
    8020ade2:	00f92023          	sw	a5,0(s2)
  if(fd < 0 || fd >= NOFILEMAX(p) || (f=p->ofile[fd]) == NULL)
    8020ade6:	0207ce63          	bltz	a5,8020ae22 <argfd+0x7a>
    8020adea:	0e09b703          	ld	a4,224(s3)
    8020adee:	06500693          	li	a3,101
    8020adf2:	00e6d463          	bge	a3,a4,8020adfa <argfd+0x52>
    8020adf6:	06500713          	li	a4,101
    8020adfa:	02e7d663          	bge	a5,a4,8020ae26 <argfd+0x7e>
    8020adfe:	0e89b703          	ld	a4,232(s3)
    8020ae02:	00379513          	slli	a0,a5,0x3
    8020ae06:	953a                	add	a0,a0,a4
    8020ae08:	611c                	ld	a5,0(a0)
    8020ae0a:	c385                	beqz	a5,8020ae2a <argfd+0x82>
    return -1;
  if(pf)
    *pf = f;
  return 0;
    8020ae0c:	4501                	li	a0,0
  if(pf)
    8020ae0e:	c091                	beqz	s1,8020ae12 <argfd+0x6a>
    *pf = f;
    8020ae10:	e09c                	sd	a5,0(s1)
}
    8020ae12:	70a2                	ld	ra,40(sp)
    8020ae14:	7402                	ld	s0,32(sp)
    8020ae16:	64e2                	ld	s1,24(sp)
    8020ae18:	6942                	ld	s2,16(sp)
    8020ae1a:	69a2                	ld	s3,8(sp)
    8020ae1c:	6a02                	ld	s4,0(sp)
    8020ae1e:	6145                	addi	sp,sp,48
    8020ae20:	8082                	ret
    return -1;
    8020ae22:	557d                	li	a0,-1
    8020ae24:	b7fd                	j	8020ae12 <argfd+0x6a>
    8020ae26:	557d                	li	a0,-1
    8020ae28:	b7ed                	j	8020ae12 <argfd+0x6a>
    8020ae2a:	557d                	li	a0,-1
    8020ae2c:	b7dd                	j	8020ae12 <argfd+0x6a>
  struct proc* p = myproc();
    8020ae2e:	fffff097          	auipc	ra,0xfffff
    8020ae32:	cfc080e7          	jalr	-772(ra) # 80209b2a <myproc>
    8020ae36:	89aa                	mv	s3,a0
  *ip = argraw(n);
    8020ae38:	8552                	mv	a0,s4
    8020ae3a:	00000097          	auipc	ra,0x0
    8020ae3e:	e24080e7          	jalr	-476(ra) # 8020ac5e <argraw>
    8020ae42:	0005079b          	sext.w	a5,a0
  if(pfd)
    8020ae46:	bf71                	j	8020ade2 <argfd+0x3a>
  struct proc* p = myproc();
    8020ae48:	fffff097          	auipc	ra,0xfffff
    8020ae4c:	ce2080e7          	jalr	-798(ra) # 80209b2a <myproc>
    8020ae50:	89aa                	mv	s3,a0
  *ip = argraw(n);
    8020ae52:	8552                	mv	a0,s4
    8020ae54:	00000097          	auipc	ra,0x0
    8020ae58:	e0a080e7          	jalr	-502(ra) # 8020ac5e <argraw>
    8020ae5c:	0005079b          	sext.w	a5,a0
  if(pfd)
    8020ae60:	b759                	j	8020ade6 <argfd+0x3e>
  if(pf)*pf = NULL;
    8020ae62:	d27d                	beqz	a2,8020ae48 <argfd+0xa0>
    8020ae64:	00063023          	sd	zero,0(a2)
  struct proc* p = myproc();
    8020ae68:	fffff097          	auipc	ra,0xfffff
    8020ae6c:	cc2080e7          	jalr	-830(ra) # 80209b2a <myproc>
    8020ae70:	89aa                	mv	s3,a0
  *ip = argraw(n);
    8020ae72:	8552                	mv	a0,s4
    8020ae74:	00000097          	auipc	ra,0x0
    8020ae78:	dea080e7          	jalr	-534(ra) # 8020ac5e <argraw>
    8020ae7c:	0005079b          	sext.w	a5,a0
  if(pfd)
    8020ae80:	b79d                	j	8020ade6 <argfd+0x3e>

000000008020ae82 <argstruct>:

int
argstruct(int n,void* st,int len){
    8020ae82:	7179                	addi	sp,sp,-48
    8020ae84:	f406                	sd	ra,40(sp)
    8020ae86:	f022                	sd	s0,32(sp)
    8020ae88:	ec26                	sd	s1,24(sp)
    8020ae8a:	e84a                	sd	s2,16(sp)
    8020ae8c:	e44e                	sd	s3,8(sp)
    8020ae8e:	1800                	addi	s0,sp,48
    8020ae90:	892e                	mv	s2,a1
    8020ae92:	89b2                	mv	s3,a2
  *ip = argraw(n);
    8020ae94:	00000097          	auipc	ra,0x0
    8020ae98:	dca080e7          	jalr	-566(ra) # 8020ac5e <argraw>
    8020ae9c:	84aa                	mv	s1,a0
  uint64 addr;
  if(argaddr(n,&addr)<0)return -1;
  if(addr&&copyin(myproc()->pagetable,st,addr,len)<0){
    8020ae9e:	e911                	bnez	a0,8020aeb2 <argstruct+0x30>
    return -1;
  }
  return addr;
    8020aea0:	0004851b          	sext.w	a0,s1
}
    8020aea4:	70a2                	ld	ra,40(sp)
    8020aea6:	7402                	ld	s0,32(sp)
    8020aea8:	64e2                	ld	s1,24(sp)
    8020aeaa:	6942                	ld	s2,16(sp)
    8020aeac:	69a2                	ld	s3,8(sp)
    8020aeae:	6145                	addi	sp,sp,48
    8020aeb0:	8082                	ret
  if(addr&&copyin(myproc()->pagetable,st,addr,len)<0){
    8020aeb2:	fffff097          	auipc	ra,0xfffff
    8020aeb6:	c78080e7          	jalr	-904(ra) # 80209b2a <myproc>
    8020aeba:	86ce                	mv	a3,s3
    8020aebc:	8626                	mv	a2,s1
    8020aebe:	85ca                	mv	a1,s2
    8020aec0:	7128                	ld	a0,96(a0)
    8020aec2:	ffffe097          	auipc	ra,0xffffe
    8020aec6:	378080e7          	jalr	888(ra) # 8020923a <copyin>
    8020aeca:	fc055be3          	bgez	a0,8020aea0 <argstruct+0x1e>
    return -1;
    8020aece:	557d                	li	a0,-1
    8020aed0:	bfd1                	j	8020aea4 <argstruct+0x22>

000000008020aed2 <freevec>:

int
freevec(char** argv,int len){
  for(int i = 0; i < len && argv[i] != 0; i++){
    8020aed2:	04b05163          	blez	a1,8020af14 <freevec+0x42>
freevec(char** argv,int len){
    8020aed6:	1101                	addi	sp,sp,-32
    8020aed8:	ec06                	sd	ra,24(sp)
    8020aeda:	e822                	sd	s0,16(sp)
    8020aedc:	e426                	sd	s1,8(sp)
    8020aede:	e04a                	sd	s2,0(sp)
    8020aee0:	1000                	addi	s0,sp,32
    8020aee2:	84aa                	mv	s1,a0
    8020aee4:	fff5891b          	addiw	s2,a1,-1
    8020aee8:	1902                	slli	s2,s2,0x20
    8020aeea:	02095913          	srli	s2,s2,0x20
    8020aeee:	090e                	slli	s2,s2,0x3
    8020aef0:	0521                	addi	a0,a0,8
    8020aef2:	992a                	add	s2,s2,a0
  for(int i = 0; i < len && argv[i] != 0; i++){
    8020aef4:	6088                	ld	a0,0(s1)
    8020aef6:	c901                	beqz	a0,8020af06 <freevec+0x34>
    //printf("[freevec] argv[%d]=%p\n",i,argv[i]);
    kfree(argv[i]);
    8020aef8:	ffffd097          	auipc	ra,0xffffd
    8020aefc:	f16080e7          	jalr	-234(ra) # 80207e0e <kfree>
  for(int i = 0; i < len && argv[i] != 0; i++){
    8020af00:	04a1                	addi	s1,s1,8
    8020af02:	ff2499e3          	bne	s1,s2,8020aef4 <freevec+0x22>
  }
  return 0;
}
    8020af06:	4501                	li	a0,0
    8020af08:	60e2                	ld	ra,24(sp)
    8020af0a:	6442                	ld	s0,16(sp)
    8020af0c:	64a2                	ld	s1,8(sp)
    8020af0e:	6902                	ld	s2,0(sp)
    8020af10:	6105                	addi	sp,sp,32
    8020af12:	8082                	ret
    8020af14:	4501                	li	a0,0
    8020af16:	8082                	ret

000000008020af18 <argstrvec>:

int
argstrvec(int n,char** argv,int max){
    8020af18:	715d                	addi	sp,sp,-80
    8020af1a:	e486                	sd	ra,72(sp)
    8020af1c:	e0a2                	sd	s0,64(sp)
    8020af1e:	fc26                	sd	s1,56(sp)
    8020af20:	f84a                	sd	s2,48(sp)
    8020af22:	f44e                	sd	s3,40(sp)
    8020af24:	f052                	sd	s4,32(sp)
    8020af26:	ec56                	sd	s5,24(sp)
    8020af28:	0880                	addi	s0,sp,80
    8020af2a:	892a                	mv	s2,a0
    8020af2c:	89ae                	mv	s3,a1
    8020af2e:	8a32                	mv	s4,a2
  int i = 0;
  uint64 uarg,uargv;
  memset(argv, 0, max*sizeof(uint64));
    8020af30:	0036161b          	slliw	a2,a2,0x3
    8020af34:	4581                	li	a1,0
    8020af36:	854e                	mv	a0,s3
    8020af38:	ffff6097          	auipc	ra,0xffff6
    8020af3c:	e3c080e7          	jalr	-452(ra) # 80200d74 <memset>
  *ip = argraw(n);
    8020af40:	854a                	mv	a0,s2
    8020af42:	00000097          	auipc	ra,0x0
    8020af46:	d1c080e7          	jalr	-740(ra) # 8020ac5e <argraw>
  if(argaddr(n, &uargv) < 0||uargv == 0){
    8020af4a:	c16d                	beqz	a0,8020b02c <argstrvec+0x114>
    8020af4c:	8aaa                	mv	s5,a0
    //__debug_warn("[argstrvec] uargv null\n");
    goto bad;
  }
  for(;;i++){
    if(i >= max){
    8020af4e:	4481                	li	s1,0
  int i = 0;
    8020af50:	4901                	li	s2,0
    if(i >= max){
    8020af52:	05405863          	blez	s4,8020afa2 <argstrvec+0x8a>
      __debug_warn("[argstrvec] max is too small\n");
      goto bad;
    }
    if(fetchaddr(uargv+sizeof(uint64)*i, (uint64*)&uarg) < 0){
    8020af56:	fb840593          	addi	a1,s0,-72
    8020af5a:	01548533          	add	a0,s1,s5
    8020af5e:	00000097          	auipc	ra,0x0
    8020af62:	d68080e7          	jalr	-664(ra) # 8020acc6 <fetchaddr>
    8020af66:	06054863          	bltz	a0,8020afd6 <argstrvec+0xbe>
      __debug_warn("[argstrvec] uargv:%p\n",uargv);
      __debug_warn("[argstrvec] fetch argv[%d] address bad\n",i);
      goto bad;
    }
    if(uarg == 0){
    8020af6a:	fb843783          	ld	a5,-72(s0)
    8020af6e:	c7d9                	beqz	a5,8020affc <argstrvec+0xe4>
      argv[i] = 0;
      break;
    }
    argv[i] = kmalloc(256);
    8020af70:	10000513          	li	a0,256
    8020af74:	ffffd097          	auipc	ra,0xffffd
    8020af78:	c50080e7          	jalr	-944(ra) # 80207bc4 <kmalloc>
    8020af7c:	85aa                	mv	a1,a0
    8020af7e:	009987b3          	add	a5,s3,s1
    8020af82:	e388                	sd	a0,0(a5)
    if(argv[i] == 0){
    8020af84:	c141                	beqz	a0,8020b004 <argstrvec+0xec>
      __debug_warn("[argstrvec] no more space for argv[%d]\n",i);
      goto bad;
    }
    if(fetchstr(uarg, argv[i], 0x20) < 0){
    8020af86:	02000613          	li	a2,32
    8020af8a:	fb843503          	ld	a0,-72(s0)
    8020af8e:	00000097          	auipc	ra,0x0
    8020af92:	d5e080e7          	jalr	-674(ra) # 8020acec <fetchstr>
    8020af96:	08054163          	bltz	a0,8020b018 <argstrvec+0x100>
  for(;;i++){
    8020af9a:	2905                	addiw	s2,s2,1
    if(i >= max){
    8020af9c:	04a1                	addi	s1,s1,8
    8020af9e:	fb2a1ce3          	bne	s4,s2,8020af56 <argstrvec+0x3e>
      __debug_warn("[argstrvec] max is too small\n");
    8020afa2:	00007517          	auipc	a0,0x7
    8020afa6:	6ee50513          	addi	a0,a0,1774 # 80212690 <vma_type+0x218>
    8020afaa:	ffffc097          	auipc	ra,0xffffc
    8020afae:	2fa080e7          	jalr	762(ra) # 802072a4 <__debug_warn>
      goto bad;
    }
  }
  return i;
bad:
  freevec(argv,i+1);
    8020afb2:	0019059b          	addiw	a1,s2,1
    8020afb6:	854e                	mv	a0,s3
    8020afb8:	00000097          	auipc	ra,0x0
    8020afbc:	f1a080e7          	jalr	-230(ra) # 8020aed2 <freevec>
  return -1;
    8020afc0:	597d                	li	s2,-1
}
    8020afc2:	854a                	mv	a0,s2
    8020afc4:	60a6                	ld	ra,72(sp)
    8020afc6:	6406                	ld	s0,64(sp)
    8020afc8:	74e2                	ld	s1,56(sp)
    8020afca:	7942                	ld	s2,48(sp)
    8020afcc:	79a2                	ld	s3,40(sp)
    8020afce:	7a02                	ld	s4,32(sp)
    8020afd0:	6ae2                	ld	s5,24(sp)
    8020afd2:	6161                	addi	sp,sp,80
    8020afd4:	8082                	ret
      __debug_warn("[argstrvec] uargv:%p\n",uargv);
    8020afd6:	85d6                	mv	a1,s5
    8020afd8:	00007517          	auipc	a0,0x7
    8020afdc:	6d850513          	addi	a0,a0,1752 # 802126b0 <vma_type+0x238>
    8020afe0:	ffffc097          	auipc	ra,0xffffc
    8020afe4:	2c4080e7          	jalr	708(ra) # 802072a4 <__debug_warn>
      __debug_warn("[argstrvec] fetch argv[%d] address bad\n",i);
    8020afe8:	85ca                	mv	a1,s2
    8020afea:	00007517          	auipc	a0,0x7
    8020afee:	6de50513          	addi	a0,a0,1758 # 802126c8 <vma_type+0x250>
    8020aff2:	ffffc097          	auipc	ra,0xffffc
    8020aff6:	2b2080e7          	jalr	690(ra) # 802072a4 <__debug_warn>
      goto bad;
    8020affa:	bf65                	j	8020afb2 <argstrvec+0x9a>
      argv[i] = 0;
    8020affc:	94ce                	add	s1,s1,s3
    8020affe:	0004b023          	sd	zero,0(s1)
  return i;
    8020b002:	b7c1                	j	8020afc2 <argstrvec+0xaa>
      __debug_warn("[argstrvec] no more space for argv[%d]\n",i);
    8020b004:	85ca                	mv	a1,s2
    8020b006:	00007517          	auipc	a0,0x7
    8020b00a:	6ea50513          	addi	a0,a0,1770 # 802126f0 <vma_type+0x278>
    8020b00e:	ffffc097          	auipc	ra,0xffffc
    8020b012:	296080e7          	jalr	662(ra) # 802072a4 <__debug_warn>
      goto bad;
    8020b016:	bf71                	j	8020afb2 <argstrvec+0x9a>
      __debug_warn("[argstrvec] fetch argv[%d] string bad\n",i);
    8020b018:	85ca                	mv	a1,s2
    8020b01a:	00007517          	auipc	a0,0x7
    8020b01e:	6fe50513          	addi	a0,a0,1790 # 80212718 <vma_type+0x2a0>
    8020b022:	ffffc097          	auipc	ra,0xffffc
    8020b026:	282080e7          	jalr	642(ra) # 802072a4 <__debug_warn>
      goto bad;
    8020b02a:	b761                	j	8020afb2 <argstrvec+0x9a>
  int i = 0;
    8020b02c:	4901                	li	s2,0
    8020b02e:	b751                	j	8020afb2 <argstrvec+0x9a>

000000008020b030 <swap>:
    }
  }
  return elf->entry;
}

void swap(void* a,void* b,int len){
    8020b030:	1141                	addi	sp,sp,-16
    8020b032:	e422                	sd	s0,8(sp)
    8020b034:	0800                	addi	s0,sp,16
  char c;
  char *sa = a,*sb = b;
  for(int i = 0;i<len;i++){
    8020b036:	02c05463          	blez	a2,8020b05e <swap+0x2e>
    8020b03a:	87aa                	mv	a5,a0
    8020b03c:	367d                	addiw	a2,a2,-1
    8020b03e:	1602                	slli	a2,a2,0x20
    8020b040:	9201                	srli	a2,a2,0x20
    8020b042:	0605                	addi	a2,a2,1
    8020b044:	9532                	add	a0,a0,a2
    c = sa[i];
    8020b046:	0007c703          	lbu	a4,0(a5) # 1000 <_entry-0x801ff000>
    sa[i] = sb[i];
    8020b04a:	0005c683          	lbu	a3,0(a1)
    8020b04e:	00d78023          	sb	a3,0(a5)
    sb[i] = c;
    8020b052:	00e58023          	sb	a4,0(a1)
  for(int i = 0;i<len;i++){
    8020b056:	0785                	addi	a5,a5,1
    8020b058:	0585                	addi	a1,a1,1
    8020b05a:	fea796e3          	bne	a5,a0,8020b046 <swap+0x16>
  }
}
    8020b05e:	6422                	ld	s0,8(sp)
    8020b060:	0141                	addi	sp,sp,16
    8020b062:	8082                	ret

000000008020b064 <auxalloc>:

void
auxalloc(uint64* aux,uint64 atid,uint64 value)
{
    8020b064:	1141                	addi	sp,sp,-16
    8020b066:	e422                	sd	s0,8(sp)
    8020b068:	0800                	addi	s0,sp,16
  //printf("aux[%d] = %p\n",atid,value);
  uint64 argc = aux[0];
  aux[argc*2+1] = atid;
    8020b06a:	611c                	ld	a5,0(a0)
    8020b06c:	0792                	slli	a5,a5,0x4
    8020b06e:	97aa                	add	a5,a5,a0
    8020b070:	e78c                	sd	a1,8(a5)
  aux[argc*2+2] = value;
    8020b072:	eb90                	sd	a2,16(a5)
  aux[argc*2+3] = 0;
    8020b074:	0007bc23          	sd	zero,24(a5)
  aux[argc*2+4] = 0;
    8020b078:	0207b023          	sd	zero,32(a5)
  aux[0]++;
    8020b07c:	611c                	ld	a5,0(a0)
    8020b07e:	0785                	addi	a5,a5,1
    8020b080:	e11c                	sd	a5,0(a0)
}
    8020b082:	6422                	ld	s0,8(sp)
    8020b084:	0141                	addi	sp,sp,16
    8020b086:	8082                	ret

000000008020b088 <loadaux>:

uint64
loadaux(pagetable_t pagetable,uint64 sp,uint64 stackbase,uint64* aux){
    8020b088:	1101                	addi	sp,sp,-32
    8020b08a:	ec06                	sd	ra,24(sp)
    8020b08c:	e822                	sd	s0,16(sp)
    8020b08e:	e426                	sd	s1,8(sp)
    8020b090:	1000                	addi	s0,sp,32
  int argc = aux[0];
    8020b092:	429c                	lw	a5,0(a3)
  if(!argc)return sp;
    8020b094:	84ae                	mv	s1,a1
    8020b096:	c795                	beqz	a5,8020b0c2 <loadaux+0x3a>
    8020b098:	8736                	mv	a4,a3
  printf("aux argc:%d\n",argc);
  for(int i=1;i<=2*argc+2;i++){
    printf("final raw aux[%d] = %p\n",i,aux[i]);
  }
  */
  sp -= (2*argc+2) * sizeof(uint64);
    8020b09a:	2785                	addiw	a5,a5,1
    8020b09c:	0017979b          	slliw	a5,a5,0x1
    8020b0a0:	00379693          	slli	a3,a5,0x3
    8020b0a4:	40d584b3          	sub	s1,a1,a3
  if(sp < stackbase){
    8020b0a8:	02c4e563          	bltu	s1,a2,8020b0d2 <loadaux+0x4a>
    return -1;
  }
  aux[0] = 0;
    8020b0ac:	00073023          	sd	zero,0(a4)
  if(copyout(pagetable, sp, (char *)(aux+1), (2*argc+2)*sizeof(uint64)) < 0){
    8020b0b0:	00870613          	addi	a2,a4,8
    8020b0b4:	85a6                	mv	a1,s1
    8020b0b6:	ffffe097          	auipc	ra,0xffffe
    8020b0ba:	0a6080e7          	jalr	166(ra) # 8020915c <copyout>
    8020b0be:	00054863          	bltz	a0,8020b0ce <loadaux+0x46>
    return -1;
  }
  return sp;
}
    8020b0c2:	8526                	mv	a0,s1
    8020b0c4:	60e2                	ld	ra,24(sp)
    8020b0c6:	6442                	ld	s0,16(sp)
    8020b0c8:	64a2                	ld	s1,8(sp)
    8020b0ca:	6105                	addi	sp,sp,32
    8020b0cc:	8082                	ret
    return -1;
    8020b0ce:	54fd                	li	s1,-1
    8020b0d0:	bfcd                	j	8020b0c2 <loadaux+0x3a>
    return -1;
    8020b0d2:	54fd                	li	s1,-1
    8020b0d4:	b7fd                	j	8020b0c2 <loadaux+0x3a>

000000008020b0d6 <ustackpushstr>:

uint64 
ustackpushstr(pagetable_t pagetable,uint64* ustack,char* str,uint64 sp,uint64 stackbase)
{
    8020b0d6:	7139                	addi	sp,sp,-64
    8020b0d8:	fc06                	sd	ra,56(sp)
    8020b0da:	f822                	sd	s0,48(sp)
    8020b0dc:	f426                	sd	s1,40(sp)
    8020b0de:	f04a                	sd	s2,32(sp)
    8020b0e0:	ec4e                	sd	s3,24(sp)
    8020b0e2:	e852                	sd	s4,16(sp)
    8020b0e4:	e456                	sd	s5,8(sp)
    8020b0e6:	e05a                	sd	s6,0(sp)
    8020b0e8:	0080                	addi	s0,sp,64
  uint64 argc = ++ustack[0];
    8020b0ea:	0005b983          	ld	s3,0(a1)
    8020b0ee:	0985                	addi	s3,s3,1
    8020b0f0:	0135b023          	sd	s3,0(a1)
  if(argc>MAXARG+1)return -1;
    8020b0f4:	02100793          	li	a5,33
    8020b0f8:	54fd                	li	s1,-1
    8020b0fa:	0537e863          	bltu	a5,s3,8020b14a <ustackpushstr+0x74>
    8020b0fe:	8b2a                	mv	s6,a0
    8020b100:	892e                	mv	s2,a1
    8020b102:	8a32                	mv	s4,a2
    8020b104:	84b6                	mv	s1,a3
    8020b106:	8aba                	mv	s5,a4
  //printf("[exec]push %s\n",str);
  sp -= strlen(str) + 1;
    8020b108:	8532                	mv	a0,a2
    8020b10a:	ffff6097          	auipc	ra,0xffff6
    8020b10e:	df2080e7          	jalr	-526(ra) # 80200efc <strlen>
    8020b112:	0015069b          	addiw	a3,a0,1
    8020b116:	8c95                	sub	s1,s1,a3
  sp -= sp % 16; // riscv sp must be 16-byte aligned
    8020b118:	98c1                	andi	s1,s1,-16
  if(sp < stackbase)
    8020b11a:	0554e363          	bltu	s1,s5,8020b160 <ustackpushstr+0x8a>
      return -1;
  if(copyout(pagetable, sp, str, strlen(str) + 1) < 0)
    8020b11e:	8552                	mv	a0,s4
    8020b120:	ffff6097          	auipc	ra,0xffff6
    8020b124:	ddc080e7          	jalr	-548(ra) # 80200efc <strlen>
    8020b128:	0015069b          	addiw	a3,a0,1
    8020b12c:	8652                	mv	a2,s4
    8020b12e:	85a6                	mv	a1,s1
    8020b130:	855a                	mv	a0,s6
    8020b132:	ffffe097          	auipc	ra,0xffffe
    8020b136:	02a080e7          	jalr	42(ra) # 8020915c <copyout>
    8020b13a:	02054563          	bltz	a0,8020b164 <ustackpushstr+0x8e>
      return -1;
  ustack[argc] = sp;
    8020b13e:	098e                	slli	s3,s3,0x3
    8020b140:	994e                	add	s2,s2,s3
    8020b142:	00993023          	sd	s1,0(s2)
  ustack[argc+1] = 0;
    8020b146:	00093423          	sd	zero,8(s2)
  return sp;
}
    8020b14a:	8526                	mv	a0,s1
    8020b14c:	70e2                	ld	ra,56(sp)
    8020b14e:	7442                	ld	s0,48(sp)
    8020b150:	74a2                	ld	s1,40(sp)
    8020b152:	7902                	ld	s2,32(sp)
    8020b154:	69e2                	ld	s3,24(sp)
    8020b156:	6a42                	ld	s4,16(sp)
    8020b158:	6aa2                	ld	s5,8(sp)
    8020b15a:	6b02                	ld	s6,0(sp)
    8020b15c:	6121                	addi	sp,sp,64
    8020b15e:	8082                	ret
      return -1;
    8020b160:	54fd                	li	s1,-1
    8020b162:	b7e5                	j	8020b14a <ustackpushstr+0x74>
      return -1;
    8020b164:	54fd                	li	s1,-1
    8020b166:	b7d5                	j	8020b14a <ustackpushstr+0x74>

000000008020b168 <stackdisplay>:

void
stackdisplay(pagetable_t pagetable,uint64 sp,uint64 sz)
{
  for(uint64 i = sp;i<sz;i+=8){
    8020b168:	06c5f863          	bgeu	a1,a2,8020b1d8 <stackdisplay+0x70>
{
    8020b16c:	7139                	addi	sp,sp,-64
    8020b16e:	fc06                	sd	ra,56(sp)
    8020b170:	f822                	sd	s0,48(sp)
    8020b172:	f426                	sd	s1,40(sp)
    8020b174:	f04a                	sd	s2,32(sp)
    8020b176:	ec4e                	sd	s3,24(sp)
    8020b178:	e852                	sd	s4,16(sp)
    8020b17a:	e456                	sd	s5,8(sp)
    8020b17c:	0080                	addi	s0,sp,64
    8020b17e:	89aa                	mv	s3,a0
    8020b180:	84ae                	mv	s1,a1
    8020b182:	8932                	mv	s2,a2
    uint64 *pa = (void*)kwalkaddr1(pagetable,i);
    if(pa)printf("addr %p value %p\n",i,*pa);
    else printf("addr %p value (nil)\n",i);
    8020b184:	00007a97          	auipc	s5,0x7
    8020b188:	5eca8a93          	addi	s5,s5,1516 # 80212770 <vma_type+0x2f8>
    if(pa)printf("addr %p value %p\n",i,*pa);
    8020b18c:	00007a17          	auipc	s4,0x7
    8020b190:	5cca0a13          	addi	s4,s4,1484 # 80212758 <vma_type+0x2e0>
    8020b194:	a811                	j	8020b1a8 <stackdisplay+0x40>
    else printf("addr %p value (nil)\n",i);
    8020b196:	85a6                	mv	a1,s1
    8020b198:	8556                	mv	a0,s5
    8020b19a:	ffffc097          	auipc	ra,0xffffc
    8020b19e:	d7e080e7          	jalr	-642(ra) # 80206f18 <printf>
  for(uint64 i = sp;i<sz;i+=8){
    8020b1a2:	04a1                	addi	s1,s1,8
    8020b1a4:	0324f163          	bgeu	s1,s2,8020b1c6 <stackdisplay+0x5e>
    uint64 *pa = (void*)kwalkaddr1(pagetable,i);
    8020b1a8:	85a6                	mv	a1,s1
    8020b1aa:	854e                	mv	a0,s3
    8020b1ac:	ffffd097          	auipc	ra,0xffffd
    8020b1b0:	1b8080e7          	jalr	440(ra) # 80208364 <kwalkaddr1>
    if(pa)printf("addr %p value %p\n",i,*pa);
    8020b1b4:	d16d                	beqz	a0,8020b196 <stackdisplay+0x2e>
    8020b1b6:	6110                	ld	a2,0(a0)
    8020b1b8:	85a6                	mv	a1,s1
    8020b1ba:	8552                	mv	a0,s4
    8020b1bc:	ffffc097          	auipc	ra,0xffffc
    8020b1c0:	d5c080e7          	jalr	-676(ra) # 80206f18 <printf>
    8020b1c4:	bff9                	j	8020b1a2 <stackdisplay+0x3a>
  }
}
    8020b1c6:	70e2                	ld	ra,56(sp)
    8020b1c8:	7442                	ld	s0,48(sp)
    8020b1ca:	74a2                	ld	s1,40(sp)
    8020b1cc:	7902                	ld	s2,32(sp)
    8020b1ce:	69e2                	ld	s3,24(sp)
    8020b1d0:	6a42                	ld	s4,16(sp)
    8020b1d2:	6aa2                	ld	s5,8(sp)
    8020b1d4:	6121                	addi	sp,sp,64
    8020b1d6:	8082                	ret
    8020b1d8:	8082                	ret

000000008020b1da <zerocheck>:

void zerocheck(pagetable_t pagetable, uint64 va,int len){
    8020b1da:	7179                	addi	sp,sp,-48
    8020b1dc:	f406                	sd	ra,40(sp)
    8020b1de:	f022                	sd	s0,32(sp)
    8020b1e0:	ec26                	sd	s1,24(sp)
    8020b1e2:	e84a                	sd	s2,16(sp)
    8020b1e4:	e44e                	sd	s3,8(sp)
    8020b1e6:	1800                	addi	s0,sp,48
    8020b1e8:	84aa                	mv	s1,a0
    8020b1ea:	89ae                	mv	s3,a1
    8020b1ec:	8932                	mv	s2,a2
  printf("[exec] check %p\n",va);
    8020b1ee:	00007517          	auipc	a0,0x7
    8020b1f2:	59a50513          	addi	a0,a0,1434 # 80212788 <vma_type+0x310>
    8020b1f6:	ffffc097          	auipc	ra,0xffffc
    8020b1fa:	d22080e7          	jalr	-734(ra) # 80206f18 <printf>
  char* pa = (void*)kwalkaddr1(pagetable,va);
    8020b1fe:	85ce                	mv	a1,s3
    8020b200:	8526                	mv	a0,s1
    8020b202:	ffffd097          	auipc	ra,0xffffd
    8020b206:	162080e7          	jalr	354(ra) # 80208364 <kwalkaddr1>
  if(pa){
    8020b20a:	e901                	bnez	a0,8020b21a <zerocheck+0x40>
    for(int i = 0;i*8<len;i++){
      *(pa+i) = 0;
    }
  }
  
}
    8020b20c:	70a2                	ld	ra,40(sp)
    8020b20e:	7402                	ld	s0,32(sp)
    8020b210:	64e2                	ld	s1,24(sp)
    8020b212:	6942                	ld	s2,16(sp)
    8020b214:	69a2                	ld	s3,8(sp)
    8020b216:	6145                	addi	sp,sp,48
    8020b218:	8082                	ret
    8020b21a:	84aa                	mv	s1,a0
    printf("[exec] set zero at va:%p pa:%p\n",va,pa);
    8020b21c:	862a                	mv	a2,a0
    8020b21e:	85ce                	mv	a1,s3
    8020b220:	00007517          	auipc	a0,0x7
    8020b224:	58050513          	addi	a0,a0,1408 # 802127a0 <vma_type+0x328>
    8020b228:	ffffc097          	auipc	ra,0xffffc
    8020b22c:	cf0080e7          	jalr	-784(ra) # 80206f18 <printf>
    for(int i = 0;i*8<len;i++){
    8020b230:	fd205ee3          	blez	s2,8020b20c <zerocheck+0x32>
    8020b234:	fff9079b          	addiw	a5,s2,-1
    8020b238:	0037d79b          	srliw	a5,a5,0x3
    8020b23c:	0785                	addi	a5,a5,1
    8020b23e:	97a6                	add	a5,a5,s1
      *(pa+i) = 0;
    8020b240:	00048023          	sb	zero,0(s1)
    for(int i = 0;i*8<len;i++){
    8020b244:	0485                	addi	s1,s1,1
    8020b246:	fef49de3          	bne	s1,a5,8020b240 <zerocheck+0x66>
    8020b24a:	b7c9                	j	8020b20c <zerocheck+0x32>

000000008020b24c <exec>:
  

int
exec(char *path, char **argv, char **env)
{
    8020b24c:	b4010113          	addi	sp,sp,-1216
    8020b250:	4a113c23          	sd	ra,1208(sp)
    8020b254:	4a813823          	sd	s0,1200(sp)
    8020b258:	4a913423          	sd	s1,1192(sp)
    8020b25c:	4b213023          	sd	s2,1184(sp)
    8020b260:	49313c23          	sd	s3,1176(sp)
    8020b264:	49413823          	sd	s4,1168(sp)
    8020b268:	49513423          	sd	s5,1160(sp)
    8020b26c:	49613023          	sd	s6,1152(sp)
    8020b270:	47713c23          	sd	s7,1144(sp)
    8020b274:	47813823          	sd	s8,1136(sp)
    8020b278:	47913423          	sd	s9,1128(sp)
    8020b27c:	47a13023          	sd	s10,1120(sp)
    8020b280:	45b13c23          	sd	s11,1112(sp)
    8020b284:	4c010413          	addi	s0,sp,1216
    8020b288:	b6a43023          	sd	a0,-1184(s0)
    8020b28c:	b4b43823          	sd	a1,-1200(s0)
    8020b290:	b4c43023          	sd	a2,-1216(s0)
  int shflag = 0;
  uint64 sp,stackbase,entry;
  uint64 argc,envnum;
  uint64 aux[AUX_CNT*2+3] = {0,0,0};
    8020b294:	21800613          	li	a2,536
    8020b298:	4581                	li	a1,0
    8020b29a:	d7840513          	addi	a0,s0,-648
    8020b29e:	ffff6097          	auipc	ra,0xffff6
    8020b2a2:	ad6080e7          	jalr	-1322(ra) # 80200d74 <memset>
  uint64 environ[10]={0};
    8020b2a6:	d2043423          	sd	zero,-728(s0)
    8020b2aa:	d2043823          	sd	zero,-720(s0)
    8020b2ae:	d2043c23          	sd	zero,-712(s0)
    8020b2b2:	d4043023          	sd	zero,-704(s0)
    8020b2b6:	d4043423          	sd	zero,-696(s0)
    8020b2ba:	d4043823          	sd	zero,-688(s0)
    8020b2be:	d4043c23          	sd	zero,-680(s0)
    8020b2c2:	d6043023          	sd	zero,-672(s0)
    8020b2c6:	d6043423          	sd	zero,-664(s0)
    8020b2ca:	d6043823          	sd	zero,-656(s0)
  uint64 ustack[MAXARG+2];
  char *last,*s;
  struct proc* p = myproc();
    8020b2ce:	fffff097          	auipc	ra,0xfffff
    8020b2d2:	85c080e7          	jalr	-1956(ra) # 80209b2a <myproc>
    8020b2d6:	84aa                	mv	s1,a0
    8020b2d8:	b6a43823          	sd	a0,-1168(s0)
  struct proc* np = kmalloc(sizeof(struct proc));
    8020b2dc:	1d000513          	li	a0,464
    8020b2e0:	ffffd097          	auipc	ra,0xffffd
    8020b2e4:	8e4080e7          	jalr	-1820(ra) # 80207bc4 <kmalloc>
    8020b2e8:	8baa                	mv	s7,a0
  struct elfhdr elf;
  struct dirent *ep;
  np->trapframe = allocpage();
    8020b2ea:	ffffc097          	auipc	ra,0xffffc
    8020b2ee:	652080e7          	jalr	1618(ra) # 8020793c <_allocpage>
    8020b2f2:	06abb423          	sd	a0,104(s7)
  memcpy(np->trapframe,p->trapframe,sizeof(struct trapframe));
    8020b2f6:	12000613          	li	a2,288
    8020b2fa:	74ac                	ld	a1,104(s1)
    8020b2fc:	ffff6097          	auipc	ra,0xffff6
    8020b300:	b3c080e7          	jalr	-1220(ra) # 80200e38 <memcpy>
  for(int aaa = 0;argv[aaa];aaa++){
    __debug_warn("[exec] exec argv[%d] %s\n",aaa,argv[aaa]);
  }
  */
  
  if ((proc_pagetable(np, 0, 0)) == NULL) {
    8020b304:	4601                	li	a2,0
    8020b306:	4581                	li	a1,0
    8020b308:	855e                	mv	a0,s7
    8020b30a:	ffff6097          	auipc	ra,0xffff6
    8020b30e:	4f2080e7          	jalr	1266(ra) # 802017fc <proc_pagetable>
    8020b312:	cd35                	beqz	a0,8020b38e <exec+0x142>
    __debug_warn("[exec]vma init bad\n");
    goto bad;
  }

  if((ep = ename(NULL,path,0)) == NULL) {
    8020b314:	4601                	li	a2,0
    8020b316:	b6043583          	ld	a1,-1184(s0)
    8020b31a:	4501                	li	a0,0
    8020b31c:	ffff9097          	auipc	ra,0xffff9
    8020b320:	01e080e7          	jalr	30(ra) # 8020433a <ename>
    8020b324:	8b2a                	mv	s6,a0
    8020b326:	cd2d                	beqz	a0,8020b3a0 <exec+0x154>
    __debug_warn("[exec] %s not found\n", path);
    goto bad;
  }
  
  elock(ep);
    8020b328:	ffff8097          	auipc	ra,0xffff8
    8020b32c:	5d0080e7          	jalr	1488(ra) # 802038f8 <elock>
  
  int len = strlen(ep->filename);
    8020b330:	855a                	mv	a0,s6
    8020b332:	ffff6097          	auipc	ra,0xffff6
    8020b336:	bca080e7          	jalr	-1078(ra) # 80200efc <strlen>
  if(strncmp(ep->filename+len-3,".sh",3)==0){
    8020b33a:	1575                	addi	a0,a0,-3
    8020b33c:	460d                	li	a2,3
    8020b33e:	00007597          	auipc	a1,0x7
    8020b342:	4b258593          	addi	a1,a1,1202 # 802127f0 <vma_type+0x378>
    8020b346:	955a                	add	a0,a0,s6
    8020b348:	ffff6097          	auipc	ra,0xffff6
    8020b34c:	b08080e7          	jalr	-1272(ra) # 80200e50 <strncmp>
    8020b350:	ed35                	bnez	a0,8020b3cc <exec+0x180>
    shflag = 1;
    eunlock(ep);
    8020b352:	855a                	mv	a0,s6
    8020b354:	ffff8097          	auipc	ra,0xffff8
    8020b358:	5da080e7          	jalr	1498(ra) # 8020392e <eunlock>
    eput(ep);
    8020b35c:	855a                	mv	a0,s6
    8020b35e:	ffff8097          	auipc	ra,0xffff8
    8020b362:	61e080e7          	jalr	1566(ra) # 8020397c <eput>
    if((ep = ename(NULL,"/busybox",0))==NULL){
    8020b366:	4601                	li	a2,0
    8020b368:	00007597          	auipc	a1,0x7
    8020b36c:	49058593          	addi	a1,a1,1168 # 802127f8 <vma_type+0x380>
    8020b370:	4501                	li	a0,0
    8020b372:	ffff9097          	auipc	ra,0xffff9
    8020b376:	fc8080e7          	jalr	-56(ra) # 8020433a <ename>
    8020b37a:	8b2a                	mv	s6,a0
    8020b37c:	cd0d                	beqz	a0,8020b3b6 <exec+0x16a>
      __debug_warn("[exec] %s not found\n", path);
      goto bad;
    }
    elock(ep);
    8020b37e:	ffff8097          	auipc	ra,0xffff8
    8020b382:	57a080e7          	jalr	1402(ra) # 802038f8 <elock>
    shflag = 1;
    8020b386:	4785                	li	a5,1
    8020b388:	b4f43423          	sd	a5,-1208(s0)
    8020b38c:	a091                	j	8020b3d0 <exec+0x184>
    __debug_warn("[exec]vma init bad\n");
    8020b38e:	00007517          	auipc	a0,0x7
    8020b392:	43250513          	addi	a0,a0,1074 # 802127c0 <vma_type+0x348>
    8020b396:	ffffc097          	auipc	ra,0xffffc
    8020b39a:	f0e080e7          	jalr	-242(ra) # 802072a4 <__debug_warn>
    goto bad;
    8020b39e:	a30d                	j	8020b8c0 <exec+0x674>
    __debug_warn("[exec] %s not found\n", path);
    8020b3a0:	b6043583          	ld	a1,-1184(s0)
    8020b3a4:	00007517          	auipc	a0,0x7
    8020b3a8:	43450513          	addi	a0,a0,1076 # 802127d8 <vma_type+0x360>
    8020b3ac:	ffffc097          	auipc	ra,0xffffc
    8020b3b0:	ef8080e7          	jalr	-264(ra) # 802072a4 <__debug_warn>
    goto bad;
    8020b3b4:	a331                	j	8020b8c0 <exec+0x674>
      __debug_warn("[exec] %s not found\n", path);
    8020b3b6:	b6043583          	ld	a1,-1184(s0)
    8020b3ba:	00007517          	auipc	a0,0x7
    8020b3be:	41e50513          	addi	a0,a0,1054 # 802127d8 <vma_type+0x360>
    8020b3c2:	ffffc097          	auipc	ra,0xffffc
    8020b3c6:	ee2080e7          	jalr	-286(ra) # 802072a4 <__debug_warn>
      goto bad;
    8020b3ca:	a9dd                	j	8020b8c0 <exec+0x674>
  int shflag = 0;
    8020b3cc:	b4043423          	sd	zero,-1208(s0)
  if(eread(ep, 0, (uint64)elf, 0, sizeof(struct elfhdr)) != sizeof(struct elfhdr))
    8020b3d0:	04000713          	li	a4,64
    8020b3d4:	4681                	li	a3,0
    8020b3d6:	bd840613          	addi	a2,s0,-1064
    8020b3da:	4581                	li	a1,0
    8020b3dc:	855a                	mv	a0,s6
    8020b3de:	ffff8097          	auipc	ra,0xffff8
    8020b3e2:	b3a080e7          	jalr	-1222(ra) # 80202f18 <eread>
    8020b3e6:	04000793          	li	a5,64
    8020b3ea:	04f51363          	bne	a0,a5,8020b430 <exec+0x1e4>
  }
  
  
  // Check ELF header
  if(readelfhdr(ep,&elf)<0){
    8020b3ee:	bd842703          	lw	a4,-1064(s0)
    8020b3f2:	464c47b7          	lui	a5,0x464c4
    8020b3f6:	57f78793          	addi	a5,a5,1407 # 464c457f <_entry-0x39d3ba81>
    8020b3fa:	02f71b63          	bne	a4,a5,8020b430 <exec+0x1e4>
  pagetable_t pagetable = p->pagetable;
    8020b3fe:	060bb783          	ld	a5,96(s7)
    8020b402:	b8f43423          	sd	a5,-1144(s0)
  for(int i=0, off=elf->phoff; i<elf->phnum; i++, off+=sizeof(ph)){
    8020b406:	bf842903          	lw	s2,-1032(s0)
    8020b40a:	c1045783          	lhu	a5,-1008(s0)
    8020b40e:	20078563          	beqz	a5,8020b618 <exec+0x3cc>
    __debug_warn("[exec] %s is not a elf\n", path);
    goto bad;
  }
  struct proghdr phdr = {0};
    8020b412:	b6043c23          	sd	zero,-1160(s0)
  for(int i=0, off=elf->phoff; i<elf->phnum; i++, off+=sizeof(ph)){
    8020b416:	4c01                	li	s8,0
  int getphdr = 0;
    8020b418:	b8043023          	sd	zero,-1152(s0)
  if((va % PGSIZE) != 0){
    8020b41c:	6d05                	lui	s10,0x1
    8020b41e:	fffd0793          	addi	a5,s10,-1 # fff <_entry-0x801ff001>
    8020b422:	b6f43423          	sd	a5,-1176(s0)
    if(sz - i < rest)
    8020b426:	57fd                	li	a5,-1
    8020b428:	9381                	srli	a5,a5,0x20
    8020b42a:	b4f43c23          	sd	a5,-1192(s0)
    8020b42e:	a24d                	j	8020b5d0 <exec+0x384>
    __debug_warn("[exec] %s is not a elf\n", path);
    8020b430:	b6043583          	ld	a1,-1184(s0)
    8020b434:	00007517          	auipc	a0,0x7
    8020b438:	3d450513          	addi	a0,a0,980 # 80212808 <vma_type+0x390>
    8020b43c:	ffffc097          	auipc	ra,0xffffc
    8020b440:	e68080e7          	jalr	-408(ra) # 802072a4 <__debug_warn>
    goto bad;
    8020b444:	a9b5                	j	8020b8c0 <exec+0x674>
      if(ph.memsz < ph.filesz){
    8020b446:	bb843603          	ld	a2,-1096(s0)
    8020b44a:	bb043783          	ld	a5,-1104(s0)
    8020b44e:	04f66d63          	bltu	a2,a5,8020b4a8 <exec+0x25c>
      if(ph.vaddr + ph.memsz < ph.vaddr){
    8020b452:	ba043a83          	ld	s5,-1120(s0)
    8020b456:	015607b3          	add	a5,a2,s5
    8020b45a:	0757ed63          	bltu	a5,s5,8020b4d4 <exec+0x288>
      if(!getphdr&&phdr&&ph.off == 0){ 
    8020b45e:	b8043783          	ld	a5,-1152(s0)
    8020b462:	eb89                	bnez	a5,8020b474 <exec+0x228>
    8020b464:	b9843783          	ld	a5,-1128(s0)
    8020b468:	e791                	bnez	a5,8020b474 <exec+0x228>
        phdr->vaddr = elf->phoff + ph.vaddr;
    8020b46a:	bf843783          	ld	a5,-1032(s0)
    8020b46e:	97d6                	add	a5,a5,s5
    8020b470:	b6f43c23          	sd	a5,-1160(s0)
      if(alloc_load_vma(p, load_start, ph.memsz, PTE_R|PTE_W|PTE_X|PTE_U)== NULL){
    8020b474:	46f9                	li	a3,30
    8020b476:	85d6                	mv	a1,s5
    8020b478:	855e                	mv	a0,s7
    8020b47a:	fffff097          	auipc	ra,0xfffff
    8020b47e:	c44080e7          	jalr	-956(ra) # 8020a0be <alloc_load_vma>
    8020b482:	c135                	beqz	a0,8020b4e6 <exec+0x29a>
      if(loadseg(pagetable, load_start, ep, ph.off, ph.filesz) < 0){
    8020b484:	b9842d83          	lw	s11,-1128(s0)
    8020b488:	bb043a03          	ld	s4,-1104(s0)
    8020b48c:	000a0c9b          	sext.w	s9,s4
  if((va % PGSIZE) != 0){
    8020b490:	b6843783          	ld	a5,-1176(s0)
    8020b494:	00faf9b3          	and	s3,s5,a5
  i = 0;
    8020b498:	4481                	li	s1,0
  if((va % PGSIZE) != 0){
    8020b49a:	04099f63          	bnez	s3,8020b4f8 <exec+0x2ac>
  for(; i < sz; i += PGSIZE){
    8020b49e:	409c89bb          	subw	s3,s9,s1
    8020b4a2:	0f94e863          	bltu	s1,s9,8020b592 <exec+0x346>
    8020b4a6:	aa31                	j	8020b5c2 <exec+0x376>
        __debug_warn("[exec]load memsz>filesz\n");
    8020b4a8:	00007517          	auipc	a0,0x7
    8020b4ac:	37850513          	addi	a0,a0,888 # 80212820 <vma_type+0x3a8>
    8020b4b0:	ffffc097          	auipc	ra,0xffffc
    8020b4b4:	df4080e7          	jalr	-524(ra) # 802072a4 <__debug_warn>
  entry = loadelf(np,ep,&elf,&phdr,0);
  if(entry==-1){
    eunlock(ep);
    8020b4b8:	855a                	mv	a0,s6
    8020b4ba:	ffff8097          	auipc	ra,0xffff8
    8020b4be:	474080e7          	jalr	1140(ra) # 8020392e <eunlock>
    __debug_warn("[exec]load elf bad\n");
    8020b4c2:	00007517          	auipc	a0,0x7
    8020b4c6:	3fe50513          	addi	a0,a0,1022 # 802128c0 <vma_type+0x448>
    8020b4ca:	ffffc097          	auipc	ra,0xffffc
    8020b4ce:	dda080e7          	jalr	-550(ra) # 802072a4 <__debug_warn>
    goto bad;
    8020b4d2:	a6fd                	j	8020b8c0 <exec+0x674>
        __debug_warn("[exec]memsz not positive\n");
    8020b4d4:	00007517          	auipc	a0,0x7
    8020b4d8:	36c50513          	addi	a0,a0,876 # 80212840 <vma_type+0x3c8>
    8020b4dc:	ffffc097          	auipc	ra,0xffffc
    8020b4e0:	dc8080e7          	jalr	-568(ra) # 802072a4 <__debug_warn>
        return -1;
    8020b4e4:	bfd1                	j	8020b4b8 <exec+0x26c>
        __debug_warn("[exec]grow space failed\n");
    8020b4e6:	00007517          	auipc	a0,0x7
    8020b4ea:	37a50513          	addi	a0,a0,890 # 80212860 <vma_type+0x3e8>
    8020b4ee:	ffffc097          	auipc	ra,0xffffc
    8020b4f2:	db6080e7          	jalr	-586(ra) # 802072a4 <__debug_warn>
        return -1;
    8020b4f6:	b7c9                	j	8020b4b8 <exec+0x26c>
    uint64 rest = PGSIZE -off;
    8020b4f8:	413d04b3          	sub	s1,s10,s3
    pa = walkaddr(pagetable, va)+off;
    8020b4fc:	85d6                	mv	a1,s5
    8020b4fe:	b8843503          	ld	a0,-1144(s0)
    8020b502:	ffffd097          	auipc	ra,0xffffd
    8020b506:	d5a080e7          	jalr	-678(ra) # 8020825c <walkaddr>
    8020b50a:	00a98633          	add	a2,s3,a0
    if(pa == NULL)
    8020b50e:	ce1d                	beqz	a2,8020b54c <exec+0x300>
    if(sz - i < rest)
    8020b510:	b5843783          	ld	a5,-1192(s0)
    8020b514:	00fa7a33          	and	s4,s4,a5
      n = sz - i;
    8020b518:	89e6                	mv	s3,s9
    if(sz - i < rest)
    8020b51a:	009a6463          	bltu	s4,s1,8020b522 <exec+0x2d6>
      n = rest;
    8020b51e:	0004899b          	sext.w	s3,s1
    if(eread(ep, 0, (uint64)pa, offset+i, n) != n)
    8020b522:	874e                	mv	a4,s3
    8020b524:	86ee                	mv	a3,s11
    8020b526:	4581                	li	a1,0
    8020b528:	855a                	mv	a0,s6
    8020b52a:	ffff8097          	auipc	ra,0xffff8
    8020b52e:	9ee080e7          	jalr	-1554(ra) # 80202f18 <eread>
    8020b532:	0005049b          	sext.w	s1,a0
    8020b536:	f69984e3          	beq	s3,s1,8020b49e <exec+0x252>
        printf("[exec]load segment failed\n");
    8020b53a:	00007517          	auipc	a0,0x7
    8020b53e:	4a650513          	addi	a0,a0,1190 # 802129e0 <vma_type+0x568>
    8020b542:	ffffc097          	auipc	ra,0xffffc
    8020b546:	9d6080e7          	jalr	-1578(ra) # 80206f18 <printf>
        return -1;
    8020b54a:	b7bd                	j	8020b4b8 <exec+0x26c>
      panic("loadseg: address should exist");
    8020b54c:	00007517          	auipc	a0,0x7
    8020b550:	33450513          	addi	a0,a0,820 # 80212880 <vma_type+0x408>
    8020b554:	ffffc097          	auipc	ra,0xffffc
    8020b558:	97a080e7          	jalr	-1670(ra) # 80206ece <panic>
      panic("loadseg: address should exist");
    8020b55c:	00007517          	auipc	a0,0x7
    8020b560:	32450513          	addi	a0,a0,804 # 80212880 <vma_type+0x408>
    8020b564:	ffffc097          	auipc	ra,0xffffc
    8020b568:	96a080e7          	jalr	-1686(ra) # 80206ece <panic>
    if(eread(ep, 0, (uint64)pa, offset+i, n) != n)
    8020b56c:	8752                	mv	a4,s4
    8020b56e:	009d86bb          	addw	a3,s11,s1
    8020b572:	4581                	li	a1,0
    8020b574:	855a                	mv	a0,s6
    8020b576:	ffff8097          	auipc	ra,0xffff8
    8020b57a:	9a2080e7          	jalr	-1630(ra) # 80202f18 <eread>
    8020b57e:	2501                	sext.w	a0,a0
    8020b580:	faaa1de3          	bne	s4,a0,8020b53a <exec+0x2ee>
  for(; i < sz; i += PGSIZE){
    8020b584:	6785                	lui	a5,0x1
    8020b586:	9cbd                	addw	s1,s1,a5
    8020b588:	77fd                	lui	a5,0xfffff
    8020b58a:	013789bb          	addw	s3,a5,s3
    8020b58e:	0394fa63          	bgeu	s1,s9,8020b5c2 <exec+0x376>
    pa = walkaddr(pagetable, va + i);
    8020b592:	02049593          	slli	a1,s1,0x20
    8020b596:	9181                	srli	a1,a1,0x20
    8020b598:	95d6                	add	a1,a1,s5
    8020b59a:	b8843503          	ld	a0,-1144(s0)
    8020b59e:	ffffd097          	auipc	ra,0xffffd
    8020b5a2:	cbe080e7          	jalr	-834(ra) # 8020825c <walkaddr>
    8020b5a6:	862a                	mv	a2,a0
    if(pa == NULL)
    8020b5a8:	d955                	beqz	a0,8020b55c <exec+0x310>
      n = PGSIZE;
    8020b5aa:	8a6a                	mv	s4,s10
    if(sz - i < PGSIZE)
    8020b5ac:	fda9f0e3          	bgeu	s3,s10,8020b56c <exec+0x320>
      n = sz - i;
    8020b5b0:	8a4e                	mv	s4,s3
    8020b5b2:	bf6d                	j	8020b56c <exec+0x320>
        *phdr = ph;
    8020b5b4:	ba043783          	ld	a5,-1120(s0)
    8020b5b8:	b6f43c23          	sd	a5,-1160(s0)
        getphdr = 1;
    8020b5bc:	4785                	li	a5,1
    8020b5be:	b8f43023          	sd	a5,-1152(s0)
  for(int i=0, off=elf->phoff; i<elf->phnum; i++, off+=sizeof(ph)){
    8020b5c2:	2c05                	addiw	s8,s8,1
    8020b5c4:	0389091b          	addiw	s2,s2,56
    8020b5c8:	c1045783          	lhu	a5,-1008(s0)
    8020b5cc:	04fc5863          	bge	s8,a5,8020b61c <exec+0x3d0>
    if(eread(ep, 0, (uint64)&ph, off, sizeof(ph)) != sizeof(ph))
    8020b5d0:	2901                	sext.w	s2,s2
    8020b5d2:	03800713          	li	a4,56
    8020b5d6:	86ca                	mv	a3,s2
    8020b5d8:	b9040613          	addi	a2,s0,-1136
    8020b5dc:	4581                	li	a1,0
    8020b5de:	855a                	mv	a0,s6
    8020b5e0:	ffff8097          	auipc	ra,0xffff8
    8020b5e4:	938080e7          	jalr	-1736(ra) # 80202f18 <eread>
    8020b5e8:	03800793          	li	a5,56
    8020b5ec:	ecf516e3          	bne	a0,a5,8020b4b8 <exec+0x26c>
    if(ph.type == ELF_PROG_LOAD){
    8020b5f0:	b9042783          	lw	a5,-1136(s0)
    8020b5f4:	4705                	li	a4,1
    8020b5f6:	e4e788e3          	beq	a5,a4,8020b446 <exec+0x1fa>
    }else if(ph.type==ELF_PROG_PHDR){
    8020b5fa:	4719                	li	a4,6
    8020b5fc:	fae78ce3          	beq	a5,a4,8020b5b4 <exec+0x368>
    }else if(ph.type==ELF_PROG_INTERP){
    8020b600:	470d                	li	a4,3
    8020b602:	fce790e3          	bne	a5,a4,8020b5c2 <exec+0x376>
      __debug_warn("[exec]dynamic load not success\n");
    8020b606:	00007517          	auipc	a0,0x7
    8020b60a:	29a50513          	addi	a0,a0,666 # 802128a0 <vma_type+0x428>
    8020b60e:	ffffc097          	auipc	ra,0xffffc
    8020b612:	c96080e7          	jalr	-874(ra) # 802072a4 <__debug_warn>
    8020b616:	b775                	j	8020b5c2 <exec+0x376>
  struct proghdr phdr = {0};
    8020b618:	b6043c23          	sd	zero,-1160(s0)
  return elf->entry;
    8020b61c:	bf043983          	ld	s3,-1040(s0)
  if(entry==-1){
    8020b620:	57fd                	li	a5,-1
    8020b622:	e8f98be3          	beq	s3,a5,8020b4b8 <exec+0x26c>
  }
  eunlock(ep);
    8020b626:	855a                	mv	a0,s6
    8020b628:	ffff8097          	auipc	ra,0xffff8
    8020b62c:	306080e7          	jalr	774(ra) # 8020392e <eunlock>
  eput(ep);
    8020b630:	855a                	mv	a0,s6
    8020b632:	ffff8097          	auipc	ra,0xffff8
    8020b636:	34a080e7          	jalr	842(ra) # 8020397c <eput>
  //print_vma_info(p);
  //print_vma_info(np);
  struct vma* stack_vma = type_locate_vma(np->vma,STACK);
    8020b63a:	459d                	li	a1,7
    8020b63c:	170bb503          	ld	a0,368(s7)
    8020b640:	ffffe097          	auipc	ra,0xffffe
    8020b644:	680080e7          	jalr	1664(ra) # 80209cc0 <type_locate_vma>
  sp = stack_vma->end;
    8020b648:	6d14                	ld	a3,24(a0)
  stackbase = stack_vma->addr;
    8020b64a:	00853a03          	ld	s4,8(a0)
  ustack[0] = environ[0] =0;
    8020b64e:	d2043423          	sd	zero,-728(s0)
    8020b652:	c0043c23          	sd	zero,-1000(s0)
  if((sp = ustackpushstr(np->pagetable,environ,"LD_LIBRARY_PATH=/",sp,stackbase))==-1){
    8020b656:	8752                	mv	a4,s4
    8020b658:	00007617          	auipc	a2,0x7
    8020b65c:	28060613          	addi	a2,a2,640 # 802128d8 <vma_type+0x460>
    8020b660:	d2840593          	addi	a1,s0,-728
    8020b664:	060bb503          	ld	a0,96(s7)
    8020b668:	00000097          	auipc	ra,0x0
    8020b66c:	a6e080e7          	jalr	-1426(ra) # 8020b0d6 <ustackpushstr>
    8020b670:	57fd                	li	a5,-1
    8020b672:	24f50763          	beq	a0,a5,8020b8c0 <exec+0x674>
    if((sp = ustackpushstr(np->pagetable,ustack,path,sp,stackbase))==-1){
      goto bad;
    }
#endif
  }
  uint64 random[2] = { 0xcde142a16cb93072, 0x128a39c127d8bbf2 };
    8020b676:	00009797          	auipc	a5,0x9
    8020b67a:	b927b783          	ld	a5,-1134(a5) # 80214208 <erodata+0x18>
    8020b67e:	bcf43423          	sd	a5,-1080(s0)
    8020b682:	00009797          	auipc	a5,0x9
    8020b686:	b8e7b783          	ld	a5,-1138(a5) # 80214210 <erodata+0x20>
    8020b68a:	bcf43823          	sd	a5,-1072(s0)
  sp -= 16;
    8020b68e:	ff050493          	addi	s1,a0,-16
  if (sp < stackbase || copyout(np->pagetable, sp, (char *)random, 16) < 0) {
    8020b692:	1d44eb63          	bltu	s1,s4,8020b868 <exec+0x61c>
    8020b696:	46c1                	li	a3,16
    8020b698:	bc840613          	addi	a2,s0,-1080
    8020b69c:	85a6                	mv	a1,s1
    8020b69e:	060bb503          	ld	a0,96(s7)
    8020b6a2:	ffffe097          	auipc	ra,0xffffe
    8020b6a6:	aba080e7          	jalr	-1350(ra) # 8020915c <copyout>
    8020b6aa:	1a054f63          	bltz	a0,8020b868 <exec+0x61c>
    goto bad;
  }


  //auxalloc(aux,AT_HWCAP, 0x112d);
  auxalloc(aux,AT_PAGESZ,PGSIZE);
    8020b6ae:	6605                	lui	a2,0x1
    8020b6b0:	4599                	li	a1,6
    8020b6b2:	d7840513          	addi	a0,s0,-648
    8020b6b6:	00000097          	auipc	ra,0x0
    8020b6ba:	9ae080e7          	jalr	-1618(ra) # 8020b064 <auxalloc>
  auxalloc(aux,AT_PHDR, phdr.vaddr);
    8020b6be:	b7843603          	ld	a2,-1160(s0)
    8020b6c2:	458d                	li	a1,3
    8020b6c4:	d7840513          	addi	a0,s0,-648
    8020b6c8:	00000097          	auipc	ra,0x0
    8020b6cc:	99c080e7          	jalr	-1636(ra) # 8020b064 <auxalloc>
  auxalloc(aux,AT_PHENT, elf.phentsize);
    8020b6d0:	c0e45603          	lhu	a2,-1010(s0)
    8020b6d4:	4591                	li	a1,4
    8020b6d6:	d7840513          	addi	a0,s0,-648
    8020b6da:	00000097          	auipc	ra,0x0
    8020b6de:	98a080e7          	jalr	-1654(ra) # 8020b064 <auxalloc>
  auxalloc(aux,AT_PHNUM, elf.phnum);
    8020b6e2:	c1045603          	lhu	a2,-1008(s0)
    8020b6e6:	4595                	li	a1,5
    8020b6e8:	d7840513          	addi	a0,s0,-648
    8020b6ec:	00000097          	auipc	ra,0x0
    8020b6f0:	978080e7          	jalr	-1672(ra) # 8020b064 <auxalloc>
  auxalloc(aux,AT_UID, 0);
    8020b6f4:	4601                	li	a2,0
    8020b6f6:	45ad                	li	a1,11
    8020b6f8:	d7840513          	addi	a0,s0,-648
    8020b6fc:	00000097          	auipc	ra,0x0
    8020b700:	968080e7          	jalr	-1688(ra) # 8020b064 <auxalloc>
  auxalloc(aux,AT_EUID, 0);
    8020b704:	4601                	li	a2,0
    8020b706:	45b1                	li	a1,12
    8020b708:	d7840513          	addi	a0,s0,-648
    8020b70c:	00000097          	auipc	ra,0x0
    8020b710:	958080e7          	jalr	-1704(ra) # 8020b064 <auxalloc>
  auxalloc(aux,AT_GID, 0);
    8020b714:	4601                	li	a2,0
    8020b716:	45b5                	li	a1,13
    8020b718:	d7840513          	addi	a0,s0,-648
    8020b71c:	00000097          	auipc	ra,0x0
    8020b720:	948080e7          	jalr	-1720(ra) # 8020b064 <auxalloc>
  auxalloc(aux,AT_EGID, 0);
    8020b724:	4601                	li	a2,0
    8020b726:	45b9                	li	a1,14
    8020b728:	d7840513          	addi	a0,s0,-648
    8020b72c:	00000097          	auipc	ra,0x0
    8020b730:	938080e7          	jalr	-1736(ra) # 8020b064 <auxalloc>
  auxalloc(aux,AT_SECURE, 0);
    8020b734:	4601                	li	a2,0
    8020b736:	45dd                	li	a1,23
    8020b738:	d7840513          	addi	a0,s0,-648
    8020b73c:	00000097          	auipc	ra,0x0
    8020b740:	928080e7          	jalr	-1752(ra) # 8020b064 <auxalloc>
  auxalloc(aux,AT_EGID, 0);		
    8020b744:	4601                	li	a2,0
    8020b746:	45b9                	li	a1,14
    8020b748:	d7840513          	addi	a0,s0,-648
    8020b74c:	00000097          	auipc	ra,0x0
    8020b750:	918080e7          	jalr	-1768(ra) # 8020b064 <auxalloc>
  auxalloc(aux,AT_RANDOM, sp);
    8020b754:	8626                	mv	a2,s1
    8020b756:	45e5                	li	a1,25
    8020b758:	d7840513          	addi	a0,s0,-648
    8020b75c:	00000097          	auipc	ra,0x0
    8020b760:	908080e7          	jalr	-1784(ra) # 8020b064 <auxalloc>

  //printf("[exec]push argv\n");
  // Push argument strings, prepare rest of stack in ustack.
  
  if(shflag){
    8020b764:	b4843783          	ld	a5,-1208(s0)
    8020b768:	10079963          	bnez	a5,8020b87a <exec+0x62e>
    if((sp = ustackpushstr(np->pagetable,ustack,"sh",sp,stackbase))==-1){
      __debug_warn("[exec]push argv string bad\n");
      goto bad;
    }
  }
  for(argc = 0; argv[argc]; argc++) {
    8020b76c:	b5043783          	ld	a5,-1200(s0)
    8020b770:	6390                	ld	a2,0(a5)
    8020b772:	00878913          	addi	s2,a5,8
    if((sp = ustackpushstr(np->pagetable,ustack,argv[argc],sp,stackbase))==-1){
    8020b776:	5afd                	li	s5,-1
  for(argc = 0; argv[argc]; argc++) {
    8020b778:	c215                	beqz	a2,8020b79c <exec+0x550>
    if((sp = ustackpushstr(np->pagetable,ustack,argv[argc],sp,stackbase))==-1){
    8020b77a:	8752                	mv	a4,s4
    8020b77c:	86a6                	mv	a3,s1
    8020b77e:	c1840593          	addi	a1,s0,-1000
    8020b782:	060bb503          	ld	a0,96(s7)
    8020b786:	00000097          	auipc	ra,0x0
    8020b78a:	950080e7          	jalr	-1712(ra) # 8020b0d6 <ustackpushstr>
    8020b78e:	84aa                	mv	s1,a0
    8020b790:	13550063          	beq	a0,s5,8020b8b0 <exec+0x664>
  for(argc = 0; argv[argc]; argc++) {
    8020b794:	0921                	addi	s2,s2,8
    8020b796:	ff893603          	ld	a2,-8(s2)
    8020b79a:	f265                	bnez	a2,8020b77a <exec+0x52e>
      __debug_warn("[exec]push argv string bad\n");
      goto bad;
    }
  }
  //printf("[exec]push env\n");
  for(envnum = 0; env[envnum]; envnum++) {
    8020b79c:	b4043783          	ld	a5,-1216(s0)
    8020b7a0:	6390                	ld	a2,0(a5)
    8020b7a2:	c60d                	beqz	a2,8020b7cc <exec+0x580>
    8020b7a4:	00878913          	addi	s2,a5,8
    if((sp = ustackpushstr(np->pagetable,environ,env[envnum],sp,stackbase))==-1){
    8020b7a8:	5afd                	li	s5,-1
    8020b7aa:	8752                	mv	a4,s4
    8020b7ac:	86a6                	mv	a3,s1
    8020b7ae:	d2840593          	addi	a1,s0,-728
    8020b7b2:	060bb503          	ld	a0,96(s7)
    8020b7b6:	00000097          	auipc	ra,0x0
    8020b7ba:	920080e7          	jalr	-1760(ra) # 8020b0d6 <ustackpushstr>
    8020b7be:	84aa                	mv	s1,a0
    8020b7c0:	15550b63          	beq	a0,s5,8020b916 <exec+0x6ca>
  for(envnum = 0; env[envnum]; envnum++) {
    8020b7c4:	0921                	addi	s2,s2,8
    8020b7c6:	ff893603          	ld	a2,-8(s2)
    8020b7ca:	f265                	bnez	a2,8020b7aa <exec+0x55e>
      __debug_warn("[exec]push env string bad\n");
      goto bad;
    }
  }
  //printf("[exec]push end\n");
  if((environ[0]+ustack[0]+1)%2){sp -= 8;}//16 aligned
    8020b7cc:	d2843783          	ld	a5,-728(s0)
    8020b7d0:	c1843703          	ld	a4,-1000(s0)
    8020b7d4:	97ba                	add	a5,a5,a4
    8020b7d6:	8b85                	andi	a5,a5,1
    8020b7d8:	e391                	bnez	a5,8020b7dc <exec+0x590>
    8020b7da:	14e1                	addi	s1,s1,-8
  //load aux
  if((sp = loadaux(np->pagetable,sp,stackbase,aux))<0){
    8020b7dc:	d7840693          	addi	a3,s0,-648
    8020b7e0:	8652                	mv	a2,s4
    8020b7e2:	85a6                	mv	a1,s1
    8020b7e4:	060bb503          	ld	a0,96(s7)
    8020b7e8:	00000097          	auipc	ra,0x0
    8020b7ec:	8a0080e7          	jalr	-1888(ra) # 8020b088 <loadaux>
    8020b7f0:	84aa                	mv	s1,a0
    __debug_warn("[exec]pass aux too many\n");
    goto bad;
  }
  
  argc = environ[0];
    8020b7f2:	d2843783          	ld	a5,-728(s0)
  if(argc){
    8020b7f6:	c39d                	beqz	a5,8020b81c <exec+0x5d0>
    // push the array of argv[] pointers.
    sp -= (argc+1) * sizeof(uint64);
    8020b7f8:	0785                	addi	a5,a5,1
    8020b7fa:	00379693          	slli	a3,a5,0x3
    8020b7fe:	40d504b3          	sub	s1,a0,a3
    if(sp < stackbase){
    8020b802:	1344e363          	bltu	s1,s4,8020b928 <exec+0x6dc>
      __debug_warn("[exec]env address vec too long\n");
      goto bad;
    }
    if(copyout(np->pagetable, sp, (char *)(environ+1), (argc+1)*sizeof(uint64)) < 0){
    8020b806:	d3040613          	addi	a2,s0,-720
    8020b80a:	85a6                	mv	a1,s1
    8020b80c:	060bb503          	ld	a0,96(s7)
    8020b810:	ffffe097          	auipc	ra,0xffffe
    8020b814:	94c080e7          	jalr	-1716(ra) # 8020915c <copyout>
    8020b818:	12054163          	bltz	a0,8020b93a <exec+0x6ee>
      __debug_warn("[exec]env address copy bad\n");
      goto bad;
    }
  }
  
  argc = ustack[0];
    8020b81c:	c1843903          	ld	s2,-1000(s0)
  //printf("[exec]argc:%d\n",argc);
  // push the array of argv[] pointers.
  sp -= (argc+2) * sizeof(uint64);
    8020b820:	00290693          	addi	a3,s2,2
    8020b824:	068e                	slli	a3,a3,0x3
    8020b826:	8c95                	sub	s1,s1,a3
  if(sp < stackbase){
    8020b828:	1344e263          	bltu	s1,s4,8020b94c <exec+0x700>
    __debug_warn("[exec]ustack address vec too long\n");
    goto bad;
  }

  if(copyout(np->pagetable, sp, (char *)ustack, (argc+2)*sizeof(uint64)) < 0){
    8020b82c:	c1840613          	addi	a2,s0,-1000
    8020b830:	85a6                	mv	a1,s1
    8020b832:	060bb503          	ld	a0,96(s7)
    8020b836:	ffffe097          	auipc	ra,0xffffe
    8020b83a:	926080e7          	jalr	-1754(ra) # 8020915c <copyout>
    8020b83e:	12054063          	bltz	a0,8020b95e <exec+0x712>
  //stackdisplay(pagetable,sp,sz);
  // arguments to user main(argc, argv)
  // argc is returned via the system call return
  // value, which goes in a0.
  //np->trapframe->a0 = argc;
  np->trapframe->a0 = 0;
    8020b842:	068bb783          	ld	a5,104(s7)
    8020b846:	0607b823          	sd	zero,112(a5)
  np->trapframe->a1 = sp+8;
    8020b84a:	068bb783          	ld	a5,104(s7)
    8020b84e:	00848713          	addi	a4,s1,8
    8020b852:	ffb8                	sd	a4,120(a5)
  
  for(last=s=path; *s; s++)
    8020b854:	b6043783          	ld	a5,-1184(s0)
    8020b858:	0007c703          	lbu	a4,0(a5)
    8020b85c:	12070363          	beqz	a4,8020b982 <exec+0x736>
    8020b860:	0785                	addi	a5,a5,1
    if(*s == '/')
    8020b862:	02f00693          	li	a3,47
    8020b866:	aa19                	j	8020b97c <exec+0x730>
    __debug_warn("[exec] random copy bad\n");
    8020b868:	00007517          	auipc	a0,0x7
    8020b86c:	08850513          	addi	a0,a0,136 # 802128f0 <vma_type+0x478>
    8020b870:	ffffc097          	auipc	ra,0xffffc
    8020b874:	a34080e7          	jalr	-1484(ra) # 802072a4 <__debug_warn>
    goto bad;
    8020b878:	a0a1                	j	8020b8c0 <exec+0x674>
    if((sp = ustackpushstr(np->pagetable,ustack,"sh",sp,stackbase))==-1){
    8020b87a:	8752                	mv	a4,s4
    8020b87c:	86a6                	mv	a3,s1
    8020b87e:	00006617          	auipc	a2,0x6
    8020b882:	dba60613          	addi	a2,a2,-582 # 80211638 <rodata_start+0x638>
    8020b886:	c1840593          	addi	a1,s0,-1000
    8020b88a:	060bb503          	ld	a0,96(s7)
    8020b88e:	00000097          	auipc	ra,0x0
    8020b892:	848080e7          	jalr	-1976(ra) # 8020b0d6 <ustackpushstr>
    8020b896:	84aa                	mv	s1,a0
    8020b898:	57fd                	li	a5,-1
    8020b89a:	ecf519e3          	bne	a0,a5,8020b76c <exec+0x520>
      __debug_warn("[exec]push argv string bad\n");
    8020b89e:	00007517          	auipc	a0,0x7
    8020b8a2:	06a50513          	addi	a0,a0,106 # 80212908 <vma_type+0x490>
    8020b8a6:	ffffc097          	auipc	ra,0xffffc
    8020b8aa:	9fe080e7          	jalr	-1538(ra) # 802072a4 <__debug_warn>
      goto bad;
    8020b8ae:	a809                	j	8020b8c0 <exec+0x674>
      __debug_warn("[exec]push argv string bad\n");
    8020b8b0:	00007517          	auipc	a0,0x7
    8020b8b4:	05850513          	addi	a0,a0,88 # 80212908 <vma_type+0x490>
    8020b8b8:	ffffc097          	auipc	ra,0xffffc
    8020b8bc:	9ec080e7          	jalr	-1556(ra) # 802072a4 <__debug_warn>
  sfence_vma();
  //printf("[exec]argc:%d a0:%p\n",argc,p->trapframe->a0);
  uvmfree(np);
  return argc;
bad:
  uvmfree(np);
    8020b8c0:	855e                	mv	a0,s7
    8020b8c2:	ffffd097          	auipc	ra,0xffffd
    8020b8c6:	ccc080e7          	jalr	-820(ra) # 8020858e <uvmfree>
  __debug_warn("[exec]exec bad\n");
    8020b8ca:	00007517          	auipc	a0,0x7
    8020b8ce:	10650513          	addi	a0,a0,262 # 802129d0 <vma_type+0x558>
    8020b8d2:	ffffc097          	auipc	ra,0xffffc
    8020b8d6:	9d2080e7          	jalr	-1582(ra) # 802072a4 <__debug_warn>
  return -1;
    8020b8da:	557d                	li	a0,-1
}
    8020b8dc:	4b813083          	ld	ra,1208(sp)
    8020b8e0:	4b013403          	ld	s0,1200(sp)
    8020b8e4:	4a813483          	ld	s1,1192(sp)
    8020b8e8:	4a013903          	ld	s2,1184(sp)
    8020b8ec:	49813983          	ld	s3,1176(sp)
    8020b8f0:	49013a03          	ld	s4,1168(sp)
    8020b8f4:	48813a83          	ld	s5,1160(sp)
    8020b8f8:	48013b03          	ld	s6,1152(sp)
    8020b8fc:	47813b83          	ld	s7,1144(sp)
    8020b900:	47013c03          	ld	s8,1136(sp)
    8020b904:	46813c83          	ld	s9,1128(sp)
    8020b908:	46013d03          	ld	s10,1120(sp)
    8020b90c:	45813d83          	ld	s11,1112(sp)
    8020b910:	4c010113          	addi	sp,sp,1216
    8020b914:	8082                	ret
      __debug_warn("[exec]push env string bad\n");
    8020b916:	00007517          	auipc	a0,0x7
    8020b91a:	01250513          	addi	a0,a0,18 # 80212928 <vma_type+0x4b0>
    8020b91e:	ffffc097          	auipc	ra,0xffffc
    8020b922:	986080e7          	jalr	-1658(ra) # 802072a4 <__debug_warn>
      goto bad;
    8020b926:	bf69                	j	8020b8c0 <exec+0x674>
      __debug_warn("[exec]env address vec too long\n");
    8020b928:	00007517          	auipc	a0,0x7
    8020b92c:	02050513          	addi	a0,a0,32 # 80212948 <vma_type+0x4d0>
    8020b930:	ffffc097          	auipc	ra,0xffffc
    8020b934:	974080e7          	jalr	-1676(ra) # 802072a4 <__debug_warn>
      goto bad;
    8020b938:	b761                	j	8020b8c0 <exec+0x674>
      __debug_warn("[exec]env address copy bad\n");
    8020b93a:	00007517          	auipc	a0,0x7
    8020b93e:	02e50513          	addi	a0,a0,46 # 80212968 <vma_type+0x4f0>
    8020b942:	ffffc097          	auipc	ra,0xffffc
    8020b946:	962080e7          	jalr	-1694(ra) # 802072a4 <__debug_warn>
      goto bad;
    8020b94a:	bf9d                	j	8020b8c0 <exec+0x674>
    __debug_warn("[exec]ustack address vec too long\n");
    8020b94c:	00007517          	auipc	a0,0x7
    8020b950:	03c50513          	addi	a0,a0,60 # 80212988 <vma_type+0x510>
    8020b954:	ffffc097          	auipc	ra,0xffffc
    8020b958:	950080e7          	jalr	-1712(ra) # 802072a4 <__debug_warn>
    goto bad;
    8020b95c:	b795                	j	8020b8c0 <exec+0x674>
    __debug_warn("[exec]ustack address copy bad\n");
    8020b95e:	00007517          	auipc	a0,0x7
    8020b962:	05250513          	addi	a0,a0,82 # 802129b0 <vma_type+0x538>
    8020b966:	ffffc097          	auipc	ra,0xffffc
    8020b96a:	93e080e7          	jalr	-1730(ra) # 802072a4 <__debug_warn>
    goto bad;
    8020b96e:	bf89                	j	8020b8c0 <exec+0x674>
      last = s+1;
    8020b970:	b6f43023          	sd	a5,-1184(s0)
  for(last=s=path; *s; s++)
    8020b974:	0785                	addi	a5,a5,1
    8020b976:	fff7c703          	lbu	a4,-1(a5)
    8020b97a:	c701                	beqz	a4,8020b982 <exec+0x736>
    if(*s == '/')
    8020b97c:	fed71ce3          	bne	a4,a3,8020b974 <exec+0x728>
    8020b980:	bfc5                	j	8020b970 <exec+0x724>
  strncpy(p->name, last, sizeof(p->name));
    8020b982:	4651                	li	a2,20
    8020b984:	b6043583          	ld	a1,-1184(s0)
    8020b988:	b7043a03          	ld	s4,-1168(s0)
    8020b98c:	100a0513          	addi	a0,s4,256
    8020b990:	ffff5097          	auipc	ra,0xffff5
    8020b994:	4fc080e7          	jalr	1276(ra) # 80200e8c <strncpy>
  np->trapframe->sp = sp;
    8020b998:	068bb783          	ld	a5,104(s7)
    8020b99c:	fb84                	sd	s1,48(a5)
  np->trapframe->epc = entry;
    8020b99e:	068bb783          	ld	a5,104(s7)
    8020b9a2:	0137bc23          	sd	s3,24(a5)
  swap(&(p->pagetable),&(np->pagetable),sizeof(p->pagetable));
    8020b9a6:	4621                	li	a2,8
    8020b9a8:	060b8593          	addi	a1,s7,96
    8020b9ac:	060a0513          	addi	a0,s4,96
    8020b9b0:	fffff097          	auipc	ra,0xfffff
    8020b9b4:	680080e7          	jalr	1664(ra) # 8020b030 <swap>
  swap(&(p->vma),&(np->vma),sizeof(p->vma));
    8020b9b8:	4621                	li	a2,8
    8020b9ba:	170b8593          	addi	a1,s7,368
    8020b9be:	170a0513          	addi	a0,s4,368
    8020b9c2:	fffff097          	auipc	ra,0xfffff
    8020b9c6:	66e080e7          	jalr	1646(ra) # 8020b030 <swap>
  swap(&(p->trapframe),&(np->trapframe),sizeof(p->trapframe));
    8020b9ca:	4621                	li	a2,8
    8020b9cc:	068b8593          	addi	a1,s7,104
    8020b9d0:	068a0513          	addi	a0,s4,104
    8020b9d4:	fffff097          	auipc	ra,0xfffff
    8020b9d8:	65c080e7          	jalr	1628(ra) # 8020b030 <swap>
  for(int fd = 0; fd < NOFILEMAX(p); fd++){
    8020b9dc:	0e0a3783          	ld	a5,224(s4)
    8020b9e0:	04f05c63          	blez	a5,8020ba38 <exec+0x7ec>
    8020b9e4:	4481                	li	s1,0
    8020b9e6:	06500a13          	li	s4,101
    8020b9ea:	a805                	j	8020ba1a <exec+0x7ce>
      fileclose(f);
    8020b9ec:	ffffa097          	auipc	ra,0xffffa
    8020b9f0:	904080e7          	jalr	-1788(ra) # 802052f0 <fileclose>
      p->ofile[fd] = 0;
    8020b9f4:	b7043703          	ld	a4,-1168(s0)
    8020b9f8:	777c                	ld	a5,232(a4)
    8020b9fa:	99be                	add	s3,s3,a5
    8020b9fc:	0009b023          	sd	zero,0(s3)
      p->exec_close[fd]=0;
    8020ba00:	7b7c                	ld	a5,240(a4)
    8020ba02:	9abe                	add	s5,s5,a5
    8020ba04:	000aa023          	sw	zero,0(s5)
  for(int fd = 0; fd < NOFILEMAX(p); fd++){
    8020ba08:	0485                	addi	s1,s1,1
    8020ba0a:	b7043783          	ld	a5,-1168(s0)
    8020ba0e:	73fc                	ld	a5,224(a5)
    8020ba10:	00fa5363          	bge	s4,a5,8020ba16 <exec+0x7ca>
    8020ba14:	87d2                	mv	a5,s4
    8020ba16:	02f4d163          	bge	s1,a5,8020ba38 <exec+0x7ec>
    struct file* f = p->ofile[fd];
    8020ba1a:	00349993          	slli	s3,s1,0x3
    8020ba1e:	b7043703          	ld	a4,-1168(s0)
    8020ba22:	777c                	ld	a5,232(a4)
    8020ba24:	97ce                	add	a5,a5,s3
    8020ba26:	6388                	ld	a0,0(a5)
    if(f&&p->exec_close[fd]){
    8020ba28:	d165                	beqz	a0,8020ba08 <exec+0x7bc>
    8020ba2a:	00249a93          	slli	s5,s1,0x2
    8020ba2e:	7b7c                	ld	a5,240(a4)
    8020ba30:	97d6                	add	a5,a5,s5
    8020ba32:	439c                	lw	a5,0(a5)
    8020ba34:	dbf1                	beqz	a5,8020ba08 <exec+0x7bc>
    8020ba36:	bf5d                	j	8020b9ec <exec+0x7a0>
  w_satp(MAKE_SATP(p->pagetable));
    8020ba38:	b7043783          	ld	a5,-1168(s0)
    8020ba3c:	73bc                	ld	a5,96(a5)
    8020ba3e:	83b1                	srli	a5,a5,0xc
    8020ba40:	577d                	li	a4,-1
    8020ba42:	177e                	slli	a4,a4,0x3f
    8020ba44:	8fd9                	or	a5,a5,a4
  asm volatile("csrw satp, %0" : : "r" (x));
    8020ba46:	18079073          	csrw	satp,a5
  asm volatile("sfence.vma");
    8020ba4a:	12000073          	sfence.vma
  uvmfree(np);
    8020ba4e:	855e                	mv	a0,s7
    8020ba50:	ffffd097          	auipc	ra,0xffffd
    8020ba54:	b3e080e7          	jalr	-1218(ra) # 8020858e <uvmfree>
  return argc;
    8020ba58:	0009051b          	sext.w	a0,s2
    8020ba5c:	b541                	j	8020b8dc <exec+0x690>

000000008020ba5e <uname_copyout>:
#else 
char const UNAME_MACHINE[] = "QEMU";
#endif 
char const UNAME_DOMAINNAME[] = "none";

int uname_copyout(uint64 addr) {
    8020ba5e:	1101                	addi	sp,sp,-32
    8020ba60:	ec06                	sd	ra,24(sp)
    8020ba62:	e822                	sd	s0,16(sp)
    8020ba64:	e426                	sd	s1,8(sp)
    8020ba66:	1000                	addi	s0,sp,32
    8020ba68:	84aa                	mv	s1,a0
	struct utsname *user_uts = (struct utsname*)addr;

	if (either_copyout(1, (uint64)user_uts->sysname, 
    8020ba6a:	4691                	li	a3,4
    8020ba6c:	00008617          	auipc	a2,0x8
    8020ba70:	7cc60613          	addi	a2,a2,1996 # 80214238 <UNAME_SYSNAME>
    8020ba74:	85aa                	mv	a1,a0
    8020ba76:	4505                	li	a0,1
    8020ba78:	ffffe097          	auipc	ra,0xffffe
    8020ba7c:	a50080e7          	jalr	-1456(ra) # 802094c8 <either_copyout>
    8020ba80:	08054e63          	bltz	a0,8020bb1c <uname_copyout+0xbe>
			(void*)UNAME_SYSNAME, sizeof(UNAME_SYSNAME)) < 0) 
	{
		panic("uname_copyout: fail to copy sysname\n");
		return -1;
	}
	if (either_copyout(1, (uint64)user_uts->nodename, 
    8020ba84:	4695                	li	a3,5
    8020ba86:	00008617          	auipc	a2,0x8
    8020ba8a:	7aa60613          	addi	a2,a2,1962 # 80214230 <UNAME_NODENAME>
    8020ba8e:	04148593          	addi	a1,s1,65
    8020ba92:	4505                	li	a0,1
    8020ba94:	ffffe097          	auipc	ra,0xffffe
    8020ba98:	a34080e7          	jalr	-1484(ra) # 802094c8 <either_copyout>
    8020ba9c:	08054863          	bltz	a0,8020bb2c <uname_copyout+0xce>
			(void*)UNAME_NODENAME, sizeof(UNAME_NODENAME)) < 0) 
	{
		panic("uname_copyout: fail to copy nodename\n");
		return -1;
	}
	if (either_copyout(1, (uint64)user_uts->release, 
    8020baa0:	4691                	li	a3,4
    8020baa2:	00008617          	auipc	a2,0x8
    8020baa6:	78660613          	addi	a2,a2,1926 # 80214228 <UNAME_RELEASE>
    8020baaa:	08248593          	addi	a1,s1,130
    8020baae:	4505                	li	a0,1
    8020bab0:	ffffe097          	auipc	ra,0xffffe
    8020bab4:	a18080e7          	jalr	-1512(ra) # 802094c8 <either_copyout>
    8020bab8:	08054263          	bltz	a0,8020bb3c <uname_copyout+0xde>
			(void*)UNAME_RELEASE, sizeof(UNAME_RELEASE)) < 0) 
	{
		panic("uname_copyout: fail to copy release\n");
		return -1;
	}
	if (either_copyout(1, (uint64)user_uts->version, 
    8020babc:	46d5                	li	a3,21
    8020babe:	00007617          	auipc	a2,0x7
    8020bac2:	03260613          	addi	a2,a2,50 # 80212af0 <UNAME_VERSION>
    8020bac6:	0c348593          	addi	a1,s1,195
    8020baca:	4505                	li	a0,1
    8020bacc:	ffffe097          	auipc	ra,0xffffe
    8020bad0:	9fc080e7          	jalr	-1540(ra) # 802094c8 <either_copyout>
    8020bad4:	06054c63          	bltz	a0,8020bb4c <uname_copyout+0xee>
			(void*)UNAME_VERSION, sizeof(UNAME_VERSION)) < 0) 
	{
		panic("uname_copyout: fail to copy version\n");
		return -1;
	}
	if (either_copyout(1, (uint64)user_uts->machine, 
    8020bad8:	4695                	li	a3,5
    8020bada:	00008617          	auipc	a2,0x8
    8020bade:	74660613          	addi	a2,a2,1862 # 80214220 <UNAME_MACHINE>
    8020bae2:	10448593          	addi	a1,s1,260
    8020bae6:	4505                	li	a0,1
    8020bae8:	ffffe097          	auipc	ra,0xffffe
    8020baec:	9e0080e7          	jalr	-1568(ra) # 802094c8 <either_copyout>
    8020baf0:	06054663          	bltz	a0,8020bb5c <uname_copyout+0xfe>
			(void*)UNAME_MACHINE, sizeof(UNAME_MACHINE)) < 0) 
	{
		panic("uname_copyout: fail to copy machine\n");
		return -1;
	}
	if (either_copyout(1, (uint64)user_uts->domainname, 
    8020baf4:	4695                	li	a3,5
    8020baf6:	00008617          	auipc	a2,0x8
    8020bafa:	72260613          	addi	a2,a2,1826 # 80214218 <UNAME_DOMAINNAME>
    8020bafe:	14548593          	addi	a1,s1,325
    8020bb02:	4505                	li	a0,1
    8020bb04:	ffffe097          	auipc	ra,0xffffe
    8020bb08:	9c4080e7          	jalr	-1596(ra) # 802094c8 <either_copyout>
    8020bb0c:	06054063          	bltz	a0,8020bb6c <uname_copyout+0x10e>
		panic("uname_copyout: fail to copy domainname\n");
		return -1;
	}

	return 0;
}
    8020bb10:	4501                	li	a0,0
    8020bb12:	60e2                	ld	ra,24(sp)
    8020bb14:	6442                	ld	s0,16(sp)
    8020bb16:	64a2                	ld	s1,8(sp)
    8020bb18:	6105                	addi	sp,sp,32
    8020bb1a:	8082                	ret
		panic("uname_copyout: fail to copy sysname\n");
    8020bb1c:	00007517          	auipc	a0,0x7
    8020bb20:	ee450513          	addi	a0,a0,-284 # 80212a00 <vma_type+0x588>
    8020bb24:	ffffb097          	auipc	ra,0xffffb
    8020bb28:	3aa080e7          	jalr	938(ra) # 80206ece <panic>
		panic("uname_copyout: fail to copy nodename\n");
    8020bb2c:	00007517          	auipc	a0,0x7
    8020bb30:	efc50513          	addi	a0,a0,-260 # 80212a28 <vma_type+0x5b0>
    8020bb34:	ffffb097          	auipc	ra,0xffffb
    8020bb38:	39a080e7          	jalr	922(ra) # 80206ece <panic>
		panic("uname_copyout: fail to copy release\n");
    8020bb3c:	00007517          	auipc	a0,0x7
    8020bb40:	f1450513          	addi	a0,a0,-236 # 80212a50 <vma_type+0x5d8>
    8020bb44:	ffffb097          	auipc	ra,0xffffb
    8020bb48:	38a080e7          	jalr	906(ra) # 80206ece <panic>
		panic("uname_copyout: fail to copy version\n");
    8020bb4c:	00007517          	auipc	a0,0x7
    8020bb50:	f2c50513          	addi	a0,a0,-212 # 80212a78 <vma_type+0x600>
    8020bb54:	ffffb097          	auipc	ra,0xffffb
    8020bb58:	37a080e7          	jalr	890(ra) # 80206ece <panic>
		panic("uname_copyout: fail to copy machine\n");
    8020bb5c:	00007517          	auipc	a0,0x7
    8020bb60:	f4450513          	addi	a0,a0,-188 # 80212aa0 <vma_type+0x628>
    8020bb64:	ffffb097          	auipc	ra,0xffffb
    8020bb68:	36a080e7          	jalr	874(ra) # 80206ece <panic>
		panic("uname_copyout: fail to copy domainname\n");
    8020bb6c:	00007517          	auipc	a0,0x7
    8020bb70:	f5c50513          	addi	a0,a0,-164 # 80212ac8 <vma_type+0x650>
    8020bb74:	ffffb097          	auipc	ra,0xffffb
    8020bb78:	35a080e7          	jalr	858(ra) # 80206ece <panic>

000000008020bb7c <fdallocfrom>:

// Allocate a file descriptor for the given file.
// Takes over file reference from caller on success.
static int
fdallocfrom(struct file *f,int start)
{
    8020bb7c:	1101                	addi	sp,sp,-32
    8020bb7e:	ec06                	sd	ra,24(sp)
    8020bb80:	e822                	sd	s0,16(sp)
    8020bb82:	e426                	sd	s1,8(sp)
    8020bb84:	e04a                	sd	s2,0(sp)
    8020bb86:	1000                	addi	s0,sp,32
    8020bb88:	892a                	mv	s2,a0
    8020bb8a:	84ae                	mv	s1,a1
  int fd;
  struct proc *p = myproc();
    8020bb8c:	ffffe097          	auipc	ra,0xffffe
    8020bb90:	f9e080e7          	jalr	-98(ra) # 80209b2a <myproc>
  //printf("[fdalloc]filelimit:%p\n",NOFILEMAX(p));
  for(fd = start; fd < NOFILEMAX(p); fd++){
    8020bb94:	7170                	ld	a2,224(a0)
    8020bb96:	06500793          	li	a5,101
    8020bb9a:	00c7d463          	bge	a5,a2,8020bba2 <fdallocfrom+0x26>
    8020bb9e:	06500613          	li	a2,101
    8020bba2:	02c4d863          	bge	s1,a2,8020bbd2 <fdallocfrom+0x56>
    8020bba6:	8726                	mv	a4,s1
    8020bba8:	048e                	slli	s1,s1,0x3
    8020bbaa:	757c                	ld	a5,232(a0)
    8020bbac:	97a6                	add	a5,a5,s1
    8020bbae:	0007051b          	sext.w	a0,a4
    if(p->ofile[fd] == 0){
    8020bbb2:	6394                	ld	a3,0(a5)
    8020bbb4:	c699                	beqz	a3,8020bbc2 <fdallocfrom+0x46>
  for(fd = start; fd < NOFILEMAX(p); fd++){
    8020bbb6:	0705                	addi	a4,a4,1
    8020bbb8:	07a1                	addi	a5,a5,8
    8020bbba:	fec71ae3          	bne	a4,a2,8020bbae <fdallocfrom+0x32>
      p->ofile[fd] = f;
      return fd;
    }
  }
  return -EMFILE;
    8020bbbe:	5521                	li	a0,-24
    8020bbc0:	a019                	j	8020bbc6 <fdallocfrom+0x4a>
      p->ofile[fd] = f;
    8020bbc2:	0127b023          	sd	s2,0(a5)
}
    8020bbc6:	60e2                	ld	ra,24(sp)
    8020bbc8:	6442                	ld	s0,16(sp)
    8020bbca:	64a2                	ld	s1,8(sp)
    8020bbcc:	6902                	ld	s2,0(sp)
    8020bbce:	6105                	addi	sp,sp,32
    8020bbd0:	8082                	ret
  return -EMFILE;
    8020bbd2:	5521                	li	a0,-24
    8020bbd4:	bfcd                	j	8020bbc6 <fdallocfrom+0x4a>

000000008020bbd6 <sys_openat>:



uint64
sys_openat()
{
    8020bbd6:	7149                	addi	sp,sp,-368
    8020bbd8:	f686                	sd	ra,360(sp)
    8020bbda:	f2a2                	sd	s0,352(sp)
    8020bbdc:	eea6                	sd	s1,344(sp)
    8020bbde:	eaca                	sd	s2,336(sp)
    8020bbe0:	e6ce                	sd	s3,328(sp)
    8020bbe2:	e2d2                	sd	s4,320(sp)
    8020bbe4:	fe56                	sd	s5,312(sp)
    8020bbe6:	1a80                	addi	s0,sp,368
  char path[FAT32_MAX_PATH];
  int dirfd, flags,mode;
  int fd ,devno = -1;
    8020bbe8:	57fd                	li	a5,-1
    8020bbea:	eaf42423          	sw	a5,-344(s0)
  struct file *f;
  struct file *dirf;
  struct dirent *dp = NULL;
  struct dirent *ep;
  struct proc* p = myproc();
    8020bbee:	ffffe097          	auipc	ra,0xffffe
    8020bbf2:	f3c080e7          	jalr	-196(ra) # 80209b2a <myproc>
    8020bbf6:	89aa                	mv	s3,a0
  int err = 0;
    8020bbf8:	e8042e23          	sw	zero,-356(s0)
  
  argfd(0,&dirfd,&dirf);
    8020bbfc:	ea040613          	addi	a2,s0,-352
    8020bc00:	eb440593          	addi	a1,s0,-332
    8020bc04:	4501                	li	a0,0
    8020bc06:	fffff097          	auipc	ra,0xfffff
    8020bc0a:	1a2080e7          	jalr	418(ra) # 8020ada8 <argfd>
  if(argstr(1, path, FAT32_MAX_PATH) < 0){
    8020bc0e:	10400613          	li	a2,260
    8020bc12:	eb840593          	addi	a1,s0,-328
    8020bc16:	4505                	li	a0,1
    8020bc18:	fffff097          	auipc	ra,0xfffff
    8020bc1c:	160080e7          	jalr	352(ra) # 8020ad78 <argstr>
    8020bc20:	0c054c63          	bltz	a0,8020bcf8 <sys_openat+0x122>
    __debug_warn("[sys openat] open not valid path\n");
    return -1;
  }
  if(argint(2, &flags) < 0
    8020bc24:	eb040593          	addi	a1,s0,-336
    8020bc28:	4509                	li	a0,2
    8020bc2a:	fffff097          	auipc	ra,0xfffff
    8020bc2e:	10a080e7          	jalr	266(ra) # 8020ad34 <argint>
   ||argint(3, &mode) <0 )
    return -1;
    8020bc32:	57fd                	li	a5,-1
  if(argint(2, &flags) < 0
    8020bc34:	2a054963          	bltz	a0,8020bee6 <sys_openat+0x310>
   ||argint(3, &mode) <0 )
    8020bc38:	eac40593          	addi	a1,s0,-340
    8020bc3c:	450d                	li	a0,3
    8020bc3e:	fffff097          	auipc	ra,0xfffff
    8020bc42:	0f6080e7          	jalr	246(ra) # 8020ad34 <argint>
    return -1;
    8020bc46:	57fd                	li	a5,-1
   ||argint(3, &mode) <0 )
    8020bc48:	28054f63          	bltz	a0,8020bee6 <sys_openat+0x310>
  if(myproc()->umask == 0){
    8020bc4c:	ffffe097          	auipc	ra,0xffffe
    8020bc50:	ede080e7          	jalr	-290(ra) # 80209b2a <myproc>
    8020bc54:	1c052783          	lw	a5,448(a0)
    8020bc58:	ebd5                	bnez	a5,8020bd0c <sys_openat+0x136>
  else{
    return -1;
  }
  // __debug_warn("[sys openat]flags:%p mode:%p\n",flags,mode);
  if(mode | O_RDWR){
  	flags |= O_RDWR;
    8020bc5a:	eb042783          	lw	a5,-336(s0)
    8020bc5e:	0027e793          	ori	a5,a5,2
    8020bc62:	eaf42823          	sw	a5,-336(s0)
  if(flags&0x8000){
    flags|=O_CREATE;
  }
  */
  
  if(dirf&&dirf->type==FD_ENTRY){
    8020bc66:	ea043a03          	ld	s4,-352(s0)
    8020bc6a:	000a0863          	beqz	s4,8020bc7a <sys_openat+0xa4>
    8020bc6e:	000a2703          	lw	a4,0(s4)
    8020bc72:	4789                	li	a5,2
    8020bc74:	14f70963          	beq	a4,a5,8020bdc6 <sys_openat+0x1f0>
  struct dirent *dp = NULL;
    8020bc78:	4a01                	li	s4,0
    if(!(dp->attribute & ATTR_DIRECTORY)){
      eunlock(dp);
      dp = NULL;
    }
  }    
  if((ep = ename(dp,path,&devno)) == NULL){  
    8020bc7a:	ea840613          	addi	a2,s0,-344
    8020bc7e:	eb840593          	addi	a1,s0,-328
    8020bc82:	8552                	mv	a0,s4
    8020bc84:	ffff8097          	auipc	ra,0xffff8
    8020bc88:	6b6080e7          	jalr	1718(ra) # 8020433a <ename>
    8020bc8c:	84aa                	mv	s1,a0
    8020bc8e:	14050f63          	beqz	a0,8020bdec <sys_openat+0x216>
    if(!ep){
      __debug_warn("[sys openat] env path %s not found\n",path);
      return -1;
    }
  }else{
     elock(ep);
    8020bc92:	ffff8097          	auipc	ra,0xffff8
    8020bc96:	c66080e7          	jalr	-922(ra) # 802038f8 <elock>
  }
  int pathlen = strlen(path);
    8020bc9a:	eb840513          	addi	a0,s0,-328
    8020bc9e:	ffff5097          	auipc	ra,0xffff5
    8020bca2:	25e080e7          	jalr	606(ra) # 80200efc <strlen>
  if(ep==dev&&devno==-1&&strncmp(path+pathlen-3,"dev",4)){
    8020bca6:	00562797          	auipc	a5,0x562
    8020bcaa:	4c27b783          	ld	a5,1218(a5) # 8076e168 <dev>
    8020bcae:	18978963          	beq	a5,s1,8020be40 <sys_openat+0x26a>
    eunlock(ep);
    __debug_warn("[sys openat] device %s don't exist\n",path);
    return -1;
  }
  if(devno==-1&&(ep->attribute & ATTR_DIRECTORY) && ( !(flags&O_WRONLY) && !(flags&O_RDWR) )){
    8020bcb2:	ea842703          	lw	a4,-344(s0)
    8020bcb6:	57fd                	li	a5,-1
    8020bcb8:	18f71963          	bne	a4,a5,8020be4a <sys_openat+0x274>
    8020bcbc:	1004c783          	lbu	a5,256(s1)
    8020bcc0:	8bc1                	andi	a5,a5,16
    8020bcc2:	18078463          	beqz	a5,8020be4a <sys_openat+0x274>
    8020bcc6:	eb042783          	lw	a5,-336(s0)
    8020bcca:	8b8d                	andi	a5,a5,3
    8020bccc:	16079f63          	bnez	a5,8020be4a <sys_openat+0x274>
    __debug_warn("[sys openat] diretory only can be read\n");
    8020bcd0:	00007517          	auipc	a0,0x7
    8020bcd4:	eb850513          	addi	a0,a0,-328 # 80212b88 <UNAME_VERSION+0x98>
    8020bcd8:	ffffb097          	auipc	ra,0xffffb
    8020bcdc:	5cc080e7          	jalr	1484(ra) # 802072a4 <__debug_warn>
    eunlock(ep);
    8020bce0:	8526                	mv	a0,s1
    8020bce2:	ffff8097          	auipc	ra,0xffff8
    8020bce6:	c4c080e7          	jalr	-948(ra) # 8020392e <eunlock>
    eput(ep);
    8020bcea:	8526                	mv	a0,s1
    8020bcec:	ffff8097          	auipc	ra,0xffff8
    8020bcf0:	c90080e7          	jalr	-880(ra) # 8020397c <eput>
    return -1;
    8020bcf4:	57fd                	li	a5,-1
    8020bcf6:	aac5                	j	8020bee6 <sys_openat+0x310>
    __debug_warn("[sys openat] open not valid path\n");
    8020bcf8:	00007517          	auipc	a0,0x7
    8020bcfc:	e1050513          	addi	a0,a0,-496 # 80212b08 <UNAME_VERSION+0x18>
    8020bd00:	ffffb097          	auipc	ra,0xffffb
    8020bd04:	5a4080e7          	jalr	1444(ra) # 802072a4 <__debug_warn>
    return -1;
    8020bd08:	57fd                	li	a5,-1
    8020bd0a:	aaf1                	j	8020bee6 <sys_openat+0x310>
  else if(((mode >> 6) - (myproc()->umask >> 6) > 0) && (mode >> 3) - (myproc()->umask >> 3) > 0 && (mode >> 0) - (myproc()->umask >> 0) > 0){
    8020bd0c:	eac42483          	lw	s1,-340(s0)
    8020bd10:	4064d49b          	sraiw	s1,s1,0x6
    8020bd14:	ffffe097          	auipc	ra,0xffffe
    8020bd18:	e16080e7          	jalr	-490(ra) # 80209b2a <myproc>
    8020bd1c:	1c052783          	lw	a5,448(a0)
    8020bd20:	4067d79b          	sraiw	a5,a5,0x6
    8020bd24:	9c9d                	subw	s1,s1,a5
    return -1;
    8020bd26:	57fd                	li	a5,-1
  else if(((mode >> 6) - (myproc()->umask >> 6) > 0) && (mode >> 3) - (myproc()->umask >> 3) > 0 && (mode >> 0) - (myproc()->umask >> 0) > 0){
    8020bd28:	1a905f63          	blez	s1,8020bee6 <sys_openat+0x310>
    8020bd2c:	eac42483          	lw	s1,-340(s0)
    8020bd30:	4034d49b          	sraiw	s1,s1,0x3
    8020bd34:	ffffe097          	auipc	ra,0xffffe
    8020bd38:	df6080e7          	jalr	-522(ra) # 80209b2a <myproc>
    8020bd3c:	1c052783          	lw	a5,448(a0)
    8020bd40:	4037d79b          	sraiw	a5,a5,0x3
    8020bd44:	9c9d                	subw	s1,s1,a5
    return -1;
    8020bd46:	57fd                	li	a5,-1
  else if(((mode >> 6) - (myproc()->umask >> 6) > 0) && (mode >> 3) - (myproc()->umask >> 3) > 0 && (mode >> 0) - (myproc()->umask >> 0) > 0){
    8020bd48:	18905f63          	blez	s1,8020bee6 <sys_openat+0x310>
    8020bd4c:	eac42483          	lw	s1,-340(s0)
    8020bd50:	ffffe097          	auipc	ra,0xffffe
    8020bd54:	dda080e7          	jalr	-550(ra) # 80209b2a <myproc>
    8020bd58:	1c052783          	lw	a5,448(a0)
    8020bd5c:	9c9d                	subw	s1,s1,a5
    return -1;
    8020bd5e:	57fd                	li	a5,-1
  else if(((mode >> 6) - (myproc()->umask >> 6) > 0) && (mode >> 3) - (myproc()->umask >> 3) > 0 && (mode >> 0) - (myproc()->umask >> 0) > 0){
    8020bd60:	18905363          	blez	s1,8020bee6 <sys_openat+0x310>
    mode = (((mode >> 6) - (myproc()->umask >> 6)) << 6) | (((mode >> 3) - (myproc()->umask >> 3)) << 3) | (((mode >> 0) - (myproc()->umask >> 0)) << 0);
    8020bd64:	eac42483          	lw	s1,-340(s0)
    8020bd68:	4064d49b          	sraiw	s1,s1,0x6
    8020bd6c:	ffffe097          	auipc	ra,0xffffe
    8020bd70:	dbe080e7          	jalr	-578(ra) # 80209b2a <myproc>
    8020bd74:	1c052783          	lw	a5,448(a0)
    8020bd78:	4067d79b          	sraiw	a5,a5,0x6
    8020bd7c:	9c9d                	subw	s1,s1,a5
    8020bd7e:	0064949b          	slliw	s1,s1,0x6
    8020bd82:	eac42903          	lw	s2,-340(s0)
    8020bd86:	4039591b          	sraiw	s2,s2,0x3
    8020bd8a:	ffffe097          	auipc	ra,0xffffe
    8020bd8e:	da0080e7          	jalr	-608(ra) # 80209b2a <myproc>
    8020bd92:	1c052783          	lw	a5,448(a0)
    8020bd96:	4037d79b          	sraiw	a5,a5,0x3
    8020bd9a:	40f9093b          	subw	s2,s2,a5
    8020bd9e:	0039191b          	slliw	s2,s2,0x3
    8020bda2:	0124e4b3          	or	s1,s1,s2
    8020bda6:	2481                	sext.w	s1,s1
    8020bda8:	eac42903          	lw	s2,-340(s0)
    8020bdac:	ffffe097          	auipc	ra,0xffffe
    8020bdb0:	d7e080e7          	jalr	-642(ra) # 80209b2a <myproc>
    8020bdb4:	1c052783          	lw	a5,448(a0)
    8020bdb8:	40f9093b          	subw	s2,s2,a5
    8020bdbc:	0124e4b3          	or	s1,s1,s2
    8020bdc0:	ea942623          	sw	s1,-340(s0)
    8020bdc4:	bd59                	j	8020bc5a <sys_openat+0x84>
    dp = dirf->ep;
    8020bdc6:	018a3a03          	ld	s4,24(s4)
    elock(dp);
    8020bdca:	8552                	mv	a0,s4
    8020bdcc:	ffff8097          	auipc	ra,0xffff8
    8020bdd0:	b2c080e7          	jalr	-1236(ra) # 802038f8 <elock>
    if(!(dp->attribute & ATTR_DIRECTORY)){
    8020bdd4:	100a4783          	lbu	a5,256(s4)
    8020bdd8:	8bc1                	andi	a5,a5,16
    8020bdda:	ea0790e3          	bnez	a5,8020bc7a <sys_openat+0xa4>
      eunlock(dp);
    8020bdde:	8552                	mv	a0,s4
    8020bde0:	ffff8097          	auipc	ra,0xffff8
    8020bde4:	b4e080e7          	jalr	-1202(ra) # 8020392e <eunlock>
      dp = NULL;
    8020bde8:	4a01                	li	s4,0
    8020bdea:	bd41                	j	8020bc7a <sys_openat+0xa4>
    if(flags & O_CREATE){
    8020bdec:	eb042683          	lw	a3,-336(s0)
    8020bdf0:	0406f793          	andi	a5,a3,64
    8020bdf4:	ef89                	bnez	a5,8020be0e <sys_openat+0x238>
      __debug_warn("[sys openat] env path %s not found\n",path);
    8020bdf6:	eb840593          	addi	a1,s0,-328
    8020bdfa:	00007517          	auipc	a0,0x7
    8020bdfe:	dce50513          	addi	a0,a0,-562 # 80212bc8 <UNAME_VERSION+0xd8>
    8020be02:	ffffb097          	auipc	ra,0xffffb
    8020be06:	4a2080e7          	jalr	1186(ra) # 802072a4 <__debug_warn>
      return -1;
    8020be0a:	57fd                	li	a5,-1
    8020be0c:	a8e9                	j	8020bee6 <sys_openat+0x310>
      ep = create(dp,path, T_FILE, flags, &err);
    8020be0e:	e9c40713          	addi	a4,s0,-356
    8020be12:	4609                	li	a2,2
    8020be14:	eb840593          	addi	a1,s0,-328
    8020be18:	8552                	mv	a0,s4
    8020be1a:	ffff8097          	auipc	ra,0xffff8
    8020be1e:	622080e7          	jalr	1570(ra) # 8020443c <create>
    8020be22:	84aa                	mv	s1,a0
      if(ep == NULL){
    8020be24:	e6051be3          	bnez	a0,8020bc9a <sys_openat+0xc4>
        __debug_warn("[sys openat] create file %s failed\n",path);
    8020be28:	eb840593          	addi	a1,s0,-328
    8020be2c:	00007517          	auipc	a0,0x7
    8020be30:	d0450513          	addi	a0,a0,-764 # 80212b30 <UNAME_VERSION+0x40>
    8020be34:	ffffb097          	auipc	ra,0xffffb
    8020be38:	470080e7          	jalr	1136(ra) # 802072a4 <__debug_warn>
        return -1;
    8020be3c:	57fd                	li	a5,-1
    8020be3e:	a065                	j	8020bee6 <sys_openat+0x310>
  if(ep==dev&&devno==-1&&strncmp(path+pathlen-3,"dev",4)){
    8020be40:	ea842703          	lw	a4,-344(s0)
    8020be44:	57fd                	li	a5,-1
    8020be46:	0af70a63          	beq	a4,a5,8020befa <sys_openat+0x324>
  }


  if((f = filealloc()) == NULL || (fd = fdalloc(f)) < 0){
    8020be4a:	ffff9097          	auipc	ra,0xffff9
    8020be4e:	3ea080e7          	jalr	1002(ra) # 80205234 <filealloc>
    8020be52:	892a                	mv	s2,a0
    8020be54:	12050963          	beqz	a0,8020bf86 <sys_openat+0x3b0>
  return fdallocfrom(f,0);
    8020be58:	4581                	li	a1,0
    8020be5a:	00000097          	auipc	ra,0x0
    8020be5e:	d22080e7          	jalr	-734(ra) # 8020bb7c <fdallocfrom>
    8020be62:	8aaa                	mv	s5,a0
  if((f = filealloc()) == NULL || (fd = fdalloc(f)) < 0){
    8020be64:	10054c63          	bltz	a0,8020bf7c <sys_openat+0x3a6>
    eunlock(ep);
    eput(ep);
    return -EMFILE;
  }

  if(ep!=dev && !(ep->attribute & ATTR_DIRECTORY) && (flags & O_TRUNC)){
    8020be68:	00562797          	auipc	a5,0x562
    8020be6c:	3007b783          	ld	a5,768(a5) # 8076e168 <dev>
    8020be70:	00978b63          	beq	a5,s1,8020be86 <sys_openat+0x2b0>
    8020be74:	1004c783          	lbu	a5,256(s1)
    8020be78:	8bc1                	andi	a5,a5,16
    8020be7a:	e791                	bnez	a5,8020be86 <sys_openat+0x2b0>
    8020be7c:	eb042783          	lw	a5,-336(s0)
    8020be80:	2007f793          	andi	a5,a5,512
    8020be84:	efc5                	bnez	a5,8020bf3c <sys_openat+0x366>
    etrunc(ep);
  }
  if(devno ==-1){
    8020be86:	ea842703          	lw	a4,-344(s0)
    8020be8a:	57fd                	li	a5,-1
    8020be8c:	0af70e63          	beq	a4,a5,8020bf48 <sys_openat+0x372>
    f->off = (flags & O_APPEND) ? ep->file_size : 0;
    f->ep = ep;
    f->readable = !(flags & O_WRONLY);
    f->writable = (flags & O_WRONLY) || (flags & O_RDWR);
  }else{
    f->type = FD_DEVICE;
    8020be90:	478d                	li	a5,3
    8020be92:	00f92023          	sw	a5,0(s2)
    f->off = 0;
    8020be96:	02093023          	sd	zero,32(s2)
    f->ep = NULL;  
    8020be9a:	00093c23          	sd	zero,24(s2)
    f->major = devno;
    8020be9e:	ea842783          	lw	a5,-344(s0)
    8020bea2:	02f91423          	sh	a5,40(s2)
    f->readable = !(flags & O_WRONLY);
    8020bea6:	eb042783          	lw	a5,-336(s0)
    8020beaa:	0017c713          	xori	a4,a5,1
    8020beae:	8b05                	andi	a4,a4,1
    8020beb0:	00e90423          	sb	a4,8(s2)
    f->writable = (flags & O_WRONLY) || (flags & O_RDWR);
    8020beb4:	8b8d                	andi	a5,a5,3
    8020beb6:	00f037b3          	snez	a5,a5
    8020beba:	00f904a3          	sb	a5,9(s2)
  }
  eunlock(ep);
    8020bebe:	8526                	mv	a0,s1
    8020bec0:	ffff8097          	auipc	ra,0xffff8
    8020bec4:	a6e080e7          	jalr	-1426(ra) # 8020392e <eunlock>
  if(dp){
    8020bec8:	000a0763          	beqz	s4,8020bed6 <sys_openat+0x300>
    elock(dp);  
    8020becc:	8552                	mv	a0,s4
    8020bece:	ffff8097          	auipc	ra,0xffff8
    8020bed2:	a2a080e7          	jalr	-1494(ra) # 802038f8 <elock>
  }
  p->exec_close[fd] = 0;
    8020bed6:	87d6                	mv	a5,s5
    8020bed8:	0f09b703          	ld	a4,240(s3)
    8020bedc:	002a9513          	slli	a0,s5,0x2
    8020bee0:	953a                	add	a0,a0,a4
    8020bee2:	00052023          	sw	zero,0(a0)
//  __debug_warn("[sys openat] fd:%d openat:%s\n",fd,path);
  return fd;
}
    8020bee6:	853e                	mv	a0,a5
    8020bee8:	70b6                	ld	ra,360(sp)
    8020beea:	7416                	ld	s0,352(sp)
    8020beec:	64f6                	ld	s1,344(sp)
    8020beee:	6956                	ld	s2,336(sp)
    8020bef0:	69b6                	ld	s3,328(sp)
    8020bef2:	6a16                	ld	s4,320(sp)
    8020bef4:	7af2                	ld	s5,312(sp)
    8020bef6:	6175                	addi	sp,sp,368
    8020bef8:	8082                	ret
  if(ep==dev&&devno==-1&&strncmp(path+pathlen-3,"dev",4)){
    8020befa:	fc040793          	addi	a5,s0,-64
    8020befe:	953e                	add	a0,a0,a5
    8020bf00:	4611                	li	a2,4
    8020bf02:	00007597          	auipc	a1,0x7
    8020bf06:	c5658593          	addi	a1,a1,-938 # 80212b58 <UNAME_VERSION+0x68>
    8020bf0a:	ef550513          	addi	a0,a0,-267
    8020bf0e:	ffff5097          	auipc	ra,0xffff5
    8020bf12:	f42080e7          	jalr	-190(ra) # 80200e50 <strncmp>
    8020bf16:	d8050ee3          	beqz	a0,8020bcb2 <sys_openat+0xdc>
    eunlock(ep);
    8020bf1a:	8526                	mv	a0,s1
    8020bf1c:	ffff8097          	auipc	ra,0xffff8
    8020bf20:	a12080e7          	jalr	-1518(ra) # 8020392e <eunlock>
    __debug_warn("[sys openat] device %s don't exist\n",path);
    8020bf24:	eb840593          	addi	a1,s0,-328
    8020bf28:	00007517          	auipc	a0,0x7
    8020bf2c:	c3850513          	addi	a0,a0,-968 # 80212b60 <UNAME_VERSION+0x70>
    8020bf30:	ffffb097          	auipc	ra,0xffffb
    8020bf34:	374080e7          	jalr	884(ra) # 802072a4 <__debug_warn>
    return -1;
    8020bf38:	57fd                	li	a5,-1
    8020bf3a:	b775                	j	8020bee6 <sys_openat+0x310>
    etrunc(ep);
    8020bf3c:	8526                	mv	a0,s1
    8020bf3e:	ffff8097          	auipc	ra,0xffff8
    8020bf42:	930080e7          	jalr	-1744(ra) # 8020386e <etrunc>
    8020bf46:	b781                	j	8020be86 <sys_openat+0x2b0>
    f->type = FD_ENTRY;
    8020bf48:	4789                	li	a5,2
    8020bf4a:	00f92023          	sw	a5,0(s2)
    f->off = (flags & O_APPEND) ? ep->file_size : 0;
    8020bf4e:	eb042783          	lw	a5,-336(s0)
    8020bf52:	4007f693          	andi	a3,a5,1024
    8020bf56:	4701                	li	a4,0
    8020bf58:	c299                	beqz	a3,8020bf5e <sys_openat+0x388>
    8020bf5a:	1084e703          	lwu	a4,264(s1)
    8020bf5e:	02e93023          	sd	a4,32(s2)
    f->ep = ep;
    8020bf62:	00993c23          	sd	s1,24(s2)
    f->readable = !(flags & O_WRONLY);
    8020bf66:	0017c713          	xori	a4,a5,1
    8020bf6a:	8b05                	andi	a4,a4,1
    8020bf6c:	00e90423          	sb	a4,8(s2)
    f->writable = (flags & O_WRONLY) || (flags & O_RDWR);
    8020bf70:	8b8d                	andi	a5,a5,3
    8020bf72:	00f037b3          	snez	a5,a5
    8020bf76:	00f904a3          	sb	a5,9(s2)
    8020bf7a:	b791                	j	8020bebe <sys_openat+0x2e8>
      fileclose(f);
    8020bf7c:	854a                	mv	a0,s2
    8020bf7e:	ffff9097          	auipc	ra,0xffff9
    8020bf82:	372080e7          	jalr	882(ra) # 802052f0 <fileclose>
    __debug_warn("file alloc failed\n");
    8020bf86:	00007517          	auipc	a0,0x7
    8020bf8a:	c2a50513          	addi	a0,a0,-982 # 80212bb0 <UNAME_VERSION+0xc0>
    8020bf8e:	ffffb097          	auipc	ra,0xffffb
    8020bf92:	316080e7          	jalr	790(ra) # 802072a4 <__debug_warn>
    eunlock(ep);
    8020bf96:	8526                	mv	a0,s1
    8020bf98:	ffff8097          	auipc	ra,0xffff8
    8020bf9c:	996080e7          	jalr	-1642(ra) # 8020392e <eunlock>
    eput(ep);
    8020bfa0:	8526                	mv	a0,s1
    8020bfa2:	ffff8097          	auipc	ra,0xffff8
    8020bfa6:	9da080e7          	jalr	-1574(ra) # 8020397c <eput>
    return -EMFILE;
    8020bfaa:	57a1                	li	a5,-24
    8020bfac:	bf2d                	j	8020bee6 <sys_openat+0x310>

000000008020bfae <sys_mkdirat>:

uint64
sys_mkdirat(void)
{
    8020bfae:	714d                	addi	sp,sp,-336
    8020bfb0:	e686                	sd	ra,328(sp)
    8020bfb2:	e2a2                	sd	s0,320(sp)
    8020bfb4:	fe26                	sd	s1,312(sp)
    8020bfb6:	fa4a                	sd	s2,304(sp)
    8020bfb8:	f64e                	sd	s3,296(sp)
    8020bfba:	0a80                	addi	s0,sp,336
  char path[FAT32_MAX_PATH];
  struct dirent *ep, *dp = NULL;
  struct file *fp;
  int dirfd;
  int mode;
  int err = 0;
    8020bfbc:	ea042a23          	sw	zero,-332(s0)

  if((argfd(0, &dirfd, &fp) < 0)){
    8020bfc0:	ec040613          	addi	a2,s0,-320
    8020bfc4:	ebc40593          	addi	a1,s0,-324
    8020bfc8:	4501                	li	a0,0
    8020bfca:	fffff097          	auipc	ra,0xfffff
    8020bfce:	dde080e7          	jalr	-546(ra) # 8020ada8 <argfd>
    8020bfd2:	14054863          	bltz	a0,8020c122 <sys_mkdirat+0x174>
    }
    dp = myproc()->cwd;
  }
  else
  {
    dp = fp->ep;
    8020bfd6:	ec043783          	ld	a5,-320(s0)
    8020bfda:	0187b903          	ld	s2,24(a5)
  }
  
  if(argstr(1, path, FAT32_MAX_PATH) < 0)
    8020bfde:	10400613          	li	a2,260
    8020bfe2:	ec840593          	addi	a1,s0,-312
    8020bfe6:	4505                	li	a0,1
    8020bfe8:	fffff097          	auipc	ra,0xfffff
    8020bfec:	d90080e7          	jalr	-624(ra) # 8020ad78 <argstr>
  {
    return -ENAMETOOLONG;
    8020bff0:	fdc00793          	li	a5,-36
  if(argstr(1, path, FAT32_MAX_PATH) < 0)
    8020bff4:	10054f63          	bltz	a0,8020c112 <sys_mkdirat+0x164>
  }
  
  if(argint(2, &mode) < 0)
    8020bff8:	eb840593          	addi	a1,s0,-328
    8020bffc:	4509                	li	a0,2
    8020bffe:	fffff097          	auipc	ra,0xfffff
    8020c002:	d36080e7          	jalr	-714(ra) # 8020ad34 <argint>
  {
    return -ENAMETOOLONG;
    8020c006:	fdc00793          	li	a5,-36
  if(argint(2, &mode) < 0)
    8020c00a:	10054463          	bltz	a0,8020c112 <sys_mkdirat+0x164>
  }
  if(myproc()->umask == 0){
    8020c00e:	ffffe097          	auipc	ra,0xffffe
    8020c012:	b1c080e7          	jalr	-1252(ra) # 80209b2a <myproc>
    8020c016:	1c052783          	lw	a5,448(a0)
    8020c01a:	cfcd                	beqz	a5,8020c0d4 <sys_mkdirat+0x126>

  }
  else if(((mode >> 6) - (myproc()->umask >> 6) > 0) && (mode >> 3) - (myproc()->umask >> 3) > 0 && (mode >> 0) - (myproc()->umask >> 0) > 0){
    8020c01c:	eb842483          	lw	s1,-328(s0)
    8020c020:	4064d49b          	sraiw	s1,s1,0x6
    8020c024:	ffffe097          	auipc	ra,0xffffe
    8020c028:	b06080e7          	jalr	-1274(ra) # 80209b2a <myproc>
    8020c02c:	1c052783          	lw	a5,448(a0)
    8020c030:	4067d79b          	sraiw	a5,a5,0x6
    8020c034:	9c9d                	subw	s1,s1,a5
    mode = (((mode >> 6) - (myproc()->umask >> 6)) << 6) | (((mode >> 3) - (myproc()->umask >> 3)) << 3) | (((mode >> 0) - (myproc()->umask >> 0)) << 0);
  }
  else{
    return -1;
    8020c036:	57fd                	li	a5,-1
  else if(((mode >> 6) - (myproc()->umask >> 6) > 0) && (mode >> 3) - (myproc()->umask >> 3) > 0 && (mode >> 0) - (myproc()->umask >> 0) > 0){
    8020c038:	0c905d63          	blez	s1,8020c112 <sys_mkdirat+0x164>
    8020c03c:	eb842483          	lw	s1,-328(s0)
    8020c040:	4034d49b          	sraiw	s1,s1,0x3
    8020c044:	ffffe097          	auipc	ra,0xffffe
    8020c048:	ae6080e7          	jalr	-1306(ra) # 80209b2a <myproc>
    8020c04c:	1c052783          	lw	a5,448(a0)
    8020c050:	4037d79b          	sraiw	a5,a5,0x3
    8020c054:	9c9d                	subw	s1,s1,a5
    return -1;
    8020c056:	57fd                	li	a5,-1
  else if(((mode >> 6) - (myproc()->umask >> 6) > 0) && (mode >> 3) - (myproc()->umask >> 3) > 0 && (mode >> 0) - (myproc()->umask >> 0) > 0){
    8020c058:	0a905d63          	blez	s1,8020c112 <sys_mkdirat+0x164>
    8020c05c:	eb842483          	lw	s1,-328(s0)
    8020c060:	ffffe097          	auipc	ra,0xffffe
    8020c064:	aca080e7          	jalr	-1334(ra) # 80209b2a <myproc>
    8020c068:	1c052783          	lw	a5,448(a0)
    8020c06c:	9c9d                	subw	s1,s1,a5
    return -1;
    8020c06e:	57fd                	li	a5,-1
  else if(((mode >> 6) - (myproc()->umask >> 6) > 0) && (mode >> 3) - (myproc()->umask >> 3) > 0 && (mode >> 0) - (myproc()->umask >> 0) > 0){
    8020c070:	0a905163          	blez	s1,8020c112 <sys_mkdirat+0x164>
    mode = (((mode >> 6) - (myproc()->umask >> 6)) << 6) | (((mode >> 3) - (myproc()->umask >> 3)) << 3) | (((mode >> 0) - (myproc()->umask >> 0)) << 0);
    8020c074:	eb842483          	lw	s1,-328(s0)
    8020c078:	4064d49b          	sraiw	s1,s1,0x6
    8020c07c:	ffffe097          	auipc	ra,0xffffe
    8020c080:	aae080e7          	jalr	-1362(ra) # 80209b2a <myproc>
    8020c084:	1c052783          	lw	a5,448(a0)
    8020c088:	4067d79b          	sraiw	a5,a5,0x6
    8020c08c:	9c9d                	subw	s1,s1,a5
    8020c08e:	0064949b          	slliw	s1,s1,0x6
    8020c092:	eb842983          	lw	s3,-328(s0)
    8020c096:	4039d99b          	sraiw	s3,s3,0x3
    8020c09a:	ffffe097          	auipc	ra,0xffffe
    8020c09e:	a90080e7          	jalr	-1392(ra) # 80209b2a <myproc>
    8020c0a2:	1c052783          	lw	a5,448(a0)
    8020c0a6:	4037d79b          	sraiw	a5,a5,0x3
    8020c0aa:	40f989bb          	subw	s3,s3,a5
    8020c0ae:	0039999b          	slliw	s3,s3,0x3
    8020c0b2:	0134e4b3          	or	s1,s1,s3
    8020c0b6:	2481                	sext.w	s1,s1
    8020c0b8:	eb842983          	lw	s3,-328(s0)
    8020c0bc:	ffffe097          	auipc	ra,0xffffe
    8020c0c0:	a6e080e7          	jalr	-1426(ra) # 80209b2a <myproc>
    8020c0c4:	1c052783          	lw	a5,448(a0)
    8020c0c8:	40f989bb          	subw	s3,s3,a5
    8020c0cc:	0134e4b3          	or	s1,s1,s3
    8020c0d0:	ea942c23          	sw	s1,-328(s0)
  }
  //__debug_info("[sys_mkdirat] create %s, dirfd = %d, mode = %p\n", path, dirfd, mode);
  
  if((ep = create(dp, path, T_DIR, (mode & ~S_IFMT) | S_IFDIR, &err)) == NULL)
    8020c0d4:	eb842683          	lw	a3,-328(s0)
    8020c0d8:	77c5                	lui	a5,0xffff1
    8020c0da:	17fd                	addi	a5,a5,-1
    8020c0dc:	8efd                	and	a3,a3,a5
    8020c0de:	6791                	lui	a5,0x4
    8020c0e0:	8edd                	or	a3,a3,a5
    8020c0e2:	eb440713          	addi	a4,s0,-332
    8020c0e6:	2681                	sext.w	a3,a3
    8020c0e8:	4605                	li	a2,1
    8020c0ea:	ec840593          	addi	a1,s0,-312
    8020c0ee:	854a                	mv	a0,s2
    8020c0f0:	ffff8097          	auipc	ra,0xffff8
    8020c0f4:	34c080e7          	jalr	844(ra) # 8020443c <create>
    8020c0f8:	84aa                	mv	s1,a0
    8020c0fa:	c12d                	beqz	a0,8020c15c <sys_mkdirat+0x1ae>
    __debug_warn("[sys_mkdirat] create %s failed\n", path);
    return -EINVAL;
  }
  
  //__debug_info("[sys_mkdirat] create %s ing......\n", path);
  eunlock(ep);
    8020c0fc:	ffff8097          	auipc	ra,0xffff8
    8020c100:	832080e7          	jalr	-1998(ra) # 8020392e <eunlock>
  eput(ep);
    8020c104:	8526                	mv	a0,s1
    8020c106:	ffff8097          	auipc	ra,0xffff8
    8020c10a:	876080e7          	jalr	-1930(ra) # 8020397c <eput>
  return err;
    8020c10e:	eb442783          	lw	a5,-332(s0)
}
    8020c112:	853e                	mv	a0,a5
    8020c114:	60b6                	ld	ra,328(sp)
    8020c116:	6416                	ld	s0,320(sp)
    8020c118:	74f2                	ld	s1,312(sp)
    8020c11a:	7952                	ld	s2,304(sp)
    8020c11c:	79b2                	ld	s3,296(sp)
    8020c11e:	6171                	addi	sp,sp,336
    8020c120:	8082                	ret
    if(path[0] != '/' && dirfd != AT_FDCWD)
    8020c122:	ec844703          	lbu	a4,-312(s0)
    8020c126:	02f00793          	li	a5,47
    8020c12a:	00f70863          	beq	a4,a5,8020c13a <sys_mkdirat+0x18c>
    8020c12e:	ebc42703          	lw	a4,-324(s0)
    8020c132:	f9c00793          	li	a5,-100
    8020c136:	00f71963          	bne	a4,a5,8020c148 <sys_mkdirat+0x19a>
    dp = myproc()->cwd;
    8020c13a:	ffffe097          	auipc	ra,0xffffe
    8020c13e:	9f0080e7          	jalr	-1552(ra) # 80209b2a <myproc>
    8020c142:	0f853903          	ld	s2,248(a0)
    8020c146:	bd61                	j	8020bfde <sys_mkdirat+0x30>
      __debug_warn("[sys_mkdirat] wrong dirfd\n");
    8020c148:	00007517          	auipc	a0,0x7
    8020c14c:	aa850513          	addi	a0,a0,-1368 # 80212bf0 <UNAME_VERSION+0x100>
    8020c150:	ffffb097          	auipc	ra,0xffffb
    8020c154:	154080e7          	jalr	340(ra) # 802072a4 <__debug_warn>
      return -EBADF;
    8020c158:	57dd                	li	a5,-9
    8020c15a:	bf65                	j	8020c112 <sys_mkdirat+0x164>
    __debug_warn("[sys_mkdirat] create %s failed\n", path);
    8020c15c:	ec840593          	addi	a1,s0,-312
    8020c160:	00007517          	auipc	a0,0x7
    8020c164:	ab050513          	addi	a0,a0,-1360 # 80212c10 <UNAME_VERSION+0x120>
    8020c168:	ffffb097          	auipc	ra,0xffffb
    8020c16c:	13c080e7          	jalr	316(ra) # 802072a4 <__debug_warn>
    return -EINVAL;
    8020c170:	57a9                	li	a5,-22
    8020c172:	b745                	j	8020c112 <sys_mkdirat+0x164>

000000008020c174 <sys_dup>:



uint64
sys_dup()
{
    8020c174:	7179                	addi	sp,sp,-48
    8020c176:	f406                	sd	ra,40(sp)
    8020c178:	f022                	sd	s0,32(sp)
    8020c17a:	ec26                	sd	s1,24(sp)
    8020c17c:	1800                	addi	s0,sp,48
  
  struct file *f;
  int fd;
  if(argfd(0, 0, &f) < 0){
    8020c17e:	fd840613          	addi	a2,s0,-40
    8020c182:	4581                	li	a1,0
    8020c184:	4501                	li	a0,0
    8020c186:	fffff097          	auipc	ra,0xfffff
    8020c18a:	c22080e7          	jalr	-990(ra) # 8020ada8 <argfd>
    8020c18e:	87aa                	mv	a5,a0
    return -1;
    8020c190:	557d                	li	a0,-1
  if(argfd(0, 0, &f) < 0){
    8020c192:	0207c363          	bltz	a5,8020c1b8 <sys_dup+0x44>
  return fdallocfrom(f,0);
    8020c196:	4581                	li	a1,0
    8020c198:	fd843503          	ld	a0,-40(s0)
    8020c19c:	00000097          	auipc	ra,0x0
    8020c1a0:	9e0080e7          	jalr	-1568(ra) # 8020bb7c <fdallocfrom>
    8020c1a4:	84aa                	mv	s1,a0
  }
  if((fd=fdalloc(f)) < 0){
    8020c1a6:	00054963          	bltz	a0,8020c1b8 <sys_dup+0x44>
    return fd;
  }
  filedup(f);
    8020c1aa:	fd843503          	ld	a0,-40(s0)
    8020c1ae:	ffff9097          	auipc	ra,0xffff9
    8020c1b2:	0f0080e7          	jalr	240(ra) # 8020529e <filedup>
  //printf("[dup]ret %d\n",fd);
  return fd;
    8020c1b6:	8526                	mv	a0,s1
}
    8020c1b8:	70a2                	ld	ra,40(sp)
    8020c1ba:	7402                	ld	s0,32(sp)
    8020c1bc:	64e2                	ld	s1,24(sp)
    8020c1be:	6145                	addi	sp,sp,48
    8020c1c0:	8082                	ret

000000008020c1c2 <sys_dup3>:


uint64
sys_dup3(void)
{
    8020c1c2:	7179                	addi	sp,sp,-48
    8020c1c4:	f406                	sd	ra,40(sp)
    8020c1c6:	f022                	sd	s0,32(sp)
    8020c1c8:	ec26                	sd	s1,24(sp)
    8020c1ca:	1800                	addi	s0,sp,48
  struct file *f;
  int newfd;
  struct proc* p = myproc();
    8020c1cc:	ffffe097          	auipc	ra,0xffffe
    8020c1d0:	95e080e7          	jalr	-1698(ra) # 80209b2a <myproc>
    8020c1d4:	84aa                	mv	s1,a0
  if(argfd(0, 0, &f) < 0) 
    8020c1d6:	fd840613          	addi	a2,s0,-40
    8020c1da:	4581                	li	a1,0
    8020c1dc:	4501                	li	a0,0
    8020c1de:	fffff097          	auipc	ra,0xfffff
    8020c1e2:	bca080e7          	jalr	-1078(ra) # 8020ada8 <argfd>
    return -1;
    8020c1e6:	57fd                	li	a5,-1
  if(argfd(0, 0, &f) < 0) 
    8020c1e8:	04054863          	bltz	a0,8020c238 <sys_dup3+0x76>
  if(argint(1, &newfd) < 0 || newfd < 0)
    8020c1ec:	fd440593          	addi	a1,s0,-44
    8020c1f0:	4505                	li	a0,1
    8020c1f2:	fffff097          	auipc	ra,0xfffff
    8020c1f6:	b42080e7          	jalr	-1214(ra) # 8020ad34 <argint>
    8020c1fa:	04054563          	bltz	a0,8020c244 <sys_dup3+0x82>
    8020c1fe:	fd442703          	lw	a4,-44(s0)
    8020c202:	04074363          	bltz	a4,8020c248 <sys_dup3+0x86>
    return -1;
  if(newfd >= NOFILEMAX(p)){
    8020c206:	70f4                	ld	a3,224(s1)
    8020c208:	06500793          	li	a5,101
    8020c20c:	00d7d463          	bge	a5,a3,8020c214 <sys_dup3+0x52>
    8020c210:	06500693          	li	a3,101
    return -EMFILE;
    8020c214:	57a1                	li	a5,-24
  if(newfd >= NOFILEMAX(p)){
    8020c216:	02d75163          	bge	a4,a3,8020c238 <sys_dup3+0x76>
  }
  if(p->ofile[newfd] != f) 
    8020c21a:	070e                	slli	a4,a4,0x3
    8020c21c:	74e4                	ld	s1,232(s1)
    8020c21e:	94ba                	add	s1,s1,a4
    8020c220:	fd843503          	ld	a0,-40(s0)
    8020c224:	609c                	ld	a5,0(s1)
    8020c226:	00a78763          	beq	a5,a0,8020c234 <sys_dup3+0x72>
  {
    p->ofile[newfd] = filedup(f);
    8020c22a:	ffff9097          	auipc	ra,0xffff9
    8020c22e:	074080e7          	jalr	116(ra) # 8020529e <filedup>
    8020c232:	e088                	sd	a0,0(s1)
  }
  return newfd;
    8020c234:	fd442783          	lw	a5,-44(s0)
}
    8020c238:	853e                	mv	a0,a5
    8020c23a:	70a2                	ld	ra,40(sp)
    8020c23c:	7402                	ld	s0,32(sp)
    8020c23e:	64e2                	ld	s1,24(sp)
    8020c240:	6145                	addi	sp,sp,48
    8020c242:	8082                	ret
    return -1;
    8020c244:	57fd                	li	a5,-1
    8020c246:	bfcd                	j	8020c238 <sys_dup3+0x76>
    8020c248:	57fd                	li	a5,-1
    8020c24a:	b7fd                	j	8020c238 <sys_dup3+0x76>

000000008020c24c <sys_read>:

uint64
sys_read(void)
{
    8020c24c:	7179                	addi	sp,sp,-48
    8020c24e:	f406                	sd	ra,40(sp)
    8020c250:	f022                	sd	s0,32(sp)
    8020c252:	1800                	addi	s0,sp,48
  struct file *f;
  int n,fd;
  uint64 p;
  if(argfd(0, &fd, &f) < 0 || argint(2, &n) < 0 || argaddr(1, &p) < 0)
    8020c254:	fe840613          	addi	a2,s0,-24
    8020c258:	fe040593          	addi	a1,s0,-32
    8020c25c:	4501                	li	a0,0
    8020c25e:	fffff097          	auipc	ra,0xfffff
    8020c262:	b4a080e7          	jalr	-1206(ra) # 8020ada8 <argfd>
    return -1;
    8020c266:	57fd                	li	a5,-1
  if(argfd(0, &fd, &f) < 0 || argint(2, &n) < 0 || argaddr(1, &p) < 0)
    8020c268:	04054163          	bltz	a0,8020c2aa <sys_read+0x5e>
    8020c26c:	fe440593          	addi	a1,s0,-28
    8020c270:	4509                	li	a0,2
    8020c272:	fffff097          	auipc	ra,0xfffff
    8020c276:	ac2080e7          	jalr	-1342(ra) # 8020ad34 <argint>
    return -1;
    8020c27a:	57fd                	li	a5,-1
  if(argfd(0, &fd, &f) < 0 || argint(2, &n) < 0 || argaddr(1, &p) < 0)
    8020c27c:	02054763          	bltz	a0,8020c2aa <sys_read+0x5e>
    8020c280:	fd840593          	addi	a1,s0,-40
    8020c284:	4505                	li	a0,1
    8020c286:	fffff097          	auipc	ra,0xfffff
    8020c28a:	ad0080e7          	jalr	-1328(ra) # 8020ad56 <argaddr>
    return -1;
    8020c28e:	57fd                	li	a5,-1
  if(argfd(0, &fd, &f) < 0 || argint(2, &n) < 0 || argaddr(1, &p) < 0)
    8020c290:	00054d63          	bltz	a0,8020c2aa <sys_read+0x5e>
  
  //printf("[sys read]fd:%d n:%d addr:%p\n",fd,n,p);
  
  return fileread(f, p, n);
    8020c294:	fe442603          	lw	a2,-28(s0)
    8020c298:	fd843583          	ld	a1,-40(s0)
    8020c29c:	fe843503          	ld	a0,-24(s0)
    8020c2a0:	ffff9097          	auipc	ra,0xffff9
    8020c2a4:	522080e7          	jalr	1314(ra) # 802057c2 <fileread>
    8020c2a8:	87aa                	mv	a5,a0
}
    8020c2aa:	853e                	mv	a0,a5
    8020c2ac:	70a2                	ld	ra,40(sp)
    8020c2ae:	7402                	ld	s0,32(sp)
    8020c2b0:	6145                	addi	sp,sp,48
    8020c2b2:	8082                	ret

000000008020c2b4 <sys_write>:



uint64
sys_write(void)
{
    8020c2b4:	7179                	addi	sp,sp,-48
    8020c2b6:	f406                	sd	ra,40(sp)
    8020c2b8:	f022                	sd	s0,32(sp)
    8020c2ba:	1800                	addi	s0,sp,48
  int fd;
  struct file *f;
  int n;
  uint64 p;
  if(argfd(0, &fd, &f) < 0 || argint(2, &n) < 0 || argaddr(1, &p) < 0){
    8020c2bc:	fe040613          	addi	a2,s0,-32
    8020c2c0:	fec40593          	addi	a1,s0,-20
    8020c2c4:	4501                	li	a0,0
    8020c2c6:	fffff097          	auipc	ra,0xfffff
    8020c2ca:	ae2080e7          	jalr	-1310(ra) # 8020ada8 <argfd>
    return -1;
    8020c2ce:	57fd                	li	a5,-1
  if(argfd(0, &fd, &f) < 0 || argint(2, &n) < 0 || argaddr(1, &p) < 0){
    8020c2d0:	04054163          	bltz	a0,8020c312 <sys_write+0x5e>
    8020c2d4:	fdc40593          	addi	a1,s0,-36
    8020c2d8:	4509                	li	a0,2
    8020c2da:	fffff097          	auipc	ra,0xfffff
    8020c2de:	a5a080e7          	jalr	-1446(ra) # 8020ad34 <argint>
    return -1;
    8020c2e2:	57fd                	li	a5,-1
  if(argfd(0, &fd, &f) < 0 || argint(2, &n) < 0 || argaddr(1, &p) < 0){
    8020c2e4:	02054763          	bltz	a0,8020c312 <sys_write+0x5e>
    8020c2e8:	fd040593          	addi	a1,s0,-48
    8020c2ec:	4505                	li	a0,1
    8020c2ee:	fffff097          	auipc	ra,0xfffff
    8020c2f2:	a68080e7          	jalr	-1432(ra) # 8020ad56 <argaddr>
    return -1;
    8020c2f6:	57fd                	li	a5,-1
  if(argfd(0, &fd, &f) < 0 || argint(2, &n) < 0 || argaddr(1, &p) < 0){
    8020c2f8:	00054d63          	bltz	a0,8020c312 <sys_write+0x5e>
  }
  return filewrite(f, p, n);
    8020c2fc:	fdc42603          	lw	a2,-36(s0)
    8020c300:	fd043583          	ld	a1,-48(s0)
    8020c304:	fe043503          	ld	a0,-32(s0)
    8020c308:	ffff9097          	auipc	ra,0xffff9
    8020c30c:	5d0080e7          	jalr	1488(ra) # 802058d8 <filewrite>
    8020c310:	87aa                	mv	a5,a0
}
    8020c312:	853e                	mv	a0,a5
    8020c314:	70a2                	ld	ra,40(sp)
    8020c316:	7402                	ld	s0,32(sp)
    8020c318:	6145                	addi	sp,sp,48
    8020c31a:	8082                	ret

000000008020c31c <sys_readv>:


uint64 
sys_readv(void){
    8020c31c:	711d                	addi	sp,sp,-96
    8020c31e:	ec86                	sd	ra,88(sp)
    8020c320:	e8a2                	sd	s0,80(sp)
    8020c322:	e4a6                	sd	s1,72(sp)
    8020c324:	e0ca                	sd	s2,64(sp)
    8020c326:	fc4e                	sd	s3,56(sp)
    8020c328:	1080                	addi	s0,sp,96
  int fd;
  struct file* f;
  uint64 iov;
  int iovcnt;
  int totlen = 0;
  if(argfd(0, &fd, &f) < 0)
    8020c32a:	fc040613          	addi	a2,s0,-64
    8020c32e:	fcc40593          	addi	a1,s0,-52
    8020c332:	4501                	li	a0,0
    8020c334:	fffff097          	auipc	ra,0xfffff
    8020c338:	a74080e7          	jalr	-1420(ra) # 8020ada8 <argfd>
  {
    return -1;
    8020c33c:	597d                	li	s2,-1
  if(argfd(0, &fd, &f) < 0)
    8020c33e:	08054463          	bltz	a0,8020c3c6 <sys_readv+0xaa>
  }
  if(argaddr(1, &iov) < 0)
    8020c342:	fb840593          	addi	a1,s0,-72
    8020c346:	4505                	li	a0,1
    8020c348:	fffff097          	auipc	ra,0xfffff
    8020c34c:	a0e080e7          	jalr	-1522(ra) # 8020ad56 <argaddr>
    8020c350:	06054b63          	bltz	a0,8020c3c6 <sys_readv+0xaa>
  {
    return -1;
  }
  if(argint(2, &iovcnt) < 0)
    8020c354:	fb440593          	addi	a1,s0,-76
    8020c358:	4509                	li	a0,2
    8020c35a:	fffff097          	auipc	ra,0xfffff
    8020c35e:	9da080e7          	jalr	-1574(ra) # 8020ad34 <argint>
    8020c362:	06054263          	bltz	a0,8020c3c6 <sys_readv+0xaa>
  {
    return -1;
  }
  struct proc* p = myproc();
    8020c366:	ffffd097          	auipc	ra,0xffffd
    8020c36a:	7c4080e7          	jalr	1988(ra) # 80209b2a <myproc>
    8020c36e:	89aa                	mv	s3,a0
  struct iovec v;
  //printf("[readv]fd:%d iov:%p iovcnt:%d\n",fd,iov,iovcnt);
  for(int i = 0;i<iovcnt;i++){
    8020c370:	fb442783          	lw	a5,-76(s0)
    8020c374:	04f05863          	blez	a5,8020c3c4 <sys_readv+0xa8>
    8020c378:	4481                	li	s1,0
  int totlen = 0;
    8020c37a:	4901                	li	s2,0
    8020c37c:	a801                	j	8020c38c <sys_readv+0x70>
  for(int i = 0;i<iovcnt;i++){
    8020c37e:	0485                	addi	s1,s1,1
    8020c380:	fb442703          	lw	a4,-76(s0)
    8020c384:	0004879b          	sext.w	a5,s1
    8020c388:	02e7df63          	bge	a5,a4,8020c3c6 <sys_readv+0xaa>
    uint64 vec = iov+i*sizeof(v);
    8020c38c:	00449613          	slli	a2,s1,0x4
    copyin(p->pagetable,(char*)&v,vec,sizeof(v));
    8020c390:	46c1                	li	a3,16
    8020c392:	fb843783          	ld	a5,-72(s0)
    8020c396:	963e                	add	a2,a2,a5
    8020c398:	fa040593          	addi	a1,s0,-96
    8020c39c:	0609b503          	ld	a0,96(s3)
    8020c3a0:	ffffd097          	auipc	ra,0xffffd
    8020c3a4:	e9a080e7          	jalr	-358(ra) # 8020923a <copyin>
    //printf("%d iov base:%p len:%p\n",i,v.iov_base,v.iov_len);
    if(!v.iov_len)continue;
    8020c3a8:	fa842603          	lw	a2,-88(s0)
    8020c3ac:	da69                	beqz	a2,8020c37e <sys_readv+0x62>
    totlen += fileread(f,(uint64)v.iov_base,v.iov_len);
    8020c3ae:	fa043583          	ld	a1,-96(s0)
    8020c3b2:	fc043503          	ld	a0,-64(s0)
    8020c3b6:	ffff9097          	auipc	ra,0xffff9
    8020c3ba:	40c080e7          	jalr	1036(ra) # 802057c2 <fileread>
    8020c3be:	0125093b          	addw	s2,a0,s2
    8020c3c2:	bf75                	j	8020c37e <sys_readv+0x62>
  int totlen = 0;
    8020c3c4:	4901                	li	s2,0
  }
  return totlen;
}
    8020c3c6:	854a                	mv	a0,s2
    8020c3c8:	60e6                	ld	ra,88(sp)
    8020c3ca:	6446                	ld	s0,80(sp)
    8020c3cc:	64a6                	ld	s1,72(sp)
    8020c3ce:	6906                	ld	s2,64(sp)
    8020c3d0:	79e2                	ld	s3,56(sp)
    8020c3d2:	6125                	addi	sp,sp,96
    8020c3d4:	8082                	ret

000000008020c3d6 <sys_writev>:

uint64 
sys_writev(void){
    8020c3d6:	711d                	addi	sp,sp,-96
    8020c3d8:	ec86                	sd	ra,88(sp)
    8020c3da:	e8a2                	sd	s0,80(sp)
    8020c3dc:	e4a6                	sd	s1,72(sp)
    8020c3de:	e0ca                	sd	s2,64(sp)
    8020c3e0:	fc4e                	sd	s3,56(sp)
    8020c3e2:	1080                	addi	s0,sp,96
  int fd;
  struct file* f;
  uint64 iov;
  int iovcnt;
  int totlen = 0;
  if(argfd(0, &fd, &f) < 0)
    8020c3e4:	fc040613          	addi	a2,s0,-64
    8020c3e8:	fcc40593          	addi	a1,s0,-52
    8020c3ec:	4501                	li	a0,0
    8020c3ee:	fffff097          	auipc	ra,0xfffff
    8020c3f2:	9ba080e7          	jalr	-1606(ra) # 8020ada8 <argfd>
  {
    return -1;
    8020c3f6:	597d                	li	s2,-1
  if(argfd(0, &fd, &f) < 0)
    8020c3f8:	08054463          	bltz	a0,8020c480 <sys_writev+0xaa>
  }
  if(argaddr(1, &iov) < 0)
    8020c3fc:	fb840593          	addi	a1,s0,-72
    8020c400:	4505                	li	a0,1
    8020c402:	fffff097          	auipc	ra,0xfffff
    8020c406:	954080e7          	jalr	-1708(ra) # 8020ad56 <argaddr>
    8020c40a:	06054b63          	bltz	a0,8020c480 <sys_writev+0xaa>
  {
    return -1;
  }
  if(argint(2, &iovcnt) < 0)
    8020c40e:	fb440593          	addi	a1,s0,-76
    8020c412:	4509                	li	a0,2
    8020c414:	fffff097          	auipc	ra,0xfffff
    8020c418:	920080e7          	jalr	-1760(ra) # 8020ad34 <argint>
    8020c41c:	06054263          	bltz	a0,8020c480 <sys_writev+0xaa>
  {
    return -1;
  }
  struct proc* p = myproc();
    8020c420:	ffffd097          	auipc	ra,0xffffd
    8020c424:	70a080e7          	jalr	1802(ra) # 80209b2a <myproc>
    8020c428:	89aa                	mv	s3,a0
  struct iovec v;
  //printf("[writev]fd:%d name:%s iov:%p iovcnt:%d\n",fd,f->ep->filename,iov,iovcnt);
  for(int i = 0;i<iovcnt;i++){
    8020c42a:	fb442783          	lw	a5,-76(s0)
    8020c42e:	04f05863          	blez	a5,8020c47e <sys_writev+0xa8>
    8020c432:	4481                	li	s1,0
  int totlen = 0;
    8020c434:	4901                	li	s2,0
    8020c436:	a801                	j	8020c446 <sys_writev+0x70>
  for(int i = 0;i<iovcnt;i++){
    8020c438:	0485                	addi	s1,s1,1
    8020c43a:	fb442703          	lw	a4,-76(s0)
    8020c43e:	0004879b          	sext.w	a5,s1
    8020c442:	02e7df63          	bge	a5,a4,8020c480 <sys_writev+0xaa>
    uint64 vec = iov+i*sizeof(v);
    8020c446:	00449613          	slli	a2,s1,0x4
    copyin(p->pagetable,(char*)&v,vec,sizeof(v));
    8020c44a:	46c1                	li	a3,16
    8020c44c:	fb843783          	ld	a5,-72(s0)
    8020c450:	963e                	add	a2,a2,a5
    8020c452:	fa040593          	addi	a1,s0,-96
    8020c456:	0609b503          	ld	a0,96(s3)
    8020c45a:	ffffd097          	auipc	ra,0xffffd
    8020c45e:	de0080e7          	jalr	-544(ra) # 8020923a <copyin>
    //printf("%d iov base:%p len:%p\n",i,v.iov_base,v.iov_len);
    if(!v.iov_len)continue;
    8020c462:	fa842603          	lw	a2,-88(s0)
    8020c466:	da69                	beqz	a2,8020c438 <sys_writev+0x62>
    totlen += filewrite(f,(uint64)v.iov_base,v.iov_len);
    8020c468:	fa043583          	ld	a1,-96(s0)
    8020c46c:	fc043503          	ld	a0,-64(s0)
    8020c470:	ffff9097          	auipc	ra,0xffff9
    8020c474:	468080e7          	jalr	1128(ra) # 802058d8 <filewrite>
    8020c478:	0125093b          	addw	s2,a0,s2
    8020c47c:	bf75                	j	8020c438 <sys_writev+0x62>
  int totlen = 0;
    8020c47e:	4901                	li	s2,0
    //printf("[writev]next\n");
  }
  return totlen;
}
    8020c480:	854a                	mv	a0,s2
    8020c482:	60e6                	ld	ra,88(sp)
    8020c484:	6446                	ld	s0,80(sp)
    8020c486:	64a6                	ld	s1,72(sp)
    8020c488:	6906                	ld	s2,64(sp)
    8020c48a:	79e2                	ld	s3,56(sp)
    8020c48c:	6125                	addi	sp,sp,96
    8020c48e:	8082                	ret

000000008020c490 <sys_close>:

uint64
sys_close(void)
{
    8020c490:	1101                	addi	sp,sp,-32
    8020c492:	ec06                	sd	ra,24(sp)
    8020c494:	e822                	sd	s0,16(sp)
    8020c496:	1000                	addi	s0,sp,32
  int fd;
  struct file *f;

  if(argfd(0, &fd, &f) < 0)
    8020c498:	fe040613          	addi	a2,s0,-32
    8020c49c:	fec40593          	addi	a1,s0,-20
    8020c4a0:	4501                	li	a0,0
    8020c4a2:	fffff097          	auipc	ra,0xfffff
    8020c4a6:	906080e7          	jalr	-1786(ra) # 8020ada8 <argfd>
    return -1;
    8020c4aa:	57fd                	li	a5,-1
  if(argfd(0, &fd, &f) < 0)
    8020c4ac:	02054463          	bltz	a0,8020c4d4 <sys_close+0x44>
  myproc()->ofile[fd] = 0;
    8020c4b0:	ffffd097          	auipc	ra,0xffffd
    8020c4b4:	67a080e7          	jalr	1658(ra) # 80209b2a <myproc>
    8020c4b8:	fec42703          	lw	a4,-20(s0)
    8020c4bc:	757c                	ld	a5,232(a0)
    8020c4be:	070e                	slli	a4,a4,0x3
    8020c4c0:	97ba                	add	a5,a5,a4
    8020c4c2:	0007b023          	sd	zero,0(a5) # 4000 <_entry-0x801fc000>
  fileclose(f);
    8020c4c6:	fe043503          	ld	a0,-32(s0)
    8020c4ca:	ffff9097          	auipc	ra,0xffff9
    8020c4ce:	e26080e7          	jalr	-474(ra) # 802052f0 <fileclose>
  return 0;
    8020c4d2:	4781                	li	a5,0
}
    8020c4d4:	853e                	mv	a0,a5
    8020c4d6:	60e2                	ld	ra,24(sp)
    8020c4d8:	6442                	ld	s0,16(sp)
    8020c4da:	6105                	addi	sp,sp,32
    8020c4dc:	8082                	ret

000000008020c4de <sys_unlinkat>:

uint64
sys_unlinkat(void)
{
    8020c4de:	7129                	addi	sp,sp,-320
    8020c4e0:	fe06                	sd	ra,312(sp)
    8020c4e2:	fa22                	sd	s0,304(sp)
    8020c4e4:	f626                	sd	s1,296(sp)
    8020c4e6:	0280                	addi	s0,sp,320
  int dirfd,flags,len;
  struct dirent *dp;
  struct dirent* ep;
  char path[FAT32_MAX_PATH];
  
  if(argfd(0,&dirfd,&fp)<0){
    8020c4e8:	fd840613          	addi	a2,s0,-40
    8020c4ec:	fd440593          	addi	a1,s0,-44
    8020c4f0:	4501                	li	a0,0
    8020c4f2:	fffff097          	auipc	ra,0xfffff
    8020c4f6:	8b6080e7          	jalr	-1866(ra) # 8020ada8 <argfd>
  
  }
  if((len = argstr(1,path,FAT32_MAX_PATH))<0||
    8020c4fa:	10400613          	li	a2,260
    8020c4fe:	ec840593          	addi	a1,s0,-312
    8020c502:	4505                	li	a0,1
    8020c504:	fffff097          	auipc	ra,0xfffff
    8020c508:	874080e7          	jalr	-1932(ra) # 8020ad78 <argstr>
     argint(2,&flags)<0){
    return -1;   
    8020c50c:	57fd                	li	a5,-1
  if((len = argstr(1,path,FAT32_MAX_PATH))<0||
    8020c50e:	08054863          	bltz	a0,8020c59e <sys_unlinkat+0xc0>
     argint(2,&flags)<0){
    8020c512:	fd040593          	addi	a1,s0,-48
    8020c516:	4509                	li	a0,2
    8020c518:	fffff097          	auipc	ra,0xfffff
    8020c51c:	81c080e7          	jalr	-2020(ra) # 8020ad34 <argint>
  if((len = argstr(1,path,FAT32_MAX_PATH))<0||
    8020c520:	0a054363          	bltz	a0,8020c5c6 <sys_unlinkat+0xe8>
  }
  
  if(dirfd != AT_FDCWD){
    8020c524:	fd442703          	lw	a4,-44(s0)
    8020c528:	f9c00793          	li	a5,-100
    8020c52c:	06f70f63          	beq	a4,a5,8020c5aa <sys_unlinkat+0xcc>
    if(fp == NULL)return -1;
    8020c530:	fd843783          	ld	a5,-40(s0)
    8020c534:	cbd9                	beqz	a5,8020c5ca <sys_unlinkat+0xec>
    dp = fp->ep;
    8020c536:	6f88                	ld	a0,24(a5)
  }else
    dp = NULL;
 
  if((ep = ename(dp,path,0)) == NULL){
    8020c538:	4601                	li	a2,0
    8020c53a:	ec840593          	addi	a1,s0,-312
    8020c53e:	ffff8097          	auipc	ra,0xffff8
    8020c542:	dfc080e7          	jalr	-516(ra) # 8020433a <ename>
    8020c546:	84aa                	mv	s1,a0
    8020c548:	c159                	beqz	a0,8020c5ce <sys_unlinkat+0xf0>
    return -1;
  }
  elock(ep);
    8020c54a:	ffff7097          	auipc	ra,0xffff7
    8020c54e:	3ae080e7          	jalr	942(ra) # 802038f8 <elock>
  if((ep->attribute & ATTR_DIRECTORY) && !isdirempty(ep)){
    8020c552:	1004c783          	lbu	a5,256(s1)
    8020c556:	8bc1                	andi	a5,a5,16
    8020c558:	c799                	beqz	a5,8020c566 <sys_unlinkat+0x88>
    8020c55a:	8526                	mv	a0,s1
    8020c55c:	ffff8097          	auipc	ra,0xffff8
    8020c560:	c72080e7          	jalr	-910(ra) # 802041ce <isdirempty>
    8020c564:	c529                	beqz	a0,8020c5ae <sys_unlinkat+0xd0>
      eunlock(ep);
      eput(ep);
      return -1;
  }
  elock(ep->parent);      // Will this lead to deadlock?
    8020c566:	1284b503          	ld	a0,296(s1)
    8020c56a:	ffff7097          	auipc	ra,0xffff7
    8020c56e:	38e080e7          	jalr	910(ra) # 802038f8 <elock>
  eremove(ep);
    8020c572:	8526                	mv	a0,s1
    8020c574:	ffff7097          	auipc	ra,0xffff7
    8020c578:	212080e7          	jalr	530(ra) # 80203786 <eremove>
  eunlock(ep->parent);
    8020c57c:	1284b503          	ld	a0,296(s1)
    8020c580:	ffff7097          	auipc	ra,0xffff7
    8020c584:	3ae080e7          	jalr	942(ra) # 8020392e <eunlock>
  eunlock(ep);
    8020c588:	8526                	mv	a0,s1
    8020c58a:	ffff7097          	auipc	ra,0xffff7
    8020c58e:	3a4080e7          	jalr	932(ra) # 8020392e <eunlock>
  eput(ep);
    8020c592:	8526                	mv	a0,s1
    8020c594:	ffff7097          	auipc	ra,0xffff7
    8020c598:	3e8080e7          	jalr	1000(ra) # 8020397c <eput>
  return 0;
    8020c59c:	4781                	li	a5,0

}
    8020c59e:	853e                	mv	a0,a5
    8020c5a0:	70f2                	ld	ra,312(sp)
    8020c5a2:	7452                	ld	s0,304(sp)
    8020c5a4:	74b2                	ld	s1,296(sp)
    8020c5a6:	6131                	addi	sp,sp,320
    8020c5a8:	8082                	ret
    dp = NULL;
    8020c5aa:	4501                	li	a0,0
    8020c5ac:	b771                	j	8020c538 <sys_unlinkat+0x5a>
      eunlock(ep);
    8020c5ae:	8526                	mv	a0,s1
    8020c5b0:	ffff7097          	auipc	ra,0xffff7
    8020c5b4:	37e080e7          	jalr	894(ra) # 8020392e <eunlock>
      eput(ep);
    8020c5b8:	8526                	mv	a0,s1
    8020c5ba:	ffff7097          	auipc	ra,0xffff7
    8020c5be:	3c2080e7          	jalr	962(ra) # 8020397c <eput>
      return -1;
    8020c5c2:	57fd                	li	a5,-1
    8020c5c4:	bfe9                	j	8020c59e <sys_unlinkat+0xc0>
    return -1;   
    8020c5c6:	57fd                	li	a5,-1
    8020c5c8:	bfd9                	j	8020c59e <sys_unlinkat+0xc0>
    if(fp == NULL)return -1;
    8020c5ca:	57fd                	li	a5,-1
    8020c5cc:	bfc9                	j	8020c59e <sys_unlinkat+0xc0>
    return -1;
    8020c5ce:	57fd                	li	a5,-1
    8020c5d0:	b7f9                	j	8020c59e <sys_unlinkat+0xc0>

000000008020c5d2 <sys_getcwd>:

// get absolute cwd string
uint64
sys_getcwd(void)
{
    8020c5d2:	714d                	addi	sp,sp,-336
    8020c5d4:	e686                	sd	ra,328(sp)
    8020c5d6:	e2a2                	sd	s0,320(sp)
    8020c5d8:	fe26                	sd	s1,312(sp)
    8020c5da:	fa4a                	sd	s2,304(sp)
    8020c5dc:	f64e                	sd	s3,296(sp)
    8020c5de:	f252                	sd	s4,288(sp)
    8020c5e0:	ee56                	sd	s5,280(sp)
    8020c5e2:	0a80                	addi	s0,sp,336
  uint64 addr;
  if (argaddr(0, &addr) < 0)
    8020c5e4:	fb840593          	addi	a1,s0,-72
    8020c5e8:	4501                	li	a0,0
    8020c5ea:	ffffe097          	auipc	ra,0xffffe
    8020c5ee:	76c080e7          	jalr	1900(ra) # 8020ad56 <argaddr>
    return -1;
    8020c5f2:	57fd                	li	a5,-1
  if (argaddr(0, &addr) < 0)
    8020c5f4:	08054b63          	bltz	a0,8020c68a <sys_getcwd+0xb8>

  struct dirent *de = myproc()->cwd;
    8020c5f8:	ffffd097          	auipc	ra,0xffffd
    8020c5fc:	532080e7          	jalr	1330(ra) # 80209b2a <myproc>
    8020c600:	7d64                	ld	s1,248(a0)
  char path[FAT32_MAX_PATH];
  char *s;
  int len;

  if (de->parent == NULL) {
    8020c602:	1284b783          	ld	a5,296(s1)
    8020c606:	cfc1                	beqz	a5,8020c69e <sys_getcwd+0xcc>
    s = "/";
  } else {
    s = path + FAT32_MAX_PATH - 1;
    *s = '\0';
    8020c608:	fa0409a3          	sb	zero,-77(s0)
    s = path + FAT32_MAX_PATH - 1;
    8020c60c:	fb340993          	addi	s3,s0,-77
    while (de->parent) {
      len = strlen(de->filename);
      s -= len;
      if (s <= path)          // can't reach root "/"
    8020c610:	eb040a13          	addi	s4,s0,-336
        return -1;
      strncpy(s, de->filename, len);
      *--s = '/';
    8020c614:	02f00a93          	li	s5,47
      len = strlen(de->filename);
    8020c618:	8526                	mv	a0,s1
    8020c61a:	ffff5097          	auipc	ra,0xffff5
    8020c61e:	8e2080e7          	jalr	-1822(ra) # 80200efc <strlen>
    8020c622:	862a                	mv	a2,a0
      s -= len;
    8020c624:	40a98933          	sub	s2,s3,a0
      if (s <= path)          // can't reach root "/"
    8020c628:	092a7a63          	bgeu	s4,s2,8020c6bc <sys_getcwd+0xea>
      strncpy(s, de->filename, len);
    8020c62c:	85a6                	mv	a1,s1
    8020c62e:	854a                	mv	a0,s2
    8020c630:	ffff5097          	auipc	ra,0xffff5
    8020c634:	85c080e7          	jalr	-1956(ra) # 80200e8c <strncpy>
      *--s = '/';
    8020c638:	fff90993          	addi	s3,s2,-1
    8020c63c:	ff590fa3          	sb	s5,-1(s2)
      de = de->parent;
    8020c640:	1284b483          	ld	s1,296(s1)
    while (de->parent) {
    8020c644:	1284b783          	ld	a5,296(s1)
    8020c648:	fbe1                	bnez	a5,8020c618 <sys_getcwd+0x46>
    }
  }
  if(addr == 0){
    8020c64a:	fb843783          	ld	a5,-72(s0)
    8020c64e:	eb91                	bnez	a5,8020c662 <sys_getcwd+0x90>
    addr = growprocsize(FAT32_MAX_PATH);
    8020c650:	10400513          	li	a0,260
    8020c654:	ffffe097          	auipc	ra,0xffffe
    8020c658:	008080e7          	jalr	8(ra) # 8020a65c <growprocsize>
    8020c65c:	faa43c23          	sd	a0,-72(s0)
    if(addr == 0)
    8020c660:	c521                	beqz	a0,8020c6a8 <sys_getcwd+0xd6>
      __debug_warn("[sys_getcwd] alloc address failed\n");
      return -1;
    }
  }

  if (either_copyout(1, addr, s, strlen(s) + 1) < 0)
    8020c662:	fb843483          	ld	s1,-72(s0)
    8020c666:	854e                	mv	a0,s3
    8020c668:	ffff5097          	auipc	ra,0xffff5
    8020c66c:	894080e7          	jalr	-1900(ra) # 80200efc <strlen>
    8020c670:	0015069b          	addiw	a3,a0,1
    8020c674:	864e                	mv	a2,s3
    8020c676:	85a6                	mv	a1,s1
    8020c678:	4505                	li	a0,1
    8020c67a:	ffffd097          	auipc	ra,0xffffd
    8020c67e:	e4e080e7          	jalr	-434(ra) # 802094c8 <either_copyout>
    8020c682:	02054f63          	bltz	a0,8020c6c0 <sys_getcwd+0xee>
    return -1;
  return addr;
    8020c686:	fb843783          	ld	a5,-72(s0)
}
    8020c68a:	853e                	mv	a0,a5
    8020c68c:	60b6                	ld	ra,328(sp)
    8020c68e:	6416                	ld	s0,320(sp)
    8020c690:	74f2                	ld	s1,312(sp)
    8020c692:	7952                	ld	s2,304(sp)
    8020c694:	79b2                	ld	s3,296(sp)
    8020c696:	7a12                	ld	s4,288(sp)
    8020c698:	6af2                	ld	s5,280(sp)
    8020c69a:	6171                	addi	sp,sp,336
    8020c69c:	8082                	ret
    s = "/";
    8020c69e:	00006997          	auipc	s3,0x6
    8020c6a2:	24a98993          	addi	s3,s3,586 # 802128e8 <vma_type+0x470>
    8020c6a6:	b755                	j	8020c64a <sys_getcwd+0x78>
      __debug_warn("[sys_getcwd] alloc address failed\n");
    8020c6a8:	00006517          	auipc	a0,0x6
    8020c6ac:	58850513          	addi	a0,a0,1416 # 80212c30 <UNAME_VERSION+0x140>
    8020c6b0:	ffffb097          	auipc	ra,0xffffb
    8020c6b4:	bf4080e7          	jalr	-1036(ra) # 802072a4 <__debug_warn>
      return -1;
    8020c6b8:	57fd                	li	a5,-1
    8020c6ba:	bfc1                	j	8020c68a <sys_getcwd+0xb8>
        return -1;
    8020c6bc:	57fd                	li	a5,-1
    8020c6be:	b7f1                	j	8020c68a <sys_getcwd+0xb8>
    return -1;
    8020c6c0:	57fd                	li	a5,-1
    8020c6c2:	b7e1                	j	8020c68a <sys_getcwd+0xb8>

000000008020c6c4 <sys_fstat>:


uint64
sys_fstat(void)
{
    8020c6c4:	7179                	addi	sp,sp,-48
    8020c6c6:	f406                	sd	ra,40(sp)
    8020c6c8:	f022                	sd	s0,32(sp)
    8020c6ca:	1800                	addi	s0,sp,48
  struct file *f;
  int fd;
  uint64 st; // user pointer to struct stat

  if(argfd(0, &fd, &f) < 0 || argaddr(1, &st) < 0)
    8020c6cc:	fe840613          	addi	a2,s0,-24
    8020c6d0:	fe440593          	addi	a1,s0,-28
    8020c6d4:	4501                	li	a0,0
    8020c6d6:	ffffe097          	auipc	ra,0xffffe
    8020c6da:	6d2080e7          	jalr	1746(ra) # 8020ada8 <argfd>
    return -1;
    8020c6de:	57fd                	li	a5,-1
  if(argfd(0, &fd, &f) < 0 || argaddr(1, &st) < 0)
    8020c6e0:	02054563          	bltz	a0,8020c70a <sys_fstat+0x46>
    8020c6e4:	fd840593          	addi	a1,s0,-40
    8020c6e8:	4505                	li	a0,1
    8020c6ea:	ffffe097          	auipc	ra,0xffffe
    8020c6ee:	66c080e7          	jalr	1644(ra) # 8020ad56 <argaddr>
    return -1;
    8020c6f2:	57fd                	li	a5,-1
  if(argfd(0, &fd, &f) < 0 || argaddr(1, &st) < 0)
    8020c6f4:	00054b63          	bltz	a0,8020c70a <sys_fstat+0x46>
  //return filestat(f, st);
  //print_f_info(f);
  return filekstat(f, st);
    8020c6f8:	fd843583          	ld	a1,-40(s0)
    8020c6fc:	fe843503          	ld	a0,-24(s0)
    8020c700:	ffff9097          	auipc	ra,0xffff9
    8020c704:	f8e080e7          	jalr	-114(ra) # 8020568e <filekstat>
    8020c708:	87aa                	mv	a5,a0
}
    8020c70a:	853e                	mv	a0,a5
    8020c70c:	70a2                	ld	ra,40(sp)
    8020c70e:	7402                	ld	s0,32(sp)
    8020c710:	6145                	addi	sp,sp,48
    8020c712:	8082                	ret

000000008020c714 <sys_fstatat>:

uint64
sys_fstatat(void)
{
    8020c714:	7105                	addi	sp,sp,-480
    8020c716:	ef86                	sd	ra,472(sp)
    8020c718:	eba2                	sd	s0,464(sp)
    8020c71a:	e7a6                	sd	s1,456(sp)
    8020c71c:	e3ca                	sd	s2,448(sp)
    8020c71e:	ff4e                	sd	s3,440(sp)
    8020c720:	fb52                	sd	s4,432(sp)
    8020c722:	1380                	addi	s0,sp,480
  uint64 st; // user pointer to struct stat
  int flags;
  char pathname[FAT32_MAX_FILENAME];
  struct file* fp;

  if(argfd(0, &fd, &fp) < 0&&fd!=AT_FDCWD)
    8020c724:	eb040613          	addi	a2,s0,-336
    8020c728:	fcc40593          	addi	a1,s0,-52
    8020c72c:	4501                	li	a0,0
    8020c72e:	ffffe097          	auipc	ra,0xffffe
    8020c732:	67a080e7          	jalr	1658(ra) # 8020ada8 <argfd>
    8020c736:	00055963          	bgez	a0,8020c748 <sys_fstatat+0x34>
    8020c73a:	fcc42683          	lw	a3,-52(s0)
    8020c73e:	f9c00713          	li	a4,-100
    return -EMFILE;  
    8020c742:	57a1                	li	a5,-24
  if(argfd(0, &fd, &fp) < 0&&fd!=AT_FDCWD)
    8020c744:	10e69663          	bne	a3,a4,8020c850 <sys_fstatat+0x13c>
  if(argstr(1, pathname, FAT32_MAX_FILENAME + 1) < 0)
    8020c748:	10000613          	li	a2,256
    8020c74c:	eb840593          	addi	a1,s0,-328
    8020c750:	4505                	li	a0,1
    8020c752:	ffffe097          	auipc	ra,0xffffe
    8020c756:	626080e7          	jalr	1574(ra) # 8020ad78 <argstr>
    return -ENAMETOOLONG;
    8020c75a:	fdc00793          	li	a5,-36
  if(argstr(1, pathname, FAT32_MAX_FILENAME + 1) < 0)
    8020c75e:	0e054963          	bltz	a0,8020c850 <sys_fstatat+0x13c>
  if(argaddr(2, &st) < 0)
    8020c762:	fc040593          	addi	a1,s0,-64
    8020c766:	4509                	li	a0,2
    8020c768:	ffffe097          	auipc	ra,0xffffe
    8020c76c:	5ee080e7          	jalr	1518(ra) # 8020ad56 <argaddr>
    return -1;  
    8020c770:	57fd                	li	a5,-1
  if(argaddr(2, &st) < 0)
    8020c772:	0c054f63          	bltz	a0,8020c850 <sys_fstatat+0x13c>
  if(argint(3, &flags) < 0)
    8020c776:	fbc40593          	addi	a1,s0,-68
    8020c77a:	450d                	li	a0,3
    8020c77c:	ffffe097          	auipc	ra,0xffffe
    8020c780:	5b8080e7          	jalr	1464(ra) # 8020ad34 <argint>
    return -1;
    8020c784:	57fd                	li	a5,-1
  if(argint(3, &flags) < 0)
    8020c786:	0c054563          	bltz	a0,8020c850 <sys_fstatat+0x13c>
  //return filestat(f, st);
  //printf("[sys fstatat]fd:%d pathname:%s flags:%p\n",fd,pathname,flags);
  struct dirent* ep;
  struct dirent* dp;
  struct proc* p = myproc();
    8020c78a:	ffffd097          	auipc	ra,0xffffd
    8020c78e:	3a0080e7          	jalr	928(ra) # 80209b2a <myproc>
    8020c792:	892a                	mv	s2,a0
  int devno = -1;
    8020c794:	57fd                	li	a5,-1
    8020c796:	eaf42623          	sw	a5,-340(s0)
  if(fd==AT_FDCWD){
    8020c79a:	fcc42703          	lw	a4,-52(s0)
    8020c79e:	f9c00793          	li	a5,-100
    8020c7a2:	0cf70e63          	beq	a4,a5,8020c87e <sys_fstatat+0x16a>
    dp = NULL;
  } else { 
    if(pathname[0] != '/' && fp == NULL)
    8020c7a6:	eb844703          	lbu	a4,-328(s0)
    8020c7aa:	02f00793          	li	a5,47
    8020c7ae:	0af70a63          	beq	a4,a5,8020c862 <sys_fstatat+0x14e>
    8020c7b2:	eb043503          	ld	a0,-336(s0)
    8020c7b6:	cd65                	beqz	a0,8020c8ae <sys_fstatat+0x19a>
    {
      return -EMFILE;
    }
    dp = fp ? fp->ep : NULL;
    8020c7b8:	6d08                	ld	a0,24(a0)
    
    if(dp && !(dp->attribute & ATTR_DIRECTORY)){
    8020c7ba:	c509                	beqz	a0,8020c7c4 <sys_fstatat+0xb0>
    8020c7bc:	10054783          	lbu	a5,256(a0)
    8020c7c0:	8bc1                	andi	a5,a5,16
    8020c7c2:	c7c5                	beqz	a5,8020c86a <sys_fstatat+0x156>
        return -1;
    }
  }
  
  // elock dp may cause deadlock
  ep = ename(dp, pathname, &devno);
    8020c7c4:	eac40613          	addi	a2,s0,-340
    8020c7c8:	eb840593          	addi	a1,s0,-328
    8020c7cc:	ffff8097          	auipc	ra,0xffff8
    8020c7d0:	b6e080e7          	jalr	-1170(ra) # 8020433a <ename>
    8020c7d4:	84aa                	mv	s1,a0
  if(ep == NULL){
    8020c7d6:	cd71                	beqz	a0,8020c8b2 <sys_fstatat+0x19e>
    // printf("[fstatat]path %s not found\n",pathname);
    return -ENOENT;  
  }

  struct kstat kst;
  if(devno == -1)
    8020c7d8:	eac42703          	lw	a4,-340(s0)
    8020c7dc:	57fd                	li	a5,-1
    8020c7de:	0af70263          	beq	a4,a5,8020c882 <sys_fstatat+0x16e>
  }
  else
  {
    if(devno < 0 || devno >= getdevnum())
    {
      return -1;
    8020c7e2:	57fd                	li	a5,-1
    if(devno < 0 || devno >= getdevnum())
    8020c7e4:	06074663          	bltz	a4,8020c850 <sys_fstatat+0x13c>
    8020c7e8:	ffffa097          	auipc	ra,0xffffa
    8020c7ec:	968080e7          	jalr	-1688(ra) # 80206150 <getdevnum>
    8020c7f0:	eac42703          	lw	a4,-340(s0)
      return -1;
    8020c7f4:	57fd                	li	a5,-1
    if(devno < 0 || devno >= getdevnum())
    8020c7f6:	04a75d63          	bge	a4,a0,8020c850 <sys_fstatat+0x13c>
    }
    struct devsw *mydev = &devsw[devno];
    8020c7fa:	00371493          	slli	s1,a4,0x3
    8020c7fe:	8c99                	sub	s1,s1,a4
    8020c800:	048e                	slli	s1,s1,0x3
    acquire(&mydev->lk);
    8020c802:	01048993          	addi	s3,s1,16
    8020c806:	00561a17          	auipc	s4,0x561
    8020c80a:	72aa0a13          	addi	s4,s4,1834 # 8076df30 <devsw>
    8020c80e:	99d2                	add	s3,s3,s4
    8020c810:	854e                	mv	a0,s3
    8020c812:	ffffa097          	auipc	ra,0xffffa
    8020c816:	35c080e7          	jalr	860(ra) # 80206b6e <acquire>
    devkstat(mydev, &kst);
    8020c81a:	e2840593          	addi	a1,s0,-472
    8020c81e:	009a0533          	add	a0,s4,s1
    8020c822:	ffffa097          	auipc	ra,0xffffa
    8020c826:	d36080e7          	jalr	-714(ra) # 80206558 <devkstat>
    release(&mydev->lk);
    8020c82a:	854e                	mv	a0,s3
    8020c82c:	ffffa097          	auipc	ra,0xffffa
    8020c830:	396080e7          	jalr	918(ra) # 80206bc2 <release>
  }
  
  //printf("kst.mode:%p ATTR_DIRECTORY:%p\n",kst.st_mode,ATTR_DIRECTORY);
  if(copyout(p->pagetable, st, (char *)&kst, sizeof(kst)) < 0)
    8020c834:	08000693          	li	a3,128
    8020c838:	e2840613          	addi	a2,s0,-472
    8020c83c:	fc043583          	ld	a1,-64(s0)
    8020c840:	06093503          	ld	a0,96(s2)
    8020c844:	ffffd097          	auipc	ra,0xffffd
    8020c848:	918080e7          	jalr	-1768(ra) # 8020915c <copyout>
    8020c84c:	43f55793          	srai	a5,a0,0x3f
    return -1;
  return 0;
}
    8020c850:	853e                	mv	a0,a5
    8020c852:	60fe                	ld	ra,472(sp)
    8020c854:	645e                	ld	s0,464(sp)
    8020c856:	64be                	ld	s1,456(sp)
    8020c858:	691e                	ld	s2,448(sp)
    8020c85a:	79fa                	ld	s3,440(sp)
    8020c85c:	7a5a                	ld	s4,432(sp)
    8020c85e:	613d                	addi	sp,sp,480
    8020c860:	8082                	ret
    dp = fp ? fp->ep : NULL;
    8020c862:	eb043503          	ld	a0,-336(s0)
    8020c866:	dd39                	beqz	a0,8020c7c4 <sys_fstatat+0xb0>
    8020c868:	bf81                	j	8020c7b8 <sys_fstatat+0xa4>
        printf("fd point to a non directory\n");
    8020c86a:	00006517          	auipc	a0,0x6
    8020c86e:	3ee50513          	addi	a0,a0,1006 # 80212c58 <UNAME_VERSION+0x168>
    8020c872:	ffffa097          	auipc	ra,0xffffa
    8020c876:	6a6080e7          	jalr	1702(ra) # 80206f18 <printf>
        return -1;
    8020c87a:	57fd                	li	a5,-1
    8020c87c:	bfd1                	j	8020c850 <sys_fstatat+0x13c>
    dp = NULL;
    8020c87e:	4501                	li	a0,0
    8020c880:	b791                	j	8020c7c4 <sys_fstatat+0xb0>
    elock(ep);
    8020c882:	ffff7097          	auipc	ra,0xffff7
    8020c886:	076080e7          	jalr	118(ra) # 802038f8 <elock>
    ekstat(ep,&kst);
    8020c88a:	e2840593          	addi	a1,s0,-472
    8020c88e:	8526                	mv	a0,s1
    8020c890:	ffff8097          	auipc	ra,0xffff8
    8020c894:	9b6080e7          	jalr	-1610(ra) # 80204246 <ekstat>
    eunlock(ep);
    8020c898:	8526                	mv	a0,s1
    8020c89a:	ffff7097          	auipc	ra,0xffff7
    8020c89e:	094080e7          	jalr	148(ra) # 8020392e <eunlock>
    eput(ep);
    8020c8a2:	8526                	mv	a0,s1
    8020c8a4:	ffff7097          	auipc	ra,0xffff7
    8020c8a8:	0d8080e7          	jalr	216(ra) # 8020397c <eput>
    8020c8ac:	b761                	j	8020c834 <sys_fstatat+0x120>
      return -EMFILE;
    8020c8ae:	57a1                	li	a5,-24
    8020c8b0:	b745                	j	8020c850 <sys_fstatat+0x13c>
    return -ENOENT;  
    8020c8b2:	57f9                	li	a5,-2
    8020c8b4:	bf71                	j	8020c850 <sys_fstatat+0x13c>

000000008020c8b6 <sys_faccessat>:

uint64
sys_faccessat(void)
{
    8020c8b6:	7129                	addi	sp,sp,-320
    8020c8b8:	fe06                	sd	ra,312(sp)
    8020c8ba:	fa22                	sd	s0,304(sp)
    8020c8bc:	f626                	sd	s1,296(sp)
    8020c8be:	0280                	addi	s0,sp,320
  struct file *fp;
  char path[FAT32_MAX_FILENAME];
  int mode;
  int flags;
  struct dirent *dp, *ep;
  struct proc *p = myproc();
    8020c8c0:	ffffd097          	auipc	ra,0xffffd
    8020c8c4:	26a080e7          	jalr	618(ra) # 80209b2a <myproc>
    8020c8c8:	84aa                	mv	s1,a0
  int devno = -1;
    8020c8ca:	57fd                	li	a5,-1
    8020c8cc:	ecf42223          	sw	a5,-316(s0)
  int emode = R_OK | W_OK | X_OK;

  if(argfd(0, &dirfd, &fp) < 0 && dirfd != AT_FDCWD)
    8020c8d0:	fd040613          	addi	a2,s0,-48
    8020c8d4:	fdc40593          	addi	a1,s0,-36
    8020c8d8:	4501                	li	a0,0
    8020c8da:	ffffe097          	auipc	ra,0xffffe
    8020c8de:	4ce080e7          	jalr	1230(ra) # 8020ada8 <argfd>
    8020c8e2:	00055963          	bgez	a0,8020c8f4 <sys_faccessat+0x3e>
    8020c8e6:	fdc42683          	lw	a3,-36(s0)
    8020c8ea:	f9c00713          	li	a4,-100
  {
    return -EMFILE;
    8020c8ee:	57a1                	li	a5,-24
  if(argfd(0, &dirfd, &fp) < 0 && dirfd != AT_FDCWD)
    8020c8f0:	08e69463          	bne	a3,a4,8020c978 <sys_faccessat+0xc2>
  }
  if(argstr(1, path, FAT32_MAX_FILENAME + 1) < 0)
    8020c8f4:	10000613          	li	a2,256
    8020c8f8:	ed040593          	addi	a1,s0,-304
    8020c8fc:	4505                	li	a0,1
    8020c8fe:	ffffe097          	auipc	ra,0xffffe
    8020c902:	47a080e7          	jalr	1146(ra) # 8020ad78 <argstr>
  {
    return -1;
    8020c906:	57fd                	li	a5,-1
  if(argstr(1, path, FAT32_MAX_FILENAME + 1) < 0)
    8020c908:	06054863          	bltz	a0,8020c978 <sys_faccessat+0xc2>
  }
  if(argint(2, &mode) < 0)
    8020c90c:	ecc40593          	addi	a1,s0,-308
    8020c910:	4509                	li	a0,2
    8020c912:	ffffe097          	auipc	ra,0xffffe
    8020c916:	422080e7          	jalr	1058(ra) # 8020ad34 <argint>
  {
    return -1;
    8020c91a:	57fd                	li	a5,-1
  if(argint(2, &mode) < 0)
    8020c91c:	04054e63          	bltz	a0,8020c978 <sys_faccessat+0xc2>
  }
  if(argint(3, &flags) < 0)
    8020c920:	ec840593          	addi	a1,s0,-312
    8020c924:	450d                	li	a0,3
    8020c926:	ffffe097          	auipc	ra,0xffffe
    8020c92a:	40e080e7          	jalr	1038(ra) # 8020ad34 <argint>
    8020c92e:	08054563          	bltz	a0,8020c9b8 <sys_faccessat+0x102>
  {
    return -1;
  }

  if(path[0] == '/')
    8020c932:	ed044703          	lbu	a4,-304(s0)
    8020c936:	02f00793          	li	a5,47
    8020c93a:	06f70163          	beq	a4,a5,8020c99c <sys_faccessat+0xe6>
  {
    dp = NULL;
  }
  else if (AT_FDCWD == dirfd)
    8020c93e:	fdc42703          	lw	a4,-36(s0)
    8020c942:	f9c00793          	li	a5,-100
    8020c946:	02f70f63          	beq	a4,a5,8020c984 <sys_faccessat+0xce>
  {
    dp = p->cwd;
  }
  else
  {
    if(NULL == fp)
    8020c94a:	fd043783          	ld	a5,-48(s0)
    8020c94e:	cf8d                	beqz	a5,8020c988 <sys_faccessat+0xd2>
    {
      __debug_warn("[sys_faccessat] dirfd illegal\n");
      return -EMFILE;
    }
    dp = fp->ep;
    8020c950:	6f88                	ld	a0,24(a5)
  }

  ep = ename(dp, path, &devno);
    8020c952:	ec440613          	addi	a2,s0,-316
    8020c956:	ed040593          	addi	a1,s0,-304
    8020c95a:	ffff8097          	auipc	ra,0xffff8
    8020c95e:	9e0080e7          	jalr	-1568(ra) # 8020433a <ename>
  if(ep == NULL){
    8020c962:	cd1d                	beqz	a0,8020c9a0 <sys_faccessat+0xea>
    printf("[faccessat] path %s not found\n",path);
    return -1;  
  }

  // check file whether exist or not
  if(mode == F_OK)
    8020c964:	ecc42703          	lw	a4,-308(s0)
  {
    return 0;
    8020c968:	4781                	li	a5,0
  if(mode == F_OK)
    8020c96a:	c719                	beqz	a4,8020c978 <sys_faccessat+0xc2>
  else
  {

  }

  if((emode & mode) != mode)
    8020c96c:	ff877793          	andi	a5,a4,-8
    8020c970:	00f037b3          	snez	a5,a5
    8020c974:	40f007b3          	neg	a5,a5
  {
    return -1;
  }

  return 0;
}
    8020c978:	853e                	mv	a0,a5
    8020c97a:	70f2                	ld	ra,312(sp)
    8020c97c:	7452                	ld	s0,304(sp)
    8020c97e:	74b2                	ld	s1,296(sp)
    8020c980:	6131                	addi	sp,sp,320
    8020c982:	8082                	ret
    dp = p->cwd;
    8020c984:	7ce8                	ld	a0,248(s1)
    8020c986:	b7f1                	j	8020c952 <sys_faccessat+0x9c>
      __debug_warn("[sys_faccessat] dirfd illegal\n");
    8020c988:	00006517          	auipc	a0,0x6
    8020c98c:	2f050513          	addi	a0,a0,752 # 80212c78 <UNAME_VERSION+0x188>
    8020c990:	ffffb097          	auipc	ra,0xffffb
    8020c994:	914080e7          	jalr	-1772(ra) # 802072a4 <__debug_warn>
      return -EMFILE;
    8020c998:	57a1                	li	a5,-24
    8020c99a:	bff9                	j	8020c978 <sys_faccessat+0xc2>
    dp = NULL;
    8020c99c:	4501                	li	a0,0
    8020c99e:	bf55                	j	8020c952 <sys_faccessat+0x9c>
    printf("[faccessat] path %s not found\n",path);
    8020c9a0:	ed040593          	addi	a1,s0,-304
    8020c9a4:	00006517          	auipc	a0,0x6
    8020c9a8:	2f450513          	addi	a0,a0,756 # 80212c98 <UNAME_VERSION+0x1a8>
    8020c9ac:	ffffa097          	auipc	ra,0xffffa
    8020c9b0:	56c080e7          	jalr	1388(ra) # 80206f18 <printf>
    return -1;  
    8020c9b4:	57fd                	li	a5,-1
    8020c9b6:	b7c9                	j	8020c978 <sys_faccessat+0xc2>
    return -1;
    8020c9b8:	57fd                	li	a5,-1
    8020c9ba:	bf7d                	j	8020c978 <sys_faccessat+0xc2>

000000008020c9bc <sys_lseek>:


uint64 
sys_lseek(void)
{
    8020c9bc:	7179                	addi	sp,sp,-48
    8020c9be:	f406                	sd	ra,40(sp)
    8020c9c0:	f022                	sd	s0,32(sp)
    8020c9c2:	1800                	addi	s0,sp,48
  uint64 offset;
  int fd;
  int whence;
  uint64 ret = -1;

  if(argfd(0, &fd, &f) < 0 || argaddr(1, &offset) < 0 || argint(2, &whence) < 0)
    8020c9c4:	fe840613          	addi	a2,s0,-24
    8020c9c8:	fdc40593          	addi	a1,s0,-36
    8020c9cc:	4501                	li	a0,0
    8020c9ce:	ffffe097          	auipc	ra,0xffffe
    8020c9d2:	3da080e7          	jalr	986(ra) # 8020ada8 <argfd>
  {
    return -1;
    8020c9d6:	57fd                	li	a5,-1
  if(argfd(0, &fd, &f) < 0 || argaddr(1, &offset) < 0 || argint(2, &whence) < 0)
    8020c9d8:	04054163          	bltz	a0,8020ca1a <sys_lseek+0x5e>
    8020c9dc:	fe040593          	addi	a1,s0,-32
    8020c9e0:	4505                	li	a0,1
    8020c9e2:	ffffe097          	auipc	ra,0xffffe
    8020c9e6:	374080e7          	jalr	884(ra) # 8020ad56 <argaddr>
    return -1;
    8020c9ea:	57fd                	li	a5,-1
  if(argfd(0, &fd, &f) < 0 || argaddr(1, &offset) < 0 || argint(2, &whence) < 0)
    8020c9ec:	02054763          	bltz	a0,8020ca1a <sys_lseek+0x5e>
    8020c9f0:	fd840593          	addi	a1,s0,-40
    8020c9f4:	4509                	li	a0,2
    8020c9f6:	ffffe097          	auipc	ra,0xffffe
    8020c9fa:	33e080e7          	jalr	830(ra) # 8020ad34 <argint>
    return -1;
    8020c9fe:	57fd                	li	a5,-1
  if(argfd(0, &fd, &f) < 0 || argaddr(1, &offset) < 0 || argint(2, &whence) < 0)
    8020ca00:	00054d63          	bltz	a0,8020ca1a <sys_lseek+0x5e>
  }

  ret = filelseek(f, offset, whence);
    8020ca04:	fd842603          	lw	a2,-40(s0)
    8020ca08:	fe043583          	ld	a1,-32(s0)
    8020ca0c:	fe843503          	ld	a0,-24(s0)
    8020ca10:	ffff9097          	auipc	ra,0xffff9
    8020ca14:	476080e7          	jalr	1142(ra) # 80205e86 <filelseek>
    8020ca18:	87aa                	mv	a5,a0
  return ret;
}
    8020ca1a:	853e                	mv	a0,a5
    8020ca1c:	70a2                	ld	ra,40(sp)
    8020ca1e:	7402                	ld	s0,32(sp)
    8020ca20:	6145                	addi	sp,sp,48
    8020ca22:	8082                	ret

000000008020ca24 <sys_renameat2>:


uint64
sys_renameat2(void)
{
    8020ca24:	d9010113          	addi	sp,sp,-624
    8020ca28:	26113423          	sd	ra,616(sp)
    8020ca2c:	26813023          	sd	s0,608(sp)
    8020ca30:	24913c23          	sd	s1,600(sp)
    8020ca34:	25213823          	sd	s2,592(sp)
    8020ca38:	25313423          	sd	s3,584(sp)
    8020ca3c:	25413023          	sd	s4,576(sp)
    8020ca40:	1c80                	addi	s0,sp,624
  char old[FAT32_MAX_PATH], new[FAT32_MAX_PATH];
  int olddirfd, newdirfd;
  struct file *oldfp;
  struct file *newfp;
  struct dirent *olddp = NULL, *newdp = NULL;
  struct proc *p = myproc();
    8020ca42:	ffffd097          	auipc	ra,0xffffd
    8020ca46:	0e8080e7          	jalr	232(ra) # 80209b2a <myproc>
    8020ca4a:	892a                	mv	s2,a0
  // int flags;
  int olddevno = -1, newdevno = -1;
    8020ca4c:	57fd                	li	a5,-1
    8020ca4e:	daf42223          	sw	a5,-604(s0)
    8020ca52:	daf42023          	sw	a5,-608(s0)
  struct dirent *src = NULL, *dst = NULL, *pdst = NULL;
  int srclock = 0;
  char *name;

  if (argstr(1, old, FAT32_MAX_PATH) < 0 || argstr(3, new, FAT32_MAX_PATH) < 0) {
    8020ca56:	10400613          	li	a2,260
    8020ca5a:	ec840593          	addi	a1,s0,-312
    8020ca5e:	4505                	li	a0,1
    8020ca60:	ffffe097          	auipc	ra,0xffffe
    8020ca64:	318080e7          	jalr	792(ra) # 8020ad78 <argstr>
      return -ENAMETOOLONG;
    8020ca68:	fdc00793          	li	a5,-36
  if (argstr(1, old, FAT32_MAX_PATH) < 0 || argstr(3, new, FAT32_MAX_PATH) < 0) {
    8020ca6c:	14054c63          	bltz	a0,8020cbc4 <sys_renameat2+0x1a0>
    8020ca70:	10400613          	li	a2,260
    8020ca74:	dc040593          	addi	a1,s0,-576
    8020ca78:	450d                	li	a0,3
    8020ca7a:	ffffe097          	auipc	ra,0xffffe
    8020ca7e:	2fe080e7          	jalr	766(ra) # 8020ad78 <argstr>
      return -ENAMETOOLONG;
    8020ca82:	fdc00793          	li	a5,-36
  if (argstr(1, old, FAT32_MAX_PATH) < 0 || argstr(3, new, FAT32_MAX_PATH) < 0) {
    8020ca86:	12054f63          	bltz	a0,8020cbc4 <sys_renameat2+0x1a0>
  }

  if(argfd(0, &olddirfd, &oldfp) < 0)
    8020ca8a:	db040613          	addi	a2,s0,-592
    8020ca8e:	dbc40593          	addi	a1,s0,-580
    8020ca92:	4501                	li	a0,0
    8020ca94:	ffffe097          	auipc	ra,0xffffe
    8020ca98:	314080e7          	jalr	788(ra) # 8020ada8 <argfd>
    8020ca9c:	0a055563          	bgez	a0,8020cb46 <sys_renameat2+0x122>
  {
    if(old[0] != '/' && olddirfd != AT_FDCWD)
    8020caa0:	ec844703          	lbu	a4,-312(s0)
    8020caa4:	02f00793          	li	a5,47
    8020caa8:	00f70963          	beq	a4,a5,8020caba <sys_renameat2+0x96>
    8020caac:	dbc42683          	lw	a3,-580(s0)
    8020cab0:	f9c00713          	li	a4,-100
    {
      return -EBADF;
    8020cab4:	57dd                	li	a5,-9
    if(old[0] != '/' && olddirfd != AT_FDCWD)
    8020cab6:	10e69763          	bne	a3,a4,8020cbc4 <sys_renameat2+0x1a0>
    }
    olddp = p->cwd;
    8020caba:	0f893483          	ld	s1,248(s2)
  }

  if(argfd(2, &newdirfd, &newfp) < 0)
    8020cabe:	da840613          	addi	a2,s0,-600
    8020cac2:	db840593          	addi	a1,s0,-584
    8020cac6:	4509                	li	a0,2
    8020cac8:	ffffe097          	auipc	ra,0xffffe
    8020cacc:	2e0080e7          	jalr	736(ra) # 8020ada8 <argfd>
    8020cad0:	06055d63          	bgez	a0,8020cb4a <sys_renameat2+0x126>
  {
    if(new[0] != '/' && newdirfd != AT_FDCWD)
    8020cad4:	dc044703          	lbu	a4,-576(s0)
    8020cad8:	02f00793          	li	a5,47
    8020cadc:	00f70963          	beq	a4,a5,8020caee <sys_renameat2+0xca>
    8020cae0:	db842683          	lw	a3,-584(s0)
    8020cae4:	f9c00713          	li	a4,-100
    {
      return -EBADF;
    8020cae8:	57dd                	li	a5,-9
    if(new[0] != '/' && newdirfd != AT_FDCWD)
    8020caea:	0ce69d63          	bne	a3,a4,8020cbc4 <sys_renameat2+0x1a0>
    }
    newdp = p->cwd;
    8020caee:	0f893903          	ld	s2,248(s2)
  // if(argint(4, &flags) < 0)
  // {
  //   return -ENAMETOOLONG;
  // }
 
  if ((src = ename(olddp, old, &olddevno)) == NULL || (pdst = enameparent(newdp, new, old, &newdevno)) == NULL
    8020caf2:	da440613          	addi	a2,s0,-604
    8020caf6:	ec840593          	addi	a1,s0,-312
    8020cafa:	8526                	mv	a0,s1
    8020cafc:	ffff8097          	auipc	ra,0xffff8
    8020cb00:	83e080e7          	jalr	-1986(ra) # 8020433a <ename>
    8020cb04:	84aa                	mv	s1,a0
    8020cb06:	1c050663          	beqz	a0,8020ccd2 <sys_renameat2+0x2ae>
    8020cb0a:	da040693          	addi	a3,s0,-608
    8020cb0e:	ec840613          	addi	a2,s0,-312
    8020cb12:	dc040593          	addi	a1,s0,-576
    8020cb16:	854a                	mv	a0,s2
    8020cb18:	ffff8097          	auipc	ra,0xffff8
    8020cb1c:	842080e7          	jalr	-1982(ra) # 8020435a <enameparent>
    8020cb20:	892a                	mv	s2,a0
    8020cb22:	c151                	beqz	a0,8020cba6 <sys_renameat2+0x182>
      || (name = formatname(old)) == NULL) {
    8020cb24:	ec840513          	addi	a0,s0,-312
    8020cb28:	ffff6097          	auipc	ra,0xffff6
    8020cb2c:	662080e7          	jalr	1634(ra) # 8020318a <formatname>
    8020cb30:	89aa                	mv	s3,a0
    8020cb32:	c935                	beqz	a0,8020cba6 <sys_renameat2+0x182>
    goto fail;          // src doesn't exist || dst parent doesn't exist || illegal new name
  }
  for (struct dirent *ep = pdst; ep != NULL; ep = ep->parent) {
    if (ep == src) {    // In what universe can we move a directory into its child?
    8020cb34:	07248963          	beq	s1,s2,8020cba6 <sys_renameat2+0x182>
  for (struct dirent *ep = pdst; ep != NULL; ep = ep->parent) {
    8020cb38:	87ca                	mv	a5,s2
    8020cb3a:	1287b783          	ld	a5,296(a5)
    8020cb3e:	cb81                	beqz	a5,8020cb4e <sys_renameat2+0x12a>
    if (ep == src) {    // In what universe can we move a directory into its child?
    8020cb40:	fef49de3          	bne	s1,a5,8020cb3a <sys_renameat2+0x116>
    8020cb44:	a08d                	j	8020cba6 <sys_renameat2+0x182>
  struct dirent *olddp = NULL, *newdp = NULL;
    8020cb46:	4481                	li	s1,0
    8020cb48:	bf9d                	j	8020cabe <sys_renameat2+0x9a>
    8020cb4a:	4901                	li	s2,0
    8020cb4c:	b75d                	j	8020caf2 <sys_renameat2+0xce>
      goto fail;
    }
  }

  uint off;
  elock(src);     // must hold child's lock before acquiring parent's, because we do so in other similar cases
    8020cb4e:	8526                	mv	a0,s1
    8020cb50:	ffff7097          	auipc	ra,0xffff7
    8020cb54:	da8080e7          	jalr	-600(ra) # 802038f8 <elock>
  srclock = 1;
  elock(pdst);
    8020cb58:	854a                	mv	a0,s2
    8020cb5a:	ffff7097          	auipc	ra,0xffff7
    8020cb5e:	d9e080e7          	jalr	-610(ra) # 802038f8 <elock>
  dst = dirlookup(pdst, name, &off);
    8020cb62:	d9c40613          	addi	a2,s0,-612
    8020cb66:	85ce                	mv	a1,s3
    8020cb68:	854a                	mv	a0,s2
    8020cb6a:	ffff7097          	auipc	ra,0xffff7
    8020cb6e:	174080e7          	jalr	372(ra) # 80203cde <dirlookup>
    8020cb72:	8a2a                	mv	s4,a0
  if (dst != NULL) {
    8020cb74:	c155                	beqz	a0,8020cc18 <sys_renameat2+0x1f4>
    eunlock(pdst);
    8020cb76:	854a                	mv	a0,s2
    8020cb78:	ffff7097          	auipc	ra,0xffff7
    8020cb7c:	db6080e7          	jalr	-586(ra) # 8020392e <eunlock>
    if (src == dst) {
    8020cb80:	01448963          	beq	s1,s4,8020cb92 <sys_renameat2+0x16e>
      goto fail;
    } else if (src->attribute & dst->attribute & ATTR_DIRECTORY) {
    8020cb84:	1004c783          	lbu	a5,256(s1)
    8020cb88:	100a4703          	lbu	a4,256(s4)
    8020cb8c:	8ff9                	and	a5,a5,a4
    8020cb8e:	8bc1                	andi	a5,a5,16
    8020cb90:	ebb1                	bnez	a5,8020cbe4 <sys_renameat2+0x1c0>

  return 0;

fail:
  if (srclock)
    eunlock(src);
    8020cb92:	8526                	mv	a0,s1
    8020cb94:	ffff7097          	auipc	ra,0xffff7
    8020cb98:	d9a080e7          	jalr	-614(ra) # 8020392e <eunlock>
  if (dst)
    eput(dst);
    8020cb9c:	8552                	mv	a0,s4
    8020cb9e:	ffff7097          	auipc	ra,0xffff7
    8020cba2:	dde080e7          	jalr	-546(ra) # 8020397c <eput>
  if (pdst)
    8020cba6:	00090763          	beqz	s2,8020cbb4 <sys_renameat2+0x190>
    eput(pdst);
    8020cbaa:	854a                	mv	a0,s2
    8020cbac:	ffff7097          	auipc	ra,0xffff7
    8020cbb0:	dd0080e7          	jalr	-560(ra) # 8020397c <eput>
  if (src)
    eput(src);
  return -1;
    8020cbb4:	57fd                	li	a5,-1
  if (src)
    8020cbb6:	c499                	beqz	s1,8020cbc4 <sys_renameat2+0x1a0>
    eput(src);
    8020cbb8:	8526                	mv	a0,s1
    8020cbba:	ffff7097          	auipc	ra,0xffff7
    8020cbbe:	dc2080e7          	jalr	-574(ra) # 8020397c <eput>
  return -1;
    8020cbc2:	57fd                	li	a5,-1

}
    8020cbc4:	853e                	mv	a0,a5
    8020cbc6:	26813083          	ld	ra,616(sp)
    8020cbca:	26013403          	ld	s0,608(sp)
    8020cbce:	25813483          	ld	s1,600(sp)
    8020cbd2:	25013903          	ld	s2,592(sp)
    8020cbd6:	24813983          	ld	s3,584(sp)
    8020cbda:	24013a03          	ld	s4,576(sp)
    8020cbde:	27010113          	addi	sp,sp,624
    8020cbe2:	8082                	ret
      elock(dst);
    8020cbe4:	8552                	mv	a0,s4
    8020cbe6:	ffff7097          	auipc	ra,0xffff7
    8020cbea:	d12080e7          	jalr	-750(ra) # 802038f8 <elock>
      if (!isdirempty(dst)) {    // it's ok to overwrite an empty dir
    8020cbee:	8552                	mv	a0,s4
    8020cbf0:	ffff7097          	auipc	ra,0xffff7
    8020cbf4:	5de080e7          	jalr	1502(ra) # 802041ce <isdirempty>
    8020cbf8:	c579                	beqz	a0,8020ccc6 <sys_renameat2+0x2a2>
      elock(pdst);
    8020cbfa:	854a                	mv	a0,s2
    8020cbfc:	ffff7097          	auipc	ra,0xffff7
    8020cc00:	cfc080e7          	jalr	-772(ra) # 802038f8 <elock>
    eremove(dst);
    8020cc04:	8552                	mv	a0,s4
    8020cc06:	ffff7097          	auipc	ra,0xffff7
    8020cc0a:	b80080e7          	jalr	-1152(ra) # 80203786 <eremove>
    eunlock(dst);
    8020cc0e:	8552                	mv	a0,s4
    8020cc10:	ffff7097          	auipc	ra,0xffff7
    8020cc14:	d1e080e7          	jalr	-738(ra) # 8020392e <eunlock>
  memmove(src->filename, name, FAT32_MAX_FILENAME);
    8020cc18:	0ff00613          	li	a2,255
    8020cc1c:	85ce                	mv	a1,s3
    8020cc1e:	8526                	mv	a0,s1
    8020cc20:	ffff4097          	auipc	ra,0xffff4
    8020cc24:	1b4080e7          	jalr	436(ra) # 80200dd4 <memmove>
  emake(pdst, src, off);
    8020cc28:	d9c42603          	lw	a2,-612(s0)
    8020cc2c:	85a6                	mv	a1,s1
    8020cc2e:	854a                	mv	a0,s2
    8020cc30:	ffff6097          	auipc	ra,0xffff6
    8020cc34:	612080e7          	jalr	1554(ra) # 80203242 <emake>
  if (src->parent != pdst) {
    8020cc38:	1284b783          	ld	a5,296(s1)
    8020cc3c:	01278d63          	beq	a5,s2,8020cc56 <sys_renameat2+0x232>
    eunlock(pdst);
    8020cc40:	854a                	mv	a0,s2
    8020cc42:	ffff7097          	auipc	ra,0xffff7
    8020cc46:	cec080e7          	jalr	-788(ra) # 8020392e <eunlock>
    elock(src->parent);
    8020cc4a:	1284b503          	ld	a0,296(s1)
    8020cc4e:	ffff7097          	auipc	ra,0xffff7
    8020cc52:	caa080e7          	jalr	-854(ra) # 802038f8 <elock>
  eremove(src);
    8020cc56:	8526                	mv	a0,s1
    8020cc58:	ffff7097          	auipc	ra,0xffff7
    8020cc5c:	b2e080e7          	jalr	-1234(ra) # 80203786 <eremove>
  eunlock(src->parent);
    8020cc60:	1284b503          	ld	a0,296(s1)
    8020cc64:	ffff7097          	auipc	ra,0xffff7
    8020cc68:	cca080e7          	jalr	-822(ra) # 8020392e <eunlock>
  struct dirent *psrc = src->parent;  // src must not be root, or it won't pass the for-loop test
    8020cc6c:	1284b983          	ld	s3,296(s1)
  src->parent = edup(pdst);
    8020cc70:	854a                	mv	a0,s2
    8020cc72:	ffff7097          	auipc	ra,0xffff7
    8020cc76:	9b8080e7          	jalr	-1608(ra) # 8020362a <edup>
    8020cc7a:	12a4b423          	sd	a0,296(s1)
  src->off = off;
    8020cc7e:	d9c42783          	lw	a5,-612(s0)
    8020cc82:	12f4a023          	sw	a5,288(s1)
  src->valid = 1;
    8020cc86:	4785                	li	a5,1
    8020cc88:	10f49b23          	sh	a5,278(s1)
  eunlock(src);
    8020cc8c:	8526                	mv	a0,s1
    8020cc8e:	ffff7097          	auipc	ra,0xffff7
    8020cc92:	ca0080e7          	jalr	-864(ra) # 8020392e <eunlock>
  eput(psrc);
    8020cc96:	854e                	mv	a0,s3
    8020cc98:	ffff7097          	auipc	ra,0xffff7
    8020cc9c:	ce4080e7          	jalr	-796(ra) # 8020397c <eput>
  if (dst) {
    8020cca0:	000a0763          	beqz	s4,8020ccae <sys_renameat2+0x28a>
    eput(dst);
    8020cca4:	8552                	mv	a0,s4
    8020cca6:	ffff7097          	auipc	ra,0xffff7
    8020ccaa:	cd6080e7          	jalr	-810(ra) # 8020397c <eput>
  eput(pdst);
    8020ccae:	854a                	mv	a0,s2
    8020ccb0:	ffff7097          	auipc	ra,0xffff7
    8020ccb4:	ccc080e7          	jalr	-820(ra) # 8020397c <eput>
  eput(src);
    8020ccb8:	8526                	mv	a0,s1
    8020ccba:	ffff7097          	auipc	ra,0xffff7
    8020ccbe:	cc2080e7          	jalr	-830(ra) # 8020397c <eput>
  return 0;
    8020ccc2:	4781                	li	a5,0
    8020ccc4:	b701                	j	8020cbc4 <sys_renameat2+0x1a0>
        eunlock(dst);
    8020ccc6:	8552                	mv	a0,s4
    8020ccc8:	ffff7097          	auipc	ra,0xffff7
    8020cccc:	c66080e7          	jalr	-922(ra) # 8020392e <eunlock>
        goto fail;
    8020ccd0:	b5c9                	j	8020cb92 <sys_renameat2+0x16e>
  struct dirent *src = NULL, *dst = NULL, *pdst = NULL;
    8020ccd2:	892a                	mv	s2,a0
  if (dst)
    8020ccd4:	bdc9                	j	8020cba6 <sys_renameat2+0x182>

000000008020ccd6 <sys_ioctl>:


uint64
sys_ioctl(void)
{
    8020ccd6:	715d                	addi	sp,sp,-80
    8020ccd8:	e486                	sd	ra,72(sp)
    8020ccda:	e0a2                	sd	s0,64(sp)
    8020ccdc:	0880                	addi	s0,sp,80
	int fd;
	struct file *f;
	uint64 request;
	uint64 argp;

	if (argfd(0, &fd, &f) < 0 || argaddr(1, &request) < 0 || argaddr(2, &argp) < 0)
    8020ccde:	fe040613          	addi	a2,s0,-32
    8020cce2:	fec40593          	addi	a1,s0,-20
    8020cce6:	4501                	li	a0,0
    8020cce8:	ffffe097          	auipc	ra,0xffffe
    8020ccec:	0c0080e7          	jalr	192(ra) # 8020ada8 <argfd>
		return -EBADF;
    8020ccf0:	57dd                	li	a5,-9
	if (argfd(0, &fd, &f) < 0 || argaddr(1, &request) < 0 || argaddr(2, &argp) < 0)
    8020ccf2:	08054063          	bltz	a0,8020cd72 <sys_ioctl+0x9c>
    8020ccf6:	fd840593          	addi	a1,s0,-40
    8020ccfa:	4505                	li	a0,1
    8020ccfc:	ffffe097          	auipc	ra,0xffffe
    8020cd00:	05a080e7          	jalr	90(ra) # 8020ad56 <argaddr>
		return -EBADF;
    8020cd04:	57dd                	li	a5,-9
	if (argfd(0, &fd, &f) < 0 || argaddr(1, &request) < 0 || argaddr(2, &argp) < 0)
    8020cd06:	06054663          	bltz	a0,8020cd72 <sys_ioctl+0x9c>
    8020cd0a:	fd040593          	addi	a1,s0,-48
    8020cd0e:	4509                	li	a0,2
    8020cd10:	ffffe097          	auipc	ra,0xffffe
    8020cd14:	046080e7          	jalr	70(ra) # 8020ad56 <argaddr>
    8020cd18:	0c054163          	bltz	a0,8020cdda <sys_ioctl+0x104>

	if (f->type != FD_DEVICE&&f->type != FD_PIPE){
    8020cd1c:	fe043783          	ld	a5,-32(s0)
    8020cd20:	4398                	lw	a4,0(a5)
    8020cd22:	9b75                	andi	a4,a4,-3
    8020cd24:	4685                	li	a3,1
               //__debug_info("[sys_ioctl] fd:%d f->type not device or pipe\n",fd);
		return -EPERM;
    8020cd26:	57fd                	li	a5,-1
	if (f->type != FD_DEVICE&&f->type != FD_PIPE){
    8020cd28:	04d71563          	bne	a4,a3,8020cd72 <sys_ioctl+0x9c>
        }

  // __debug_info("[sys_ioctl] request = %p\n", request);
	switch (request) {
    8020cd2c:	fd843683          	ld	a3,-40(s0)
    8020cd30:	6795                	lui	a5,0x5
    8020cd32:	40178793          	addi	a5,a5,1025 # 5401 <_entry-0x801fabff>
    8020cd36:	04f68d63          	beq	a3,a5,8020cd90 <sys_ioctl+0xba>
    8020cd3a:	6715                	lui	a4,0x5
    8020cd3c:	41370713          	addi	a4,a4,1043 # 5413 <_entry-0x801fabed>
    8020cd40:	4781                	li	a5,0
    8020cd42:	02e69863          	bne	a3,a4,8020cd72 <sys_ioctl+0x9c>
	case TIOCGWINSZ: {
		struct winsize win = {
    8020cd46:	fa042e23          	sw	zero,-68(s0)
    8020cd4a:	47e1                	li	a5,24
    8020cd4c:	faf41c23          	sh	a5,-72(s0)
    8020cd50:	05000793          	li	a5,80
    8020cd54:	faf41d23          	sh	a5,-70(s0)
			.ws_row = 24,
			.ws_col = 80,
		};
		if (either_copyout(1, argp, (char*)&win, sizeof(win)) < 0){
    8020cd58:	46a1                	li	a3,8
    8020cd5a:	fb840613          	addi	a2,s0,-72
    8020cd5e:	fd043583          	ld	a1,-48(s0)
    8020cd62:	4505                	li	a0,1
    8020cd64:	ffffc097          	auipc	ra,0xffffc
    8020cd68:	764080e7          	jalr	1892(ra) # 802094c8 <either_copyout>
	}
	default:
		return 0;
	}

	return 0;
    8020cd6c:	4781                	li	a5,0
		if (either_copyout(1, argp, (char*)&win, sizeof(win)) < 0){
    8020cd6e:	00054763          	bltz	a0,8020cd7c <sys_ioctl+0xa6>
}
    8020cd72:	853e                	mv	a0,a5
    8020cd74:	60a6                	ld	ra,72(sp)
    8020cd76:	6406                	ld	s0,64(sp)
    8020cd78:	6161                	addi	sp,sp,80
    8020cd7a:	8082                	ret
      __debug_info("[sys_ioctl] copyout1\n");
    8020cd7c:	00006517          	auipc	a0,0x6
    8020cd80:	f3c50513          	addi	a0,a0,-196 # 80212cb8 <UNAME_VERSION+0x1c8>
    8020cd84:	ffffa097          	auipc	ra,0xffffa
    8020cd88:	35a080e7          	jalr	858(ra) # 802070de <__debug_info>
			return -EFAULT;
    8020cd8c:	57c9                	li	a5,-14
    8020cd8e:	b7d5                	j	8020cd72 <sys_ioctl+0x9c>
		struct termios terminfo = {
    8020cd90:	00006797          	auipc	a5,0x6
    8020cd94:	f6878793          	addi	a5,a5,-152 # 80212cf8 <UNAME_VERSION+0x208>
    8020cd98:	6398                	ld	a4,0(a5)
    8020cd9a:	fae43c23          	sd	a4,-72(s0)
    8020cd9e:	6798                	ld	a4,8(a5)
    8020cda0:	fce43023          	sd	a4,-64(s0)
    8020cda4:	0107d783          	lhu	a5,16(a5)
    8020cda8:	fcf41423          	sh	a5,-56(s0)
		if (either_copyout(1, argp, (char*)&terminfo, sizeof(terminfo)) < 0){
    8020cdac:	46c9                	li	a3,18
    8020cdae:	fb840613          	addi	a2,s0,-72
    8020cdb2:	fd043583          	ld	a1,-48(s0)
    8020cdb6:	4505                	li	a0,1
    8020cdb8:	ffffc097          	auipc	ra,0xffffc
    8020cdbc:	710080e7          	jalr	1808(ra) # 802094c8 <either_copyout>
	return 0;
    8020cdc0:	4781                	li	a5,0
		if (either_copyout(1, argp, (char*)&terminfo, sizeof(terminfo)) < 0){
    8020cdc2:	fa0558e3          	bgez	a0,8020cd72 <sys_ioctl+0x9c>
      __debug_info("[sys_ioctl] copyout2\n");
    8020cdc6:	00006517          	auipc	a0,0x6
    8020cdca:	f0a50513          	addi	a0,a0,-246 # 80212cd0 <UNAME_VERSION+0x1e0>
    8020cdce:	ffffa097          	auipc	ra,0xffffa
    8020cdd2:	310080e7          	jalr	784(ra) # 802070de <__debug_info>
			return -EFAULT;
    8020cdd6:	57c9                	li	a5,-14
    8020cdd8:	bf69                	j	8020cd72 <sys_ioctl+0x9c>
		return -EBADF;
    8020cdda:	57dd                	li	a5,-9
    8020cddc:	bf59                	j	8020cd72 <sys_ioctl+0x9c>

000000008020cdde <sys_fcntl>:


uint64
sys_fcntl(void)
{
    8020cdde:	7139                	addi	sp,sp,-64
    8020cde0:	fc06                	sd	ra,56(sp)
    8020cde2:	f822                	sd	s0,48(sp)
    8020cde4:	f426                	sd	s1,40(sp)
    8020cde6:	0080                	addi	s0,sp,64
  int fd;
  int cmd;
  uint64 arg;
  struct file* f;
  struct proc* p = myproc();
    8020cde8:	ffffd097          	auipc	ra,0xffffd
    8020cdec:	d42080e7          	jalr	-702(ra) # 80209b2a <myproc>
    8020cdf0:	84aa                	mv	s1,a0
  if(argfd(0, &fd, &f) < 0)
    8020cdf2:	fc840613          	addi	a2,s0,-56
    8020cdf6:	fdc40593          	addi	a1,s0,-36
    8020cdfa:	4501                	li	a0,0
    8020cdfc:	ffffe097          	auipc	ra,0xffffe
    8020ce00:	fac080e7          	jalr	-84(ra) # 8020ada8 <argfd>
    return -1;
    8020ce04:	57fd                	li	a5,-1
  if(argfd(0, &fd, &f) < 0)
    8020ce06:	04054363          	bltz	a0,8020ce4c <sys_fcntl+0x6e>
  if(argint(1, &cmd) < 0)
    8020ce0a:	fd840593          	addi	a1,s0,-40
    8020ce0e:	4505                	li	a0,1
    8020ce10:	ffffe097          	auipc	ra,0xffffe
    8020ce14:	f24080e7          	jalr	-220(ra) # 8020ad34 <argint>
    return -1;
    8020ce18:	57fd                	li	a5,-1
  if(argint(1, &cmd) < 0)
    8020ce1a:	02054963          	bltz	a0,8020ce4c <sys_fcntl+0x6e>
  if(argaddr(2, &arg) < 0)
    8020ce1e:	fd040593          	addi	a1,s0,-48
    8020ce22:	4509                	li	a0,2
    8020ce24:	ffffe097          	auipc	ra,0xffffe
    8020ce28:	f32080e7          	jalr	-206(ra) # 8020ad56 <argaddr>
    8020ce2c:	0a054a63          	bltz	a0,8020cee0 <sys_fcntl+0x102>
    return -1;
   //printf("[sys fcntl]fd:%d cmd:%d arg:%p\n",fd,cmd,arg);
  if(cmd == F_GETFD){
    8020ce30:	fd842703          	lw	a4,-40(s0)
    8020ce34:	4785                	li	a5,1
    8020ce36:	02f70163          	beq	a4,a5,8020ce58 <sys_fcntl+0x7a>
    return p->exec_close[fd];
  }else if(cmd == F_SETFD){
    8020ce3a:	4789                	li	a5,2
    8020ce3c:	02f70563          	beq	a4,a5,8020ce66 <sys_fcntl+0x88>
    p->exec_close[fd] = arg;
  }else if(cmd == F_DUPFD){
    8020ce40:	cf0d                	beqz	a4,8020ce7a <sys_fcntl+0x9c>
      return fd;
    }
    filedup(f);
    //__debug_warn("[sys fcntl]return fd:%d\n",fd);
    return fd;
  }else if(cmd == F_DUPFD_CLOEXEC){
    8020ce42:	40600693          	li	a3,1030
    filedup(f);
    p->exec_close[fd] = 1;
    //__debug_warn("[sys fcntl]return fd:%d\n",fd);
    return fd;
  }
  return 0;
    8020ce46:	4781                	li	a5,0
  }else if(cmd == F_DUPFD_CLOEXEC){
    8020ce48:	04d70f63          	beq	a4,a3,8020cea6 <sys_fcntl+0xc8>
}
    8020ce4c:	853e                	mv	a0,a5
    8020ce4e:	70e2                	ld	ra,56(sp)
    8020ce50:	7442                	ld	s0,48(sp)
    8020ce52:	74a2                	ld	s1,40(sp)
    8020ce54:	6121                	addi	sp,sp,64
    8020ce56:	8082                	ret
    return p->exec_close[fd];
    8020ce58:	fdc42703          	lw	a4,-36(s0)
    8020ce5c:	78fc                	ld	a5,240(s1)
    8020ce5e:	070a                	slli	a4,a4,0x2
    8020ce60:	97ba                	add	a5,a5,a4
    8020ce62:	439c                	lw	a5,0(a5)
    8020ce64:	b7e5                	j	8020ce4c <sys_fcntl+0x6e>
    p->exec_close[fd] = arg;
    8020ce66:	fdc42703          	lw	a4,-36(s0)
    8020ce6a:	78fc                	ld	a5,240(s1)
    8020ce6c:	070a                	slli	a4,a4,0x2
    8020ce6e:	97ba                	add	a5,a5,a4
    8020ce70:	fd043703          	ld	a4,-48(s0)
    8020ce74:	c398                	sw	a4,0(a5)
  return 0;
    8020ce76:	4781                	li	a5,0
    8020ce78:	bfd1                	j	8020ce4c <sys_fcntl+0x6e>
    if((fd=fdallocfrom(f,arg)) < 0){
    8020ce7a:	fd042583          	lw	a1,-48(s0)
    8020ce7e:	fc843503          	ld	a0,-56(s0)
    8020ce82:	fffff097          	auipc	ra,0xfffff
    8020ce86:	cfa080e7          	jalr	-774(ra) # 8020bb7c <fdallocfrom>
    8020ce8a:	fca42e23          	sw	a0,-36(s0)
      return fd;
    8020ce8e:	87aa                	mv	a5,a0
    if((fd=fdallocfrom(f,arg)) < 0){
    8020ce90:	fa054ee3          	bltz	a0,8020ce4c <sys_fcntl+0x6e>
    filedup(f);
    8020ce94:	fc843503          	ld	a0,-56(s0)
    8020ce98:	ffff8097          	auipc	ra,0xffff8
    8020ce9c:	406080e7          	jalr	1030(ra) # 8020529e <filedup>
    return fd;
    8020cea0:	fdc42783          	lw	a5,-36(s0)
    8020cea4:	b765                	j	8020ce4c <sys_fcntl+0x6e>
    if((fd=fdallocfrom(f,arg)) < 0){
    8020cea6:	fd042583          	lw	a1,-48(s0)
    8020ceaa:	fc843503          	ld	a0,-56(s0)
    8020ceae:	fffff097          	auipc	ra,0xfffff
    8020ceb2:	cce080e7          	jalr	-818(ra) # 8020bb7c <fdallocfrom>
    8020ceb6:	87aa                	mv	a5,a0
    8020ceb8:	fca42e23          	sw	a0,-36(s0)
    8020cebc:	f80548e3          	bltz	a0,8020ce4c <sys_fcntl+0x6e>
    filedup(f);
    8020cec0:	fc843503          	ld	a0,-56(s0)
    8020cec4:	ffff8097          	auipc	ra,0xffff8
    8020cec8:	3da080e7          	jalr	986(ra) # 8020529e <filedup>
    p->exec_close[fd] = 1;
    8020cecc:	fdc42703          	lw	a4,-36(s0)
    8020ced0:	78fc                	ld	a5,240(s1)
    8020ced2:	070a                	slli	a4,a4,0x2
    8020ced4:	97ba                	add	a5,a5,a4
    8020ced6:	4705                	li	a4,1
    8020ced8:	c398                	sw	a4,0(a5)
    return fd;
    8020ceda:	fdc42783          	lw	a5,-36(s0)
    8020cede:	b7bd                	j	8020ce4c <sys_fcntl+0x6e>
    return -1;
    8020cee0:	57fd                	li	a5,-1
    8020cee2:	b7ad                	j	8020ce4c <sys_fcntl+0x6e>

000000008020cee4 <sys_getdents64>:


uint64
sys_getdents64(void) 
{
    8020cee4:	7179                	addi	sp,sp,-48
    8020cee6:	f406                	sd	ra,40(sp)
    8020cee8:	f022                	sd	s0,32(sp)
    8020ceea:	1800                	addi	s0,sp,48
  struct file* fp;
  int fd;
  uint64 buf;
  uint64 len;

  if(argfd(0, &fd, &fp) < 0 || argaddr(1, &buf) < 0 || argaddr(2, &len) < 0) {
    8020ceec:	fe840613          	addi	a2,s0,-24
    8020cef0:	fe440593          	addi	a1,s0,-28
    8020cef4:	4501                	li	a0,0
    8020cef6:	ffffe097          	auipc	ra,0xffffe
    8020cefa:	eb2080e7          	jalr	-334(ra) # 8020ada8 <argfd>
    return -1;
    8020cefe:	57fd                	li	a5,-1
  if(argfd(0, &fd, &fp) < 0 || argaddr(1, &buf) < 0 || argaddr(2, &len) < 0) {
    8020cf00:	04054163          	bltz	a0,8020cf42 <sys_getdents64+0x5e>
    8020cf04:	fd840593          	addi	a1,s0,-40
    8020cf08:	4505                	li	a0,1
    8020cf0a:	ffffe097          	auipc	ra,0xffffe
    8020cf0e:	e4c080e7          	jalr	-436(ra) # 8020ad56 <argaddr>
    return -1;
    8020cf12:	57fd                	li	a5,-1
  if(argfd(0, &fd, &fp) < 0 || argaddr(1, &buf) < 0 || argaddr(2, &len) < 0) {
    8020cf14:	02054763          	bltz	a0,8020cf42 <sys_getdents64+0x5e>
    8020cf18:	fd040593          	addi	a1,s0,-48
    8020cf1c:	4509                	li	a0,2
    8020cf1e:	ffffe097          	auipc	ra,0xffffe
    8020cf22:	e38080e7          	jalr	-456(ra) # 8020ad56 <argaddr>
    return -1;
    8020cf26:	57fd                	li	a5,-1
  if(argfd(0, &fd, &fp) < 0 || argaddr(1, &buf) < 0 || argaddr(2, &len) < 0) {
    8020cf28:	00054d63          	bltz	a0,8020cf42 <sys_getdents64+0x5e>
  }

  return dirent_next(fp, buf, len);
    8020cf2c:	fd042603          	lw	a2,-48(s0)
    8020cf30:	fd843583          	ld	a1,-40(s0)
    8020cf34:	fe843503          	ld	a0,-24(s0)
    8020cf38:	ffff9097          	auipc	ra,0xffff9
    8020cf3c:	dc8080e7          	jalr	-568(ra) # 80205d00 <dirent_next>
    8020cf40:	87aa                	mv	a5,a0
}
    8020cf42:	853e                	mv	a0,a5
    8020cf44:	70a2                	ld	ra,40(sp)
    8020cf46:	7402                	ld	s0,32(sp)
    8020cf48:	6145                	addi	sp,sp,48
    8020cf4a:	8082                	ret

000000008020cf4c <sys_pipe2>:

uint64
sys_pipe2(void)
{
    8020cf4c:	7139                	addi	sp,sp,-64
    8020cf4e:	fc06                	sd	ra,56(sp)
    8020cf50:	f822                	sd	s0,48(sp)
    8020cf52:	f426                	sd	s1,40(sp)
    8020cf54:	0080                	addi	s0,sp,64
  uint64 fdarray; // user pointer to array of two integers
  struct file *rf, *wf;
  int fd0, fd1;
  struct proc *p = myproc();
    8020cf56:	ffffd097          	auipc	ra,0xffffd
    8020cf5a:	bd4080e7          	jalr	-1068(ra) # 80209b2a <myproc>
    8020cf5e:	84aa                	mv	s1,a0

  if(argaddr(0, &fdarray) < 0)
    8020cf60:	fd840593          	addi	a1,s0,-40
    8020cf64:	4501                	li	a0,0
    8020cf66:	ffffe097          	auipc	ra,0xffffe
    8020cf6a:	df0080e7          	jalr	-528(ra) # 8020ad56 <argaddr>
    return -1;
    8020cf6e:	57fd                	li	a5,-1
  if(argaddr(0, &fdarray) < 0)
    8020cf70:	0e054163          	bltz	a0,8020d052 <sys_pipe2+0x106>
  if(pipealloc(&rf, &wf) < 0)
    8020cf74:	fc840593          	addi	a1,s0,-56
    8020cf78:	fd040513          	addi	a0,s0,-48
    8020cf7c:	ffff8097          	auipc	ra,0xffff8
    8020cf80:	a6a080e7          	jalr	-1430(ra) # 802049e6 <pipealloc>
    return -1;
    8020cf84:	57fd                	li	a5,-1
  if(pipealloc(&rf, &wf) < 0)
    8020cf86:	0c054663          	bltz	a0,8020d052 <sys_pipe2+0x106>
  fd0 = -1;
    8020cf8a:	fcf42223          	sw	a5,-60(s0)
  return fdallocfrom(f,0);
    8020cf8e:	4581                	li	a1,0
    8020cf90:	fd043503          	ld	a0,-48(s0)
    8020cf94:	fffff097          	auipc	ra,0xfffff
    8020cf98:	be8080e7          	jalr	-1048(ra) # 8020bb7c <fdallocfrom>
  if((fd0 = fdalloc(rf)) < 0 || (fd1 = fdalloc(wf)) < 0){
    8020cf9c:	fca42223          	sw	a0,-60(s0)
    8020cfa0:	08054c63          	bltz	a0,8020d038 <sys_pipe2+0xec>
  return fdallocfrom(f,0);
    8020cfa4:	4581                	li	a1,0
    8020cfa6:	fc843503          	ld	a0,-56(s0)
    8020cfaa:	fffff097          	auipc	ra,0xfffff
    8020cfae:	bd2080e7          	jalr	-1070(ra) # 8020bb7c <fdallocfrom>
  if((fd0 = fdalloc(rf)) < 0 || (fd1 = fdalloc(wf)) < 0){
    8020cfb2:	fca42023          	sw	a0,-64(s0)
    8020cfb6:	06054863          	bltz	a0,8020d026 <sys_pipe2+0xda>
    fileclose(wf);
    return -1;
  }
  // if(copyout(p->pagetable, fdarray, (char*)&fd0, sizeof(fd0)) < 0 ||
  //    copyout(p->pagetable, fdarray+sizeof(fd0), (char *)&fd1, sizeof(fd1)) < 0){
  if(either_copyout(1, fdarray, (char*)&fd0, sizeof(fd0)) < 0 ||
    8020cfba:	4691                	li	a3,4
    8020cfbc:	fc440613          	addi	a2,s0,-60
    8020cfc0:	fd843583          	ld	a1,-40(s0)
    8020cfc4:	4505                	li	a0,1
    8020cfc6:	ffffc097          	auipc	ra,0xffffc
    8020cfca:	502080e7          	jalr	1282(ra) # 802094c8 <either_copyout>
    8020cfce:	02054063          	bltz	a0,8020cfee <sys_pipe2+0xa2>
     either_copyout(1, fdarray+sizeof(fd0), (char *)&fd1, sizeof(fd1)) < 0){
    8020cfd2:	4691                	li	a3,4
    8020cfd4:	fc040613          	addi	a2,s0,-64
    8020cfd8:	fd843583          	ld	a1,-40(s0)
    8020cfdc:	0591                	addi	a1,a1,4
    8020cfde:	4505                	li	a0,1
    8020cfe0:	ffffc097          	auipc	ra,0xffffc
    8020cfe4:	4e8080e7          	jalr	1256(ra) # 802094c8 <either_copyout>
    fileclose(rf);
    fileclose(wf);
    return -1;
  }
  //printf("[pipe] fd0:%d fd1:%d\n",fd0,fd1);
  return 0;
    8020cfe8:	4781                	li	a5,0
  if(either_copyout(1, fdarray, (char*)&fd0, sizeof(fd0)) < 0 ||
    8020cfea:	06055463          	bgez	a0,8020d052 <sys_pipe2+0x106>
    p->ofile[fd0] = 0;
    8020cfee:	fc442703          	lw	a4,-60(s0)
    8020cff2:	74fc                	ld	a5,232(s1)
    8020cff4:	070e                	slli	a4,a4,0x3
    8020cff6:	97ba                	add	a5,a5,a4
    8020cff8:	0007b023          	sd	zero,0(a5)
    p->ofile[fd1] = 0;
    8020cffc:	fc042703          	lw	a4,-64(s0)
    8020d000:	74fc                	ld	a5,232(s1)
    8020d002:	070e                	slli	a4,a4,0x3
    8020d004:	97ba                	add	a5,a5,a4
    8020d006:	0007b023          	sd	zero,0(a5)
    fileclose(rf);
    8020d00a:	fd043503          	ld	a0,-48(s0)
    8020d00e:	ffff8097          	auipc	ra,0xffff8
    8020d012:	2e2080e7          	jalr	738(ra) # 802052f0 <fileclose>
    fileclose(wf);
    8020d016:	fc843503          	ld	a0,-56(s0)
    8020d01a:	ffff8097          	auipc	ra,0xffff8
    8020d01e:	2d6080e7          	jalr	726(ra) # 802052f0 <fileclose>
    return -1;
    8020d022:	57fd                	li	a5,-1
    8020d024:	a03d                	j	8020d052 <sys_pipe2+0x106>
    if(fd0 >= 0)
    8020d026:	fc442783          	lw	a5,-60(s0)
    8020d02a:	0007c763          	bltz	a5,8020d038 <sys_pipe2+0xec>
      p->ofile[fd0] = 0;
    8020d02e:	74f8                	ld	a4,232(s1)
    8020d030:	078e                	slli	a5,a5,0x3
    8020d032:	97ba                	add	a5,a5,a4
    8020d034:	0007b023          	sd	zero,0(a5)
    fileclose(rf);
    8020d038:	fd043503          	ld	a0,-48(s0)
    8020d03c:	ffff8097          	auipc	ra,0xffff8
    8020d040:	2b4080e7          	jalr	692(ra) # 802052f0 <fileclose>
    fileclose(wf);
    8020d044:	fc843503          	ld	a0,-56(s0)
    8020d048:	ffff8097          	auipc	ra,0xffff8
    8020d04c:	2a8080e7          	jalr	680(ra) # 802052f0 <fileclose>
    return -1;
    8020d050:	57fd                	li	a5,-1
}
    8020d052:	853e                	mv	a0,a5
    8020d054:	70e2                	ld	ra,56(sp)
    8020d056:	7442                	ld	s0,48(sp)
    8020d058:	74a2                	ld	s1,40(sp)
    8020d05a:	6121                	addi	sp,sp,64
    8020d05c:	8082                	ret

000000008020d05e <sys_readlinkat>:

uint64
sys_readlinkat(void)
{
    8020d05e:	714d                	addi	sp,sp,-336
    8020d060:	e686                	sd	ra,328(sp)
    8020d062:	e2a2                	sd	s0,320(sp)
    8020d064:	fe26                	sd	s1,312(sp)
    8020d066:	0a80                	addi	s0,sp,336
  int dirfd;
  struct file* df;
  char pathname[FAT32_MAX_PATH+1];
  uint64 buf;
  int bufsz;
  if(argint(3,&bufsz)<0){
    8020d068:	ebc40593          	addi	a1,s0,-324
    8020d06c:	450d                	li	a0,3
    8020d06e:	ffffe097          	auipc	ra,0xffffe
    8020d072:	cc6080e7          	jalr	-826(ra) # 8020ad34 <argint>
    return -1;
    8020d076:	57fd                	li	a5,-1
  if(argint(3,&bufsz)<0){
    8020d078:	06054d63          	bltz	a0,8020d0f2 <sys_readlinkat+0x94>
  }
  if(argaddr(2,&buf)<0){
    8020d07c:	ec040593          	addi	a1,s0,-320
    8020d080:	4509                	li	a0,2
    8020d082:	ffffe097          	auipc	ra,0xffffe
    8020d086:	cd4080e7          	jalr	-812(ra) # 8020ad56 <argaddr>
    return -1;
    8020d08a:	57fd                	li	a5,-1
  if(argaddr(2,&buf)<0){
    8020d08c:	06054363          	bltz	a0,8020d0f2 <sys_readlinkat+0x94>
  }
  if(argstr(1,pathname,FAT32_MAX_PATH+1)<0){
    8020d090:	10500613          	li	a2,261
    8020d094:	ec840593          	addi	a1,s0,-312
    8020d098:	4505                	li	a0,1
    8020d09a:	ffffe097          	auipc	ra,0xffffe
    8020d09e:	cde080e7          	jalr	-802(ra) # 8020ad78 <argstr>
    return -1;
    8020d0a2:	57fd                	li	a5,-1
  if(argstr(1,pathname,FAT32_MAX_PATH+1)<0){
    8020d0a4:	04054763          	bltz	a0,8020d0f2 <sys_readlinkat+0x94>
  }
  if(argfd(0,&dirfd,&df)&&dirfd!=AT_FDCWD&&pathname[0]!='/'){
    8020d0a8:	fd040613          	addi	a2,s0,-48
    8020d0ac:	fdc40593          	addi	a1,s0,-36
    8020d0b0:	4501                	li	a0,0
    8020d0b2:	ffffe097          	auipc	ra,0xffffe
    8020d0b6:	cf6080e7          	jalr	-778(ra) # 8020ada8 <argfd>
    8020d0ba:	cd11                	beqz	a0,8020d0d6 <sys_readlinkat+0x78>
    8020d0bc:	fdc42703          	lw	a4,-36(s0)
    8020d0c0:	f9c00793          	li	a5,-100
    8020d0c4:	00f70963          	beq	a4,a5,8020d0d6 <sys_readlinkat+0x78>
    8020d0c8:	ec844683          	lbu	a3,-312(s0)
    8020d0cc:	02f00713          	li	a4,47
    return -1;
    8020d0d0:	57fd                	li	a5,-1
  if(argfd(0,&dirfd,&df)&&dirfd!=AT_FDCWD&&pathname[0]!='/'){
    8020d0d2:	02e69063          	bne	a3,a4,8020d0f2 <sys_readlinkat+0x94>
  }
  //if(dirfd>=0)print_f_info(df);
  //printf("[readlinkat] pathname:%s\n",pathname);
  //printf("[readlinkat] buf:%p bufsz:%p\n",buf,bufsz);
  if(strncmp(pathname,"proc/self/exe",FAT32_MAX_PATH)==0){
    8020d0d6:	10400613          	li	a2,260
    8020d0da:	00006597          	auipc	a1,0x6
    8020d0de:	c0e58593          	addi	a1,a1,-1010 # 80212ce8 <UNAME_VERSION+0x1f8>
    8020d0e2:	ec840513          	addi	a0,s0,-312
    8020d0e6:	ffff4097          	auipc	ra,0xffff4
    8020d0ea:	d6a080e7          	jalr	-662(ra) # 80200e50 <strncmp>
    if(either_copyout(1,buf,myproc()->name,bufsz)<0){
      return -1;
    }
    return 0;
  }
  return -1;
    8020d0ee:	57fd                	li	a5,-1
  if(strncmp(pathname,"proc/self/exe",FAT32_MAX_PATH)==0){
    8020d0f0:	c519                	beqz	a0,8020d0fe <sys_readlinkat+0xa0>
}
    8020d0f2:	853e                	mv	a0,a5
    8020d0f4:	60b6                	ld	ra,328(sp)
    8020d0f6:	6416                	ld	s0,320(sp)
    8020d0f8:	74f2                	ld	s1,312(sp)
    8020d0fa:	6171                	addi	sp,sp,336
    8020d0fc:	8082                	ret
    if(either_copyout(1,buf,myproc()->name,bufsz)<0){
    8020d0fe:	ec043483          	ld	s1,-320(s0)
    8020d102:	ffffd097          	auipc	ra,0xffffd
    8020d106:	a28080e7          	jalr	-1496(ra) # 80209b2a <myproc>
    8020d10a:	ebc42683          	lw	a3,-324(s0)
    8020d10e:	10050613          	addi	a2,a0,256
    8020d112:	85a6                	mv	a1,s1
    8020d114:	4505                	li	a0,1
    8020d116:	ffffc097          	auipc	ra,0xffffc
    8020d11a:	3b2080e7          	jalr	946(ra) # 802094c8 <either_copyout>
    8020d11e:	43f55793          	srai	a5,a0,0x3f
    8020d122:	bfc1                	j	8020d0f2 <sys_readlinkat+0x94>

000000008020d124 <sys_sendfile>:


uint64 
sys_sendfile(void)
{
    8020d124:	7139                	addi	sp,sp,-64
    8020d126:	fc06                	sd	ra,56(sp)
    8020d128:	f822                	sd	s0,48(sp)
    8020d12a:	0080                	addi	s0,sp,64
  int in_fd;
  struct file *fout;
  struct file *fin;
  uint64 offset;
  uint64 count;
  if(argfd(0, &out_fd, &fout) < 0)
    8020d12c:	fe040613          	addi	a2,s0,-32
    8020d130:	fec40593          	addi	a1,s0,-20
    8020d134:	4501                	li	a0,0
    8020d136:	ffffe097          	auipc	ra,0xffffe
    8020d13a:	c72080e7          	jalr	-910(ra) # 8020ada8 <argfd>
  {
    return -1;
    8020d13e:	57fd                	li	a5,-1
  if(argfd(0, &out_fd, &fout) < 0)
    8020d140:	04054f63          	bltz	a0,8020d19e <sys_sendfile+0x7a>
  }
  if(argfd(1, &in_fd, &fin) < 0)
    8020d144:	fd840613          	addi	a2,s0,-40
    8020d148:	fe840593          	addi	a1,s0,-24
    8020d14c:	4505                	li	a0,1
    8020d14e:	ffffe097          	auipc	ra,0xffffe
    8020d152:	c5a080e7          	jalr	-934(ra) # 8020ada8 <argfd>
  {
    return -1;
    8020d156:	57fd                	li	a5,-1
  if(argfd(1, &in_fd, &fin) < 0)
    8020d158:	04054363          	bltz	a0,8020d19e <sys_sendfile+0x7a>
  }
  if(argaddr(2, &offset) < 0)
    8020d15c:	fd040593          	addi	a1,s0,-48
    8020d160:	4509                	li	a0,2
    8020d162:	ffffe097          	auipc	ra,0xffffe
    8020d166:	bf4080e7          	jalr	-1036(ra) # 8020ad56 <argaddr>
  {
    return -1;
    8020d16a:	57fd                	li	a5,-1
  if(argaddr(2, &offset) < 0)
    8020d16c:	02054963          	bltz	a0,8020d19e <sys_sendfile+0x7a>
  }
  if(argaddr(3, &count) < 0)
    8020d170:	fc840593          	addi	a1,s0,-56
    8020d174:	450d                	li	a0,3
    8020d176:	ffffe097          	auipc	ra,0xffffe
    8020d17a:	be0080e7          	jalr	-1056(ra) # 8020ad56 <argaddr>
  {
    return -1;
    8020d17e:	57fd                	li	a5,-1
  if(argaddr(3, &count) < 0)
    8020d180:	00054f63          	bltz	a0,8020d19e <sys_sendfile+0x7a>
  }
  //__debug_info("out_fd: %d, in_fd: %d, offset: %p, count: %p\n", out_fd, in_fd, offset, count);
  
  return filesend(fin,fout,offset,count);
    8020d184:	fc843683          	ld	a3,-56(s0)
    8020d188:	fd043603          	ld	a2,-48(s0)
    8020d18c:	fe043583          	ld	a1,-32(s0)
    8020d190:	fd843503          	ld	a0,-40(s0)
    8020d194:	ffff9097          	auipc	ra,0xffff9
    8020d198:	850080e7          	jalr	-1968(ra) # 802059e4 <filesend>
    8020d19c:	87aa                	mv	a5,a0
}
    8020d19e:	853e                	mv	a0,a5
    8020d1a0:	70e2                	ld	ra,56(sp)
    8020d1a2:	7442                	ld	s0,48(sp)
    8020d1a4:	6121                	addi	sp,sp,64
    8020d1a6:	8082                	ret

000000008020d1a8 <sys_clock_gettime>:
#include "include/file.h"
#include "include/errno.h"
#include "include/timer.h"

uint64
sys_clock_gettime(void){
    8020d1a8:	7179                	addi	sp,sp,-48
    8020d1aa:	f406                	sd	ra,40(sp)
    8020d1ac:	f022                	sd	s0,32(sp)
    8020d1ae:	1800                	addi	s0,sp,48
	clockid_t tid;
	uint64 addr;

	if(argaddr(0, &tid) < 0 || argaddr(1, &addr) < 0)
    8020d1b0:	fe840593          	addi	a1,s0,-24
    8020d1b4:	4501                	li	a0,0
    8020d1b6:	ffffe097          	auipc	ra,0xffffe
    8020d1ba:	ba0080e7          	jalr	-1120(ra) # 8020ad56 <argaddr>
    8020d1be:	87aa                	mv	a5,a0
	{
		return -1;
    8020d1c0:	557d                	li	a0,-1
	if(argaddr(0, &tid) < 0 || argaddr(1, &addr) < 0)
    8020d1c2:	0407cd63          	bltz	a5,8020d21c <sys_clock_gettime+0x74>
    8020d1c6:	fe040593          	addi	a1,s0,-32
    8020d1ca:	4505                	li	a0,1
    8020d1cc:	ffffe097          	auipc	ra,0xffffe
    8020d1d0:	b8a080e7          	jalr	-1142(ra) # 8020ad56 <argaddr>
    8020d1d4:	04054863          	bltz	a0,8020d224 <sys_clock_gettime+0x7c>
  asm volatile("rdtime %0" : "=r" (x) );
    8020d1d8:	c01027f3          	rdtime	a5

	uint64 tmp_ticks = r_time();
	struct timespec tsp;
	

	switch (tid)
    8020d1dc:	fe843703          	ld	a4,-24(s0)
    8020d1e0:	e31d                	bnez	a4,8020d206 <sys_clock_gettime+0x5e>
	ts->tv_sec = time / TICK_FREQ;
    8020d1e2:	000f4737          	lui	a4,0xf4
    8020d1e6:	24070713          	addi	a4,a4,576 # f4240 <_entry-0x8010bdc0>
    8020d1ea:	02e7d6b3          	divu	a3,a5,a4
    8020d1ee:	fcd43823          	sd	a3,-48(s0)
	ts->tv_nsec = (time % TICK_FREQ)
    8020d1f2:	02e7f7b3          	remu	a5,a5,a4
				* 1000 * 1000 / (TICK_FREQ / 1000);
    8020d1f6:	02e787b3          	mul	a5,a5,a4
    8020d1fa:	3e800713          	li	a4,1000
    8020d1fe:	02e7d7b3          	divu	a5,a5,a4
	ts->tv_nsec = (time % TICK_FREQ)
    8020d202:	fcf43c23          	sd	a5,-40(s0)
	
	default:
		break;
	}
	//printf("[clock gettime] tsp sec:%p nsec:%p\n",tsp.tv_sec,tsp.tv_sec);
	if(either_copyout(1,addr,(char*)&tsp,sizeof(struct timespec))<0){
    8020d206:	46c1                	li	a3,16
    8020d208:	fd040613          	addi	a2,s0,-48
    8020d20c:	fe043583          	ld	a1,-32(s0)
    8020d210:	4505                	li	a0,1
    8020d212:	ffffc097          	auipc	ra,0xffffc
    8020d216:	2b6080e7          	jalr	694(ra) # 802094c8 <either_copyout>
    8020d21a:	957d                	srai	a0,a0,0x3f
	  return -1;
	}
	//__debug_info("[sys_clock_gettime] return 0\n");
	return 0;

}
    8020d21c:	70a2                	ld	ra,40(sp)
    8020d21e:	7402                	ld	s0,32(sp)
    8020d220:	6145                	addi	sp,sp,48
    8020d222:	8082                	ret
		return -1;
    8020d224:	557d                	li	a0,-1
    8020d226:	bfdd                	j	8020d21c <sys_clock_gettime+0x74>

000000008020d228 <sys_utimensat>:

uint64 sys_utimensat(void){
    8020d228:	7109                	addi	sp,sp,-384
    8020d22a:	fe86                	sd	ra,376(sp)
    8020d22c:	faa2                	sd	s0,368(sp)
    8020d22e:	f6a6                	sd	s1,360(sp)
    8020d230:	f2ca                	sd	s2,352(sp)
    8020d232:	0300                	addi	s0,sp,384
	uint64 pathaddr;
	char pathname[FAT32_MAX_FILENAME];
	uint64 buf;
	int flags;
	struct timespec ts[2];
	struct proc* p = myproc();
    8020d234:	ffffd097          	auipc	ra,0xffffd
    8020d238:	8f6080e7          	jalr	-1802(ra) # 80209b2a <myproc>
    8020d23c:	892a                	mv	s2,a0
	struct file *f;
	struct file *fp = NULL;
    8020d23e:	e8043823          	sd	zero,-368(s0)
	struct dirent *ep, *dp;
	int devno = -1;
    8020d242:	57fd                	li	a5,-1
    8020d244:	e8f42623          	sw	a5,-372(s0)
	if(argfd(0,&fd,&fp)<0 && fd!=AT_FDCWD && fd!=-1){
    8020d248:	e9040613          	addi	a2,s0,-368
    8020d24c:	fdc40593          	addi	a1,s0,-36
    8020d250:	4501                	li	a0,0
    8020d252:	ffffe097          	auipc	ra,0xffffe
    8020d256:	b56080e7          	jalr	-1194(ra) # 8020ada8 <argfd>
    8020d25a:	00055c63          	bgez	a0,8020d272 <sys_utimensat+0x4a>
    8020d25e:	fdc42783          	lw	a5,-36(s0)
    8020d262:	f9c00713          	li	a4,-100
    8020d266:	00e78663          	beq	a5,a4,8020d272 <sys_utimensat+0x4a>
    8020d26a:	577d                	li	a4,-1
	  return -1;
    8020d26c:	54fd                	li	s1,-1
	if(argfd(0,&fd,&fp)<0 && fd!=AT_FDCWD && fd!=-1){
    8020d26e:	16e79863          	bne	a5,a4,8020d3de <sys_utimensat+0x1b6>
	}
	if(argaddr(1,&pathaddr)==0){
    8020d272:	fd040593          	addi	a1,s0,-48
    8020d276:	4505                	li	a0,1
    8020d278:	ffffe097          	auipc	ra,0xffffe
    8020d27c:	ade080e7          	jalr	-1314(ra) # 8020ad56 <argaddr>
	  if(pathaddr&&argstr(1,pathname,FAT32_MAX_FILENAME+1)<0){
	    return -1;
	  }
	}else{
	  return -1;
    8020d280:	54fd                	li	s1,-1
	if(argaddr(1,&pathaddr)==0){
    8020d282:	14051e63          	bnez	a0,8020d3de <sys_utimensat+0x1b6>
	  if(pathaddr&&argstr(1,pathname,FAT32_MAX_FILENAME+1)<0){
    8020d286:	fd043783          	ld	a5,-48(s0)
    8020d28a:	cf81                	beqz	a5,8020d2a2 <sys_utimensat+0x7a>
    8020d28c:	10000613          	li	a2,256
    8020d290:	ed040593          	addi	a1,s0,-304
    8020d294:	4505                	li	a0,1
    8020d296:	ffffe097          	auipc	ra,0xffffe
    8020d29a:	ae2080e7          	jalr	-1310(ra) # 8020ad78 <argstr>
    8020d29e:	14054763          	bltz	a0,8020d3ec <sys_utimensat+0x1c4>
	}
	if(argaddr(2,&buf)<0){
    8020d2a2:	ec840593          	addi	a1,s0,-312
    8020d2a6:	4509                	li	a0,2
    8020d2a8:	ffffe097          	auipc	ra,0xffffe
    8020d2ac:	aae080e7          	jalr	-1362(ra) # 8020ad56 <argaddr>
	  return -1;
    8020d2b0:	54fd                	li	s1,-1
	if(argaddr(2,&buf)<0){
    8020d2b2:	12054663          	bltz	a0,8020d3de <sys_utimensat+0x1b6>
	}
	if(argint(3,&flags)<0){
    8020d2b6:	ec440593          	addi	a1,s0,-316
    8020d2ba:	450d                	li	a0,3
    8020d2bc:	ffffe097          	auipc	ra,0xffffe
    8020d2c0:	a78080e7          	jalr	-1416(ra) # 8020ad34 <argint>
    8020d2c4:	12054663          	bltz	a0,8020d3f0 <sys_utimensat+0x1c8>
	  return -1;
	}


	if(buf != NULL){
    8020d2c8:	ec843603          	ld	a2,-312(s0)
    8020d2cc:	ea55                	bnez	a2,8020d380 <sys_utimensat+0x158>
	    return -1;
	  }
	}
	else
	{
		ts[0].tv_sec = TICK_TO_US(p->proc_tms.utime);
    8020d2ce:	12093783          	ld	a5,288(s2)
    8020d2d2:	eaf43023          	sd	a5,-352(s0)
		ts[0].tv_nsec = TICK_TO_US(p->proc_tms.utime);
    8020d2d6:	eaf43423          	sd	a5,-344(s0)
		ts[1].tv_sec = TICK_TO_US(p->proc_tms.utime);
    8020d2da:	eaf43823          	sd	a5,-336(s0)
		ts[1].tv_nsec = TICK_TO_US(p->proc_tms.utime);
    8020d2de:	eaf43c23          	sd	a5,-328(s0)
	}

	if(pathname[0] == '/')
    8020d2e2:	ed044703          	lbu	a4,-304(s0)
    8020d2e6:	02f00793          	li	a5,47
    8020d2ea:	0cf70363          	beq	a4,a5,8020d3b0 <sys_utimensat+0x188>
	{
		dp = NULL;
	}
	else if(fd == AT_FDCWD)
    8020d2ee:	fdc42703          	lw	a4,-36(s0)
    8020d2f2:	f9c00793          	li	a5,-100
    8020d2f6:	0af70f63          	beq	a4,a5,8020d3b4 <sys_utimensat+0x18c>
	{
		dp = NULL;
	}
	else
	{
		if(fp == NULL)
    8020d2fa:	e9043783          	ld	a5,-368(s0)
    8020d2fe:	cfd9                	beqz	a5,8020d39c <sys_utimensat+0x174>
		{
			__debug_warn("[sys_utimensat] DIRFD error\n");
			return -EMFILE;
		}
		dp = fp->ep;
    8020d300:	6f88                	ld	a0,24(a5)
	}

	ep = ename(dp, pathname, &devno);
    8020d302:	e8c40613          	addi	a2,s0,-372
    8020d306:	ed040593          	addi	a1,s0,-304
    8020d30a:	ffff7097          	auipc	ra,0xffff7
    8020d30e:	030080e7          	jalr	48(ra) # 8020433a <ename>
	if(ep == NULL)
    8020d312:	c16d                	beqz	a0,8020d3f4 <sys_utimensat+0x1cc>
		// __debug_warn("[sys_utimensat] file not found\n");
		return -ENOENT;
	}


	if(pathaddr){
    8020d314:	fd043483          	ld	s1,-48(s0)
    8020d318:	e0c5                	bnez	s1,8020d3b8 <sys_utimensat+0x190>
		f->t0_sec = ts[0].tv_sec;
		f->t0_nsec = ts[0].tv_nsec;
		f->t1_sec = ts[1].tv_sec;
		f->t1_nsec = ts[1].tv_nsec;
	}
	else if(fd >= 0 && ts[0].tv_sec != 1){
    8020d31a:	fdc42783          	lw	a5,-36(s0)
    8020d31e:	0c07c063          	bltz	a5,8020d3de <sys_utimensat+0x1b6>
    8020d322:	ea043703          	ld	a4,-352(s0)
    8020d326:	4785                	li	a5,1
    8020d328:	0af70b63          	beq	a4,a5,8020d3de <sys_utimensat+0x1b6>
		if(argfd(0,&fd,&f)<0) return -1;
    8020d32c:	e9840613          	addi	a2,s0,-360
    8020d330:	fdc40593          	addi	a1,s0,-36
    8020d334:	4501                	li	a0,0
    8020d336:	ffffe097          	auipc	ra,0xffffe
    8020d33a:	a72080e7          	jalr	-1422(ra) # 8020ada8 <argfd>
    8020d33e:	0a054d63          	bltz	a0,8020d3f8 <sys_utimensat+0x1d0>
		if(ts[0].tv_sec > f->t0_sec || ts[0].tv_sec == 0) f->t0_sec = ts[0].tv_sec;
    8020d342:	ea043703          	ld	a4,-352(s0)
    8020d346:	e9843783          	ld	a5,-360(s0)
    8020d34a:	7f94                	ld	a3,56(a5)
    8020d34c:	00e6e363          	bltu	a3,a4,8020d352 <sys_utimensat+0x12a>
    8020d350:	e311                	bnez	a4,8020d354 <sys_utimensat+0x12c>
    8020d352:	ff98                	sd	a4,56(a5)
		if(ts[0].tv_nsec > f->t0_nsec || ts[0].tv_nsec == 0) f->t0_nsec = ts[0].tv_nsec;
    8020d354:	ea843703          	ld	a4,-344(s0)
    8020d358:	63b4                	ld	a3,64(a5)
    8020d35a:	00e6e363          	bltu	a3,a4,8020d360 <sys_utimensat+0x138>
    8020d35e:	e311                	bnez	a4,8020d362 <sys_utimensat+0x13a>
    8020d360:	e3b8                	sd	a4,64(a5)
		if(ts[1].tv_sec > f->t1_sec || ts[1].tv_sec == 0) f->t1_sec = ts[1].tv_sec;
    8020d362:	eb043703          	ld	a4,-336(s0)
    8020d366:	67b4                	ld	a3,72(a5)
    8020d368:	00e6e363          	bltu	a3,a4,8020d36e <sys_utimensat+0x146>
    8020d36c:	e311                	bnez	a4,8020d370 <sys_utimensat+0x148>
    8020d36e:	e7b8                	sd	a4,72(a5)
		if(ts[1].tv_nsec > f->t1_nsec || ts[1].tv_nsec == 0) f->t1_nsec = ts[1].tv_nsec;
    8020d370:	eb843703          	ld	a4,-328(s0)
    8020d374:	6bb4                	ld	a3,80(a5)
    8020d376:	00e6e363          	bltu	a3,a4,8020d37c <sys_utimensat+0x154>
    8020d37a:	e335                	bnez	a4,8020d3de <sys_utimensat+0x1b6>
    8020d37c:	ebb8                	sd	a4,80(a5)
    8020d37e:	a085                	j	8020d3de <sys_utimensat+0x1b6>
	  if(copyin(p->pagetable,(char*)ts,buf,2*sizeof(struct timespec))<0){
    8020d380:	02000693          	li	a3,32
    8020d384:	ea040593          	addi	a1,s0,-352
    8020d388:	06093503          	ld	a0,96(s2)
    8020d38c:	ffffc097          	auipc	ra,0xffffc
    8020d390:	eae080e7          	jalr	-338(ra) # 8020923a <copyin>
    8020d394:	f40557e3          	bgez	a0,8020d2e2 <sys_utimensat+0xba>
	    return -1;
    8020d398:	54fd                	li	s1,-1
    8020d39a:	a091                	j	8020d3de <sys_utimensat+0x1b6>
			__debug_warn("[sys_utimensat] DIRFD error\n");
    8020d39c:	00006517          	auipc	a0,0x6
    8020d3a0:	97450513          	addi	a0,a0,-1676 # 80212d10 <UNAME_VERSION+0x220>
    8020d3a4:	ffffa097          	auipc	ra,0xffffa
    8020d3a8:	f00080e7          	jalr	-256(ra) # 802072a4 <__debug_warn>
			return -EMFILE;
    8020d3ac:	54a1                	li	s1,-24
    8020d3ae:	a805                	j	8020d3de <sys_utimensat+0x1b6>
		dp = NULL;
    8020d3b0:	4501                	li	a0,0
    8020d3b2:	bf81                	j	8020d302 <sys_utimensat+0xda>
		dp = NULL;
    8020d3b4:	4501                	li	a0,0
    8020d3b6:	b7b1                	j	8020d302 <sys_utimensat+0xda>
		f = findfile(pathname);
    8020d3b8:	ed040513          	addi	a0,s0,-304
    8020d3bc:	ffff9097          	auipc	ra,0xffff9
    8020d3c0:	85a080e7          	jalr	-1958(ra) # 80205c16 <findfile>
		f->t0_sec = ts[0].tv_sec;
    8020d3c4:	ea043783          	ld	a5,-352(s0)
    8020d3c8:	fd1c                	sd	a5,56(a0)
		f->t0_nsec = ts[0].tv_nsec;
    8020d3ca:	ea843783          	ld	a5,-344(s0)
    8020d3ce:	e13c                	sd	a5,64(a0)
		f->t1_sec = ts[1].tv_sec;
    8020d3d0:	eb043783          	ld	a5,-336(s0)
    8020d3d4:	e53c                	sd	a5,72(a0)
		f->t1_nsec = ts[1].tv_nsec;
    8020d3d6:	eb843783          	ld	a5,-328(s0)
    8020d3da:	e93c                	sd	a5,80(a0)
	// printf("[sys utimesat]fd:%d\tpathname:%s\n",fd,pathaddr?pathname:"(nil)");
	// printf("[sys utimesat]buf:%p\n",buf);
	// printf("[sys utimesat]timespec[0] tv_sec:%p\ttv_nsec:%p\n",ts[0].tv_sec,ts[0].tv_nsec);
	// printf("[sys utimesat]timespec[1] tv_sec:%p\ttv_nsec:%p\n",ts[1].tv_sec,ts[1].tv_nsec);
	// printf("[sys utimesat]flags:%p\n",flags);
	return 0;
    8020d3dc:	4481                	li	s1,0
}
    8020d3de:	8526                	mv	a0,s1
    8020d3e0:	70f6                	ld	ra,376(sp)
    8020d3e2:	7456                	ld	s0,368(sp)
    8020d3e4:	74b6                	ld	s1,360(sp)
    8020d3e6:	7916                	ld	s2,352(sp)
    8020d3e8:	6119                	addi	sp,sp,384
    8020d3ea:	8082                	ret
	    return -1;
    8020d3ec:	54fd                	li	s1,-1
    8020d3ee:	bfc5                	j	8020d3de <sys_utimensat+0x1b6>
	  return -1;
    8020d3f0:	54fd                	li	s1,-1
    8020d3f2:	b7f5                	j	8020d3de <sys_utimensat+0x1b6>
		return -ENOENT;
    8020d3f4:	54f9                	li	s1,-2
    8020d3f6:	b7e5                	j	8020d3de <sys_utimensat+0x1b6>
		if(argfd(0,&fd,&f)<0) return -1;
    8020d3f8:	54fd                	li	s1,-1
    8020d3fa:	b7d5                	j	8020d3de <sys_utimensat+0x1b6>

000000008020d3fc <sys_setitimer>:

uint64 sys_setitimer(void)
{
    8020d3fc:	715d                	addi	sp,sp,-80
    8020d3fe:	e486                	sd	ra,72(sp)
    8020d400:	e0a2                	sd	s0,64(sp)
    8020d402:	0880                	addi	s0,sp,80
	int which;
	uint64 newptr;
	uint64 oldptr;
	struct itimerval newval;

	argint(0, &which);
    8020d404:	fec40593          	addi	a1,s0,-20
    8020d408:	4501                	li	a0,0
    8020d40a:	ffffe097          	auipc	ra,0xffffe
    8020d40e:	92a080e7          	jalr	-1750(ra) # 8020ad34 <argint>
	argaddr(1, &newptr);
    8020d412:	fe040593          	addi	a1,s0,-32
    8020d416:	4505                	li	a0,1
    8020d418:	ffffe097          	auipc	ra,0xffffe
    8020d41c:	93e080e7          	jalr	-1730(ra) # 8020ad56 <argaddr>
	argaddr(2, &oldptr);
    8020d420:	fd840593          	addi	a1,s0,-40
    8020d424:	4509                	li	a0,2
    8020d426:	ffffe097          	auipc	ra,0xffffe
    8020d42a:	930080e7          	jalr	-1744(ra) # 8020ad56 <argaddr>

	if (which != CLOCK_REALTIME)
    8020d42e:	fec42783          	lw	a5,-20(s0)
		return -EINVAL;
    8020d432:	5529                	li	a0,-22
	if (which != CLOCK_REALTIME)
    8020d434:	efa9                	bnez	a5,8020d48e <sys_setitimer+0x92>

	if (either_copyin(1, (char*)&newval, newptr, sizeof(struct itimerval)) < 0)
    8020d436:	02000693          	li	a3,32
    8020d43a:	fe043603          	ld	a2,-32(s0)
    8020d43e:	fb840593          	addi	a1,s0,-72
    8020d442:	4505                	li	a0,1
    8020d444:	ffffc097          	auipc	ra,0xffffc
    8020d448:	0da080e7          	jalr	218(ra) # 8020951e <either_copyin>
    8020d44c:	87aa                	mv	a5,a0
		return -EFAULT;	
    8020d44e:	5549                	li	a0,-14
	if (either_copyin(1, (char*)&newval, newptr, sizeof(struct itimerval)) < 0)
    8020d450:	0207cf63          	bltz	a5,8020d48e <sys_setitimer+0x92>

	__debug_info("sys_setitimer", "new={%ds|%dus, %ds|%dus}\n",
    8020d454:	fd043783          	ld	a5,-48(s0)
    8020d458:	fc843703          	ld	a4,-56(s0)
    8020d45c:	fc043683          	ld	a3,-64(s0)
    8020d460:	fb843603          	ld	a2,-72(s0)
    8020d464:	00006597          	auipc	a1,0x6
    8020d468:	8cc58593          	addi	a1,a1,-1844 # 80212d30 <UNAME_VERSION+0x240>
    8020d46c:	00006517          	auipc	a0,0x6
    8020d470:	8e450513          	addi	a0,a0,-1820 # 80212d50 <UNAME_VERSION+0x260>
    8020d474:	ffffa097          	auipc	ra,0xffffa
    8020d478:	c6a080e7          	jalr	-918(ra) # 802070de <__debug_info>
				newval.it_interval.sec, newval.it_interval.usec, newval.it_value.sec, newval.it_value.usec);
	__debug_info("[sys_setitimer] return 0\n");
    8020d47c:	00006517          	auipc	a0,0x6
    8020d480:	8e450513          	addi	a0,a0,-1820 # 80212d60 <UNAME_VERSION+0x270>
    8020d484:	ffffa097          	auipc	ra,0xffffa
    8020d488:	c5a080e7          	jalr	-934(ra) # 802070de <__debug_info>
	return 0;
    8020d48c:	4501                	li	a0,0
}
    8020d48e:	60a6                	ld	ra,72(sp)
    8020d490:	6406                	ld	s0,64(sp)
    8020d492:	6161                	addi	sp,sp,80
    8020d494:	8082                	ret

000000008020d496 <sys_execve>:
#include"include/copy.h"
#include"include/rusage.h"

uint64
sys_execve()
{
    8020d496:	cc010113          	addi	sp,sp,-832
    8020d49a:	32113c23          	sd	ra,824(sp)
    8020d49e:	32813823          	sd	s0,816(sp)
    8020d4a2:	32913423          	sd	s1,808(sp)
    8020d4a6:	33213023          	sd	s2,800(sp)
    8020d4aa:	31313c23          	sd	s3,792(sp)
    8020d4ae:	0680                	addi	s0,sp,832
  char path[FAT32_MAX_PATH], *argv[MAXARG] ,*env[MAXARG];
  int argvlen , envlen;
  if(argstr(0, path, FAT32_MAX_PATH) < 0){
    8020d4b0:	10400613          	li	a2,260
    8020d4b4:	ec840593          	addi	a1,s0,-312
    8020d4b8:	4501                	li	a0,0
    8020d4ba:	ffffe097          	auipc	ra,0xffffe
    8020d4be:	8be080e7          	jalr	-1858(ra) # 8020ad78 <argstr>
    8020d4c2:	08054163          	bltz	a0,8020d544 <sys_execve+0xae>
    __debug_warn("[sys execve] invalid path\n");
    return -1;
  }
  if((argvlen = argstrvec(1,argv, MAXARG)) < 0){
    8020d4c6:	02000613          	li	a2,32
    8020d4ca:	dc840593          	addi	a1,s0,-568
    8020d4ce:	4505                	li	a0,1
    8020d4d0:	ffffe097          	auipc	ra,0xffffe
    8020d4d4:	a48080e7          	jalr	-1464(ra) # 8020af18 <argstrvec>
    8020d4d8:	892a                	mv	s2,a0
    8020d4da:	06054f63          	bltz	a0,8020d558 <sys_execve+0xc2>
    __debug_warn("[sys execve] invalid argv\n");
    return -1;
  }
  if((envlen = argstrvec(2,env,MAXARG)) <0){
    8020d4de:	02000613          	li	a2,32
    8020d4e2:	cc840593          	addi	a1,s0,-824
    8020d4e6:	4509                	li	a0,2
    8020d4e8:	ffffe097          	auipc	ra,0xffffe
    8020d4ec:	a30080e7          	jalr	-1488(ra) # 8020af18 <argstrvec>
    8020d4f0:	89aa                	mv	s3,a0
    8020d4f2:	06054d63          	bltz	a0,8020d56c <sys_execve+0xd6>
    env[0] = 0;
  }

 int ret = exec(path, argv, env);
    8020d4f6:	cc840613          	addi	a2,s0,-824
    8020d4fa:	dc840593          	addi	a1,s0,-568
    8020d4fe:	ec840513          	addi	a0,s0,-312
    8020d502:	ffffe097          	auipc	ra,0xffffe
    8020d506:	d4a080e7          	jalr	-694(ra) # 8020b24c <exec>
    8020d50a:	84aa                	mv	s1,a0

 freevec(argv,argvlen);
    8020d50c:	85ca                	mv	a1,s2
    8020d50e:	dc840513          	addi	a0,s0,-568
    8020d512:	ffffe097          	auipc	ra,0xffffe
    8020d516:	9c0080e7          	jalr	-1600(ra) # 8020aed2 <freevec>
 freevec(env,envlen);
    8020d51a:	85ce                	mv	a1,s3
    8020d51c:	cc840513          	addi	a0,s0,-824
    8020d520:	ffffe097          	auipc	ra,0xffffe
    8020d524:	9b2080e7          	jalr	-1614(ra) # 8020aed2 <freevec>

 return ret;
    8020d528:	8526                	mv	a0,s1
}
    8020d52a:	33813083          	ld	ra,824(sp)
    8020d52e:	33013403          	ld	s0,816(sp)
    8020d532:	32813483          	ld	s1,808(sp)
    8020d536:	32013903          	ld	s2,800(sp)
    8020d53a:	31813983          	ld	s3,792(sp)
    8020d53e:	34010113          	addi	sp,sp,832
    8020d542:	8082                	ret
    __debug_warn("[sys execve] invalid path\n");
    8020d544:	00006517          	auipc	a0,0x6
    8020d548:	83c50513          	addi	a0,a0,-1988 # 80212d80 <UNAME_VERSION+0x290>
    8020d54c:	ffffa097          	auipc	ra,0xffffa
    8020d550:	d58080e7          	jalr	-680(ra) # 802072a4 <__debug_warn>
    return -1;
    8020d554:	557d                	li	a0,-1
    8020d556:	bfd1                	j	8020d52a <sys_execve+0x94>
    __debug_warn("[sys execve] invalid argv\n");
    8020d558:	00006517          	auipc	a0,0x6
    8020d55c:	84850513          	addi	a0,a0,-1976 # 80212da0 <UNAME_VERSION+0x2b0>
    8020d560:	ffffa097          	auipc	ra,0xffffa
    8020d564:	d44080e7          	jalr	-700(ra) # 802072a4 <__debug_warn>
    return -1;
    8020d568:	557d                	li	a0,-1
    8020d56a:	b7c1                	j	8020d52a <sys_execve+0x94>
    env[0] = 0;
    8020d56c:	cc043423          	sd	zero,-824(s0)
    8020d570:	b759                	j	8020d4f6 <sys_execve+0x60>

000000008020d572 <sys_getpid>:

uint64
sys_getpid(void)
{
    8020d572:	1141                	addi	sp,sp,-16
    8020d574:	e406                	sd	ra,8(sp)
    8020d576:	e022                	sd	s0,0(sp)
    8020d578:	0800                	addi	s0,sp,16
  return myproc()->pid;
    8020d57a:	ffffc097          	auipc	ra,0xffffc
    8020d57e:	5b0080e7          	jalr	1456(ra) # 80209b2a <myproc>
}
    8020d582:	4128                	lw	a0,64(a0)
    8020d584:	60a2                	ld	ra,8(sp)
    8020d586:	6402                	ld	s0,0(sp)
    8020d588:	0141                	addi	sp,sp,16
    8020d58a:	8082                	ret

000000008020d58c <sys_getppid>:

uint64
sys_getppid(void){
    8020d58c:	1141                	addi	sp,sp,-16
    8020d58e:	e406                	sd	ra,8(sp)
    8020d590:	e022                	sd	s0,0(sp)
    8020d592:	0800                	addi	s0,sp,16
  struct proc* p =myproc();
    8020d594:	ffffc097          	auipc	ra,0xffffc
    8020d598:	596080e7          	jalr	1430(ra) # 80209b2a <myproc>
  if(p->parent)return p->parent->pid;
    8020d59c:	751c                	ld	a5,40(a0)
  else return 0;
    8020d59e:	4501                	li	a0,0
  if(p->parent)return p->parent->pid;
    8020d5a0:	c391                	beqz	a5,8020d5a4 <sys_getppid+0x18>
    8020d5a2:	43a8                	lw	a0,64(a5)
}
    8020d5a4:	60a2                	ld	ra,8(sp)
    8020d5a6:	6402                	ld	s0,0(sp)
    8020d5a8:	0141                	addi	sp,sp,16
    8020d5aa:	8082                	ret

000000008020d5ac <sys_getuid>:

uint64
sys_getuid(void)
{
    8020d5ac:	1141                	addi	sp,sp,-16
    8020d5ae:	e406                	sd	ra,8(sp)
    8020d5b0:	e022                	sd	s0,0(sp)
    8020d5b2:	0800                	addi	s0,sp,16
  return myproc()->uid;
    8020d5b4:	ffffc097          	auipc	ra,0xffffc
    8020d5b8:	576080e7          	jalr	1398(ra) # 80209b2a <myproc>
}
    8020d5bc:	4168                	lw	a0,68(a0)
    8020d5be:	60a2                	ld	ra,8(sp)
    8020d5c0:	6402                	ld	s0,0(sp)
    8020d5c2:	0141                	addi	sp,sp,16
    8020d5c4:	8082                	ret

000000008020d5c6 <sys_geteuid>:

uint64
sys_geteuid(void)
{
    8020d5c6:	1141                	addi	sp,sp,-16
    8020d5c8:	e406                	sd	ra,8(sp)
    8020d5ca:	e022                	sd	s0,0(sp)
    8020d5cc:	0800                	addi	s0,sp,16
  return myproc()->uid;
    8020d5ce:	ffffc097          	auipc	ra,0xffffc
    8020d5d2:	55c080e7          	jalr	1372(ra) # 80209b2a <myproc>
}
    8020d5d6:	4168                	lw	a0,68(a0)
    8020d5d8:	60a2                	ld	ra,8(sp)
    8020d5da:	6402                	ld	s0,0(sp)
    8020d5dc:	0141                	addi	sp,sp,16
    8020d5de:	8082                	ret

000000008020d5e0 <sys_getgid>:

uint64
sys_getgid(void)
{
    8020d5e0:	1141                	addi	sp,sp,-16
    8020d5e2:	e406                	sd	ra,8(sp)
    8020d5e4:	e022                	sd	s0,0(sp)
    8020d5e6:	0800                	addi	s0,sp,16
  return myproc()->gid;
    8020d5e8:	ffffc097          	auipc	ra,0xffffc
    8020d5ec:	542080e7          	jalr	1346(ra) # 80209b2a <myproc>
}
    8020d5f0:	4528                	lw	a0,72(a0)
    8020d5f2:	60a2                	ld	ra,8(sp)
    8020d5f4:	6402                	ld	s0,0(sp)
    8020d5f6:	0141                	addi	sp,sp,16
    8020d5f8:	8082                	ret

000000008020d5fa <sys_getegid>:

uint64
sys_getegid(void)
{
    8020d5fa:	1141                	addi	sp,sp,-16
    8020d5fc:	e406                	sd	ra,8(sp)
    8020d5fe:	e022                	sd	s0,0(sp)
    8020d600:	0800                	addi	s0,sp,16
  return myproc()->gid;
    8020d602:	ffffc097          	auipc	ra,0xffffc
    8020d606:	528080e7          	jalr	1320(ra) # 80209b2a <myproc>
}
    8020d60a:	4528                	lw	a0,72(a0)
    8020d60c:	60a2                	ld	ra,8(sp)
    8020d60e:	6402                	ld	s0,0(sp)
    8020d610:	0141                	addi	sp,sp,16
    8020d612:	8082                	ret

000000008020d614 <sys_setuid>:

uint64 
sys_setuid(void)
{
    8020d614:	1101                	addi	sp,sp,-32
    8020d616:	ec06                	sd	ra,24(sp)
    8020d618:	e822                	sd	s0,16(sp)
    8020d61a:	1000                	addi	s0,sp,32
  int uid;
  if(argint(0, &uid) < 0)
    8020d61c:	fec40593          	addi	a1,s0,-20
    8020d620:	4501                	li	a0,0
    8020d622:	ffffd097          	auipc	ra,0xffffd
    8020d626:	712080e7          	jalr	1810(ra) # 8020ad34 <argint>
  {
    return -1;
    8020d62a:	57fd                	li	a5,-1
  if(argint(0, &uid) < 0)
    8020d62c:	00054a63          	bltz	a0,8020d640 <sys_setuid+0x2c>
  }
  myproc()->uid = uid;
    8020d630:	ffffc097          	auipc	ra,0xffffc
    8020d634:	4fa080e7          	jalr	1274(ra) # 80209b2a <myproc>
    8020d638:	fec42783          	lw	a5,-20(s0)
    8020d63c:	c17c                	sw	a5,68(a0)
  return 0;
    8020d63e:	4781                	li	a5,0
}
    8020d640:	853e                	mv	a0,a5
    8020d642:	60e2                	ld	ra,24(sp)
    8020d644:	6442                	ld	s0,16(sp)
    8020d646:	6105                	addi	sp,sp,32
    8020d648:	8082                	ret

000000008020d64a <sys_setgid>:

uint64
sys_setgid(void)
{
    8020d64a:	1101                	addi	sp,sp,-32
    8020d64c:	ec06                	sd	ra,24(sp)
    8020d64e:	e822                	sd	s0,16(sp)
    8020d650:	1000                	addi	s0,sp,32
  int gid;
  if(argint(0, &gid) < 0)
    8020d652:	fec40593          	addi	a1,s0,-20
    8020d656:	4501                	li	a0,0
    8020d658:	ffffd097          	auipc	ra,0xffffd
    8020d65c:	6dc080e7          	jalr	1756(ra) # 8020ad34 <argint>
  {
    return -1;
    8020d660:	57fd                	li	a5,-1
  if(argint(0, &gid) < 0)
    8020d662:	00054a63          	bltz	a0,8020d676 <sys_setgid+0x2c>
  }
  myproc()->gid = gid;
    8020d666:	ffffc097          	auipc	ra,0xffffc
    8020d66a:	4c4080e7          	jalr	1220(ra) # 80209b2a <myproc>
    8020d66e:	fec42783          	lw	a5,-20(s0)
    8020d672:	c53c                	sw	a5,72(a0)
  return 0;
    8020d674:	4781                	li	a5,0
}
    8020d676:	853e                	mv	a0,a5
    8020d678:	60e2                	ld	ra,24(sp)
    8020d67a:	6442                	ld	s0,16(sp)
    8020d67c:	6105                	addi	sp,sp,32
    8020d67e:	8082                	ret

000000008020d680 <sys_uname>:

uint64 
sys_uname(void) {
    8020d680:	1101                	addi	sp,sp,-32
    8020d682:	ec06                	sd	ra,24(sp)
    8020d684:	e822                	sd	s0,16(sp)
    8020d686:	1000                	addi	s0,sp,32
	uint64 addr;

	if (argaddr(0, &addr) < 0) {
    8020d688:	fe840593          	addi	a1,s0,-24
    8020d68c:	4501                	li	a0,0
    8020d68e:	ffffd097          	auipc	ra,0xffffd
    8020d692:	6c8080e7          	jalr	1736(ra) # 8020ad56 <argaddr>
    8020d696:	87aa                	mv	a5,a0
		return -1;
    8020d698:	557d                	li	a0,-1
	if (argaddr(0, &addr) < 0) {
    8020d69a:	0007c863          	bltz	a5,8020d6aa <sys_uname+0x2a>
	}

	return uname_copyout(addr);
    8020d69e:	fe843503          	ld	a0,-24(s0)
    8020d6a2:	ffffe097          	auipc	ra,0xffffe
    8020d6a6:	3bc080e7          	jalr	956(ra) # 8020ba5e <uname_copyout>
}
    8020d6aa:	60e2                	ld	ra,24(sp)
    8020d6ac:	6442                	ld	s0,16(sp)
    8020d6ae:	6105                	addi	sp,sp,32
    8020d6b0:	8082                	ret

000000008020d6b2 <sys_clone>:


uint64
sys_clone(void)
{
    8020d6b2:	7139                	addi	sp,sp,-64
    8020d6b4:	fc06                	sd	ra,56(sp)
    8020d6b6:	f822                	sd	s0,48(sp)
    8020d6b8:	0080                	addi	s0,sp,64
  uint64 flag, stack, ptid, ctid, tls;
  if (argaddr(0, &flag) < 0) 
    8020d6ba:	fe840593          	addi	a1,s0,-24
    8020d6be:	4501                	li	a0,0
    8020d6c0:	ffffd097          	auipc	ra,0xffffd
    8020d6c4:	696080e7          	jalr	1686(ra) # 8020ad56 <argaddr>
  	return -1;
    8020d6c8:	57fd                	li	a5,-1
  if (argaddr(0, &flag) < 0) 
    8020d6ca:	06054963          	bltz	a0,8020d73c <sys_clone+0x8a>
  if (argaddr(1, &stack) < 0) 
    8020d6ce:	fe040593          	addi	a1,s0,-32
    8020d6d2:	4505                	li	a0,1
    8020d6d4:	ffffd097          	auipc	ra,0xffffd
    8020d6d8:	682080e7          	jalr	1666(ra) # 8020ad56 <argaddr>
	return -1;
    8020d6dc:	57fd                	li	a5,-1
  if (argaddr(1, &stack) < 0) 
    8020d6de:	04054f63          	bltz	a0,8020d73c <sys_clone+0x8a>
  if(argaddr(2, &ptid) < 0)
    8020d6e2:	fd840593          	addi	a1,s0,-40
    8020d6e6:	4509                	li	a0,2
    8020d6e8:	ffffd097          	auipc	ra,0xffffd
    8020d6ec:	66e080e7          	jalr	1646(ra) # 8020ad56 <argaddr>
  	return -1;
    8020d6f0:	57fd                	li	a5,-1
  if(argaddr(2, &ptid) < 0)
    8020d6f2:	04054563          	bltz	a0,8020d73c <sys_clone+0x8a>
  if(argaddr(3, &tls) < 0)
    8020d6f6:	fc840593          	addi	a1,s0,-56
    8020d6fa:	450d                	li	a0,3
    8020d6fc:	ffffd097          	auipc	ra,0xffffd
    8020d700:	65a080e7          	jalr	1626(ra) # 8020ad56 <argaddr>
    return -1;
    8020d704:	57fd                	li	a5,-1
  if(argaddr(3, &tls) < 0)
    8020d706:	02054b63          	bltz	a0,8020d73c <sys_clone+0x8a>
  if(argaddr(4, &ctid) < 0)
    8020d70a:	fd040593          	addi	a1,s0,-48
    8020d70e:	4511                	li	a0,4
    8020d710:	ffffd097          	auipc	ra,0xffffd
    8020d714:	646080e7          	jalr	1606(ra) # 8020ad56 <argaddr>
    return -1;
    8020d718:	57fd                	li	a5,-1
  if(argaddr(4, &ctid) < 0)
    8020d71a:	02054163          	bltz	a0,8020d73c <sys_clone+0x8a>
  return clone(flag, stack, ptid, tls, ctid);
    8020d71e:	fd043703          	ld	a4,-48(s0)
    8020d722:	fc843683          	ld	a3,-56(s0)
    8020d726:	fd843603          	ld	a2,-40(s0)
    8020d72a:	fe043583          	ld	a1,-32(s0)
    8020d72e:	fe843503          	ld	a0,-24(s0)
    8020d732:	ffff4097          	auipc	ra,0xffff4
    8020d736:	724080e7          	jalr	1828(ra) # 80201e56 <clone>
    8020d73a:	87aa                	mv	a5,a0
}
    8020d73c:	853e                	mv	a0,a5
    8020d73e:	70e2                	ld	ra,56(sp)
    8020d740:	7442                	ld	s0,48(sp)
    8020d742:	6121                	addi	sp,sp,64
    8020d744:	8082                	ret

000000008020d746 <sys_wait4>:

uint64
sys_wait4()
{
    8020d746:	1101                	addi	sp,sp,-32
    8020d748:	ec06                	sd	ra,24(sp)
    8020d74a:	e822                	sd	s0,16(sp)
    8020d74c:	1000                	addi	s0,sp,32
  uint64 addr;
  int pid;
  if(argint(0, &pid) < 0)
    8020d74e:	fe440593          	addi	a1,s0,-28
    8020d752:	4501                	li	a0,0
    8020d754:	ffffd097          	auipc	ra,0xffffd
    8020d758:	5e0080e7          	jalr	1504(ra) # 8020ad34 <argint>
    return -1;
    8020d75c:	57fd                	li	a5,-1
  if(argint(0, &pid) < 0)
    8020d75e:	02054563          	bltz	a0,8020d788 <sys_wait4+0x42>
  if(argaddr(1, &addr) < 0)
    8020d762:	fe840593          	addi	a1,s0,-24
    8020d766:	4505                	li	a0,1
    8020d768:	ffffd097          	auipc	ra,0xffffd
    8020d76c:	5ee080e7          	jalr	1518(ra) # 8020ad56 <argaddr>
    return -1;
    8020d770:	57fd                	li	a5,-1
  if(argaddr(1, &addr) < 0)
    8020d772:	00054b63          	bltz	a0,8020d788 <sys_wait4+0x42>
    
  //printf("[sys_wait4]pid %d:%s enter\n",myproc()->pid,myproc()->name);
  return wait4pid(pid,addr);
    8020d776:	fe843583          	ld	a1,-24(s0)
    8020d77a:	fe442503          	lw	a0,-28(s0)
    8020d77e:	ffff5097          	auipc	ra,0xffff5
    8020d782:	a1a080e7          	jalr	-1510(ra) # 80202198 <wait4pid>
    8020d786:	87aa                	mv	a5,a0
}
    8020d788:	853e                	mv	a0,a5
    8020d78a:	60e2                	ld	ra,24(sp)
    8020d78c:	6442                	ld	s0,16(sp)
    8020d78e:	6105                	addi	sp,sp,32
    8020d790:	8082                	ret

000000008020d792 <sys_set_tid_address>:

uint64
sys_set_tid_address(void){
    8020d792:	1101                	addi	sp,sp,-32
    8020d794:	ec06                	sd	ra,24(sp)
    8020d796:	e822                	sd	s0,16(sp)
    8020d798:	1000                	addi	s0,sp,32
  uint64 address;
  argaddr(0, &address);
    8020d79a:	fe840593          	addi	a1,s0,-24
    8020d79e:	4501                	li	a0,0
    8020d7a0:	ffffd097          	auipc	ra,0xffffd
    8020d7a4:	5b6080e7          	jalr	1462(ra) # 8020ad56 <argaddr>
  myproc()->clear_child_tid = address;
    8020d7a8:	ffffc097          	auipc	ra,0xffffc
    8020d7ac:	382080e7          	jalr	898(ra) # 80209b2a <myproc>
    8020d7b0:	fe843783          	ld	a5,-24(s0)
    8020d7b4:	1af53823          	sd	a5,432(a0)
  return myproc()->pid;
    8020d7b8:	ffffc097          	auipc	ra,0xffffc
    8020d7bc:	372080e7          	jalr	882(ra) # 80209b2a <myproc>
}
    8020d7c0:	4128                	lw	a0,64(a0)
    8020d7c2:	60e2                	ld	ra,24(sp)
    8020d7c4:	6442                	ld	s0,16(sp)
    8020d7c6:	6105                	addi	sp,sp,32
    8020d7c8:	8082                	ret

000000008020d7ca <sys_gettid>:

uint64
sys_gettid(void){
    8020d7ca:	1101                	addi	sp,sp,-32
    8020d7cc:	ec06                	sd	ra,24(sp)
    8020d7ce:	e822                	sd	s0,16(sp)
    8020d7d0:	1000                	addi	s0,sp,32
  struct proc* p = myproc();
    8020d7d2:	ffffc097          	auipc	ra,0xffffc
    8020d7d6:	358080e7          	jalr	856(ra) # 80209b2a <myproc>
  uint64 address = p->clear_child_tid;
    8020d7da:	1b053603          	ld	a2,432(a0)
  int tid;
  if(address){
    8020d7de:	e611                	bnez	a2,8020d7ea <sys_gettid+0x20>
    if(either_copyin(1,&tid,address,sizeof(tid))<0){
      return -1;
    }
    return tid;
  }else{
    return p->pid;
    8020d7e0:	4128                	lw	a0,64(a0)
  }
}
    8020d7e2:	60e2                	ld	ra,24(sp)
    8020d7e4:	6442                	ld	s0,16(sp)
    8020d7e6:	6105                	addi	sp,sp,32
    8020d7e8:	8082                	ret
    if(either_copyin(1,&tid,address,sizeof(tid))<0){
    8020d7ea:	4691                	li	a3,4
    8020d7ec:	fec40593          	addi	a1,s0,-20
    8020d7f0:	4505                	li	a0,1
    8020d7f2:	ffffc097          	auipc	ra,0xffffc
    8020d7f6:	d2c080e7          	jalr	-724(ra) # 8020951e <either_copyin>
    8020d7fa:	87aa                	mv	a5,a0
      return -1;
    8020d7fc:	557d                	li	a0,-1
    if(either_copyin(1,&tid,address,sizeof(tid))<0){
    8020d7fe:	fe07c2e3          	bltz	a5,8020d7e2 <sys_gettid+0x18>
    return tid;
    8020d802:	fec42503          	lw	a0,-20(s0)
    8020d806:	bff1                	j	8020d7e2 <sys_gettid+0x18>

000000008020d808 <sys_exit>:

uint64
sys_exit()
{
    8020d808:	1101                	addi	sp,sp,-32
    8020d80a:	ec06                	sd	ra,24(sp)
    8020d80c:	e822                	sd	s0,16(sp)
    8020d80e:	1000                	addi	s0,sp,32
  int n;
  if(argint(0,&n)<0){
    8020d810:	fec40593          	addi	a1,s0,-20
    8020d814:	4501                	li	a0,0
    8020d816:	ffffd097          	auipc	ra,0xffffd
    8020d81a:	51e080e7          	jalr	1310(ra) # 8020ad34 <argint>
    return -1;
    8020d81e:	57fd                	li	a5,-1
  if(argint(0,&n)<0){
    8020d820:	00054963          	bltz	a0,8020d832 <sys_exit+0x2a>
  }
  exit(n);
    8020d824:	fec42503          	lw	a0,-20(s0)
    8020d828:	ffff5097          	auipc	ra,0xffff5
    8020d82c:	ab2080e7          	jalr	-1358(ra) # 802022da <exit>
  return 0;
    8020d830:	4781                	li	a5,0
}
    8020d832:	853e                	mv	a0,a5
    8020d834:	60e2                	ld	ra,24(sp)
    8020d836:	6442                	ld	s0,16(sp)
    8020d838:	6105                	addi	sp,sp,32
    8020d83a:	8082                	ret

000000008020d83c <sys_getrusage>:

uint64
sys_getrusage(void)
{
    8020d83c:	7115                	addi	sp,sp,-224
    8020d83e:	ed86                	sd	ra,216(sp)
    8020d840:	e9a2                	sd	s0,208(sp)
    8020d842:	e5a6                	sd	s1,200(sp)
    8020d844:	1180                	addi	s0,sp,224
  int who;
  struct proc* p = myproc();
    8020d846:	ffffc097          	auipc	ra,0xffffc
    8020d84a:	2e4080e7          	jalr	740(ra) # 80209b2a <myproc>
    8020d84e:	84aa                	mv	s1,a0
  uint64 rusage;
  struct rusage rs;
  if(argint(0,&who)<0){
    8020d850:	fbc40593          	addi	a1,s0,-68
    8020d854:	4501                	li	a0,0
    8020d856:	ffffd097          	auipc	ra,0xffffd
    8020d85a:	4de080e7          	jalr	1246(ra) # 8020ad34 <argint>
    return -1;
    8020d85e:	57fd                	li	a5,-1
  if(argint(0,&who)<0){
    8020d860:	0a054663          	bltz	a0,8020d90c <sys_getrusage+0xd0>
  }
  if(argaddr(1,&rusage)<0){
    8020d864:	fb040593          	addi	a1,s0,-80
    8020d868:	4505                	li	a0,1
    8020d86a:	ffffd097          	auipc	ra,0xffffd
    8020d86e:	4ec080e7          	jalr	1260(ra) # 8020ad56 <argaddr>
    return -1;
    8020d872:	57fd                	li	a5,-1
  if(argaddr(1,&rusage)<0){
    8020d874:	08054c63          	bltz	a0,8020d90c <sys_getrusage+0xd0>
  }
  rs = (struct rusage){
    .ru_utime = get_timeval(),
    8020d878:	ffffb097          	auipc	ra,0xffffb
    8020d87c:	044080e7          	jalr	68(ra) # 802088bc <get_timeval>
    8020d880:	fca43023          	sd	a0,-64(s0)
    8020d884:	fcb43423          	sd	a1,-56(s0)
    .ru_stime = get_timeval(),
    8020d888:	ffffb097          	auipc	ra,0xffffb
    8020d88c:	034080e7          	jalr	52(ra) # 802088bc <get_timeval>
    8020d890:	fca43823          	sd	a0,-48(s0)
    8020d894:	fcb43c23          	sd	a1,-40(s0)
  rs = (struct rusage){
    8020d898:	f4043023          	sd	zero,-192(s0)
    8020d89c:	f4043423          	sd	zero,-184(s0)
    8020d8a0:	f4043823          	sd	zero,-176(s0)
    8020d8a4:	f4043c23          	sd	zero,-168(s0)
    8020d8a8:	f6043023          	sd	zero,-160(s0)
    8020d8ac:	f6043423          	sd	zero,-152(s0)
    8020d8b0:	f6043823          	sd	zero,-144(s0)
    8020d8b4:	f6043c23          	sd	zero,-136(s0)
    8020d8b8:	f8043023          	sd	zero,-128(s0)
    8020d8bc:	f8043423          	sd	zero,-120(s0)
    8020d8c0:	f8043823          	sd	zero,-112(s0)
    8020d8c4:	f8043c23          	sd	zero,-104(s0)
    8020d8c8:	fa043023          	sd	zero,-96(s0)
    8020d8cc:	fa043423          	sd	zero,-88(s0)
    8020d8d0:	fc043783          	ld	a5,-64(s0)
    8020d8d4:	f2f43023          	sd	a5,-224(s0)
    8020d8d8:	fc843783          	ld	a5,-56(s0)
    8020d8dc:	f2f43423          	sd	a5,-216(s0)
    8020d8e0:	f2a43823          	sd	a0,-208(s0)
    8020d8e4:	f2b43c23          	sd	a1,-200(s0)
  };
  switch(who){
    8020d8e8:	fbc42703          	lw	a4,-68(s0)
    8020d8ec:	4785                	li	a5,1
    8020d8ee:	02e7f563          	bgeu	a5,a4,8020d918 <sys_getrusage+0xdc>
			rs.ru_nivcsw = p->ivswtch;
      break;
    default:
      break;
  }
  if(either_copyout(1,rusage,&rs,sizeof(rs))<0){
    8020d8f2:	09000693          	li	a3,144
    8020d8f6:	f2040613          	addi	a2,s0,-224
    8020d8fa:	fb043583          	ld	a1,-80(s0)
    8020d8fe:	4505                	li	a0,1
    8020d900:	ffffc097          	auipc	ra,0xffffc
    8020d904:	bc8080e7          	jalr	-1080(ra) # 802094c8 <either_copyout>
    8020d908:	43f55793          	srai	a5,a0,0x3f
    return -1;
  }
  //__debug_info("[sys_getrusage] return 0\n");
  return 0;
}
    8020d90c:	853e                	mv	a0,a5
    8020d90e:	60ee                	ld	ra,216(sp)
    8020d910:	644e                	ld	s0,208(sp)
    8020d912:	64ae                	ld	s1,200(sp)
    8020d914:	612d                	addi	sp,sp,224
    8020d916:	8082                	ret
			rs.ru_nvcsw = p->vswtch;
    8020d918:	1c44a783          	lw	a5,452(s1)
    8020d91c:	faf43023          	sd	a5,-96(s0)
			rs.ru_nivcsw = p->ivswtch;
    8020d920:	1c84a783          	lw	a5,456(s1)
    8020d924:	faf43423          	sd	a5,-88(s0)
      break;
    8020d928:	b7e9                	j	8020d8f2 <sys_getrusage+0xb6>

000000008020d92a <sys_umask>:

uint64
sys_umask(void)
{
    8020d92a:	1101                	addi	sp,sp,-32
    8020d92c:	ec06                	sd	ra,24(sp)
    8020d92e:	e822                	sd	s0,16(sp)
    8020d930:	1000                	addi	s0,sp,32
  int n;
  argint(0, &n);
    8020d932:	fec40593          	addi	a1,s0,-20
    8020d936:	4501                	li	a0,0
    8020d938:	ffffd097          	auipc	ra,0xffffd
    8020d93c:	3fc080e7          	jalr	1020(ra) # 8020ad34 <argint>
  n = n & 0777;
    8020d940:	fec42783          	lw	a5,-20(s0)
    8020d944:	1ff7f793          	andi	a5,a5,511
    8020d948:	fef42623          	sw	a5,-20(s0)
  myproc()->umask = n;
    8020d94c:	ffffc097          	auipc	ra,0xffffc
    8020d950:	1de080e7          	jalr	478(ra) # 80209b2a <myproc>
    8020d954:	fec42783          	lw	a5,-20(s0)
    8020d958:	1cf52023          	sw	a5,448(a0)
  return 0;
}
    8020d95c:	4501                	li	a0,0
    8020d95e:	60e2                	ld	ra,24(sp)
    8020d960:	6442                	ld	s0,16(sp)
    8020d962:	6105                	addi	sp,sp,32
    8020d964:	8082                	ret

000000008020d966 <sys_nanosleep>:

uint64 
sys_nanosleep(void) {
    8020d966:	711d                	addi	sp,sp,-96
    8020d968:	ec86                	sd	ra,88(sp)
    8020d96a:	e8a2                	sd	s0,80(sp)
    8020d96c:	e4a6                	sd	s1,72(sp)
    8020d96e:	e0ca                	sd	s2,64(sp)
    8020d970:	fc4e                	sd	s3,56(sp)
    8020d972:	f852                	sd	s4,48(sp)
    8020d974:	f456                	sd	s5,40(sp)
    8020d976:	1080                	addi	s0,sp,96
	uint64 addr_sec, addr_usec;

	if (argaddr(0, &addr_sec) < 0) 
    8020d978:	fb840593          	addi	a1,s0,-72
    8020d97c:	4501                	li	a0,0
    8020d97e:	ffffd097          	auipc	ra,0xffffd
    8020d982:	3d8080e7          	jalr	984(ra) # 8020ad56 <argaddr>
		return -1;
    8020d986:	57fd                	li	a5,-1
	if (argaddr(0, &addr_sec) < 0) 
    8020d988:	0c054563          	bltz	a0,8020da52 <sys_nanosleep+0xec>
	if (argaddr(1, &addr_usec) < 0) 
    8020d98c:	fb040593          	addi	a1,s0,-80
    8020d990:	4505                	li	a0,1
    8020d992:	ffffd097          	auipc	ra,0xffffd
    8020d996:	3c4080e7          	jalr	964(ra) # 8020ad56 <argaddr>
		return -1;
    8020d99a:	57fd                	li	a5,-1
	if (argaddr(1, &addr_usec) < 0) 
    8020d99c:	0a054b63          	bltz	a0,8020da52 <sys_nanosleep+0xec>

	struct proc *p = myproc();
    8020d9a0:	ffffc097          	auipc	ra,0xffffc
    8020d9a4:	18a080e7          	jalr	394(ra) # 80209b2a <myproc>
    8020d9a8:	89aa                	mv	s3,a0
	uint64 sec, usec;
	if (either_copyin(1, (char*)&sec, addr_sec, sizeof(sec)) < 0) 
    8020d9aa:	46a1                	li	a3,8
    8020d9ac:	fb843603          	ld	a2,-72(s0)
    8020d9b0:	fa840593          	addi	a1,s0,-88
    8020d9b4:	4505                	li	a0,1
    8020d9b6:	ffffc097          	auipc	ra,0xffffc
    8020d9ba:	b68080e7          	jalr	-1176(ra) # 8020951e <either_copyin>
		return -1;
    8020d9be:	57fd                	li	a5,-1
	if (either_copyin(1, (char*)&sec, addr_sec, sizeof(sec)) < 0) 
    8020d9c0:	08054963          	bltz	a0,8020da52 <sys_nanosleep+0xec>
	if (either_copyin(1, (char*)&usec, addr_usec, sizeof(usec)) < 0) 
    8020d9c4:	46a1                	li	a3,8
    8020d9c6:	fb043603          	ld	a2,-80(s0)
    8020d9ca:	fa040593          	addi	a1,s0,-96
    8020d9ce:	4505                	li	a0,1
    8020d9d0:	ffffc097          	auipc	ra,0xffffc
    8020d9d4:	b4e080e7          	jalr	-1202(ra) # 8020951e <either_copyin>
    8020d9d8:	0a054063          	bltz	a0,8020da78 <sys_nanosleep+0x112>
		return -1;
	int n = sec * 20 + usec / 50000000;
    8020d9dc:	fa843783          	ld	a5,-88(s0)
    8020d9e0:	0027949b          	slliw	s1,a5,0x2
    8020d9e4:	9cbd                	addw	s1,s1,a5
    8020d9e6:	0024949b          	slliw	s1,s1,0x2
    8020d9ea:	fa043783          	ld	a5,-96(s0)
    8020d9ee:	02faf737          	lui	a4,0x2faf
    8020d9f2:	08070713          	addi	a4,a4,128 # 2faf080 <_entry-0x7d250f80>
    8020d9f6:	02e7d7b3          	divu	a5,a5,a4
    8020d9fa:	9cbd                	addw	s1,s1,a5

	int mask = p->tmask;
	if (mask) {
    8020d9fc:	1149a783          	lw	a5,276(s3)
    8020da00:	e3bd                	bnez	a5,8020da66 <sys_nanosleep+0x100>
		printf(") ...\n");
	}
	acquire(&p->lock);
    8020da02:	00898a13          	addi	s4,s3,8
    8020da06:	8552                	mv	a0,s4
    8020da08:	ffff9097          	auipc	ra,0xffff9
    8020da0c:	166080e7          	jalr	358(ra) # 80206b6e <acquire>
	uint64 tick0 = ticks;
    8020da10:	00561a97          	auipc	s5,0x561
    8020da14:	8c8aea83          	lwu	s5,-1848(s5) # 8076e2d8 <ticks>
	while (ticks - tick0 < n / 10) {
    8020da18:	47a9                	li	a5,10
    8020da1a:	02f4c4bb          	divw	s1,s1,a5
    8020da1e:	c485                	beqz	s1,8020da46 <sys_nanosleep+0xe0>
		if (p->killed) {
			return -1;
		}
		sleep(&ticks, &p->lock);
    8020da20:	00561917          	auipc	s2,0x561
    8020da24:	8b890913          	addi	s2,s2,-1864 # 8076e2d8 <ticks>
		if (p->killed) {
    8020da28:	0389a783          	lw	a5,56(s3)
    8020da2c:	eba1                	bnez	a5,8020da7c <sys_nanosleep+0x116>
		sleep(&ticks, &p->lock);
    8020da2e:	85d2                	mv	a1,s4
    8020da30:	854a                	mv	a0,s2
    8020da32:	ffff4097          	auipc	ra,0xffff4
    8020da36:	1a4080e7          	jalr	420(ra) # 80201bd6 <sleep>
	while (ticks - tick0 < n / 10) {
    8020da3a:	00096783          	lwu	a5,0(s2)
    8020da3e:	415787b3          	sub	a5,a5,s5
    8020da42:	fe97e3e3          	bltu	a5,s1,8020da28 <sys_nanosleep+0xc2>
	}
	release(&p->lock);
    8020da46:	8552                	mv	a0,s4
    8020da48:	ffff9097          	auipc	ra,0xffff9
    8020da4c:	17a080e7          	jalr	378(ra) # 80206bc2 <release>

	return 0;
    8020da50:	4781                	li	a5,0
}
    8020da52:	853e                	mv	a0,a5
    8020da54:	60e6                	ld	ra,88(sp)
    8020da56:	6446                	ld	s0,80(sp)
    8020da58:	64a6                	ld	s1,72(sp)
    8020da5a:	6906                	ld	s2,64(sp)
    8020da5c:	79e2                	ld	s3,56(sp)
    8020da5e:	7a42                	ld	s4,48(sp)
    8020da60:	7aa2                	ld	s5,40(sp)
    8020da62:	6125                	addi	sp,sp,96
    8020da64:	8082                	ret
		printf(") ...\n");
    8020da66:	00005517          	auipc	a0,0x5
    8020da6a:	35a50513          	addi	a0,a0,858 # 80212dc0 <UNAME_VERSION+0x2d0>
    8020da6e:	ffff9097          	auipc	ra,0xffff9
    8020da72:	4aa080e7          	jalr	1194(ra) # 80206f18 <printf>
    8020da76:	b771                	j	8020da02 <sys_nanosleep+0x9c>
		return -1;
    8020da78:	57fd                	li	a5,-1
    8020da7a:	bfe1                	j	8020da52 <sys_nanosleep+0xec>
			return -1;
    8020da7c:	57fd                	li	a5,-1
    8020da7e:	bfd1                	j	8020da52 <sys_nanosleep+0xec>

000000008020da80 <logbufinit>:

char syslogbuf[1024];
int logbuflen = 0;

void
logbufinit(){
    8020da80:	1101                	addi	sp,sp,-32
    8020da82:	ec06                	sd	ra,24(sp)
    8020da84:	e822                	sd	s0,16(sp)
    8020da86:	e426                	sd	s1,8(sp)
    8020da88:	e04a                	sd	s2,0(sp)
    8020da8a:	1000                	addi	s0,sp,32
  logbuflen = 0;
    8020da8c:	00561497          	auipc	s1,0x561
    8020da90:	f4448493          	addi	s1,s1,-188 # 8076e9d0 <logbuflen>
    8020da94:	0004a023          	sw	zero,0(s1)
  strncpy(syslogbuf,
    8020da98:	00561917          	auipc	s2,0x561
    8020da9c:	b3890913          	addi	s2,s2,-1224 # 8076e5d0 <syslogbuf>
    8020daa0:	40000613          	li	a2,1024
    8020daa4:	00005597          	auipc	a1,0x5
    8020daa8:	32458593          	addi	a1,a1,804 # 80212dc8 <UNAME_VERSION+0x2d8>
    8020daac:	854a                	mv	a0,s2
    8020daae:	ffff3097          	auipc	ra,0xffff3
    8020dab2:	3de080e7          	jalr	990(ra) # 80200e8c <strncpy>
  	"[log]init done\n",
  	1024);
  logbuflen+=strlen(syslogbuf);
    8020dab6:	854a                	mv	a0,s2
    8020dab8:	ffff3097          	auipc	ra,0xffff3
    8020dabc:	444080e7          	jalr	1092(ra) # 80200efc <strlen>
    8020dac0:	409c                	lw	a5,0(s1)
    8020dac2:	9fa9                	addw	a5,a5,a0
    8020dac4:	c09c                	sw	a5,0(s1)
}
    8020dac6:	60e2                	ld	ra,24(sp)
    8020dac8:	6442                	ld	s0,16(sp)
    8020daca:	64a2                	ld	s1,8(sp)
    8020dacc:	6902                	ld	s2,0(sp)
    8020dace:	6105                	addi	sp,sp,32
    8020dad0:	8082                	ret

000000008020dad2 <sys_syslog>:

uint64
sys_syslog(){
    8020dad2:	7179                	addi	sp,sp,-48
    8020dad4:	f406                	sd	ra,40(sp)
    8020dad6:	f022                	sd	s0,32(sp)
    8020dad8:	1800                	addi	s0,sp,48
  int type;
  uint64 bufp;
  int len;
  if(argint(0,&type)<0){
    8020dada:	fec40593          	addi	a1,s0,-20
    8020dade:	4501                	li	a0,0
    8020dae0:	ffffd097          	auipc	ra,0xffffd
    8020dae4:	254080e7          	jalr	596(ra) # 8020ad34 <argint>
    return -1;
    8020dae8:	57fd                	li	a5,-1
  if(argint(0,&type)<0){
    8020daea:	02054e63          	bltz	a0,8020db26 <sys_syslog+0x54>
  }
  if(argaddr(1,&bufp)<0){
    8020daee:	fe040593          	addi	a1,s0,-32
    8020daf2:	4505                	li	a0,1
    8020daf4:	ffffd097          	auipc	ra,0xffffd
    8020daf8:	262080e7          	jalr	610(ra) # 8020ad56 <argaddr>
    return -1;
    8020dafc:	57fd                	li	a5,-1
  if(argaddr(1,&bufp)<0){
    8020dafe:	02054463          	bltz	a0,8020db26 <sys_syslog+0x54>
  }
  if(argint(2,&len)<0){
    8020db02:	fdc40593          	addi	a1,s0,-36
    8020db06:	4509                	li	a0,2
    8020db08:	ffffd097          	auipc	ra,0xffffd
    8020db0c:	22c080e7          	jalr	556(ra) # 8020ad34 <argint>
    8020db10:	04054663          	bltz	a0,8020db5c <sys_syslog+0x8a>
    return -1;
  }
  switch(type){
    8020db14:	fec42783          	lw	a5,-20(s0)
    8020db18:	470d                	li	a4,3
    8020db1a:	00e78b63          	beq	a5,a4,8020db30 <sys_syslog+0x5e>
      if(either_copyout(1,bufp,syslogbuf,logbuflen)<0){
        return -1;
      }
      return logbuflen;
    }
    case SYSLOG_ACTION_SIZE_BUFFER: return sizeof(syslogbuf);
    8020db1e:	17d9                	addi	a5,a5,-10
    8020db20:	0017b793          	seqz	a5,a5
    8020db24:	07aa                	slli	a5,a5,0xa
  }
  //printf("[syslog] type:%d bufp:%p len:%p\n",type,bufp,len);
  return 0;
}
    8020db26:	853e                	mv	a0,a5
    8020db28:	70a2                	ld	ra,40(sp)
    8020db2a:	7402                	ld	s0,32(sp)
    8020db2c:	6145                	addi	sp,sp,48
    8020db2e:	8082                	ret
      if(either_copyout(1,bufp,syslogbuf,logbuflen)<0){
    8020db30:	00561697          	auipc	a3,0x561
    8020db34:	ea06a683          	lw	a3,-352(a3) # 8076e9d0 <logbuflen>
    8020db38:	00561617          	auipc	a2,0x561
    8020db3c:	a9860613          	addi	a2,a2,-1384 # 8076e5d0 <syslogbuf>
    8020db40:	fe043583          	ld	a1,-32(s0)
    8020db44:	4505                	li	a0,1
    8020db46:	ffffc097          	auipc	ra,0xffffc
    8020db4a:	982080e7          	jalr	-1662(ra) # 802094c8 <either_copyout>
    8020db4e:	00054963          	bltz	a0,8020db60 <sys_syslog+0x8e>
      return logbuflen;
    8020db52:	00561797          	auipc	a5,0x561
    8020db56:	e7e7a783          	lw	a5,-386(a5) # 8076e9d0 <logbuflen>
    8020db5a:	b7f1                	j	8020db26 <sys_syslog+0x54>
    return -1;
    8020db5c:	57fd                	li	a5,-1
    8020db5e:	b7e1                	j	8020db26 <sys_syslog+0x54>
        return -1;
    8020db60:	57fd                	li	a5,-1
    8020db62:	b7d1                	j	8020db26 <sys_syslog+0x54>

000000008020db64 <sys_sysinfo>:

uint64
sys_sysinfo(void)
{
    8020db64:	7175                	addi	sp,sp,-144
    8020db66:	e506                	sd	ra,136(sp)
    8020db68:	e122                	sd	s0,128(sp)
    8020db6a:	0900                	addi	s0,sp,144
	uint64 addr;
	// struct proc *p = myproc();

	if (argaddr(0, &addr) < 0) {
    8020db6c:	fe840593          	addi	a1,s0,-24
    8020db70:	4501                	li	a0,0
    8020db72:	ffffd097          	auipc	ra,0xffffd
    8020db76:	1e4080e7          	jalr	484(ra) # 8020ad56 <argaddr>
    8020db7a:	87aa                	mv	a5,a0
		return -1;
    8020db7c:	557d                	li	a0,-1
	if (argaddr(0, &addr) < 0) {
    8020db7e:	0607c963          	bltz	a5,8020dbf0 <sys_sysinfo+0x8c>
	}

	struct sysinfo info;
	memset(&info, 0, sizeof(info));
    8020db82:	07000613          	li	a2,112
    8020db86:	4581                	li	a1,0
    8020db88:	f7840513          	addi	a0,s0,-136
    8020db8c:	ffff3097          	auipc	ra,0xffff3
    8020db90:	1e8080e7          	jalr	488(ra) # 80200d74 <memset>
    8020db94:	c01027f3          	rdtime	a5

	info.uptime = r_time() / CLK_FREQ;
    8020db98:	00bec737          	lui	a4,0xbec
    8020db9c:	c2070713          	addi	a4,a4,-992 # bebc20 <_entry-0x7f6143e0>
    8020dba0:	02e7d7b3          	divu	a5,a5,a4
    8020dba4:	f6f43c23          	sd	a5,-136(s0)
	info.totalram = PHYSTOP - RUSTSBI_BASE;
    8020dba8:	080007b7          	lui	a5,0x8000
    8020dbac:	f8f43c23          	sd	a5,-104(s0)
	info.freeram = idlepages() << PGSHIFT;
    8020dbb0:	ffffa097          	auipc	ra,0xffffa
    8020dbb4:	eb8080e7          	jalr	-328(ra) # 80207a68 <idlepages>
    8020dbb8:	0532                	slli	a0,a0,0xc
    8020dbba:	faa43023          	sd	a0,-96(s0)
	info.bufferram = BSIZE * BNUM;
    8020dbbe:	001397b7          	lui	a5,0x139
    8020dbc2:	80078793          	addi	a5,a5,-2048 # 138800 <_entry-0x800c7800>
    8020dbc6:	faf43823          	sd	a5,-80(s0)
	info.procs = NPROC;
    8020dbca:	06400793          	li	a5,100
    8020dbce:	fcf41423          	sh	a5,-56(s0)
	info.mem_unit = PGSIZE;
    8020dbd2:	6785                	lui	a5,0x1
    8020dbd4:	fef42023          	sw	a5,-32(s0)

	// if (copyout(p->pagetable, addr, (char *)&info, sizeof(info)) < 0) {
	if (either_copyout(1,addr, (char *)&info, sizeof(info)) < 0) {
    8020dbd8:	07000693          	li	a3,112
    8020dbdc:	f7840613          	addi	a2,s0,-136
    8020dbe0:	fe843583          	ld	a1,-24(s0)
    8020dbe4:	4505                	li	a0,1
    8020dbe6:	ffffc097          	auipc	ra,0xffffc
    8020dbea:	8e2080e7          	jalr	-1822(ra) # 802094c8 <either_copyout>
    8020dbee:	957d                	srai	a0,a0,0x3f
		return -1;
	}

	return 0;
}
    8020dbf0:	60aa                	ld	ra,136(sp)
    8020dbf2:	640a                	ld	s0,128(sp)
    8020dbf4:	6149                	addi	sp,sp,144
    8020dbf6:	8082                	ret

000000008020dbf8 <sys_ppoll>:
#include "include/pm.h"
#include "include/poll.h"
#include "include/signal.h"

uint64
sys_ppoll(void){
    8020dbf8:	715d                	addi	sp,sp,-80
    8020dbfa:	e486                	sd	ra,72(sp)
    8020dbfc:	e0a2                	sd	s0,64(sp)
    8020dbfe:	fc26                	sd	s1,56(sp)
    8020dc00:	f84a                	sd	s2,48(sp)
    8020dc02:	f44e                	sd	s3,40(sp)
    8020dc04:	0880                	addi	s0,sp,80
  uint64 tm_addr;
  struct timespec tmo_p;
  uint64 sm_addr;
  __sigset_t sigmask;
  
  if(argint(1,&nfds) < 0)
    8020dc06:	fcc40593          	addi	a1,s0,-52
    8020dc0a:	4505                	li	a0,1
    8020dc0c:	ffffd097          	auipc	ra,0xffffd
    8020dc10:	128080e7          	jalr	296(ra) # 8020ad34 <argint>
  {
    return -1;
    8020dc14:	54fd                	li	s1,-1
  if(argint(1,&nfds) < 0)
    8020dc16:	08054a63          	bltz	a0,8020dcaa <sys_ppoll+0xb2>
  }
  
  fds = (struct pollfd *)kmalloc(sizeof(struct pollfd) * nfds);
    8020dc1a:	fcc42503          	lw	a0,-52(s0)
    8020dc1e:	0035151b          	slliw	a0,a0,0x3
    8020dc22:	ffffa097          	auipc	ra,0xffffa
    8020dc26:	fa2080e7          	jalr	-94(ra) # 80207bc4 <kmalloc>
    8020dc2a:	892a                	mv	s2,a0
  
  if((fds_addr = argstruct(0, fds, nfds * sizeof(struct pollfd))) == NULL)
    8020dc2c:	fcc42603          	lw	a2,-52(s0)
    8020dc30:	0036161b          	slliw	a2,a2,0x3
    8020dc34:	85aa                	mv	a1,a0
    8020dc36:	4501                	li	a0,0
    8020dc38:	ffffd097          	auipc	ra,0xffffd
    8020dc3c:	24a080e7          	jalr	586(ra) # 8020ae82 <argstruct>
    8020dc40:	89aa                	mv	s3,a0
    8020dc42:	c525                	beqz	a0,8020dcaa <sys_ppoll+0xb2>
  {
    return -1;
  }
  
  tm_addr = argstruct(2, &tmo_p, sizeof(struct timespec));
    8020dc44:	4641                	li	a2,16
    8020dc46:	fb840593          	addi	a1,s0,-72
    8020dc4a:	4509                	li	a0,2
    8020dc4c:	ffffd097          	auipc	ra,0xffffd
    8020dc50:	236080e7          	jalr	566(ra) # 8020ae82 <argstruct>
    8020dc54:	84aa                	mv	s1,a0
  sm_addr = argstruct(3, &sigmask, sizeof(__sigset_t));
    8020dc56:	4621                	li	a2,8
    8020dc58:	fb040593          	addi	a1,s0,-80
    8020dc5c:	450d                	li	a0,3
    8020dc5e:	ffffd097          	auipc	ra,0xffffd
    8020dc62:	224080e7          	jalr	548(ra) # 8020ae82 <argstruct>
  
  uint64 ret = ppoll(fds, nfds,
    8020dc66:	009034b3          	snez	s1,s1
    8020dc6a:	409004b3          	neg	s1,s1
    8020dc6e:	00a03533          	snez	a0,a0
    8020dc72:	40a00533          	neg	a0,a0
    8020dc76:	fb040693          	addi	a3,s0,-80
    8020dc7a:	8ee9                	and	a3,a3,a0
    8020dc7c:	fb840613          	addi	a2,s0,-72
    8020dc80:	8e65                	and	a2,a2,s1
    8020dc82:	fcc42583          	lw	a1,-52(s0)
    8020dc86:	854a                	mv	a0,s2
    8020dc88:	ffffc097          	auipc	ra,0xffffc
    8020dc8c:	966080e7          	jalr	-1690(ra) # 802095ee <ppoll>
    8020dc90:	84aa                	mv	s1,a0
  			tm_addr?&tmo_p:NULL, 
  			sm_addr?&sigmask:NULL);
  
  if(either_copyout(1, fds_addr, fds, sizeof(struct pollfd) * nfds) < 0)
    8020dc92:	fcc42683          	lw	a3,-52(s0)
    8020dc96:	068e                	slli	a3,a3,0x3
    8020dc98:	864a                	mv	a2,s2
    8020dc9a:	85ce                	mv	a1,s3
    8020dc9c:	4505                	li	a0,1
    8020dc9e:	ffffc097          	auipc	ra,0xffffc
    8020dca2:	82a080e7          	jalr	-2006(ra) # 802094c8 <either_copyout>
    8020dca6:	00054a63          	bltz	a0,8020dcba <sys_ppoll+0xc2>
  {
    return -1;
  }
  
  return ret;
}
    8020dcaa:	8526                	mv	a0,s1
    8020dcac:	60a6                	ld	ra,72(sp)
    8020dcae:	6406                	ld	s0,64(sp)
    8020dcb0:	74e2                	ld	s1,56(sp)
    8020dcb2:	7942                	ld	s2,48(sp)
    8020dcb4:	79a2                	ld	s3,40(sp)
    8020dcb6:	6161                	addi	sp,sp,80
    8020dcb8:	8082                	ret
    return -1;
    8020dcba:	54fd                	li	s1,-1
    8020dcbc:	b7fd                	j	8020dcaa <sys_ppoll+0xb2>

000000008020dcbe <sys_pselect6>:

uint64
sys_pselect6()
{
    8020dcbe:	7141                	addi	sp,sp,-496
    8020dcc0:	f786                	sd	ra,488(sp)
    8020dcc2:	f3a2                	sd	s0,480(sp)
    8020dcc4:	efa6                	sd	s1,472(sp)
    8020dcc6:	ebca                	sd	s2,464(sp)
    8020dcc8:	1b80                	addi	s0,sp,496
  	int nfds;
	uint64 urfds, uwfds, uexfds;
	uint64 utoaddr, usmaddr;
	
	argint(0, &nfds);
    8020dcca:	fdc40593          	addi	a1,s0,-36
    8020dcce:	4501                	li	a0,0
    8020dcd0:	ffffd097          	auipc	ra,0xffffd
    8020dcd4:	064080e7          	jalr	100(ra) # 8020ad34 <argint>
	argaddr(1, &urfds);
    8020dcd8:	fd040593          	addi	a1,s0,-48
    8020dcdc:	4505                	li	a0,1
    8020dcde:	ffffd097          	auipc	ra,0xffffd
    8020dce2:	078080e7          	jalr	120(ra) # 8020ad56 <argaddr>
	argaddr(2, &uwfds);
    8020dce6:	fc840593          	addi	a1,s0,-56
    8020dcea:	4509                	li	a0,2
    8020dcec:	ffffd097          	auipc	ra,0xffffd
    8020dcf0:	06a080e7          	jalr	106(ra) # 8020ad56 <argaddr>
	argaddr(3, &uexfds);
    8020dcf4:	fc040593          	addi	a1,s0,-64
    8020dcf8:	450d                	li	a0,3
    8020dcfa:	ffffd097          	auipc	ra,0xffffd
    8020dcfe:	05c080e7          	jalr	92(ra) # 8020ad56 <argaddr>
	argaddr(4, &utoaddr);
    8020dd02:	fb840593          	addi	a1,s0,-72
    8020dd06:	4511                	li	a0,4
    8020dd08:	ffffd097          	auipc	ra,0xffffd
    8020dd0c:	04e080e7          	jalr	78(ra) # 8020ad56 <argaddr>
	argaddr(5, &usmaddr);
    8020dd10:	fb040593          	addi	a1,s0,-80
    8020dd14:	4515                	li	a0,5
    8020dd16:	ffffd097          	auipc	ra,0xffffd
    8020dd1a:	040080e7          	jalr	64(ra) # 8020ad56 <argaddr>
	
	if (nfds <= 0 || nfds > FDSET_SIZE)
    8020dd1e:	fdc42783          	lw	a5,-36(s0)
    8020dd22:	37fd                	addiw	a5,a5,-1
    8020dd24:	3ff00713          	li	a4,1023
		return -EINVAL;
    8020dd28:	5529                	li	a0,-22
	if (nfds <= 0 || nfds > FDSET_SIZE)
    8020dd2a:	0cf76b63          	bltu	a4,a5,8020de00 <sys_pselect6+0x142>
	if (!(urfds || uwfds || uexfds))
    8020dd2e:	fd043603          	ld	a2,-48(s0)
    8020dd32:	ee69                	bnez	a2,8020de0c <sys_pselect6+0x14e>
    8020dd34:	fc843783          	ld	a5,-56(s0)
    8020dd38:	fc043703          	ld	a4,-64(s0)
    8020dd3c:	8fd9                	or	a5,a5,a4
    8020dd3e:	c3e9                	beqz	a5,8020de00 <sys_pselect6+0x142>
	struct timespec timeout;
	__sigset_t sigmask;

	if (urfds && either_copyin(1, (char *)&rfds, urfds, sizeof(struct fdset)) < 0)
		return -EFAULT;
	if (uwfds && either_copyin(1, (char *)&wfds, uwfds, sizeof(struct fdset)) < 0)
    8020dd40:	fc843603          	ld	a2,-56(s0)
    8020dd44:	e26d                	bnez	a2,8020de26 <sys_pselect6+0x168>
		return -EFAULT;
	if (uexfds && either_copyin(1, (char *)&exfds, uexfds, sizeof(struct fdset)) < 0)
    8020dd46:	fc043603          	ld	a2,-64(s0)
    8020dd4a:	ea7d                	bnez	a2,8020de40 <sys_pselect6+0x182>
		return -EFAULT;
	if (utoaddr && either_copyin(1, (char *)&timeout, utoaddr, sizeof(timeout)) < 0)
    8020dd4c:	fb843603          	ld	a2,-72(s0)
    8020dd50:	10061563          	bnez	a2,8020de5a <sys_pselect6+0x19c>
		return -EFAULT;
	if (usmaddr && either_copyin(1, (char *)&sigmask, usmaddr, sizeof(sigmask)) < 0)
    8020dd54:	fb043603          	ld	a2,-80(s0)
    8020dd58:	ca19                	beqz	a2,8020dd6e <sys_pselect6+0xb0>
    8020dd5a:	46a1                	li	a3,8
    8020dd5c:	e1840593          	addi	a1,s0,-488
    8020dd60:	4505                	li	a0,1
    8020dd62:	ffffb097          	auipc	ra,0xffffb
    8020dd66:	7bc080e7          	jalr	1980(ra) # 8020951e <either_copyin>
    8020dd6a:	16054663          	bltz	a0,8020ded6 <sys_pselect6+0x218>
		return -EFAULT;

	struct proc *p = myproc();
    8020dd6e:	ffffc097          	auipc	ra,0xffffc
    8020dd72:	dbc080e7          	jalr	-580(ra) # 80209b2a <myproc>
    8020dd76:	892a                	mv	s2,a0
	if (p->tmask) {
    8020dd78:	11452783          	lw	a5,276(a0)
    8020dd7c:	ebfd                	bnez	a5,8020de72 <sys_pselect6+0x1b4>
		printf(") ...\n");
	}

	int ret = pselect(nfds,
    8020dd7e:	fd043583          	ld	a1,-48(s0)
    8020dd82:	00b035b3          	snez	a1,a1
    8020dd86:	40b005b3          	neg	a1,a1
    8020dd8a:	fc843603          	ld	a2,-56(s0)
    8020dd8e:	00c03633          	snez	a2,a2
    8020dd92:	40c00633          	neg	a2,a2
    8020dd96:	fc043683          	ld	a3,-64(s0)
    8020dd9a:	00d036b3          	snez	a3,a3
    8020dd9e:	40d006b3          	neg	a3,a3
    8020dda2:	fb843703          	ld	a4,-72(s0)
    8020dda6:	00e03733          	snez	a4,a4
    8020ddaa:	40e00733          	neg	a4,a4
    8020ddae:	fb043783          	ld	a5,-80(s0)
    8020ddb2:	00f037b3          	snez	a5,a5
    8020ddb6:	40f007b3          	neg	a5,a5
    8020ddba:	e1840513          	addi	a0,s0,-488
    8020ddbe:	8fe9                	and	a5,a5,a0
    8020ddc0:	e2040513          	addi	a0,s0,-480
    8020ddc4:	8f69                	and	a4,a4,a0
    8020ddc6:	e3040513          	addi	a0,s0,-464
    8020ddca:	8ee9                	and	a3,a3,a0
    8020ddcc:	eb040513          	addi	a0,s0,-336
    8020ddd0:	8e69                	and	a2,a2,a0
    8020ddd2:	f3040513          	addi	a0,s0,-208
    8020ddd6:	8de9                	and	a1,a1,a0
    8020ddd8:	fdc42503          	lw	a0,-36(s0)
    8020dddc:	ffffc097          	auipc	ra,0xffffc
    8020dde0:	844080e7          	jalr	-1980(ra) # 80209620 <pselect>
    8020dde4:	84aa                	mv	s1,a0
				uexfds ? &exfds: NULL,
				utoaddr ? &timeout : NULL,
				usmaddr ? &sigmask : NULL
			);

	if (urfds)
    8020dde6:	fd043583          	ld	a1,-48(s0)
    8020ddea:	edc9                	bnez	a1,8020de84 <sys_pselect6+0x1c6>
		either_copyout(1, urfds, (char *)&rfds, sizeof(struct fdset));
	if (uwfds)
    8020ddec:	fc843583          	ld	a1,-56(s0)
    8020ddf0:	e5c5                	bnez	a1,8020de98 <sys_pselect6+0x1da>
		either_copyout(1, uwfds, (char *)&wfds, sizeof(struct fdset));
	if (uexfds)
    8020ddf2:	fc043583          	ld	a1,-64(s0)
    8020ddf6:	e9dd                	bnez	a1,8020deac <sys_pselect6+0x1ee>
		either_copyout(1, uexfds, (char *)&exfds, sizeof(struct fdset));

	if (p->tmask) {
    8020ddf8:	11492783          	lw	a5,276(s2)
    8020ddfc:	e3f1                	bnez	a5,8020dec0 <sys_pselect6+0x202>
		printf("pid %d: return from pselect(", p->pid);
	}
	return ret;
    8020ddfe:	8526                	mv	a0,s1
  return 0;
}
    8020de00:	70be                	ld	ra,488(sp)
    8020de02:	741e                	ld	s0,480(sp)
    8020de04:	64fe                	ld	s1,472(sp)
    8020de06:	695e                	ld	s2,464(sp)
    8020de08:	617d                	addi	sp,sp,496
    8020de0a:	8082                	ret
	if (urfds && either_copyin(1, (char *)&rfds, urfds, sizeof(struct fdset)) < 0)
    8020de0c:	08000693          	li	a3,128
    8020de10:	f3040593          	addi	a1,s0,-208
    8020de14:	4505                	li	a0,1
    8020de16:	ffffb097          	auipc	ra,0xffffb
    8020de1a:	708080e7          	jalr	1800(ra) # 8020951e <either_copyin>
    8020de1e:	f20551e3          	bgez	a0,8020dd40 <sys_pselect6+0x82>
		return -EFAULT;
    8020de22:	5549                	li	a0,-14
    8020de24:	bff1                	j	8020de00 <sys_pselect6+0x142>
	if (uwfds && either_copyin(1, (char *)&wfds, uwfds, sizeof(struct fdset)) < 0)
    8020de26:	08000693          	li	a3,128
    8020de2a:	eb040593          	addi	a1,s0,-336
    8020de2e:	4505                	li	a0,1
    8020de30:	ffffb097          	auipc	ra,0xffffb
    8020de34:	6ee080e7          	jalr	1774(ra) # 8020951e <either_copyin>
    8020de38:	f00557e3          	bgez	a0,8020dd46 <sys_pselect6+0x88>
		return -EFAULT;
    8020de3c:	5549                	li	a0,-14
    8020de3e:	b7c9                	j	8020de00 <sys_pselect6+0x142>
	if (uexfds && either_copyin(1, (char *)&exfds, uexfds, sizeof(struct fdset)) < 0)
    8020de40:	08000693          	li	a3,128
    8020de44:	e3040593          	addi	a1,s0,-464
    8020de48:	4505                	li	a0,1
    8020de4a:	ffffb097          	auipc	ra,0xffffb
    8020de4e:	6d4080e7          	jalr	1748(ra) # 8020951e <either_copyin>
    8020de52:	ee055de3          	bgez	a0,8020dd4c <sys_pselect6+0x8e>
		return -EFAULT;
    8020de56:	5549                	li	a0,-14
    8020de58:	b765                	j	8020de00 <sys_pselect6+0x142>
	if (utoaddr && either_copyin(1, (char *)&timeout, utoaddr, sizeof(timeout)) < 0)
    8020de5a:	46c1                	li	a3,16
    8020de5c:	e2040593          	addi	a1,s0,-480
    8020de60:	4505                	li	a0,1
    8020de62:	ffffb097          	auipc	ra,0xffffb
    8020de66:	6bc080e7          	jalr	1724(ra) # 8020951e <either_copyin>
    8020de6a:	ee0555e3          	bgez	a0,8020dd54 <sys_pselect6+0x96>
		return -EFAULT;
    8020de6e:	5549                	li	a0,-14
    8020de70:	bf41                	j	8020de00 <sys_pselect6+0x142>
		printf(") ...\n");
    8020de72:	00005517          	auipc	a0,0x5
    8020de76:	f4e50513          	addi	a0,a0,-178 # 80212dc0 <UNAME_VERSION+0x2d0>
    8020de7a:	ffff9097          	auipc	ra,0xffff9
    8020de7e:	09e080e7          	jalr	158(ra) # 80206f18 <printf>
    8020de82:	bdf5                	j	8020dd7e <sys_pselect6+0xc0>
		either_copyout(1, urfds, (char *)&rfds, sizeof(struct fdset));
    8020de84:	08000693          	li	a3,128
    8020de88:	f3040613          	addi	a2,s0,-208
    8020de8c:	4505                	li	a0,1
    8020de8e:	ffffb097          	auipc	ra,0xffffb
    8020de92:	63a080e7          	jalr	1594(ra) # 802094c8 <either_copyout>
    8020de96:	bf99                	j	8020ddec <sys_pselect6+0x12e>
		either_copyout(1, uwfds, (char *)&wfds, sizeof(struct fdset));
    8020de98:	08000693          	li	a3,128
    8020de9c:	eb040613          	addi	a2,s0,-336
    8020dea0:	4505                	li	a0,1
    8020dea2:	ffffb097          	auipc	ra,0xffffb
    8020dea6:	626080e7          	jalr	1574(ra) # 802094c8 <either_copyout>
    8020deaa:	b7a1                	j	8020ddf2 <sys_pselect6+0x134>
		either_copyout(1, uexfds, (char *)&exfds, sizeof(struct fdset));
    8020deac:	08000693          	li	a3,128
    8020deb0:	e3040613          	addi	a2,s0,-464
    8020deb4:	4505                	li	a0,1
    8020deb6:	ffffb097          	auipc	ra,0xffffb
    8020deba:	612080e7          	jalr	1554(ra) # 802094c8 <either_copyout>
    8020debe:	bf2d                	j	8020ddf8 <sys_pselect6+0x13a>
		printf("pid %d: return from pselect(", p->pid);
    8020dec0:	04092583          	lw	a1,64(s2)
    8020dec4:	00005517          	auipc	a0,0x5
    8020dec8:	f1450513          	addi	a0,a0,-236 # 80212dd8 <UNAME_VERSION+0x2e8>
    8020decc:	ffff9097          	auipc	ra,0xffff9
    8020ded0:	04c080e7          	jalr	76(ra) # 80206f18 <printf>
    8020ded4:	b72d                	j	8020ddfe <sys_pselect6+0x140>
		return -EFAULT;
    8020ded6:	5549                	li	a0,-14
    8020ded8:	b725                	j	8020de00 <sys_pselect6+0x142>

000000008020deda <sys_exit_group>:
#include "include/vm.h"
#include "include/uname.h"
#include "include/copy.h"

uint64
sys_exit_group(void){
    8020deda:	1141                	addi	sp,sp,-16
    8020dedc:	e422                	sd	s0,8(sp)
    8020dede:	0800                	addi	s0,sp,16
  //printf("exit group\n");
  return 0;
}
    8020dee0:	4501                	li	a0,0
    8020dee2:	6422                	ld	s0,8(sp)
    8020dee4:	0141                	addi	sp,sp,16
    8020dee6:	8082                	ret

000000008020dee8 <sys_rt_sigreturn>:

uint64
sys_rt_sigreturn(void){
    8020dee8:	1141                	addi	sp,sp,-16
    8020deea:	e406                	sd	ra,8(sp)
    8020deec:	e022                	sd	s0,0(sp)
    8020deee:	0800                	addi	s0,sp,16
  sigreturn();
    8020def0:	ffff9097          	auipc	ra,0xffff9
    8020def4:	be0080e7          	jalr	-1056(ra) # 80206ad0 <sigreturn>
  return 0;
}
    8020def8:	4501                	li	a0,0
    8020defa:	60a2                	ld	ra,8(sp)
    8020defc:	6402                	ld	s0,0(sp)
    8020defe:	0141                	addi	sp,sp,16
    8020df00:	8082                	ret

000000008020df02 <sys_rt_sigprocmask>:

uint64 sys_rt_sigprocmask(void){
    8020df02:	7139                	addi	sp,sp,-64
    8020df04:	fc06                	sd	ra,56(sp)
    8020df06:	f822                	sd	s0,48(sp)
    8020df08:	0080                	addi	s0,sp,64
  int how;
	uint64 uptr_set, uptr_oldset;

	__sigset_t set, oldset;

	argint(0, &how);
    8020df0a:	fec40593          	addi	a1,s0,-20
    8020df0e:	4501                	li	a0,0
    8020df10:	ffffd097          	auipc	ra,0xffffd
    8020df14:	e24080e7          	jalr	-476(ra) # 8020ad34 <argint>
	argaddr(1, &uptr_set);
    8020df18:	fe040593          	addi	a1,s0,-32
    8020df1c:	4505                	li	a0,1
    8020df1e:	ffffd097          	auipc	ra,0xffffd
    8020df22:	e38080e7          	jalr	-456(ra) # 8020ad56 <argaddr>
	argaddr(2, &uptr_oldset);
    8020df26:	fd840593          	addi	a1,s0,-40
    8020df2a:	4509                	li	a0,2
    8020df2c:	ffffd097          	auipc	ra,0xffffd
    8020df30:	e2a080e7          	jalr	-470(ra) # 8020ad56 <argaddr>

	if (uptr_set && either_copyin(1, (char*)&set, uptr_set, SIGSET_LEN * 8) < 0) {
    8020df34:	fe043603          	ld	a2,-32(s0)
    8020df38:	ee05                	bnez	a2,8020df70 <sys_rt_sigprocmask+0x6e>
		return -1;
	}

	if (sigprocmask(how, &set, uptr_oldset ? &oldset : NULL)) {
    8020df3a:	fd843783          	ld	a5,-40(s0)
    8020df3e:	00f037b3          	snez	a5,a5
    8020df42:	40f007b3          	neg	a5,a5
    8020df46:	fc840613          	addi	a2,s0,-56
    8020df4a:	8e7d                	and	a2,a2,a5
    8020df4c:	fd040593          	addi	a1,s0,-48
    8020df50:	fec42503          	lw	a0,-20(s0)
    8020df54:	ffff8097          	auipc	ra,0xffff8
    8020df58:	76c080e7          	jalr	1900(ra) # 802066c0 <sigprocmask>
		return -1;
    8020df5c:	55fd                	li	a1,-1
	if (sigprocmask(how, &set, uptr_oldset ? &oldset : NULL)) {
    8020df5e:	e501                	bnez	a0,8020df66 <sys_rt_sigprocmask+0x64>
	}

	if (uptr_oldset && either_copyout(1, uptr_oldset, (char*)&oldset, SIGSET_LEN * 8) < 0) {
    8020df60:	fd843583          	ld	a1,-40(s0)
    8020df64:	e195                	bnez	a1,8020df88 <sys_rt_sigprocmask+0x86>
		return -1;
	}

	return 0;

}
    8020df66:	852e                	mv	a0,a1
    8020df68:	70e2                	ld	ra,56(sp)
    8020df6a:	7442                	ld	s0,48(sp)
    8020df6c:	6121                	addi	sp,sp,64
    8020df6e:	8082                	ret
	if (uptr_set && either_copyin(1, (char*)&set, uptr_set, SIGSET_LEN * 8) < 0) {
    8020df70:	46a1                	li	a3,8
    8020df72:	fd040593          	addi	a1,s0,-48
    8020df76:	4505                	li	a0,1
    8020df78:	ffffb097          	auipc	ra,0xffffb
    8020df7c:	5a6080e7          	jalr	1446(ra) # 8020951e <either_copyin>
    8020df80:	fa055de3          	bgez	a0,8020df3a <sys_rt_sigprocmask+0x38>
		return -1;
    8020df84:	55fd                	li	a1,-1
    8020df86:	b7c5                	j	8020df66 <sys_rt_sigprocmask+0x64>
	if (uptr_oldset && either_copyout(1, uptr_oldset, (char*)&oldset, SIGSET_LEN * 8) < 0) {
    8020df88:	46a1                	li	a3,8
    8020df8a:	fc840613          	addi	a2,s0,-56
    8020df8e:	4505                	li	a0,1
    8020df90:	ffffb097          	auipc	ra,0xffffb
    8020df94:	538080e7          	jalr	1336(ra) # 802094c8 <either_copyout>
    8020df98:	43f55593          	srai	a1,a0,0x3f
    8020df9c:	b7e9                	j	8020df66 <sys_rt_sigprocmask+0x64>

000000008020df9e <sys_rt_sigaction>:
uint64 sys_rt_sigaction(void) {
    8020df9e:	711d                	addi	sp,sp,-96
    8020dfa0:	ec86                	sd	ra,88(sp)
    8020dfa2:	e8a2                	sd	s0,80(sp)
    8020dfa4:	1080                	addi	s0,sp,96
	int signum;
	uint64 uptr_act;		// struct sigaction const *act
	uint64 uptr_oldact;		// struct sigaction *oldact

	argint(0, &signum);
    8020dfa6:	fec40593          	addi	a1,s0,-20
    8020dfaa:	4501                	li	a0,0
    8020dfac:	ffffd097          	auipc	ra,0xffffd
    8020dfb0:	d88080e7          	jalr	-632(ra) # 8020ad34 <argint>
	argaddr(1, &uptr_act);
    8020dfb4:	fe040593          	addi	a1,s0,-32
    8020dfb8:	4505                	li	a0,1
    8020dfba:	ffffd097          	auipc	ra,0xffffd
    8020dfbe:	d9c080e7          	jalr	-612(ra) # 8020ad56 <argaddr>
	argaddr(2, &uptr_oldact);
    8020dfc2:	fd840593          	addi	a1,s0,-40
    8020dfc6:	4509                	li	a0,2
    8020dfc8:	ffffd097          	auipc	ra,0xffffd
    8020dfcc:	d8e080e7          	jalr	-626(ra) # 8020ad56 <argaddr>
	// copy struct sigaction from user space 
	struct sigaction act;
	struct sigaction oldact;

	//__debug_info("[sigaction]  uptr_act : %p,uptr_oldact : %p\n",uptr_act,uptr_oldact);
	if (uptr_act) {
    8020dfd0:	fe043603          	ld	a2,-32(s0)
    8020dfd4:	e609                	bnez	a2,8020dfde <sys_rt_sigaction+0x40>
			__debug_info("[sigaction] return -1\n");
			return -1;
		}
	}

	if (set_sigaction(
    8020dfd6:	fec42503          	lw	a0,-20(s0)
    8020dfda:	4581                	li	a1,0
    8020dfdc:	a015                	j	8020e000 <sys_rt_sigaction+0x62>
			either_copyin(1, (char*)&(act.__sigaction_handler), uptr_act, sizeof(__sighandler_t)) < 0 
    8020dfde:	46a1                	li	a3,8
    8020dfe0:	fc040593          	addi	a1,s0,-64
    8020dfe4:	4505                	li	a0,1
    8020dfe6:	ffffb097          	auipc	ra,0xffffb
    8020dfea:	538080e7          	jalr	1336(ra) # 8020951e <either_copyin>
		if (
    8020dfee:	02054f63          	bltz	a0,8020e02c <sys_rt_sigaction+0x8e>
	if (set_sigaction(
    8020dff2:	fec42503          	lw	a0,-20(s0)
    8020dff6:	fe043783          	ld	a5,-32(s0)
    8020dffa:	fc040593          	addi	a1,s0,-64
    8020dffe:	c3a9                	beqz	a5,8020e040 <sys_rt_sigaction+0xa2>
    8020e000:	fd843783          	ld	a5,-40(s0)
    8020e004:	00f037b3          	snez	a5,a5
    8020e008:	40f007b3          	neg	a5,a5
    8020e00c:	fa840613          	addi	a2,s0,-88
    8020e010:	8e7d                	and	a2,a2,a5
    8020e012:	ffff8097          	auipc	ra,0xffff8
    8020e016:	628080e7          	jalr	1576(ra) # 8020663a <set_sigaction>
    8020e01a:	04054063          	bltz	a0,8020e05a <sys_rt_sigaction+0xbc>
	) < 0) {
		//__debug_info("[sigaction] return -1\n");
		return -1;
	}

	if (uptr_oldact) {
    8020e01e:	fd843503          	ld	a0,-40(s0)
    8020e022:	e10d                	bnez	a0,8020e044 <sys_rt_sigaction+0xa6>
			return -1;
		}
	}
	//__debug_info("[sigaction] return 0\n");
	return 0;
}
    8020e024:	60e6                	ld	ra,88(sp)
    8020e026:	6446                	ld	s0,80(sp)
    8020e028:	6125                	addi	sp,sp,96
    8020e02a:	8082                	ret
			__debug_info("[sigaction] return -1\n");
    8020e02c:	00005517          	auipc	a0,0x5
    8020e030:	dcc50513          	addi	a0,a0,-564 # 80212df8 <UNAME_VERSION+0x308>
    8020e034:	ffff9097          	auipc	ra,0xffff9
    8020e038:	0aa080e7          	jalr	170(ra) # 802070de <__debug_info>
			return -1;
    8020e03c:	557d                	li	a0,-1
    8020e03e:	b7dd                	j	8020e024 <sys_rt_sigaction+0x86>
	if (set_sigaction(
    8020e040:	4581                	li	a1,0
    8020e042:	bf7d                	j	8020e000 <sys_rt_sigaction+0x62>
			either_copyout(1,uptr_oldact, (char*)&(act.__sigaction_handler), sizeof(__sighandler_t)) < 0 
    8020e044:	46a1                	li	a3,8
    8020e046:	fc040613          	addi	a2,s0,-64
    8020e04a:	85aa                	mv	a1,a0
    8020e04c:	4505                	li	a0,1
    8020e04e:	ffffb097          	auipc	ra,0xffffb
    8020e052:	47a080e7          	jalr	1146(ra) # 802094c8 <either_copyout>
		if (
    8020e056:	957d                	srai	a0,a0,0x3f
    8020e058:	b7f1                	j	8020e024 <sys_rt_sigaction+0x86>
		return -1;
    8020e05a:	557d                	li	a0,-1
    8020e05c:	b7e1                	j	8020e024 <sys_rt_sigaction+0x86>

000000008020e05e <sys_kill>:

uint64 sys_kill(){
    8020e05e:	1101                	addi	sp,sp,-32
    8020e060:	ec06                	sd	ra,24(sp)
    8020e062:	e822                	sd	s0,16(sp)
    8020e064:	1000                	addi	s0,sp,32
  int sig;
  int pid;
  argint(0,&pid);
    8020e066:	fe840593          	addi	a1,s0,-24
    8020e06a:	4501                	li	a0,0
    8020e06c:	ffffd097          	auipc	ra,0xffffd
    8020e070:	cc8080e7          	jalr	-824(ra) # 8020ad34 <argint>
  argint(1,&sig);
    8020e074:	fec40593          	addi	a1,s0,-20
    8020e078:	4505                	li	a0,1
    8020e07a:	ffffd097          	auipc	ra,0xffffd
    8020e07e:	cba080e7          	jalr	-838(ra) # 8020ad34 <argint>
  return kill(pid,sig);
    8020e082:	fec42583          	lw	a1,-20(s0)
    8020e086:	fe842503          	lw	a0,-24(s0)
    8020e08a:	ffff4097          	auipc	ra,0xffff4
    8020e08e:	2f6080e7          	jalr	758(ra) # 80202380 <kill>
}
    8020e092:	60e2                	ld	ra,24(sp)
    8020e094:	6442                	ld	s0,16(sp)
    8020e096:	6105                	addi	sp,sp,32
    8020e098:	8082                	ret

000000008020e09a <sys_tgkill>:

uint64 sys_tgkill(){
    8020e09a:	1101                	addi	sp,sp,-32
    8020e09c:	ec06                	sd	ra,24(sp)
    8020e09e:	e822                	sd	s0,16(sp)
    8020e0a0:	1000                	addi	s0,sp,32
  int sig;
  int tid;
  int pid;
  argint(0,&pid);
    8020e0a2:	fe440593          	addi	a1,s0,-28
    8020e0a6:	4501                	li	a0,0
    8020e0a8:	ffffd097          	auipc	ra,0xffffd
    8020e0ac:	c8c080e7          	jalr	-884(ra) # 8020ad34 <argint>
  argint(1,&tid);
    8020e0b0:	fe840593          	addi	a1,s0,-24
    8020e0b4:	4505                	li	a0,1
    8020e0b6:	ffffd097          	auipc	ra,0xffffd
    8020e0ba:	c7e080e7          	jalr	-898(ra) # 8020ad34 <argint>
  argint(2,&sig);
    8020e0be:	fec40593          	addi	a1,s0,-20
    8020e0c2:	4509                	li	a0,2
    8020e0c4:	ffffd097          	auipc	ra,0xffffd
    8020e0c8:	c70080e7          	jalr	-912(ra) # 8020ad34 <argint>
  return tgkill(pid,tid,sig);
    8020e0cc:	fec42603          	lw	a2,-20(s0)
    8020e0d0:	fe842583          	lw	a1,-24(s0)
    8020e0d4:	fe442503          	lw	a0,-28(s0)
    8020e0d8:	ffff4097          	auipc	ra,0xffff4
    8020e0dc:	380080e7          	jalr	896(ra) # 80202458 <tgkill>
}
    8020e0e0:	60e2                	ld	ra,24(sp)
    8020e0e2:	6442                	ld	s0,16(sp)
    8020e0e4:	6105                	addi	sp,sp,32
    8020e0e6:	8082                	ret

000000008020e0e8 <sys_mmap>:
#include "include/printf.h"
#include "include/errno.h"

uint64
sys_mmap(void)
{
    8020e0e8:	7179                	addi	sp,sp,-48
    8020e0ea:	f406                	sd	ra,40(sp)
    8020e0ec:	f022                	sd	s0,32(sp)
    8020e0ee:	1800                	addi	s0,sp,48
  uint64 len;
  int prot;
  int flags;
  int fd;
  int off;
  if(argaddr(0, &start) < 0)
    8020e0f0:	fe840593          	addi	a1,s0,-24
    8020e0f4:	4501                	li	a0,0
    8020e0f6:	ffffd097          	auipc	ra,0xffffd
    8020e0fa:	c60080e7          	jalr	-928(ra) # 8020ad56 <argaddr>
    return -1;
    8020e0fe:	57fd                	li	a5,-1
  if(argaddr(0, &start) < 0)
    8020e100:	08054b63          	bltz	a0,8020e196 <sys_mmap+0xae>
  if(argaddr(1, &len) < 0)
    8020e104:	fe040593          	addi	a1,s0,-32
    8020e108:	4505                	li	a0,1
    8020e10a:	ffffd097          	auipc	ra,0xffffd
    8020e10e:	c4c080e7          	jalr	-948(ra) # 8020ad56 <argaddr>
    return -1;
    8020e112:	57fd                	li	a5,-1
  if(argaddr(1, &len) < 0)
    8020e114:	08054163          	bltz	a0,8020e196 <sys_mmap+0xae>
  if(argint(2, &prot) < 0)
    8020e118:	fdc40593          	addi	a1,s0,-36
    8020e11c:	4509                	li	a0,2
    8020e11e:	ffffd097          	auipc	ra,0xffffd
    8020e122:	c16080e7          	jalr	-1002(ra) # 8020ad34 <argint>
    return -1;
    8020e126:	57fd                	li	a5,-1
  if(argint(2, &prot) < 0)
    8020e128:	06054763          	bltz	a0,8020e196 <sys_mmap+0xae>
  if(argint(3, &flags) < 0)
    8020e12c:	fd840593          	addi	a1,s0,-40
    8020e130:	450d                	li	a0,3
    8020e132:	ffffd097          	auipc	ra,0xffffd
    8020e136:	c02080e7          	jalr	-1022(ra) # 8020ad34 <argint>
    return -1;
    8020e13a:	57fd                	li	a5,-1
  if(argint(3, &flags) < 0)
    8020e13c:	04054d63          	bltz	a0,8020e196 <sys_mmap+0xae>
  if(argfd(4, &fd, NULL) < 0 && fd!=-1){
    8020e140:	4601                	li	a2,0
    8020e142:	fd440593          	addi	a1,s0,-44
    8020e146:	4511                	li	a0,4
    8020e148:	ffffd097          	auipc	ra,0xffffd
    8020e14c:	c60080e7          	jalr	-928(ra) # 8020ada8 <argfd>
    8020e150:	00055863          	bgez	a0,8020e160 <sys_mmap+0x78>
    8020e154:	fd442683          	lw	a3,-44(s0)
    8020e158:	577d                	li	a4,-1
    //printf("fd:%d\n",fd);
    return -1;
    8020e15a:	57fd                	li	a5,-1
  if(argfd(4, &fd, NULL) < 0 && fd!=-1){
    8020e15c:	02e69d63          	bne	a3,a4,8020e196 <sys_mmap+0xae>
  }
  if(argint(5, &off) < 0)
    8020e160:	fd040593          	addi	a1,s0,-48
    8020e164:	4515                	li	a0,5
    8020e166:	ffffd097          	auipc	ra,0xffffd
    8020e16a:	bce080e7          	jalr	-1074(ra) # 8020ad34 <argint>
    return -1;
    8020e16e:	57fd                	li	a5,-1
  if(argint(5, &off) < 0)
    8020e170:	02054363          	bltz	a0,8020e196 <sys_mmap+0xae>

  uint64 ret = do_mmap(start, len, prot, flags, fd, off);
    8020e174:	fd042783          	lw	a5,-48(s0)
    8020e178:	fd442703          	lw	a4,-44(s0)
    8020e17c:	fd842683          	lw	a3,-40(s0)
    8020e180:	fdc42603          	lw	a2,-36(s0)
    8020e184:	fe043583          	ld	a1,-32(s0)
    8020e188:	fe843503          	ld	a0,-24(s0)
    8020e18c:	ffffc097          	auipc	ra,0xffffc
    8020e190:	65a080e7          	jalr	1626(ra) # 8020a7e6 <do_mmap>
    8020e194:	87aa                	mv	a5,a0
  // printf("[sys_map] ret(start) = %p\n",ret);
  return ret;
}
    8020e196:	853e                	mv	a0,a5
    8020e198:	70a2                	ld	ra,40(sp)
    8020e19a:	7402                	ld	s0,32(sp)
    8020e19c:	6145                	addi	sp,sp,48
    8020e19e:	8082                	ret

000000008020e1a0 <sys_brk>:

uint64
sys_brk(void)
{
    8020e1a0:	1101                	addi	sp,sp,-32
    8020e1a2:	ec06                	sd	ra,24(sp)
    8020e1a4:	e822                	sd	s0,16(sp)
    8020e1a6:	1000                	addi	s0,sp,32
  int n;
  if(argint(0, &n) < 0)
    8020e1a8:	fec40593          	addi	a1,s0,-20
    8020e1ac:	4501                	li	a0,0
    8020e1ae:	ffffd097          	auipc	ra,0xffffd
    8020e1b2:	b86080e7          	jalr	-1146(ra) # 8020ad34 <argint>
    8020e1b6:	87aa                	mv	a5,a0
    return -1;
    8020e1b8:	557d                	li	a0,-1
  if(argint(0, &n) < 0)
    8020e1ba:	0007c863          	bltz	a5,8020e1ca <sys_brk+0x2a>
  return growproc(n);
    8020e1be:	fec42503          	lw	a0,-20(s0)
    8020e1c2:	ffffc097          	auipc	ra,0xffffc
    8020e1c6:	458080e7          	jalr	1112(ra) # 8020a61a <growproc>
}
    8020e1ca:	60e2                	ld	ra,24(sp)
    8020e1cc:	6442                	ld	s0,16(sp)
    8020e1ce:	6105                	addi	sp,sp,32
    8020e1d0:	8082                	ret

000000008020e1d2 <sys_munmap>:

uint64
sys_munmap(void)
{
    8020e1d2:	1101                	addi	sp,sp,-32
    8020e1d4:	ec06                	sd	ra,24(sp)
    8020e1d6:	e822                	sd	s0,16(sp)
    8020e1d8:	1000                	addi	s0,sp,32
  uint64 start;
  uint64 len;
  if(argaddr(0, &start) < 0 || argaddr(1, &len) < 0){
    8020e1da:	fe840593          	addi	a1,s0,-24
    8020e1de:	4501                	li	a0,0
    8020e1e0:	ffffd097          	auipc	ra,0xffffd
    8020e1e4:	b76080e7          	jalr	-1162(ra) # 8020ad56 <argaddr>
    return -1;
    8020e1e8:	57fd                	li	a5,-1
  if(argaddr(0, &start) < 0 || argaddr(1, &len) < 0){
    8020e1ea:	02054663          	bltz	a0,8020e216 <sys_munmap+0x44>
    8020e1ee:	fe040593          	addi	a1,s0,-32
    8020e1f2:	4505                	li	a0,1
    8020e1f4:	ffffd097          	auipc	ra,0xffffd
    8020e1f8:	b62080e7          	jalr	-1182(ra) # 8020ad56 <argaddr>
    return -1;
    8020e1fc:	57fd                	li	a5,-1
  if(argaddr(0, &start) < 0 || argaddr(1, &len) < 0){
    8020e1fe:	00054c63          	bltz	a0,8020e216 <sys_munmap+0x44>
  }
  return do_munmap(NULL, start, len);
    8020e202:	fe043603          	ld	a2,-32(s0)
    8020e206:	fe843583          	ld	a1,-24(s0)
    8020e20a:	4501                	li	a0,0
    8020e20c:	ffffd097          	auipc	ra,0xffffd
    8020e210:	85a080e7          	jalr	-1958(ra) # 8020aa66 <do_munmap>
    8020e214:	87aa                	mv	a5,a0
}
    8020e216:	853e                	mv	a0,a5
    8020e218:	60e2                	ld	ra,24(sp)
    8020e21a:	6442                	ld	s0,16(sp)
    8020e21c:	6105                	addi	sp,sp,32
    8020e21e:	8082                	ret

000000008020e220 <sys_mprotect>:

uint64
sys_mprotect(void)
{
    8020e220:	7179                	addi	sp,sp,-48
    8020e222:	f406                	sd	ra,40(sp)
    8020e224:	f022                	sd	s0,32(sp)
    8020e226:	1800                	addi	s0,sp,48
  uint64 addr;
  uint64 len;
  int prot;
  if(argaddr(0, &addr) < 0)
    8020e228:	fe840593          	addi	a1,s0,-24
    8020e22c:	4501                	li	a0,0
    8020e22e:	ffffd097          	auipc	ra,0xffffd
    8020e232:	b28080e7          	jalr	-1240(ra) # 8020ad56 <argaddr>
  {
    return -1;
    8020e236:	57fd                	li	a5,-1
  if(argaddr(0, &addr) < 0)
    8020e238:	04054e63          	bltz	a0,8020e294 <sys_mprotect+0x74>
  }
  if(argaddr(1, &len) < 0)
    8020e23c:	fe040593          	addi	a1,s0,-32
    8020e240:	4505                	li	a0,1
    8020e242:	ffffd097          	auipc	ra,0xffffd
    8020e246:	b14080e7          	jalr	-1260(ra) # 8020ad56 <argaddr>
  {
    return -1;
    8020e24a:	57fd                	li	a5,-1
  if(argaddr(1, &len) < 0)
    8020e24c:	04054463          	bltz	a0,8020e294 <sys_mprotect+0x74>
  }
  if(argint(2, &prot) < 0)
    8020e250:	fdc40593          	addi	a1,s0,-36
    8020e254:	4509                	li	a0,2
    8020e256:	ffffd097          	auipc	ra,0xffffd
    8020e25a:	ade080e7          	jalr	-1314(ra) # 8020ad34 <argint>
    8020e25e:	04054063          	bltz	a0,8020e29e <sys_mprotect+0x7e>
  {
    return -1;
  }
  
  int perm = 0;
  if(prot & PROT_READ) 
    8020e262:	fdc42783          	lw	a5,-36(s0)
    8020e266:	0017f613          	andi	a2,a5,1
    8020e26a:	c219                	beqz	a2,8020e270 <sys_mprotect+0x50>
    perm  |= (PTE_R | PTE_A);
    8020e26c:	04200613          	li	a2,66
  if(prot & PROT_WRITE)
    8020e270:	0027f713          	andi	a4,a5,2
    8020e274:	c319                	beqz	a4,8020e27a <sys_mprotect+0x5a>
    perm  |= (PTE_W | PTE_D);
    8020e276:	08466613          	ori	a2,a2,132
  if(prot & PROT_EXEC)
    8020e27a:	8b91                	andi	a5,a5,4
    8020e27c:	c399                	beqz	a5,8020e282 <sys_mprotect+0x62>
    perm  |= (PTE_X | PTE_A);
    8020e27e:	04866613          	ori	a2,a2,72
    
  return uvmprotect(addr, len, perm);
    8020e282:	fe043583          	ld	a1,-32(s0)
    8020e286:	fe843503          	ld	a0,-24(s0)
    8020e28a:	ffffa097          	auipc	ra,0xffffa
    8020e28e:	32c080e7          	jalr	812(ra) # 802085b6 <uvmprotect>
    8020e292:	87aa                	mv	a5,a0
}
    8020e294:	853e                	mv	a0,a5
    8020e296:	70a2                	ld	ra,40(sp)
    8020e298:	7402                	ld	s0,32(sp)
    8020e29a:	6145                	addi	sp,sp,48
    8020e29c:	8082                	ret
    return -1;
    8020e29e:	57fd                	li	a5,-1
    8020e2a0:	bfd5                	j	8020e294 <sys_mprotect+0x74>

000000008020e2a2 <syscall>:
	[SYS_wait4]	"wait4",
	[SYS_renameat2]	"renameat2",
};
void
syscall(void)
{
    8020e2a2:	7179                	addi	sp,sp,-48
    8020e2a4:	f406                	sd	ra,40(sp)
    8020e2a6:	f022                	sd	s0,32(sp)
    8020e2a8:	ec26                	sd	s1,24(sp)
    8020e2aa:	e84a                	sd	s2,16(sp)
    8020e2ac:	e44e                	sd	s3,8(sp)
    8020e2ae:	1800                	addi	s0,sp,48
  int num;
  struct proc *p = myproc();
    8020e2b0:	ffffc097          	auipc	ra,0xffffc
    8020e2b4:	87a080e7          	jalr	-1926(ra) # 80209b2a <myproc>
    8020e2b8:	84aa                	mv	s1,a0

  num = p->trapframe->a7;
    8020e2ba:	06853903          	ld	s2,104(a0)
    8020e2be:	0a893783          	ld	a5,168(s2)
    8020e2c2:	0007899b          	sext.w	s3,a5
  if(num > 0 && num < NELEM(syscalls) && syscalls[num]) {
    8020e2c6:	37fd                	addiw	a5,a5,-1
    8020e2c8:	11300713          	li	a4,275
    8020e2cc:	04f76863          	bltu	a4,a5,8020e31c <syscall+0x7a>
    8020e2d0:	00399713          	slli	a4,s3,0x3
    8020e2d4:	00005797          	auipc	a5,0x5
    8020e2d8:	67478793          	addi	a5,a5,1652 # 80213948 <syscalls>
    8020e2dc:	97ba                	add	a5,a5,a4
    8020e2de:	639c                	ld	a5,0(a5)
    8020e2e0:	cf95                	beqz	a5,8020e31c <syscall+0x7a>
    //printf("syscall %d:%s\n",num,sysnames[num]);
    p->trapframe->a0 = syscalls[num]();
    8020e2e2:	9782                	jalr	a5
    8020e2e4:	06a93823          	sd	a0,112(s2)
        // trace
    if ((p->tmask & (1 << num)) != 0) {
    8020e2e8:	1144a783          	lw	a5,276(s1)
    8020e2ec:	4137d7bb          	sraw	a5,a5,s3
    8020e2f0:	8b85                	andi	a5,a5,1
    8020e2f2:	c7a1                	beqz	a5,8020e33a <syscall+0x98>
      printf("pid %d: %s -> %d\n", p->pid, sysnames[num], p->trapframe->a0);
    8020e2f4:	74b8                	ld	a4,104(s1)
    8020e2f6:	098e                	slli	s3,s3,0x3
    8020e2f8:	00005797          	auipc	a5,0x5
    8020e2fc:	da878793          	addi	a5,a5,-600 # 802130a0 <sysnames>
    8020e300:	99be                	add	s3,s3,a5
    8020e302:	7b34                	ld	a3,112(a4)
    8020e304:	0009b603          	ld	a2,0(s3)
    8020e308:	40ac                	lw	a1,64(s1)
    8020e30a:	00005517          	auipc	a0,0x5
    8020e30e:	b0650513          	addi	a0,a0,-1274 # 80212e10 <UNAME_VERSION+0x320>
    8020e312:	ffff9097          	auipc	ra,0xffff9
    8020e316:	c06080e7          	jalr	-1018(ra) # 80206f18 <printf>
    8020e31a:	a005                	j	8020e33a <syscall+0x98>
    }
  } else {
    printf("pid %d %s: unknown sys call %d\n",
    8020e31c:	86ce                	mv	a3,s3
    8020e31e:	10048613          	addi	a2,s1,256
    8020e322:	40ac                	lw	a1,64(s1)
    8020e324:	00005517          	auipc	a0,0x5
    8020e328:	b0450513          	addi	a0,a0,-1276 # 80212e28 <UNAME_VERSION+0x338>
    8020e32c:	ffff9097          	auipc	ra,0xffff9
    8020e330:	bec080e7          	jalr	-1044(ra) # 80206f18 <printf>
            p->pid, p->name, num);
    p->trapframe->a0 = -1;
    8020e334:	74bc                	ld	a5,104(s1)
    8020e336:	577d                	li	a4,-1
    8020e338:	fbb8                	sd	a4,112(a5)
  }
}
    8020e33a:	70a2                	ld	ra,40(sp)
    8020e33c:	7402                	ld	s0,32(sp)
    8020e33e:	64e2                	ld	s1,24(sp)
    8020e340:	6942                	ld	s2,16(sp)
    8020e342:	69a2                	ld	s3,8(sp)
    8020e344:	6145                	addi	sp,sp,48
    8020e346:	8082                	ret
	...

000000008020f000 <_trampoline>:
    8020f000:	14051573          	csrrw	a0,sscratch,a0
    8020f004:	02153423          	sd	ra,40(a0)
    8020f008:	02253823          	sd	sp,48(a0)
    8020f00c:	02353c23          	sd	gp,56(a0)
    8020f010:	04453023          	sd	tp,64(a0)
    8020f014:	04553423          	sd	t0,72(a0)
    8020f018:	04653823          	sd	t1,80(a0)
    8020f01c:	04753c23          	sd	t2,88(a0)
    8020f020:	f120                	sd	s0,96(a0)
    8020f022:	f524                	sd	s1,104(a0)
    8020f024:	fd2c                	sd	a1,120(a0)
    8020f026:	e150                	sd	a2,128(a0)
    8020f028:	e554                	sd	a3,136(a0)
    8020f02a:	e958                	sd	a4,144(a0)
    8020f02c:	ed5c                	sd	a5,152(a0)
    8020f02e:	0b053023          	sd	a6,160(a0)
    8020f032:	0b153423          	sd	a7,168(a0)
    8020f036:	0b253823          	sd	s2,176(a0)
    8020f03a:	0b353c23          	sd	s3,184(a0)
    8020f03e:	0d453023          	sd	s4,192(a0)
    8020f042:	0d553423          	sd	s5,200(a0)
    8020f046:	0d653823          	sd	s6,208(a0)
    8020f04a:	0d753c23          	sd	s7,216(a0)
    8020f04e:	0f853023          	sd	s8,224(a0)
    8020f052:	0f953423          	sd	s9,232(a0)
    8020f056:	0fa53823          	sd	s10,240(a0)
    8020f05a:	0fb53c23          	sd	s11,248(a0)
    8020f05e:	11c53023          	sd	t3,256(a0)
    8020f062:	11d53423          	sd	t4,264(a0)
    8020f066:	11e53823          	sd	t5,272(a0)
    8020f06a:	11f53c23          	sd	t6,280(a0)
    8020f06e:	140022f3          	csrr	t0,sscratch
    8020f072:	06553823          	sd	t0,112(a0)
    8020f076:	00853103          	ld	sp,8(a0)
    8020f07a:	02053203          	ld	tp,32(a0)
    8020f07e:	01053283          	ld	t0,16(a0)
    8020f082:	00053303          	ld	t1,0(a0)
    8020f086:	18031073          	csrw	satp,t1
    8020f08a:	12000073          	sfence.vma
    8020f08e:	8282                	jr	t0

000000008020f090 <userret>:
    8020f090:	18059073          	csrw	satp,a1
    8020f094:	12000073          	sfence.vma
    8020f098:	07053283          	ld	t0,112(a0)
    8020f09c:	14029073          	csrw	sscratch,t0
    8020f0a0:	02853083          	ld	ra,40(a0)
    8020f0a4:	03053103          	ld	sp,48(a0)
    8020f0a8:	03853183          	ld	gp,56(a0)
    8020f0ac:	04053203          	ld	tp,64(a0)
    8020f0b0:	04853283          	ld	t0,72(a0)
    8020f0b4:	05053303          	ld	t1,80(a0)
    8020f0b8:	05853383          	ld	t2,88(a0)
    8020f0bc:	7120                	ld	s0,96(a0)
    8020f0be:	7524                	ld	s1,104(a0)
    8020f0c0:	7d2c                	ld	a1,120(a0)
    8020f0c2:	6150                	ld	a2,128(a0)
    8020f0c4:	6554                	ld	a3,136(a0)
    8020f0c6:	6958                	ld	a4,144(a0)
    8020f0c8:	6d5c                	ld	a5,152(a0)
    8020f0ca:	0a053803          	ld	a6,160(a0)
    8020f0ce:	0a853883          	ld	a7,168(a0)
    8020f0d2:	0b053903          	ld	s2,176(a0)
    8020f0d6:	0b853983          	ld	s3,184(a0)
    8020f0da:	0c053a03          	ld	s4,192(a0)
    8020f0de:	0c853a83          	ld	s5,200(a0)
    8020f0e2:	0d053b03          	ld	s6,208(a0)
    8020f0e6:	0d853b83          	ld	s7,216(a0)
    8020f0ea:	0e053c03          	ld	s8,224(a0)
    8020f0ee:	0e853c83          	ld	s9,232(a0)
    8020f0f2:	0f053d03          	ld	s10,240(a0)
    8020f0f6:	0f853d83          	ld	s11,248(a0)
    8020f0fa:	10053e03          	ld	t3,256(a0)
    8020f0fe:	10853e83          	ld	t4,264(a0)
    8020f102:	11053f03          	ld	t5,272(a0)
    8020f106:	11853f83          	ld	t6,280(a0)
    8020f10a:	14051573          	csrrw	a0,sscratch,a0
    8020f10e:	10200073          	sret
	...

0000000080210000 <_sig_trampoline>:
    80210000:	9582                	jalr	a1
    80210002:	08b00893          	li	a7,139
    80210006:	00000073          	ecall

000000008021000a <default_sigaction>:
    8021000a:	557d                	li	a0,-1
    8021000c:	05d00893          	li	a7,93
    80210010:	00000073          	ecall
	...
